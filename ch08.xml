<chapter id="pfs-ch-8">

<title>Managing Volunteers</title>

<simplesect>

<para>Getting people to agree on what the project needs, and to work
together to achieve it, requires more than just a genial atmosphere
and a lack of obvious dysfunction.  It needs someone (or several
people) thinking like a manager&mdash;like a
<emphasis>people</emphasis> manager.  While not a technical craft in
the same sense that computer programming is, managing volunteers is
still a craft in the sense that it can be improved through study and
practice.  This chapter is a grab-bag of specific techniques for
managing volunteers.  It draws, perhaps even more heavily than
previous chapters, on the Subversion project as a case study, partly
because I am very familiar with that project and have all the primary
sources close at hand, and partly because it's more acceptable to cast
critical stones into one's own glass house than into others'.  But I
have also seen in various other projects the benefits of
applying&mdash;and consequences of not applying&mdash;the
recommendations that follow; when it is politically feasible to name
some of those other projects, I will do so.</para>

<para>Speaking of politics, this is as good a time as any to drag that
much-maligned word out for a closer look.  Many programmers like to
believe that politics <remark>[... working here ...]</remark></para>

<para><remark>Arguments happen.  Politics are inevitable; explain why
there is no such thing as "pure" politics.  How to deal with this,
especially in communities where people like to think that they're
immune to politics, or that if everyone would just look at the
technical issues objectively "...they'd see that I'm right!" :-)
</remark></para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-volunteers">
<title>Getting the Most Out of Volunteers</title>

<para><remark>How to get the most out of volunteers.  When to do
something yourself, when to ask someone else.  Especially, clearly
distinguish between inquiry and assignment: "Do you, with your
expertise, have any comments on X?" versus "Joe, we'll assume you're
handling this unless you say otherwise."  People must not feel taken
for granted.  Avoid praise inflation, but make criticism sound like a
form of praise, at least until you're ready to give up on
someone.</remark></para>

<para><remark>(For example, note the social conventions that govern
automated and third-party assignation.  Scheduling bugs: technical
assignation versus actual acceptance of responsibility&mdash;make sure
to clarify the difference early on.[If this gets its own subsection,
then fix up ref in ch 3 bug tracking.]</remark></para>

<para><remark>Never let a human do what a machine could do.  AS a rule
of thumb, I think it's worth spending 10x the amount of time needed
for one manual operation on automating that operation.  For example,
handling redundancy (ChangeLogs in CVS, 'cvs log', 'svn log', CIA
logs, etc).  Same information, different presentations.  What if some
pages have to be autogenerated?  Make it bone-simple, and make a
pre-commit hook to check that the regeneration happened.  Whatever
time you have to spend on this, it's worth it.  The badness that can
result if you don't do it is destructive not only because of the
wasted time, but because of the bad feelings and griping that ensue
when humans forget (as they inevitably will) to do what the machine
should have been doing for them anyway.  (Mention cvs2cl for CVS
here?)</remark></para>

<para><remark>(Discussion about always asking someone to do something,
but tell them to ping you if they can't, and remember independently
anyway.)</remark></para>

<para><remark>(Example: how it's possible to train volunteers to
adhere to very complex development guidelines, if you do it amiably
and always being understanding of slips.  Tell the you-know-who story:
remember being amazed at how they claimed they could never get their
paid employees to adhere to the log message guidelines that we've
gotten virtually all Subversion developers (50+!) to adhere to
<emphasis>voluntarily</emphasis>.</remark></para>

<para><remark>(The bits below used to be in Chapter 2.  Is this a
better place?  Maybe they should be cut entirely.)</remark></para>

<para><remark>(Understanding potential volunteers' motivations will
help you set things up to attract them.  You can't build the lamp
until you know what frequencies of light the moths are attracted to.
Oh, wait, maybe that's not such a good metaphor...)</remark></para>

<para><remark>(For example, talk about the sharp distinction between
those who were interested in reaching 1.0 versus those who were
interested in adding new features to Subversion.  [Philip, Ghudson,
etc.])</remark></para>

<para><remark>(Another example: inclusion of internal issue numbers in
scarab commits.  Though not strictly about money, it is about the
relationship between internal/profit-driven, and external/volunteer
development.)</remark></para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-division-of-labor">
<title>Design to Support Division of Labor</title>

<para><remark>How to make the project's architecture support division
among many workers.  (Example: According to Tim [via Andy], Linus said
that he found it easier to get volunteers because he knew how to break
down the functionality or source code into chunks that different
people could handle.)  This will tie into material in Chapter
5(a).</remark></para>

<para><remark>Note the penalty paid by programs with complex or
non-standard build procedures.  They suffer greatly reduced
contribution rates.  Mozilla Firefox is a good example (name a
specific bug annoying me right now, and how I could probably debug it
easily, except that I can't build the danged thing).  [NOTE: there may
be some sections earlier in the book that refer to the old location of
this paragraph, in "pfs-packaging" (?  svn blame -r265 ch07.html will
say for sure), regarding importance of standardized build procedures,
especially in chapter 2.  Search for those and update them to point to
here instead.]</remark></para>

<sect3 id="pfs-automated-testing">
<title>Automated Testing</title>

<para><remark>(Regression testing: choosing the right level of
formality.  Coordinating results from human volunteers.  Spend any
effort to make tests easier to write, it will pay back manyfold.
Importance of the don't-break-the-build concept.)</remark></para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-users-to-volunteers">
<title>Treat Every User as a Potential Volunteer</title>

<para><remark>For example: take the time to teach people how to write
a good bug report, and do so publicly at least some of the time.
Corollary: don't get angry at people who file useless reports.  Just
tell them why the report isn't useful, how they can fix it, and then
wait for the next iteration.  Same goes for complaints about missing
features: don't say "talk to the hand", but do point out that it'll
get done faster if they submit a patch (and then make sure to actually
follow up and review patches obtained this way).  [If this gets its
own subsection, then fix up ref in ch 3 bug tracking.]</remark></para>

<para><remark>This strategy depends in part of having a lot of the
"teaching materials" already prepared, such as the all-caps files
(link to live example here), etc.  Make sure to link to them from
appropriate spots.</remark></para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-delegation">
<title>Share Management Tasks As Well As Technical Tasks</title>

<para> todo </para>

<screen>
   Letting volunteers share the management burden as well as the
   technical burden:

       - patch management
       - bug management
       - release management
       - documentation and FAQ maintenance
       - distributing meta-management tasks. 
       - mailing list moderation
         Note the interface conundrum here: it's more convenient to
         get moderation mails by email, but that makes it harder to
         parallelize, since it's "mail" style not "news" style.  If
         the posts appear somewhere in a centralized list, you have
         the inconvenience of having to go visit that list, but at
         least the list is up-to-date w.r.t. whatever other
         moderation others have done.  Sigh.  (Gnus is actually the
         best candidate, since it can do both mail and news, heh :-)
         However, note that if done as news, there would have to be
         a global reject mark -- once something is evaluated as spam,
         no one should ever have to look at it again.)

</screen>

<para><remark>When discussing managerial aspects of FAQ maintenance,
refer to the Chapter 6 FAQ material at <xref
linkend="pfs-all-as-archives"/>.  Delegate, delegate, delegate: get a
FAQ manager, a human who will be able to follow and sort out a thread,
post a proposed FAQ entry, recognize approval/disapproval and
incorporate comments, and add it to the FAQ.  Comment on the disaster
that is FAQ-o-Matic, at least when it is misapplied.  See <ulink
url="http://osdir.com/Article1722.phtml"/>.  (Does it mention <ulink
url="http://www.bestpractical.com/rtfm/"/>?)</remark></para>

<para><remark>Regarding bug management: full issue sweeps become less
and less feasible over time.  You eventually must evolve a system for
categorizing and prioritizing new issues based on overall context, not
on an O(N^2) comparison with all the other issues in the database.  It
is normal for the bug database to grow slowly but without bound over
time.  This is not a sign of failure.  In general, guard against the
tendency to draw conclusions from bug statistics (or commit
statistics, for that matter).  They are qualitative events, and cannot
be measured quantitatively.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-committers">
<title>Committers</title>

<para><remark>Criteria for adding committers.  Note the Hippocratic
principle.  Refer to the voting system and secrecy requirements in
<xref linkend="pfs-electorate"/>.  Describe how to boot a committer if
absolutely must, but stress importance of not getting into that
situation in the first place.  How to treat dormant committers: the
high school diploma example: your diploma does not expire, why should
commit access?  Commit access is not so much about knowledge as about
judgement and overall techical compentence.  If someone is away from
the project for a long time, that doesn't mean they lose their
judgement, so if/when they come back, they'll presumably know what
they don't know, and commit more conservatively if that's warranted.
Therefore, removing committers for inactivity is not necessary.  The
committers list should stress, however, that the order of appearance
means nothing, that there are many contributors not listed, and that
committers' levels of activity varies widely, so checking the logs is
the only way to really know what someone's done.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-redelegation">
<title>The Right Person For the Right Job</title>

<para> When and how to ask someone to step aside from a role for which
they're not suited. (Example: the SVN release manager debacle and how
it was caused it by not being sensitive enough to someone's feelings
and motivations.) </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-credit">
<title>Credit</title>

<para><remark>(introduction)</remark></para>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-crediting">
<title>Why Accurate Crediting Is Crucial</title>
<para> todo </para>
</sect2>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-displaying-credit">
<title>Techniques for Giving Credit Unobtrusively</title>
<para> todo </para>
</sect2>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-credit-abuse">
<title>Avoiding "Credit Inflation"</title>

<para><remark>Thanking everybody for everything is boring and
information-free; save the gratitude for the unexpected or impressive
stuff.  Always avoid commit-counting, and debunk it quickly if someone
else starts doing it (story of Steinmetz and the mark here).  In
general, there is always a tension between making sure that people's
individual contributions are recognized, and making the project be a
group effort rather than a collection of individual glories (hmmm,
that thought ought perhaps go at the start of this chapter).  One
guideline is: the more ephemeral the forum, the more okay it is to
thank people by name there.  IRC is great, asides in email discussions
are also okay (make sure that the thankee sees it, though!).  On the
other hand, web pages are a horrible place to do it, and announcement
emails are not a good place either, except in unusual
circumstances.</remark></para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-forks">
<title>Forks</title>

<para> How to recognize when a fork is inevitable, how to prevent it
when is isn't.  Handling forks both amicable and hostile.  </para>

<para><remark>(In explaining why there is no definitive answer to the
question of "which fork is the true fork", use the obvious
evolutionary analogy.  Point out how people will colloquially talk of
how fork F came out of project P, rather than the reverse, but this is
in effect a declaration of how that speaker feels about it.  When a
large enough percentage of observers agree, then it starts to become
objectively true.  It is fundamentally a matter of perception: that
is, it's not the case that there's an objective truth here but that we
are only imperfectly able to perceive it.  Rather, the perceptions
<emphasis>are</emphasis> the objective truth, since ultimately a
project (or a fork) is an entity that exists only in people's minds
anyway.)</remark></para>

<para><remark>Paragraph lifted from Chapter 4, may eventually have a
place here:</remark></para>

<para><remark>People tend not to use the threat of a fork as an
extremist debating technique&mdash;"Do things my way or I'll fork the
project!"&mdash;because everyone is aware that a fork which fails to
attract developers away from the original project is unlikely to
survive long.  All observers, not just developers but users and
operating system packagers too, will make their own judgement about
which side to choose.  Anyone who would contemplate initiating a fork
knows this, and would therefore want to appear extremely reluctant to
fork, so that if they finally do it, they can credibly claim it was
the only route left.  Whether they were actually reluctant or not
doesn't matter, since fake reluctance has much the same outward effect
as real reluctance.</remark></para>

<para><remark>(Similar logic underlies one's reaction to a fork: you
may be mad, may feel it was unjust, etc.  But if your goal is to
persuade developers that your side is the safest bet, then you want to
appear as non-vindictive as possible.  In war, it sometimes make
strategic sense to force people to choose sides; in free software, it
does not.)</remark></para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-forks-case-studies">
<title>Case Studies</title>

<para>todo</para>

<screen>Should these really be their own section?
        [ Case study #1: The GDB maintainership structure debate. ]
        [ Case study #2: FSF Emacs / XEmacs fork (?maybe?) ]
</screen>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

