<chapter id="pfs-ch-3">

<title>Technical Infrastructure <!-- [ 10-20 pp ] --></title>

<simplesect>

<para>Free software works because of technologies that support the
selective capture and integration of information.  The more skilled
you are at using these technologies, and at persuading others to use
them, the more successful your project will be.  This only becomes
more true as the project grows.  Good information management is what
prevents open source projects from collapsing under the weight of
Brooks' Law<footnote><para>From his book <citetitle>The Mythical Man
Month</citetitle>, 1975.  See <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> and <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"/></para></footnote>,
which observes that the complexity of a project increases as the
<emphasis>square</emphasis> of the number of participants.  When only
a few people are involved, everyone can easily talk to everyone else.
But when hundreds of people are involved, it is no longer possible for
each person to remain constantly aware of what everyone else is doing.
If good free software project management is about making everyone feel
like they're all working together in the same room, the obvious
question is: what happens when everyone in a crowded room tries to
talk at once?</para>

<para>This problem is not new.  In non-metaphorical crowded rooms, the
solution is <firstterm>parliamentary procedure</firstterm>: formal
guidelines for how to have real-time discussions in large groups, how
to make sure important dissents are not lost in floods of "me-too"
agreement, how to form subcommittees, how to recognize when decisions
are made.  An important part of parliamentary procedure is specifying
how the group interacts with its information management system.  Some
remarks are made "for the record", others are not.  The record itself
is subject to direct manipulation, and is understood to be not a
literal transcript of what occurred, but a representation of what the
group is willing to <emphasis>agree</emphasis> occurred.  The record
is not monolithic, but takes different forms for different purposes.
It comprises the minutes of individual meetings, the complete
collection of all minutes of all meetings, summaries, agendas and
their annotations, committee reports, reports from correspondents not
present, lists of action items, etc.</para>

<para>The parts of traditional parliamentary procedure that have to do
with keeping everyone quiet in a room while one person speaks we will
mostly dispense with here.  Everyone can "speak" simultaneously on the
Internet.  But in terms of information management techniques, well-run
open source projects are parliamentary procedure on steroids.  Since
almost all communication in open source projects happens in writing,
elaborate systems have evolved for routing and labeling data
appropriately, for minimizing repetitions so as to avoid spurious
divergences, for storing and retrieving data, for correcting bad or
obsolete information, and for associating disparate bits of
information with each other as new connections are observed.  Active
participants in open source projects internalize many of these
techniques, and will often perform complex manual tasks to ensure that
information is routed correctly.  But the whole endeavor ultimately
depends on sophisticated software support.  As much as possible, the
communications media themselves should do the routing, labeling, and
recording, and should make the information available to humans in the
most convenient way possible.  In practice, of course, humans will
still need to intervene at many points in the process, and it's
important that the software make such interventions convenient.  But
in general, if the humans take care to label and route information
accurately on its first entry into the system, then the software
should be configured to make as much use of that metadata as
possible.</para>

<para>The advice in this chapter is intensely practical, based on
experiences with specific software and usage patterns.  But the point
is just not to teach a particular collection of techniques.  It is
also to demonstrate, by means of many small examples, the overall
stance that will best encourage good information management in your
project.  This stance will involve a combination of technical skills
and people skills.  The technical skills are essential because
information management software always requires configuration, plus a
certain amount of ongoing maintenance and tweaking as new needs arise
(for example, see the discussion of how to handle project growth in
<xref linkend="pfs-ch-3-sect-4"/>).  The people skills are necessary
because the human community also requires maintenance: it's not always
immediately obvious how to use these tools to full advantage, and in
some cases there may be conflicting conventions between different
projects (for example, see the discussion of setting
<systemitem>Reply-to</systemitem> headers on outgoing mailing list
posts, in <xref linkend="pfs-ch-3-sect-2"/>).  Everyone involved with
the project will need to encouraged, at the right times and in the
right ways, to do their part to keep the project's information
well-organized.  The more involved the contributor, the more
specialized the techniques they can be expected to learn.</para>

<para>Information management is not a problem that can be definitively
solved.  There are too many variables.  You may finally get everything
configured just the way you want it, and most of the community
participating, but then project growth will make some of those
practices unscalable.  Or project growth may stabilize, and the
developer and user communities settle into a comfortable relationship
with the technical infrastructure, but then someone will come along
and invent a whole new information management service, and pretty soon
newcomers will be asking why your project doesn't use it (this is
happening now to a lot of free software projects that predate the
invention of the <ulink
url="http://en.wikipedia.org/wiki/Wiki">Wiki</ulink>, for example).
Many questions are matters of judgement, involving tradeoffs between
the convenience of those producing information and the convenience of
those consuming it, or between the time required to configure
information management software and the benefit it will bring to the
project.</para>

<para>Beware of the temptation to over-automate, that is, to automate
things that really require human attention.  Technical infrastructure
is important, but what makes a free software project work is care
&mdash; and intelligent application of that care &mdash; by the humans
involved.  The technical infrastructure is mainly about giving humans
convenient ways to do that.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-1">
<title>What a Project Needs</title>

<para>Most open source project offer at least a minimum, standard set
of tools for managing information:

<itemizedlist>
   <listitem>
     <para><emphasis role="bold">Web site.</emphasis>
           Primarily a centralized, one-way conduit of information,
           from the project out to the public.  The web site may
           also serve as an administrative interface for other
           project tools.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Mailing lists.</emphasis>
           Usually the most active communications forum in the
           project, and the "medium of record".</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Version control.</emphasis>
           Enables developers to manage code changes conveniently,
           including reverting and "change porting".  Enables everyone
           to watch what's happening to the code.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Bug tracking.</emphasis>
           Enables developers to keep track of what they're working
           on, coordinate with each other, plan releases.  Enables
           everyone to query the status of bugs, and record
           information (e.g., reproduction recipes) about particular
           bugs.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Realtime chat.</emphasis>
           A place for quick, lightweight discussions and
           question/answer exchanges.  Not always archived
           completely.</para>
   </listitem>
</itemizedlist>

Each tool in this set addresses a distinct need, but their functions
are also interrelated, and the tools must be taught to work with each
other.  Below we will examine how they can do so, and more
importantly, how to get people to use them.  The web site is not
discussed until the end, since it's more glue for the other components
than a tool unto itself.</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-2">
<title>Mailing Lists</title>

<para>Mailing lists are the bread and butter of project
communications.  If a user is active in any forum at all besides the
web pages, it is most likely to be one of the project's mailing lists.
But before they experience the mailing list itself, they will
experience the mailing list interface &mdash; that is, the mechanism
by which they join ("subscribe to") the list.  Which brings us to Rule
#1 of mailing lists:

<blockquote>
   <para><emphasis>Don't try to manage mailing lists by hand
   &mdash; get list management software.</emphasis></para>  
</blockquote>

It will be tempting to put this off.  Setting up mailing list
management software might seem like overkill at first.  Managing
small, low-traffic lists by hand will seem seductively easy: you just
set up a subscription address that forwards to you, and when someone
mails it, you add (or remove) their email address in some text file
that holds all the addresses on the list.  What could be
simpler?</para>

<para>The trick is that good mailing list management &mdash; which
is what people have come to expect &mdash; is not simple at all.  It's
not just about subscribing and unsubscribing users when they request.
It's also about moderating to prevent spam, about offering the mailing
list in digest versus message-by-message form, about providing various
sorts of standard list and project information by means of
auto-responders, and various other things.  A human being monitoring a
subscription address can supply only a bare minimum of functionality,
and even then not as reliably and promptly as software could.</para>

<para>Modern list management software usually offers at least the
following features:</para>

<itemizedlist>
  <listitem><para>Both email- and web-based subscription.  When a user
            subscribes to a list, they <emphasis>promptly</emphasis>
            get an automated welcome message in reply, telling them
            what they have subscribed to, how to interact further with
            the mailing list software, and (most importantly) how to
            unsubscribe.  This automatic reply can be customized to
            contain project-specific information, of course, such as
            the project's web site, FAQ location, etc.</para>
  </listitem>

  <listitem><para>Subscription in either digest mode or
            message-by-message mode.  In digest mode, the subscriber
            receives one email per day, containing all the list
            activity for that day.  For people who are following a
            list loosely, without participating, digest mode is often
            preferable, because it allows them to scan all the
            subjects at once, and avoid the distraction of emails
            coming in at random times.</para>
  </listitem>

  <listitem><para>Moderation features.  To "moderate" is to check
            posts to make sure they are a)&nbsp;not&nbsp;spam, and
            b)&nbsp;on&nbsp;topic, before they go out to the entire
            list.  Moderation necessarily involves humans, but
            software can do a lot to make it easier.  There will be
            more said about moderation below.</para>
  </listitem>

  <listitem><para>An administrative interface.  Among other things,
            this enables an administrator to go in and remove obsolete
            addresses easily.  This can become urgent when a
            recipient's address starts sending automatic "I am no
            longer at this address" replies back to the list in
            response to every list post.  (Some mailing list software
            can even detect this by itself and unsubscribe the person
            automatically.)</para> </listitem>

  <listitem><para>Header manipulation.  Many people have sophisticated
            filtering and replying rules set up in their mailreaders.
            Mailing list software can add and manipulate certain
            standard headers for these people to take advantage
            of (more details below).</para>
  </listitem>

  <listitem><para>Archiving.  All posts to the managed lists are
            stored and made available on the web; alternatively, some
            mailing list software offers special interfaces for
            plugging in an external archiving tool such as <ulink
            url="http://www.mhonarc.org/"
            >MHonArc</ulink>.  As <xref linkend="pfs-ch-5-sect-4"/>
            discusses, archiving is crucial.</para>
  </listitem>

</itemizedlist>

<para>The point of all this is merely to emphasize that mailing list
management is a complex problem that has been given a lot of thought,
and mostly been solved.  You certainly don't need to become an expert
in it.  But you should be aware that there's always room to learn
more, and that list management will occupy your attention from time to
time in the course of running a free software project.  Below we'll
examine a few of the most common mailing list configuration
issues.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.1">
<title>Spam Prevention</title>

<para>Between when this sentence is written and when it is published,
the Internet-wide spam problem will probably double in severity
&mdash; or at least it will feel that way.  There was a time, not so
long ago, when one could run a mailing list without taking any
spam-prevention measures at all.  There occasional stray post would
still show up, but infrequently enough to be only a low-level
annoyance.  That era is gone forever.  Today, a mailing list that
takes no spam prevention measures will quickly be submerged in junk
emails, to the point of unuseability.  Spam prevention is now
mandatory.</para>

<para>We divide spam prevention into two categories: preventing spam
posts from appearing on your mailing lists, and preventing your
mailing list from being a source of new email addresses for spammers'
harvesters.  Of the two, the former is more important, so we examine
it first.</para>

<sect3 id="pfs-ch-3-sect-2.1.1">
<title>Filtering Posts</title>

<para>There are three basic techniques for preventing spam posts, and
most mailing list software offers all three.  They are best used in
tandem:</para>

<orderedlist>

  <listitem><para><emphasis role="bold">Only auto-allow postings from
            list subscribers.</emphasis></para>

            <para>This is effective as far as it goes, and also
            involves very little administrative overhead, since it's
            usually just a matter of changing a setting in the mailing
            list software's configuration.  But note that posts which
            aren't automatically approved must not be simply
            discarded.  Instead, they should be passed along for
            moderation, for two reasons.  First, you want to allow
            non-subscribers to post.  A person with a question or
            suggestion should not need to subscribe to a mailing list
            just to make a single post there.  Second, even
            subscribers may sometimes post from an address other than
            the one by which they're subscribed.  Email addresses are
            not a reliable method of identifying people, and shouldn't
            be treated as such.</para>
            </listitem>

  <listitem><para><emphasis role="bold">Filter posts through
            spam-filtering software.</emphasis></para>

            <para>If the mailing list software makes it possible (most
            does), you can have posts filtered by spam-filtering
            software.  Automatic spam-filtering is not perfect, and
            never will be, since there is a never-ending arms race
            between spammers and filter writers.  However, it can
            greatly reduce the amount of spam that gets through to the
            moderation queue, and since the longer that queue is the
            more time humans must spend examining it, any amount of
            automated filtering is beneficial.</para>

            <para>There is not space here for detailed instructions
            on setting up spam filters.  You will have to consult
            your mailing list software's documentation for that (see
            <xref linkend="pfs-ch-3-sect-2.5"/>).  Some list software
            allows the use of external spam filters.  I've had good
            experiences with these two:
            <ulink url="http://spamassassin.apache.org/"
               >SpamAssassin&nbsp;(http://spamassassin.apache.org/)</ulink>
            and <ulink url="http://spamprobe.sourceforge.net/"
               >SpamProbe&nbsp;(http://spamprobe.sourceforge.net/)</ulink>
            This is not a comment on the many other open source spam
            filters out there, some of which are apparently also
            quite good.  I just happen to have used those two myself
            and been satisfied with them.</para>
  </listitem>

  <listitem><para><emphasis role="bold">Moderation.</emphasis></para>
            <para>For mails that aren't automatically allowed by
            virtue of being from a list subscriber, and which make it
            through the spam filtering software if any, the last stage
            is <firstterm>moderation</firstterm>: the mail is routed
            to a special address, where a human examines it and
            accepts or rejects it.</para>

            <para>Confirming a post takes one of two forms: you can
            accept the post just this once, or you can tell the list
            software to allow this and all future posts from the same
            sender.  You almost always want to do the latter, in order
            to reduce the future moderation burden.  Details on how
            to confirm vary from system to system, but it's usually a
            matter of replying to a special address with the command
            "allow" (meaning allow just this one post) or "accept"
            (accept this and future posts).</para>

            <para>Rejecting is usually done by simply ignoring the
            moderation mail.  If the list software never receives
            confirmation that something is a valid post, then it won't
            pass that post on to the list, so simply dropping the
            moderation mail achieves the desired effect.  Sometimes
            you also have the option of responding with a "reject" or
            "deny" command, to automatically disapprove future mails
            from the same sender without even running them through
            moderation.  There is rarely any point doing this, since
            moderation is mostly about spam prevention, and spammers
            tend not to send from the same address twice anyway.</para>
            </listitem>
</orderedlist>

<para>Be sure to use moderation <emphasis>only</emphasis> for
filtering out spams and clearly off-topic messages (such as when
someone accidentally posts to the wrong mailing list).  The moderation
system will usually give you a way to respond directly to the sender
of the original post, but don't use that channel to answer questions
that really belong on the mailing list itself, even if you know the
answer off the top of your head.  To do so would deprive the project's
community of an accurate picture of what sorts of questions people are
asking, and deprive them of a chance to answer questions themselves
and/or see answers from others.  Mailing list moderation is strictly
about keeping the list free of junk and off-topic emails, nothing
more.</para>

</sect3>

<sect3 id="pfs-ch-3-sect-2.1.2">
<title>Address Hiding in Archives</title>

<para>To prevent your mailing lists from being a source of addresses
for spammers, a common technique is for the archives to obscure
people's email addresses, for example by replacing

    <blockquote>
      <para><literal>jrandom@somedomain.com</literal></para>
    </blockquote>

with

    <blockquote>
      <literal>jrandom_AT_somedomain.com</literal>
    </blockquote>

or

    <blockquote>
      <literal>jrandom{AT}somedomain.com</literal>
    </blockquote>

or some similarly obvious (to a human) encoding.  Since spam address
harvesters often work by crawling through web pages &mdash; including
your mailing list's online archives &mdash; and looking for sequences
containing "@", encoding the addresses is a way of making people's
email addresses invisible to spammers.  This does nothing to prevent
spam sent to the mailing list, of course, but it helps avoid
increasing the amount of spam sent directly to list users' personal
addresses.</para>

<para>Address hiding can be controversial.  Some people like it a lot,
and will be surprised if your archives don't do it automatically.
Other people think it's too much of an inconvenience (because humans
also have to translate the addresses back before using them).
Sometimes people assert that it's ineffective, because a harvester can
as easily recognize a pattern involving "_AT_" as one involving "@";
however, note that there's empirial evidence that address hiding
<emphasis>is</emphasis> effective, see <ulink
url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>

<para>Ideally, the list management software would leave the choice up
to each individual subscriber, either through a special yes/no header
or a setting in that subscriber's list account preferences.  However,
I don't know of any software which offers per-subscriber or per-post
choice in the matter, so for now the list manager must make a decision
for everyone (assuming the archiver offers the feature at all, which
is not always the case).  I lean very mildly toward turning
address-hiding on.  Some people are very careful to avoid posting
their email addresses on web pages or anywhere else a spam harvester
might see it, and they would be disappointed to have all that care
thrown away by a mailing list archive; meanwhile, the inconvenience
address hiding imposes on archive users is very slight, since it's
trivial to transform an obscured address back to a valid one if you
need to reach the person.  But keep in mind that, in the end, it's
still an arms race: by the time you read this, harvesters might well
have evolved to the point where they can recognize most common forms
of hiding, and we'll have to think of something else.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.2">
<title>Identification and Header Management</title>

<para>List subscribers often want to put mails from the list into a
project-specific folder, separate from their other mail.  Their
mailreading software can do this automatically by examining the mail's
<firstterm>headers</firstterm>.  The headers are the fields at the top
of the mail that indicate the sender, recipient, subject, date, and
various other things about the message.  Certain headers are
well-known and effectively mandatory:

<screen>
     From: ...
     To: ...
     Subject: ...
     Date: ...
</screen>

Others are optional, though still quite standard.  For example, emails
are not strictly required to have the

<screen>
     Reply-to: sender@email.address.here
</screen>

header, but most do, because it gives recipients a foolproof way to
reach the author (it is especially useful when the author had to send
from an address other than the one to which replies should be
directed).</para>

<para>Some mailreading software offers an easy-to-use interface for
filing mails based on patterns in the Subject header.  This leads
people to request that the mailing list add an automatic prefix to all
Subjects, so they can set their readers to look for that prefix and
automatically file the mails in the right folder.  The idea is that
the original author would write:

<screen>
     Subject: Making the 2.5 release.
</screen>

but the mail would show up on the list looking like this:

<screen>
     Subject: [discuss@lists.example.org] Making the 2.5 release.
</screen>

</para>

<para>Although most list management software offers the option to do
this, I strongly recommend against turning the option on.  The problem
it solves can easily be solved in much less obtrusive ways, and the
cost of eating space in the Subject field is far too high.
Experienced mailing list users typically scan the Subjects of the
day's incoming list mail to decide what to read and/or respond to.
Prepending the list's name to the Subject can push the right side of
the Subject off the screen, rendering it invisible.  This obscures
information that people depend on to decide what mails to open, thus
reducing the overall functionality of the mailing list for
everyone.</para>

<para>Instead of munging the Subject header, teach your users to take
advantage of the other standard headers, starting with the To header,
which should say the mailing list's name:

<screen>
     To: &lt;discuss@lists.example.org&gt;
</screen>

Any mailreader that can filter on Subject should be able to filter on
To just as easily.</para>

<para>There are a few other optional-but-standard headers expected
for mailing lists.  You may or may not ever need to worry about these,
but you should be aware that they exist and that some users (or users'
mailreading software) may be counting on their presence:</para>

<screen>
   list-help: &lt;mailto:discuss-help@lists.example.org&gt;
   list-unsubscribe: &lt;mailto:discuss-unsubscribe@lists.example.org&gt;
   list-post: &lt;mailto:discuss@lists.example.org&gt;
   Delivered-To: mailing list discuss@lists.example.org
   Mailing-List: contact discuss-help@lists.example.org; run by ezmlm
</screen>

<para>For the most part they are self-explanatory.  See <ulink
url="http://www.nisto.com/listspec/list-manager-intro.html"/> for more
explanation, or if you need the really detailed, formal specification,
see <ulink url="http://www.faqs.org/rfcs/rfc2369.html"/>.
</para>

<para>Notice how these headers imply that if you have a mailing list
named "list", then you also have administrative addresses "list-help"
and "list-unsubscribe" available.  In addition to these, it is normal
to have "list-subscribe", for joining, and "list-owner", for reaching
the list administrators.  Depending on the list management software
you use, these and/or various other administrative addresses may be
set up, the documentation will have details.  Usually a complete
explanation of all these special addresses is mailed to each new user
as part of the automated "welcome mail" when she subscribes.  You
yourself will probably get a copy of this welcome mail.  If you don't,
then ask someone else for a copy, so you know what your users are
seeing when they join the list.  Keep the copy handy so you can answer
questions about the mailing list functions, or better yet, put it on a
web page somewhere.  That way when people lose their own copy of the
instructions and post asking "How do I unsubscribe from this list?",
you can just hand them the URL.</para>

<para>Some mailing list software offers an option to append
unsubscription instructions to the bottom of every post.  If that
option is available, turn it on.  It only causes a couple of extra
lines per message, in a harmless location, and it can save you a lot
of time, by cutting down on the number of people who mail you &mdash;
or worse, mail the list! &mdash; asking how to unsubscribe.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.3">
<title>The Great Reply-to Debate</title>

<para>Earlier, in <xref linkend="pfs-ch-2-sect-3.1"/>, I stressed the
importance of making sure discussions stay in public forums, and
talked about how active measures are sometimes needed to prevent
conversations from trailing off into private email threads.  And this
present chapter is all about setting up project communications
software to do as much of the work for you as possible.  Therefore, if
the mailing list management software offers a way to automatically
cause discussions to stay on the list, you would think turning that
feature on would be the obvious choice.</para>

<para>Well, not quite.  There is such a feature, but it has some
pretty severe disadvantages.  The question of whether or not to use it
is one of the hottest debates in mailing list management &mdash;
admittedly, not a controversy that's likely to make the evening news
in your city, but it can flare up from time to time on mailing lists.
Below, I will describe the feature, give the major arguments on both
sides, and make the best recommendation I can.</para>

<para>The feature itself is very simple: the mailing list software
can, if you wish, automatically set the Reply-to header on every post,
to redirect replies to the mailing list.  That is, no matter what the
original sender puts in Reply-to (or even if they don't include one at
all), by the time the list subscribers see the post, the header will
look like this:

<screen>
     Reply-to: discuss@lists.example.org
</screen>

</para>

<para>On its face, this seems like a good thing.  Because virtually
all mailreading software pays attention to the Reply-to header, now
when anyone responds to a post, their response will be automatically
addressed to the entire list, not just to the sender of the message
being responded to.  Of course, the responder can still manually
change where the message goes, but the important thing is that
<emphasis>by default</emphasis> replies are directed to the list.
It's a perfect example of using technology to encourage
collaboration.</para>

<para>Unfortunately, there are some disadvantages.  The first is the
<firstterm>Can't Find My Way Back Home</firstterm> problem: sometimes
the original sender will put their "real" email address in the
Reply-to field, because for one reason or another they are unable to
receive email at the address from which they are sending.  People who
always read and send from the same location don't have this problem,
and may be surprised that it even exists.  But for those who have
unusual email configurations, or who cannot control how the From
address on their mails looks (perhaps because they send from work and
do not have any influence over the IT department), using Reply-to may
be the only way they have to ensure that responses reach them.  When
such a person posts to a mailing list that they're not subscribed to,
her setting of Reply-to becomes essential information.  If the list
software overwrites it, she may never see the responses to her
post.</para>

<para>The second disadvantage has to do with expectations, and in my
opinion is the most powerful argument against Reply-to munging.  Most
experienced mail users are accustomed to two basic methods of
replying: <firstterm>reply-to-all</firstterm>, and
<firstterm>reply-to-author</firstterm>.  All modern mailreading
software has separate keys for these two actions.  Users know that to
reply to everyone (that is, including the list), they should choose
reply-to-all, and to reply privately to the author, they should choose
reply-to-author.  Although you want to encourage people to reply to
the list whenever possible, there are certainly circumstances where a
private reply is the responder's prerogative &mdash; for example, they
may want to say something confidential to the author of the original
message, something that would be inappropriate on the public
list.</para>

<para>Now consider what happens when the list has overridden the
original sender's Reply-to.  The responder hits a key, expecting to
send a private message back to the original author.  Because this is
the expected behavior, she may not bother to look carefully at the
recipient address in the new message.  She composes her private,
confidential message, one which perhaps says embarrassing things about
someone on the list, and hits the Send key.  Unexpectedly, a few hours
later her message appears <emphasis>on the mailing list</emphasis>!
Sure, she "should" have looked carefully at the recipient field, and
she "should not" have assumed anything about the Reply-to header.  But
authors almost always set Reply-to to their own personal address (or
rather, their mail software sets it for them), and many longtime email
users have come to expect that.  In fact, when a person deliberately
sets Reply-to to some other address, such as the list, she usually
make a point of mentioning this in the body of the message, so people
won't be surprised at what happens when they reply.</para>

<para>Because of the possibly severe consequences of this unexpected
behavior, my own preference is to configure list management software
to never touch the Reply-to header.  This is one instance where using
technology to encourage collaboration has, it seems to me, potentially
dangerous side-effects.  However, there are also some powerful
arguments on the other side of this debate.  Whichever way you choose,
you will occasionally get people posting to your list asking why you
didn't choose the other way.  Since this is not something you ever
want as the main topic of discussion on your list, it might be good to
have a canned response ready, of the sort that's more likely to stop
discussion than encourage it.  Make sure you do
<emphasis>not</emphasis> insist that your decision, whichever it is,
is obviously the only right and sensible one (even if you think that's
the case).  Instead, point out that this is a very old debate, there
are good arguments on both sides, that no choice is going to satisfy
all users, and that therefore you just made the best decision you
could.  Politely ask that the subject not be revisited unless someone
has something genuinely new to say, then stay out of the thread and
hope it dies a natural death.</para>

<para>Someone may suggest a vote to choose one way or the other.  You
can do that if you want, but I personally do not feel that counting
heads is a satisfactory solution in this case.  The penalty for
someone who is surprised by the behavior is so huge (accidentally
sending a private mail to a public list), and the inconvenience for
everyone else is fairly slight (occasionally having to remind someone
to respond to the whole list instead of just to you), that it's not
clear the majority, even though they are the majority, should be able
to put the minority at such risk.</para>

<para>I have not addressed all aspects of this issue here, just the
ones that seemed of overriding importance.  For a full discussion, see
these two canonical documents, which are the ones people always cite
when they're having this debate:

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Leave Reply-to alone</emphasis>,
     <emphasis>by Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Set Reply-to to list</emphasis>,
     <emphasis>by Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.org/essays/reply-to-useful.mhtml"/></para>
  </listitem>
</itemizedlist>

</para>

<para>Despite the mild preference indicated above, I do not feel there
is a "right" answer to this question, and I happily participate in
many lists that <emphasis>do</emphasis> set Reply-to.  The most
important thing you can do is settle on one way or the other early,
and try not to get entangled in debates about it after that.</para>

<sect3>
<title>Two Fantasies</title>

<para>Someday, someone will get the bright idea to implement a
<firstterm>reply-to-list</firstterm> key in a mailreader.  It would
use some of the custom list headers mentioned earlier to figure out
the address of the mailing list, and then address the reply directly
to the list only, leaving off any other recipient addresses, since
most are probably subscribed to the list anyway.  Eventually, other
mailreaders will pick up the feature, and this whole debate will go
away.  (Actually, I've heard that <ulink
url="http://www.mutt.org/">Mutt</ulink> does offer this feature.  Now
if only others would copy it...)</para>

<para>Another solution would be for Reply-to munging to be a
per-subscriber preference.  Those who want the list to set Reply-to
for them could ask for that, and those who don't would ask for it to
be left alone.  However, I don't know of any list management software
that offers this on a per-subscriber basis.  For now, we seem to be
stuck with a global setting.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.4">
<title>Archiving</title>

<para>Most of the technical details of mailing list archiving are
specific to the software that's running the list, and are beyond the
scope of this book.  When choosing or configuring an archiver,
consider these qualities:

<itemizedlist>
  <listitem><para><emphasis role="bold">Prompt updating.</emphasis>
  People will often want to refer to an archived post made within the
  last hour or two.  If possible, the archiver should archive each post
  instantaneously, so that by the time it appears on the mailing list
  it's already present in the archives.  If that option isn't
  available, then at least try to set the archiver to update itself
  every hour or so.  (By default, some archivers run their update
  processes once per night, but in practice that's too much lag time
  for an active mailing list.)</para>
  </listitem>
  <listitem><para><emphasis role="bold">Backups.</emphasis> It should
  be reasonably obvious how to back up the archives, and the
  restoration recipe should not be too difficult.  In other words,
  don't treat your archiver as a black box: you (or someone in your
  project) should know where it's storing the messages, and how to
  regenerate the actual archive pages from the message store if it
  should ever become necessary.</para>
  </listitem>
  <listitem><para><emphasis role="bold">Referential
  stability.</emphasis>Once a message is archived at a particular URL,
  it should remain accessible at that exact same URL forever, or as
  close to forever as possible.  Even if the archives are rebuilt,
  restored from backup, or otherwise fixed, any URLs that have already
  been made publically available should remain the same.  Stable
  refernces make it possible for Internet search engines to index the
  archives, which is a major boon to users looking for answers.</para>
  </listitem>
  <listitem><para><emphasis role="bold">Thread Support.</emphasis>
  The archives should make it possible to go from any individual
  message to the "thread" (group of related messages) that that
  original message is part of.</para>
  </listitem>
  <listitem><para><emphasis role="bold">Searchability.</emphasis> An
  archiver that doesn't support searching &mdash; on the bodies of
  messages, as well as on authors and subjects &mdash; is close to
  useless.  Note that some archivers support searching by simply
  farming the work out to an external search engine such as <ulink
  url="http://www.google.com/">Google</ulink>.  This is acceptable,
  but direct search support is usually more fine-tuned, because it
  allows the searcher to specify that the match must appear in a
  subject line versus the body, for example.</para>
  </listitem>
</itemizedlist>

The above is just a technical checklist to help you evaluate and set
up an archiver.  Getting people to actually <emphasis>use</emphasis>
the archiver to the project's advantage is discussed in later
chapters, in particular <xref linkend="pfs-ch-5-sect-4"/>.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.5">
<title>Software</title>

<para>Here are some open source tools for doing list management and
archiving.  If the site where you're hosting your project already has
a default setup, then you may not ever have to decide on a tool at
all.  But if you must install one yourself, these are some
possibilities.  The ones I have actually used are Mailman, EzMLM,
MHonArc, and Hypermail, but that doesn't mean the others aren't good
too (and of course, there are probably other tools out there that I
just didn't happen to find, so don't take this as a complete list).

<variablelist>
<varlistentry><term>List Management Software:</term>
<listitem>
  <itemizedlist>
   <listitem>
     <para><emphasis role="bold">Mailman</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.list.org/"/></para>
     <para>(Has built-in archiver, also has hooks for plugging in
           external archivers.)</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">SmartList</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.procmail.org/"/></para>
     <para>(Meant to be used with the <ulink
           url="http://www.procmail.org/">Procmail</ulink> mail
           processing system.)</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Ecartis</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.ecartis.org/"/></para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">ListProc</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://listproc.sourceforge.net/"/></para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">EzMLM</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://cr.yp.to/ezmlm.html"/></para>
     <para>(Designed to work with the <ulink
           url="http://cr.yp.to/qmail.html">Qmail</ulink> mail
           delivery system.)</para> 
   </listitem>
   <listitem>
     <para><emphasis role="bold">DaDa</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://mojo.skazat.com/"/></para>
     <para>(Despite the web site's bizarre attempts to hide the fact,
           this is free software, released under the GNU General
           Public License.  It also has a built-in archiver.)</para>
   </listitem>
  </itemizedlist>
</listitem>
</varlistentry>
<varlistentry><term>Archiving Software:</term>
<listitem>
  <itemizedlist>
   <listitem>
     <para><emphasis role="bold">MHonArc</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.mhonarc.org/"/></para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Hypermail</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.hypermail.org/"/></para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Lurker</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://sourceforge.net/projects/lurker"/></para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Procmail</emphasis>&nbsp;&mdash;&nbsp;<ulink
           url="http://www.procmail.org/"/></para>
     <para>(Companion software to SmartList, this is a general mail
           processing system that can, apparently, be configured as an
           archiver.)</para>
   </listitem>
  </itemizedlist>
</listitem>
</varlistentry>
</variablelist>

</para>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-3">
<title>Version Control</title>

<para>A <firstterm>version control system</firstterm> (or
<firstterm>revision control system</firstterm>) is a combination of
technologies and practices for tracking and controlling changes to a
project's files, in particular its source code, documentation, and web
pages.  If you have never used version control before, the first thing
you should do is go find someone who has, and get them to join your
project.  These days, everyone will expect at least your project's
source code to be under version control, and probably will not take
the project seriously if it doesn't use version control.</para>

<para>The reason version control is so universal is that it is
intertwined with virtually every aspect of running a project:
inter-developer communications, release management, bug management,
code stability and experimental development efforts, and (not least)
attribution and authorization of changes by particular developers.
The version control system provides a central coordinating force that
influences all of these areas.  The core of version control is
<firstterm>change management</firstterm>: identifying each discrete
change made to the project's files, along with the date, author, and
some other metadata about the change.</para>

<para><remark>todo: working here</remark></para>

<para><remark>Talk about the importance of doing it, describe it as a
communications medium, list the choices, point out that CVS is the
safe choice right now.  Talk about commit emails, setting reply-to on
them differently from regular mailing lists.  Importance of
browsability, either through direct browse mode, or through checked
out working copy on web server.  See note in packaging section about
all-caps files.  Importance of keeping the project's web pages under
version control.  Authorization and attribution
aspects.</remark></para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-4">
<title>Bug Tracker</title>

<para>todo</para>

<para><remark>issues, artifacts, trouble tickets, requests, any other
synonyms?</remark></para>

<para><remark>Ben points out that the way we filter the issue tracker
is very unusual.  We've essentially subscribed all of dev@ to
parallelize the filtering process :-).  This is not the norm, but it
may be worth recommending.  See Debian and/or OpenOffice.org (?) for a
different way of using the issue tracker -- they want to use it for
everything, it seems.</remark></para>

<para><remark>Note how full issue sweeps become less and less feasible
over time.  You eventually must evolve a system for categorizing and
prioritizing new issues based on overall context, not on an O(N)
comparison with all the other issues in the database.  It is normal
for the bug database to grow slowly but without bound over time.  This
is not a sign of failure.  In general, guard against the tendency to
draw conclusions from bug statistics (or commit statistics, for that
matter).  They are qualitative events, and cannot be measured
quantitatively.</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-5">
<title>IRC / Realtime Chat Systems </title>

<para><remark>These are incredibly useful.  List the conventions that
should be encouraged: set the channel topic to something useful;
mention other related channels (users vs dev, for example); make
channel entry show new users URLs to conventions/customs &mdash; but
never jump on them for not seeing it or ignoring it; selective
archiving; use of bots such as ayita and the wonderful "!m" bot in the
MySQL on freenode.net; and of course encourage the use of pastebin
sites such as:
<screen>
  http://sourcepost.sytes.net/
  http://www.pastebin.com/ ?
  http://www.pastebin.com/58071
  http://sial.org/pbot/3770
</screen>
</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-6">
<title>Wikis </title>

<para><remark>Wikis may be worth talking about, though they are not
(yet?) standard on open source projects.  They can they contribute to
FAQ maintenance; they may also be a whole new sort of forum.  Go check
out the Subversion wiki and see if/how people are using
it.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-7">
<title>Web Site</title>

<para><remark>Describe how the web site ties these functions
together, advantages and disadvantages of maintaining the site
yourself.  Mention searchability, give the 
  <screen>
  &lt;form action="http://www.google.com/search"&gt;
  Search the Subversion web archives with Google:
  &lt;input name=as_q size=30&gt; &lt;input value="Search" type=submit&gt;
  &lt;input type=hidden name=as_sitesearch value="www.contactor.se"&gt;
  &lt;/form&gt;
  </screen>
example.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-8">
<title> What's Out There For Free? </title>

<para>Describe various sites that provide some of these services for
free, such as SourceForge, Savannah, Freenode, etc.  Evaluate
pros/cons of each, compare with roll-your-own solutions. </para>

<para><remark>(Mention the survey by Haggen So, at
http://www.ibiblio.org/fosphost/ and
http://www.ibiblio.org/fosphost/exhost.htm.  It's pretty amazing!)
</remark></para>

<para><remark>A *perfect* example of one disadvantage of using a
canned site: the handling of generated files.  You don't want them in
version control, because they're generated.  On the other hand, you
can't make arbitrary scripts run on the server, because you don't own
the server.  Use the SVN FAQ as a cautionary tale.</remark></para>

<para><remark>Another example: HTML header overrides can affect
stylesheet control.</remark></para>

<para><remark>Yet another problem with them: they sometimes have
gratuitous login requirements.  See the bit in
<filename>thoughts</filename> that says:
<screen>
* user account mgmt on the project web site?
  Maybe, but emphasize that login should *never* be required for read
  access.  Everything -- code, issue tracker, etc -- should be
  accessible anonymously.  login to file issues is barely acceptable :-).
</screen>
</remark></para>

<para><remark>(Note that some of these problems can be worked around,
by hosting some of the pages off-site.  You can use the big hosting
site for its strengths &mdash; bandwidth, list software, version
control, bug tracker &mdash; and direct traffect to a
smaller-but-more-hands-on site for stuff that isn't access as often as
the front page and the major services.)</remark></para>

</sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

