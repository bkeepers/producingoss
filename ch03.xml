<chapter id="pfs-ch-3">

<title>Technical Infrastructure <!-- [ 10-20 pp ] --></title>

<simplesect>

<para>Free software works because of technologies that support the
selective capture and integration of information.  The more skilled
you are at using these technologies, and at persuading others to use
them, the more successful your project will be.  This only becomes
more true as the project grows.  Good information management is what
prevents open source projects from collapsing under the weight of
Brooks' Law<footnote><para>From his book <citetitle>The Mythical Man
Month</citetitle>, 1975.  See <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> and <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"/></para></footnote>,
which observes that the complexity of a project increases as the
<emphasis>square</emphasis> of the number of participants.  When only
a few people are involved, everyone can easily talk to everyone else.
But when hundreds of people are involved, it is no longer possible for
each person to remain constantly aware of what everyone else is doing.
If good free software project management is about making everyone feel
like they're all working together in the same room, the obvious
question is: what happens when everyone in a crowded room tries to
talk at once?</para>

<para>This problem is not new.  In non-metaphorical crowded rooms, the
solution is <firstterm>parliamentary procedure</firstterm>: formal
guidelines for how to have real-time discussions in large groups, how
to make sure important dissents are not lost in floods of "me-too"
agreement, how to form subcommittees, how to recognize when decisions
are made.  An important part of parliamentary procedure is specifying
how the group interacts with its information management system.  Some
remarks are made "for the record", others are not.  The record itself
is subject to direct manipulation, and is understood to be not a
literal transcript of what occurred, but a representation of what the
group is willing to <emphasis>agree</emphasis> occurred.  The record
is not monolithic, but takes different forms for different purposes.
It comprises the minutes of individual meetings, the complete
collection of all minutes of all meetings, summaries, agendas and
their annotations, committee reports, reports from correspondents not
present, lists of action items, etc.</para>

<para>The parts of traditional parliamentary procedure that have to do
with keeping everyone quiet in a room while one person speaks we will
mostly dispense with here.  Everyone can "speak" simultaneously on the
Internet.  But in terms of information management techniques, well-run
open source projects are parliamentary procedure on steroids.  Since
almost all communication in open source projects happens in writing,
elaborate systems have evolved for routing and labeling data
appropriately, for minimizing repetitions so as to avoid spurious
divergences, for storing and retrieving data, for correcting bad or
obsolete information, and for associating disparate bits of
information with each other as new connections are observed.  Active
participants in open source projects internalize many of these
techniques, and will often perform complex manual tasks to ensure that
information is routed correctly.  But the whole endeavor ultimately
depends on sophisticated software support.  As much as possible, the
communications media themselves should do the routing, labeling, and
recording, and should make the information available to humans in the
most convenient way possible.  In practice, of course, humans will
still need to intervene at many points in the process, and it's
important that the software make such interventions convenient.  But
in general, if the humans take care to label and route information
accurately on its first entry into the system, then the software
should be configured to make as much use of that metadata as
possible.</para>

<para>The advice in this chapter is intensely practical, based on
experiences with specific software and usage patterns.  But the point
is just not to teach a particular collection of techniques.  It is
also to demonstrate, by means of many small examples, the overall
stance that will best encourage good information management in your
project.  This stance will involve a combination of technical skills
and people skills.  The technical skills are essential because
information management software always requires configuration, plus a
certain amount of ongoing maintenance and tweaking as new needs arise
(for example, see the discussion of how to handle project growth in
<xref linkend="pfs-ch-3-sect-4"/>).  The people skills are necessary
because the human community also requires maintenance: it's not always
immediately obvious how to use these tools to full advantage, and in
some cases there may be conflicting conventions between different
projects (for example, see the discussion of setting
<systemitem>Reply-to</systemitem> headers on outgoing mailing list
posts, in <xref linkend="pfs-ch-3-sect-2"/>).  Everyone involved with
the project will need to encouraged, at the right times and in the
right ways, to do their part to keep the project's information
well-organized.  The more involved the contributor, the more
specialized techniques they can be expected to learn.</para>

<para>Information management is not a problem that can be definitively
solved.  There are too many variables.  You may finally get everything
configured just the way you want it, and most of the community
participating, but then project growth will make some of those
practices unscalable.  Or project growth may stabilize, and the
developer and user communities settle into a comfortable relationship
with the technical infrastructure, but then someone will come along
and invent a whole new information management service, and pretty soon
newcomers will be asking why your project doesn't use it (this is
happening now to a lot of free software projects that predate the
invention of the <ulink
url="http://en.wikipedia.org/wiki/Wiki">Wiki</ulink>, for example).
Many questions are matters of judgement, involving tradeoffs between
the convenience of those producing information and the convenience of
those consuming it, or between the time required to configure
information management software and the benefit it will bring to the
project.</para>

<para>Beware of the temptation to over-automate, that is, to automate
things that really require human attention.  Technical infrastructure
is important, but what makes a free software project work is care
&mdash; and intelligent application of that care &mdash; by the humans
involved.  The technical infrastructure is mainly about giving humans
convenient ways to do that.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-1">
<title>What a Project Needs</title>

<para>Most open source project offer at least a minimum, standard set
of tools for managing information:

<itemizedlist>
   <listitem>
     <para><emphasis role="bold">Web site.</emphasis>
           Primarily a centralized, one-way conduit of information,
           from the project out to the public.  The web site may
           also serve as an administrative interface for other
           project tools.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Mailing lists.</emphasis>
           Usually the most active communications forum in the
           project, and the "medium of record".</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Version control.</emphasis>
           Enables developers to manage code changes conveniently,
           including reverting and "change porting".  Enables everyone
           to watch what's happening to the code.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Bug tracking.</emphasis>
           Enables developers to keep track of what they're working
           on, coordinate with each other, plan releases.  Enables
           everyone to query the status of bugs, and record
           information (e.g., reproduction recipes) about particular
           bugs.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Realtime chat.</emphasis>
           A place for quick, lightweight discussions and
           question/answer exchanges.  Not always archived
           completely.</para>
   </listitem>
</itemizedlist>

Each tool in this set addresses a distinct need, but their functions
are also interrelated, and the tools must be taught to work with each
other.  Below we will examine how they can do so, and more
importantly, how to get people to use them.  The web site is not
discussed until the end, since it's more glue for the other components
than a tool unto itself.</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-2">
<title>Mailing Lists</title>

<para>Mailing lists are the bread and butter of project
communications.  If a user is active in any forum at all besides the
web pages, it is most likely to be one of the project's mailing lists.
But before they experience the mailing list itself, they will
experience the mailing list interface &mdash; that is, the mechanism
by which they join ("subscribe to") the list.  Which brings us to Rule
#1 of mailing lists:

<blockquote>
   <para><emphasis>Don't try to manage mailing lists by hand
   &mdash; get list management software.</emphasis></para>  
</blockquote>

It will be tempting to put this off.  Setting up mailing list
management software might seem like overkill at first.  Managing
small, low-traffic lists by hand will seem seductively easy: you just
set up a subscription address that forwards to you, and when someone
mails it, you add (or remove) their email address in some text file
that holds all the addresses on the list.  What could be
simpler?</para>

<para>The trick is that good mailing list management &mdash; which
is what people have come to expect &mdash; is not simple at all.  It's
not just about subscribing and unsubscribing users when they request.
It's also about moderating to prevent spam, about offering the mailing
list in digest versus message-by-message form, about providing various
sorts of standard list and project information by means of
auto-responders, and various other things.  A human being monitoring a
subscription address can supply only a bare minimum of functionality,
and even then not as reliably as software could.</para>

<para>Modern list management software usually offers at least the
following features:</para>

<itemizedlist>
  <listitem><para>Both email- and web-based subscription.  When a user
            subscribes to a list, they <emphasis>promptly</emphasis>
            get an automated welcome message in reply, telling them
            what they have subscribed to, how to interact further with
            the mailing list software, and (most importantly) how to
            unsubscribe.  This automatic reply can be customized to
            contain project-specific information, of course.</para>
  </listitem>

  <listitem><para>Subscription in either digest mode or
            message-by-message mode.  In digest mode, the subscriber
            receives one email per day, containing all the list
            activity for that day.  For people who are following a
            list loosely, without participating, digest mode is often
            preferable, because it allows them to scan all the
            subjects at once, and avoid the distraction of emails
            coming in at random times.</para>
  </listitem>

  <listitem><para>Moderation features.  To "moderate" is to check
            posts to make sure they are a)&nbsp;not&nbsp;spam, and
            b)&nbsp;on&nbsp;topic, before they go out to the entire
            list.  Moderation necessarily involves humans, but
            software can do a lot to make it easier.  There will be
            more said about moderation below.</para>
  </listitem>

  <listitem><para>An administrative interface.  Among other things,
            this enables an administrator to go in and remove obsolete
            addresses <foreignphrase>en masse</foreignphrase>.  This
            can become urgent when a recipient's address starts
            sending automatic "I am no longer at this address" replies
            back to the list in response to every list post.  (Some
            mailing list software can even detect this by itself and
            unsubscribe the person automatically.)</para>
  </listitem>

  <listitem><para>Header manipulation.  Many people have sophisticated
            filtering and replying rules set up in their mailreaders.
            Mailing list software can add and manipulate certain
            standard headers for these people to take advantage
            of (more details below).</para>
  </listitem>

  <listitem><para>Archiving.  The mailing list software will keep an
            archive of all posts to the lists it manages, and make
            that archive available via the web.  Or, alternatively, it
            may have a way to plug in an external archiving tool such
            as <ulink
            url="http://www.oac.uci.edu/indiv/ehood/mhonarc.html"/>.
            As <xref linkend="pfs-ch-5-sect-3"/> discusses, archiving
            is crucial.</para>
  </listitem>

</itemizedlist>

<para>The point of all this is not to intimidate, but merely to
emphasize that mailing list management is a problem that has been
given a lot of thought, and mostly been solved.  You certainly don't
need to become an expert in it.  But you should be aware that it's a
complex subject, and one that will from time to time occupy your
attention in the course of running a free software project.  Below
we'll examine a few of the most common configuration issues.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.1">
<title>Spam Prevention</title>

<para>Between when this sentence was written and when it is published,
the Internet-wide spam problem will probably double in severity
&mdash; or at least it will feel that way.  There was a time, not so
long ago, when one could run a mailing list without taking any
spam-prevention measures at all.  There occasional stray post would
still show up, but it was only a low-level annoyance.  That era is
gone forever.  Today, a mailing list that takes no spam prevention
measures will quickly be submerged in junk emails, to the point of
unuseability.  Spam prevention is now mandatory.</para>

<para>We divide spam prevention into two categories: preventing spam
posts from appearing on your mailing lists, and preventing your
mailing list from being a source of new email addresses for spammers'
harvesters.  Of the two, the former is more important, so we examine
it first.</para>

<sect3 id="pfs-ch-3-sect-2.1.1">
<title>Filtering Posts</title>

<para>There are three basic techniques for preventing spam posts, and
most mailing list software offers all three.  They are best used in
tandem:</para>

<orderedlist>

  <listitem><para><emphasis role="bold">Only auto-allow postings from
            list subscribers.</emphasis></para>

            <para>This is very effective, and also involves the least
            administrative overhead, since it's usually just a
            matter of changing a setting in the mailing list's
            configuration.  But posts which aren't automatically
            approved mustn't be simply discarded.  Instead, they
            should be passed along for moderation, for two reasons.
            First, you want to allow non-subscribers to post.  Someone
            with a question or suggestion may not want to bother
            subscribing to a mailing list just to make a single post
            there.  Second, even subscribers may sometimes post from
            an address other than the one by which they're subscribed.
            Email addresses are neither a unique nor a reliable method
            of identifying people, and shouldn't be treated as
            such.</para>
  </listitem>

  <listitem><para><emphasis role="bold">Filter posts through
            spam-filtering software.</emphasis></para>

            <para>If the mailing list software makes it possible (and
            most do), you can have posts filtered by spam-filtering
            software.  Automatic spam-filtering is not perfect, and
            never will be, since there is a never-ending arms race
            between spammers and filter writers.  However, it can
            significantly reduce the amount of spam that gets through
            to the moderation queue, and since the length of that
            queue is directly proportional to the amount of time some
            human has to spend examining it, any automatic spam
            filtering that happens will be beneficial.</para>
            <para>There is not space here for detailed instructions
            on setting up spam filters.  You will have to consult
            your mailing list software's documentation for that (see
            <xref linkend="pfs-ch-3-sect-2.5"/>).  As for the
            filtering software itself, I've personally had good
            experiences with two:
            <ulink url="http://spamassassin.apache.org/"
               >SpamAssassin&nbsp;(http://spamassassin.apache.org/)</ulink>
            and <ulink url="http://spamprobe.sourceforge.net/"
               >SpamProbe&nbsp;(http://spamprobe.sourceforge.net/)</ulink>
            This is not a comment on the other open source spam
            filters out there.  I just happen to have used those two
            myself and been satisfied with them.</para> 
  </listitem>

  <listitem><para><emphasis role="bold">Moderation.</emphasis></para>
            <para>For mails that aren't automatically allowed by
            virtue of being from a list subscriber, and which make it
            through the spam filtering software, the last stage is
            <firstterm>moderation</firstterm>.
            </para>
  </listitem>

</orderedlist>

<para><remark>Note about not misusing moderation.  It should be an
anti-spam technique and an anti-off-topicness technique, but nothing
more.  Everything else should be let through.  Don't be tempted to
answer questions directly in the moderation reply; that would deprive
the list of an accurate picture of what sorts of questions are being
asked, for example.  Also, it deprives others of the chance to answer
them.</remark></para>

</sect3>

<sect3 id="pfs-ch-3-sect-2.1.2">
<title>Address Hiding</title>

<para><remark>note empirical evidence of effectiveness</remark></para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.2">
<title>Header Management</title>

<para>(in progress)</para>

<screen>
filtering: the "X-Mailing-List header".
http://www.nisto.com/listspec/list-manager-intro.html
See http://www.faqs.org/rfcs/rfc2369.html

   Mailing-List: contact users-help@subversion.tigris.org; run by ezmlm
   Precedence: bulk
   X-No-Archive: yes
   list-help: &lt;mailto:users-help@subversion.tigris.org&gt;
   list-unsubscribe: &lt;mailto:users-unsubscribe@subversion.tigris.org&gt;
   list-post: &lt;mailto:users@subversion.tigris.org&gt;

digests?
http://www.faqs.org/rfcs/rfc1153.html

X-NoArchive: What is this for?
</screen>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.3">
<title>The Great Reply-to Debate</title>

<para>(in progress)</para>

<para><remark>
Speaking of reply-to:
<ulink url="http://www.unicom.com/pw/reply-to-harmful.html"/>
<ulink url="http://www.metasystema.org/essays/reply-to-useful.mhtml"/>
</remark></para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.4">
<title>Archiving</title>

<para>(in progress)</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.5">
<title>Software</title>

<para>(in progress)</para>

<screen>
<ulink url="http://www.list.org/"
   >Mailman&nbsp;(http://www.list.org/)</ulink>
<ulink url="http://cr.yp.to/ezmlm.html"
   >EzMLM&nbsp;(http://cr.yp.to/ezmlm.html)</ulink>
<ulink url="http://www.ecartis.org/"
   >Ecartis&nbsp;(http://www.ecartis.org/)</ulink>
<ulink url="http://listproc.sourceforge.net/"
   >ListProc&nbsp;(http://listproc.sourceforge.net/)</ulink>
<ulink url="http://mojo.skazat.com/"
   >DaDa&nbsp;(http://mojo.skazat.com/)</ulink>
<ulink url="http://www.procmail.org/"
   >SmartList&nbsp;(http://www.procmail.org/)</ulink>
</screen>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="pfs-ch-3-sect-2.6">
<title>Helping Users</title>

<para>(in progress)</para>

<para><remark>See <ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines.</remark></para>

<para><remark>Auto-retrieval of information from the
list, as offered by the welcome message?</remark></para>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-3">
<title>Version Control</title>

<para><remark>Talk about the importance of doing it, describe it as a
communications medium, list the choices, point out that CVS is the
safe choice right now.  Talk about commit emails, setting reply-to on
them differently from regular mailing lists.  Importance of
browsability, either through direct browse mode, or through checked
out working copy on web server.  See note in packaging section about
all-caps files.  Importance of keeping the project's web pages under
version control.</remark></para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-4">
<title>Bug Tracker</title>

<para>todo</para>

<para><remark>issues, artifacts, trouble tickets, requests, any other
synonyms?</remark></para>

<para><remark>Ben points out that the way we filter the issue tracker
is very unusual.  We've essentially subscribed all of dev@ to
parallelize the filtering process :-).  This is not the norm, but it
may be worth recommending.  See Debian and/or OpenOffice.org (?) for a
different way of using the issue tracker -- they want to use it for
everything, it seems.</remark></para>

<para><remark>Note how full issue sweeps become less and less feasible
over time.  You eventually must evolve a system for categorizing and
prioritizing new issues based on overall context, not on an O(N)
comparison with all the other issues in the database.  It is normal
for the bug database to grow slowly but without bound over time.  This
is not a sign of failure.  In general, guard against the tendency to
draw conclusions from bug statistics (or commit statistics, for that
matter).  They are qualitative events, and cannot be measured
quantitatively.</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-5">
<title>IRC / Realtime Chat Systems </title>

<para><remark>These are incredibly useful.  List the conventions that
should be encouraged: set the channel topic to something useful;
mention other related channels (users vs dev, for example); make
channel entry show new users URLs to conventions/customs &mdash; but
never jump on them for not seeing it or ignoring it; selective
archiving; use of bots such as ayita and the wonderful "!m" bot in the
MySQL on freenode.net; and of course encourage the use of pastebin
sites such as:
<screen>
  http://sourcepost.sytes.net/
  http://www.pastebin.com/ ?
  http://www.pastebin.com/58071
  http://sial.org/pbot/3770
</screen>
</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-6">
<title>Wikis </title>

<para><remark>Wikis may be worth talking about, though they are not
(yet?) standard on open source projects.  They can they contribute to
FAQ maintenance; they may also be a whole new sort of forum.  Go check
out the Subversion wiki and see if/how people are using
it.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-7">
<title> What's Out There For Free? </title>

<para>Describe various sites that provide some of these services for
free, such as SourceForge, Savannah, Freenode, etc.  Evaluate
pros/cons of each, compare with roll-your-own solutions. </para>

<para><remark>(Mention the survey by Haggen So, at
http://www.ibiblio.org/fosphost/ and
http://www.ibiblio.org/fosphost/exhost.htm.  It's pretty amazing!)
</remark></para>

<para><remark>A *perfect* example of one disadvantage of using a
canned site: the handling of generated files.  You don't want them in
version control, because they're generated.  On the other hand, you
can't make arbitrary scripts run on the server, because you don't own
the server.  Use the SVN FAQ as a cautionary tale.</remark></para>

<para><remark>Another example: HTML header overrides can affect
stylesheet control.</remark></para>

<para><remark>Yet another problem with them: they sometimes have
gratuitous login requirements.  See the bit in
<filename>thoughts</filename> that says:
<screen>
* user account mgmt on the project web site?
  Maybe, but emphasize that login should *never* be required for read
  access.  Everything -- code, issue tracker, etc -- should be
  accessible anonymously.  login to file issues is barely acceptable :-).
</screen>
</remark></para>

</sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

