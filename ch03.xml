<chapter id="pfs-ch-3">

<title>Technical Infrastructure <!-- [ 10-20 pp ] --></title>

<simplesect>

<para>Free software works because of technologies that support the
selective capture and integration of information.  The more skilled
you are at using these technologies, and at persuading others to use
them, the more successful your project will be.  This only becomes
more true as the project grows.  Good information management is what
prevents open source projects from collapsing under the weight of
Brooks' Law<footnote><para>From his book <citetitle>The Mythical Man
Month</citetitle>, 1975.  See <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> and <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"/></para></footnote>,
which observes that the complexity of a project increases as the
<emphasis>square</emphasis> of the number of participants.  When only
a few people are involved, everyone can easily talk to everyone else.
But when hundreds of people are involved, it is not possible for each
person to remain constantly aware of what everyone else is doing.  If
good free software project management is about making everyone feel
like they're all working together in the same room, the obvious
question is: what happens when everyone in a crowded room tries to
talk at once?</para>

<para>This problem is not new.  In non-metaphorical crowded rooms, the
solution is <firstterm>parliamentary procedure</firstterm>: formal
guidelines for how to have real-time discussions in large groups, how
to make sure important dissents are not lost in floods of nuanced
agreement, how to form subcommittees, how to recognize when decisions
are made.  An important part of parliamentary procedure is specifying
how the group interacts with its information management system.  Some
remarks are made "for the record", others are not.  The record itself
is subject to direct manipulation, and is understood to be not a
literal transcript of what occurred, but a representation of what the
group is willing to <emphasis>agree</emphasis> occurred.  The record
is not monolithic, but exists in different forms for different
purposes.  It comprises the minutes of individual meetings, the
complete collection of all minutes of all meetings, summaries, agendas
and their annotations, committee reports, reports from correspondents
not present, lists of action items, etc.</para>

<para>The parts of traditional parliamentary procedure that have to do
with keeping everyone quiet in a room while one person speaks we will
mostly dispense with here.  Everyone can "speak" simultaneously on the
Internet.  But in terms of information management techniques, well-run
open source projects are parliamentary procedure on steroids.  Since
almost all communication in open source projects happens in writing,
elaborate systems have evolved for routing and labeling data
appropriately, for minimizing repetitions so as to avoid spurious
divergences, for storing and retrieving data, for correcting bad or
obsolete information, and for associating disparate bits of
information with each other as new connections are observed.  Active
participants in open source projects internalize many of these
techniques, and will often perform complex manual tasks to implement
them.  But the whole endeavor ultimately depends on sophisticated
software support.  As much as possible, the communications media
themselves should do the routing, labeling, and recording, and should
make the information available to humans in the most convenient way
possible.  In practice, of course, humans must still intervene at many
points in the process, and it's important that the software make such
interventions convenient.  But in general, if the humans take care to
label and route information accurately on its first entry into the
system, then the software should be configured make as much use of
that metadata as possible.</para>

<para>The advice in this chapter is intensely practical, based on
experiences with specific software and usage patterns.  But the point
is just not to teach a particular collection of techniques.  It is
also to demonstrate, by means of many small examples, the overall
stance that will best encourage good information management in your
project.  This stance will involve a combination of technical skills
and people skills.  The technical skills are essential because
information management software always requires configuration, plus a
certain amount of ongoing maintenance and tweaking as new needs arise
(for example, see the discussion of how to handle project growth in
<xref linkend="pfs-ch-3-sect-4"/>).  The people skills are because the
human community also requires maintenance: it's not always immediately
obvious how to use these tools to full advantage, and in some cases
there may be conflicting conventions between different projects (for
example, see the discussion of setting
<systemitem>Reply-to</systemitem> headers on outgoing mailing list
posts, in <xref linkend="pfs-ch-3-sect-2"/>).  Everyone involved with
the project will need to encouraged, at the right times and in the
right ways, to do their part to keep the project's information
well-organized.  The more involved the person, the more specialized
techniques they can be asked to learn.</para>

<para>Information management is not a problem that can be definitively
solved.  There are too many variables.  You may finally get everything
configured just the way you want it, and most of the community
participating, but then project growth will make some of those
practices unscalable.  Or project growth may stabilize, and the
developer and user communities settle into a comfortable relationship
with the technical infrastructure, but then someone will come along
and invent a whole new information management service, and pretty soon
newcomers will be asking why your project doesn't use it (this is
happening now to a lot of free software projects that predate the
invention of the <ulink
url="http://en.wikipedia.org/wiki/Wiki">Wiki</ulink>, for example).
Many questions are matters of judgement, involving tradeoffs between
the convenience of those producing information and the convenience of
those consuming it, or between the time required to configure
information management software and the benefit it will bring to the
project.</para>

<para>Beware of the temptation to over-automate, that is, to automate
things that really require human attention.  Technical infrastructure
is important, but what makes a free software project work is care
&mdash; and intelligent application of that care &mdash; by the humans
involved.  The technical infrastructure is mainly about giving humans
convenient ways to do that.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-1">
<title>What a Project Needs</title>

<para>Most open source project offer, at a minimum, a certain standard
set of tools for managing information.  Each tool in this set
addresses a distinct need; to the extent that the needs interrelate,
the tools must be taught to work with each other.  Before discussing
how to make that happen, let's get an overview of the individual
components:

<itemizedlist>
   <listitem>
     <para><emphasis role="bold">Web site.</emphasis>
           Primarily a centralized, one-way conduit of information,
           from the project out to the public.  The web site also
           often serves as an administrative interfaces for other
           project tools.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Mailing lists.</emphasis>
           Usually the most active communications forum in the
           project, and the "medium of record".</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Version control.</emphasis>
           Enables developers to make code changes conveniently, and
           revert them when necessary.  Enables everyone to watch
           what's happening to the code.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Bug tracking.</emphasis>
           Enables developers to keep track of what they're working
           on, coordinate with each other, plan releases.  Enables
           everyone to query the status of bugs, and record
           information (e.g., a reproduction recipe) about particular
           bugs.</para>
   </listitem>
   <listitem>
     <para><emphasis role="bold">Realtime chat.</emphasis>
           A place for people to ask questions and get instant
           answers.  Generally not archived automatically.</para>
   </listitem>
</itemizedlist>

</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-2">
<title>Mailing Lists</title>

<para><remark>
Speaking of reply-to:
<ulink url="http://www.unicom.com/pw/reply-to-harmful.html"/>
<ulink url="http://www.metasystema.org/essays/reply-to-useful.mhtml"/>
</remark></para>

<para><remark>Also, anti-spam measures, such as address hiding.</remark></para>

<para><remark>Moderation: never misuse it.  It should be an anti-spam
or anti-topic-confusion technique, nothing more.</remark></para>

<para><remark>See <ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines.</remark></para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-3">
<title>Version Control</title>

<para><remark>Talk about the importance of doing it, describe it as a
communications medium, list the choices, point out that CVS is the
safe choice right now.  Talk about commit emails, setting reply-to on
them differently from regular mailing lists.  Importance of
browsability, either through direct browse mode, or through checked
out working copy on web server.  See note in packaging section about
all-caps files.  Importance of keeping the project's web pages under
version control.</remark></para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-4">
<title>Bug Tracker</title>

<para>todo</para>

<para><remark>Ben points out that the way we filter the issue tracker
is very unusual.  We've essentially subscribed all of dev@ to
parallelize the filtering process :-).  This is not the norm, but it
may be worth recommending.  See Debian and/or OpenOffice.org (?) for a
different way of using the issue tracker -- they want to use it for
everything, it seems.</remark></para>

<para><remark>Note how full issue sweeps become less and less feasible
over time.  You eventually must evolve a system for categorizing and
prioritizing new issues based on overall context, not on an O(N)
comparison with all the other issues in the database.  It is normal
for the bug database to grow slowly but without bound over time.  This
is not a sign of failure.  In general, guard against the tendency to
draw conclusions from bug statistics (or commit statistics, for that
matter).  They are qualitative events, and cannot be measured
quantitatively.</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-5">
<title>IRC / Realtime Chat Systems </title>

<para><remark>These are incredibly useful.  List the conventions that
should be encouraged: set the channel topic to something useful;
mention other related channels (users vs dev, for example); make
channel entry show new users URLs to conventions/customs &mdash; but
never jump on them for not seeing it or ignoring it; selective
archiving; use of bots such as ayita and the wonderful "!m" bot in the
MySQL on freenode.net; and of course encourage the use of pastebin
sites such as:
<screen>
  http://sourcepost.sytes.net/
  http://www.pastebin.com/ ?
  http://www.pastebin.com/58071
  http://sial.org/pbot/3770
</screen>
</remark></para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-3-sect-6">
<title>Wikis </title>

<para><remark>Wikis may be worth talking about, though they are not
(yet?) standard on open source projects.  They can they contribute to
FAQ maintenance; they may also be a whole new sort of forum.  Go check
out the Subversion wiki and see if/how people are using
it.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-3-sect-7">
<title> What's Out There For Free? </title>

<para>Describe various sites that provide some of these services for
free, such as SourceForge, Savannah, Freenode, etc.  Evaluate
pros/cons of each, compare with roll-your-own solutions. </para>

<para><remark>(Mention the survey by Haggen So, at
http://www.ibiblio.org/fosphost/ and
http://www.ibiblio.org/fosphost/exhost.htm.  It's pretty amazing!)
</remark></para>

<para><remark>A *perfect* example of one disadvantage of using a
canned site: the handling of generated files.  You don't want them in
version control, because they're generated.  On the other hand, you
can't make arbitrary scripts run on the server, because you don't own
the server.  Use the SVN FAQ as a cautionary tale.</remark></para>

<para><remark>Another example: HTML header overrides can affect
stylesheet control.</remark></para>

<para><remark>Yet another problem with them: they sometimes have
gratuitous login requirements.  See the bit in
<filename>thoughts</filename> that says:
<screen>
* user account mgmt on the project web site?
  Maybe, but emphasize that login should *never* be required for read
  access.  Everything -- code, issue tracker, etc -- should be
  accessible anonymously.  login to file issues is barely acceptable :-).
</screen>
</remark></para>

</sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

