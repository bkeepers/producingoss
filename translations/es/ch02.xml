<chapter id="primeros-pasos">

<title>Primeros Pasos</title>

<simplesect>

<para>El clásico módelo de cómo los proyectos de software libre deben iniciar fue propuesto
por Eric Raymond, en un artículo ahora famoso sobre procesos de código abierto titulado
<citetitle>La catedral y el bazar</citetitle>. Él escribió:</para>

<blockquote>
	<para><emphasis>Todos los trabajos buenos en software comienzan tratando de paliar un problema personal de quien los programa</emphasis></para>
	<para>(from <emphasis role="bold"><ulink
	url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
	</emphasis>)</para>
</blockquote>

<para>Es de notar que Raymond no estaba diciendo que los proyectos código abierto no sólo suceden
cuando cierto individuo tiene una necesidad. En cambio, nos está diciendo que los 
<emphasis>buenos</emphasis> programas son resultado de que un programador tenga un interes personal
en ver el problema resulto. La relevancia de esto para el software libre ha sido que ésta necesidad
personal es lo que frecuentemente es la motivación para iniciar un proyecto de software libre.</para>

<para>Esto sigue siendo la manera en cómo muchos de los proyectos libres se inician, pero menos
ahora que en 1997, cuando Raymond esribió esas palabras. Hoy, tenemos el fenómeno de organizaciones
&mdash;incluidas corporaciones con fines de lucro&mdash;iniciando desde cero, proyectos Open Source
centralizados y a gran escala. El desarrollador solitario, tecleando algo de código para
resolver un problema local y luego dandose cuenta de que los resultados tienen un mayor
aplicación, sigue siendo la fuente de muchos software libre, pero esa no es la única historia.</para>

<para>De todas formas, el objetivo de Raymond sigue siendo profundo. La condición escencial
es que los productores de software libre tengan un interes directo en su éxito, porque ellos
mismos lo utilizan. Si el software no hace lo que se supone debería de hacer, la persona u
organización que lo han producido sentiran insatisfacción en su trabajo diario. Por ejemplo,
el proyecto OpenAdapter  (<ulink url="http://www.openadapter.org/"/>), el cual fue iniciado
por el banco de inversiones Dresdner Klienwort Wasserstein es un marco de trabajo para la
integración de sistemas de información financieros dispares, poco puede ser considerado como un
problema personal de un programador. Este afronta un problema institucional. Pero éste problema
surge directamente de la experiencia de la institución y sus socios, por lo cual si el proyecto
falla en aliviarlos, ellos lo sabrán. Este arreglo produce buenos programas porque el buclé
de críticas fluye en la dirección correcta. El programa no está siendo escrito para ser vendido
a alguien más para que sean ellos quienes resuelvan <emphasis>sus</emphasis> problemas. Está
siendo desarrollado para resolver su <emphasis>propio</emphasis> problema, luego compartiendolo
con todo el mundo a pesar de que el problema fuera una enfermedad y el software la medicina
el cual debe ser distribuido para erradicar la epidemia.</para>

<para>Este capítulo trata de cómo introducir un nuevo proyecto de software libre al mundo, pero
muchas de sus recomendaciones sonarán familiares a una organización sanitaria distribuyendo
medicinas. Los objetivos son muy simílares: quieres dejar claro lo que hace la medicina,
hacerla llegar a las manos de las personas correctas y asegurarte que aquellos quienes
la reciben saben como usarla. Pero con el software, tambien quieres incitar a algunos de los
receptores a unirse al esfuerzo de investigación para mejorar la medicina.</para>

<para>La distribución del software libre es una tarea a dos bandas. El programa necesita
usuarios y desarrolladores. Estas dos necesidades no tienen por que estar en conflicto, pero
si que añaden cierta complejidad a la presentación inicial de un proyecto. Alguna información
es útil para las dos audiencias, alguna sólo lo es para alguna u otra. Ambos tipos de información
deben suscribirse al principio de las presentaciones en éscala, esto es, el grado de detalle
con el que se presenta cada étapa debe corresponder directamente a la cantidad de tiempo y
esfuerzo puesto por el lector. Un mayor esfuerzo debe tener siempre una mayor recompensa.
Cuando los dos no se correlacionan conjuntamente, las personas pueden perder rapidamente su fé
y detener el esfuerzo.</para>

<para>El corolario a esto es:<emphasis>las apariencias importan</emphasis>. En particular,
los programadores, no desean creer esto. Su amor por la sustancia sobre la forma es casí
un punto de orgullo profesional. No es un accidente que tantos desarrolladores exhiban
una antipatía hacia los trabajos en marketing y en relaciones públicas o que diseñadores
gráficos profesionales usualmente se sientan horrorizados de lo que los desarrolladores ingenian.</para>

<para>Esto es penoso, ya que hay situaciones en las que la forma <emphasis>es<emphasis> la
sustancia y la presentación de proyectos es una de estas. Por ejemplo, lo primero que un visitante
aprende sobre un proyecto es como se ve su sitio web. Esta información es absorbida antes de que
el contenido en si sea comprendido&mdash;antes de que cualquier línea haya sido leida o enlaces
pulsados. Aunque parezca injusto, las personas no pueden evitar el formarse una opinión
inmediatamente despues de la primera impresión. La apariencia del sitio señala si se ha tomado
cuidado en la organización de la presentación del proyecto. Los humanos tenemos una antena
extremadamente sensible para detectar la inversión en el cuidado. Muchos de nosotros podemos
decir con sólo un vistazo si un sitio web ha sido ensamblado rapidamente o ha sido diseñado
con cuidado. Ésta es la primera pieza de información que el proyecto muestra y la impresión
que cree será asociada al resto del proyecto por asociación.</para>

<para>Aunque mucho de éste capítulo habla acerca del contenido con el que se deberia
iniciar el proyecto, recuerde que la presentación tambien importa. Ya que el sitio web
debe funcionar para dos tipos diferentes de visitantes&mdash;usuarios y desarrolladores&mdash;
hay que ser claro y directo. A pesar de que este no es el lugar para un tratado general acerca
de diseño web, un principio es suficientemente importante para merecer nuestra atención,
particularmente cuando sirve a multiples audiencias: la gente debe tener una ídea de a donde
lleva un enlace antes de pulsar en el. Por ejemplo, debe ser obvio que<empahsis>con sólo
ver el enlace</emphasis>a la documentación para los usuarios que los lleve a documentación
para los usuarios, sin mencionar la documentación para los desarrolladores. Dirigir un proyecto
se basa parcialmente en suministrar información, pero tambien en suministrar comodidad.
La mera presencia de ofrecer ciertos estándares, en lugares obvios, tranquiliza a usuarios
y desarrolladores quienes estan decidiendo si desean involucrarse. Dice que este proyecto
funciona, ha anticipado las preguntas que la gente puede hacer y ha hecho un esfuerzo
en responderlas sin la necesidad del más mínimo esfuerzo por parte del visitante. Al dar
ésta aura de preparación, el proyecto envia un mensaje: "Su tiempo no será malgastado si
se involucra", lo que es exactamente lo que la gente desea escuchar.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="investiga">
<title>Primero investiga</title>

<para>Antes de iniciar un proyecto Open Source hay un importante advertencia:
</para>
<para>Siempre investiga si existe un proyecto que hace lo que deseas. Las posibilidades son
muy buenas de que cualquier problema que desees resolver ahora alguien más lo haya deseado 
resolver con anterioridad. Si han sido capaces de resolverlo y han liberado bajo una licencia libre 
entonces hoy, no será necesario reinventar la rueda. Existen excepciones claro: si deseas iniciar
un proyecto como experiencia educativa, el código pre-existente no es de ayuda o quizas el
proyecto que deseas iniciar es muy especializado y sabes que no existe la posibilidad de que
alguien más lo haya hecho ya. Pero generalmente, no hay necesidad en no investigar ya que las
ganancias pueden ser grandiosas. Si los buscadores más utilizados no muestran nada, intenta tus
busquedas en: <ulink url="http://freshmeat.net/"/>(un sitio sobre noticias de proyectos open source
y del cual hablaremos un poco más luego), en <ulink url="http://www.sourceforge.net/"/> y en
el directorio de proyectos de la Free Software Foundation 
<ulink url="http://directory.fsf.org/"/>.</para>

<para>Incluso si no se encuentra exactamente lo que estamos buscando, podria encontrar
algo parecido, a lo que tiene más sentido unirse a ese proyecto y añadir funcionalidad
en lugar de empezar desde cero por si mismo.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="empezando-con-lo-que-se-tiene">
<title>Empezando con lo que se tiene</title>

<para>Has investigado, sin encontrar nada que realmente se adapte a tus necesidades, y decides
iniciar un nuevo proyecto.</para>

<para>¿Ahora qué?</para>

<para>Lo más difícil acerca de lanzar un proyecto de software libre es transformar una
visión privada a una pública. Tu y tu organización quizas sepan exactamente lo que deseas
pero expresar ese objetivo comprensivamente al resto del mundo tiene su trabajo. De hecho, es escencial, que te tomes tu tiempo para hacerlo. Tu y los otros fundadores deben decidir sobre qué va
realmente el proyecto&mdash;eso es, decidir sus limitaciones, lo que <emphasis>no podra</emphasis>
hacer como lo que sí&mdash;y escribir una declaración de objetivos. Ésta parte no suele ser
usualmente difícil, aunque puede revelar afirmaciones y desacuerdos sobre la naturaleza del
proyecto, lo cual está bien: mejor resolver esto ahora que luego. El próximo paso es empaquetar
el proyecto para el consumo público, y esto es, basicamente, trabajo puro y duro.</para>

<para>Lo que lo hace laborioso es porque consiste principalmente de organizar y documentar lo que
ya todo el mundo sabe&mdash;todos aquellos involucrados en el proyecto hasta ahora. Así que, para
las personas trabajando ya, no existen beneficios inmediatos. Estos no necesitan de un fichero
<filename>README</filename> que resuma el proyecto ni de un documento de diseño o manual de usuario.
No necesitan de un árbol de código cuidadosamente ordenado conforme a los estándares informales,
ampliamente utilizados para las distribuciones de fuentes. De cualquier forma como esté 
ordenado el código fuente estará bien, porque ya estaran acostumbrados de todas formas, y si el
código funciona, saben cómo usarlo. Ni siquiera importa si las afirmaciones fundamentales
sobre la arquitectura del proyecto siguen sin documentar, ya estan familiarizados con lo que
deben hacer.</para>

<para>En cambio, los recien llegados, necesitan de todas estas cosas. Afortunadamente, no las
necesitan todas a la vez. No es necesario proporcionar todos los recursos posibles antes de
tomar un proyecto público. Quizas en un mundo perfecto, todo nuevo proyecto open source
empezaria su vida con un riguroso documento de diseño, un manual de usuario completo (marcando
especialmente las características planeadas pero que aun no han sido implementadas), código
empaquetado hermosamente y portable, capaz de ejecutar en cualquier plataforma y así sucesivamente.
En realidad, cuidar de todos estos detalles consumiria demasiado tiempo, y de todas maneras,
es trabajo con el que podrian ayudar voluntarios una vez que el proyecto esté en marcha.</para>

<para>Por otro lado, lo que <emphasis>sí</emphasis> es necesario, es que se realice una
inversión apropiada en la presentación, de forma que los recien llegados puedan superar
el obstaculo inicial de no estar familiarizados con el proyecto. Pensemos en ello
como en el primer paso en un proceso de inicio (bootstrapping), llevar al proyecto a un tipo
de activación de energia mínima. He escuchado llamar a este umbral como
<firstterm>hacktivation energy</firstterm>: la cantidad de energia que debe aportar
un recien llegado antes de recibir algo a cambio. Mientras menor sea ésta energia, mejor.
La primera tarea es hacer descender ésta <emphasis>hacktivation energy</emphasis>a niveles
que animen a la gente a involucrarse.

<para>Cada una de las siguientes subsecciones, describen un aspecto importante de iniciar
un nuevo proyecto. Estan presentadas casí en el mismo orden en el que un nuevo visitante
las encontraria, aunque claro, el orden en el cual sean implementadas puede ser diferente.
Incluso pueden ser tratadas como una lista de tareas. Cuando se inicie un proyecto,
asegurese de revisar la lista y de que cada uno de los elementos sean cubiertos, o al
menos asegurar cierta comodidad con las posibles consecuencias de dejar alguna aparte.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="escoger-un-nombre">
<title>Escuger un buen nombre</title>

<para>Pongase en la posición de alguien que acaba de escuchar acerca
de su proyecto, quizas por alguien quien fortuitamente tropezo con
el mientras buscaba por alguna aplicación para resolver un problema.
Lo primero que encontraran será el nombre del proyecto.</para>

<para>Un nombre genial no hará que automaticamente el proyecto tenga
exito, y un nombre malo no significa que éste acabado&mdash;bueno, 
en realidad un mal nombre probablemente podría hacer eso, pero empecemos
asumiendo que nadie está activamente intentando hacer que su proyecto
falle. De todos modos, un mal nombre puede desacelerar la adopción
del programa porque la gente no se lo tome seriamente o porque
simplemente les cuesta recordarlos.</para>

<para>Un buen nombre:

<itemizedlist>
	<listitem><para>Da cierta ídea de lo que el proyecto hace,
	o al menos está relacionado de una manera obvia, como si
	alguien conoce el nombre y sabe lo que hace, despues lo 
	recordaran rapidamente.</para>
	</listitem>
	
	<listitem><para>Es fácil de recordar. Veamos, no hay nada
	de falso en el heco de que el íngles se a convertido en
	el lenguaje por defecto de Internet: "fácil de recordar"
	significa "fácil para alguien que sepa leer en íngles
	de recordar." Nombres que son calambures dependientes 
	en la pronunciación de ingleses nativos, por ejemplo, seran opacos
	para muchos lectores no nativos en íngles. Si el calambur
	es particularmente llamativo y memorable, quizas sí valga
	la pena. Sólo recuerde que muchas personas al ver el nombre
	no lo escucharán en sus mentes de la misma manera que un
	íngles nativo lo haría.</para>
	</listitem>

	<listitem><para>No tiene el mismo nombre que otro proyecto
	y no infringe ninguna marca comercial. Esto sólo son
	buenos modales, como un buen sentido legal. No desea
	crear confusiones de identidad. Ya es bastante difícil
	mantenerse al día con todo lo que hay disponible en
	la red, sin tener diferentes cosas con el mismo nombre.</para> 

	<para>Los enlaces mencionados anteriormente en <xref linkend="investiga"/>
	son muy utiles en descubrir si algún otro proyecto
	ya tiene el mismo nombre en el que estabamos pensando.
	Podemos encontrar buscadores gratuitos de marcas registradas 
	en <ulink url="http://www.nameprotect.org/"/> y
	<ulink url="http://www.uspto.gov/"/>.</para>
	</listitem>

	<listitem><para>Está disponible como un nombre de dominio
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, y
            <systemitem>.org</systemitem>.
	Hay que escoger alguno, probablemente <systemitem>.org</systemitem>,
	para promocionarse como el sitio oficial para el proyecto.
	Los otros dos deben reenviar allí simplemente para evitar
	que terceras partes creen una confusión de identidad sobre
	el nombre del proyecto. Incluso si piensa en hospedar el
	proyecto en otro sitio (vea <xref linkend="empezando-con-hospedaje-externo"/>)
	puede registrar los dominios específicos del proyecto y
	redireccionarlos a sitio del hospedaje. Ayuda mucho a los
	usuarios tener que recordar sólo un URL.</para>
	</listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="declaracion-objetivos">
<title>Tener los objetivos claros</title>

<para>Una vez que han encontrado el sitio del proyecto, lo siguiente
que la gente hace es buscar por una descripción rápida, una declaración
de objetivos, para poder decidir (en menos de 30 segundos) si estan o no
interesados en aprender más. Esto debe estar en un lugar prioritario
en la página principal, preferiblemente justo debajo del nombre del
proyecto.</para>

<para>La declaración de los objetivos debe ser concreta, limitada y
sobre todo, corta. Aquí tenemos un buen ejemplo, de <ulink
url="http://www.openoffice.org/"/>:</para>

	<blockquote>
	<para><emphasis>Crear, como una comunidad, una suite ofimática
	líder a nivel internacional, que funcione en las mayores plataformas
	y proporcionar acceso a toda la funcionalidad y datos a traves de API's
	basadas en componentes abiertos y un formato de ficheros basados en XML.
	</emphasis></para>

<para>En pocas palabras, han logrado la máxima puntuación, sobretodo
al basarse en los conocimientos previos de los lectores. Al decir
"<emphasis>como una comunidad</emphasis>", señalan que ninguna
corporación dominará el desarrollo. "<emphasis>Internacional</emphasis>"
significa que la aplicación permitira a personas con multiples lenguas
y localidades trabajar. "<emphasis>En las mayores plataformas</emphasis> 
significa que será portable a Unix, Macintosh y Windows. El resto señala
que las interfaces abiertas y formatos de ficheros faciles de comprender
son una parte importante de sus objetivos. De buenas a primeras, no 
intentan declarar ser una alternativa libre a Microsoft Office, aunque
seguramente la mayoria puede leer entre lineas. Aunque ésta declaración
de objetivos pueda parecer demasiado amplia a primera vista, el hecho es
que está bien circunscrita: las palabras "<emphasis>suite ofimática
</emphasis>" significan algo muy concreto para aquellos familiarizados
con este tipo de programas. Otra vez, el asumir sobre los conocimientos
previos del lector (en este caso probablemente de MS Office) permite 
mantener la declaración concisa.<para> 

<para>El ambito de una declaración de objetivos depende en gran
parte de quien la escriba, no sólo del programa que intenta describir.
Por ejemplo, tiene sentido para OpenOffice.org utilizar las palabras
"<emphasis>como una comunidad</emphasis>", porque el proyecto fue
iniciado, y sigue estando patrocinado, por Sun Microsystems. Al
incluir esas palabras, Sun esta indicado sensibilidad a preocupaciones
de que intente dominar el proceso de desarrollo. Con este tipo de cosas,
simplemente demostrar un conocimiento ambiguo del <emphasis>potencial
</emphasis> de un problema ayuda enormemente en evitar el problema
completamente.<!--This was hard--> Por otra parte, aquellos proyectos
que no son patrocinados por una sola corporación probablemente
no tengan que utilizar este lenguaje, despues de todo, el desarrollo
comunitario es la norma, así que normalmente no debería haber ninguna
razón para señalar esto como una parte de los objetivos.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="declara-libertad">
<title>Declara que el proyecto es libre</title>
<para>Aquellos que sigan interesados despues de leer la declaración de
obejtivos querran más detalles, quizas un poco de documentación para
usuarios o desarrolladores, y eventualmente querran descargar algo. Pero
antes que nada de esto, necesitaran estar seguros de que es open source.
</para>
<para><emphasis>La página principal debe poner claramente y sin ambiguedades
que el proyecto es open source</emphasis>. Esto puede parece obvio,
pero es sorprendete cuantos proyectos se olvidan de esto. He visto
sitios de proyectos de software libre donde la página principal no sólo
no decia bajo cual licencia libre se distribuia la aplicación sino
que nisiquiera declaraban que el software fuese libre. A veces, estas
piezas cruciales de información eran relegadas a la página de descargas o
a la página de los desarrolladores o a algún otro lugar el cual requería
más de un enlace para llegar. En casos extremos, la licencia no se mostraba
en niguna parte del sitio&mdash;la única forma de encontrarla era descargando
la aplicación e investigando dentro.</para>

<para>No cometais estos errores. Una omisión como ésta puede haceros
perder muchos desarrolladores y usuarios potenciales. Declarad desde
el principio, justo debajo de la declaración de objetivos, que el proyecto
es "software libre" u "open source", y mostrad la licencia exacta. Una guía rápida
para escoger una licencia se encuentra en <xref linkend="licencia-rapida"/>
<phrase output="printed">más adelante en éste capítulo</phrase>, y algunos
detalles sobre las licencias serán discutidos en <xref linkend="legal"/>.</para>

<para>Llegados a este punto, nuestro visitante hipotético ha determinado&mdash;
probablemente en un minuto o menos&mdash;que está interesado en utilizar,
digamos, al menos cinco minutos más investigando el proyecto. La próxima
parte describe qué debería encontrar durante esos cinco minutos.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="caracteristicas-y-requerimientos">
<title>Lista de características y requerimientos</title>

<para>Debería haber una breve lista de las características que el software
soporta (si algo aun no ha sido completado, se puede listar de todas formas,
pero señalando "<emphasis>planeado</emphasis>" o "<emphasis>en&nbsp;progreso</emphasis>")
y el tipo de entorno necesario para ejecutar la aplicación. Hay que pensar
en ésta lista como algo que dariamos a alguien que requiere un resúmen de
nuestro programa. Por ejemplo, la declaración de objetivos podría decir:</para>

	<blockquote>
	<para><emphasis>Crear un controlador y sistema de busqueda con una API, para
	ser utilizada por programadores suministrando servicios de busqueda
	para grandes colecciones de ficheros de texto.
	</emphasis></para>
	</blockquote>

<para>La lista de características y requerimientos daría detalles
que permitirian esclarecer el alcance de la declaración de objetivos:
</para>

  <blockquote>
    <para><emphasis>Características</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Busquedas en texto plano,
                HTML y XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Busqueda de palabaras o frases</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(planeado) Emparejando borroso (Fuzzy Matching)</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(planeado) Actualización incremental de 
                indices</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(planeado) Indexado de sitios web
                remotos</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Requerimientos:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 o mayor</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Espacio en disco suficiente para contener los indices
                (aproximadamente 2x el tamaño original de los datos)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Con ésta información, los lectores podrán rapidamente
tener una ídea de si éste programa tiene alguna esperanza de
trabajar para ellos, y tambien pueden considerar involucrarse como
desarrolladores.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="estado-desarrollo">
<title>Estado del desarrollo</title>

<para>La gente siempre quiere saber cómo va un proyecto. Para proyectos nuevos,
desean saber la separación entre las promesas del proyecto y la realidad del momento. Para
proyectos maduros, desean saber cuan activamente es mantenido, cuan seguido sacan nuevas
versiones, la facilidad para reportar fallos, etc.</para>

<para>Para responder a estas dudas, se debe suministrar una página que muestre el estado
del desarrollo, listando los objetivos a corto plazo del proyecto y las necesidades (por
ejemplo, quizas se esten buscando desarrolladores con un expertos en un tema en párticular).
Ésta página tambien puede dar una historia de versiones anteriores, con listas de las
características, de manera que los visitantes obtengan una ídea de cómo el proyecto
define su "progreso" y de cuan rapidamente se hacen progresos de acuerdo a esas
definiciones.</para>
<para>No hay que asustarse por parecer no estar preparado y no caer en la tentación
de inflar el estado del desarrollo. Todos saben que el software evoluciona por etapas;
no hay que avergonzarse en decir "Esto es software alfa con fallos conocidos. Ejecuta, y
funciona algunas veces, así que uselo bajo su responsabilidad." Este lenguaje no asustará
el tipo de desarrolladores que son necesarios en esta etapa. En cuanto a los usuarios, una
de las peores cosas que un proyecto puede hacer es atraer usuarios antes de que el
software éste listo para estos. Una reputación por inestabilidad y fallos es muy díficil
de hacer desaparecer una vez adquirida. La paciencia da sus frutos a largo plazo; siempre
es mejor que el software sea <emphasis>más</emphasis> estable de lo que espera el usuario
ya que las sorpresas gratas producen la mejor públicidad boca a boca.</para>

<sidebar id="alfa-y-beta">
  <title>Alfa y Beta</title>
  <para>El término <firstterm>alfa</firstterm> usualmente significa la primera versión,
  con lo que los usuarios pueden realizar todos el trabajo teniendo todas la funcionalidad
  esperada, pero que se sabe tiene fallos. El principal proposito de el software alfa es 
  generar una respuesta, de forma que los desarrolladores sepán en qué trabajar. La próxima
  etapa, <firstterm>beta</firstterm>, significa que han sido resueltos todos los fallos
  más importantes arreglados, pero que aun no ha sido intesivamente probado como para 
  ser la versión oficial. El proposito de las betas es la de convertirse en la versión
  oficial, asumiendo que nuevos fallos no sean encontrados, o de suministrar un feedback
  para los desarrolladores para que logren la versión oficial más rápido. La diferencia
  entre alfa y beta es más una cuestión de juicio.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="descargas">
<title>Descargas</title>

<para>EL software debe poder ser descargable como código fuente en formatos estándares,
páquetes binarios (ejecutables) no son necesarios, a menos que el programa tenga requerimientos
muy complicados para su compilado o dependencias que hagan hacerlo funcionar sea muy laborioso
para la mayoria de las personas. (¡Aunque si es éste el caso, el proyecto va a tenerlo muy
difícil atrayendo programadores de todas maneras!)</para>

<para>El mecanismo de distribución debe de ser de lo más conveniento, estándar y sencillo posible.
Si se estuviese intentando erradicar una enfermedad, no distribuiria la medicina tal que requiriese
de una jeringuilla especial para administrarse. De igual manera, un programa debe ser conforme a métodos
de compilación e instalación estándares; entre más se desvie de estos estándares, mayor será la cantidad
de usuarios y desarrolladores potenciales que se den por vencidos y de abandonen el proyecto confundidos.</para>

<para>Esto parece obvio, pero muchos proyectos no se molestan en estandarizar sus procedimientos
de instalación hasta mucho despues, diciendose a si mismos que esto lo pueden hacer en cualquier momento:
<emphasis>"Ya resolveremos todas esas cosas cuando el código éste casí listo."</emphasis> De lo que no
nos se dan cuenta es de que al dejar al lado el trabajo aburrido de terminar los procedimientos de
compilado e instalación, en realidad estan ralentizando todo&mdash;porque desalentan a los programadores
que de otra manera habrían contribuido al código. Más dañino aun, no <emphasis>saben</emphasis> que estan
perdiendo a todos esos desarrolladores, porque el proceso es una acumulación de eventos que no suceden:
alguien visita un sutios web, descarga el programa, intenta compilarlo, falla, deja de intentarlo y abandona.
¿Quíen sabrá que ocurrio exceptuando a ésta persona? Nadie en el proyecto se dará cuenta que el interés y
la buena voluntad de alguien a sido silenciosamente malgastada.</para>

<para>Las tareas aburridas con un alto beneficio siempre deben ser hechos al principio y disminuyendo
de manera significativa las barreras de entrada a un proyecto utilizando buenos páquetes brindan
altos beneficios.</para>

<para>Cuando se lanza un páquete descargable, es vital que se le dé un número de versión único a éste lanzamiento,
de manera que la gente pueda comparar dos versiones cualquieras diferentes y saber cual reemplaza a cual. Una
discusión detallada sobre la numeración de versiones puede ser encontrada en <xref linkend="numeracion-versiones"/>,
y detalles sobre la estandarización de los procedimientos de compilado e instalación serán cubiertos
en <xref linkend="empaquetado"/><phrase output="printed">, ambos en <xref linkend="ciclo-desarrollo"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Control de versiones y acceso al Bug Tracker</title>

<para>Descargar páquetes con el código fuente está bien para aquellos que sólo desean instalar y utilizar un programa,
pero no es suficiente para aquellos que desean buscar fallos o añadir nuevas mejoras. Instantaneas nocturnas del
código fuente pueden ayudar, pero esto no es sufuciente para una prospera comunidad de desarrollo. Estas personas
necesitan de acceso en tiempo real a los últimos cambios, y la manera de proporcionarles esto es utilizando un sistema
de control de versiones (version control system). La presencia de fuentes controladas, accesibles anonimamente
es una señal de&mdash;para ambos, usuarios y programadores&mdash;que éste proyecto ésta haciendo un esfuerzo en
proporcionar todo lo necesario para que otros participen. Si no se puede ofrecer control de versiones desde
el principio, comunique la intención de montarlo pronto. La infraestructura de control de versiones es discutida
en detalle en <xref linkend="vc"/><phrase output="printed"> en <xref linkend="infraestructura-tecnica"/>
</phrase>.</para>

<para>Lo mismo se aplica para el seguimiento de errores del proyecto. La mayor importancia que se le dé a ésta
base de datos, lo mejor que parecerá el proyecto. Esto puede parecer contra intuitivo, pero hay que recordar
que el número de fallos registrados, en realidad depende en tres cosas: el número absoluto de errores presentes
en el programa, el número de usuarios utilizandolo y la conveniencia con la cual esos usuarios registran
nuevos fallos. De estos tres factores, los dos últimos son más significativos que el primero. Cualquier
aplicación con suficiente tamaño y complejidad tiene una cantidad arbitraria de fallos esperando a ser
encontrados. La verdadera cuestión es, cuan bien serán registrados y priorizados estos errores. Un proyecto
con una base de datos de fallos amplia y bien mantenida (errores importantes son atacados rapidamente,
fallos duplicados son unificados, etc.) generan una mejor impresión que un proyecto sin una o vacia.</para> 

<para>Claro está, que si un proyecto está empezando, que la base de datos de fallos
contenga algunos pocos, y no hay mucho que se pueda hacer al respecto. Pero si la página donde se indica
el estado del proyecto, enfátiza en la juventud del proyecto y si las personas mirando los fallos pueden
observar que muchos de estos han sido incluidos recientemente, pueden asumir que el proyecto tiene una
<emphasis>proporción</emphasis>saludable de entradas y no serán alarmados por el mínimo absoluto de
fallos registrados.</para>

<para>Hay que señalar que los bug trackers no sólo son usados para fallos en los programas pero tambien para
peticiones de mejoras, cambios en la documentación, tareas pendientes y mucho más. Los detalles de ejecutar
un sistema de seguimiento de fallos será cubierto en <xref linkend="bug-tracker"/><phrase output="printed"> en
<xref linkend="infraestructura-tecnica"/>, así que no vamos a entrar en detalles. Lo importante desde la perspectiva
de la presentación está en <emphasis>tener</emphasis>un bug tracker y asegurarse de que es visible desde la
página principal del proyecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="canales-de-comunicacion">
<title>Canales de comunicación</title>

<para>Usualmente los visitantes desean saber cómo pueden contactar con los seres humanos detras del proyecto.
Hay que suministrar direcciones de listas de correo, salas de chat, canales en IRC y cualquier otro foro
donde aquellos involucrados puedan ser contactados. Hay que dejar claro que los autores del proyecto
están suscritos a estas listas, de manera que la gente vea una forma de dar feedback a los desarrolladores. La
presencia de estos en las listas no implica obligación alguna de responder a todas las preguntas que se formulan
o de implementar todas las peticiones. A la larga, muchos de los usuarios probablemente nisiquiera se unan
a los fotos de todas maneras, pero estarán conformes con saber que <emphasis>podrian</emphasis>si fuese necesario.
</para>

<para>En la primeras etapas de cualquier proyecto, no existe la necesidad de que haya una diferenciación entre
los foros de los usuarios y los de los desarrolladores. Es mejor tener a todos los involucrados en el proyecto
hablando en conjunto en una sala. Dentro de los primeros en adoptar al proyecto, la distinción entre usuario
y desarrollador será muchas veces borrosa, hasta tal punto que la distinción se puede hacer, la proporción
de programadores y usuarios usualmente es mayor al principio que al final. Mientras que no se puede asumir
que todos quienes utilicen el programa es un programador que quiere modíficarlo, sí se puede asumir
que al menos está interesado en seguir las discusiones sobre el desarrollo y en obtener una visión de
la dirección del proyecto.</para>

<para>Ya que éste capítulo es sólo sobre iniciar un proyecto, es suficiente decir que al menos
estos foros de comunicación deben existir. Luego en <xref linkend="crecimiento"/><phrase output="printed">
en<xref linkend="comunicaciones"/></phrase>, examinaremos dónde y cómo montar estos foros, cómo deben
ser moderados o cualquier otro tipo de dirección y cómo separar los foros de usuarios de los foros
de los desarrolladores, cuando llegue el momento, sin crear un espacio infranqueable.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pautas-de-desarrollo">
<title>Pautas de Desarrollo</title>

<para>Si alguien considera contribuir al proyecto, buscará por pautas de desarrollo. EStas pautas son más
sociales que técnicas: explican como los desarrolladores interactuan entre ellos y con los usuarios y 
ultimamente como hacer las cosas.</para>

<para>Este tema es tratado en detalle en <xref linkend="reglas-escritas"/><phrase output="printed"> en
<xref linkend="infraestructura-social"/></phrase>, pero los elementos básicos de unas pautas de desarrollo son:

<itemizedlist>
  <listitem><para>enlaces a los foros para la interacción de los desarrolladores
            </para> 
  </listitem>
  <listitem><para>instrucciones en cómo reportar fallos y enviar parches
            </para>
  </listitem>
  <listitem><para>alguna indicación de <emphasis>cómo</emphasis>
	    el desarrollo es usualmente llevado a cabo&mdash;es el
	    proyecto una dictadura benevolente, una democracia o algo más
            </para>
  </listitem>
</itemizedlist>

Ningún sentido peyorativo es intencional por lo de "dictadura" por cierto. Es perfectamente aceptable
ser un tirano donde un desarrollador en particular tiene el poder de veto sobre todos los cambios. Muchos
proyectos exitosos funcionan de ésta manera. Lo importante es que el proyecto sea consciente de esto y lo
comunique. Una tirania pretendiendo ser una democracia desalentara a las personas; una tirania que dice serlo
funcinará bien siempre que el tirano sea competente y de confianza.</para>

<para>Un ejemplo de unas pautas de desarrollos particularmente exhaustivas estan en 
<ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
o en <ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> tenemos unas pautas más amplias
que se concentran más en la forma de gobierno y el espíritu de participación y menos en temas técnicos.</para>

<para>Proveer una introducción a la aplicación para los programadores es otro tema y será discutido en 
<xref linkend="documentacion-para-desarrolladores"/><phrase output="printed">más adelante en éste capítulo
</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentacion">
<title>Documentación</title>

<para>La documentación es escencial. Debe haber <emphasis>algo</emphasis>
para que la gente lea, aunque sea algo rudimentario e incompleto. Esto
entra de lleno en la categoria antes referida y usualmente es la primera
área donde un proyecto falla. Conseguir una declaración de objetivos y
una lista de requerimientos, escoger una licencia, resumir el estado de
desarrollo&mdash;son todas tareas relativamente pequeñas que pueden ser
completadas y a las que usualmente no es necesario volver una vez
terminadas. La documentación, por otra parte, nunca está terminada
realmente, lo cual sea una de las razones por las cuales se tarde
al iniciarla.</para>

<para>La cuestion más insidiosa sobre la utilidad de la documentación
es que es inversamente proporcional para quienes la escriben y para
quienes la leen. Lo más importante de la documentación para un usuario
inicial es lo más básico: cómo configurar la aplicación, una introducción
de cómo funciona y quizas algunas guias para realizar las tareas
más comunes. Pero a la vez son estas cosas las más sabidas por 
aquellos quienes <emphasis>escriben</emphasis> la documentación&mdash;
tan bien sabidas que puede ser difícil para estos ver las cosas desde
el punto de vista de los lectores y dificultando listar los pasos
que (para los escritores) parecen tan obvios que no merecen especial
atención.</para>

<para>No existe una solución mágica para éste problema. Alguien debe
sentarse y escribir todo esto para luego presentarselo a un usuario
nuevo tipo y probar la calidad. Hay que utilizar un formato simple y
fácil de modíficar como HTLM, texto plano, Tex o alguna variante de
XML&mdash;algo que sea conveniente para mejoras rápidas, ligeras e
imprevisibles. Esto no es sólo para eliminar cualquier trabajo innecesario
a los escritores originales para realizar cambios incrementales, sino
que tambien para quienes se unan al proyecto despues y desean
trabajar en la documentación.</para>

<para>Una manera de asegurarse de que la documentación básica inicial
se hace es límitar su alcance. Al menos de ésta manera no parecera que
se está escribiendo una tarea sin fin. Una buena regla es seguir unos
criterios mínimos:</para>

<itemizedlist>
  <listitem><para>Avisar al lector claramente el nível técnico
            que se espera que tenga.</para>
  </listitem>
  <listitem><para>Describir clara y extensivamente cómo configurar
	    el programa y en alguna parte al inicio de la documentación
	    comunicarle al usuario cómo ejecutar algún tipo de prueba
	    de diagnóstico o un simple comando para confirmar que todo
	    funciona correctamente. La documentación inicial es a veces
	    más importante que la documentación de uso. Mientras mayor
	    sea el esfuerzo invertido en instalar y tener funcionando
	    la aplicación, mayor será la persistencia en descubrir
	    funcionalidades avanzadas o no documentadas. Cuando alguien
	    abandona, abandonan temprano; por ello, las primeras etapas
	    como la instalación, necesiten la mayor ayuda.</para>
  </listitem>
  <listitem><para>Dar un ejemplo estilo tutorial de como realizar alguna
	    tarea común. Obviamente, muchos ejemplos para muchas tareas
	    sería mejor, pero si el tiempo es límitado, es mejor escoger
	    una tarea en específico y llevar al usuario de la mano
	    detenidamente. Una vez que se ve que la aplicación <emphasis>
	    puede</emphasis> ser utilizada para cosa, empezarán a explorar
	    qué más es lo que puede hacer&mdash;y si se tiene suerte
	    empezar a documentarlo ellos mismos. Lo que nos lleva
	    al siguiente punto...</para>
  </listitem>
  <listitem><para>Indicar las areas donde se sabe que la documentación
	    es incompleta. Al mostrar a los lectores que se es consciente
	    de las deficiencias, nos alineamos con su punto de vista. La empatía
	    les da confianza en que no van a tener que luchar para convencer al
	    proyecto de su importancia. Estas indicaciones no necesitan representar
	    promesa alguna de completar los espacios en blanco en una fecha en
	    particular&mdash;es igualmente legitimo tratarlas como requisitos
	    abiertos para ayudantes voluntarios.</para>
  </listitem>
</itemizedlist>

<para>Ese último críterio es de una especial importancia, y puede ser
aplicado al proyecto entero, no sólo a la documentación. Una gestión
exacta de las deficiencias conocidas es la norma en el mundo Open Source.
No se debe exagerar en las faltas del proyecto, solo identificarlas
escrupulosa y desapasionadamente cuando sea necesario (sen en la
documentación, en la base de datos de fallos o en discusiones en la
lista de correos). Nadie verá esto como derrotismo por parte del proyecto,
ni como una responsabilidad explícita. Ya que cualquier que utilice la
aplicación descubrirá sus deficiencias por si mismos, es mejor que esten
psicologicamente preparados&mdash;entonces parece que el proyecto tiene
un sólido conocimiento como va progresando.</para>

<sidebar id="manteniendo-el-faq">
  <title>Manteniendo un FAQ (Preguntas Más Frecuentes)</title>

  <para>Un <firstterm>FAQ</firstterm> (del íngles "Frequently Asked Questions")
  puede ser uno de las mejores inversiones que un proyecto puede hacer
  en terminos de beneficios educativos. Los FAQs estan enfocados a las
  preguntas que desarrolladores y usuarios podrían formular&mdash;opuesto
  a aquellas que <emphasis>se espera</emphasis>que hagan&mdash;por lo cual
  un FAQ bien cuidado tiende a dar a aquellos quienes lo consultan
  exactamente lo que estan buscando. Por lo general es el primer lugar
  en el que se busca cuando se encuentran con un problema, incluso con
  preferencia sobre el manual oficial y es probablemente el documento
  más propenso a ser enlazados desde otros sitios.</para>

  <para>Desafortunadamente, no se puede hacer un FAQ al principio del
proyecto. Los buenos FAQs no son escritos, crecen. Son por definición
documentos reactivos, evolucionando con el tiempo como respuesta
al uso diario del programa. Ya que es imposible anticipar correctamente
las preguntas que se podrian formular, es imposible sentarse a escribir
un FAQ útil desde cero.</para>

  <para>Así que no hay que malgastar el tiempo en intentarlo. En cambio,
  podría ser útil crear una plantilla casí en blanco del FAQ, de forma que
  haya un lugar obvio donde las personas contribuyan con preguntas y
  respuestas despues de que el proyecto esté en progreso. En ésta etapa
  lo más importante no es tenerlo todo completo, sino la conveniencia:
  si es sencillo agregar contenido al FAQ, la gente lo hará. (Un mantenimiento
  correcto de un FAQ es un proble no trivial e intrigante y es discutido más
  a fondo en <xref linkend="faq-manager"/><phrase output="printed"> en 
  <xref linkend="dirigiendo-voluntarios"/></phrase>.)</para>
</sidebar>
 
<sect3 id="disponibilidad-documentacion">
<title>Disponibilidad de la documentación</title>

<para>La documentación debe ser accesible desde dos sitios:
en línea (directamente desde el sitio web), <emphasis>y</emphasis>
en la distribución descargable de la aplicación (consultar
<xref linkend="empaquetado" /><phrase output="printed"> en 
<xref linkend="ciclo-de-desarrollo" /></phrase>). Debe estar
en línea y que sea navegable porque a menudo se lee la
documentación <emphasis>antes</emphasis> de descargar el
programa por primera vez, como una ayuda en la desición de
descargarlo o no. Pero tambien debe acompañar al programa,
bajo la premisa de que la descarga debe suministrar todo lo
necesario para utilizar el páquete.</para>

<para>Para la documentación en línea, hay que asegurarse de que hay
un enlace que muestra <emphasis>toda</emphasis> la documentación
en una página HTML (indicando algo como "monolito" o "todo-en-uno" o
"sólo un gran fichero" al lado del enlace, de tal manera que se sepa
que puede tardar un poco en cargar). Esto es muy útil porque a veces
sólo desean buscar una sola palabra o frase en la documentación.
Generalmente, las personas ya saben qué es lo que estan buscando, sólo
que no recuerdan en cual sección está. Para estas personas, nada es más
frustrante que encontrar una página para la tabla de contenidos, luego
otra diferentes para la introducción, luego otra diferente para las
instrucciones de instalación, etc. Cuando las páginas estan divididas
de esa manera, la función de búsqueda de sus navegadores es inutil. Este
estilo de páginas separadas es útil para quienes ya saben cual es la
sección que necesitan, o que desean leer toda la documentación de
principio a fin en secuencia. Pero este <emphasis>no es</emphasis>
la forma más común en que la documentación leida. Ocurre más a menudo
que alguien que conoce algo básico de la aplicación vuelve para buscar
una palabra o frase. Fallar al suministrarles con un sólo documento
en el que se puedan realizar busquedas, es hacerles la vida más dura
</para>

</sect3>

<sect3 id="documentacion-desarrolladores">
<title>Documentación para Desarrolladores</title>

<para>La documentación para los desarrolladores es escrita para ayudar
a los programadores a entender el código y puedan arreglarlo o extenderlo.
Esto es algo diferente a las <emphasis>pautas de desarrollo</emphasis>
discutidas anteriormente, que son más sociales que técnicas. Estas pautas
para los desarrolladores le dicen a los programadores como deben
desenvolverse entre ellos. La documentación les dice como deben
desenvolverse con el código en si mismo. Por conveniencia
las dos vienen juntas en un sólo documento (como sucede con el ejemplo
anterior <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>)
pero no es obligatorio.</para> 

<para>A pesar de la que la documentación para los desarrolladores puede
ser de mucha ayuda, no existe ninguna razón para retrasar un lanzamiento
por hacerla. Siempre que los autores originales esten disponibles (y dispuestos)
a responder a preguntas sobre el código, ya es suficiente para empezar. De hecho,
tener que responder la misma pregunta varias veces es una motivación muy
muy común para escribir dicha documentación. Pero antes de que sea escrita,
determinados contribuyentes seran capaces de desenvolverse con el código ya
que la fuerza que hace que las persones utilicen su tiempo en leer
el código base es que éste código les resulta útil. Si las personas tienen
fé en ello, ninguna cantidad de documentación hará que vengan o los
mantendrá.</para>

<para>Así que si hay tiempo para escribir documentación sólo para una
audiencia, que sea para los usuarios. Toda la documentación para los
usuarios es, en efecto, documentación para desarrolladores tambien. 
Cualquier programador que vaya a trabajar en un proyecto
necesita estar familiarizado con como usarlo. Luego, cuando se vea a
los programadores preguntando las mismas preguntas una y otra vez,
habrá que tomarse el tiempo de escribir algunos documentos aparte
sólo para estos.</para>

<para>Algunos proyectos utilizan wikis para su documentación inicial o
incluso para su documentación principal. Mi experiencia, esto es efectivo
si y sólo si e, wiki es editado activamente por algunas personas que se
ponen deacuerdo en como la documentación debe ser organizada y la voz
que debe tener. Más en <xref linkend="wikis"/><phrase output="printed">
en <xref linkend="infraestructura-tecnica"/></phrase>.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="salidas-de-ejemplo">
<title>Ejemplos de salidas y capturas</title>

<para>Si el proyecto implica una interface gráfica para el usuario o si
produce una salida gráfica o distintiva, habrá que poner algunos
ejemplos en el sitio web del proyecto. En el caso de las interfaces, esto
significa capturas. Para salidas, pueden ser capturas o sólo ficheros.
Ambos dotan al usuario de gratificación instantanea: una sola captura
puede ser más convincente que párrafos de texto descriptivo y chachara
de listas de correo, porque una captura es la prueba indiscutible
de que el programa <emphasis>funciona</emphasis>. Puede que tenga fallos,
quizas sea difícil de instalar o que la documentación esté incompleta,
pero esa captura sigue siendo la prueba de que con el esfuerzo necesario,
se puede hacer funcionar.</para>

<sidebar id="capturas">
  <title>Capturas</title>
  <para>Ya que hacer las capturas puede ser algo desalentador, aquí teneis
  unas instrucciones básicas sobre como hacerlas. Utilizando The Gimp
  (<ulink url="http://www.gimp.org/"/>), pinchad en 
  <guimenu>Archivo</guimenu>-&gt;<guimenu>Adquirir</guimenu>-&gt;<guimenu>Captura de pantalla</guimenu>,
  escoged<guimenuitem>Capturar una&nbsp;sola ventana</guimenuitem> o 
  <guimenuitem>Toda la&nbsp;pantalla</guimenuitem>, luego pinchad en 
  <guimenuitem>Capturar</guimenuitem>.  La próxima vez que pinche
  la ventana o la pantalla será capturada como una imagen en The Gimp
  Recortad y cambiar el tamaño de la imagen según sea necesario
  siguiendo las instrucciones en 
  <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Existen muchas otras cosas que se pueden poner en el sitio web
del proyecto, si se tiene el tiempo, o si por alguna razón u otra
son especialmente apropiadas: página de noticias, historia,
enlaces relacionados, función de búsqueda, enlace para donaciones, etc.
Ninguno de estos es necesarios al principio, pero hay que tenerlos en
mente para le futuro.</para>

<sect2 id="hosting-enlatado">
<title>Hosting enlatado</title>

<para>Existen algunos sitios que proveen hosting gratuito e
infraestructura para proyecto open source: un área web, control
de versiones, gestor de errores, zona de descargas, salas de char,
backups regulares, etc. Los detalles varian entre sitio y sitio,
pero los servicios básicos son ofrecidos por todos. Al utilizar uno
de estos sitios, se obtiene mucho por nada, dando a cambio,
obviamente, es control sobre la experiencia del usuario. Quien provee
el hosting decide cuales programas el sitio acepta y puede controlar o
al menos influenciar el aspecto de las páginas del proyecto.</para>

<para>Vaya a
<xref linkend="hosting-enlatado"/><phrase output="printed"> en
<xref linkend="infrastructura-tecnica"/></phrase> 
para una discusión más detalladas acerca de las ventajas y
desventajas del hosting enlatado y una lista de sitios que
lo ofrecen.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="inicio-rapido-licencias">
<title>Escogiendo una licencia y aplicandola</title>

<para>Esta sección está concebida para ser una guía rápida y amplia
para escoger una licencia. Leed <xref linkend="legal"/> para entender
en detalle las implicaciones legales de diferentes licencias y como la
licencia escogida puede afectar la capacidad de otras personas
de mezclar el programa con otros.</para>

<para>Existen muchas licencias libres de donde escoger. Muchas de ellas
no necesitamos tenerlas en consideración aquí, ya que han sido escritas
para satisfacer las necesidades legales específicas de alguna corporación
o persona, así que no serian apropiadas para nuestro proyecto. Por ello nos vamos a
restringir a las más usadas. En la mayoria de los casos, querras escoger
una de ellas.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="inicio-rapido-licencias-no-gpl">
<title>Las licencias "Haz lo que quieras"</title>

<para>Si se está conforme con que el código del proyecto sea potencialemente
usado en programas propietarios, entonces se puede utilizar una licencia estilo
<firstterm>MIT/X</firstterm>. Es la más sencilla de muchas licencias minimas
que no hacen más que declarar un copyright nominal (sin restringir la copia)
y especificar que el código viene sin ninguna garantía. Id a
<xref linkend="seleccionar-licencia-mit-x"> para más detalles.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="inicio-rapido-licencias-gpl">
<title>Licencia GPL</title>

<para>Si no desea que el código sea utilizado en aplicaciones propietarias
utilize la Licencia Pública General o GPL (del íngles General Public License)
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>). La GPL es
probablemente la licencia para software libre más utilizada a nivel
mundial hoy en día. Esto es en si mismo una gran ventaja, ya que muchos
usuarios potenciales y voluntarios ya estarán familiarizados con ella,
por lo cual, no tendrán que invertir tiempo extra en leer y entender
la licencia utilizada. Más detalles en 
<xref linkend="seleccionar-licencia-gpl"/><phrase output="printed">
en <xref linkend="legal"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="inicio-rapido-licencias-aplicar">
<title>Cómo aplicar una licencia a nuestro software</title>

<para>Una vez que haya sido escogida una licencia, se debe exponer
en la página principal del proyecto. No se tiene que incluir el texto
de la licencia aquí, sólo hay que dar el nombre de la licencia y un enlace
al texto completo de ésta en otra página.</para>

<para>Esto informa al público bajo cual licencia se <emphasis>pretende</emphasis>
publicar la aplicación. Para ello, el programa en si debe incluir la licencia.
La manera estandar de hacer esto es poniendo el texto completo
en un fichero llamado <filename>COPYING</filename> (or
<filename>LICENSE</filename>) y luego colocar un aviso al principio
de cada fichero con el código fuente, listando la fecha del copyright,
titular y licencia y explicando donde encontrar el texto completo
de la misma.</para>

<para>Hay muchas variaciones de éste patrón, así que miraremos a un
sólo ejemplo. La GPL de GNU indica que se debe colocar un aviso como
éste al principio de cada fichero con código fuente:</para>

<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

<para>No específica que una copia de la licencia adjuntada al programa
está en el fichero <filename>COPYING</filename>, pero comunmente es en
éste donde se pone (Se puede cambiar lo anterior para indicar esto
directamente). Esta plantilla tambien nos da una dirección física a
donde solicitar una copia de la licencia. Otro método muy común es
suministrar un enlace a una página web que contiene la licencia. Sólo
hay que utilizar el sentido común y señalar algún sitio donde se crea
habrá una copia permanente de la licencia. Por lo general, el aviso
que se coloca al principio de cada fichero con código fuente no debe
ser exacto al anteriormente expuesto, siempre y cuando se empiece con
el mismo aviso de copyright, titular y fecha, se especifique el nombre
de la licencia y se deje claro donde encontrar la licencia completa.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="ajustar-el-tono">
<title>Ajustar el tono</title>

<para>Hasta ahora hemos cubierto tareas que se hacen sólo una vez durante
el proyecto: escoger la licencia, acomodar el sitio web inicial, etc. Pero
los aspectos más importantes al empezar un nuevo proyecto son dinámicos.
Escoger la dirección para la lista de correos es fácil; asegurarse de que
las conversaciones en ésta se mantengan en contexto y sean productivas
es otro tema. Si el proyecto es abierto despues de años de desarrollo cerrado
propio, sus procesos de desarrollo cambiaran y habrá que preparar a los 
desarrolladores exitentes para éste cambio.</para>

<para>Los primeros pasos son los más duros, porque los precedentes y las
expectaciones sobre la conducta futura aun no se han definido. La estabilidad
de un proyecto no viene de políticas formales, sino de un conocimiento colectivo
compartido muy difícil de definir y que se desarrolla con el tiempo. A veces
existen unas reglas escritas, pero tienden a ser un destilado de los
acuerdos intangibles y siempre cambiantes que realmente guian el proyecto.
Las políticas escritas no definen la cultura del proyecto mas que describirla,
he incluso así, sólo se aproximan.</para>

<para>Hay algunas razones por las cuales las cosas funcionan de ésta manera.
El crecimiento y los grandes cambios no son tan dañinos para la acumulación
de las normas sociales como se puede pensar. Mientras que el cambio no
ocurra <emphasis>demasiado</emphasis> rápido, hay tiempo para que los novatos
aprendan como funcionan las cosas y despues de que aprendan, ellos mismos
ayudaran a reforzar este funcionamiento. Consideremos como las canciones
infantiles sobreviven a lo largo de los siglos. Hay niños hoy en día cantando
casí las mismas rimas que los niños de hace cien años, aunque no haya ninguno
vivo hoy en día que haya vivido entonces. Los más pequeños escuchan estas
canciones de otros niños mayores y cuando son mayores, las cantarán frente
a otros niños menores que ellos. Consientemente los niños no estan iniciando un programa
de transmisión, por supuesto, pero la razón por la cual las canciones
sobreviven es nada más y nada menos porque son transmitidas regular y
repetidamente. La éscala de tiempo de un proyecto de software libre
quizas no sea medido en siglos (aún no lo sabemos) pero las formas
de transmisión son las mismas. Aunque el índice de cambios es más rápido
y debe ser compensado con un esfuerzo de comunicación más activo y
deliberado.</para>

<para>A este esfuerzo le ayuda el hecho de que las personas por lo general
se presentan esperando y buscando normas sociales. Así es como los humanos
estamos construidos. En cualquier grupo unido por un mismo objetivo, las
personas que se unan, instintivamente buscan conductas las cuales
los marcarán como parte del grupo. El objetivo temprano de sentar precedentes
es hacer de esas conductas de grupo utiles para el proyecto; una vez
establecidas serán perpetuas por si mismas.</para>

<para>A continuación hay algunos ejemplos específicos de lo que se puede
hacer para estables buenos precedentes. No se supone que sea una lista
exhaustiva, mas es una ilustración de la ídea de que establecer un ambiente
de colaboración desde el proncipio ayuda enormemente al proyecto. Fisicamente,
cada desarroladores puede que trabaje en solitario, pero se puede hacer
mucho para hacerlos <emphasis>sentir</emphasis> como si todos estuviesen
trabajando juntos en la misma habitación. Mientras mayor sea ésta sensación
mayor será el tiempo que quieran invertir en el proyecto. He escogido estos
ejemplos en particular porque han surgido en el proyecto de Subversion
(<ulink url="http://subversion.tigris.org/"/>), en el cual participé y observé
desde sus inicios. Pero estas no son únicas a Subversion, situaciones como estas
surgen en casi todos los proyectos open source, y deben ser tomadas
como oportunidades para empezar las cosas de la manera correcta.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="evitar-discusiones-privadas">
<title>Evitar discusiones privadas</title>

<para>Incluso despues de haber hecho público el proyecto, usted
y los otros fundadores del proyecto se encontrarán a menudo intentado
resolver preguntas dificiles via comunicaciones privadas dentro
de un circulo interno. Esto es especialmente cierto en los primeros
dias del proyecto, cuando hay tantas decisiones importantes que hacer
y usualmente pocos voluntarios cualificados para resolverlas. Todas
las obvias desventajas de una lista pública de discución se perfilan
palpablemente frente a tí: el retraso inherente en las conversaciones
por correo, la necesidad de dejar que se forme un censenso, las
dificiltades de tratar con voluntarios credulos que piensan
que entienden todos los problemas pero que no es así (todo proyecto
tiene de estos; a veces son el voluntario estrella del próximo año,
a veces permanecen ingenuas durante el resto del proyecto), la persona
que no puede entender porque quieres resolver el problema X cuando
es obviamente una parte del más grande problema Y y muchos otros.
La tentación de tomar decisiones a puerta cerrada y presentarlas como
<foreignphrase>faits accomplis</foreignphrase>, o al menos como
firmes recomendaciones de un bloque unido e influenciante serian
geniales la verdad.</para>

<para>No lo hagas.</para>

<para>Por muy lentas y engorrosas que puedan ser las discusiones publicas,
casí siempre son preferibles a largo plazo. Tomar decisiones importantes
en privado es como esparcir repelente anti-voluntarios sobre el proyecto.
Ningún voluntario serio se quedaría mucho tiempo en un ambiente
donde un consejo secreto toma todas las grandes decisiones. Además,
las discusiones publicas tienen efectos secundarios beneficiosos que
durarán más que cualquier pregunta técnica que fuese el problema:

<itemizedlist>
  <listitem>
  <para>La discusion ayudará a entrenar y educar a nuevos desarrolladores.
	Nunca se sabe cuantos ojos estan viendo una conversación así;
	Incluso si muchas de las personas no participan, muchas podrian
	estar monitorizando silenciosamente, deduciendo información
	acerca de la aplicación.</para>
  </listitem>
  <listitem>
  <para>La discusión te entrenará en el arte de explicar temas técnicos
	a personas que no estan tan familiarizadas con el programa.
	Esta es una capacidad que requiere de práctica y no se puede
	entrenar hablando con personas que ya saben lo mismo que tu.</para>
  </listitem>
  <listitem>
  <para>La discusión y sus conclusiones estarán disponibles en un
	archivo público para siempre, permitiendo que futuras discusiones
	caigan en los mismos problemas. Más en <xref linkend="usando-archivos">
	<phrase output="printed">en <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>
<para>Finalmente, existe la posibilidad de que alguien en la lista
haga una contribución real a la conversación, ingeniando una ídea
nunca antes anticipada. Es difícil decir cuan probable es que esto
suceda; depende en la complejidad del código y el nivel de
especialización requerida. Pero si se me permite utilizar evidencia
anecdotica, apostaria a que esto es más probable de lo que podemos
esperar. En el proyecto Subversion, nosotros (los fundadores) creiamos
encontrarnos ante una serie compleja y profunda de problemas, en los
cuales habiamos estado pensando durante meses, y francamente,
dudabamos de que alguien en la recientemente creada lista de correos
fueses a dar alguna contribución útil a la discusión. Así que tomamos
el camino más fácil y empezamos a lanzar ídeas técnicas a diestra
y siniestra en correos privados, hasta que alguien observando el
proyecto <footnote><para>No hemos llegado a la sección de los
agradecimientos aún, pero sólo para practicar lo que luego
voy a enseñar: el nombre del observador era Brian Behlendorf, y
fue él quien no indicó la importancia de mantener todas las discusiones
públicas a menos de que existiera alguna necesidad de privacidad</para></footnote>
descubrio lo que estaba pasando y pidió que se moviera la discusión
a la lista pública. Torciendo un poco los ojos, lo hicimos&mdash;y fuimos
asombrados por la cantidad de comentarios inspiradores y sugerencias
que rapidamente resultarón. En muchos casos ofreciendo ideas que no se
nos habian ocurrido anteriormente. Al final resultó que había gente
<emphasis>muy</emphasis> inteligente en esa lista, sólo estaban
esperando el anzuelo apropiado. Es cierto que las discusiones
tomarón más tiempo de haberlas hechas en privado, pero eran mucho
más productivas, lo cual hacía que valiera la pena el tiempo extra.</para>

<para>Sin entrar en generalizaciones como "el grupo es siempre más
listo que el individuo" (ya hemos conocido muchos grupos para
saberlo) debe ser apuntado que hay ciertas actividades en las que
un grupo sobresale. Revisiones por pares masivas es una de estas.
Generar un gran número de ideas rapidamente es otra. La calidad de 
las ideas depende en la calidad del pensamiento que se ha aplicado
a estas, por supuesto, pero no vas a saber qué clase de pensadores
hay hasta que los estimules con problemas desafiantes.</para>

<para>Naturalmente, hay discusiones que deben ser llevadas a cabo en
privado; a lo largo de éste libro veremos algunos ejemplos. Pero el
principio que debe guiar siempre es: <emphasis>Si no existe razón
alguna para que sea privada, debe ser pública.</emphasis></para>

<para>Hacer que esto suceda requiere acciones. No es suficiente con
simplemente asegurarse que todos los comentarios van a la lista pública.
Tambien hay que atenerse a las conversaciones privadas innecesarias en la
lista. Si alguien intenta iniciar una conversación privada, y no existe
razón alguna para que así sea, entonces es de tu incumbencia el abrir
la discusión apropiada inmediatemente. Ni siquiera intentes comentar
el tema original hasta que se haya direccionado exitosamente la conversación
a un sitio público, o asegurado que el tema era necesariamente
privado. Si se hace esto consistentemente, las personas se darán cuenta
rapidamente y empezarań a utilizar los foros públicos por defecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevenir-la-malaeducacion">
<title>Echar a volar la mala educación</title>

<para>Desde el primero momento de la existencia pública de un proyecto
se deberá mantener una política de tolerancia cero ante la mala educación
o las actitudes insultantes en los foros. Tolerancia cero no implíca esfuerzos
técnicos per se. No se deben eliminar personas de la lista de correos
cuando ataquen a otros usuarios, o quitarles sus accesos para realizar
commits porque hayan hecho comentarios degorativos. (En teoria, habría que
llegar a tomar estas acciones, pero sólo despues de que todas las otras
vias hayan fallado&mdash;lo cual, por definición, no significa que sea
al principio del proyecto.) Tolerancia cero simplemente significa nunca
permitir que este tipo de conductas pasen desapercibidas. Por ejemplo,
cuando alguien envia un comentario técnico mezclado con un ataque
<foreignphrase>ad hominem</foreignphrase> contra otros desarrolladores
del proyecto, es imperativo que tu respuesta sea primero dirigida a ese
ataque <foreignphrase>ad hominem</foreignphrase> como un tema aparte y
sólo despues entrar en el tema técnico.</para>

<para>Desafortunadamente es muy fácil y típico, que conversaciones
contructivas terminen en una guerra. Las personas diran cosas en un
correo electrónico que nunca dirian cara a cara. Los temas de discusión
sólo ayudan a ampliar éste efecto: en cuestiones técnicas, la gente
cree a menudo que sólo existe una sola respuesta correcta para la
mayoria de las preguntas y que el desacuerdo ante la respuesta sólo
puede ser explicado por la ignorancia o la estupidez. Hay una corta
distancia entre llamar la propuesta técnica de alguien estupida y
llamar a esa persona estupida. De hecho, es difícil definir cuando
un debate técnico lo deja de ser y se convierte en ataques personales,
por lo cual una respuesta drástica y el castigo no son buenas ideas.
En su lugar, cuando creas que lo estas viviendo, envia un mensaje que
remarque la importancia de mantener la discusión amistosa, sin acusar
a nadie de ser deliberadamente venenoso. Este tipo de "política
amable" de mensajes tienen la desafortunada tendencia a parecer
consejos de un profesor de kindergarten sobre la buena conducta
en el aula:</para>

    <blockquote>
      <para><emphasis>Primero, vamos a dejar a un lado los comentarios
      (potenciales) ad hominem por favor; por ejemplo, decir que el diseño
      para la capa de seguridad de J es "simple e ignorante de los principios
      de la seguridad informática." Quizas sea cierto o no, pero en cualquier caso
      no es la manera de mantener una discusión. J hizo su propuesta de buena fé y
      estoy seguro de que M no deseaba insultar a J, pero las maneras han sido
      inadecuadas y lo único que deseamos es mantener las cosas constructivas.
      </emphasis></para>

      <para><emphasis>Ahora, vamos con la propuesta de J. Creo que J tenía razón
      en decir que...</emphasis></para>
    </blockquote>

<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>

<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practice Conspicuous Code Review</title>

<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>

<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>

<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>

<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>

<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>

<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>

<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="social-infrastructure"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Announcing</title>

<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freshmeat.net/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freshmeat is the place
everyone watches for new project announcements.  You only have to
catch a few eyes there for news of your project to spread by word of
mouth.</para>

<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>

<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>

<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>

<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>

<para>This turned out not to be the case.  In the Subversion project,
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>

<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>

<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>

<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

