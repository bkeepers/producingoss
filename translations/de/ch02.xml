<chapter id="getting-started">

<title>Der Einstieg</title>

<simplesect>

<para>Das klassische Modell, wie freie Software Projekte anfangen
wurde von Eric Raymond, in einem nunmehr berühmten Text über
Open Source, mit dem Titel <citetitle>The Cathedral and the
Bazaar</citetitle>, wie folgt beschrieben:</para>

    <blockquote>
      <para><emphasis>Jedes gute Stück Software entsteht aus der
	den Bedürfnissen eines Programmierers.</emphasis></para>

      <para>(von <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Raymond sagte wohlgemerkt nicht, dass Open Source Projekte nur
durch die Bedürfnisse eines Programmierers anfangen. Vielmehr sagte
er, dass <emphasis>gute</emphasis> Software dann entsteht, wenn der
Programmiere ein persönliches Interesse daran hat, dass das Problem
gelöst wird, was insofern für freie Software relevant ist, da es sich
herrausstellte, dass die meisten Open Source Projekte aufgrund eines
persönlichen Bedürfnisses eines Programierers anfingen.</para>

<para>Dies ist immternoch der Grund, warum die meisten freien Software
Projekte anfangen, mitlerweile aber weniger als 1997, als Raymond
diese Worte schrieb. Heute haben wir das Phenomen, dass Organizationen
-auch profit orientierte Firmen-große zentral organisierte Open Source
Projekte von Grund auf anfangen. Der einzelne Programierer, der um ein
lokales Problem zu lösen, ein wenig Code heraus haut und daann 
feststellt, dass das Ergebniss eine breitere Anwendbarkeit hat, ist
immernoch die Quelle vieler freier Software, es ist aber nicht die
einzige Geschicht.</para>

<para>Der Punkt den Raymond macht ist aber immernoch Aufschlussreich.
Die notwendige Bedingung ist, dass die Produzenten der Software ein
direktes Interesse an seinen Erfolg haben, denn Sie benutzen es
selbst. Wenn die Software nicht das macht was es machen soll, wird
die Person oder Organization die sie produziert, die Unzufriedenheit
bei der täglichen Arbeit spüren. Das OpenAdaper Projekt zum Beispiel
(<ulink url="http://www.openadapter.org/"/>), welches von der 
investment Bank Dresdner Kleinwort Wasserstein als open source 
framework zur Integration unterschiedlicher finanzieller 
Informationssysteme gestartet wurde, kann wohl kaum als Bedürfniss
eines eines einzelnen Programierers bezeichnet werden. Sondern als
institutionelles Bedürfniss. Dieses Bedürfniss, entsteht aber direkt
aus den Erfahrungen der Institution und seine Pratner, wenn also die
Software daran scheitert, ihre Arbeit zu erleichtern, werden sie es
wissen. Aus diesem Arangement entsteht gute Software, da Rückmeldungen
an der richtigen Stelle ankommen. Die Software wird nicht geschrieben
um an jemand verkauft zu werden, also können sie sich auf <emphasis>
ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben um ihre
<emphasis>eigene</emphasis> Probleme zu lösen um es dann mit allen zu
teilen, so ählnich als wäre das Problem eine Krankheit und die
Software die entsprechende Medizin, dessen Verbreitung, dazu gedacht
ist, die Epidemie auszurotten.</para>

<para>In diesem Kapitel geht es um die Frage, wie man ein neues
freies Software Projekt der Welt vorstellt, viele seiner Empfehlungen
könnten sich aber einer gesundheits Organization die Medizin
verteilt, bekannt vorkommen. Die Ziele sind sich sehr ähnlich: Man
will klarstellen was die Medizin macht, es in die Hände der richtigen
Leute bringen, und sicherstellen, dass diejenigen die es erhalten,
wissen damit umzigehen. Bei der freien Software aber, will man auch
ein paar der Empfänger dazu bewegen sich an der fortwährenden
Forschungsarbeit, zur verbesserung der Medizin, zu beteiligen.</para>

<para>Die verbreitung freier Software ist eine zweifaltige
Aufgabe. Die Software muss sowohl Nutzer als auch Entwickler anziehen.
Diese beiden Erfordernisse stehen einander nicht zwangsläufig
gegenüber, aber sie machen die anfänglichen Präsentation des Projekts,
etwas komplexer. Manche Informationen sind für beide Gruppen nützlich,
manche nur für die eine oder andere. Beide Arten der Information
sollten das Prizip der skalierten Präsentation verfolgen; was soviel
heißt wie, der Detailgrad der in jeder Phase präsentiert wird, sich
genau deken sollte, mit der Menge an Zeit und der Anstrenung die vom
Leser aufgebrauch wird. Eine größere Anstrenung sollt auch immer eine
größere Belohnung zur Folge haben. In dem Fall, dass beide nicht eng
mit einander korrelieren, werden die Leser schnell die Hoffnung auf
geben und aufhören ihre Zeit zu investieren.</para>

<para>Die Folgerung hierraus ist, dass <emphasis>das Erscheinungsbild
Zählt</emphasis>. Insbesondere fällt es Programmierern schwehr, dies
zu glauben. Ihre Liebe zum Wesentlichen gegenüber dem Äußeren geht
fast bis zum Punkt der professionellen Stolz. Die meisten von uns
könne mit einem Blick erkennen ob eine seite eilig zusammengebastelt
wurde oder ob man sich enrnsthafte Gedanken darüber gemacht hat. Dies
ist das Erste stück an Information welches Ihr Projekt nach außen
gibt und den Endruck den es vermittelt wird sich auf den Rest des
Projekts übertragen.</para>

<para>Desshalb sollten Sie daran denken, dass obwohl es sich in diesem
Kapitel um Inhaltliches dreht, das Erscheinungsbild auch zählt. Da die
Seite für zwei Besuchertypen funktionieren muss-Nutzer und Entwickler-,
muss besonders auf Klarheit und Richtung geachtet werde. Auch wenn hier
nicht der richtige Ort ist für eine allgemeine Abhandlung über Web
Design, gibt es ein Prinzip, welches wichtig genung ist um erwähnt zu
werden, insbesondere wenn die Seite mehrere(falls Überlappende)
Zielgruppen ansprechen soll: Besucher sollten eine grobe Vorstellung
davon haben, wo ein Link hinführt bevor sie darauf klicken. Es sollte
zum Beispiel offensichtlich sein <emphasis>durch den Anblick eines
Links</emphasis> welches zur Nutzerdokumentation führt, dass es zur
Dokumentation für Benutzer führt, und nicht etwa zur Entwickler
Dokumentation. Beim betreiben eines Projekts, geht es zum Teil darum
Informationen bereitzustellen, aber auch darum ein Gefühl der
Behaglichkeit an zu bieten. Allein schon die Anwesenheit bestimmter
grundsätzlichen Angebote, an den erwarteten Stellen, beruhigt Benutzer
und Entwickler die darüber entscheiden ob sie sich involvieren wollen.
Es sagt ihnen, dass das Projekt seine sachen besammen hat, die Fragen
die gestellt werden vorrausgesehen hat und sich die Mühe gemacht hat
sie auf eine Art zu beantworten die vom Fragenden so wenig Einsatz wie
möglich erfordert. Indem das Projekt diese Aura der Bereitschaft, gibt
es diese Botfaschft nach außen: "Du verschwendest deine Zeit nicht,
wenn du dich beteiligst", was genau die Botschaft ist, die sie hören
müssen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Schaue Dich Vorher Um</title>

<para>Es gibt einen wichtigen Warnung, bevor man ein Open Source
Projekuto anfängt:</para>

<para>Schau dich immer vorher um, ob ein Projekt nicht bereits existiert,
welches das macht was man möchte. Die Wahrscheinlichkeit ist hoch, dass
welches Problem Sie auch lösen wollen, es jemand vor ihnen bereits
gelöst hat. Sollten sie es gelöst haben und ihren Code unter einer freien
Lizens gestellt haben, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Außnahmen: Falls sie ein Projekt als Lehr-Erfahrung 
anfangen wollen, wird Ihnen bereits existierender Code nicht weiterhelfen. 
Vieleicht wissen Sie bereits von vornherein, dass Ihr Problem so 
spezifisch ist, dass es mit sicherheit noch von niemanden gelöst wurde.
Im allgemeinen gibt es aber kein Grund sich nicht umzuschauen und der
Lohn kann beträchtlich sein. Sollten die gewöhlichen Suchmaschinen keine
brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über Open
Source Projekte (mehr zu dieser Seite gibt es später), bei
<ulink url="http://www.sourceforge.net/"/>, oder beim Verzeichniss
für freie Software der Free Software Foundation's 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas finden, dass dem so ähnlich ist, dass es mehr sinn
macht sich an diesem Projekt zu Beteiligen und die fehlende
Funktionalität hinzuzufügen, als selbst von vorne an zu fangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Mit Dem Was Man Hat Anfangen</title>

<para>Sie haben sich umgeschaut, herausgefunden dass es nichts gibt,
welches ihre Anforderungen erfüllt und sich entschieden ein neues
Projekt anzufangen.</para>

<para>Was jetzt?</para>

<para>Das schwehrste beim Beginn eines neune freien Software Projekts
ist, eine private Vision in eine öffentliche zu verwandeln. Sie oder
Ihre Organization mögen sehr wohl wissen was Sie wollen, dieses Ziel
verständlich für die Welt auszudrücken, ist aber eine beträchtliche
Menge Arbeit. Es ist aber unabdingbar, dass Sie sich hierfür die Zeit
nehmen. Sie und die anderen Grümder müssen entscheiden worum es in dem
Projekt wirklich geht, bzw. Sie müssen sowohl über seine Grenzen
entscheiden, -was es <emphasis>nicht</emphasis> machen wird, als auch
was es tatsächlich machen wird- und ein Missions Ziel verfassen. 
Dieser Teil ist für gewöhnlich nicht all zu schwehr, auch wenn es
manchmal unerwähnt gebliebene Annahmen, sogar Meinungsverschiedenheiten
über die Natur des Projekts, aufdecken kann, was nicht schlecht sein
muss: Es ist besser diese jetzt aus dem Weg zu Räumen als später. Der
nächste Schritt, ist das Projekt für den öffentlichen verzehr
aufzubereiten, was im prinzip reine Plackerei ist.</para>

<para>Dies ist desshalb so mühselig, da es hauptächlich darum geht
sachen zu organizieren und zu dokumentieren, die -"jedem" bereits 
bekannt sind, bzw. jedem der bissher beteiligt war. Für diejenigen die
die Arbeit machen, gibt es desshalb keinen direkten Nutzen. Sie
brauchen keine <filename>README</filename> Datei welches einen
Überblick über das Projekt gibt, noch brauchen sie eine Entwurfs
Dokument oder ein Handbuch. Sie brauch kein sorgsam ausgelegten 
Codebaum der mit den zwar informell aber weit verbreiteten Standards
Quellcode Distributionen konform ist. Ihnen ist es egal, wie der
Quellcode aufgebaut ist, sie sind ja bereits daran gewöhnt, und wenn
der Code überhaupt läuft, wissen sie schon wie man ihn benutzt. Es
macht ihnen nicht einmal was aus, wenn die grundsätzlichen Annahmen
über den Aufbau des Projekts nicht dokumentiert werden, denn das
kennen sie auch schon.</para>

<para>Andererseits, brauche Neuankömmlinge diese sachen. Zum glück 
aber nicht alle auf ein mal. Es ist nicht notwendig, dass Sie jede
mögliche Quelle zur verfügung stellen, bevor Sie ein Projekt an die
Öffntlichkeit bringen. In einer perfekten Welt, würde vieleicht
jedes Projekt, mit einem gründlich durchdachten Design Dokument,
einen vollständigen Beriebsanleitung (mit besenderen Hinweisen für
Funktionen die geplant aber noch nicht implementiert sind),
wunderschön aufbereitetem und portablem Code, welches auf jeder
Rechenplatform läuft, usw. In wirklichkeit, wäre es unvertretbar
Zeitaufwendig und überhaupt ist es Arbeit von der man hoffen kann,
dass Freiwillige sie aufnehmen werden, sobald das Projekt 
unterwegs ist.</para>

<para>Was jedoch <emphasis>wirklich</emphasis> notwendig ist, ist dass
genug in die Präsentation investiert wird, so dass Neuankömlinge
an dem Anfangshinderniss der Unbekanntheit vorbeikommen können. Sie
können es sich als den ersten Schritt in bei einem ladevorgang
vorstellen; um das Projekt aus eine Art minimale Aktivierungs Energie
zu bringen. Ich habe schon von dieser Grenze als 
<firstterm>Hacktivierungs Energie</firstterm> gehört: Die Energiemenge 
die notwendig ist, damit ein Neuankömling aufbringen muss bevor sie 
anfängt etwas zurück zu erhalten. Jeh geringer die Haktivierungs
Energie ist, desto besser. Ihre erste Aufgabe ist es die haktivierungs
Energie auf ein Niveau runter zu bringen, welches leute dazu
ermutigt sich zu beteiligen.</para>

<para>Jede der folgenden Unterabschnitte beschreibt einen wichtigen
Aspekt vom Anfang eines neuen Projekts. Sie werden in der groben 
Reihenfolge präsentiert, in der ein neuer Besucher sie begegnen würde. 
Die Reihenfolge in der Sie sie tatsächlich implementieren kann 
natürlich davon abweichen. Sie können sie wie eine Checkliste behandeln.
Am Anfang eines Projekts gehen Sie sie der Reihe nach durch und stellen
Sie sicher, dass Sie jeden Punkt gedekt haben oder zumindest, dass die
potentiellen Folgen Sie nicht stören, sollten Sie einen weg lassen.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Wählen Sie einen Guten Namen</title>

<para>Versetzen Sie sich in die Lage einer Person die gerade erst von
Ihrem Projekt erfahren hat, vieleicht zufällig, bei der Suche nach
einer Software um ein Problem zu lösen. Das erste was ihnen begegnen
wird, ist der Name.</para>

<para>Ein guter Name wird ihr Projekt nicht automatisch erfolgreich
nachen und ein schlechter bedeutet für ihn nicht den Untergang;
obwohl ein <emphasis>wirklich</emphasis> schlechter Name das
warscheinlich erreichen könnte aber wir gehen von der Annahmen aus,
dass keiner hier versucht sein Projekt aktiv zu Sabotieren. Ein 
schlechter Name kann jedoch die Aufnahme eines Projekts verlangsamen
keann, entweder weil Leute es nicht ernst nehmen oder einfach nur,
weil Sie schwierigkeiten haben sich daran zu errinnern.</para>

<para>Ein guter Name:

<itemizedlist>
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das
	Projekt macht oder ist zumindest auf eine offenstichliche
	Art verwandt, so dass wenn man den Namen kennt, und weiss was
	das Projekt macht, es nacher leicht ist, sich an den Name zu
	erinnern.</para>
  </listitem>
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
	Tatsache herum, dass Englisch zu standard Sprache des Internet
	geworden ist: "Einfach zu behalten." bedeutet in diesem Fall
	"Einfach zu behalten, für jemand der Englisch lesen kann".
	Namen die zum Beispiel, Wortspiele die von der Aussprache
	eines Einheimischen abhängig sind, werden vielen Menschen
	deren erste Sprache nicht Englisch ist, unklar sein. Wenn das
	Wortspiel besonders verlockend und einprägsam ist, kann es
	das wert sein; denken Sie aber daran, dass viele die den Namen
	sehen nicht das selbe heraushören werden wie jemand dessen
	Muttersprache Englisch ist.</para>
  </listitem>
  <listitem><para>Ist nicht der gleiche wie der eines Anderen und 
	verletzt keine Markenrechte. Was sowohl hölflich ist, als auch
	guter Rechtssinn. Sie wollen keine verwirrung über die
	Identität entstehen lassen. Es ist schon schwierig genug,
	alles was im Netz verfügbar ist zu verfolgen, ohne das auchnoch
	meherer Sachen den gleichen Namen tragen.</para>

	<para>Die vorher bei <xref linkend="look-around"/> erwähnten, 
	Quellen können Ihnen dabei helfen, herauszufinden ob ein anderes
	Projekt beriets den Namen trägt an den Sie denken. Kostenfreie
	Suchen nach Markenzeichen sind bei <ulink 
	url="http://www.nameprotect.org/"/> und <ulink 
	url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
  <listitem><para>Wenn möglich, als domain Name in der
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem> top-level Domainen verfügbar.
	Sie sollten sich einen aussuchen, warscheinlich
	<systemitem>.org</systemitem>, um als offizielle Seite des
	Projekts zu bewerben; die anderen beiden sollten dorthin
	weiterleiten und dienen einfach nur dazu dienen, andere daran
	zu hindern, um den Namen des Projekts verwirrung zu stiften.
	Selbst wenn Sie vor haben das Projekt auf eine andere Seite zu
	hosten (siehe <xref linkend="starting-with-canned-hosting"/>),
	können Sie immernoch die Projekt-spezifischen Domains
	registrieren und sie auf die Hosting Seite weiterleiten lassen.
	Es hilft dem Nutzer ungemein sich an eine einfache URL erinnern
	zu können.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Formuliere ein Klares Missions Ziel</title>

<para>Sobald sie die Seite des Projekts gefunden haben, werden sie als
nächstes nach einer schnellen Beschreibung suchen, die Formulierung
des Mission Ziels um (innerhalb von 30 Sekunden) entscheiden zu können,
ob sie Interesse daran haben mehr zu erfahren. Diese Formulierung
sollte auf der ersten Seite besonders Herausragen, vorzugsweise, direkt
unterhalb vom Namen des Projekts.</para>

<para>Die Formulierung des Missionsziels sollte anschaulich sein,
grenzen setzen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Als Gemeinschaft die international führende Office 
	Lösung die in allen wichtigen Umgebungen läuft und
	den Zugriff auf alle Funktionalitäten und Daten durch 
	auf offene Komponenten basierende Schnittellen und ein auf
	XML basierendes datei Format.</emphasis></para>
  </blockquote>

<para>Mit nur wenigen Worten, haben sie alle wichtigen Punkte
getroffen, zum größten Teil in dem sie sich auf bereits vorhandenes
Wissen des Lesers beziehen. Indem sie "<emphasis>Als Gemeinschaft
</emphasis>" sagen, signalisieren sie, dass keine einzelne Firma die
Entwicklung dominieren wird; "<emphasis>international</emphasis>"
bedeutet, dass die Software es Menschen erlauben wird, in mehereren
Sprachen zu arbeiten; "<emphasis>alle wichtigen Umgebungen</emphasis>"
bedeutet, auf Unix, Macintosh, und Windows portierbar. Der Rest
signalisiert, dass offene Schnittstellen und leicht verständliche
Dateiformate ein wichtiger Teil ihres Ziels ist. Sie sagen nicht
frei heraus, dass sie versuchen eine freie Alternative zu Microsoft
Office zu sein, die meisten Menschen werden aber zwischen den Zeilen
lesen können. Auch wenn diese Formulierung auf den ersten Blick weit
gefasst aussieht, ist es tatsächlich ziemlich begrenzt: Die Worte
"<emphasis>Office Lösung</emphasis>" bedeuten etwas ganz bestimmtes
für diejenigen die mit solcher Software vertraut sind. Das angenommene
vorhergehende Wissen des Lesers (in diesem Fall warscheinlich durch
MS Office) wird dafür verwendet, die Formulierung kurz zu halte.</para>

<para>Die Natur der Formulierung des Missionsziels hängt teilweise
davon ab, wer sie schreibt, nicht nur davon welche Software sie
beschreit. Es macht zum Beispiel sinn für Open Office die Worte
"<emphasis>Als Gemeinschaft</emphasis>" zu benutzen, denn das Projekt
wurde gestartet von und wird immernoch zum größten Teil betrieben durch
Sun Microsystems. Indem sie diese Worte mit aufnehmen weist Sun auf
seine sensibilität hin den Sorgen gegenüber, dass Sie unter umständen
versuchen könnten den entwicklunsprozess zu dominieren. Bei einer
solchen angelegenheit, kann allein schon der Hinweis auf das
<emphasis>potentielle</emphasis> Problem sehr dabei helfen es ganz und
gar zu vermeiden. Andererseits brauchen Projekte die nicht durch einer
einzigen Firma Unterstützt werden keine solche Sprache; denn 
schließlich ist die Entwicklung durch eine Gemeinschaft, die Norm es
gibt also für gewöhnlich keinen Grund es als Teil der Mission
aufzulisten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Sagen Sie dass das Projekt Frei ist</title>

<para>Die jenigen die nachdem sie die Missionzielen gelesen haben noch
interesiert sind, werden als nächstes mehr Details sehen wollen,
vieleicht eine Nutzer oder Entwickler Dokumentation und letztendlich
werden sie etwas herunterladen wollen. Vor all dem müssen sie sich
aber sicher sein, dass es Open Source ist.</para>

<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wäre aber überrascht wie viele Projekte es vergessen.
Ich bin schon an Projekten vorbei gekommen, deren Hauptseite es nicht
nur versäumten zu sagen, unter welcher Lizens ihre Software
distributiert war, sondern nicht einmal sagte, dass es sich um freie
Software handelte. Manchmal wurde das entscheidende Informationsstück
auf die download Seite, der Entwickler Seite oder irgend eine andere
Seite die ein klick mehr erforderte gesetzt. In extremen Fällen, wurde
die Lizens überhaupt nicht auf der Seite angegeben-die einzige
möglichkeit es herauszufinden, war es herunter zu laden und rein
zu schauen.</para>

<para>Mache nicht diesen Fehler. Solch ein Versäumnis kann zum Verlust
vieler potentieller Entwickler und Nutzer führen. Sagen Sie gleich
vorne, direkt unterhalb der Missionsziele, dass das Projekt "free 
software" oder "open source software" ist, und geben sie die genaue
Lizens an. Eine schnelle Anleitung zur auswahl einer Lizens befintet
sich im Abschnitt <xref linkend="license-quickstart"/><phrase
output="printed">später in diesem Kapitel</phrase>, und Lizensfragen
werden ausführlich im <xref linkend="legal"/> behandelt.</para>

<para>Bis hier hin, hat unsere hypotetische Besuchering sich
entschieden-warscheinlich innerhalb einer Minute oder weniger-, dass
sie interesiert ist, sagen wir, mindestens weiter fünf Minuten in
in diesem Projekt zu investieren. Der nächste Abschnitt beschreibt was
ihr innerhalb dieser fünf Minuten begegnen sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Liste der Funktionen und Anforderungen</title>

<para>Es sollte eine kurze Liste der Funktionen die von der Software
unterstüzt wird geben (Wenn etwas noch nicht fertig ist, können Sie es
immernoch auf die Liste setzen, stellen Sie aber "<emphasis>geplannt
</emphasis>" oder "<emphasis>in&nbsp;arbeit</emphasis>" daneben), und
die Art von Computer Umgebung die benötigt wird, um die Software zu
betreiben. Stelle Sie sich die Liste der Funktionen/Anforderungen als
das vor, was Sie jemandem geben würden der nach einer kurzen 
Zusammenfassung der Software fragt. Oft ist es einfach nur eine
logische erweiterung der Missionsziele. Die Missionsziele könnten zum
Beispiel folgendermaßen formuliert sein:</para>

  <blockquote>
  <para><emphasis>Die Erstellung eines volltext indizieres und 
	Suchmaschine, mit einer reichhaltigen Schnittstelle für
	Programmierer, die suchdienste für große Sammlungen an
	Text Dateien anbieten wollen.</emphasis></para>
  </blockquote>

<para>Die Liste der Funktionen und Anforderungen würde folgende
Details angeben, um die Missionsziele klarer zu machen:</para>

  <blockquote>
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Suche nach Wörter oder Phrasen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Unscharfe Suche</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Incrementelle aktuelisierung
                der Indizierungen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Indizierung entfernter 
	Webseiten</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Genug Festplatten Speicher für die
	Indizierung (ca. 2x Menge der Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Durch diese Informationen, können Leser schnell ein gefühl
dafür entwickeln, ob diese Software irgend eine Hoffnung hat, für sie
zu Funktionieren und sie können sich auch überlegen, ob sie sich als
Entwickler beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Entwicklungsfortschritt</title>

<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten, wollen sie wissen wie weit der Abstand zwischen dem
Versprechen des Projekts und der derzeitigen Wirklichkeit ist. Bei
ausgereiften Projekten, wollen sie wissen, wie aktive es gewartet wird
wie oft neue Versionen veröffentlicht werden, wie schnell man
erwarten kann, dass es auf bug Meldungen regieret.</para>

<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung bereit stellen, welches die näheren Ziele
und den aktuellen Bedarf des Projekts auflistet(es könnte z.B. nach
Entwickler mit einer bestimmten Fachkentniss suchen). Die Seite kann
auch eine historie vergangener Versionen, mit listen von Funktionen,
damit Besucher sich ein Bild davon machen können, wie das Projekt
"fortschritt" definiert und wie schnell es nach dieser definition
fortschritt macht.</para>

<para>Fürchten Sie sich nicht davor unvorbereitet auszusehen und
geben Sie der Versuchung den Entwicklungsfortschritt besser dar zu
stellen als er ist, nicht nach. Jeder weiss, das sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Dies ist Alpha
Software und hat bekannte Fehler. Sie läuft und funktioniert zumindest
manchmal aber benutzen Sie es auf eigene gefahr". Solch eine Sprache
wird nicht die sorte Entwickler verschreken, die Sie zu dieser Zeit
brauchen. Was Nutzer angeht: Einer der schlimmsten Felher die ein
Projekt machen kann, ist Nutzer anzulocken, für die die Software noch
nicht bereit ist. Ein Ruf für Instabilität oder Fehleranfälligkeit,
ist, einmal erlangt, nur schwehr los zu werden. Konservativ zu bleiben
zahlt sich auf lange sicht aus; es ist besser wenn die Software
<emphasis>stabiler</emphasis> läuft als erwartet läuft, als weniger
und angenehme Überraschungen produzieren die beste Mundpropaganda.
</para>

<sidebar id="alpha-and-beta">
  <title>Alpha und Beta</title>
  <para>Der Begriff<firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit dem Benutzer echte Arbeit erledigen können,
  welche alle geplante Funktionen hat, aber auch bekannte Feler. Der
  vorranginge Grund für alpha Software ist um Rückmeldungen zu 
  erhalten, damit die Entwickler wissen woran sie arbeiten sollen. Die
  nächste Stufe, <firstterm>beta</firstterm> bedeutet, dass in der
  Software all ernsten Fehler behoben sind, aber noch nicht genug
  getested wurde, um als fertige Version zu gelten. Der Sinn von beta
  Software ist entweder zur fertigen Version zu werden, wenn keine
  Fehler gefunden werden oder damit detailierte Rückmeldungen an die
  Entwickler zu geben um die fertige Version möglichst schnell fertig
  zu stellen. Der Unterschied zwischen alpha und beta ist zum größten
  Teil eine sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<para>Die Software sollte als Quellcode in standart Formaten 
herunterladbar sein. Wenn ein Projekt noch am Anfang ist, sind
binär(ausführbare) Dateien noch nicht notwendig, es sei denn der
build Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten leute einen menge Arbeit wäre die Software
überhaupt zum laufen zu bringen. (Wenn das allerdings der Fall ist,
wird das Projekt es eh schwehr haben Entwickler an zu locken.</para>

<para>Die Verbreitungsmethode sollte so bequem, standardkonform und
so wenig Overhead wie möglich haben. Wenn Sie eine Krankheit 
ausrotten wollten, würden Sie nicht die Medizin derart verbreiten,
dass eine unüblich Spritzengröße bräuchte. Ebenso sollte Software
die üblichen build und installations Methoden befolgen, denn je
mehr die Software von diesen Standards abweicht, desto größer ist
das Potential Benutzer und Entwickler aufgeben werden und verwirrt
weg gehen.</para>

<para>Das hört sich sehr offensichtlich an, aber viele Projekte machen
sich sehr lange nicht diese Mühe und sagen sich, dass sie es jeder
Zeit machen könnten: <emphasis>"Wir erledigen den Kram dann wenn der
Code näher an der Fertigstellung ist".</emphasis> Was sie dabei nicht
erkennen, ist dass indem sie die langweilige Arbeit, die 
Fertigstellung der Installationvorgänge, hinauschieben, sie auch
die Fertigstellung des Codes verlangsamen-da sie Enwickler
entmutigen, die ansonsten zum Code beigetragen hätten. Das
heimtückischste dabei ist, dass sie nicht <emphasis>wissen
</emphasis>, dass sie all diese Entwickler verlieren, da der Vorgang
eine Anhäufung nicht-ereignisse ist: Jemand geht auf die Webseite, 
lädt die Software herunter, versucht sie zu builden, scheitert, gibt
auf und geht weg. Wer wird jemals davon was wissen, außer die Person
selbst? Keiner der am Projekt arbeitet, wird bemerken, dass jemandem
Interesse und Wohlwollen stumm verschwendet wurde.</para>

<para>Langweilige Arbeit, mit einem hohen Gewinn sollte immer früh
erledigt werden und die Einstiegshürde zu einem Projekt, durch
gutes Packaging zahlt sich vielfach zurück.</para>

<para>Wenn Sie eine herrunterladbare Version herausgeben, ist es
wichtig, dass Sie Ihr eine eindeutige Versionsnummer geben, damit
Leute beide Versionen unterscheiden können und wissen welche auf
die andere Folgt. Eine ausführliche Diskussion zu versions Nummern
finden Sie in <xref linkend="release-numbering"/>, und Details zur
Standardisierung eines der build und Installationsvorgänge werden in
<xref linkend="packaging"/><phrase output="printed">, sowie
in <xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Zugriff zur Versions Kontrolle und dem Bug Tracker</title>

<para>Quellcode Packete herunter zu laden reicht für diejenigen aus,
die die Software lediglich installieren und benutzen wollen, aber es
reicht nicht für diejenigen die die Software debugen und neue
Funktionen hinzufügen wollen. Nächtliche Quellcode snapshots können
helfen, sind aber immer noch nicht fein granuliert genug für eine
gedeihende Entwicklergemeinschaft. Diese Leute brauchen echtzeit Zugriff
auf den neusten Quellencode und der Weg ihnen dieses zu geben, ist ein
Versions Kontroll System zu benutzen. Das Vorhandensein von anonym
erreichbaren Quellcode welches unter Versionskontrolle liegt ist ein
Zeichen-sowohl für Entwickler wie Benutzer-, dass das Projekt sich
mühe gibt Leute das nötige zu geben, um sich zu beteiligen. Wenn Sie
nicht sofort Versionskontrolle zur Verfügung stellen können, stellen
Sie zumindest ein Schild auf, dass darauf hinweist, dass Sie es bald
vor haben. Infrastruktur für versionskontrolle wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<para>Selbiges gilt für den Bug Tracker des Projekts. Ein Bugtracker
ist nicht nur wichtig auf Grund seiner Nützlichkeit für Entwickler,
sondern auch für die Botschaft die es Beobachter gibt. Für Viele,
ist eine offene Bug Datenbank eines der stärksten Anzeichen, dass ein
Projekt ernst genommen werden sollte. Desweiteren, ist das Projekt um
so besser, je mehr Fehler darin protokoliert wurden. Auch wenn es sich
wiedersprüchlich anhört, sollte man bedenken das die Anzahl der
erfassten Bugs von drei sachen abhängt: die absolute Anzahl der Bugs
in der Software, die Anzahl der Benuzer der Software und wie bequem es
für diese Benutzer ist, neue Bugs einzutragen. Von diesen dreien sind
die letzten beide die wesentlicher als der erste. Jede Software von
einer wesentlichen Größe und Komplexität, enthällt eine grunde
genommen beliebige Anzahl an Bugs, die darauf warten entdeckt zu
werden. Die wirkliche Frage ist, wie gut ist das Projekt darin, diese
Bugs zu erfassen und zu priorizieren? Ein Projekt mit einer großen
und gut gepflegten Bug Datenbank (was so viel heißt wie, dass schnell
auf Bugs reagiert wird, Duplikate vereinigt werden, usw.) macht
desshalb einen besseren Eindruck als ein Projekt ohne Bug Datenbank
oder einer fast leeren Datenbank.</para>

<para>Wenn Ihr Projekt erst anfängt, wird die Bug Datenbank natürlich
nur sehr wenige Bugs enthalten und es gibt nicht viel, was Sie dagegen
machen können. Wenn die Status Siete aber sein junges Alter hervorhebt
und wenn leute die auf die Bug Datenbank schauen sehen können, dass
die Meisten Einträge neulich gemacht wurden, können sie sich 
ausrechnen, dass das Projekt immer noch eine gesunde <emphasis>rate
</emphasis> an Einträgen hat und werden dementsprechend nicht 
übermäßg alarmiert über die niedrige absolute Anzahl an Bugs sein.
</para>

<para>Es sollte auch beachtet werden, dass Bug Tracker oft nicht nur
zur verfolgung von Bugs benutzt werden, sondern auch für 
verbesserungen an der Software, veränderungen an der Dokumentation
ausstehende Aufgaben und weiteres benutzt werden. Weiteres zum
Betrieb eines Bug Trackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase>behandelt, also
erde ich hier nicht näher darauf eingehen. Das wichtige aus sicht
der Präsentation ist überhaupt einen Bug Tracker zu <emphasis>haben
</emphasis> und sicher zu stellen, dass er von der haupt Seite auch
sichtbar ist.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Kommunikationsewege</title>

<para>Besucher wollen für gewöhnlich wissen, wie sie die Menschen die
mit dem Projekt involviert sind erreichen können. Stellen SIe die
Addressen von Mailing Listen, Chat Räumen, IRC Channels und andere
Foren von Leuten die mit der Software zu tun haben erreicht werden
können. Stellen Sie klar, dass Sie und die anderen Authoren des 
Projekts auf diese Listen eingetragen sind, damit Leute sehen können,
dass es eine Möglichkeit gibt, an die Entwickler Rückmeldungen geben
zu können. Ihre anwesenheit auf den mailing Listen impliziert nicht
eine Verpflichtung auf alle Fragen zu antworten oder alle Anfragen
für neue Funktionen zu implementieren. Auf lange Sicht, werden die
Meisten eh niemals diesen Foren beitreten aber sie weden Trost darin
finden, zu wissen, dass sie es <emphasis>könnten</emphasis> wenn es
nötig sein sollte.</para>

<para>In den frühen Abschnitten eines Projekts, gibt es keinen Grund
Nutzer und Entwickler Foren zu trennen. Es ist viel besser jeden mit
der mit der Software zu tun hat, zusammen in einem "Raum" reden zu
haben. Unter den Personen die sich früh an einem Projekt beteiligen,
ist die Unterscheidung zwischen Entwickler und Nutzer oft unscharf.
Sofern die Unterscheidung gemacht werden kann, ist das Verhältniss
von Entwickler zu Nutzern für gewöhnlich wesentlich höher in den
frühen Tagen als später. Obwohl Sie nicht annehmen können, dass
jeder der sich früh für das Projekt interesiert ein Programmierer
der an der Software hacken will ist, können Sie annhemen, dass sie
zumindest daran interesiert sind die Diskussionen um die Entwicklung
mit zu verfolgen und ein Gefühl für die Richtung des Projekts zu
bekommen.</para>
   
<para>Da es in diesem Kapitel nur darum geht ein Projekt ins laufen zu
bringen, genügt es zu sagen, dass diese Kommunikations Foren existieren
sollten. Später, in <xref linkend="growth"/><phrase output="printed"> und
<xref linkend="communications"/></phrase>, werden wir untersuchten,
wo und wie man diese Foren aufstekkt, in wie fern Sie unter umständen
Moderation erfordern und wie man Nutzer von Entwickler Foren trennt,
sobald die Zeit kommt, ohne dabei einen unüberwindlichen See
entstehen zu lassen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Richtlinien für Entwickler</title>

<para>Wenn jemand darüber nachdenkt etwas zu einem Projekt bei zu
tragen, wird sie sich nach richtlinien für Entwickler umschauen.
Diese sind nicht so sehr teschnisch, als viel mehr sozialer Natur:
sie erklären, wie Entwickler mit einander, den Benutzern umgehen und
letztendlich, wie sachen erledigt werden.</para>

<para>Dieses Thema wird ausführlich in
<xref linkend="written-rules"/><phrase output="printed"> und
<xref linkend="social-infrastructure"/></phrase> behandelt, aber
die grundelemente dieser Richlinien sind folgende:

<itemizedlist>
  <listitem><para>hinweise auf Foren für die Zusammenarbeit mit
	Entwickler</para> 
  </listitem>
  <listitem><para>Anweisungen wie Bugs gemeldet und Patches abgegeben
	werden sollen.</para>
  </listitem>
  <listitem><para>irgend eine Andeutung darauf <emphasis>wie
	</emphasis> die Entwicklung für gewöhnlich abläuft-
	ist das Projekt eine wohlwollende Dictatur, eine
	Demokratie oder etwas anderes.</para>
  </listitem>
</itemizedlist>

Im übrigen soll "Diktatur" in keiner weise herabsetzend wirken. Es
ist völlig in ordnung eine Tyranei zu betreiben, bei dem ein 
bestimmter Entwickler ein Recht auf Eispruch über alle Änderungen hat.
Viele erfolgreiche Projekte funktionieren auf diese weise. Wichtig
dabei ist nur, dass das Projekt es von forne herein klar macht. Eine
Tyranei die vorgibt eine Demokratie zu sein, wird Menschen abschrecken;
eine Tyranei die sagt, dass sie eine ist, wird zurecht kommen, sofern
der Tyrann kompetent ist und vertraut wird.</para>
  
<para>Siehe <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
für ein Beispiel besonders gründlicher Entwickler Richtlinien oder
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> für
algemmeinere Richtlinien die sich mehr auf die Steuerung und Teilnahme
am Projekt konzentrieren, und weniger auf technische Angelegenheiten.
</para>

<para>Die seperate Angelegenheit eine Einführung für Programmierer zur
verfügung zu stellen, wird in <xref
linkend="developer-documentation"/><phrase output="printed">
später in diesem Kapitel behandelt</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Documentation</title>

<para>Documentation ist unerlässlich. Es muss <emphasis>irgend etwas
</emphasis> für Leute zum lesen geben, selbst wenn es nur rudimentär
und unvollständig ist. Dies fällt voll und ganz in die vorhin erwähnte
Kategory der "Plackerei" und ist oft der erste Bereich in der ein
neues Open Source Projekt kurz fällt. Die Missionsziele und Funktions
Liste zu formulieren, eine Lizens zu wählen, den Entwicklungsstand
zusammen zu fassen-sind alle relativ kleine Aufgaben, die entgültig
erledigt werden können und es für gewöhnlich nicht erfordern erneut
dürber zu gehen, sobald sie erledigt sind. Die Dokumentation hingegen,
ist nie wirklich fertig, was vieleicht eine der Gründe ist, wesshalb 
man es überhaupt anzufangen manchmal hinauszögert.</para>

<para>Das heimtückichste ist, dass der Nutzen der Dokumentation für 
diejenigen die sie schreiben ist umgekehrt zu dem Nutzen, für neue
Benutzer die sie lesen werden. Die wichtigste Dokumentation für neue
Benutzer sind die Grundlagen: wie richte ich schnell die Software ein,
eine Übersicht wie sie funktioniert, vieleicht auch Anleitungen für
häufige Aufgaben. Diese sachen sind jedoch genau solche, die den
<emphasis>Authoren</emphasis> der Dokumentation nur all zu bekannt
sind-so bekannt, dass es für sie schwierig sein kann sich in die lage
des Lesers hinein zu versetzen und mühselig die Einzelschritte
die (für die Authoren) so offensichtlich erscheinen, dass sie kaum
der Erwähnung wert sind.</para>

<para>Es gibt keine magisch Lösung zu diesem Problem. Es muss sich nur
jemand die Zeit nehmen sich hinzusetzen, sie auf zu schreiben und es
anschließend an neue Nutzer auszuprobieren, um seine Qualität zu
überprüfen. Benutzen Sie ein einfaches, leicht zu bearbeitendes
Format wie HTML, Klartext oder eine XML variante-etwas, was für
leichte schnelle und spontante verbesserungen bequem ist. Was nicht
nur zur redzierung des Mehraufwands, für die ursprünglichen Anthoren,
die Dokumentation schrittweise zu verbessern, sondern auch für 
diejenigen die später zum Projekt dazu kommen und an ihr arbeiten
wollen.</para>

<para>Eine methode sicherzustellen, dass die erste Dokumentation der
Grundlagen erledigt wird, ist von vorne herein seinen Umfang 
einzuschränken. So wird es sich zumindest nicht nach einer endlosen
Aufgabe anfühlen. Eine gute Faustregel ist, dass es folgende minimale
Bedingungen erfüllen sollte:</para>

<itemizedlist>
  <listitem><para>Sagen Sie dem Leser klar wie viel technische
	Kentniss von ihnen erwartet wird.</para>
  </listitem>
  <listitem><para>Beschreiben sie klar und deutlich, wie man die
	Software einrichtet und irgendwo am Anfang der Dokumentation,
	sagen Sie den Benutzern wie sie irgend eine Art diagnose oder 
	einfachen Befehl ausführen können, um zu bestätigen, dass sie
	es auch richtig eingerichtet ist. Die Dokumentation zum Anfang
	ist in mancherlei Hinsicht wichtiger als, die echte 
	Bedienungsanleitung. Je mehr mühe jemand in die Instalation
	und einrichtung der Software investiert hat, desto 
	beharrlicher wird sie dabei sein, fortgeschrittene Funktionen
	die nicht gut Dokumentiert sind, herraus zu finden. Wenn die
	Leute aufgeben, dann geben sie früh auf; desshalb sind es die
	frühsten phasen, wie die Installation, welche die meiste
	Unterstützung brauchen.</para>
  </listitem>
  <listitem><para>Geben sie ein Lehrhaftes Beispiel einer häufigen
	Aufgabe. Offensichtlich wären viele Beispiele für viele
	Aufgaben noch besser, wenn aber die Zeit knapp ist, wählen
	Sie einen aus und geben Sie eine ausgührliche Anleitung. 
	Sobald jemad sieht, dass die software führ eine Sache benutzt
	werden <emphasis>kann</emphasis>, werden sie alleine anfangen
	herauszufinden was es noch kann-und mit etwas Glück, selber
	damit anfangen damit anfangen die Dokumentation auszufüllen. 
	Was uns zum nächsten Punkt bringt...</para>
  </listitem>
  <listitem><para>Kennzeichnen Sie Bereiche, bei denen die
	Dokumentation unvollständig ist. Indem sie den Lesern zeigen,
	dass Sie sich über die Defizite im klaren sind, stellen sie
	sich auf ihre Sichtweise ein. Ihr Einfühlungsvermögen, 
	sichert ihnen zu, dass sie dass Projekt nicht davon überzeugen
	müssen was wichtig ist. Diese Kennzeichen, müssen keine
	Versprechungen die Lücken bis zu irgend einem bestimmten Datum
	aus zu füllen, representieren-es ist genau so legitim sie als
	offenen Anfragen für die Hilfe von Freiwilligen zu behandeln.
        </para>
  </listitem>
</itemizedlist>

<para>Der letzt Punkt ist von größerer Bedeutung und kann auf das
ganze Projekt angewant werden, nicht nur auf die Dokumentation.
Eine genaue Buchführung bekannter defizite ist in der Open Source
Welt die Norm. Sie müssen die Mängel des Projekts nicht hochspielen,
ermitteln Sie sie einfach nur gewissenhaft und Leidenschaftslos
sobald es die Zeit erfordert (ob in der Dokumentation, auf dem
Bug Tracker oder in einer Diskussion einer Mailing Liste). Keiner
wird dies wie Miesmacherrei seitens des Projekts behandeln, noch
als Verpflichtung die Probleme bis zu einem bestimmten Datum zu
lösen, es sei denn das Projekt macht explizit eine solche
Verpflichtung. Da jeder der die Software benutzt, diese Mängel
selbst finden wird, ist es besser für sie psychologisch darauf
vorbereitet zu sein-so wird es danach aussehen, als ob das Projekt
eine solide Kentniss davon hat, wie es läuft.</para>

<sidebar id="starting-a-faq">
  <title>Eine FAQ Pflegen</title>

  <para>Eine <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  /Häufig gestellte Fragen Document)kann einer der besten Investitionen
  sein, die ein Projekt machen kann, auf grund der Rückzahlung in form
  von Bildung. FAQs sind sehr auf Fragen abgestimmt, die von Benutzern
  und Entwickler tatsächlich gefragt werden-im gegensatz zu Fragen die
  Sie vieleicht von ihnen <emphasis>erwartet</emphasis> hätten- und 
  desshalb neigt eine gut gepflegte FAQ dazu, denjenigen die sie 
  zu rate ziehen, genau das zu geben wonach sie suchen. Die FAQ ist
  oft die erste Stelle die Beutzer durchsuchen, wenn sie über ein
  Problem laufen, oft geben sie es sogar dem offiziellen Handbuch den
  Vorzug und es ist warscheinlich das Dokument in ihrem Projekt
  welches am warscheinlichsten von anderen Seiten verlinkt wird.</para>

  <para>Leider können Sie die FAQ nicht am Anfang eines Projekts
  schreiben. Eine gute FAW wird nicht geschrieben, sie wird gewachsen.
  Sie sind per definition reaktive Dokumente, die sich im laufe der
  Zeit auf Grund der täglichen Nutzung der Software, entwickeln. Da es
  unmöglich ist die Fragen die von Nutzern gestellt werden vorraus zu
  sehen, ist es unmöglich sich hinzusetzen und von Grund auf eine
  nütliche FAQ zu schreiben.</para>

  <para>Verschenden Sie also nicht ihre Zeit dabei es zu versuchen.
  Sie können jedoch ein größtenteils leere FAQ Vorlage aufstellen,
  damit es einen offensichtlichen Ort gibt zu dem Leute Fragen und
  Antworten beitragen können, nachdem as Projekt auf dem Weg gebracht
  ist. In dieser Phase ist die wichtigste Eigenschaft nicht
  vollständigkeit, sondern bequemlichkeit: Wenn das Hinzufügen einfach
  ist, werden leute zu ihr hinzufügen. (Die vernünftige Pflege einer
  FAQ ist ein nicht triviale und faszinierendes Problem welches weiter
  in <xref linkend="faq-manager"/><phrase output="printed"> im Kapitel
  <xref linkend="managing-volunteers"/></phrase> behandelt wird.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Verfügbarkeit der Dokumentation</title>

<para>Die Documentation sollte von zwei Qullen verfügbar sein:
Online (direkt von der Webseite), <emphasis>und</emphasis> in der
herunterladbaren Version der Software (siehe <xref 
linkend="packaging"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>). Es muss online sein,
in einer durchsehbaren Form, da Leute die Dokumenation oft
<emphasis>vor</emphasis> sie die Software zum ersten Mal
herunterladen lesen um besser entscheiden zu können, ob sie es
überhaupt herunterladen sollen. Es sollte aber auch der Software bei
liegen, auf Grund des Prinzips, dass ein heruntergeladenes Packet,
alles enthalten sollte(lokal verfügbar machen sollte), was man 
benötigt um die Software zu benutzen.</para>

<para>Stellen Sie sicher, dass ein Link verfügbar ist, der zur
<emphasis>ganzen</emphasis> online Dokumentation in einem HTML
Dokument führt(schreiben Sie einen hinweis wie "monolitisch" oder
"eine einzige große Datei" daben, damit die Leser wissen, dass es
eine weile brauchen kann zu laden). Das ist desshalb nützlich, da
Leute oft die ganze Dokumentation nach einem bestimmten Wort
durchsuchen wollen. Im allgemeinen wissen sie, schon wonach sie 
suchen, können sich aber nur nicht daran errinnern in welchem
Abschnitt es ist. Für solche leute, gibt es nichts frustrierenderes
als einer HTML Seite für die Inhaltsangabe, einer für die Einleitung,
noch eine weitere für die Instalationsanleitung, usw. zu begegnen.
Wenn die Seiten auf diese Art aufgebrochen sind, ist die such Funktion
ihres Browsers nutzlos. Der aufgeteilte Stil, ist nützlich für
diejenigen, die schon wissen welchen Abschnitt sie brauchen oder
die ganze Dokumentation von vorne bis hinten durchlesen wollen. Das
ist aber <emphasis>nicht</emphasis> die häufigste Art auf dem auf die
Dokumentation zugegriffen wird. Viel häufiget, kennt sich jemand
im grunde genommen mit der Software aus und kehrt zurück um nach
einem bestimmten Wort oder Ausdruck zu suchen. Ihnen keine
monolitische Datei zur verfügung zu stellen, würde ihnen nur das
Leben schwerer machen.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Entwickler Dokumentation</title>

<para>Die Entwickler Dokumentation wird geschrieben, um Programmierer
dabei zu helfen, den Code zu verstehen, damit sie es reparieren und
erweitern können. Dies ist ein wenig anders als die vorhin erwähnten
<emphasis>Entwickler Richtlinien</emphasis>, die eher sozialer als
technischer Natur sind. Entwickler Richtlinien sagen den
Programmierern wie sie mit einander zurecht kommen; die Entwickler
Dokumentation sagt ihnen hingegen wie sie mit dem Code selbst zurecht
kommen. Beide werden oft zusammen in einem Dokument gelegt, aus
gründen der Bequemlichkeit (wie mit dem früher angegebenen <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> 
Beispiel), müssen es aber nicht.</para>

<para>Obwohl die Entwickler Dokumentation sehr hilfreich sein kann,
gitb es keine Grund eine neue Version zu verzöger um sie fertig zu
stellen. So lange die ursprünglichen Authoren verfügbar (und bereit)
sind Fragen zum Code zu beantworten, reich das für den Anfang.
Tatsächlich ist es häufig eine Motivation, die selben Fragen wieder
und wieder zu beantworten eine Dokumentation zu schreiben. Aber selbst
bevoer es geschrieben wurde, werden entschlossene Freiwillige es
schaffen sich im Code zurecht zu finden. Die Kraft, die Leute dazu
brigt Zeit damit zu verbringen sich mit einem Code Base vertraut zu
machen, ist dass der Code etwas nütliches für sie macht. Wenn Menschen
darin Vertrauen haben, werden sie sich die Zeit nehmen Sachen heraus
zu finden; wenn sie dieses Vertrauen nicht haben, wird eine noch so
gute Entwickler Dokumentation sie nicht anlocken oder behalten können.
</para>

<para>Wenn Sie also nur Zeit haben, um eine Dokumentation zu schreiben,
schreiben Sie es für Benutzer. Alles Nutzer Dokumentation ist effektiv
auch Entwickler Dokumentation; jeder Programmierer der an einem Stück
Software arbeiten wird, wird damit vertraut sein müssen, wie man sie
benutzt. Später, wenn Sie sehen wie Programmierer andauernd die selben
fragen stellen sehen, nehmen Sie sich die Zeit eine paar seperate
Dokumente nur für sie zu schreiben.</para>

<para>Manche Projekte nutzen für den Anfang eine Wiki,manchmal sogar
als ihre haupt Dokumentation. Nach meiner Erfahrung funktioniert dies
nur, wenn die Wiki aktiv bearbeitet wird, von einer Handvoll Leuten
die sich darüber einig sind, wie die Dokumentation organisiert sein
soll und was für eine Stimme es haben soll. Siehe
<xref linkend="wikis"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für Weiters.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Beispiel Ausgaben und Screenshots</title>

<para>Wenn zu dem Projekt eine graphische Benutzeroberfläche gehört,
oder wenn es graphische Ausgaben oder sontige markante Ausgaben
prodoziert, geben Sie ein paar Beispiele auf der Webseite des Projekts.
Im Fall von einer Benuzeroberfläche, bedeutet dies Screenshots; für
Ausgaben, bedeutet es vieleicht Screenshots oder nur Dateien. Beide
befriedigen das Bedürfniss der Menschen nach sofortiger Genugtuung:
ein einziger Screenshot kann überzeugender sein als Paragraphen
beschreibendem Text und Geschwätz auf der Mailing Liste, da ein
Screenshot ein unverkennbarer Beweis ist, dass die Software
<emphasis>funktioniert</emphasis>. Is mag fehlerhaft sein, es mag
schwehr sein es zu installieren, es mag unvollständig dokumentiert
sein, aber der Screenshot ist immernoch ein Beweis dafür, dass wenn
man sich genug mühe gibt, man es zum laufen bringen kann.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
  <para>Da Screenshots einschüchternd sein können, bis man tatsächlich
  ein paar gemacht hat, sind hier ein paar gundsätzliche Anweisungen,
  wie man sie macht. Mit the Gimp(<ulink url="http://www.gimp.org/"/>),
  öffne <guimenu>Datei</guimenu>-&gt;<guimenu>Holen</guimenu>-&gt;
  <guimenu>Screenshot</guimenu>, wähle <guimenuitem>Einzelnes &nbsp;
  Fenster</guimenuitem> oder <guimenuitem>Ganzer &nbsp; Bildschirm
  </guimenuitem>, klicken Sie dann auf <guimenuitem>Aufnehmen
  </guimenuitem>. Jetzt wird ihr nächster Klick den gewählten
  Fenster oder Bildschirm als Bild in the Gimp aufnehmen. Ändern Sie
  und schneiden Sie das Bild je nach bedarf zurecht mit den 
  Anweisungen auf <ulink 
  url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Es gibt viele weiter sachen die Sie auf der Webseite des
Projekts setzen könnten, wenn Sie die Zeit dazu haben, oder sie
irgend einem Grund besonders passend sind: Eine Seite mit Neuigkeiten,
eine Seite mit der Historie des Projekts, eine Seite mit verwandten
Links, eine such Funktion, ein Link für Spenden, usw. Keiner davon
ist am Anfang notwenidig, Sie können sie aber im Hinterkopf behalten
für die Zukunft.</para>

<sect2 id="starting-with-canned-hosting">
<title>Gebündeltes Hosting</title>

<para>Es gibt ein paar seiten die kostenlos hosting und
Infrastruktur für Open Source Projekte bereit stellen: ein Web
Bereich, Versions kontrolle, ein Bug Tracker, ein download Bereich,
chat Foren, regelmäßige Sicherungen, usw. Die Details sind von Seite
zu Seite Unterschiedlich, aber die selben grundsätzlichen Leistungen
werden bei allen angeboten. Indem Sie eine dieser Seiten benutzen,
erhalten Sie vieles kostenfrei, was Sie offensichtlich aufgeben, ist
die fein granulierte Kontrolle über die Benutzerführung. Der Hosting
Dienst entscheidet darüber welche Software die Seite benutzt, und
kann das Aussehen und das Gefühl das die Seite des Projekts vermittelt,
kontrollieren oder zumindest beeinflussen.</para>

<para>Siehe
<xref linkend="canned-hosting"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für eine 
detailiiertere Diskussion über die Vor- und Nachteile von gebündeltem
Hosting und eine Liste von Seiten die es anbieten.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Eine Lizenz Wählen und Anwenden</title>

<para>Dieser Abschnitt soll eine schnelle und sehr grobe Anleitung sein
zur Wahl einer Lizenz. Lesen Sie 
<xref linkend="legal"/> um die genauen rechtlichen Implikationen der
verschieden Lizensen zu verstehen, und wie die Lizenz die Sie wählen
die Fähigkeit Anderer ihre Software mit anderer freier Software zu
mischen, beeinflussen kann.</para>

<para>Es gibt eine große Menge an Freien Software Lizenzen von denen
Sie wählen können. Die meisten müssen wir hier nicht beachte, da Sie
für die speziellen Rechtlichen Bedürfnisse einer Bestimmten Firma oder
Person geschrieben wurden und für Ihr Projekt nicht angemessen wären.
Wir beschränken und auf die am häufigsten benutzten Lizenzen; in den
meisten Fällen werden Sie eine von ihnen wählen wollen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>Die "Du Darfst Alles" Lizenzen</title>

<para>Wenn Sie kein Problem damit haben, dass der Code in Ihrem
Projekt in proprietären Anwendungen verwendet wird, benutzen Sie eine
Lizenz nach Art von <firstterm>MIT/X</firstterm>. Es ist die 
einfachste von verschiedenen minimalen Lizenzenm die nicht viel mehr
machen, als Vervielfältigungsrechte durch zu setzen (ohne dabei
wirklich die Vervielfältigung einzuschrängen) and spezifizieren, dass
der Code ohne jegliche Haftung kommt. Für Weiteres siehe <xref 
linkend="license-choosing-mit-x"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>Die GPL</title>

<para>Wenn Sie nicht wollen, dass Ihr Code in propritären Anwendungen
verwendet wird, benutzen Sie die GNU General Public License
(Allgemeine Öffentliche Lizens) (<ulink 
url="http://www.gnu.org/licenses/gpl.html"/>). Die GPL ist die heute
warscheinlich bekannteste freie Software Lizenz der Welt. Was in sich
selbst ein großer Vorteil ist, da viele potentielle Benutzer und 
Teilnehmer bereits mit ihr vertraut sein werden und desshalb nicht
zusätzliche Zeit damit verbringen müssen Ihre Lizenz zu lesen und zu
verstehen. Für weiter Details siehe
<xref linkend="license-choosing-gpl"/><phrase output="printed">
im Kapitel<xref linkend="legal"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Wie Sie eine Lizenz auf Ihre Software Anwenden</title>

<para>Nachdem Sie ein Lizenz gewählt haben, sollten Sie es auf Ihrer
Hauptseite sagen. Sie brauchen nicht den tatsächlichen Text der
Lizenz dort anzugeben; Geben Sie einfach nur die Lizenz an und lassen
Sie es auf seinen kompletten Text, auf einer sepereaten Seite, als
Link verweisen.</para>

<para>Dies sagt der Öffentlichkeit, unter welcher Lizenz Sie 
<emphasis>vorhaben</emphasis> die Software zu veröffentlichen, reicht
aber nicht für rechtliche Angelegenheiten aus. Dafür muss die Sofware
selbst die Lizenz enthalten. Die gewöhnliche Art wie dies gemacht wird,
ist den kompletten Text der Lizenz in einer Datei namens <filename>
COPYING</filename> (oder <filename>LICENSE</filename>) zu stellen, und
dann einen Hinweis am Anfang jeder Datei des Quellcodes zu stellen, der
das Datum des Urheberrechts, der Urheber, die Lizenz und eine Angabe
wo die komplette Text der Lizenz zu finden ist.</para>

<para>Es gibt viele Variationen dieses Musters, also werden wir uns
hier nur ein Beispiel anschauen. Die GNU GPL sagt, dass man einen
Hinweis wie diesen am Anfang von jeder Datei des Quellcodes setzen 
sollte.</para>

<screen> 
Diese Übersetzung von Katja Lachmann im Auftrag der S.u.S.E. GmbH – 
<ulink href"http://www.suse.de"/> und überarbeitet von 
<ulink href="http://www.peter.gerwinski.de/">Peter Gerwinski</ulink>, 
G-N-U GmbH – <ulink href="http://www.g-n-u.de"/>, wird der besseren 
Verständlichkeit halber hier verwendet, in Ihrer Anwendung sollten 
Sie jedoch die Englische Originalversion die Sie hier <ulink 
href="http://www.gnu.org/licenses/gpl.html#SEC4"/> finden verwenden,
da diese Übersetzung nicht offiziel oder im Rechtlichen Sinne 
Anerkannt ist. Die komplette Übersetzung der GPL finden Sie hier
<ulink href="http://www.gnu.de/documents/gpl.de.html"/>
TODO: um Erlaubniss bitten die Übersetzung verwenden zu dürfen!

[eine Zeile mit dem Programmnamen und einer kurzen Beschreibung]
Copyright (C) [Jahr]  [Name des Autors]

Dieses Programm ist freie Software. Sie können es unter den 
Bedingungen der GNU General Public License, wie von der Free Software
Foundation veröffentlicht, weitergeben und/oder modifizieren, entweder
gemäß Version 2 der Lizenz oder (nach Ihrer Option) jeder späteren 
Version.

Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es
Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne
die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR 
EINEN BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public
License.

Sie sollten ein Exemplar der GNU General Public License zusammen mit
diesem Programm erhalten haben. Falls nicht, schreiben Sie an die Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110, USA.
</screen>

<para>Es wird nich explizit erwähnt, dass die Kopie der Lizenz die Sie
mit der Software erhalten haben in der Datei <filename>COPYING
</filename> enthalten ist, aber sie wird meistens dort hin getan. (Sie 
könnten den Obigen Hinweis abändern um die Quelle direkt an zu geben.)
Diese Vorlage gibt Ihnen auch eine Geographische Adresse von der Sie
eine Kopie der Lizenz erhalten können. Noch eine häufige Methode ist
ein Link zu einer Webseite welche die Lizez enthällt an zu geben.
Urteilen Sie selber darüber und weisen Sie auf wo immer Sie der 
Meinung sind, dass beständigste Kopie dieser Lizenz Gepflegt wird, was
auch einfach auf die Webseite Ihres Projekts sein kann. Generell, muss
der Hinweis den Sie am Anfang jeder Datei setzen nicht genau so
aussehen wie der Obige, so fern es mit dem selben Hinweis auf den
Halter des Urheberrechts und das Datum, sowie die Lizens angibt und
angibt wo die komplette Lizenz zu finden ist.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Setting the Tone</title>

<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  If the
project is being opened up after years of closed, in-house
development, its development processes will change, and you will have
to prepare the existing developers for that change.</para>

<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>

<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive the centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>

<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; for once
established, they will be largely self-perpetuating.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.tigris.org/"/>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Avoid Private Discussions</title>

<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>

<para>Don't do it.</para>

<para>As slow and cumbersome as public discussions can be, they're
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious volunteer would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:

<itemizedlist>
  <listitem>
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be tracking
        silently, gleaning information about the software.</para>
  </listitem>
  <listitem>
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
  </listitem>
  <listitem>
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than one would intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>

<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>

<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>

<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion, and there's
no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Nip Rudeness in the Bud</title>

<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack <emphasis>first</emphasis>, as a
separate issue unto itself, and only afterward move on to the
technical content.</para>

<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>

    <blockquote>
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>

      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
    </blockquote>

<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>

<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practice Conspicuous Code Review</title>

<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>

<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>

<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>

<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>

<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>

<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>

<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="social-infrastructure"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Announcing</title>

<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freshmeat.net/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freshmeat is the place
everyone watches for new project announcements.  You only have to
catch a few eyes there for news of your project to spread by word of
mouth.</para>

<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>

<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>

<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>

<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>

<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>

<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>

<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

