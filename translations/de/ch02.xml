<chapter id="getting-started">

<title>Der Einstieg</title>

<simplesect>

<para>Das klassische Modell, wie freie Software Projekte anfangen
wurde von Eric Raymond, in einem nunmehr berühmten Text über
Open Source, mit dem Titel <citetitle>The Cathedral and the
Bazaar</citetitle>, wie folgt beschrieben:</para>

    <blockquote>
      <para><emphasis>Jedes gute Stück Software entsteht aus der
	den Bedürfnissen eines Programmierers.</emphasis></para>

      <para>(von <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Raymond sagte wohlgemerkt nicht, dass Open Source Projekte nur
durch die Bedürfnisse eines Programmierers anfangen. Vielmehr sagte
er, dass <emphasis>gute</emphasis> Software dann entsteht, wenn der
Programmiere ein persönliches Interesse daran hat, dass das Problem
gelöst wird, was insofern für freie Software relevant ist, da es sich
herrausstellte, dass die meisten Open Source Projekte aufgrund eines
persönlichen Bedürfnisses eines Programierers anfingen.</para>

<para>Dies ist immternoch der Grund, warum die meisten freien Software
Projekte anfangen, mitlerweile aber weniger als 1997, als Raymond
diese Worte schrieb. Heute haben wir das Phenomen, dass Organizationen
-auch profit orientierte Firmen-große zentral organisierte Open Source
Projekte von Grund auf anfangen. Der einzelne Programierer, der um ein
lokales Problem zu lösen, ein wenig Code heraus haut und daann 
feststellt, dass das Ergebniss eine breitere Anwendbarkeit hat, ist
immernoch die Quelle vieler freier Software, es ist aber nicht die
einzige Geschicht.</para>

<para>Der Punkt den Raymond macht ist aber immernoch Aufschlussreich.
Die notwendige Bedingung ist, dass die Produzenten der Software ein
direktes Interesse an seinen Erfolg haben, denn Sie benutzen es
selbst. Wenn die Software nicht das macht was es machen soll, wird
die Person oder Organization die sie produziert, die Unzufriedenheit
bei der täglichen Arbeit spüren. Das OpenAdaper Projekt zum Beispiel
(<ulink url="http://www.openadapter.org/"/>), welches von der 
investment Bank Dresdner Kleinwort Wasserstein als open source 
framework zur Integration unterschiedlicher finanzieller 
Informationssysteme gestartet wurde, kann wohl kaum als Bedürfniss
eines eines einzelnen Programierers bezeichnet werden. Sondern als
institutionelles Bedürfniss. Dieses Bedürfniss, entsteht aber direkt
aus den Erfahrungen der Institution und seine Pratner, wenn also die
Software daran scheitert, ihre Arbeit zu erleichtern, werden sie es
wissen. Aus diesem Arangement entsteht gute Software, da Rückmeldungen
an der richtigen Stelle ankommen. Die Software wird nicht geschrieben
um an jemand verkauft zu werden, also können sie sich auf <emphasis>
ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben um ihre
<emphasis>eigene</emphasis> Probleme zu lösen um es dann mit allen zu
teilen, so ählnich als wäre das Problem eine Krankheit und die
Software die entsprechende Medizin, dessen Verbreitung, dazu gedacht
ist, die Epidemie auszurotten.</para>

<para>In diesem Kapitel geht es um die Frage, wie man ein neues
freies Software Projekt der Welt vorstellt, viele seiner Empfehlungen
könnten sich aber einer gesundheits Organization die Medizin
verteilt, bekannt vorkommen. Die Ziele sind sich sehr ähnlich: Man
will klarstellen was die Medizin macht, es in die Hände der richtigen
Leute bringen, und sicherstellen, dass diejenigen die es erhalten,
wissen damit umzigehen. Bei der freien Software aber, will man auch
ein paar der Empfänger dazu bewegen sich an der fortwährenden
Forschungsarbeit, zur verbesserung der Medizin, zu beteiligen.</para>

<para>Die verbreitung freier Software ist eine zweifaltige
Aufgabe. Die Software muss sowohl Nutzer als auch Entwickler anziehen.
Diese beiden Erfordernisse stehen einander nicht zwangsläufig
gegenüber, aber sie machen die anfänglichen Präsentation des Projekts,
etwas komplexer. Manche Informationen sind für beide Gruppen nützlich,
manche nur für die eine oder andere. Beide Arten der Information
sollten das Prizip der skalierten Präsentation verfolgen; was soviel
heißt wie, der Detailgrad der in jeder Phase präsentiert wird, sich
genau deken sollte, mit der Menge an Zeit und der Anstrenung die vom
Leser aufgebrauch wird. Eine größere Anstrenung sollt auch immer eine
größere Belohnung zur Folge haben. In dem Fall, dass beide nicht eng
mit einander korrelieren, werden die Leser schnell die Hoffnung auf
geben und aufhören ihre Zeit zu investieren.</para>

<para>Die Folgerung hierraus ist, dass <emphasis>das Erscheinungsbild
Zählt</emphasis>. Insbesondere fällt es Programmierern schwehr, dies
zu glauben. Ihre Liebe zum Wesentlichen gegenüber dem Äußeren geht
fast bis zum Punkt der professionellen Stolz. Die meisten von uns
könne mit einem Blick erkennen ob eine seite eilig zusammengebastelt
wurde oder ob man sich enrnsthafte Gedanken darüber gemacht hat. Dies
ist das Erste stück an Information welches Ihr Projekt nach außen
gibt und den Endruck den es vermittelt wird sich auf den Rest des
Projekts übertragen.</para>

<para>Desshalb sollten Sie daran denken, dass obwohl es sich in diesem
Kapitel um Inhaltliches dreht, das Erscheinungsbild auch zählt. Da die
Seite für zwei Besuchertypen funktionieren muss-Nutzer und Entwickler-,
muss besonders auf Klarheit und Richtung geachtet werde. Auch wenn hier
nicht der richtige Ort ist für eine allgemeine Abhandlung über Web
Design, gibt es ein Prinzip, welches wichtig genung ist um erwähnt zu
werden, insbesondere wenn die Seite mehrere(falls Überlappende)
Zielgruppen ansprechen soll: Besucher sollten eine grobe Vorstellung
davon haben, wo ein Link hinführt bevor sie darauf klicken. Es sollte
zum Beispiel offensichtlich sein <emphasis>durch den Anblick eines
Links</emphasis> welches zur Nutzerdokumentation führt, dass es zur
Dokumentation für Benutzer führt, und nicht etwa zur Entwickler
Dokumentation. Beim betreiben eines Projekts, geht es zum Teil darum
Informationen bereitzustellen, aber auch darum ein Gefühl der
Behaglichkeit an zu bieten. Allein schon die Anwesenheit bestimmter
grundsätzlichen Angebote, an den erwarteten Stellen, beruhigt Benutzer
und Entwickler die darüber entscheiden ob sie sich involvieren wollen.
Es sagt ihnen, dass das Projekt seine sachen besammen hat, die Fragen
die gestellt werden vorrausgesehen hat und sich die Mühe gemacht hat
sie auf eine Art zu beantworten die vom Fragenden so wenig Einsatz wie
möglich erfordert. Indem das Projekt diese Aura der Bereitschaft, gibt
es diese Botfaschft nach außen: "Du verschwendest deine Zeit nicht,
wenn du dich beteiligst", was genau die Botschaft ist, die sie hören
müssen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Schaue Dich Vorher Um</title>

<para>Es gibt einen wichtigen Warnung, bevor man ein Open Source
Projekuto anfängt:</para>

<para>Schau dich immer vorher um, ob ein Projekt nicht bereits existiert,
welches das macht was man möchte. Die Wahrscheinlichkeit ist hoch, dass
welches Problem Sie auch lösen wollen, es jemand vor ihnen bereits
gelöst hat. Sollten sie es gelöst haben und ihren Code unter einer freien
Lizens gestellt haben, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Außnahmen: Falls sie ein Projekt als Lehr-Erfahrung 
anfangen wollen, wird Ihnen bereits existierender Code nicht weiterhelfen. 
Vieleicht wissen Sie bereits von vornherein, dass Ihr Problem so 
spezifisch ist, dass es mit sicherheit noch von niemanden gelöst wurde.
Im allgemeinen gibt es aber kein Grund sich nicht umzuschauen und der
Lohn kann beträchtlich sein. Sollten die gewöhlichen Suchmaschinen keine
brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über Open
Source Projekte (mehr zu dieser Seite gibt es später), bei
<ulink url="http://www.sourceforge.net/"/>, oder beim Verzeichniss
für freie Software der Free Software Foundation's 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas finden, dass dem so ähnlich ist, dass es mehr sinn
macht sich an diesem Projekt zu Beteiligen und die fehlende
Funktionalität hinzuzufügen, als selbst von vorne an zu fangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Mit Dem Was Man Hat Anfangen</title>

<para>Sie haben sich umgeschaut, herausgefunden dass es nichts gibt,
welches ihre Anforderungen erfüllt und sich entschieden ein neues
Projekt anzufangen.</para>

<para>Was jetzt?</para>

<para>Das schwehrste beim Beginn eines neune freien Software Projekts
ist, eine private Vision in eine öffentliche zu verwandeln. Sie oder
Ihre Organization mögen sehr wohl wissen was Sie wollen, dieses Ziel
verständlich für die Welt auszudrücken, ist aber eine beträchtliche
Menge Arbeit. Es ist aber unabdingbar, dass Sie sich hierfür die Zeit
nehmen. Sie und die anderen Grümder müssen entscheiden worum es in dem
Projekt wirklich geht, bzw. Sie müssen sowohl über seine Grenzen
entscheiden, -was es <emphasis>nicht</emphasis> machen wird, als auch
was es tatsächlich machen wird- und ein Missions Ziel verfassen. 
Dieser Teil ist für gewöhnlich nicht all zu schwehr, auch wenn es
manchmal unerwähnt gebliebene Annahmen, sogar Meinungsverschiedenheiten
über die Natur des Projekts, aufdecken kann, was nicht schlecht sein
muss: Es ist besser diese jetzt aus dem Weg zu Räumen als später. Der
nächste Schritt, ist das Projekt für den öffentlichen verzehr
aufzubereiten, was im prinzip reine Plackerei ist.</para>

<para>Dies ist desshalb so mühselig, da es hauptächlich darum geht
sachen zu organizieren und zu dokumentieren, die -"jedem" bereits 
bekannt sind, bzw. jedem der bissher beteiligt war. Für diejenigen die
die Arbeit machen, gibt es desshalb keinen direkten Nutzen. Sie
brauchen keine <filename>README</filename> Datei welches einen
Überblick über das Projekt gibt, noch brauchen sie eine Entwurfs
Dokument oder ein Handbuch. Sie brauch kein sorgsam ausgelegten 
Codebaum der mit den zwar informell aber weit verbreiteten Standards
Quellcode Distributionen konform ist. Ihnen ist es egal, wie der
Quellcode aufgebaut ist, sie sind ja bereits daran gewöhnt, und wenn
der Code überhaupt läuft, wissen sie schon wie man ihn benutzt. Es
macht ihnen nicht einmal was aus, wenn die grundsätzlichen Annahmen
über den Aufbau des Projekts nicht dokumentiert werden, denn das
kennen sie auch schon.</para>

<para>Andererseits, brauche Neuankömmlinge diese sachen. Zum glück 
aber nicht alle auf ein mal. Es ist nicht notwendig, dass Sie jede
mögliche Quelle zur verfügung stellen, bevor Sie ein Projekt an die
Öffntlichkeit bringen. In einer perfekten Welt, würde vieleicht
jedes Projekt, mit einem gründlich durchdachten Design Dokument,
einen vollständigen Beriebsanleitung (mit besenderen Hinweisen für
Funktionen die geplant aber noch nicht implementiert sind),
wunderschön aufbereitetem und portablem Code, welches auf jeder
Rechenplatform läuft, usw. In wirklichkeit, wäre es unvertretbar
Zeitaufwendig und überhaupt ist es Arbeit von der man hoffen kann,
dass Freiwillige sie aufnehmen werden, sobald das Projekt 
unterwegs ist.</para>

<para>Was jedoch <emphasis>wirklich</emphasis> notwendig ist, ist dass
genug in die Präsentation investiert wird, so dass Neuankömlinge
an dem Anfangshinderniss der Unbekanntheit vorbeikommen können. Sie
können es sich als den ersten Schritt in bei einem ladevorgang
vorstellen; um das Projekt aus eine Art minimale Aktivierungs Energie
zu bringen. Ich habe schon von dieser Grenze als 
<firstterm>Hacktivierungs Energie</firstterm> gehört: Die Energiemenge 
die notwendig ist, damit ein Neuankömling aufbringen muss bevor sie 
anfängt etwas zurück zu erhalten. Jeh geringer die Haktivierungs
Energie ist, desto besser. Ihre erste Aufgabe ist es die haktivierungs
Energie auf ein Niveau runter zu bringen, welches leute dazu
ermutigt sich zu beteiligen.</para>

<para>Jede der folgenden Unterabschnitte beschreibt einen wichtigen
Aspekt vom Anfang eines neuen Projekts. Sie werden in der groben 
Reihenfolge präsentiert, in der ein neuer Besucher sie begegnen würde. 
Die Reihenfolge in der Sie sie tatsächlich implementieren kann 
natürlich davon abweichen. Sie können sie wie eine Checkliste behandeln.
Am Anfang eines Projekts gehen Sie sie der Reihe nach durch und stellen
Sie sicher, dass Sie jeden Punkt gedekt haben oder zumindest, dass die
potentiellen Folgen Sie nicht stören, sollten Sie einen weg lassen.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Wählen Sie einen Guten Namen</title>

<para>Versetzen Sie sich in die Lage einer Person die gerade erst von
Ihrem Projekt erfahren hat, vieleicht zufällig, bei der Suche nach
einer Software um ein Problem zu lösen. Das erste was ihnen begegnen
wird, ist der Name.</para>

<para>Ein guter Name wird ihr Projekt nicht automatisch erfolgreich
nachen und ein schlechter bedeutet für ihn nicht den Untergang;
obwohl ein <emphasis>wirklich</emphasis> schlechter Name das
warscheinlich erreichen könnte aber wir gehen von der Annahmen aus,
dass keiner hier versucht sein Projekt aktiv zu Sabotieren. Ein 
schlechter Name kann jedoch die Aufnahme eines Projekts verlangsamen
keann, entweder weil Leute es nicht ernst nehmen oder einfach nur,
weil Sie schwierigkeiten haben sich daran zu errinnern.</para>

<para>Ein guter Name:

<itemizedlist>
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das
	Projekt macht oder ist zumindest auf eine offenstichliche
	Art verwandt, so dass wenn man den Namen kennt, und weiss was
	das Projekt macht, es nacher leicht ist, sich an den Name zu
	erinnern.</para>
  </listitem>
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
	Tatsache herum, dass Englisch zu standard Sprache des Internet
	geworden ist: "Einfach zu behalten." bedeutet in diesem Fall
	"Einfach zu behalten, für jemand der Englisch lesen kann".
	Namen die zum Beispiel, Wortspiele die von der Aussprache
	eines Einheimischen abhängig sind, werden vielen Menschen
	deren erste Sprache nicht Englisch ist, unklar sein. Wenn das
	Wortspiel besonders verlockend und einprägsam ist, kann es
	das wert sein; denken Sie aber daran, dass viele die den Namen
	sehen nicht das selbe heraushören werden wie jemand dessen
	Muttersprache Englisch ist.</para>
  </listitem>
  <listitem><para>Ist nicht der gleiche wie der eines Anderen und 
	verletzt keine Markenrechte. Was sowohl hölflich ist, als auch
	guter Rechtssinn. Sie wollen keine verwirrung über die
	Identität entstehen lassen. Es ist schon schwierig genug,
	alles was im Netz verfügbar ist zu verfolgen, ohne das auchnoch
	meherer Sachen den gleichen Namen tragen.</para>

	<para>Die vorher bei <xref linkend="look-around"/> erwähnten, 
	Quellen können Ihnen dabei helfen, herauszufinden ob ein anderes
	Projekt beriets den Namen trägt an den Sie denken. Kostenfreie
	Suchen nach Markenzeichen sind bei <ulink 
	url="http://www.nameprotect.org/"/> und <ulink 
	url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
  <listitem><para>Wenn möglich, als domain Name in der
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem> top-level Domainen verfügbar.
	Sie sollten sich einen aussuchen, warscheinlich
	<systemitem>.org</systemitem>, um als offizielle Seite des
	Projekts zu bewerben; die anderen beiden sollten dorthin
	weiterleiten und dienen einfach nur dazu dienen, andere daran
	zu hindern, um den Namen des Projekts verwirrung zu stiften.
	Selbst wenn Sie vor haben das Projekt auf eine andere Seite zu
	hosten (siehe <xref linkend="starting-with-canned-hosting"/>),
	können Sie immernoch die Projekt-spezifischen Domains
	registrieren und sie auf die Hosting Seite weiterleiten lassen.
	Es hilft dem Nutzer ungemein sich an eine einfache URL erinnern
	zu können.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Formuliere ein Klares Missions Ziel</title>

<para>Sobald sie die Seite des Projekts gefunden haben, werden sie als
nächstes nach einer schnellen Beschreibung suchen, die Formulierung
des Mission Ziels um (innerhalb von 30 Sekunden) entscheiden zu können,
ob sie Interesse daran haben mehr zu erfahren. Diese Formulierung
sollte auf der ersten Seite besonders Herausragen, vorzugsweise, direkt
unterhalb vom Namen des Projekts.</para>

<para>Die Formulierung des Missionsziels sollte anschaulich sein,
grenzen setzen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Als Gemeinschaft die international führende Office 
	Lösung die in allen wichtigen Umgebungen läuft und
	den Zugriff auf alle Funktionalitäten und Daten durch 
	auf offene Komponenten basierende Schnittellen und ein auf
	XML basierendes datei Format.</emphasis></para>
  </blockquote>

<para>Mit nur wenigen Worten, haben sie alle wichtigen Punkte
getroffen, zum größten Teil in dem sie sich auf bereits vorhandenes
Wissen des Lesers beziehen. Indem sie "<emphasis>Als Gemeinschaft
</emphasis>" sagen, signalisieren sie, dass keine einzelne Firma die
Entwicklung dominieren wird; "<emphasis>international</emphasis>"
bedeutet, dass die Software es Menschen erlauben wird, in mehereren
Sprachen zu arbeiten; "<emphasis>alle wichtigen Umgebungen</emphasis>"
bedeutet, auf Unix, Macintosh, und Windows portierbar. Der Rest
signalisiert, dass offene Schnittstellen und leicht verständliche
Dateiformate ein wichtiger Teil ihres Ziels ist. Sie sagen nicht
frei heraus, dass sie versuchen eine freie Alternative zu Microsoft
Office zu sein, die meisten Menschen werden aber zwischen den Zeilen
lesen können. Auch wenn diese Formulierung auf den ersten Blick weit
gefasst aussieht, ist es tatsächlich ziemlich begrenzt: Die Worte
"<emphasis>Office Lösung</emphasis>" bedeuten etwas ganz bestimmtes
für diejenigen die mit solcher Software vertraut sind. Das angenommene
vorhergehende Wissen des Lesers (in diesem Fall warscheinlich durch
MS Office) wird dafür verwendet, die Formulierung kurz zu halte.</para>

<para>Die Natur der Formulierung des Missionsziels hängt teilweise
davon ab, wer sie schreibt, nicht nur davon welche Software sie
beschreit. Es macht zum Beispiel sinn für Open Office die Worte
"<emphasis>Als Gemeinschaft</emphasis>" zu benutzen, denn das Projekt
wurde gestartet von und wird immernoch zum größten Teil betrieben durch
Sun Microsystems. Indem sie diese Worte mit aufnehmen weist Sun auf
seine sensibilität hin den Sorgen gegenüber, dass Sie unter umständen
versuchen könnten den entwicklunsprozess zu dominieren. Bei einer
solchen angelegenheit, kann allein schon der Hinweis auf das
<emphasis>potentielle</emphasis> Problem sehr dabei helfen es ganz und
gar zu vermeiden. Andererseits brauchen Projekte die nicht durch einer
einzigen Firma Unterstützt werden keine solche Sprache; denn 
schließlich ist die Entwicklung durch eine Gemeinschaft, die Norm es
gibt also für gewöhnlich keinen Grund es als Teil der Mission
aufzulisten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Sagen Sie dass das Projekt Frei ist</title>

<para>Die jenigen die nachdem sie die Missionzielen gelesen haben noch
interesiert sind, werden als nächstes mehr Details sehen wollen,
vieleicht eine Nutzer oder Entwickler Dokumentation und letztendlich
werden sie etwas herunterladen wollen. Vor all dem müssen sie sich
aber sicher sein, dass es Open Source ist.</para>

<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wäre aber überrascht wie viele Projekte es vergessen.
Ich bin schon an Projekten vorbei gekommen, deren Hauptseite es nicht
nur versäumten zu sagen, unter welcher Lizens ihre Software
distributiert war, sondern nicht einmal sagte, dass es sich um freie
Software handelte. Manchmal wurde das entscheidende Informationsstück
auf die download Seite, der Entwickler Seite oder irgend eine andere
Seite die ein klick mehr erforderte gesetzt. In extremen Fällen, wurde
die Lizens überhaupt nicht auf der Seite angegeben-die einzige
möglichkeit es herauszufinden, war es herunter zu laden und rein
zu schauen.</para>

<para>Mache nicht diesen Fehler. Solch ein Versäumnis kann zum Verlust
vieler potentieller Entwickler und Nutzer führen. Sagen Sie gleich
vorne, direkt unterhalb der Missionsziele, dass das Projekt "free 
software" oder "open source software" ist, und geben sie die genaue
Lizens an. Eine schnelle Anleitung zur auswahl einer Lizens befintet
sich im Abschnitt <xref linkend="license-quickstart"/><phrase
output="printed">später in diesem Kapitel</phrase>, und Lizensfragen
werden ausführlich im <xref linkend="legal"/> behandelt.</para>

<para>Bis hier hin, hat unsere hypotetische Besuchering sich
entschieden-warscheinlich innerhalb einer Minute oder weniger-, dass
sie interesiert ist, sagen wir, mindestens weiter fünf Minuten in
in diesem Projekt zu investieren. Der nächste Abschnitt beschreibt was
ihr innerhalb dieser fünf Minuten begegnen sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Liste der Funktionen und Anforderungen</title>

<para>Es sollte eine kurze Liste der Funktionen die von der Software
unterstüzt wird geben (Wenn etwas noch nicht fertig ist, können Sie es
immernoch auf die Liste setzen, stellen Sie aber "<emphasis>geplannt
</emphasis>" oder "<emphasis>in&nbsp;arbeit</emphasis>" daneben), und
die Art von Computer Umgebung die benötigt wird, um die Software zu
betreiben. Stelle Sie sich die Liste der Funktionen/Anforderungen als
das vor, was Sie jemandem geben würden der nach einer kurzen 
Zusammenfassung der Software fragt. Oft ist es einfach nur eine
logische erweiterung der Missionsziele. Die Missionsziele könnten zum
Beispiel folgendermaßen formuliert sein:</para>

  <blockquote>
  <para><emphasis>Die Erstellung eines volltext indizieres und 
	Suchmaschine, mit einer reichhaltigen Schnittstelle für
	Programmierer, die suchdienste für große Sammlungen an
	Text Dateien anbieten wollen.</emphasis></para>
  </blockquote>

<para>Die Liste der Funktionen und Anforderungen würde folgende
Details angeben, um die Missionsziele klarer zu machen:</para>

  <blockquote>
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Suche nach Wörter oder Phrasen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Unscharfe Suche</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Incrementelle aktuelisierung
                der Indizierungen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Indizierung entfernter 
	Webseiten</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Genug Festplatten Speicher für die
	Indizierung (ca. 2x Menge der Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Durch diese Informationen, können Leser schnell ein gefühl
dafür entwickeln, ob diese Software irgend eine Hoffnung hat, für sie
zu Funktionieren und sie können sich auch überlegen, ob sie sich als
Entwickler beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Entwicklungsfortschritt</title>

<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten, wollen sie wissen wie weit der Abstand zwischen dem
Versprechen des Projekts und der derzeitigen Wirklichkeit ist. Bei
ausgereiften Projekten, wollen sie wissen, wie aktive es gewartet wird
wie oft neue Versionen veröffentlicht werden, wie schnell man
erwarten kann, dass es auf bug Meldungen regieret.</para>

<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung bereit stellen, welches die näheren Ziele
und den aktuellen Bedarf des Projekts auflistet(es könnte z.B. nach
Entwickler mit einer bestimmten Fachkentniss suchen). Die Seite kann
auch eine historie vergangener Versionen, mit listen von Funktionen,
damit Besucher sich ein Bild davon machen können, wie das Projekt
"fortschritt" definiert und wie schnell es nach dieser definition
fortschritt macht.</para>

<para>Fürchten Sie sich nicht davor unvorbereitet auszusehen und
geben Sie der Versuchung den Entwicklungsfortschritt besser dar zu
stellen als er ist, nicht nach. Jeder weiss, das sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Dies ist Alpha
Software und hat bekannte Fehler. Sie läuft und funktioniert zumindest
manchmal aber benutzen Sie es auf eigene gefahr". Solch eine Sprache
wird nicht die sorte Entwickler verschreken, die Sie zu dieser Zeit
brauchen. Was Nutzer angeht: Einer der schlimmsten Felher die ein
Projekt machen kann, ist Nutzer anzulocken, für die die Software noch
nicht bereit ist. Ein Ruf für Instabilität oder Fehleranfälligkeit,
ist, einmal erlangt, nur schwehr los zu werden. Konservativ zu bleiben
zahlt sich auf lange sicht aus; es ist besser wenn die Software
<emphasis>stabiler</emphasis> läuft als erwartet läuft, als weniger
und angenehme Überraschungen produzieren die beste Mundpropaganda.
</para>

<sidebar id="alpha-and-beta">
  <title>Alpha und Beta</title>
  <para>Der Begriff<firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit dem Benutzer echte Arbeit erledigen können,
  welche alle geplante Funktionen hat, aber auch bekannte Feler. Der
  vorranginge Grund für alpha Software ist um Rückmeldungen zu 
  erhalten, damit die Entwickler wissen woran sie arbeiten sollen. Die
  nächste Stufe, <firstterm>beta</firstterm> bedeutet, dass in der
  Software all ernsten Fehler behoben sind, aber noch nicht genug
  getested wurde, um als fertige Version zu gelten. Der Sinn von beta
  Software ist entweder zur fertigen Version zu werden, wenn keine
  Fehler gefunden werden oder damit detailierte Rückmeldungen an die
  Entwickler zu geben um die fertige Version möglichst schnell fertig
  zu stellen. Der Unterschied zwischen alpha und beta ist zum größten
  Teil eine sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<para>Die Software sollte als Quellcode in standart Formaten 
herunterladbar sein. Wenn ein Projekt noch am Anfang ist, sind
binär(ausführbare) Dateien noch nicht notwendig, es sei denn der
build Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten leute einen menge Arbeit wäre die Software
überhaupt zum laufen zu bringen. (Wenn das allerdings der Fall ist,
wird das Projekt es eh schwehr haben Entwickler an zu locken.</para>

<para>Die Verbreitungsmethode sollte so bequem, standardkonform und
so wenig Overhead wie möglich haben. Wenn Sie eine Krankheit 
ausrotten wollten, würden Sie nicht die Medizin derart verbreiten,
dass eine unüblich Spritzengröße bräuchte. Ebenso sollte Software
die üblichen build und installations Methoden befolgen, denn je
mehr die Software von diesen Standards abweicht, desto größer ist
das Potential Benutzer und Entwickler aufgeben werden und verwirrt
weg gehen.</para>

<para>Das hört sich sehr offensichtlich an, aber viele Projekte machen
sich sehr lange nicht diese Mühe und sagen sich, dass sie es jeder
Zeit machen könnten: <emphasis>"Wir erledigen den Kram dann wenn der
Code näher an der Fertigstellung ist".</emphasis> Was sie dabei nicht
erkennen, ist dass indem sie die langweilige Arbeit, die 
Fertigstellung der Installationvorgänge, hinauschieben, sie auch
die Fertigstellung des Codes verlangsamen-da sie Enwickler
entmutigen, die ansonsten zum Code beigetragen hätten. Das
heimtückischste dabei ist, dass sie nicht <emphasis>wissen
</emphasis>, dass sie all diese Entwickler verlieren, da der Vorgang
eine Anhäufung nicht-ereignisse ist: Jemand geht auf die Webseite, 
lädt die Software herunter, versucht sie zu builden, scheitert, gibt
auf und geht weg. Wer wird jemals davon was wissen, außer die Person
selbst? Keiner der am Projekt arbeitet, wird bemerken, dass jemandem
Interesse und Wohlwollen stumm verschwendet wurde.</para>

<para>Langweilige Arbeit, mit einem hohen Gewinn sollte immer früh
erledigt werden und die Einstiegshürde zu einem Projekt, durch
gutes Packaging zahlt sich vielfach zurück.</para>

<para>Wenn Sie eine herrunterladbare Version herausgeben, ist es
wichtig, dass Sie Ihr eine eindeutige Versionsnummer geben, damit
Leute beide Versionen unterscheiden können und wissen welche auf
die andere Folgt. Eine ausführliche Diskussion zu versions Nummern
finden Sie in <xref linkend="release-numbering"/>, und Details zur
Standardisierung eines der build und Installationsvorgänge werden in
<xref linkend="packaging"/><phrase output="printed">, sowie
in <xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Zugriff zur Versions Kontrolle und dem Bug Tracker</title>

<para>Quellcode Packete herunter zu laden reicht für diejenigen aus,
die die Software lediglich installieren und benutzen wollen, aber es
reicht nicht für diejenigen die die Software debugen und neue
Funktionen hinzufügen wollen. Nächtliche Quellcode snapshots können
helfen, sind aber immer noch nicht fein granuliert genug für eine
gedeihende Entwicklergemeinschaft. Diese Leute brauchen echtzeit Zugriff
auf den neusten Quellencode und der Weg ihnen dieses zu geben, ist ein
Versions Kontroll System zu benutzen. Das Vorhandensein von anonym
erreichbaren Quellcode welches unter Versionskontrolle liegt ist ein
Zeichen-sowohl für Entwickler wie Benutzer-, dass das Projekt sich
mühe gibt Leute das nötige zu geben, um sich zu beteiligen. Wenn Sie
nicht sofort Versionskontrolle zur Verfügung stellen können, stellen
Sie zumindest ein Schild auf, dass darauf hinweist, dass Sie es bald
vor haben. Infrastruktur für versionskontrolle wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<para>Selbiges gilt für den Bug Tracker des Projekts. Ein Bugtracker
ist nicht nur wichtig auf Grund seiner Nützlichkeit für Entwickler,
sondern auch für die Botschaft die es Beobachter gibt. Für Viele,
ist eine offene Bug Datenbank eines der stärksten Anzeichen, dass ein
Projekt ernst genommen werden sollte. Desweiteren, ist das Projekt um
so besser, je mehr Fehler darin protokoliert wurden. Auch wenn es sich
wiedersprüchlich anhört, sollte man bedenken das die Anzahl der
erfassten Bugs von drei sachen abhängt: die absolute Anzahl der Bugs
in der Software, die Anzahl der Benuzer der Software und wie bequem es
für diese Benutzer ist, neue Bugs einzutragen. Von diesen dreien sind
die letzten beide die wesentlicher als der erste. Jede Software von
einer wesentlichen Größe und Komplexität, enthällt eine grunde
genommen beliebige Anzahl an Bugs, die darauf warten entdeckt zu
werden. Die wirkliche Frage ist, wie gut ist das Projekt darin, diese
Bugs zu erfassen und zu priorizieren? Ein Projekt mit einer großen
und gut gepflegten Bug Datenbank (was so viel heißt wie, dass schnell
auf Bugs reagiert wird, Duplikate vereinigt werden, usw.) macht
desshalb einen besseren Eindruck als ein Projekt ohne Bug Datenbank
oder einer fast leeren Datenbank.</para>

<para>Wenn Ihr Projekt erst anfängt, wird die Bug Datenbank natürlich
nur sehr wenige Bugs enthalten und es gibt nicht viel, was Sie dagegen
machen können. Wenn die Status Siete aber sein junges Alter hervorhebt
und wenn leute die auf die Bug Datenbank schauen sehen können, dass
die Meisten Einträge neulich gemacht wurden, können sie sich 
ausrechnen, dass das Projekt immer noch eine gesunde <emphasis>rate
</emphasis> an Einträgen hat und werden dementsprechend nicht 
übermäßg alarmiert über die niedrige absolute Anzahl an Bugs sein.
</para>

<para>Es sollte auch beachtet werden, dass Bug Tracker oft nicht nur
zur verfolgung von Bugs benutzt werden, sondern auch für 
verbesserungen an der Software, veränderungen an der Dokumentation
ausstehende Aufgaben und weiteres benutzt werden. Weiteres zum
Betrieb eines Bug Trackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase>behandelt, also
erde ich hier nicht näher darauf eingehen. Das wichtige aus sicht
der Präsentation ist überhaupt einen Bug Tracker zu <emphasis>haben
</emphasis> und sicher zu stellen, dass er von der haupt Seite auch
sichtbar ist.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Kommunikationsewege</title>

<para>Besucher wollen für gewöhnlich wissen, wie sie die Menschen die
mit dem Projekt involviert sind erreichen können. Stellen SIe die
Addressen von Mailing Listen, Chat Räumen, IRC Channels und andere
Foren von Leuten die mit der Software zu tun haben erreicht werden
können. Stellen Sie klar, dass Sie und die anderen Authoren des 
Projekts auf diese Listen eingetragen sind, damit Leute sehen können,
dass es eine Möglichkeit gibt, an die Entwickler Rückmeldungen geben
zu können. Ihre anwesenheit auf den mailing Listen impliziert nicht
eine Verpflichtung auf alle Fragen zu antworten oder alle Anfragen
für neue Funktionen zu implementieren. Auf lange Sicht, werden die
Meisten eh niemals diesen Foren beitreten aber sie weden Trost darin
finden, zu wissen, dass sie es <emphasis>könnten</emphasis> wenn es
nötig sein sollte.</para>

<para>In den frühen Abschnitten eines Projekts, gibt es keinen Grund
Nutzer und Entwickler Foren zu trennen. Es ist viel besser jeden mit
der mit der Software zu tun hat, zusammen in einem "Raum" reden zu
haben. Unter den Personen die sich früh an einem Projekt beteiligen,
ist die Unterscheidung zwischen Entwickler und Nutzer oft unscharf.
Sofern die Unterscheidung gemacht werden kann, ist das Verhältniss
von Entwickler zu Nutzern für gewöhnlich wesentlich höher in den
frühen Tagen als später. Obwohl Sie nicht annehmen können, dass
jeder der sich früh für das Projekt interesiert ein Programmierer
der an der Software hacken will ist, können Sie annhemen, dass sie
zumindest daran interesiert sind die Diskussionen um die Entwicklung
mit zu verfolgen und ein Gefühl für die Richtung des Projekts zu
bekommen.</para>
   
<para>Da es in diesem Kapitel nur darum geht ein Projekt ins laufen zu
bringen, genügt es zu sagen, dass diese Kommunikations Foren existieren
sollten. Später, in <xref linkend="growth"/><phrase output="printed"> und
<xref linkend="communications"/></phrase>, werden wir untersuchten,
wo und wie man diese Foren aufstekkt, in wie fern Sie unter umständen
Moderation erfordern und wie man Nutzer von Entwickler Foren trennt,
sobald die Zeit kommt, ohne dabei einen unüberwindlichen See
entstehen zu lassen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Richtlinien für Entwickler</title>

<para>Wenn jemand darüber nachdenkt etwas zu einem Projekt bei zu
tragen, wird sie sich nach richtlinien für Entwickler umschauen.
Diese sind nicht so sehr teschnisch, als viel mehr sozialer Natur:
sie erklären, wie Entwickler mit einander, den Benutzern umgehen und
letztendlich, wie sachen erledigt werden.</para>

<para>Dieses Thema wird ausführlich in
<xref linkend="written-rules"/><phrase output="printed"> und
<xref linkend="social-infrastructure"/></phrase> behandelt, aber
die grundelemente dieser Richlinien sind folgende:

<itemizedlist>
  <listitem><para>hinweise auf Foren für die Zusammenarbeit mit
	Entwickler</para> 
  </listitem>
  <listitem><para>Anweisungen wie Bugs gemeldet und Patches abgegeben
	werden sollen.</para>
  </listitem>
  <listitem><para>irgend eine Andeutung darauf <emphasis>wie
	</emphasis> die Entwicklung für gewöhnlich abläuft-
	ist das Projekt eine wohlwollende Dictatur, eine
	Demokratie oder etwas anderes.</para>
  </listitem>
</itemizedlist>

Im übrigen soll "Diktatur" in keiner weise herabsetzend wirken. Es
ist völlig in ordnung eine Tyranei zu betreiben, bei dem ein 
bestimmter Entwickler ein Recht auf Eispruch über alle Änderungen hat.
Viele erfolgreiche Projekte funktionieren auf diese weise. Wichtig
dabei ist nur, dass das Projekt es von forne herein klar macht. Eine
Tyranei die vorgibt eine Demokratie zu sein, wird Menschen abschrecken;
eine Tyranei die sagt, dass sie eine ist, wird zurecht kommen, sofern
der Tyrann kompetent ist und vertraut wird.</para>
  
<para>Siehe <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
für ein Beispiel besonders gründlicher Entwickler Richtlinien oder
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> für
algemmeinere Richtlinien die sich mehr auf die Steuerung und Teilnahme
am Projekt konzentrieren, und weniger auf technische Angelegenheiten.
</para>

<para>Die seperate Angelegenheit eine Einführung für Programmierer zur
verfügung zu stellen, wird in <xref
linkend="developer-documentation"/><phrase output="printed">
später in diesem Kapitel behandelt</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Documentation</title>

<para>Documentation ist unerlässlich. Es muss <emphasis>irgend etwas
</emphasis> für Leute zum lesen geben, selbst wenn es nur rudimentär
und unvollständig ist. Dies fällt voll und ganz in die vorhin erwähnte
Kategory der "Plackerei" und ist oft der erste Bereich in der ein
neues Open Source Projekt kurz fällt. Die Missionsziele und Funktions
Liste zu formulieren, eine Lizens zu wählen, den Entwicklungsstand
zusammen zu fassen-sind alle relativ kleine Aufgaben, die entgültig
erledigt werden können und es für gewöhnlich nicht erfordern erneut
dürber zu gehen, sobald sie erledigt sind. Die Dokumentation hingegen,
ist nie wirklich fertig, was vieleicht eine der Gründe ist, wesshalb 
man es überhaupt anzufangen manchmal hinauszögert.</para>

<para>Das heimtückichste ist, dass der Nutzen der Dokumentation für 
diejenigen die sie schreiben ist umgekehrt zu dem Nutzen, für neue
Benutzer die sie lesen werden. Die wichtigste Dokumentation für neue
Benutzer sind die Grundlagen: wie richte ich schnell die Software ein,
eine Übersicht wie sie funktioniert, vieleicht auch Anleitungen für
häufige Aufgaben. Diese sachen sind jedoch genau solche, die den
<emphasis>Authoren</emphasis> der Dokumentation nur all zu bekannt
sind-so bekannt, dass es für sie schwierig sein kann sich in die lage
des Lesers hinein zu versetzen und mühselig die Einzelschritte
die (für die Authoren) so offensichtlich erscheinen, dass sie kaum
der Erwähnung wert sind.</para>

<para>Es gibt keine magisch Lösung zu diesem Problem. Es muss sich nur
jemand die Zeit nehmen sich hinzusetzen, sie auf zu schreiben und es
anschließend an neue Nutzer auszuprobieren, um seine Qualität zu
überprüfen. Benutzen Sie ein einfaches, leicht zu bearbeitendes
Format wie HTML, Klartext oder eine XML variante-etwas, was für
leichte schnelle und spontante verbesserungen bequem ist. Was nicht
nur zur redzierung des Mehraufwands, für die ursprünglichen Anthoren,
die Dokumentation schrittweise zu verbessern, sondern auch für 
diejenigen die später zum Projekt dazu kommen und an ihr arbeiten
wollen.</para>

<para>Eine methode sicherzustellen, dass die erste Dokumentation der
Grundlagen erledigt wird, ist von vorne herein seinen Umfang 
einzuschränken. So wird es sich zumindest nicht nach einer endlosen
Aufgabe anfühlen. Eine gute Faustregel ist, dass es folgende minimale
Bedingungen erfüllen sollte:</para>

<itemizedlist>
  <listitem><para>Sagen Sie dem Leser klar wie viel technische
	Kentniss von ihnen erwartet wird.</para>
  </listitem>
  <listitem><para>Beschreiben sie klar und deutlich, wie man die
	Software einrichtet und irgendwo am Anfang der Dokumentation,
	sagen Sie den Benutzern wie sie irgend eine Art diagnose oder 
	einfachen Befehl ausführen können, um zu bestätigen, dass sie
	es auch richtig eingerichtet ist. Die Dokumentation zum Anfang
	ist in mancherlei Hinsicht wichtiger als, die echte 
	Bedienungsanleitung. Je mehr mühe jemand in die Instalation
	und einrichtung der Software investiert hat, desto 
	beharrlicher wird sie dabei sein, fortgeschrittene Funktionen
	die nicht gut Dokumentiert sind, herraus zu finden. Wenn die
	Leute aufgeben, dann geben sie früh auf; desshalb sind es die
	frühsten phasen, wie die Installation, welche die meiste
	Unterstützung brauchen.</para>
  </listitem>
  <listitem><para>Geben sie ein Lehrhaftes Beispiel einer häufigen
	Aufgabe. Offensichtlich wären viele Beispiele für viele
	Aufgaben noch besser, wenn aber die Zeit knapp ist, wählen
	Sie einen aus und geben Sie eine ausgührliche Anleitung. 
	Sobald jemad sieht, dass die software führ eine Sache benutzt
	werden <emphasis>kann</emphasis>, werden sie alleine anfangen
	herauszufinden was es noch kann-und mit etwas Glück, selber
	damit anfangen damit anfangen die Dokumentation auszufüllen. 
	Was uns zum nächsten Punkt bringt...</para>
  </listitem>
  <listitem><para>Kennzeichnen Sie Bereiche, bei denen die
	Dokumentation unvollständig ist. Indem sie den Lesern zeigen,
	dass Sie sich über die Defizite im klaren sind, stellen sie
	sich auf ihre Sichtweise ein. Ihr Einfühlungsvermögen, 
	sichert ihnen zu, dass sie dass Projekt nicht davon überzeugen
	müssen was wichtig ist. Diese Kennzeichen, müssen keine
	Versprechungen die Lücken bis zu irgend einem bestimmten Datum
	aus zu füllen, representieren-es ist genau so legitim sie als
	offenen Anfragen für die Hilfe von Freiwilligen zu behandeln.
        </para>
  </listitem>
</itemizedlist>

<para>Der letzt Punkt ist von größerer Bedeutung und kann auf das
ganze Projekt angewant werden, nicht nur auf die Dokumentation.
Eine genaue Buchführung bekannter defizite ist in der Open Source
Welt die Norm. Sie müssen die Mängel des Projekts nicht hochspielen,
ermitteln Sie sie einfach nur gewissenhaft und Leidenschaftslos
sobald es die Zeit erfordert (ob in der Dokumentation, auf dem
Bug Tracker oder in einer Diskussion einer Mailing Liste). Keiner
wird dies wie Miesmacherrei seitens des Projekts behandeln, noch
als Verpflichtung die Probleme bis zu einem bestimmten Datum zu
lösen, es sei denn das Projekt macht explizit eine solche
Verpflichtung. Da jeder der die Software benutzt, diese Mängel
selbst finden wird, ist es besser für sie psychologisch darauf
vorbereitet zu sein-so wird es danach aussehen, als ob das Projekt
eine solide Kentniss davon hat, wie es läuft.</para>

<sidebar id="starting-a-faq">
  <title>Eine FAQ Pflegen</title>

  <para>Eine <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  /Häufig gestellte Fragen Document)kann einer der besten Investitionen
  sein, die ein Projekt machen kann, auf grund der Rückzahlung in form
  von Bildung. FAQs sind sehr auf Fragen abgestimmt, die von Benutzern
  und Entwickler tatsächlich gefragt werden-im gegensatz zu Fragen die
  Sie vieleicht von ihnen <emphasis>erwartet</emphasis> hätten- und 
  desshalb neigt eine gut gepflegte FAQ dazu, denjenigen die sie 
  zu rate ziehen, genau das zu geben wonach sie suchen. Die FAQ ist
  oft die erste Stelle die Beutzer durchsuchen, wenn sie über ein
  Problem laufen, oft geben sie es sogar dem offiziellen Handbuch den
  Vorzug und es ist warscheinlich das Dokument in ihrem Projekt
  welches am warscheinlichsten von anderen Seiten verlinkt wird.</para>

  <para>Leider können Sie die FAQ nicht am Anfang eines Projekts
  schreiben. Eine gute FAW wird nicht geschrieben, sie wird gewachsen.
  Sie sind per definition reaktive Dokumente, die sich im laufe der
  Zeit auf Grund der täglichen Nutzung der Software, entwickeln. Da es
  unmöglich ist die Fragen die von Nutzern gestellt werden vorraus zu
  sehen, ist es unmöglich sich hinzusetzen und von Grund auf eine
  nütliche FAQ zu schreiben.</para>

  <para>Verschenden Sie also nicht ihre Zeit dabei es zu versuchen.
  Sie können jedoch ein größtenteils leere FAQ Vorlage aufstellen,
  damit es einen offensichtlichen Ort gibt zu dem Leute Fragen und
  Antworten beitragen können, nachdem as Projekt auf dem Weg gebracht
  ist. In dieser Phase ist die wichtigste Eigenschaft nicht
  vollständigkeit, sondern bequemlichkeit: Wenn das Hinzufügen einfach
  ist, werden leute zu ihr hinzufügen. (Die vernünftige Pflege einer
  FAQ ist ein nicht triviale und faszinierendes Problem welches weiter
  in <xref linkend="faq-manager"/><phrase output="printed"> im Kapitel
  <xref linkend="managing-volunteers"/></phrase> behandelt wird.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Verfügbarkeit der Dokumentation</title>

<para>Die Documentation sollte von zwei Qullen verfügbar sein:
Online (direkt von der Webseite), <emphasis>und</emphasis> in der
herunterladbaren Version der Software (siehe <xref 
linkend="packaging"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>). Es muss online sein,
in einer durchsehbaren Form, da Leute die Dokumenation oft
<emphasis>vor</emphasis> sie die Software zum ersten Mal
herunterladen lesen um besser entscheiden zu können, ob sie es
überhaupt herunterladen sollen. Es sollte aber auch der Software bei
liegen, auf Grund des Prinzips, dass ein heruntergeladenes Packet,
alles enthalten sollte(lokal verfügbar machen sollte), was man 
benötigt um die Software zu benutzen.</para>

<para>Stellen Sie sicher, dass ein Link verfügbar ist, der zur
<emphasis>ganzen</emphasis> online Dokumentation in einem HTML
Dokument führt(schreiben Sie einen hinweis wie "monolitisch" oder
"eine einzige große Datei" daben, damit die Leser wissen, dass es
eine weile brauchen kann zu laden). Das ist desshalb nützlich, da
Leute oft die ganze Dokumentation nach einem bestimmten Wort
durchsuchen wollen. Im allgemeinen wissen sie, schon wonach sie 
suchen, können sich aber nur nicht daran errinnern in welchem
Abschnitt es ist. Für solche leute, gibt es nichts frustrierenderes
als einer HTML Seite für die Inhaltsangabe, einer für die Einleitung,
noch eine weitere für die Instalationsanleitung, usw. zu begegnen.
Wenn die Seiten auf diese Art aufgebrochen sind, ist die such Funktion
ihres Browsers nutzlos. Der aufgeteilte Stil, ist nützlich für
diejenigen, die schon wissen welchen Abschnitt sie brauchen oder
die ganze Dokumentation von vorne bis hinten durchlesen wollen. Das
ist aber <emphasis>nicht</emphasis> die häufigste Art auf dem auf die
Dokumentation zugegriffen wird. Viel häufiget, kennt sich jemand
im grunde genommen mit der Software aus und kehrt zurück um nach
einem bestimmten Wort oder Ausdruck zu suchen. Ihnen keine
monolitische Datei zur verfügung zu stellen, würde ihnen nur das
Leben schwerer machen.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Entwickler Dokumentation</title>

<para>Die Entwickler Dokumentation wird geschrieben, um Programmierer
dabei zu helfen, den Code zu verstehen, damit sie es reparieren und
erweitern können. Dies ist ein wenig anders als die vorhin erwähnten
<emphasis>Entwickler Richtlinien</emphasis>, die eher sozialer als
technischer Natur sind. Entwickler Richtlinien sagen den
Programmierern wie sie mit einander zurecht kommen; die Entwickler
Dokumentation sagt ihnen hingegen wie sie mit dem Code selbst zurecht
kommen. Beide werden oft zusammen in einem Dokument gelegt, aus
gründen der Bequemlichkeit (wie mit dem früher angegebenen <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> 
Beispiel), müssen es aber nicht.</para>

<para>Obwohl die Entwickler Dokumentation sehr hilfreich sein kann,
gitb es keine Grund eine neue Version zu verzöger um sie fertig zu
stellen. So lange die ursprünglichen Authoren verfügbar (und bereit)
sind Fragen zum Code zu beantworten, reich das für den Anfang.
Tatsächlich ist es häufig eine Motivation, die selben Fragen wieder
und wieder zu beantworten eine Dokumentation zu schreiben. Aber selbst
bevoer es geschrieben wurde, werden entschlossene Freiwillige es
schaffen sich im Code zurecht zu finden. Die Kraft, die Leute dazu
brigt Zeit damit zu verbringen sich mit einem Code Base vertraut zu
machen, ist dass der Code etwas nütliches für sie macht. Wenn Menschen
darin Vertrauen haben, werden sie sich die Zeit nehmen Sachen heraus
zu finden; wenn sie dieses Vertrauen nicht haben, wird eine noch so
gute Entwickler Dokumentation sie nicht anlocken oder behalten können.
</para>

<para>Wenn Sie also nur Zeit haben, um eine Dokumentation zu schreiben,
schreiben Sie es für Benutzer. Alles Nutzer Dokumentation ist effektiv
auch Entwickler Dokumentation; jeder Programmierer der an einem Stück
Software arbeiten wird, wird damit vertraut sein müssen, wie man sie
benutzt. Später, wenn Sie sehen wie Programmierer andauernd die selben
fragen stellen sehen, nehmen Sie sich die Zeit eine paar seperate
Dokumente nur für sie zu schreiben.</para>

<para>Manche Projekte nutzen für den Anfang eine Wiki,manchmal sogar
als ihre haupt Dokumentation. Nach meiner Erfahrung funktioniert dies
nur, wenn die Wiki aktiv bearbeitet wird, von einer Handvoll Leuten
die sich darüber einig sind, wie die Dokumentation organisiert sein
soll und was für eine Stimme es haben soll. Siehe
<xref linkend="wikis"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für Weiters.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Beispiel Ausgaben und Screenshots</title>

<para>Wenn zu dem Projekt eine graphische Benutzeroberfläche gehört,
oder wenn es graphische Ausgaben oder sontige markante Ausgaben
prodoziert, geben Sie ein paar Beispiele auf der Webseite des Projekts.
Im Fall von einer Benuzeroberfläche, bedeutet dies Screenshots; für
Ausgaben, bedeutet es vieleicht Screenshots oder nur Dateien. Beide
befriedigen das Bedürfniss der Menschen nach sofortiger Genugtuung:
ein einziger Screenshot kann überzeugender sein als Paragraphen
beschreibendem Text und Geschwätz auf der Mailing Liste, da ein
Screenshot ein unverkennbarer Beweis ist, dass die Software
<emphasis>funktioniert</emphasis>. Is mag fehlerhaft sein, es mag
schwehr sein es zu installieren, es mag unvollständig dokumentiert
sein, aber der Screenshot ist immernoch ein Beweis dafür, dass wenn
man sich genug mühe gibt, man es zum laufen bringen kann.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
  <para>Da Screenshots einschüchternd sein können, bis man tatsächlich
  ein paar gemacht hat, sind hier ein paar gundsätzliche Anweisungen,
  wie man sie macht. Mit the Gimp(<ulink url="http://www.gimp.org/"/>),
  öffne <guimenu>Datei</guimenu>-&gt;<guimenu>Holen</guimenu>-&gt;
  <guimenu>Screenshot</guimenu>, wähle <guimenuitem>Einzelnes &nbsp;
  Fenster</guimenuitem> oder <guimenuitem>Ganzer &nbsp; Bildschirm
  </guimenuitem>, klicken Sie dann auf <guimenuitem>Aufnehmen
  </guimenuitem>. Jetzt wird ihr nächster Klick den gewählten
  Fenster oder Bildschirm als Bild in the Gimp aufnehmen. Ändern Sie
  und schneiden Sie das Bild je nach bedarf zurecht mit den 
  Anweisungen auf <ulink 
  url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Es gibt viele weiter sachen die Sie auf der Webseite des
Projekts setzen könnten, wenn Sie die Zeit dazu haben, oder sie
irgend einem Grund besonders passend sind: Eine Seite mit Neuigkeiten,
eine Seite mit der Historie des Projekts, eine Seite mit verwandten
Links, eine such Funktion, ein Link für Spenden, usw. Keiner davon
ist am Anfang notwenidig, Sie können sie aber im Hinterkopf behalten
für die Zukunft.</para>

<sect2 id="starting-with-canned-hosting">
<title>Gebündeltes Hosting</title>

<para>Es gibt ein paar seiten die kostenlos hosting und
Infrastruktur für Open Source Projekte bereit stellen: ein Web
Bereich, Versions kontrolle, ein Bug Tracker, ein download Bereich,
chat Foren, regelmäßige Sicherungen, usw. Die Details sind von Seite
zu Seite Unterschiedlich, aber die selben grundsätzlichen Leistungen
werden bei allen angeboten. Indem Sie eine dieser Seiten benutzen,
erhalten Sie vieles kostenfrei, was Sie offensichtlich aufgeben, ist
die fein granulierte Kontrolle über die Benutzerführung. Der Hosting
Dienst entscheidet darüber welche Software die Seite benutzt, und
kann das Aussehen und das Gefühl das die Seite des Projekts vermittelt,
kontrollieren oder zumindest beeinflussen.</para>

<para>Siehe
<xref linkend="canned-hosting"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für eine 
detailiiertere Diskussion über die Vor- und Nachteile von gebündeltem
Hosting und eine Liste von Seiten die es anbieten.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Eine Lizenz Wählen und Anwenden</title>

<para>Dieser Abschnitt soll eine schnelle und sehr grobe Anleitung sein
zur Wahl einer Lizenz. Lesen Sie 
<xref linkend="legal"/> um die genauen rechtlichen Implikationen der
verschieden Lizensen zu verstehen, und wie die Lizenz die Sie wählen
die Fähigkeit Anderer ihre Software mit anderer freier Software zu
mischen, beeinflussen kann.</para>

<para>Es gibt eine große Menge an Freien Software Lizenzen von denen
Sie wählen können. Die meisten müssen wir hier nicht beachte, da Sie
für die speziellen Rechtlichen Bedürfnisse einer Bestimmten Firma oder
Person geschrieben wurden und für Ihr Projekt nicht angemessen wären.
Wir beschränken und auf die am häufigsten benutzten Lizenzen; in den
meisten Fällen werden Sie eine von ihnen wählen wollen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>Die "Du Darfst Alles" Lizenzen</title>

<para>Wenn Sie kein Problem damit haben, dass der Code in Ihrem
Projekt in proprietären Anwendungen verwendet wird, benutzen Sie eine
Lizenz nach Art von <firstterm>MIT/X</firstterm>. Es ist die 
einfachste von verschiedenen minimalen Lizenzenm die nicht viel mehr
machen, als Vervielfältigungsrechte durch zu setzen (ohne dabei
wirklich die Vervielfältigung einzuschrängen) and spezifizieren, dass
der Code ohne jegliche Haftung kommt. Für Weiteres siehe <xref 
linkend="license-choosing-mit-x"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>Die GPL</title>

<para>Wenn Sie nicht wollen, dass Ihr Code in propritären Anwendungen
verwendet wird, benutzen Sie die GNU General Public License
(Allgemeine Öffentliche Lizens) (<ulink 
url="http://www.gnu.org/licenses/gpl.html"/>). Die GPL ist die heute
warscheinlich bekannteste freie Software Lizenz der Welt. Was in sich
selbst ein großer Vorteil ist, da viele potentielle Benutzer und 
Teilnehmer bereits mit ihr vertraut sein werden und desshalb nicht
zusätzliche Zeit damit verbringen müssen Ihre Lizenz zu lesen und zu
verstehen. Für weiter Details siehe
<xref linkend="license-choosing-gpl"/><phrase output="printed">
im Kapitel<xref linkend="legal"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Wie Sie eine Lizenz auf Ihre Software Anwenden</title>

<para>Nachdem Sie ein Lizenz gewählt haben, sollten Sie es auf Ihrer
Hauptseite sagen. Sie brauchen nicht den tatsächlichen Text der
Lizenz dort anzugeben; Geben Sie einfach nur die Lizenz an und lassen
Sie es auf seinen kompletten Text, auf einer sepereaten Seite, als
Link verweisen.</para>

<para>Dies sagt der Öffentlichkeit, unter welcher Lizenz Sie 
<emphasis>vorhaben</emphasis> die Software zu veröffentlichen, reicht
aber nicht für rechtliche Angelegenheiten aus. Dafür muss die Sofware
selbst die Lizenz enthalten. Die gewöhnliche Art wie dies gemacht wird,
ist den kompletten Text der Lizenz in einer Datei namens <filename>
COPYING</filename> (oder <filename>LICENSE</filename>) zu stellen, und
dann einen Hinweis am Anfang jeder Datei des Quellcodes zu stellen, der
das Datum des Urheberrechts, der Urheber, die Lizenz und eine Angabe
wo die komplette Text der Lizenz zu finden ist.</para>

<para>Es gibt viele Variationen dieses Musters, also werden wir uns
hier nur ein Beispiel anschauen. Die GNU GPL sagt, dass man einen
Hinweis wie diesen am Anfang von jeder Datei des Quellcodes setzen 
sollte.</para>

<screen> 
Diese Übersetzung von Katja Lachmann im Auftrag der S.u.S.E. GmbH – 
<ulink url="http://www.suse.de"/> und überarbeitet von 
<ulink url="http://www.peter.gerwinski.de/">Peter Gerwinski</ulink>, 
G-N-U GmbH – <ulink url="http://www.g-n-u.de"/>, wird der besseren 
Verständlichkeit halber hier verwendet, in Ihrer Anwendung sollten 
Sie jedoch die Englische Originalversion die Sie hier <ulink 
url="http://www.gnu.org/licenses/gpl.html#SEC4"/> finden verwenden,
da diese Übersetzung nicht offiziel oder im Rechtlichen Sinne 
Anerkannt ist. Die komplette Übersetzung der GPL finden Sie hier
<ulink url="http://www.gnu.de/documents/gpl.de.html"/>
TODO: um Erlaubniss bitten die Übersetzung verwenden zu dürfen!

[eine Zeile mit dem Programmnamen und einer kurzen Beschreibung]
Copyright (C) [Jahr]  [Name des Autors]

Dieses Programm ist freie Software. Sie können es unter den 
Bedingungen der GNU General Public License, wie von der Free Software
Foundation veröffentlicht, weitergeben und/oder modifizieren, entweder
gemäß Version 2 der Lizenz oder (nach Ihrer Option) jeder späteren 
Version.

Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es
Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne
die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR 
EINEN BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public
License.

Sie sollten ein Exemplar der GNU General Public License zusammen mit
diesem Programm erhalten haben. Falls nicht, schreiben Sie an die Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110, USA.
</screen>

<para>Es wird nich explizit erwähnt, dass die Kopie der Lizenz die Sie
mit der Software erhalten haben in der Datei <filename>COPYING
</filename> enthalten ist, aber sie wird meistens dort hin getan. (Sie 
könnten den Obigen Hinweis abändern um die Quelle direkt an zu geben.)
Diese Vorlage gibt Ihnen auch eine Geographische Adresse von der Sie
eine Kopie der Lizenz erhalten können. Noch eine häufige Methode ist
ein Link zu einer Webseite welche die Lizez enthällt an zu geben.
Urteilen Sie selber darüber und weisen Sie auf wo immer Sie der 
Meinung sind, dass beständigste Kopie dieser Lizenz Gepflegt wird, was
auch einfach auf die Webseite Ihres Projekts sein kann. Generell, muss
der Hinweis den Sie am Anfang jeder Datei setzen nicht genau so
aussehen wie der Obige, so fern es mit dem selben Hinweis auf den
Halter des Urheberrechts und das Datum, sowie die Lizens angibt und
angibt wo die komplette Lizenz zu finden ist.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Setting the Tone</title>

<para>Bis jetzt, haben wir Aufgaben behandelt die beim Aufbau des
Projekts ein mal erledigt werden: Eine Lizenz wählen, die Webseite
einrichten, usw. Die wichtigsten Aspekte beim Starten eines Projekts
sind aber dynamisch. Eine Adresse für die mailing Liste zu wählen ist
einfach; sicherzustellen, dass die Unterhaltungen darauf beim Thema
bleiben und produktiv sind, ist eine ganz und gar andere Angelegenheit.
Wenn das Projekt nach Jahren der geschlossenen Entwicklung geöffnet
wird, wird sich sein Entwicklungs Prozess ändern und Sie werden die
bestehenden Entwickler darauf vorbereiten müssen.</para>

<para>Die ersten Schritte sind die Schwehrsten, da es noch keine
Beispiele und Erwartungen für zukünftiges Verhalten gibt. Beständigkeit
in einem Projekt, kommt nicht durch formale Richtlinien, sondern durch
eine geteilte, schwehr greifbare, kollektive Weisheit die sich mit der
Zeit entwickelt. Oft gibt es auch geschriebene Regeln, die aber im
wensentlichen dazu neigen eine zusammengefasste Version der nicht
greifbaren, fortwährend sich entwickelnden Vereinbarungen zu sein, nach
denen das Projekt wirklich läuft. Die nieder geschriebenen Richtlinien
definieren nicht so sehr die Kultur des Projekts, sonder beschreiben
sie viel mehr und selbst dann auch nur angenähert.</para>

<para>Es gibt ein paar Gründe warum sich die Sachen so entwickeln.
Wachstum und Betriebsamkeit sind nicht so schädlich für die
Ansammlung sozialer Normen, wie man vieleicht denken könnte. So lange
Veränderungen nicht <emphasis>zu</emphasis> schnell von statten
gehen, gibt es Zeit für Neuankömmlinge zu lernen, wie Sachen erledigt
werden und nachdem sie es gelernt haben, werden sie diese Regeln selber
durchsetzen. Bedenken Sie wie die Reime die von Kindern gesungen werden
die Jahrhunderte überdauern. Es gibt heute Kinder die ungefähr die
selben Lieder singen wie die Kinder vor hunderten von Jahren, auch
wenn heute keiner der früheren Kinder mehr lebt. Jüngere Kinder hören
die Lieder, wie sie von den älteren gesungen werden und wenn sie
wiederrum älter sind, singen sie sie vor den anderen jüngeren Kindern.
Dabei unternemen sie natürlich keinen bewussten Transfer, aber der 
Grund dafür, dass die Lieder überleben, ist trotzdem, dass sie 
regelmäßig und wiederholt übertragen werden. Die Skala auf der freie
Software Projekte gemessen werden mag nicht im Bereich von Jarhunderten
liegen (was wir noch nicht wissen), aber die Dynamik der übertragung
ist in vielerlei Hinsicht die selbe. Die Umsatzrate ist allerdings
viel höher und muss durch eine aktivere und bedachten Transfer 
Anstrengung ausgeglichen werden.</para>

<para>Diese Anstrengung wird untersützt durch die Tatsache, dass Leute
die auftuchen für gewöhnlich soziale Normen erwarten und nach ihnen
suchen. So sind Menschen nun mal gemacht. In einer Gruppe die durch
ein gemeinsammes Bestreben geeinigt ist, suchen Leute instinktiv nach
Verhaltensmuster die sie als Mitglied dieser Gruppe kennzeichnen. Das
Ziel beim setzen früher Beispiele ist diese Verhalten "der Spitze" zu
solchen zu machen, die für das Projekt nützlich sind; denn ein mal
Etabliert, werden sie größten teils fortwährend erhalten beleiben.
</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Im folgenden werden ein paar Beispiele gegeben, für bestimmte
Sachen die Sie tun können um gute Vorbilder zu geben. Sie sind nicht
als gründliche Liste gedacht, sondern lediglich als Abbildungen der
Idee, dass es enorm hilft die Stimmung für die Zusammenarbeit im
Projekt schon früh vor zu geben. Physikalisch mag es sein, dass jeder
Entwickler für sich alleine in einem Raum arbeitet, Sie können aber
eine Menge machen um ihnen das <emphasis>gefühl</emphasis> zu geben,
als würden sie alle zusammen in einem Raum arbeiten. Je mehr sie sich
so fühlen, desto mehr Zeit werden sie an dem Projekt verbringen 
wollen. Ich habe diese bestimmten Beispiele gewählt, da sie in dem
Subversion Projekt aufkamen, (<ulink 
url="http://subversion.tigris.org/"/>), an dem ich beiteiligt war und
welches ich seit seinem Anfang mit verfolge. Sie sind aber nicht
einzigartig zu Subversion; diese Situationen werden in den meiste
Open Source Projekten aufkommen, und sollten als Gelegenheiten gesehen
werden, die sachen richtig an zu fangen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Vermeiden Sie Private Diskussionen</title>

<para>Selbst nachdem Sie ein Projekt an die Öffentlichkeit gebracht
haben, werden Sie und die anderen Gründungsmitglieder manchmal in 
der Lage sein, schwierige Fragen innerhalb eines kleineren Kreises
durch private Kommunikation lösen zu wollen. Dies gilt besonders für
die anfangs Tage des Projekts, bei denen es viele wichtige 
Entscheidungen gibt und für gewöhnlich gibt es nur wenige Freiwillge
die qualifiziert sind sie zu treffen. All die offensichtlichen 
Nachteile öffentlicher Diskussionen, auf mailing listen, werden 
greifbar vor Ihnen liegeni: Die Verzögerung die bei Email diskussionen
unvermeidbar ist, die Zeit die erforderlich ist, damit eine Konsens
gebildet werden kann, die mühe sich mit naiven Freiwilligen
auseinandersetzen zu müssen, die meinen sie verstünden alle
Angelegenheiten es aber nicht tun(diese gibt es in jedem Prohekt;
manchmal bringen sie im nächsten Jahr die besten Beiträge, manchmal
bleiben sie ewig naiv), die Person die nicht versteht, warum Sie nur
das Problem X lösen wollen, wenn es offensichtlich eine Untermenge
des größeren Problems Y ist, und so weiter. Die Verlockung diese
Unterhaltungen hinter geschlossenen Türen zu führen und sie als
vollendete Tatsache zu präsentieren oder zumindest als nachdrückliche
Empfehlung einer vereinigten und einflussreichen Wählerkreises, wird
gewiss groß sein.</para>

<para>Machen Sie es Nicht.</para>

<para>So langsam und müehseleig öffentliche Diskussionen auch sein 
mögen sind sie auf lange sicht immer noch vor zu ziehen. Wichtige
Entscheidungen privat zu treffen, ist analog zum Versprühen von
einem Abwehrmittel gegen Freiwillige. Kein Freiwilliger der die Sache
ernst meint, würde lange in einer Umgebung bleiben, in dem alle
wichtigen Entscheidungen in einer geheimen Versammlung getroffen
werden. Desweiteren hat die öffentliche Disskusion den Vorteil, dass
sie viel länger bestestehen wird als die kurzlebige Technische Frage
um die es ging:

<itemizedlist>
  <listitem>
  <para>Die Diskussion wird dabei helfen neue Entwickler zu trainieren
	und zu belehren. Sie können nie wissen wie viele Augen auf die
	Diskussion schauen; selbst wenn die Meisten sich nicht 
	beteiligen, kann es sein das viele es im stillen mit verfolgen,
	um Informationen über das Projekt zu sammeln.</para>
  </listitem>
  <listitem>
  <para>Die Diskussion wird <emphasis>Sie</emphasis> in der Kunst
	trainieren, technische Angelegenheiten für Leute zu erklären
	die mit der Software nicht so vertraut sind wie Sie. Dies ist
	eine Fähigkeit, die Übung erfordert und Sie können sie nicht
	erlangen, indem Sie mit denen reden, die bereits das wissen,
	was Sie wissen.</para>
  </listitem>
  <listitem>
  <para>Die Diskussion und Ihre Ergebnisse werden auf ewig in den
	öffentlichen Archiven verfügbar sein und es zukünftige
	Diskussionen ermöglichen wiederholungen zu vermeiden. Siehe
        <xref linkend="using-archives"/><phrase output="printed">
        im Kapitel<xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Zuletzt gibt es noch die Möglichkeit, dass jemand auf der Liste
einen echten Beitrag zu der Diskussion leisten kann, in dem er eine
Idee an der Sie nie gedacht hätten aufbringt. Es ist schwehr zu sagen,
wie warscheinlicht dies ist; es hängt einfach nur von der komplexität
des Probelms und den erforderlichen Kentnissen ab. Wenn ich aber ein
Beispiel heranführen darf, würde ich es wagen zu behaupten, dass es
viel warscheinlicher ist, als man es intuitiv erwarten würde. Im
Subversion Projekt, glaubten wir (die Gründer) mit einer tiefen und
komplexen Reihe von Problemen konfrontiert zu sein, über die wir uns
seit ein paar Monaten viele Gedanken gemacht hatten, und offen gesagt
zweifelten wir daran, dass irgendjemand auf der neulich eingerihteten
Mailing Liste etwas wertfolles zu der Diskussion beitragen könnte. Wir
nahmen also den einfachen Weg und fingen damit an unsere technischen
Ideen in privaten Emails hin und her zu schlagen, bis ein Beobachter
des Projekts <footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> davon Wind bekam, 
und uns darum bat, die Diskussion auf die öffentliche Liste zu 
verlagern. Ein wenig die Augen verdrehend, taten wir es-und waren
erstaunt, mit der Anzahl aufschlussreicher Kommentare und Vorschläge 
die schnell daraus resultierten. In vielen Fällen boten Leute Ideen
an die uns nie in den Sinn gekommen waren. Es stellte sich heraus,
dass es ein paar <emphasis>sehr</emphasis> schlaue Leute auf dieser
Mailing liste waren; sie hatten nur auf den richtigen Köder gewartet.
Es ist wahr, dass die resultierenden Diskussionen länger dauerten als
wenn wir die Diskussion privat gehalten hätten, allerdings waren sie
so viel produktiver, dass die zusätzliche Zeit durchaus wert waren.
</para>

<para>Ohne in all zu verallgemeinernde Aussagen wie "Die Gruppe ist
immer schlauer als der Einzelne" herab zu gleiten(wir sind alle genug
Gruppen begegnet, um es besser zu wissen), muss man doch anerkennen,
dass es bestimmte Aktivitäten gibt, bei denen Gruppen herausragend
sind. Ausführliche Beurteilung durch gleichrangige (Peer Review)
ist einer von ihnen; die schnelle Generierung vieler Ideen ist eine
Andere. Die Qualität dieser Ideen hängt natürlich von der Qualität der
Gedanken die in sie hinein gesteckt wurden ab, Sie werden aber nie
erfahren, welche Denker da draußen sind, wenn Sie sie nicht mit einem
herausforderndem Problem stimulieren.</para>

<para>Natürlich, gibt es auch Diskussionen die im privaten geführt
werden müssen; im Buch werden wir wurchwegs Beispiele hierfür finden.
Das leitende Prinzip sollte aber sein:<emphasis>Wenn es keine Grund
gibt es privat zu halten, sollte es öffentlich sein.</emphasis></para>

<para>Sie müssen aber Einfluss üben um dies in gang zu setzen. Es
reicht nicht bloß sicher zu stellen, dass Ihre eigen Nachrichten an
die öffentliche Liste gehen. Sie müssen auch andere dazu bewegen ihre
ünnötigerweise privat gehaltene Unterhaltugnen öffentlich zu machen.
Wenn jemand versucht eine private Diskussion zu starten, und es keinen
Grund gibt sie privat zu halten, sollten Sie sich verpflichtet fühlen
sofort eine angemessene übergeordnete Diskussion zu eröffnen. Sie 
sollten nicht ein mal direkt auf das Thema eingehen, bevor Sie nicht
entweder die Diskussion erfolgreich an einem Öffentlichen Ort gelenkt 
haben oder sichergestellt haben, dass sie doch privat gehalten werden
sollte. Wenn Sie konsequent so vorgehen, werden Leute es ziemlich 
schnell mitbekommen und standardmäßig die öffentlichen Foren benutzen.
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Ersticken Sie Unhöeflichkeit im Keim</title>

<para>Von Anfang der öffentlichen Existenz Ihres Projektes an, sollten
Sie keine Toleranz für unhoefliches oder beleidiges Verhalten in 
seinen Foren zeigen. Keine Toleranz heißt nicht unbedingt die
technische Durchsetzung, Sie müssen nicht diese Leute von der Mailing
Liste entfernen wenn Sie einen anderen Teilnehmer "flamen" oder ihnen
den commit Zugriff entziehen weil sie abfällige Bemerkungen gemacht
haben. (Theoretisch, werden Sie eventuell auf solche Mittel zurück
greifen müssen, aber erst nachdem alle anderen Mittel erschöpft sind-
was per Definition, am Anfang eines Projekts noch nicht der Fall ist.)
Keine Toleranz bedeutet einfach niemals schlechtes Benehmen unbemerkt
vorbeit gehen zu lassen. Zum Beispiel, wenn jemand eine technische
Bemerkung, gemischt mit einem Angriff <foreignphrase>ad hominem
</foreignphrase> gegen einem anderen Entwickler, ist es zwingend 
notwendig, dass ihre Reaktion als <emphasis>erstes</emphasis> den
Angriff <foreignphrase>ad hominem</foreignphrase> angeht, als seperate
Angelegenheit und erst dann auf den technischen Inhalt eingeht.</para>

<para>Leider ist es sehr leicht und all zu üblich, dass konstuktive
Diskussionen in destruktive "flame wars" ausarten. Menschen werden
sachen sagen die sie nie von Angesicht zu Angesicht sage würden. Die
Themen dieser Discussionen verstärken nur diesen Effekt: Bei
technischen Angelegenheiten, fühlen Menschen oft, dass es nur eine
richtige Antwort zu den meisten Fragen gibt und dass eine
Meinungsverschiedenheit zu dieser Antwort nur durch die Ignoranz oder
Dummheit des Anderen erklärt werden kann. Es ist ein kurzer Weg den
technischen Vorschlag einer Person bescheuert zu nennen bis zu die
Person selber bescheuert zu nennen. Tatsächlich ist es oft schwehr zu
unterscheiden, wo die technische Diskussion aufhört und der Angriff
auf den Charakter anfängt, was auch ein Grund ist wesshalb drastische
Maßnahmen oder Bestrafungen keine gute Idee sind. Statt dessen, wenn
Sie es auftreten sehen, schreiben Sie eine Nachricht die nachdrücklich
darauf hinweist wie wichtig es ist die Unterhaltung in einem 
freundlichen Ton zu halten, ohne dabei jemand zu beschuldigen
absichtlich giftig gewesen zu sein. Solche "Guter Bulle" Nachrichten 
neigen unglücklicherweise dazu sich nach einer Vorschullehrerin die
eine Klasse über gutes Benehmen belehrt anzuhören:</para>

    <blockquote>
      <para><emphasis>Als erstes lasst uns bitte mit den unter
	Umständen gegen andere gerichtete Bemerkungen aufhören;
	zum Beispiel den Entwurg der Sicherheits Schicht von J als
	"naiv und ignorant gegenüber den Grunprinzipien der
	Computer Sicherheit" zu bezeichnen. Das mag stimmen oder auch
	nicht, in jedem Fall ist es aber keine Art eine Diskussion zu
	führen. J hat seinen Vorschlag mit Guter absicht getan. Wenn
	es Fehler aufweist, weise darauf hin und wir werden sie
	beheben oder einen neuen Entwurf finden. Ich denke M hatte
	recht als er sagte, dass...</emphasis></para>
    </blockquote>

<para>So gestelzt sich solche Antworten auch anhören, haben sie doch
einen bemerkbaren Effekt. Wenn Sie beständig auf solches Verhalten  
hin deuten aber keine Entschuldigung verlangen von der angreifenden
Partei fordern, lassen Sie ihnen die möglichkeit sich ab zu regen und
ihre bessere Seite zu zeigen, indem sie sich das nächste mal
anständiger benehmen-und sie werden es. Einer der Geheimnisse 
erfolgreich gegen solches Verhalten vor zu gehen, ist niemals die
untergeordnete Diskussion zum Hauptthema werden zu lassen. Es sollte
immer nur ein neben Thema bleiben, ein kurzes Vorwort zum Hauptteil
Ihrer Antwort.  Weisen Sie im vorbeigehen darauf hin dass "wir schen
hier nicht so erledigen", aber gehen Sie dann weiter zum echten
Inhalt, damit Sie Leuten immer etwas was zum Thema gehört, worauf sie
Antworten können geben. Wenn jemand protest einlegt, dass sie die
Zurechtweisung zu unrecht ausgesprochen wurde, sollten Sie sich nicht
zu einen Streit darüber verleiten lassen. Antworten Sie entweder nicht
darauf (wenn Sie denken sie wollen nur Dampf ab lassen und keine
antwort erfordern), oder entschuldigen Sie sich für die Übertriebene
Reaktion und das es schwehr ist Nuancen in einer Email heraus zu lesen
und gehen Sie dann wieder auf das Hauptthema ein. Bestehen Sie niemals
auf eine Antwort, ob Privat oder Öffentlich, von jemand der sich
unangemessen benommen hat. Wenn sie sich von alleine entscheiden sich
zu entschuldigen, großartig, aber es von ihnen zu verlangen würde nur
Bitterkeit verursachen.</para>

<para>Das übergeordnete Ziel ist gute Umgangsformen als eine Verhalten
der inneren Gruppe gesehen werden. Das hilft dem Projekt, da Entwickler
durch "flame wars" vertrieben werden können (selbst von Projekten die 
sie mögen und unterstützen). Es mag sein das Sie nicht ein mal wissen,
dass sie vertrieben wurden; es kann sein das sich jemand auf der 
Mailing Liste herumtreibt und bemerkt, dass man eine dicke Haut braucht,
um an dem Projekt teil zu nehmen und sich dagegen entscheiden sich 
daran zu beteiligen. Foren freundlich zu halten ist auf lange sicht
eine Überlebensstrategie und es ist einfacher zu machen, wenn ein
Projekt noch klein ist. Wenn es einmal ein Teil der Kultur ist, werden
Sie nicht der einzige sein der sich bemüht. Das Verhalten wird von jedem
gepflegt werden.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Üben Sie Demonstrativ Code Review</title>

<para>Einer der besten Wege eine produktive Entwicklergemeinschaft zu
fördern, ist leute dazu zu bringen gegenseitig Ihren code an zu 
schauen. Dies effektiv zu gewährleisten, erfordert ein wenig 
technische Infrastuktur-insbesondere sollten commit emails an 
geschaltet werden; siehe <xref linkend="commit-emails"/> für weitere
Details. Der effekt den commit Emails haben ist, dass jedes mal wenn
jemand ein änderung an dem Quellcode commited, eine Email mit dem
zugehörigen Kommentar des Authors und den diffs (siehe
<xref linkend="vc-vocabulary-diff"/>, im Kapitel <xref linkend="vc-vocabulary"/>).
<firstterm>Code review</firstterm> bedeutet diese Comit Emails
durch zu gehen, wenn sie herein kommen und nach Bugs und möglichen
Verbesserungen zu suchen. <footnote><para>Auf diese Weise wird
zumindest in Open Source Projekten Code Review Praktiziert. In
zentralisierteren Projekten, kann "Code Review" auch mehrere Leute die
gemeinsam durch ausgedrucktem Code durchgehen und nach bestimmten
Problemen und Mustern suchen, bedeuten.</para></footnote></para>

<para>Code Review dient mehreren Zwecken gleichzeitig. Es ist das
offensichtlichste Beispiel für "peer review" in der Open Source
Welt und hilft direkt dabei die Qualität der Software zu erhalten.
Jeder Bug der in einem Stück Software ausgelifert wird, kam dadurch
zustande, dass es committed wurde und nicht bemerkt wurde; desshalb,
werden weniger Bugs ausgeliefert werden, je mehr Augen auf die Commits
schauen. Aber code Review dient auch einem indirektem Zweck: Es gibt
Leuten die Bestätigung, dass was sie tun, etwas bedeutet, denn man
würde sich nicht die Zeit nehmen über einen Commit zu schauen, wenn
es einem nicht interesieren würde, welchen Effekt er hat. Menschen
tun ihr bestes, wenn sie wissen, dass andere sich die Zeit nehmen es
auszuwerten.</para>

<para>Reviews sollte öffentlich sein. Selbst in der Situation, dass 
ich im selben Physikalischen Raum mit anderen Entwicklern gesessen 
habe und einer von uns einen Commit gemacht hat, achten wir darauf 
den Review nicht verbal im Raum zu führen, sondern es an die
Entwickler Mailing Liste zu schicken. Jeder profitiert davon den
Review Vorgang zu sehen. Leute verfolgen die Erläuterungen und finden
darin manchmal Mängel und selbst wenn sie es nicht tun, erinnert es
sie immernoch daran, dass Code Review eine erwartete regelmäßige
Aktivität ist, wie das Geschirr spülen oder den Rasen mähen.</para>

<para>Wir im Subversion Projekt hatten es uns zu Anfang nicht zur
Gewohnheit gemacht, regelmäßig Code Reviews zu machen. Es gab keine
Garantie, dass jeder commit werden durchgesehen würde, auch wenn man
manchmal über eine Änderung schauen würde, wenn man besonders an dem
Bereich des Codes interesiert war. Es schlichen sich Bugs ein die
wirklich hätte gesehen werden sollen und müssen. Ein Entwickler namens
Greg Stein, der den Wert von vorhergehender Arbeit kannte, entschied
sich ein Beispiel zu setzen, indem er jede Zeile von 
<emphasis>jedem einzelnen Commit</emphasis> welches in das Repository
ging, sich anschaute. Auf jedem Commit, den irgend jemand machte,
folgte bald von Greg eine Email an die Entwickler Liste, welche den
Commit zerlegte, mögliche Probleme analysierte und ab und zu ein Lob
für ein besonders cleveres Stück Code. Auf der Stelle fing er an Bugs
und nicht Optimale Programmier Praktiken zu finden die sonst durch
gerutscht wären ohne jemals bemerkt zu werden. Wohlgemerkt beschwehrte
er sich nie, dass er der einzige war der für jeden Commit einen Code
Review machte, auch wenn es einen nicht unwesentlichen Teil seiner
Zeit in Anspruch nahm, er lobte aber jedes Mal als er die Gelegenheit
bekam die Vorteile von Code Reviews. Ziemlich bald, fingen andere an,
ich selbst eingeschlossen, regelmäßig commits anzuschauen. Was war
unsere Motivation? Es war nicht, dass Greg uns bewust durch schande
dazu gebracht hat. Er hatte bewiesen, dass Code Reviews einer 
wertvoller weg ist, seine Zeit zu verbringen und dass man so viel zu
einem Projekt beitragen kann, indem man den Änderungen anderer 
durchsieht, wie indem man seilber neuen Code schreibt. Als er das ein
mal demonstriert hat, wurde es zum erwarteten Verhalten, so weit 
sogar, dass wenn auf einem Commit keine Reaktion folgte es dazu 
führte, dass der Commiter anfing sich sorgen zu machen und sogar auf
der Liste nach fragte, ob nicht jemand die Zeit gefunden hatte drüber
zu schauen. Später bekam Greg einen Job der ihn nicht so viel Zeit
für Subversion ließ und er musste mit den regelmäßigen Code Reviews
aufhören. Aber bis zu dem Zeitpunkt, war die Angewohnheit so weit
bei uns anderen integriert, als ob es nie anders gewesen war.</para>

<para>Fangen Sie ab dem aller ersten Commit damit an Reviews zu 
machen. Die Probleme die am einfachsten durch das Durchsehen der 
Diffs zu erwischen sind, sind Schwachstellen in der Sicherheit,
Speicher Lecks ungenügende Kommentarte oder Dokumentation der API,
off-by-one Fehler, caller/callee discipline mismatches, und andere
Probleme, die ein Minimum an umgebenden Kontext erfordern um sie zu
finden. Selbst Angelegenheiten von größerem Umfange, wie z.B
wiederholte Muster nicht an einer Stelle zu abstrahieren, werden
leichter erkennbar, nachdem man regelmäßig die Reviews gemacht hat,
da vergangene Diffs darüber über den Review derzeitiger Diffs
informierten.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Machen Sie sich keine sorgen, dass Sie nichts finden, was Sie
kommentieren können, oder weil Sie nicht genug über alle Bereiche des
Codes wissen. Es wird für gewöhnich irgend etwas über einen Commit zu
sagen geben; selbst wenn Sie nichts bedenkliches finden, kann es sein,
dass Sie etwas zum loben finden. Das wichtige ist, jedem der
Commited klar zu machen, dass was sie machen gesehen und verstanden
wird. Natürlich befreit Code Review die Programmierer nicht von der
Verantwortung ihre Änderungen vor dem Commit, durch zu sehen und zu
testen; keiner sollte sich auf Code Review verlassen um Fehler zu
finden, die er von alleine hätte finden müssen.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>Wenn Sie ein Vorher Geschlossenes Projekt Öffnen, Seien Sie
Sensibel für den Umfang der Veränderungen.</title>

<para>Wenn Sie ein existierendes Projekt öffnen, welches bereits
aktiver Entwickler hat, die an einer Closed Source Umgebung
gewohnt sind, stellen Sie sicher, dass jeder versteht, dass eine
große Veränderung auf Sie zukommt-und stellen Sie sicher, dass
Sie wissen wie es sich aus Ihrer Sicht anfühlen wird.</para>

<para>Versuchen Sie sich vorzustellen, wie die Situation für sie
aussieht: vorher wurden Code und Design Entscheidungen mit einer
Gruppe anderer Programmierer getroffen, die alle mehr oder weniger
gleich gut die Software kannten, die alle den gleichen Druck von der
Verwaltung zu spüren bekamen und die alle gegenseitig ihre Stärken
und Schwächen kannten. Jetzt verlangen Sie von ihnen ihren Code für
die Prüfung durch irgend welche Fremde frei zu geben, die ihre
Meinungen nur auf grund von Code bilden werden, ohne zu wissen welcher
geschäftlicher Druck zu bestimmten Entscheidungen gezwungen hat. Diese
Fremde werden viele Fragen stellen, Fragen die vorhandene Entwickler
aufrütteln werden, wenn Sie feststellen müssen, dass die Dokumentation
an der sie so hart gearbeitet haben <emphasis>immernoch</emphasis> 
unzureichend ist (was unvermeidbar ist). Um dem ganzen noch ein
Sahnehäbchien zu geben sind die Neuankömlinge unbekannte, 
Gesichtslose Wesen. Wenn einer ihrer Entwickler sich bereits im
Bezug auf seine Programmier Fähigkeiten unsicher ist, stellen Sie sich
vor, wie es ihn verbittern wird, wenn die Neuankömmlinge auf Mängel im
Code den er geschrieben hat hinweisen und schlimmer noch es vor seinen
Kollegen tun. Es sei denn Sie haben ein Manschaft perfekter 
Programierer, ist es Unvermeidbar-tatsächlich wird es am Anfang 
warscheinlich allen passieren. Nicht weil sie schlechte Programmierer
sind; sondern weil jedes Projekt, welches eine über einer bestimmten
Größe wächst, Bugs hat und der Peer Review wird manche dieser Bugs
bemerken (siehe <xref linkend="code-review"/>
<phrase output="printed"> in einem früheren Abschnitt dieses Kapitels
</phrase>). Gleichzeitig werden die neuen Freiwilligen selbst nicht
so sehr dieser Prüfung unterliegenm da sie keinen Code selbst
beisteuern können bis sie mehr mit dem Projekt vertraut sind. Für Ihre
Entwickler kann es sich so anfühlen als ob die ganze Kritik immer nur
herein kommt und nie nach ausen geht. Es besteht desshalb die Gefahr,
dass sich eine Belagerungs Mentalität unter den alten Händen 
einstellt.</para>

<para>Der beste Weg dies zu verhindern, ist alle zu warnen, was auf
Sie zukommt, erklären Sie es ihnen, sagen Sie ihnen, dass das erste
Unbehagen völlig normal ist und versichern Sie ihnen das alles besser
wird. Manche dieser Warnungen sollten im privaten geschehen, vor das
Projekt geöffnet wird. Sie könnten es aber auch hilfreich finden, die
Leute auf der Mailing List daran zu errinnern, dass es für das Projekt
eine neue Art der Entwicklung ist und dass die Anpassung eine weile
dauern wird. Das beste was Sie machen können ist als gutes Beispiel
vorran zu gehen. Wenn Sie sehen, dass Ihre Entwickler nicht genügend
newbie Fragen beantworten, hilft es nicht es ihnen zu sagen, dass sie
mehr beantworten sollen. Sie mögen kein gutes Gefühl dafür haben, wann
eine Reaktion gerechtfertigt ist, oder es kann sein dass Sie nicht
wissen wie sie die Arbeit am Code gegen der neuen Bürde der externen
Kommunikation priorizieren sollen. Der beste Weg sie dazu zu bringen
sich zu beteiligen, ist sich selber zu beteiligen. Seien auf der
öffentlichen Mailing List anwesend und beantworten Sie ein paar Fragen.
Wenn Sie nicht genügend Erfahrung haben um die Fragen decken zu können,
geben Sie es für alle sichtbar an einem anderen Entwickler weiter, der
die Erfahrung dazu hat&mdash; und achten Sie darauf, dass er darauf
zurück antwortet oder zumindest eine Reaktion gibt. Natürlich wird es
für die älteren Entwickler verlockend sein, in private Diskussionen
zu verfallen, schließlich sind sie daran gewohnt. Stellen Sie sicher
dass Sie auf der internen Mailing List sind, auf der das passieren
könnte, damit Sie darum bitten können, dass diese Diskussionen sofort
auf die öffentlichen listen verlagert werden können.</para>

<para>Es gibt andere, langfristige Bedenken beim öffnen vorher
geschlossener Projekte. <xref linkend="social-infrastructure"/> 
untersucht techniken um bezahlte und unbezahlte Entwickler erfolgreich
zu mischen und <xref linkend="legal"/> behandelt die nötige rechtliche
Sorgfalt, beim öffnen von privatem Code, welches unter umständen
Software beinhaltet, dass von anderen Parteien oder geschrieben wurde
oder ihnen "gehört".</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Bekanntmachung</title>

<para>Wenn das Projekt vorzeigbar ist&mdash;nicht perfekt, lediglich
vorzeigbar&mdash; sind Sie dazu bereit es der Welt bekannt zu machen.
Tatsächlich ist dies ein relativ einfacher Prozess: gehen Sie nach
<ulink url="http://freshmeat.net/"/>, klicken Sie auf <guimenuitem>
Submit</guimenuitem> in der oberen Navigations Leiste, und füllen Sie
das Formular aus welches Ihr Projekt bekannt zu machen. Freshmeat ist
der Ort, auf den jeder schaut für neue Projekt Ankündigungen. Sie
müssen dort nur ein paar Augen erwischen, damit die Nachricht mittels
Mundpropaganda verbreitet wird.</para>

<para>Wenn Sie Mailing Listen oder Newsgroups kennen, auf denen eine
Ankündigung Ihres Projekts zu Thema passen würde und von intresse
wäre, dann machen Sie dort einen Eintrag, aber seien Sie vorsichtig,
genau <emphasis>einen</emphasis> Eintrag pro Forum zu machen, und
richten Sie die Leute auf Ihre eigenen Foren wenn für Diskussionen
die daran anschließen (indem Sie die <systemitem>Reply-to</systemitem>
Einstellung setzen). Die Einträge sollten kurz sein, und gleich zur
Sache kommen:</para>

<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley Volltext indizierungs Projekt
Reply-to: dev@scanley.org

Dies ist eine einmaliger Eintrag um die Gründung des Scanly Projekts,
bekannt zu machen, welches eine Open Source Volltext indizierungs und
Suchmaschine ist, mit einer reichen API für die Benutzung durch
Programmierer um such funktionen für große Sammlungen von text Dateien
zur verfügung zu stellen. Scanley ist funktionierender Code, wird
aktiv entwickelt und ist auf der suche nach Entwickler und Beteiligte
zum Testen.

Home page: http://www.scanley.org/

Funktionen:
   - Durchsucht Klartext, HTML, und XML
   - Suche nach Wörter oder Ausdrücken
   - (geplant) Unscharfe suche
   - (geplant) Inkrementelle aktuelisierung der Indizes
   - (geplant) Indexierung entfernter Webseiten

Requirements:
   - Python 2.2 oder höher
   - Genügend festplatten Speicher um die Indizes zu speichern (ca doppelter
	Speicherplatz, der ursprünglichen Daten)

Mehr Informationen, finden Sie auf scanley.org.

Vielen Dank,
-J. Zufall
</screen>

<para>(Siehe <xref linkend="publicity"/><phrase output="printed">
im Kapitel <xref linkend="communications"/></phrase> für Ratschläge
zur Bekanntmachung anderer Releases und Ereignisse Ihres Projekts.)
</para>

<para>Es gibt eine andauernde Diskussion in der Free Software
Gemeinschaft darüber, ob es nötig ist ein Projekt mit laufendem Code
anzufangen, oder ob ein Projekt davon profitieren kann, selbst
wärend der Entwurfs und Diskussions Phase geöffnet zu werden.
Ich dachte früher, dass es der wichtigste Faktor wäre, mit laufendem
Code anzufangen, dass es das war was die erfolgreichen Projekte von
dem Spielzeug trennt und dass ernst zu nehmende Entwickler nur etwas
anfassen würden, was bereits etwas greifbares machte.</para>

<para>Es stellte sich heraus, dass dies nicht der Fall ist. In dem
Subversion Projekt, fingen wir mit einem Entwurfs Dokument an, ein
Kern interesierter und gut verbundener Entwickler, viel Fanfare und
überhaupt <emphasis>keinen</emphasis> laufenden Code. Zu meiner
völligen Überraschung, erhielt das Projekt von Anfang an aktive
Freiwillige anzulocken und bis wir tatsächlich etwas laufendes hatten,
waren bereits eine ziemliche Menge freiwilliger Entwickler beteiligt.
Subversion ist da nicht das einzige Beispiel; das Mozilla Projekt
wurde auch ohne laufenden Code gestartet und es ist jetzt ein
erfolgreicher Web Browser.</para>

<para>Angesichts solcher Beweise, muss ich von meiner feststellung
zurücktreten, dass Laufender Code absolut notwendig ist um ein
Projekt zu starten. Laufender Code ist immernoch eines der besten
Grundlagen für Erfolg, und eine gute Grundregel wäre so lange zu
warten, bis Sie es haben, bevor Sie das Projekt Bekannt geben. Es
mag allerdings umstände geben bei dem eine frühere Bekanntmachung
sinn macht. Ich denke, dass zumindes eitne gut ausgearbeitetes
Entwurfs Dokument, oder irgend einer Art Code Framework notwendig ist
&mdash;Natürlich mag es auf Grund von öffentlichen Rückmeldungen
überarbeitet werden, aber muss etwas festes sein, etwas greifbareres
als gute Absichten, wo Leute sich rein beisen können.</para>

<para>Wenn Sie die Bekanntmachung machen, erwarten Sie jedoch keinen
Schar Freiwilliger gleich danach. Für gewöhnlich ist das Resultat
einer Bekanntmachung, dass Sie ein paar beiläufige Anfragen bekommen,
noch ein paar melden sich auf der Mailing List an, abgesehen davon,
geht alles so ziemlich wie bissher weiter. Mit der Zeit aber werden
Sie eine stätige Zunahmen der Beiträge bemerken, sowohl von neuen 
Beiteiligten, so wie von Benutzern. Die Bekanntmachung ist lediglich
das Pflanzen eines Samenkorns. Es kann eine lange Zeit dauern, bis
die Nachricht sich verbreitet hat. Wenn das Projekt konsequent
diejenigen Belohnt, die sich Beteiligen, wird sich die Nachricht
verbreiten, da Menschen mit einander teilen wollen, wenn sie etwas
gutes gefunden haben. Wenn alles gut geht, wird die Dynamik der 
expnenziellen Kommunikations Netze langsam das Projekt, in eine
komplexe Gemeinschaft verwandeln, indem Sie nicht unbedingt den Namen
von jedem kennen und nich länger jede Unterhaltung mit verfolgen
können. In den nächsten Kapiteln, geht es darum in solch einer
Umgebung zu arbeiten.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

