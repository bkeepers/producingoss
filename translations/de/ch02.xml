<chapter id="getting-started">

<title>Der Einstieg</title>

<simplesect>

<para>Das klassische Modell, wie freie Software Projekte anfangen
wurde von Eric Raymond, in einem nunmehr berühmten Text über
Open Source, mit dem Titel <citetitle>The Cathedral and the
Bazaar</citetitle>, wie folgt beschrieben:</para>

    <blockquote>
      <para><emphasis>Jedes gute Stück Software entsteht aus der
	den Bedürfnissen eines Programmierers.</emphasis></para>

      <para>(von <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Raymond sagte wohlgemerkt nicht, dass Open Source Projekte nur
durch die Bedürfnisse eines Programmierers anfangen. Vielmehr sagte
er, dass <emphasis>gute</emphasis> Software dann entsteht, wenn der
Programmiere ein persönliches Interesse daran hat, dass das Problem
gelöst wird, was insofern für freie Software relevant ist, da es sich
herrausstellte, dass die meisten Open Source Projekte aufgrund eines
persönlichen Bedürfnisses eines Programierers anfingen.</para>

<para>Dies ist immternoch der Grund, warum die meisten freien Software
Projekte anfangen, mitlerweile aber weniger als 1997, als Raymond
diese Worte schrieb. Heute haben wir das Phenomen, dass Organizationen
-auch profit orientierte Firmen-große zentral organisierte Open Source
Projekte von Grund auf anfangen. Der einzelne Programierer, der um ein
lokales Problem zu lösen, ein wenig Code heraus haut und daann 
feststellt, dass das Ergebniss eine breitere Anwendbarkeit hat, ist
immernoch die Quelle vieler freier Software, es ist aber nicht die
einzige Geschicht.</para>

<para>Der Punkt den Raymond macht ist aber immernoch Aufschlussreich.
Die notwendige Bedingung ist, dass die Produzenten der Software ein
direktes Interesse an seinen Erfolg haben, denn Sie benutzen es
selbst. Wenn die Software nicht das macht was es machen soll, wird
die Person oder Organization die sie produziert, die Unzufriedenheit
bei der täglichen Arbeit spüren. Das OpenAdaper Projekt zum Beispiel
(<ulink url="http://www.openadapter.org/"/>), welches von der 
investment Bank Dresdner Kleinwort Wasserstein als open source 
framework zur Integration unterschiedlicher finanzieller 
Informationssysteme gestartet wurde, kann wohl kaum als Bedürfniss
eines eines einzelnen Programierers bezeichnet werden. Sondern als
institutionelles Bedürfniss. Dieses Bedürfniss, entsteht aber direkt
aus den Erfahrungen der Institution und seine Pratner, wenn also die
Software daran scheitert, ihre Arbeit zu erleichtern, werden sie es
wissen. Aus diesem Arangement entsteht gute Software, da Rückmeldungen
an der richtigen Stelle ankommen. Die Software wird nicht geschrieben
um an jemand verkauft zu werden, also können sie sich auf <emphasis>
ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben um ihre
<emphasis>eigene</emphasis> Probleme zu lösen um es dann mit allen zu
teilen, so ählnich als wäre das Problem eine Krankheit und die
Software die entsprechende Medizin, dessen Verbreitung, dazu gedacht
ist, die Epidemie auszurotten.</para>

<para>In diesem Kapitel geht es um die Frage, wie man ein neues
freies Software Projekt der Welt vorstellt, viele seiner Empfehlungen
könnten sich aber einer gesundheits Organization die Medizin
verteilt, bekannt vorkommen. Die Ziele sind sich sehr ähnlich: Man
will klarstellen was die Medizin macht, es in die Hände der richtigen
Leute bringen, und sicherstellen, dass diejenigen die es erhalten,
wissen damit umzigehen. Bei der freien Software aber, will man auch
ein paar der Empfänger dazu bewegen sich an der fortwährenden
Forschungsarbeit, zur verbesserung der Medizin, zu beteiligen.</para>

<para>Die verbreitung freier Software ist eine zweifaltige
Aufgabe. Die Software muss sowohl Nutzer als auch Entwickler anziehen.
Diese beiden Erfordernisse stehen einander nicht zwangsläufig
gegenüber, aber sie machen die anfänglichen Präsentation des Projekts,
etwas komplexer. Manche Informationen sind für beide Gruppen nützlich,
manche nur für die eine oder andere. Beide Arten der Information
sollten das Prizip der skalierten Präsentation verfolgen; was soviel
heißt wie, der Detailgrad der in jeder Phase präsentiert wird, sich
genau deken sollte, mit der Menge an Zeit und der Anstrenung die vom
Leser aufgebrauch wird. Eine größere Anstrenung sollt auch immer eine
größere Belohnung zur Folge haben. In dem Fall, dass beide nicht eng
mit einander korrelieren, werden die Leser schnell die Hoffnung auf
geben und aufhören ihre Zeit zu investieren.</para>

<para>Die Folgerung hierraus ist, dass <emphasis>das Erscheinungsbild
Zählt</emphasis>. Insbesondere fällt es Programmierern schwehr, dies
zu glauben. Ihre Liebe zum Wesentlichen gegenüber dem Äußeren geht
fast bis zum Punkt der professionellen Stolz. Die meisten von uns
könne mit einem Blick erkennen ob eine seite eilig zusammengebastelt
wurde oder ob man sich enrnsthafte Gedanken darüber gemacht hat. Dies
ist das Erste stück an Information welches Ihr Projekt nach außen
gibt und den Endruck den es vermittelt wird sich auf den Rest des
Projekts übertragen.</para>

<para>Desshalb sollten Sie daran denken, dass obwohl es sich in diesem
Kapitel um Inhaltliches dreht, das Erscheinungsbild auch zählt. Da die
Seite für zwei Besuchertypen funktionieren muss-Nutzer und Entwickler-,
muss besonders auf Klarheit und Richtung geachtet werde. Auch wenn hier
nicht der richtige Ort ist für eine allgemeine Abhandlung über Web
Design, gibt es ein Prinzip, welches wichtig genung ist um erwähnt zu
werden, insbesondere wenn die Seite mehrere(falls Überlappende)
Zielgruppen ansprechen soll: Besucher sollten eine grobe Vorstellung
davon haben, wo ein Link hinführt bevor sie darauf klicken. Es sollte
zum Beispiel offensichtlich sein <emphasis>durch den Anblick eines
Links</emphasis> welches zur Nutzerdokumentation führt, dass es zur
Dokumentation für Benutzer führt, und nicht etwa zur Entwickler
Dokumentation. Beim betreiben eines Projekts, geht es zum Teil darum
Informationen bereitzustellen, aber auch darum ein Gefühl der
Behaglichkeit an zu bieten. Allein schon die Anwesenheit bestimmter
grundsätzlichen Angebote, an den erwarteten Stellen, beruhigt Benutzer
und Entwickler die darüber entscheiden ob sie sich involvieren wollen.
Es sagt ihnen, dass das Projekt seine sachen besammen hat, die Fragen
die gestellt werden vorrausgesehen hat und sich die Mühe gemacht hat
sie auf eine Art zu beantworten die vom Fragenden so wenig Einsatz wie
möglich erfordert. Indem das Projekt diese Aura der Bereitschaft, gibt
es diese Botfaschft nach außen: "Du verschwendest deine Zeit nicht,
wenn du dich beteiligst", was genau die Botschaft ist, die sie hören
müssen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Schaue Dich Vorher Um</title>

<para>Es gibt einen wichtigen Warnung, bevor man ein Open Source
Projekuto anfängt:</para>

<para>Schau dich immer vorher um, ob ein Projekt nicht bereits existiert,
welches das macht was man möchte. Die Wahrscheinlichkeit ist hoch, dass
welches Problem Sie auch lösen wollen, es jemand vor ihnen bereits
gelöst hat. Sollten sie es gelöst haben und ihren Code unter einer freien
Lizens gestellt haben, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Außnahmen: Falls sie ein Projekt als Lehr-Erfahrung 
anfangen wollen, wird Ihnen bereits existierender Code nicht weiterhelfen. 
Vieleicht wissen Sie bereits von vornherein, dass Ihr Problem so 
spezifisch ist, dass es mit sicherheit noch von niemanden gelöst wurde.
Im allgemeinen gibt es aber kein Grund sich nicht umzuschauen und der
Lohn kann beträchtlich sein. Sollten die gewöhlichen Suchmaschinen keine
brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über Open
Source Projekte (mehr zu dieser Seite gibt es später), bei
<ulink url="http://www.sourceforge.net/"/>, oder beim Verzeichniss
für freie Software der Free Software Foundation's 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas finden, dass dem so ähnlich ist, dass es mehr sinn
macht sich an diesem Projekt zu Beteiligen und die fehlende
Funktionalität hinzuzufügen, als selbst von vorne an zu fangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Mit Dem Was Man Hat Anfangen</title>

<para>Sie haben sich umgeschaut, herausgefunden dass es nichts gibt,
welches ihre Anforderungen erfüllt und sich entschieden ein neues
Projekt anzufangen.</para>

<para>Was jetzt?</para>

<para>Das schwehrste beim Beginn eines neune freien Software Projekts
ist, eine private Vision in eine öffentliche zu verwandeln. Sie oder
Ihre Organization mögen sehr wohl wissen was Sie wollen, dieses Ziel
verständlich für die Welt auszudrücken, ist aber eine beträchtliche
Menge Arbeit. Es ist aber unabdingbar, dass Sie sich hierfür die Zeit
nehmen. Sie und die anderen Grümder müssen entscheiden worum es in dem
Projekt wirklich geht, bzw. Sie müssen sowohl über seine Grenzen
entscheiden, -was es <emphasis>nicht</emphasis> machen wird, als auch
was es tatsächlich machen wird- und ein Missions Ziel verfassen. 
Dieser Teil ist für gewöhnlich nicht all zu schwehr, auch wenn es
manchmal unerwähnt gebliebene Annahmen, sogar Meinungsverschiedenheiten
über die Natur des Projekts, aufdecken kann, was nicht schlecht sein
muss: Es ist besser diese jetzt aus dem Weg zu Räumen als später. Der
nächste Schritt, ist das Projekt für den öffentlichen verzehr
aufzubereiten, was im prinzip reine Plackerei ist.</para>

<para>Dies ist desshalb so mühselig, da es hauptächlich darum geht
sachen zu organizieren und zu dokumentieren, die -"jedem" bereits 
bekannt sind, bzw. jedem der bissher beteiligt war. Für diejenigen die
die Arbeit machen, gibt es desshalb keinen direkten Nutzen. Sie
brauchen keine <filename>README</filename> Datei welches einen
Überblick über das Projekt gibt, noch brauchen sie eine Entwurfs
Dokument oder ein Handbuch. Sie brauch kein sorgsam ausgelegten 
Codebaum der mit den zwar informell aber weit verbreiteten Standards
Quellcode Distributionen konform ist. Ihnen ist es egal, wie der
Quellcode aufgebaut ist, sie sind ja bereits daran gewöhnt, und wenn
der Code überhaupt läuft, wissen sie schon wie man ihn benutzt. Es
macht ihnen nicht einmal was aus, wenn die grundsätzlichen Annahmen
über den Aufbau des Projekts nicht dokumentiert werden, denn das
kennen sie auch schon.</para>

<para>Andererseits, brauche Neuankömmlinge diese sachen. Zum glück 
aber nicht alle auf ein mal. Es ist nicht notwendig, dass Sie jede
mögliche Quelle zur verfügung stellen, bevor Sie ein Projekt an die
Öffntlichkeit bringen. In einer perfekten Welt, würde vieleicht
jedes Projekt, mit einem gründlich durchdachten Design Dokument,
einen vollständigen Beriebsanleitung (mit besenderen Hinweisen für
Funktionen die geplant aber noch nicht implementiert sind),
wunderschön aufbereitetem und portablem Code, welches auf jeder
Rechenplatform läuft, usw. In wirklichkeit, wäre es unvertretbar
Zeitaufwendig und überhaupt ist es Arbeit von der man hoffen kann,
dass Freiwillige sie aufnehmen werden, sobald das Projekt 
unterwegs ist.</para>

<para>Was jedoch <emphasis>wirklich</emphasis> notwendig ist, ist dass
genug in die Präsentation investiert wird, so dass Neuankömlinge
an dem Anfangshinderniss der Unbekanntheit vorbeikommen können. Sie
können es sich als den ersten Schritt in bei einem ladevorgang
vorstellen; um das Projekt aus eine Art minimale Aktivierungs Energie
zu bringen. Ich habe schon von dieser Grenze als 
<firstterm>Hacktivierungs Energie</firstterm> gehört: Die Energiemenge 
die notwendig ist, damit ein Neuankömling aufbringen muss bevor sie 
anfängt etwas zurück zu erhalten. Jeh geringer die Haktivierungs
Energie ist, desto besser. Ihre erste Aufgabe ist es die haktivierungs
Energie auf ein Niveau runter zu bringen, welches leute dazu
ermutigt sich zu beteiligen.</para>

<para>Jede der folgenden Unterabschnitte beschreibt einen wichtigen
Aspekt vom Anfang eines neuen Projekts. Sie werden in der groben 
Reihenfolge präsentiert, in der ein neuer Besucher sie begegnen würde. 
Die Reihenfolge in der Sie sie tatsächlich implementieren kann 
natürlich davon abweichen. Sie können sie wie eine Checkliste behandeln.
Am Anfang eines Projekts gehen Sie sie der Reihe nach durch und stellen
Sie sicher, dass Sie jeden Punkt gedekt haben oder zumindest, dass die
potentiellen Folgen Sie nicht stören, sollten Sie einen weg lassen.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Wählen Sie einen Guten Namen</title>

<para>Versetzen Sie sich in die Lage einer Person die gerade erst von
Ihrem Projekt erfahren hat, vieleicht zufällig, bei der Suche nach
einer Software um ein Problem zu lösen. Das erste was ihnen begegnen
wird, ist der Name.</para>

<para>Ein guter Name wird ihr Projekt nicht automatisch erfolgreich
nachen und ein schlechter bedeutet für ihn nicht den Untergang;
obwohl ein <emphasis>wirklich</emphasis> schlechter Name das
warscheinlich erreichen könnte aber wir gehen von der Annahmen aus,
dass keiner hier versucht sein Projekt aktiv zu Sabotieren. Ein 
schlechter Name kann jedoch die Aufnahme eines Projekts verlangsamen
keann, entweder weil Leute es nicht ernst nehmen oder einfach nur,
weil Sie schwierigkeiten haben sich daran zu errinnern.</para>

<para>Ein guter Name:

<itemizedlist>
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das
	Projekt macht oder ist zumindest auf eine offenstichliche
	Art verwandt, so dass wenn man den Namen kennt, und weiss was
	das Projekt macht, es nacher leicht ist, sich an den Name zu
	erinnern.</para>
  </listitem>
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
	Tatsache herum, dass Englisch zu standard Sprache des Internet
	geworden ist: "Einfach zu behalten." bedeutet in diesem Fall
	"Einfach zu behalten, für jemand der Englisch lesen kann".
	Namen die zum Beispiel, Wortspiele die von der Aussprache
	eines Einheimischen abhängig sind, werden vielen Menschen
	deren erste Sprache nicht Englisch ist, unklar sein. Wenn das
	Wortspiel besonders verlockend und einprägsam ist, kann es
	das wert sein; denken Sie aber daran, dass viele die den Namen
	sehen nicht das selbe heraushören werden wie jemand dessen
	Muttersprache Englisch ist.</para>
  </listitem>
  <listitem><para>Ist nicht der gleiche wie der eines Anderen und 
	verletzt keine Markenrechte. Was sowohl hölflich ist, als auch
	guter Rechtssinn. Sie wollen keine verwirrung über die
	Identität entstehen lassen. Es ist schon schwierig genug,
	alles was im Netz verfügbar ist zu verfolgen, ohne das auchnoch
	meherer Sachen den gleichen Namen tragen.</para>

	<para>Die vorher bei <xref linkend="look-around"/> erwähnten, 
	Quellen können Ihnen dabei helfen, herauszufinden ob ein anderes
	Projekt beriets den Namen trägt an den Sie denken. Kostenfreie
	Suchen nach Markenzeichen sind bei <ulink 
	url="http://www.nameprotect.org/"/> und <ulink 
	url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
  <listitem><para>Wenn möglich, als domain Name in der
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem> top-level Domainen verfügbar.
	Sie sollten sich einen aussuchen, warscheinlich
	<systemitem>.org</systemitem>, um als offizielle Seite des
	Projekts zu bewerben; die anderen beiden sollten dorthin
	weiterleiten und dienen einfach nur dazu dienen, andere daran
	zu hindern, um den Namen des Projekts verwirrung zu stiften.
	Selbst wenn Sie vor haben das Projekt auf eine andere Seite zu
	hosten (siehe <xref linkend="starting-with-canned-hosting"/>),
	können Sie immernoch die Projekt-spezifischen Domains
	registrieren und sie auf die Hosting Seite weiterleiten lassen.
	Es hilft dem Nutzer ungemein sich an eine einfache URL erinnern
	zu können.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Formuliere ein Klares Missions Ziel</title>

<para>Sobald sie die Seite des Projekts gefunden haben, werden sie als
nächstes nach einer schnellen Beschreibung suchen, die Formulierung
des Mission Ziels um (innerhalb von 30 Sekunden) entscheiden zu können,
ob sie Interesse daran haben mehr zu erfahren. Diese Formulierung
sollte auf der ersten Seite besonders Herausragen, vorzugsweise, direkt
unterhalb vom Namen des Projekts.</para>

<para>Die Formulierung des Missionsziels sollte anschaulich sein,
grenzen setzen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Als Gemeinschaft die international führende Office 
	Lösung die in allen wichtigen Umgebungen läuft und
	den Zugriff auf alle Funktionalitäten und Daten durch 
	auf offene Komponenten basierende Schnittellen und ein auf
	XML basierendes datei Format.</emphasis></para>
  </blockquote>

<para>Mit nur wenigen Worten, haben sie alle wichtigen Punkte
getroffen, zum größten Teil in dem sie sich auf bereits vorhandenes
Wissen des Lesers beziehen. Indem sie "<emphasis>Als Gemeinschaft
</emphasis>" sagen, signalisieren sie, dass keine einzelne Firma die
Entwicklung dominieren wird; "<emphasis>international</emphasis>"
bedeutet, dass die Software es Menschen erlauben wird, in mehereren
Sprachen zu arbeiten; "<emphasis>alle wichtigen Umgebungen</emphasis>"
bedeutet, auf Unix, Macintosh, und Windows portierbar. Der Rest
signalisiert, dass offene Schnittstellen und leicht verständliche
Dateiformate ein wichtiger Teil ihres Ziels ist. Sie sagen nicht
frei heraus, dass sie versuchen eine freie Alternative zu Microsoft
Office zu sein, die meisten Menschen werden aber zwischen den Zeilen
lesen können. Auch wenn diese Formulierung auf den ersten Blick weit
gefasst aussieht, ist es tatsächlich ziemlich begrenzt: Die Worte
"<emphasis>Office Lösung</emphasis>" bedeuten etwas ganz bestimmtes
für diejenigen die mit solcher Software vertraut sind. Das angenommene
vorhergehende Wissen des Lesers (in diesem Fall warscheinlich durch
MS Office) wird dafür verwendet, die Formulierung kurz zu halte.</para>

<para>Die Natur der Formulierung des Missionsziels hängt teilweise
davon ab, wer sie schreibt, nicht nur davon welche Software sie
beschreit. Es macht zum Beispiel sinn für Open Office die Worte
"<emphasis>Als Gemeinschaft</emphasis>" zu benutzen, denn das Projekt
wurde gestartet von und wird immernoch zum größten Teil betrieben durch
Sun Microsystems. Indem sie diese Worte mit aufnehmen weist Sun auf
seine sensibilität hin den Sorgen gegenüber, dass Sie unter umständen
versuchen könnten den entwicklunsprozess zu dominieren. Bei einer
solchen angelegenheit, kann allein schon der Hinweis auf das
<emphasis>potentielle</emphasis> Problem sehr dabei helfen es ganz und
gar zu vermeiden. Andererseits brauchen Projekte die nicht durch einer
einzigen Firma Unterstützt werden keine solche Sprache; denn 
schließlich ist die Entwicklung durch eine Gemeinschaft, die Norm es
gibt also für gewöhnlich keinen Grund es als Teil der Mission
aufzulisten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Sagen Sie dass das Projekt Frei ist</title>

<para>Die jenigen die nachdem sie die Missionzielen gelesen haben noch
interesiert sind, werden als nächstes mehr Details sehen wollen,
vieleicht eine Nutzer oder Entwickler Dokumentation und letztendlich
werden sie etwas herunterladen wollen. Vor all dem müssen sie sich
aber sicher sein, dass es Open Source ist.</para>

<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wäre aber überrascht wie viele Projekte es vergessen.
Ich bin schon an Projekten vorbei gekommen, deren Hauptseite es nicht
nur versäumten zu sagen, unter welcher Lizens ihre Software
distributiert war, sondern nicht einmal sagte, dass es sich um freie
Software handelte. Manchmal wurde das entscheidende Informationsstück
auf die download Seite, der Entwickler Seite oder irgend eine andere
Seite die ein klick mehr erforderte gesetzt. In extremen Fällen, wurde
die Lizens überhaupt nicht auf der Seite angegeben-die einzige
möglichkeit es herauszufinden, war es herunter zu laden und rein
zu schauen.</para>

<para>Mache nicht diesen Fehler. Solch ein Versäumnis kann zum Verlust
vieler potentieller Entwickler und Nutzer führen. Sagen Sie gleich
vorne, direkt unterhalb der Missionsziele, dass das Projekt "free 
software" oder "open source software" ist, und geben sie die genaue
Lizens an. Eine schnelle Anleitung zur auswahl einer Lizens befintet
sich im Abschnitt <xref linkend="license-quickstart"/><phrase
output="printed">später in diesem Kapitel</phrase>, und Lizensfragen
werden ausführlich im <xref linkend="legal"/> behandelt.</para>

<para>Bis hier hin, hat unsere hypotetische Besuchering sich
entschieden-warscheinlich innerhalb einer Minute oder weniger-, dass
sie interesiert ist, sagen wir, mindestens weiter fünf Minuten in
in diesem Projekt zu investieren. Der nächste Abschnitt beschreibt was
ihr innerhalb dieser fünf Minuten begegnen sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Liste der Funktionen und Anforderungen</title>

<para>Es sollte eine kurze Liste der Funktionen die von der Software
unterstüzt wird geben (Wenn etwas noch nicht fertig ist, können Sie es
immernoch auf die Liste setzen, stellen Sie aber "<emphasis>geplannt
</emphasis>" oder "<emphasis>in&nbsp;arbeit</emphasis>" daneben), und
die Art von Computer Umgebung die benötigt wird, um die Software zu
betreiben. Stelle Sie sich die Liste der Funktionen/Anforderungen als
das vor, was Sie jemandem geben würden der nach einer kurzen 
Zusammenfassung der Software fragt. Oft ist es einfach nur eine
logische erweiterung der Missionsziele. Die Missionsziele könnten zum
Beispiel folgendermaßen formuliert sein:</para>

  <blockquote>
  <para><emphasis>Die Erstellung eines volltext indizieres und 
	Suchmaschine, mit einer reichhaltigen Schnittstelle für
	Programmierer, die suchdienste für große Sammlungen an
	Text Dateien anbieten wollen.</emphasis></para>
  </blockquote>

<para>Die Liste der Funktionen und Anforderungen würde folgende
Details angeben, um die Missionsziele klarer zu machen:</para>

  <blockquote>
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Suche nach Wörter oder Phrasen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Unscharfe Suche</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Incrementelle aktuelisierung
                der Indizierungen</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplannt) Indizierung entfernter 
	Webseiten</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Genug Festplatten Speicher für die
	Indizierung (ca. 2x Menge der Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Durch diese Informationen, können Leser schnell ein gefühl
dafür entwickeln, ob diese Software irgend eine Hoffnung hat, für sie
zu Funktionieren und sie können sich auch überlegen, ob sie sich als
Entwickler beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Entwicklungsfortschritt</title>

<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten, wollen sie wissen wie weit der Abstand zwischen dem
Versprechen des Projekts und der derzeitigen Wirklichkeit ist. Bei
ausgereiften Projekten, wollen sie wissen, wie aktive es gewartet wird
wie oft neue Versionen veröffentlicht werden, wie schnell man
erwarten kann, dass es auf bug Meldungen regieret.</para>

<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung bereit stellen, welches die näheren Ziele
und den aktuellen Bedarf des Projekts auflistet(es könnte z.B. nach
Entwickler mit einer bestimmten Fachkentniss suchen). Die Seite kann
auch eine historie vergangener Versionen, mit listen von Funktionen,
damit Besucher sich ein Bild davon machen können, wie das Projekt
"fortschritt" definiert und wie schnell es nach dieser definition
fortschritt macht.</para>

<para>Fürchten Sie sich nicht davor unvorbereitet auszusehen und
geben Sie der Versuchung den Entwicklungsfortschritt besser dar zu
stellen als er ist, nicht nach. Jeder weiss, das sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Dies ist Alpha
Software und hat bekannte Fehler. Sie läuft und funktioniert zumindest
manchmal aber benutzen Sie es auf eigene gefahr". Solch eine Sprache
wird nicht die sorte Entwickler verschreken, die Sie zu dieser Zeit
brauchen. Was Nutzer angeht: Einer der schlimmsten Felher die ein
Projekt machen kann, ist Nutzer anzulocken, für die die Software noch
nicht bereit ist. Ein Ruf für Instabilität oder Fehleranfälligkeit,
ist, einmal erlangt, nur schwehr los zu werden. Konservativ zu bleiben
zahlt sich auf lange sicht aus; es ist besser wenn die Software
<emphasis>stabiler</emphasis> läuft als erwartet läuft, als weniger
und angenehme Überraschungen produzieren die beste Mundpropaganda.
</para>

<sidebar id="alpha-and-beta">
  <title>Alpha und Beta</title>
  <para>Der Begriff<firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit dem Benutzer echte Arbeit erledigen können,
  welche alle geplante Funktionen hat, aber auch bekannte Feler. Der
  vorranginge Grund für alpha Software ist um Rückmeldungen zu 
  erhalten, damit die Entwickler wissen woran sie arbeiten sollen. Die
  nächste Stufe, <firstterm>beta</firstterm> bedeutet, dass in der
  Software all ernsten Fehler behoben sind, aber noch nicht genug
  getested wurde, um als fertige Version zu gelten. Der Sinn von beta
  Software ist entweder zur fertigen Version zu werden, wenn keine
  Fehler gefunden werden oder damit detailierte Rückmeldungen an die
  Entwickler zu geben um die fertige Version möglichst schnell fertig
  zu stellen. Der Unterschied zwischen alpha und beta ist zum größten
  Teil eine sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<para>Die Software sollte als Quellcode in standart Formaten 
herunterladbar sein. Wenn ein Projekt noch am Anfang ist, sind
binär(ausführbare) Dateien noch nicht notwendig, es sei denn der
build Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten leute einen menge Arbeit wäre die Software
überhaupt zum laufen zu bringen. (Wenn das allerdings der Fall ist,
wird das Projekt es eh schwehr haben Entwickler an zu locken.</para>

<para>Die Verbreitungsmethode sollte so bequem, standardkonform und
so wenig Overhead wie möglich haben. Wenn Sie eine Krankheit 
ausrotten wollten, würden Sie nicht die Medizin derart verbreiten,
dass eine unüblich Spritzengröße bräuchte. Ebenso sollte Software
die üblichen build und installations Methoden befolgen, denn je
mehr die Software von diesen Standards abweicht, desto größer ist
das Potential Benutzer und Entwickler aufgeben werden und verwirrt
weg gehen.</para>

<para>Das hört sich sehr offensichtlich an, aber viele Projekte machen
sich sehr lange nicht diese Mühe und sagen sich, dass sie es jeder
Zeit machen könnten: <emphasis>"Wir erledigen den Kram dann wenn der
Code näher an der Fertigstellung ist".</emphasis> Was sie dabei nicht
erkennen, ist dass indem sie die langweilige Arbeit, die 
Fertigstellung der Installationvorgänge, hinauschieben, sie auch
die Fertigstellung des Codes verlangsamen-da sie Enwickler
entmutigen, die ansonsten zum Code beigetragen hätten. Das
heimtückischste dabei ist, dass sie nicht <emphasis>wissen
</emphasis>, dass sie all diese Entwickler verlieren, da der Vorgang
eine Anhäufung nicht-ereignisse ist: Jemand geht auf die Webseite, 
lädt die Software herunter, versucht sie zu builden, scheitert, gibt
auf und geht weg. Wer wird jemals davon was wissen, außer die Person
selbst? Keiner der am Projekt arbeitet, wird bemerken, dass jemandem
Interesse und Wohlwollen stumm verschwendet wurde.</para>

<para>Langweilige Arbeit, mit einem hohen Gewinn sollte immer früh
erledigt werden und die Einstiegshürde zu einem Projekt, durch
gutes Packaging zahlt sich vielfach zurück.</para>

<para>Wenn Sie eine herrunterladbare Version herausgeben, ist es
wichtig, dass Sie Ihr eine eindeutige Versionsnummer geben, damit
Leute beide Versionen unterscheiden können und wissen welche auf
die andere Folgt. Eine ausführliche Diskussion zu versions Nummern
finden Sie in <xref linkend="release-numbering"/>, und Details zur
Standardisierung eines der build und Installationsvorgänge werden in
<xref linkend="packaging"/><phrase output="printed">, sowie
in <xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Zugriff zur Versions Kontrolle und dem Bug Tracker</title>

<para>Quellcode Packete herunter zu laden reicht für diejenigen aus,
die die Software lediglich installieren und benutzen wollen, aber es
reicht nicht für diejenigen die die Software debugen und neue
Funktionen hinzufügen wollen. Nächtliche Quellcode snapshots können
helfen, sind aber immer noch nicht fein granuliert genug für eine
gedeihende Entwicklergemeinschaft. Diese Leute brauchen echtzeit Zugriff
auf den neusten Quellencode und der Weg ihnen dieses zu geben, ist ein
Versions Kontroll System zu benutzen. Das Vorhandensein von anonym
erreichbaren Quellcode welches unter Versionskontrolle liegt ist ein
Zeichen-sowohl für Entwickler wie Benutzer-, dass das Projekt sich
mühe gibt Leute das nötige zu geben, um sich zu beteiligen. Wenn Sie
nicht sofort Versionskontrolle zur Verfügung stellen können, stellen
Sie zumindest ein Schild auf, dass darauf hinweist, dass Sie es bald
vor haben. Infrastruktur für versionskontrolle wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<para>Selbiges gilt für den Bug Tracker des Projekts. Ein Bugtracker
ist nicht nur wichtig auf Grund seiner Nützlichkeit für Entwickler,
sondern auch für die Botschaft die es Beobachter gibt. Für Viele,
ist eine offene Bug Datenbank eines der stärksten Anzeichen, dass ein
Projekt ernst genommen werden sollte. Desweiteren, ist das Projekt um
so besser, je mehr Fehler darin protokoliert wurden. Auch wenn es sich
wiedersprüchlich anhört, sollte man bedenken das die Anzahl der
erfassten Bugs von drei sachen abhängt: die absolute Anzahl der Bugs
in der Software, die Anzahl der Benuzer der Software und wie bequem es
für diese Benutzer ist, neue Bugs einzutragen. Von diesen dreien sind
die letzten beide die wesentlicher als der erste. Jede Software von
einer wesentlichen Größe und Komplexität, enthällt eine grunde
genommen beliebige Anzahl an Bugs, die darauf warten entdeckt zu
werden. Die wirkliche Frage ist, wie gut ist das Projekt darin, diese
Bugs zu erfassen und zu priorizieren? Ein Projekt mit einer großen
und gut gepflegten Bug Datenbank (was so viel heißt wie, dass schnell
auf Bugs reagiert wird, Duplikate vereinigt werden, usw.) macht
desshalb einen besseren Eindruck als ein Projekt ohne Bug Datenbank
oder einer fast leeren Datenbank.</para>

<para>Wenn Ihr Projekt erst anfängt, wird die Bug Datenbank natürlich
nur sehr wenige Bugs enthalten und es gibt nicht viel, was Sie dagegen
machen können. Wenn die Status Siete aber sein junges Alter hervorhebt
und wenn leute die auf die Bug Datenbank schauen sehen können, dass
die Meisten Einträge neulich gemacht wurden, können sie sich 
ausrechnen, dass das Projekt immer noch eine gesunde <emphasis>rate
</emphasis> an Einträgen hat und werden dementsprechend nicht 
übermäßg alarmiert über die niedrige absolute Anzahl an Bugs sein.
</para>

<para>Es sollte auch beachtet werden, dass Bug Tracker oft nicht nur
zur verfolgung von Bugs benutzt werden, sondern auch für 
verbesserungen an der Software, veränderungen an der Dokumentation
ausstehende Aufgaben und weiteres benutzt werden. Weiteres zum
Betrieb eines Bug Trackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> und
<xref linkend="technical-infrastructure"/></phrase>behandelt, also
erde ich hier nicht näher darauf eingehen. Das wichtige aus sicht
der Präsentation ist überhaupt einen Bug Tracker zu <emphasis>haben
</emphasis> und sicher zu stellen, dass er von der haupt Seite auch
sichtbar ist.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Kommunikationsewege</title>

<para>Besucher wollen für gewöhnlich wissen, wie sie die Menschen die
mit dem Projekt involviert sind erreichen können. Stellen SIe die
Addressen von Mailing Listen, Chat Räumen, IRC Channels und andere
Foren von Leuten die mit der Software zu tun haben erreicht werden
können. Stellen Sie klar, dass Sie und die anderen Authoren des 
Projekts auf diese Listen eingetragen sind, damit Leute sehen können,
dass es eine Möglichkeit gibt, an die Entwickler Rückmeldungen geben
zu können. Ihre anwesenheit auf den mailing Listen impliziert nicht
eine Verpflichtung auf alle Fragen zu antworten oder alle Anfragen
für neue Funktionen zu implementieren. Auf lange Sicht, werden die
Meisten eh niemals diesen Foren beitreten aber sie weden Trost darin
finden, zu wissen, dass sie es <emphasis>könnten</emphasis> wenn es
nötig sein sollte.</para>

<para>In den frühen Abschnitten eines Projekts, gibt es keinen Grund
Nutzer und Entwickler Foren zu trennen. Es ist viel besser jeden mit
der mit der Software zu tun hat, zusammen in einem "Raum" reden zu
haben. Unter den Personen die sich früh an einem Projekt beteiligen,
ist die Unterscheidung zwischen Entwickler und Nutzer oft unscharf.
Sofern die Unterscheidung gemacht werden kann, ist das Verhältniss
von Entwickler zu Nutzern für gewöhnlich wesentlich höher in den
frühen Tagen als später. Obwohl Sie nicht annehmen können, dass
jeder der sich früh für das Projekt interesiert ein Programmierer
der an der Software hacken will ist, können Sie annhemen, dass sie
zumindest daran interesiert sind die Diskussionen um die Entwicklung
mit zu verfolgen und ein Gefühl für die Richtung des Projekts zu
bekommen.</para>
   
<para>Da es in diesem Kapitel nur darum geht ein Projekt ins laufen zu
bringen, genügt es zu sagen, dass diese Kommunikations Foren existieren
sollten. Später, in <xref linkend="growth"/><phrase output="printed"> und
<xref linkend="communications"/></phrase>, werden wir untersuchten,
wo und wie man diese Foren aufstekkt, in wie fern Sie unter umständen
Moderation erfordern und wie man Nutzer von Entwickler Foren trennt,
sobald die Zeit kommt, ohne dabei einen unüberwindlichen See
entstehen zu lassen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Developer Guidelines</title>

<para>If someone is considering contributing to the project, she'll
look for developer guidelines.  Developer guidelines are not so much
technical as social: they explain how the developers interact with
each other and with the users, and ultimately how things get
done.</para>

<para>This topic is covered in detail in
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>, but the basic
elements of developer guidelines are:

<itemizedlist>
  <listitem><para>pointers to forums for interaction with other
            developers</para> 
  </listitem>
  <listitem><para>instructions on how to report bugs and submit
            patches</para>
  </listitem>
  <listitem><para>some indication of <emphasis>how</emphasis>
            development is usually done&mdash;is the project a
            benevolent dictatorship, a democracy, or something
            else</para>
  </listitem>
</itemizedlist>

No pejorative sense is intended by "dictatorship", by the way.  It's
perfectly okay to run a tyranny where one particular developer has
veto power over all changes.  Many successful projects work this way.
The important thing is that the project come right out and say so.  A
tyranny pretending to be a democracy will turn people off; a tyranny
that says it's a tyranny will do fine as long as the tyrant is
competent and trusted.</para>
  
<para>See <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
for an example of particularly thorough developer guidelines, or
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> for
broader guidelines that focus more on governance and the spirit of
participation and less on technical matters.</para>

<para>The separate issue of providing a programmer's introduction to
the software is discussed in <xref
linkend="developer-documentation"/><phrase output="printed">
later in this chapter</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Documentation</title>

<para>Documentation is essential.  There needs to be
<emphasis>something</emphasis> for people to read, even if it's
rudimentary and incomplete.  This falls squarely into the "drudgery"
category referred to earlier, and is often the first area where a new
open source projects falls down.  Coming up with a mission statement
and feature list, choosing a license, summarizing development
status&mdash;these are all relatively small tasks, which can be
definitively completed and usually need not be returned to once done.
Documentation, on the other hand, is never really finished, which may
be one reason people sometimes delay starting it at all.</para>

<para>The most insidious thing is that documentation's utility to
those writing it is the reverse of its utility to those who will read
it.  The most important documentation for initial users is the basics:
how to quickly set up the software, an overview of how it works,
perhaps some guides to doing common tasks.  Yet these are exactly the
things the <emphasis>writers</emphasis> of the documentation know all
too well&mdash;so well that it can be difficult for them to see
things from the reader's point of view, and to laboriously spell out
the steps that (to the writers) seem so obvious as to be unworthy of
mention.</para>

<para>There's no magic solution to this problem.  Someone just needs
to sit down and write the stuff, and then run it by typical new users
to test its quality.  Use a simple, easy-to-edit format such as HTML,
plain text, Texinfo, or some variant of XML&mdash;something that's
convenient for lightweight, quick improvements on the spur of the
moment.  This is not only to remove any overhead that might impede the
original writers from making incremental improvements, but also for
those who join the project later and want to work on the
documentation.</para>

<para>One way to ensure basic initial documentation gets done is to
limit its scope in advance.  That way, writing it at least won't feel
like an open-ended task.  A good rule of thumb is that it should meet
the following minimal criteria:</para>

<itemizedlist>
  <listitem><para>Tell the reader clearly how much technical
            expertise they're expected to have.</para>
  </listitem>
  <listitem><para>Describe clearly and thoroughly how to set up
            the software, and somewhere near the beginning of the
            documentation, tell the user how to run some sort of
            diagnostic test or simple command to confirm that
            they've set things up correctly.  Startup
            documentation is in some ways more important than
            actual usage documentation.  The more effort someone has
            invested in installing and getting started with the
            software, the more persistent she'll be in figuring out
            advanced functionality that's not well-documented.
            When people abandon, they abandon early; therefore,
            it's the earliest stages, like installation, that need
            the most support.</para>
  </listitem>
  <listitem><para>Give one tutorial-style example of how to do a
            common task.  Obviously, many examples for many tasks
            would be even better, but if time is limited, pick one
            task and walk through it thoroughly.  Once someone
            sees that the software <emphasis>can</emphasis> be
            used for one thing, they'll start to explore what else
            it can do on their own&mdash;and, if you're lucky,
            start filling in the documentation themselves.  Which
            brings us to the next point...</para>
  </listitem>
  <listitem><para>Label the areas where the documentation is known
            to be incomplete.  By showing the readers that you are
            aware of its deficiencies, you align yourself with
            their point of view.  Your empathy reassures them that
            they don't face a struggle to convince the project of
            what's important.  These labels needn't represent
            promises to fill in the gaps by any particular date
           &mdash;it's equally legitimate to treat them as open
            requests for volunteer help.</para>
  </listitem>
</itemizedlist>

<para>The last point is of wider importance, actually, and can be
applied to the entire project, not just the documentation.  An
accurate accounting of known deficiencies is the norm in the open
source world.  You don't have to exaggerate the project's
shortcomings, just identify them scrupulously and dispassionately when
the context calls for it (whether in the documentation, in the bug
tracking database, or on a mailing list discussion).  No one will
treat this as defeatism on the part of the project, nor as a
commitment to solve the problems by a certain date, unless the project
makes such a commitment explicitly.  Since anyone who uses the
software will discover the deficiencies for themselves, it's much
better for them to be psychologically prepared&mdash;then the
project will look like it has a solid knowledge of how it's
doing.</para>

<sidebar id="starting-a-faq">
  <title>Maintaining a FAQ</title>

  <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  document) can be one of the best investments a project makes in
  terms of educational payoff.  FAQs are highly tuned to the questions
  users and developers actually ask&mdash;as opposed to the questions
  you might have <emphasis>expected</emphasis> them to ask&mdash;and
  therefore, a well-maintained FAQ tends to give those who consult it
  exactly what they're looking for.  The FAQ is often the first place
  users look when they encounter a problem, often even in preference
  to the official manual, and it's probably the document in your
  project most likely to be linked to from other sites.</para>

  <para>Unfortunately, you cannot make the FAQ at the start of the
  project.  Good FAQs are not written, they are grown.  They are by
  definition reactive documents, evolving over time in response to
  people's day-to-day usage of the software.  Since it's impossible to
  correctly anticipate the questions people will ask, it is impossible
  to sit down and write a useful FAQ from scratch.</para>

  <para>Therefore, don't waste your time trying to.  You may, however,
  find it useful to set up a mostly blank FAQ template, so there will
  be an obvious place for people to contribute questions and answers
  after the project is under way.  At this stage, the most important
  property is not completeness, but convenience: if the FAQ is easy to
  add to, people will add to it.  (Proper FAQ maintenance is a
  non-trivial and intriguing problem, and is discussed more in <xref
  linkend="faq-manager"/><phrase output="printed"> in
  <xref linkend="managing-volunteers"/></phrase>.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Availability of documentation</title>

<para>Documentation should be available from two places: online
(directly from the web site), <emphasis>and</emphasis> in the
downloadable distribution of the software (see
<xref linkend="packaging"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>).  It needs to be
online, in browsable form, because people often read documentation
<emphasis>before</emphasis> downloading software for the first time,
as a way of helping them decide whether to download at all.  But it
should also accompany the software, on the principle that downloading
should supply (i.e., make locally accessible) everything one needs to
use the package.</para>

<para>For online documentation, make sure that there is a link that
brings up the <emphasis>entire</emphasis> documentation in one HTML
page (put a note like "monolithic" or "all-in-one" or "single large
page" next to the link, so people know that it might take a while to
load).  This is useful because people often want to search for a
specific word or phrase across the entire documentation.  Generally,
they already know what they're looking for; they just can't remember
what section it's in.  For such people, nothing is more frustrating
than encountering one HTML page for the table of contents, then a
different page for the introduction, then a different page for
installation instructions, etc.  When the pages are broken up like
that, their browser's search function is useless.  The separate-page
style is useful for those who already know what section they need, or
who want to read the entire documentation from front to back in
sequence.  But this is <emphasis>not</emphasis> the most common way
documentation is accessed.  Far more often, someone who is basically
familiar with the software is coming back to search for a specific
word or phrase.  To fail to provide them with a single, searchable
document would only make their lives harder.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Developer documentation</title>

<para>Developer documentation is written to help programmers
understand the code, so they can repair and extend it.  This is
somewhat different from the <emphasis>developer guidelines</emphasis>
discussed earlier, which are more social than technical.  Developer
guidelines tell programmers how to get along with each other;
developer documentation tells them how to get along with the code
itself.  The two are often packaged together in one document for
convenience (as with the <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> example given
earlier), but they don't have to be.</para>

<para>Although developer documentation can be very helpful, there's no
reason to delay a release to do it.  As long as the original authors
are available (and willing) to answer questions about the code, that's
enough to start with.  In fact, having to answer the same questions
over and over is a common motivation for writing documentation.  But
even before it's written, determined contributors will still manage to
find their way around the code.  The force that drives people to spend
time learning a code base is that the code does something useful for
them.  If people have faith in that, they will take the time to figure
things out; if they don't have that faith, no amount of developer
documentation will get or keep them.</para>

<para>So if you have time to write documentation for only one
audience, write it for users.  All user documentation is, in effect,
developer documentation as well; any programmer who's going to work on
a piece of software will need to be familiar with how to use it.
Later, when you see programmers asking the same questions over and
over, take the time to write up some separate documents just for
them.</para>

<para>Some projects use wikis for their initial documentation, or even
as their primary documentation.  In my experience, this really only
works if the wiki is actively edited by a few people who agree on how
the documentation is to be organized and what sort of "voice" it
should have.  See
<xref linkend="wikis"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for
more.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Example Output and Screenshots</title>

<para>If the project involves a graphical user interface, or if it
produces graphical or otherwise distinctive output, put some samples
up on the project web site.  In the case of interface, this means
screenshots; for output, it might be screenshots or just files.  Both
cater to people's need for instant gratification: a single screenshot
can be more convincing than paragraphs of descriptive text and mailing
list chatter, because a screenshot is inarguable proof that the
software <emphasis>works</emphasis>.  It may be buggy, it may be hard
to install, it may be incompletely documented, but that screenshot is
still proof that if one puts in enough effort, one can get it to
run.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
  <para>Since screenshots can be daunting until you've actually made a
  few, here are basic instructions for making them.  Using the Gimp
  (<ulink url="http://www.gimp.org/"/>), open
  <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
  choose <guimenuitem>Single&nbsp;Window</guimenuitem> or
  <guimenuitem>Whole&nbsp;Screen</guimenuitem>, then click
  <guimenuitem>OK</guimenuitem>.  Now your next mouse click will
  capture the window or screen clicked on as an image in the Gimp.
  Crop and resize the image as necessary, using the instructions at 
  <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>There are many other things you could put on the project web
site, if you have the time, or if for one reason or another they are
especially appropriate: a news page, a project history page, a related
links page, a site-search feature, a donations link, etc.  None of
these are necessities at startup time, but keep them in mind for the
future.</para>

<sect2 id="starting-with-canned-hosting">
<title>Canned Hosting</title>

<para>There are a few sites that provide free hosting and
infrastructure for open source projects: a web area, version control,
a bug tracker, a download area, chat forums, regular backups, etc.
The details vary from site to site, but the same basic services are
offered at all of them.  By using one of these sites, you get a lot
for free; what you give up, obviously, is fine-grained control over
the user experience.  The hosting service decides what software the
site runs, and may control or at least influence the look and feel of
the project's web pages.</para>

<para>See
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for a more
detailed discussion of the advantages and disadvantages of canned
hosting, and a list of sites that offer it.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Choosing a License and Applying It</title>

<para>This section is intended to be a very quick, very rough guide to
choosing a license.  Read <xref linkend="legal"/> to understand
the detailed legal implications of the different licenses, and how the
license you choose can affect people's ability to mix your software
with other free software.</para>

<para>There are a great many free software licenses to choose from.
Most of them we needn't consider here, as they were written to satisfy
the particular legal needs of some corporation or person, and wouldn't
be appropriate for your project.  We will restrict ourselves to just
the most commonly used licenses; in most cases, you will want to
choose one of them.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>The "Do Anything" Licenses</title>

<para>If you're comfortable with your project's code potentially being
used in proprietary programs, then use
an <firstterm>MIT/X-style</firstterm> license.  It is the simplest of
several minimal licenses that do little more than assert nominal
copyright (without actually restricting copying) and specify that the
code comes with no warranty.  See
<xref linkend="license-choosing-mit-x"/> for details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>The GPL</title>

<para>If you don't want your code to be used in proprietary programs,
use the GNU General Public License
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is
probably the most widely recognized free software license in the world
today.  This is in itself a big advantage, since many potential users
and contributors will already be familiar with it, and therefore won't
have to spend extra time to read and understand your license.  See
<xref linkend="license-choosing-gpl"/><phrase output="printed">
in <xref linkend="legal"/></phrase> for details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>How to Apply a License to Your Software</title>

<para>Once you've chosen a license, you should state it on the
project's front page.  You don't need to include the actual text of
the license there; just give the name of the license, and make it link
to the full license text on another page.</para>

<para>This tells the public what license you
<emphasis>intend</emphasis> the software to be released under, but
it's not sufficient for legal purposes.  For that, the software itself
must contain the license.  The standard way to do this is to put the
full license text in a file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>), and then put a short notice at the top
of each source file, naming the copyright date, holder, and license,
and saying where to find the full text of the license.</para>

<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>

<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename>, but that's where it's usually put.  (You
could change the above notice to state that directly.)  This template
also gives a geographical address from which to request a copy of the
license.  Another common method is to give a link to a web page
containing the license.  Just use your judgement and point to wherever
you feel the most permanent copy of the license is maintained, which
might simply be somewhere on your project's web site.  In general, the
notice you put in each source file does not have to look exactly like
the one above, as long as it starts with the same notice of copyright
holder and date, states the name of the license, and makes it clear
where to view the full license.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Setting the Tone</title>

<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  If the
project is being opened up after years of closed, in-house
development, its development processes will change, and you will have
to prepare the existing developers for that change.</para>

<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>

<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive the centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>

<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; for once
established, they will be largely self-perpetuating.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.tigris.org/"/>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Avoid Private Discussions</title>

<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>

<para>Don't do it.</para>

<para>As slow and cumbersome as public discussions can be, they're
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious volunteer would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:

<itemizedlist>
  <listitem>
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be tracking
        silently, gleaning information about the software.</para>
  </listitem>
  <listitem>
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
  </listitem>
  <listitem>
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than one would intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>

<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>

<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>

<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion, and there's
no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Nip Rudeness in the Bud</title>

<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack <emphasis>first</emphasis>, as a
separate issue unto itself, and only afterward move on to the
technical content.</para>

<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>

    <blockquote>
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>

      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
    </blockquote>

<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>

<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practice Conspicuous Code Review</title>

<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>

<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>

<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>

<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>

<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>

<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>

<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="social-infrastructure"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Announcing</title>

<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freshmeat.net/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freshmeat is the place
everyone watches for new project announcements.  You only have to
catch a few eyes there for news of your project to spread by word of
mouth.</para>

<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>

<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>

<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>

<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>

<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>

<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>

<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

