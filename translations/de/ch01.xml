<chapter id="introduction">

<title>Einleitung</title>

<simplesect>

<para>Die meisten Freien Sofawre Projekte Versagen.</para>

<para>Für gewöhnlich hören wir nicht sonderlich viel von 
fehlgeschlagenen Projekten. Nur erfolgreiche Projekte sammeln 
Aufmerksamkeit, und es gibt so viele Open Source Projekte insgesamt
<footnote><para>SourceForge.net, eine beliebte Hosting Seite, hatte
79,225 registrierte Projekts mitte April 2004. Natürlich ist das nicht 
einmal annähernd die gesamte Anzahl freier Software Projekte im 
Internet, sondern lediglich die Menge die Sourceforge alsPlatform 
gewählt haben.</para></footnote> sodas obwohl nur ein Bruchteil
erfolgreich sind, das Ergebniss immernoch eine Menge sichtbarer
Projekte sind. Wir hören auch nicht von den Fehlschlägen, weil 
Versagen kein Ereignis ist. Es gibt keinen einzelnen Zeitpunkt an dem
ein Projekt aufhört realisierbar zu werden, leute gleiten irgendwie
langsam davon und hören auf daran zu arbeiten. Es gibt vieleicht ein
Moment an dem die letzte Änderung gemacht wird, aber diejenigen die
sie durchführen, wissen für gewöhnlich nicht zu dem Zeitpunkt, dass
es die Letzte war. Es gibt nicht einmal eine klare Definition wann
ein Projekt abgelaufen ist. Ist es wenn an einem Projekt seit sechs 
Monaten nicht Aktive gearbeitet wurde? Sobald seine Nutzergemeinde
aufhrt zu wachsen, ohne die Entwicklergemeinde übertroffen zu haben?
Was ist wenn die Entwickler eines Projekts es verlassen, weil sie
gemerkt haben das sie die selbe Arbeit wie ein anderes nur doppelt
machen, und wenn sie sich diesem anderen Projekt anschließen und dann
erweitern um ihre früheren Anstrengungen mit einzubeziehen? Hörte das
erste Projekt auf, oder ist es nur umgezogen?</para>

<para>Auf grund solcher komplexitäten, ist es unmöglich ein genaue 
Ziffer zur Ausfallquote zu geben. Einzelberichte aus über ein 
Jahrzehnt Freier Software, ein wenig Stöbern auf SourceForge.net und
ein wenig Googeln, deuten jedoch alle auf den gleichen Schluss: die
Rate ist extrem hoch, warscheinlich in der Größenordnung von 90%-95%.
Die Zahl wird größer wenn mann überlebende aber nicht vernünftig 
laufende Projekte mit ein bezieht: solche die zwar laufenden Code
prodozieren, aber weder ein angenehmer Aufenthaltsort sind noch
Fortschritte so schnell oder zuverlässig wie sie es könnten.</para>

<para>In diesem Buch geht es darum Versagen zu vermeiden. Es untersucht
nicht nur wie man sachen richtig macht, sondern wie man sachen falsch 
macht, so dass Sie frühzeitig Probleme erkennen und berichtigen können.
Es ist meine hoffnung, dass nachdem Sie es gelesen haben, Sie ein 
Repertoir an Techniken, nicht nur um häufige Stolperfallen zu vermeiden,
sondern auch um mit Wachstum und wartung eines Projekts erfolgreich 
umzugehen, haben werden. Erfolg ist kein Nullsummenspiel, und in diesem
Buch geht es nicht ums gewinnen oder darum der Konkurenz vorraus zu 
sein. Tatsächlich ist ein wichtiger Teil beim betreiben eines Open 
Source Projekts die reibungslose Zusammenarbeit mit anderen, verwandten
Projekten. Auf lange Sicht betrachtet, trägt jedes erfolgreiche Open
Source Projekt zu dem Wohl des Körpers der weltweiten Freien Software.
</para>

</simplesect>

<simplesect>

<para>Es wäre verlockend zu sagen, dass Freie Software Projekte aus den
selben Gründen fehl schlagen wie proprietären Softare Projekte. Freie 
Software hat sicherlich kein Monopol auf unrealistische Anforderungen,
vage Spezifikationen, unzureichende Reorcenverwaltung, zu kurze 
Entwurfsphase, oder irgend eines der anderen Koblode die bereits der
Software Industrie gut bekannt sind. Es gibt einen gewaltigen Körper an
Schriftstücken zu diesem Thema und ich werde sie in diesem Buch nicht
versuchen zu duplizieren. Statt dessen werde ich versuchen die Probleme
die Spezifisch zu Freier Software sind zu beschreiben. Wenn ein Freies
Software Projekt in den Boden gefahren wird dann ist es oft weil die 
Entwickler (oder Manager) nicht die einzigartige Probleme von Open
Source Software zu würdigen wussten, auch wenn sie durchaus auf die 
bekannteren Probleme der closed-source Entwicklung vorbereitet waren.
</para>

<para>Einer der häufigsten Fehler sind unrealistische Erwartungen über
die Vorteile von Open Source selbst. Eine offene Lizens garantiert weder,
dass eine Horde aktiver Entwickler urplötzlich anfangen werden 
freiwillig Zeit in Ihr Projekt zu investieren, noch wird die 
Offenlegung die Krankheiten des Projekts automatisch heilen. Tatsächlich
kann es sogar genau das Gegenteil bewirken: Es kann eine ganze Reihe
neuer komplexitäten, und kann auf kurze sicht <emphasis>mehr</emphasis>
kosten als es winfach im Betrieb zu behalten. Das Projekt zu öffnen,
bedeutet, den Quellcode so um zu strukturieren, dass er für völlig 
Fremde verständlich ist, eine Entwicklungs Seite und Mailing listen auf
zu stellen und oft auch zum erstem mal eine Dokumentation zu schreiben.
All das, ist ein Haufen Arbeit. Und <emphasis>falls</emphasis> 
interesierte Entwickler auftauchen, gibt es die zusätzliche Bürde ihre
Fragen, eine Wiele lang, zu beantworten, vor man eine vor man einen
Nutzen aus ihrer Anwesenheit sieht. Wie es Entwickler Jamie Zawinski
über die Anfangstage des Mozilla Projekts sagte: </para>

    <blockquote>
      <para><emphasis>Open Source funktioniert zwar, aber es ist ganz
	sicherlich kein Allheilmittel. Falls es ein warnende Lehre hier
	gibt, dann die, dass man nicht ein sterbendes Projekt nehmen
	kann, es mit dem magischen Elfenstaub des "Open Source" 
	bestreuen kann und erwarten, dass alles auf ein mal magisch 
	funktioniert. Die Angelegenheiten sind nicht so einfach.
      </emphasis></para>

      <para>(aus <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>Ein verwandter Fehler ist an der Aufmachung und Packaging zu 
knausern, in der Annahme, dass diese sachen immernoch später, sobald
das Projekt unterwegs ist, gemacht werden können. Aufmachung und
Packaging beinhalten eine weite Reihe an Aufgaben, die sich alle darum
drehen die Einstiegshürden niedriger zu legen. Das Projekt für nicht
Eingeweihte einladend zu machen bedeutet eine Nutzer und Entwickler
Anleitung zu schreiben, eine Projektseite aufzustellen die für 
Neuankömmlinge informativ ist, so viel der Kompalierungs und 
Instalations Vorgänge der software zu automatisieren, usw. Viele
Entwickler behandeln diese Aufgaben leider so als wären sie nur von
sekundärer Wichtigkeit zu dem Quellcode selbst. Es gibt hierfür ein 
paar Gründe. Erstens, kann es sich nach Fleißarbeit anfühlen, weil die
Vorteile zumeist nur für diejenige sichtbar ist die am wenigsten mit dem
Projekt zu tun haben und umgekehrt. Schließlich brauchen diejenigen die
beireits mit dem Projekt vertraut sind das Packaging nicht unbedingt.
Sie wissen bereits wie man die Software installiert, administriert und
benutzt, schließlich haben sie es ja geschrieben. Zwietens, sind die
Fähigkeiten die Aufmachung und Packaging vernünftig zu machen 
unterschiedlich zu denen die fürs Quellcode schreiben benötigt werden. 
Menschen neigen dazu sich auf das zu konzentrieren was sie gut können,
selbst wenn es für das Projekt besser wäre ein wenig Zeit in etwas zu
investieren, was ihnen weniger passt. <xref
linkend="getting-started"/> Behandelt Aufmachung und Packaging im 
Detail, und erklärt warum es entscheidend ist, dass sie gleich vom 
Anfang des Projekts an eine Priorität sein sollten.</para>

<para>Der nächste Trugschluss ist das bei Freier Software wenig bis
gar kein Projektmanagement benötigt wird, bzw umgekehrt, dass die
selben management Verfahren die für die Entwicklung im Betrieb
benuzt werden, genau so gut auf einem Open Source Projekt
Anwendbar sind. Die Verwaltung ist in einem Open Source Projekt,
nicht immer sonderlich sichtbar, aber bei erfolgreichen Projekten
geschied sie in der einen oder anderen Form im Hintergrund. Ein
kleines Gedankenexperiment reicht um zu zeigen warum. Ein Open Source
Projekt besteht aus einer zufällig zusammengewürfeltem Haufen
Programierer - die an und für sich schon ein notorische eigensinnige
Gruppe - die sich warscheinlich noch nie begegnet sind, und von denen
jeder unter umständen verschieden eigene persönliche Ziele, bei der
Arbeit am Projekt verfolgen. Der Gedankenexperiment ist einfach
derjenige, sich vorzustellen was mit einer solchen Gruppe passieren
würde, <emphasis>ohne</emphasis> eine Verwaltung. Wenn man Wunder
ausschließt, würden sie sehr schnell außeinander driften. Auch wenn
wir es uns anders wünschen, laufen die sachen nicht einfach von
selbst. Die Verwaltung aber, auch wenn sie ziemlich aktiv ist, ist
zumeist informell, subtil und unauffällig. Das einzige was die
Entwickler zusammenhällt ist, dass sie mehr zusammen erreichen
können, als jeder für sich. Desshalb muss die Aufgabe einer
Verwaltung größtenteils sein, dass sie dies weiterhin glauben,
indem sie standarts für kommunikation auferlegt, indem sie dafür
sorgt, dass brauchbare Entwickler nicht auf grund persönlicher 
Eigenheiten an den Rand gedrängt werden, und allgemein dafür sorgen,
dass das Projekt ein Ort ist an dem Entwickler zurückkeheren wollen.
Bestimmte techniken um dies zu erreichen, werden durchweg im Buch
behandelt.</para>

<para>Zuletzt, gibt es noch die generelle Problem Kategorie die man
"Versagen kultureller Navigation" nennen könnte. Vor zehn jahren,
selbst vor fünf, wäre es vorschnell gewesen, von einer globalen Kultur
der freien Software zu reden, jetzt aber nicht mehr. Eine erkennbare
Kultur ist langsam aufgetaucht, und obwohl sie sicherlich nicht
monolitisch ist - sie ist mindesten so anfällig für interne 
Meinungsverschiedenheiten und Parteigeist wie jede geographisch
gebundene Kultur - hat sie doch einen im grunde genommen 
beständigen Kern. Die meisten erfolgreichen Open Source Projekte,
weisen einen alle oder zumindest einen großen Teil der 
Merkmale dieses Kerns auf. Sie belohnen bestimmte verhaltensweisen
und bestrafen andere; sie schaffen eine Atmosphäre, welches ungeplante
Teilnahme anregt, manchmal zu kosten zentraler Koordination; Sie haben
Konzepte von Unhölflichkeit und Hölflichkeit, die von den anderswo
vorherschenden erheblich abweichen können. Am wichtigsten, erfahrene
Teilnehmer haben für gewöhnlich diese Standards verinerlicht, so
dass sie einen groben Konsens über das zu erwartenden Benehmne teilen. 
Nicht erfolgreiche Projekte weichen für gewöhnlich von diesem Kern 
wesentlich ab, obgleich unbeabsichtigt, und haben oft keinen Konsens,
was eine angemessenes Grundbenehmen ausmacht. Das hat zur folge, dass
sobald Probleme auftreten, sich die Situation schnell verschlechtern
kann, da den Teilnehmern eine bereits etablierter Grundbestand
kultureller Reflexe, auf die sie zurück fallen können, fehlt.</para>

<para>Dieses Buch ist ein praktischer Führer, nicht eine 
anthropologische Studie oder Historie. Grundgentnisse über die 
Herkunft der freien software Kultur ist dennoch, eine erforderliche
Grundlage für jeden praktischen Ratschlag. Eine Person die die
Kultur versteht, kann lang und weit in der Open Source welt reisen,
viele lokale variationen von Gebräuchen und Dialekten begegnen und
trotzdem in der lage sein, sich überall komfortabel und effektiv zu
beteiligen. Im gegensatz dazu, wird eine Person die nicht die Kultur
versteht, die Organizations- und Beteiligungsvorgänge in einem
Projekt als schwierig und voller überaschungen empfinden. Da sich
die Anzahl der Menschen die freie Software entwickeln immernoch
stark am ansteigen ist, gibt es viele in der letzten Kategorie-diese
sind zum größten Teil eine Kultur neulich Eingewanderter und wird es
auch eine weile bleiben. Wenn Sie denken Sie könnten vieleicht eine
von ihnen sein, stellt Ihnen der nächste Abschnitt einen Hintergrund
für spätere Diskussionen, sowohl im Buch als auch im Internet, zur
verfügung. (Wenn Sie andererseits bereits eine Weile lang mit Open
Source arbeiten, werden Sie unter Umständen bereits eine Menge seiner
Geschichte kennen, können Sie den nächsten Abschnitt ruhig
überspringen.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>Geschichte</title>

<para>Software mit einander zu teilen wird schon seit dem es Software 
gibt, gemacht. In den Anfangstagen der Computer, waren Hersteller der
Meinung, dass Wettbewerbsvorteile, vor allem durch inovationen in der
Hardware zu erreichen waren, und schenkten der Software als geschäfts-
vorteil, wenig Aufmerksamkeit. Viele Kunden dieser frühen Maschinen
waren Wissenschaftler oder Techniker, die in der lage waren die
Software die mit der Machine selbst ausgeliefert wurde auch selber zu
modifizieren und zu erweitern. Kunden verteilten manchmal ihre Patches
nicht nur zurück an den Hersteller, sondern auch an andere Besitzer
ähnlicher Machinen. Die Hersteller duldeten dies und ermutigten sogar
oft dazu: aus ihrer Sicht, machten verbesserungen an der Software, egal
aus welcher Quelle, ihre Machine attraktiver für andere potenzielle
Kunden.</para>

<para>Obwohl diese frühe Periode in vielerlei Hinsicht der heutigen
freien Software Kultur ähnelte, unterschied es sich in zwei 
wesentlichen Gesichtspunkten. Erstens, gab es noch wenig 
standardization der Hardware - es war eine Zeit florrierender 
Innovation im Bereich Computer Design, aber die Vielfalt der
Computer Architekturen bedeutete, dass alles inkompatible mit
allem anderen war. Dessalb würde Software die für eine Maschine 
geschrieben wurde, im allgemeinen nicht auf eine andere laufen.
Programmierer brauchten generell Fachkentnisse in einer bestimmten
Architektur oder Familie von Architekturen(im gegensatz dazu, würden 
sie heute eher Fachkentnisse in einer Programiersprache oder Familie
von Programiersprachen sammeln, mit der Zuversicht, dass ihre 
Kentnisse auf welche Hardware sie auch arbeiten mögen, übertragbar 
ist). Weil die Erfahrungen einer Person dazu neigten spezifisch auf 
eine Art von Computer beschränkt zu sein, hatte ihre Ansammlung an
Erfahrung den Effekt, den Computer für sie und ihre Kollegen 
attraktiver zu machen. Desshalb war es im Interesse des Herstellers,
dass Wissen und Code spezifisch zu ihren Machinen sich so weit wie 
möglich verbreitete.</para>

<para>Second, there was no Internet.  Though there were fewer legal
restrictions on sharing than today, there were more technical ones:
the means of getting data from place to place were inconvenient and
cumbersome, relatively speaking.  There were some small, local
networks, good for sharing information among employees at the same
research lab or company.  But there remained barriers to overcome if
one wanted to share with everyone, no matter where they were.  These
barriers <emphasis>were</emphasis> overcome in many cases.  Sometimes
different groups made contact with each other independently, sending
disks or tapes through land mail, and sometimes the manufacturers
themselves served as central clearing houses for patches.  It also
helped that many of the early computer developers worked at
universities, where publishing one's knowledge was expected.  But the
physical realities of data transmission meant there was always an
impedance to sharing, an impedance proportional to the distance (real
or organizational) that the software had to travel.  Widespread,
frictionless sharing, as we know it today, was not possible.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>The Rise of Proprietary Software and Free Software</title>

<para>As the industry matured, several interrelated changes occurred
simultaneously.  The wild diversity of hardware designs gradually gave
way to a few clear winners&mdash;winners through superior technology,
superior marketing, or some combination of the two.  At the same time,
and not entirely coincidentally, the development of so-called "high
level" programming languages meant that one could write a program
once, in one language, and have it automatically translated
("compiled") to run on different kinds of computers.  The implications
of this were not lost on the hardware manufacturers: a customer could
now undertake a major software engineering effort without necessarily
locking themselves into one particular computer architecture.  When
this was combined with the gradual narrowing of performance
differences between various computers, as the less efficient designs
were weeded out, a manufacturer that treated its hardware as its only
asset could look forward to a future of declining profit margins.  Raw
computing power was becoming a fungible good, while software was
becoming the differentiator.  Selling software, or at least treating
it as an integral part of hardware sales, began to look like a good
strategy.</para>

<para>This meant that manufacturers had to start enforcing the
copyrights on their code more strictly.  If users simply continued to
share and modify code freely among themselves, they might
independently reimplement some of the improvements now being sold as
"added value" by the supplier.  Worse, shared code could get into the
hands of competitors.  The irony is that all this was happening around
the time the Internet was getting off the ground.  Just when truly
unobstructed software sharing was finally becoming technically
possible, changes in the computer business made it economically
undesirable, at least from the point of view of any single company.
The suppliers clamped down, either denying users access to the code
that ran their machines, or insisting on non-disclosure agreements
that made effective sharing impossible.</para>

<sect3 id="history-conscious-resistance">
<title>Conscious resistance</title>

<para>As the world of unrestricted code swapping slowly faded away, a
counterreaction crystallized in the mind of at least one programmer.
Richard Stallman worked in the Artificial Intelligence Lab at the
Massachusetts Institute of Technology in the 1970s and early '80s,
during what turned out to be a golden age and a golden location for
code sharing.  The AI Lab had a strong "hacker
ethic",<footnote><para>Stallman uses the word "hacker" in the sense of
"someone who loves to program and enjoys being clever about it," not
the relatively new meaning of "someone who breaks into
computers."</para></footnote> and people were not only encouraged but
expected to share whatever improvements they made to the system.  As
Stallman wrote later:</para>

    <blockquote>
      <para><emphasis>We did not call our software "free software",
      because that term did not yet exist; but that is what it was.
      Whenever people from another university or a company wanted to
      port and use a program, we gladly let them.  If you saw someone
      using an unfamiliar and interesting program, you could always
      ask to see the source code, so that you could read it, change
      it, or cannibalize parts of it to make a new program.
      </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>This Edenic community collapsed around Stallman shortly after
1980, when the changes that had been happening in the rest of the
industry finally caught up with the AI Lab.  A startup company hired
away many of the Lab's programmers to work on an operating system
similar to what they had been working on at the Lab, only now under an
exclusive license.  At the same time, the AI Lab acquired new
equipment that came with a proprietary operating system.</para>

<para>Stallman saw the larger pattern in what was happening:</para>

    <blockquote>
      <para><emphasis>The modern computers of the era, such as the VAX
      or the 68020, had their own operating systems, but none of them
      were free software: you had to sign a nondisclosure agreement
      even to get an executable copy.</emphasis> </para>

      <para><emphasis>This meant that the first step in using a
      computer was to promise not to help your neighbor. A cooperating
      community was forbidden. The rule made by the owners of
      proprietary software was, "If you share with your neighbor, you
      are a pirate. If you want any changes, beg us to make them."
      </emphasis> </para>

    </blockquote>

<para>By some quirk of personality, he decided to resist the trend.
Instead of continuing to work at the now-decimated AI Lab, or taking a
job writing code at one of the new companies, where the results of his
work would be kept locked in a box, he resigned from the Lab and
started the GNU Project and the Free Software Foundation (FSF).  The
goal of GNU<footnote><para>It stands for "GNU's Not Unix", and the
"GNU" in that expansion stands for...the same
thing.</para></footnote> was to develop a completely free and open
computer operating system and body of application software, in which
users would never be prevented from hacking or from sharing their
modifications.  He was, in essence, setting out to recreate what had
been destroyed at the AI Lab, but on a world-wide scale and without
the vulnerabilities that had made the AI Lab's culture susceptible to
disintegration.</para>

<para>In addition to working on the new operating system, Stallman
devised a copyright license whose terms guaranteed that his code would
be perpetually free.  The GNU General Public License (GPL) is a clever
piece of legal judo: it says that the code may be copied and modified
without restriction, and that both copies and derivative works (i.e.,
modified versions) must be distributed under the same license as the
original, with no additional restrictions.  In effect, it uses
copyright law to achieve an effect opposite to that of traditional
copyright: instead of limiting the software's distribution, it
prevents <emphasis>anyone</emphasis>, even the author, from limiting
it.  For Stallman, this was better than simply putting his code into
the public domain.  If it were in the public domain, any particular
copy of it could be incorporated into a proprietary program (as has
also been known to happen to code under permissive copyright
licenses).  While such incorporation wouldn't in any way diminish the
original code's continued availability, it would have meant that
Stallman's efforts could benefit the enemy&mdash;proprietary software.
The GPL can be thought of as a form of protectionism for free
software, because it prevents non-free software from taking full
advantage of GPLed code.  The GPL and its relationship to other free
software licenses are discussed in detail in
<xref linkend="legal"/>.</para>

<para>With the help of many programmers, some of whom shared
Stallman's ideology and some of whom simply wanted to see a lot of
free code available, the GNU Project began releasing free replacements
for many of the most critical components of an operating system.
Because of the now-widespread standardization in computer hardware and
software, it was possible to use the GNU replacements on otherwise
non-free systems, and many people did.  The GNU text editor (Emacs)
and C compiler (GCC) were particularly successful, gaining large and
loyal followings not on ideological grounds, but simply on their
technical merits.  By about 1990, GNU had produced most of a free
operating system, except for the kernel&mdash;the part that the
machine actually boots up, and that is responsible for managing memory,
disk, and other system resources.</para>

<para>Unfortunately, the GNU project had chosen a kernel design that
turned out to be harder to implement than expected.  The ensuing delay
prevented the Free Software Foundation from making the first release
of an entirely free operating system.  The final piece was put into
place instead by Linus Torvalds, a Finnish computer science student
who, with the help of volunteers around the world, had completed a
free kernel using a more conservative design.  He named it Linux, and
when it was combined with the existing GNU programs, the result was a
completely free operating system.  For the first time, you could boot
up your computer and do work without using any proprietary
software.<footnote><para>Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>

<para>Much of the software on this new operating system was not
produced by the GNU project.  In fact, GNU wasn't even the only group
working on producing a free operating system (for example, the code
that eventually became NetBSD and FreeBSD was already under
development by this time).  The importance of the Free Software
Foundation was not only in the code they wrote, but in their political
rhetoric.  By talking about free software as a cause instead of a
convenience, they made it difficult for
programmers <emphasis>not</emphasis> to have a political consciousness
about it.  Even those who disagreed with the FSF had to engage the
issue, if only to stake out a different position.  The FSF's
effectiveness as propagandists lay in tying their code to a message,
by means of the GPL and other texts.  As their code spread widely,
that message spread as well.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Accidental resistance</title>

<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
progammers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
