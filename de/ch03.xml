<chapter id="technical-infrastructure">
<!--
<title>Technical Infrastructure</title>
-->
<title>Technische Infrastruktur</title>

<simplesect>
<!--
<para>Free software projects rely on technologies that support the
selective capture and integration of information.  The more skilled
you are at using these technologies, and at persuading others to use
them, the more successful your project will be.  This only becomes
more true as the project grows.  Good information management is what
prevents open source projects from collapsing under the weight of
Brooks' Law<footnote><para>From his book <citetitle>The Mythical Man
Month</citetitle>, 1975.  See <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> and <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"/>.</para></footnote>,
which states that adding manpower to a late software project makes it
later.  Fred Brooks observed that the complexity of a project
increases as the <emphasis>square</emphasis> of the number of
participants.  When only a few people are involved, everyone can easily
talk to everyone else, but when hundreds of people are involved, it is
no longer possible for each person to remain constantly aware of what
everyone else is doing.  If good free software project management is
about making everyone feel like they're all working together in the
same room, the obvious question is: what happens when everyone in a
crowded room tries to talk at once?</para>
-->
<para>Freie Software-Projekte beruhen auf Techniken, die das
selektive Aufgreifen und Integrieren von Information ermöglichen. Je 
gewandter Sie mit diesen Techniken umgehen und andere dazu bewegen 
können, sie zu benutzen, desto erfolgreicher wird Ihr Projekt sein. Mit
zunehmender Größe Ihres Projekts, gewinnt diese Regel umso mehr an
Bedeutung. Eine gute Informationsverwaltung verhindert, dass ein
Open-Source-Projekt unter der Last von Brooks Gesetz ,<footnote><para>Aus
seinem Buch <citetitle>The Mythical Man Month</citetitle>, 1975. Siehe 
<ulink url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> und 
<ulink url="http://en.wikipedia.org/wiki/Brooks_Law"/>.</para></footnote>
zusammenbricht. Sie besagt: Der Einsatz zusätzlicher Arbeitskräfte bei
bereits verspäteten Softwareprojekten vergrößert nur die Verspätung. Er
beobachtete, dass die Komplexität eines Projekts mit der Anzahl der 
Teilnehmer <emphasis>Quadratisch</emphasis> zunimmt. Wenn nur wenige
beteiligt sind, kann jeder leicht mit jedem reden, wenn aber hunderte
beteiligt sind, ist es nicht weiter möglich, dass jeder über die Arbeit
aller anderen Bescheid weiß. Wenn es bei der Verwaltung eines freien 
Software-Projekts darum geht, jedem das Gefühl zu geben in einem Raum 
mit allen Anderen zu sitzen, stellt sich die offensichtliche Frage: Was 
passiert wenn alle in einem gedrängten Raum versuchen auf einmal zu 
reden?</para>
<!--
<para>This problem is not new.  In non-metaphorical crowded rooms, the
solution is <firstterm>parliamentary procedure</firstterm>: formal
guidelines for how to have real-time discussions in large groups, how
to make sure important dissents are not lost in floods of "me-too"
comments, how to form subcommittees, how to recognize when decisions
are made, etc.  An important part of parliamentary procedure is
specifying how the group interacts with its information management
system.  Some remarks are made "for the record", others are not.  The
record itself is subject to direct manipulation, and is understood to
be not a literal transcript of what occurred, but a representation of
what the group is willing to <emphasis>agree</emphasis> occurred.  The
record is not monolithic, but takes different forms for different
purposes.  It comprises the minutes of individual meetings, the
complete collection of all minutes of all meetings, summaries, agendas
and their annotations, committee reports, reports from correspondents
not present, lists of action items, etc.</para>
-->
<para>Dieses Problem ist nicht neu. In der Praxis, wird es gelöst,
wie in einem Parlament: Es gibt formelle Richtlinien für Diskussionen
innerhalb von großen Gruppen, um sicherzustellen, dass wichtige
Meinungsverschiedenheiten nicht durch Zwischenrufe verloren gehen.
Weitere Richtlinien gibt es für die Bildung von Untergremien, sowie um
erkennen zu können, wann Entscheidungen getroffen werden, usw. Ein 
wichtiger Teil der parlamentarischen Diskussion ist zu spezifizieren, 
wie die Gruppe ihre Informationen verwaltet. Manche Anmerkungen werden
"fürs Protokoll" gemacht, andere nicht. Das Protokoll selbst ist
Gegenstand direkter Änderungen, und wird nicht als wörtliche 
Niederschrift der tatsächlichen Ereignisse angesehen, sondern als 
Auflistungen der gemeinsam <emphasis>anerkannten</emphasis> Ereignisse.
Das Protokoll ist nicht monolitisch, sondern nimmt verschiedene Formen
an, für verschiedene Zwecke. Es umfasst die einzelnen Sitzungen, die
komplette Sammlung aller Sitzungen, Zusammenfassungen, Tagesordnungen
mit Anmerkungen, Berichte von Gremien und nicht anwesenden
Korrespondenten, Abläufe, usw.</para>
<!--
<para>Because the Internet is not really a room, we don't have to
worry about replicating those parts of parliamentary procedure that
keep some people quiet while others are speaking.  But when it comes
to information management techniques, well-run open source projects
are parliamentary procedure on steroids.  Since almost all
communication in open source projects happens in writing, elaborate
systems have evolved for routing and labeling data appropriately; for
minimizing repetitions so as to avoid spurious divergences; for
storing and retrieving data; for correcting bad or obsolete
information; and for associating disparate bits of information with
each other as new connections are observed.  Active participants in
open source projects internalize many of these techniques, and will
often perform complex manual tasks to ensure that information is
routed correctly.  But the whole endeavor ultimately depends on
sophisticated software support.  As much as possible, the
communications media themselves should do the routing, labeling, and
recording, and should make the information available to humans in the
most convenient way possible.  In practice, of course, humans will
still need to intervene at many points in the process, and it's
important that the software make such interventions convenient too.
But in general, if the humans take care to label and route information
accurately on its first entry into the system, then the software
should be configured to make as much use of that metadata as
possible.</para>
-->
<para>Da das Internet nicht wirklich ein Raum ist, müssen wir nicht die 
Teile der parlamentarischen Diskussion replizieren, die manche Leute 
ruhig hält, während andere Reden. Wenn es aber um Techniken zur 
Verwaltung von Informationen geht, sind gut betriebene 
Open-Source-Projekte 
wie eine parlamentarische Diskussionen auf Steroiden. Weil 
fast die gesamte Kommunikation in Open-Source-Projekten schriftlich
abläuft, haben sich wohl durchdachte Systeme entwickelt um Daten 
angemessen zu markieren und an die richtige Stellen zu leiten; um 
Wiederholungen zu minimieren, damit Diskussionen nicht auseinander 
laufen; um Daten zu speichern und abzurufen; um schlechte oder veraltete
Informationen zu korrigieren; und um getrennte Informationen miteinander 
zu verbinden, wenn Zusammenhänge gefunden werden. Aktive Teilnehmer 
verinnerlichen viele dieser Techniken und werden oft komplexe manuelle
Aufgaben durchführen, um sicherzustellen, dass Information am richtigen
Ziel ankommen. Diese Bestrebungen hängen aber letztendlich von der
Unterstützung ausgeklügelte Software ab. Die Kommunikationsmedien 
sollten so weit möglich, diese Aufgaben selbstständig übernehmen und
Information für Menschen so bequem wie möglich aufbereiten. In der 
Praxis werden Menschen natürlich an vielen Stellen eingreifen müssen
und es ist wichtig, dass diese Eingriffe möglichst einfach sind. Im
allgemeinen sollte aber, solange die Menschen sich bemühen 
Informationen sorgfältig zu Kennzeichnen und am richtigen Ziel zu
leiten, die Software so konfiguriert sein, dass sie den größtmöglichen
Nutzen aus diesen Metadaten zieht.</para>
<!--
<para>The advice in this chapter is intensely practical, based on
experiences with specific software and usage patterns.  But the point
is not just to teach a particular collection of techniques.  It is
also to demonstrate, by means of many small examples, the overall
attitude that will best encourage good information management in your
project.  This attitude will involve a combination of technical skills
and people skills.  The technical skills are essential because
information management software always requires configuration, plus a
certain amount of ongoing maintenance and tweaking as new needs arise
(for example, see the discussion of how to handle project growth in
<xref linkend="bug-filtering"/><phrase output="printed"> later in
this chapter</phrase>).  The people skills are necessary
because the human community also requires maintenance: it's not always
immediately obvious how to use these tools to full advantage, and in
some cases projects have conflicting conventions (for example, see the
discussion of setting <systemitem>Reply-to</systemitem> headers on
outgoing mailing list posts, in <xref linkend="mailing-lists"/>).
Everyone involved with the project will need to be encouraged, at the
right times and in the right ways, to do their part to keep the
project's information well organized.  The more involved the
contributor, the more complex and specialized the techniques she can
be expected to learn.</para>
-->
<para>Die Ratschläge in diesem Kapitel sind sehr praxisnah und basieren
auf ganz bestimmte Software und Nutzungsverhalten. Es geht hierbei aber
nicht nur darum bestimmte Techniken zu zeigen. Es geht auch darum,
durch viele kleine Beispiele, die beste Haltung zu demonstrieren, um in
Ihrem Projekt eine möglichst gute Informationsverwaltung zu fördern. 
Diese Haltung wird eine Kombination aus technischen Fähigkeiten und 
sozialer Kompetenz sein. Technische Fähigkeiten sind unentbehrlich, da
die Software konfiguriert, sowie gelegentlich gepflegt und Angepasst
werden muss, sobald neue Anforderungen auftauchen (siehe z.B. den
Abschnitt über die Handhabung von Wachstum, im Abschnitt 
<xref linkend="bug-filtering"/><phrase output="printed"> später in 
diesem Kapitel</phrase>). Soziale Kompetenz ist nötig, da eine 
menschliche Gemeinschaft auch gepflegt werden muss: Es ist nicht immer
sofort ersichtlich wie diese Hilfsmittel am besten genutzt werden,
und manchmal haben Projekte widersprüchliche Konventionen (siehe z.B.
Beispiel die Diskussion um die Einstellung des 
<systemitem>Reply-to</systemitem> Headers bei ausgehende Nachrichten
der Mailingliste, in <xref linkend="mailing-lists"/>). Jeder der
mit dem Projekt etwas zu tun hat, wird zur richtigen Zeit und auf die
richtigen Art, dazu ermutigt werden müssen, seinen Teil beizutragen,
die Information des Projekts geordnet zu halten. Je größer die
Beteiligung des Freiwilligen, desto komplexer und spezieller werden
die Techniken die man von ihr erwarten kann, sich anzueignen.</para>
<!--
<para>Information management has no cut-and-dried solution.  There are
too many variables.  You may finally get everything configured just
the way you want it, and have most of the community participating, but
then project growth will make some of those practices unscalable.  Or
project growth may stabilize, and the developer and user communities
settle into a comfortable relationship with the technical
infrastructure, but then someone will come along and invent a whole
new information management service, and pretty soon newcomers will be
asking why your project doesn't use it&mdash;for example, this is
happening now to a lot of free software projects that predate the
invention of the wiki (see
<ulink url="http://en.wikipedia.org/wiki/Wiki"/>).  Many questions are
matters of judgement, involving tradeoffs between the convenience of
those producing information and the convenience of those consuming it,
or between the time required to configure information management
software and the benefit it brings to the project.</para>
-->
<para>Es gibt keine schablonenhafte Lösung für Informationsverwaltung.
Es gibt einfach zu viele Variablen. Es kann sein das Sie irgendwann 
alles richtig eingerichtet haben, genau wie Sie es haben möchten, und 
die meisten Freiwilligen überredet haben mitzumachen. Sobald das Projekt
jedoch wächst, können sich manche dieser Vorgänge als nicht skalierbar
erweisen. Wenn der Wachstum sich stabilisiert und die Entwickler und 
Nutzer sich an die technische Infrastruktur gewöhnen, kann eine völlig
neues Verwaltungssystem für Informationen aufkommen und neue Freiwillige
werden ziemlich bald fragen, warum Ihr Projekt diese nicht
einsetzt &ndash; viele freie Software-Projekte die vor der Erfindung von
Wikis gegründet wurden, erleben das derzeit (siehe 
<ulink url="http://en.wikipedia.org/wiki/Wiki"/>). Viele Fragen sind
Ansichtssache und sind Kompromisse zwischen dem Komfort derjenigen die
Informationen produzieren und dem Komfort derjenigen die diese 
konsumieren, oder der Zeit die erforderlich ist, die Software 
einzurichten und ihrem Nutzen für das Projekt.</para>
<!--
<para>Beware of the temptation to over-automate, that is, to automate
things that really require human attention.  Technical infrastructure
is important, but what makes a free software project work is
care&mdash;and intelligent expression of that care&mdash;by the humans
involved.  The technical infrastructure is mainly about giving humans
convenient ways to do that.</para>
-->
<para>Hüten Sie sich vor der Verlockung allzuviel zu automatisieren,
dass eigentlich die Aufmerksamkeit eines Menschen erfordert. Technische
Infrastruktur ist wichtig, aber ein freies Software-Projekt
funktioniert in Wirklichkeit durch die Fürsorge &ndash; und die kluge
Formulierung dieser Fürsorge &ndash; der beteiligten Menschen. Die 
technische Infrastruktur ist hauptsächlich diesen Menschen das möglichst 
zu vereinfachen.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="tools-needed">
<!--
<title>What a Project Needs</title>
-->
<title>Das nötige Werkzeug</title>
<!--
<para>Most open source projects offer at least a minimum, standard set
of tools for managing information:</para>
-->
<para>Die meiste Open-Source-Projekte haben ein Mindestmaß an üblichen
Hilfsmitteln um Informationen zu Verwalten:</para>

<variablelist>

   <varlistentry><term>Webseite</term>
     <listitem>
     <para>Hauptsächlich eine zentralisiertes, einweg Kanal für
           Informationen, um das Projekt der Öffentlichkeit zu
           präsentieren. Die Webseite kann auch eine administrative 
           Schnittstelle für andere Hilfsmittel des Projekts 
           sein.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Mailinglisten</term>
     <listitem>
       <para>Meistens das aktivste Forum in einem Projekt und das 
	         Medium "fürs Protokoll".</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Versionsverwaltung</term>
     <listitem>
       <para>Ermögliche es den Entwicklern Änderungen am Code bequem 
             zu verwalten, u.a. auch rückgängig zu machen. Erlaubt es
             allen zu sehen was mit dem Code passiert.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Bugtracker</term>
     <listitem>
       <para>Ermöglicht Entwicklern ihre Arbeit im Blick zu behalten, 
             mit einander zu koordinieren und neue Versionen zu Planen. 
             Erlaubt es jedem den Status von einem Bug zu überprüfen 
             und Informationen über den Bug festzuhalten (z.B. wie man 
             ihn reproduziert). Kann außer zur Beobachtung von Fehlern 
             auch für die Planung von Aufgaben, neue Versionen, 
			 Funktionen usw. benutzt werden.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Diskussionsforen</term>
     <listitem>
       <para><remark>Basically, bulletin board systems.  These are not
             as widespread as one would expect, and where they are
             found, they're not used as much as one would expect.  Why?
             Are they worth mentioning at all?</remark></para>
     </listitem>
   </varlistentry>
-->

   <varlistentry><term>Chat</term>
     <listitem>
       <para>Ein Ort für kurze, oberflächliche Diskussionen und um
             Fragen und Antworten auszutauschen. Wird nicht immer 
             vollständig archiviert.</para>
     </listitem>
   </varlistentry>

</variablelist>
<!--
<para>Each tool in this set addresses a distinct need, but their functions
are also interrelated, and the tools must be made to work together.
Below we will examine how they can do so, and more importantly, how to
get people to use them.  The web site is not discussed until the end,
since it acts more as glue for the other components than as a tool
unto itself.</para>
-->
<para>Jedes dieser Hilfsmittel ist dazu gedacht, einen bestimmten Bedarf
zu decken, ihre Funktionen sind aber auch mit einander verwandt und 
müssen so eingerichtet werden, dass sie zusammen funktionieren. Weiter 
unten werden wir untersuchen wie man sie so einrichten kann und viel 
wichtiger noch, wie man Leute dazu bewegt sie zu benutzen. Die Webseite
wird erst zum Schluss behandelt, da es eher als Klebstoff dient denn als
eigenständig zu sehendes Hilfsmittel.</para>
<!--
<para>You may be able to avoid a lot of the headache of choosing and
configuring these tools by using a <firstterm>canned
hosting</firstterm> site: a server that offers prepackaged,
templatized web areas with all the accompanying tools needed to run a
free software project.  See
<xref linkend="canned-hosting"/><phrase output="printed"> later
in this chapter</phrase> for a discussion of the advantages and
disadvantages of canned hosting.</para>
-->
<para>Sie können sich eine Menge Kopfschmerzen bei der Einrichtung 
dieser Hilfsmittel ersparen, mit der Hilfe von Hosting-Bündel: Ein 
Server der vorkonfigurierte Seiten und Vorlagen bereitstellt, sowie alle
zugehörigen Hilfsmittel die man braucht um ein freies Software-Projekt 
zu betreiben. Siehe 
<xref linkend="canned-hosting"/><phrase output="printed"> später in 
diesem Kapitel</phrase> indem die Vor- und Nachteile von Hosting-Bündel 
behandelt werden.</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="mailing-lists">
<!--
<title>Mailing Lists</title>
-->
<title>Mailinglisten</title>
<!--
<para>Mailing lists are the bread and butter of project
communications.  If a user is exposed to any forum besides the web
pages, it is most likely to be one of the project's mailing lists.
But before they experience the mailing list itself, they will
experience the mailing list interface&mdash;that is, the mechanism
by which they join ("subscribe to") the list.  This brings us to Rule
#1 of mailing lists:</para>
-->
<para>Mailinglisten sind im Projekt das tägliche Brot der 
Kommunikation. Sieht der Nutzer irgend ein anderes Forum außer der 
Webseite, wird es wahrscheinlich eine der Mailinglisten sein. Vorher
werden sie sich aber mit der Anmeldung beschäftigen müssen. Das bringt 
uns zur ersten Regel von Mailinglisten:</para>

<blockquote>
<!--
   <para><emphasis>Don't try to manage mailing lists by hand&mdash;get
   list management software.</emphasis></para>
-->
   <para><emphasis>Versuchen Sie nicht, die Mailingliste händisch
   zu verwalten &ndash; Besorgen Sie sich dazu die nötige 
   Software.</emphasis></para>
</blockquote>
<!--
<para>It will be tempting to put this off.  Setting up mailing list
management software might seem like overkill at first.  Managing
small, low-traffic lists by hand will seem seductively easy: you just
set up a subscription address that forwards to you, and when someone
mails it, you add (or remove) their email address in some text file
that holds all the addresses on the list.  What could be
simpler?</para>
-->
<para>Es wird verlockend sein, diese Aufgabe hinauszuschieben. Am Anfang
scheint es überflüssig diese Software einzurichten. Kleine Verteiler mit
geringem Nachrichtenverkehr, scheinen verlockend einfach zu verwalten:
Man richtet einfach eine Adresse für die Anmeldung ein, die Anmeldungen
werden an Sie weiterleitet, worauf Sie seine Adresse in einer Text-Datei
eintragen, indem alle Adressen enthalten sind. Was könnte einfacher 
sein?</para>
<!--
<para>The trick is that good mailing list management&mdash;which is
what people have come to expect&mdash;is not simple at all.  It's not
just about subscribing and unsubscribing users when they request.
It's also about moderating to prevent spam, offering the mailing list
in digest versus message-by-message form, providing standard list and
project information by means of auto-responders, and various other
things.  A human being monitoring a subscription address can supply
only a bare minimum of functionality, and even then not as reliably
and promptly as software could.</para>
-->
<para>Es gibt allerdings einen Haken. Ein gut verwalteter Verteiler
&ndash; was viele mittlerweile erwarten &ndash; ist alles andere als
einfach. Es geht nicht nur darum Leute an- und abzumelden wenn sie eine
entsprechende Anfrage stellen. Es geht u.a. darum Spam zu verhindern, 
nicht einzelne Nachrichten, sondern Zusammenfassungen zu verteilen und 
Informationen über den Verteiler und das Projekt mittels 
automatisierter Antworten zu verschicken. Ein Mensch der die Adresse
eines Verteilers beobachtet, bietet nur ein Mindestmaß an Funktionen,
und selbst dann nicht so zuverlässig und schnell wie es eine Software
könnte.</para>
<!--
<para>Modern list management software usually offers at least the
following features:</para>
-->
<para>Moderne Mailinglisten-Software bietet für gewöhnlich
mindestens folgende Funktionen:</para>

<variablelist>

  <varlistentry><term>Anmeldung sowohl per E-Mail als auch über die
  Webseite.
  </term>
    <listitem>
      <para>Wenn ein Nutzer sich bei der Mailingliste anmeldet, sollte er
            <emphasis>umgehend</emphasis> eine automatisierte 
            Willkommensnachricht bekommen, in der beschrieben steht, 
	    wofür er sich angemeldet hat, wie man weiter mit der 
            Mailingliste umgeht und (am wichtigsten) wie man sich 
            abmeldet. Diese automatische E-Mail kann natürlich 
            bearbeitet werden, um projektspezifische Informationen 
            einzuschließen, wie z.B. die Webseite des Projekts, wo man 
            die FAQ findet, usw.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Nachrichten in Kurzform oder als 
	              Einzelnachrichten</term>
    <listitem>
      <para>Die Kurzform wird einmal am Tag verschickt. Sie ist eine
			Zusammenfassung der gesamten Aktivität auf der Mailingliste,
			die im Verlauf des Tages aufgekommen ist. Wer die Liste
			nur nebenher verfolgt, ohne selbst beteiligt zu sein, 
			bevorzugt oft die Kurzform, da es ihnen erlaubt alle Themen
			auf einmal durchzusehen und hat den Vorteil, die Ablenkung
			durch ständig eintreffende E-Mails zu vermeiden.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Moderation</term>
    <listitem>
      <para>"Moderieren" bedeutet sicherzustellen, dass Nachrichten 
            a)&nbsp;kein&nbsp;spam sind und b)&nbsp;zum&nbsp;Thema
            gehören, vor sie verteilt werden. Moderation muss 
			zwangsläufig von Menschen erledigt werden, aber Software
			kann eine Menge dazu beitragen, die Aufgabe einfacher zu
			gestalten. Zu diesem Thema später mehr.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Administrative Schnittstellen</term>
    <listitem>
      <para>Diese ermöglichen es einem Administrator u.a. ohne Umstände 
            veraltete Adressen zu löschen. Was dringend werden kann, 
            wenn die Adresse eines Empfängers anfängt, Antworten wie "Ich bin nicht 
            mehr bei dieser Adresse" auf jede Nachricht von der
	    Liste zu schicken. (Manche Listensoftware kann so etwas
            automatisch erkennen und die Person abmelden.)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Manipulieren der Header</term>
    <listitem>
      <para>Viele Leute haben ausgeklügelte Filter- und Antwort-Regeln für
	    ihre E-Mail-Programm eingerichtet. Mailinglisten-Software 
            kann bestimmte Header hinzufügen und manipulieren, die die
            Empfänger ausnutzen können (mehr dazu später).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Archivierung</term>
    <listitem>
      <para>Alle Nachrichten an die Liste werden gespeichert und
			im Netz bereitgestellt; alternativ bietet manche Software 
            spezielle Schnittstellen an um externe Archivierungssoftware
            einzubinden wie z.B. 
            (<ulink url="http://www.mhonarc.org/"/>). Archivierung ist
			unerlässlich, mehr dazu in
            <xref linkend="using-archives"/><phrase output="printed"> im 
            Kapitel <xref linkend="communications"/></phrase>.</para>
    </listitem>
  </varlistentry>

</variablelist>
<!--
<para>The point of all this is merely to emphasize that mailing list
management is a complex problem that has been given a lot of thought,
and mostly been solved.  You certainly don't need to become an expert
in it.  But you should be aware that there's always room to learn
more, and that list management will occupy your attention from time to
time in the course of running a free software project.  Below we'll
examine a few of the most common mailing list configuration
issues.</para>
-->
<para>Der Sinn dieser Punkte ist lediglich zu betonen, dass die
Verwaltung einer Mailingliste ein komplexes Problem ist, mit dem
sich schon viele beschäftigt haben und weitestgehend gelöst haben. Sie 
müssen sicherlich kein Experte auf diesem Gebiet werden. Aber Sie
sollten sich bewusst machen, dass es immer mehr zu lernen gibt, und 
dass die Verwaltung der Liste im Verlauf eines freien Software
Projekts ab und zu etwas Zeit in Anspruch nehmen wird. Im weiteren
werden wir ein paar der häufigsten Punkte beim Konfigurieren einer
Antworten angehen.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="spam-prevention">
<!--
<title>Spam Prevention</title>
-->
<title>Schutz vor Spam</title>
<!--
<para>Between when this sentence is written and when it is published,
the Internet-wide spam problem will probably double in
severity&mdash;or at least it will feel that way.  There was a time,
not so long ago, when one could run a mailing list without taking any
spam-prevention measures at all.  The occasional stray post would
still show up, but infrequently enough to be only a low-level
annoyance.  That era is gone forever.  Today, a mailing list that
takes no spam prevention measures will quickly be submerged in junk
emails, to the point of unusability.  Spam prevention is
mandatory.</para>
-->
<para>Seit ich diesen Satz schrieb, bis zu seiner Veröffentlichung,
ist das Internet-weite Spam-Problem wahrscheinlich doppelt so schlimm 
geworden &ndash; oder zumindest wird es einem so vorkommen. Es gab eine
Zeit, nicht all zu lange her, in der man eine Liste betreiben
konnte ohne überhaupt irgend welche Maßnahmen gegen Spam vornehmen zu
müssen. Gelegentlich verirrte sich eine Nachricht, aber selten genug 
um nur eine geringes Ärgernis zu sein. Diese Ära ist für immer vorbei.
Heutzutage wird eine Mailingliste, die keine Maßnahmen gegen Spam
unternimmt, schnell von Werbemüll überflutet und dadurch 
unbenutzbar. Schutz vor Spam ist unerlässlich.</para>
<!--
<para>We divide spam prevention into two categories: preventing spam
posts from appearing on your mailing lists, and preventing your
mailing list from being a source of new email addresses for spammers'
harvesters.  The former is more important, so we examine it
first.</para>
-->
<para>Wir unterteilen Schutz vor Spam in zwei Kategorien: Spam
daran zu hindern auf Ihrer Liste aufzutauchen, und zu verhindern,
dass Ihre Liste für Spam harvester zu einer Quelle von Adressen wird.
Ersteres ist wichtiger also untersuchen wir es zuerst.</para>

<sect3 id="spam-filtering">
<!--
<title>Filtering posts</title>
-->
<title>Filterung von Nachrichten</title>
<!--
<para>There are three basic techniques for preventing spam posts, and
most mailing list software offers all three.  They are best used in
tandem:</para>
-->
<para>Es gibt drei grundsätzliche Arten, Spam zu vermeiden und die
meisten Mailinglisten bieten alle drei an. Gemeinsam arbeiten sie am
effizientesten:</para>

<orderedlist>

  <listitem><para><emphasis role="bold">Es sollten nur Nachrichten von
			angemeldeten Nutzern automatisch angenommen 
			werden.</emphasis></para>

            <para>Diese Einstellung ist weitestgehend effektiv und 
            ist nicht besonders schwer einzurichten, da es für 
			gewöhnlich nur eine kleine Änderung an der Konfiguration 
            der Software des Verteilers bedeutet. Beachten Sie aber, 
            dass Nachrichten die nicht automatisch Akzeptiert werden
            nicht einfach verworfen werden sollten. Es gibt zwei 
			Gründe, warum sie statt dessen für weitere Moderation 
            aufbewahrt werden sollten. Erstens, wollen Sie auch
            unangemeldete Benutzer erlauben, Nachrichten an die Liste
			zu senden, schließlich sollte eine Person mit einer Frage
			oder einem Vorschlag sich nicht gleich anmelden müssen, um
			eine einzige E-Mail zu senden. Zweitens kann es vorkommen,
			dass auch angemeldete Benutzer eine anderen E-Mail-Adresse
            benutzen als die, mit der sie angemeldet sind. E-Mail-Adressen
            sind keine zuverlässige Möglichkeit, Menschen zu 
            identifizieren und sollten nicht als solches behandelt 
            werden.</para></listitem>

  <listitem><para><emphasis role="bold">Benutzen Sie einen Spam-Filter</emphasis></para>

            <para>Wenn die Software des Verteilers es ermöglicht (was 
            die meisten tun), können Sie Nachrichten durch einen Spam-Filter
            laufen lassen. Automatisierte Spam-Filterung ist 
			nicht perfekt und wird es aufgrund des andauernden 
			Wettrüstes zwischen Spammern und den Autoren der
                        Filtersoftware auch nie sein. Es kann aber einen großen Teil des
			Spams reduzieren, der bis zu den Moderatoren durchkommt.
			Jede solche Filterung ist vorteilhaft, da die Moderatoren
			weniger Zeit mit der Untersuchung von Nachrichten verbringen
			müssen, und deshalb sehr wünschenswert.</para>

            <para>Hier ist nicht genug Platz, für eine detailierte
            Anleitung, wie man einen Spam-Filter einrichtet. Sie werden 
            hierzu die Dokumentation Ihrer Mailinglisten-Software lesen
            müssen (siehe 
            <xref linkend="mailing-list-software"/><phrase output="printed">
			später in diesem Kapitel</phrase>). E-Mail-Verteiler haben 
			oft eingebaute Möglichkeiten um Spam zu verhindern, es kann
			aber sein, dass Sie weitere Filter von einem dritten 
			Anbieter hinzufügen wollen. Mit diesen Beiden habe ich gute
			Erfahrungen gemacht: SpamAssassin 
            (<ulink url="http://spamassassin.apache.org/"/>) und 
            SpamProbe 
            (<ulink url="http://spamprobe.sourceforge.net/"/>). Das soll
            allerdings kein Urteil über andere Open-Source-Filter sein, 
            von denen einige scheinbar auch ziemlich gut sind. Ich habe
			zufällig diese Beiden benutzt und war mit ihnen
			zufrieden.</para>
  </listitem>

  <listitem><para><emphasis role="bold">Moderation.</emphasis></para>
            <para>Die Letzte Stufe für Nachrichten die nicht von einem 
            angemeldeten Benutzer stammen und es durch den Spamfilter 
            schaffen, ist die <firstterm>Moderation</firstterm>: Die 
            E-Mail wird an eine bestimmte Adresse geleitet, wo es von 
            einem Menschen untersucht wird, der sie entweder annimmt 
            oder ablehnt.</para>

            <para>Eine E-Mail zu akzeptieren, kann eine von zwei Formen 
            annehmen: Sie können die E-Mail nur dieses eine Mal 
            annehmen oder Sie können die Software anweisen, diese eine 
            und alle weiteren Nachrichten von dieser Adresse anzunehmen.
            Letzteres ist fast immer vorzuziehen, um die zukünftige Bürde
            der Moderation zu verringern. Wie man Nachrichten annimmt, 
            kann sich von System zu System unterscheiden, für gewöhnlich
            reicht es aber eine E-Mail, an eine bestimmte Adresse zu
            senden, mit einem Befehl wie "accept" (um nur diese eine 
            E-Mail zu erlauben) oder "allow" (um diese und alle 
            weiteren Nachrichten zu erlauben).</para>

            <para>Um eine Nachricht abzulehnen reicht es meistens sie 
            einfach zu ignorieren. Wenn der Verteiler niemals eine 
            Bestätigung erhält, wird er die E-Mail auch nicht 
            verteilen. Das erwünschte Ergebnis erreicht man also, indem 
            man die E-Mail einfach ignoriert. Manchmal haben Sie auch
			die Möglichkeit mit "reject" oder "deny" an den Verteiler
			zu antworten, was dazu führt, dass alle weiteren Nachrichten
			von dieser Adresse automatisch abgelehnt werden ohne 
			moderiert zu werden. Es gibt selten einen Grund dafür, da 
			es bei der Moderation meistens darum geht, Spam zu vermeiden
			und Spammer benutzen selten zwei mal die gleiche 
			Adresse.</para>
            </listitem>
</orderedlist>
<!--
<para>Be sure to use moderation <emphasis>only</emphasis> for
filtering out spams and clearly off-topic messages, such as when
someone accidentally posts to the wrong mailing list.  The moderation
system will usually give you a way to respond directly to the sender,
but don't use that method to answer questions that really belong on
the mailing list itself, even if you know the answer off the top of
your head.  To do so would deprive the project's community of an
accurate picture of what sorts of questions people are asking, and
deprive them of a chance to answer questions themselves and/or see
answers from others.  Mailing list moderation is strictly about
keeping the list free of junk and off-topic emails, nothing
more.</para>
-->
<para>Die Moderierung sollte allerdings 
<emphasis>ausschließlich</emphasis> für Spam und Nachrichten benutzt
werden, die eindeutig nicht auf die Liste gehören, wie z.B. wenn 
jemand aus versehen eine Nachricht an die falsche Adresse schickt. Das 
System wird Ihnen meistens eine Möglichkeit geben eine E-Mail direkt an 
den Absender zu schicken, nutzen Sie diese aber nicht, um Fragen zu
beantworten die eigentlich auf die Mailingliste gehören, selbst 
wenn Ihnen sofort die Antwort einfällt. Das würde der Gemeinschaft des 
Projekts nur die Möglichkeit entziehen sich ein klares Bild zu machen, 
welche Fragen von der Öffentlichkeit gestellt werden und Sie der 
Gelegenheit berauben, diese Fragen selber zu beantworten und/oder die 
Antworten anderer zu sehen. Die Moderation einer Mailingliste 
sollte sich ausschließlich auf Werbemüll und irrelevante Nachrichten 
beschränken und sonst nichts.</para>

</sect3>

<sect3 id="address-hiding">
<!--
<title>Address hiding in archives</title>
-->
<title>Verschleierung von Adressen im Archiv</title>
<!--
<para>To prevent your mailing lists from being a source of addresses
for spammers, a common technique is for the archives to obscure
people's email addresses, for example by replacing</para>
-->
<para>Um zu verhindern, dass Ihr Verteiler zu einer Quelle von E-Mail-Adressen
für Spammer wird gibt es die gebräuchliche Methode, Adressen in 
den Archiven zu verschleiern indem man z.B.</para>

    <blockquote>
<!--
      <para><literal>jrandom@somedomain.com</literal></para>
-->
      <para><literal>hmustermann@einedomain.de</literal></para>
    </blockquote>
<!--
<para>with</para>
-->
<para>mit</para>

    <blockquote>
<!--
      <para><literal>jrandom_AT_somedomain.com</literal></para>
-->
      <para><literal>hmustermann_AT_einedomain.de</literal></para>
    </blockquote>
<!--
<para>or</para>
-->
<para>oder</para>

    <blockquote>
<!--
      <para><literal>jrandomNOSPAM@somedomain.com</literal></para>
-->
      <para><literal>hmustermannKEINSPAM@einedomain.de</literal></para>
    </blockquote>
<!--
<para>or some similarly obvious (to a human) encoding.  Since spam
address harvesters often work by crawling through web
pages&mdash;including your mailing list's online archives&mdash;and
looking for sequences containing "@", encoding the addresses is a way
of making people's email addresses invisible or useless to spammers.
This does nothing to prevent spam from being sent to the mailing list
itself, of course, but it does avoid increasing the amount of spam
sent directly to list users' personal addresses.</para>
-->
<para>oder irgendetwas (für Menschen) ähnlich offensichtliches ersetzt. 
Da Spam-Harvester oft nach dem Prinzip funktionieren, Webseiten 
abzugrasen &ndash; auch die Archive Ihres Verteilers &ndash; und nach
Zeilen mit einem "@" suchen, ist diese Art der Verschleierung eine 
effektive Methode E-Mail-Adressen vor Spammern zu verstecken oder
unbrauchbar zu machen. Was natürlich nichts am Spam, der an die Liste 
selbst geschickt wird ändert, aber es kann die Menge an Spam
reduzieren, die direkt an die persönlichen Adressen der Nutzer des
Verteilers gesandt wird.</para>
<!--
<para>Address hiding can be controversial.  Some people like it a lot,
and will be surprised if your archives don't do it automatically.
Other people think it's too much of an inconvenience (because humans
also have to translate the addresses back before using them).
Sometimes people assert that it's ineffective, because a harvester
could in theory compensate for any consistent encoding pattern.
However, note that there is empirical evidence that address hiding
<emphasis>is</emphasis> effective, see <ulink
url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>
-->
<para>Die Verschleierung von Adressen kann kontrovers sein. Manche
finden, dass es eine gute Idee ist und werden sich wundern wenn Ihre 
Archive es nicht automatisch machen. Andere denken es ist eine zu große 
Unbequemlichkeit (da Menschen auch die Adresse wieder korrigieren 
müssen, vor sie benutzt werden können). Manche behaupten, dass es nicht 
effektiv sei, da Harvester theoretisch jede konsistente Verschleierung, 
ausgleichen können. Es gibt jedoch empirische Beweise, dass die 
Verschleierung von Adressen <emphasis>tatsächlich</emphasis>
funktioniert, siehe 
<ulink url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>
<!--
<para>Ideally, the list management software would leave the choice up
to each individual subscriber, either through a special yes/no header
or a setting in that subscriber's list account preferences.  However,
I don't know of any software which offers per-subscriber or per-post
choice in the matter, so for now the list manager must make a decision
for everyone (assuming the archiver offers the feature at all, which
is not always the case).  I lean very mildly toward turning
address hiding on.  Some people are very careful to avoid posting
their email addresses on web pages or anywhere else a spam harvester
might see it, and they would be disappointed to have all that care
thrown away by a mailing list archive; meanwhile, the inconvenience
address hiding imposes on archive users is very slight, since it's
trivial to transform an obscured address back to a valid one if you
need to reach the person.  But keep in mind that, in the end, it's
still an arms race: by the time you read this, harvesters might well
have evolved to the point where they can recognize most common forms
of hiding, and we'll have to think of something else.</para>
-->
<para>Im Idealfall würde die Listensoftware diese Entscheidung jedem 
Benutzer überlassen, entweder durch einen zusätzlichen Header oder in
den Einstellungen seines Listenkontos. Ich kenne allerdings
keine Software, die diese Entscheidung für jede Nachricht oder jeden
Nutzer ermöglicht, also wird vorerst der Administrator der Liste,
diese Entscheidung für alle übernehmen müssen (angenommen die 
Archivierungssoftware bietet diese Einstellung überhaupt an, was nicht 
immer der Fall ist). Ich ziehe es vor die Verschleierung anzuschalten.
Manche sind sehr vorsichtig Ihre Adresse nicht auf Webseiten oder 
irgendwo anders zu platzieren, an dem ein Spam-Harvester sie finden 
könnte und sie wären enttäuscht, wenn all ihre Mühe vom Archiv einer 
Mailingliste zunichte gemacht würden; zudem ist der Aufwand der durch die
Verschleierung den Nutzern auferlegt wird nur sehr gering, da es 
trivial ist eine verschleierte Adresse zu korrigieren, sollte man die
Person erreichen wollen. Behalten Sie aber das Wettrüsten im 
Hinterkopf: Bis Sie diese Zeilen lesen kann es durchaus sein, dass die 
Harvester sich so weit entwickelt haben, dass sie die häufigsten 
Verschleierungen erkennen können und wir müssen uns wieder etwas neues 
einfallen lassen.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="header-management">
<!--
<title>Identification and Header Management</title>
-->
<title>Umgang mit E-Mail-Headern</title>
<!--
<para>List subscribers often want to put mails from the list into a
project-specific folder, separate from their other mail.  Their
mail reading software can do this automatically by examining the mail's
<firstterm>headers</firstterm>.  The headers are the fields at the top
of the mail that indicate the sender, recipient, subject, date, and
various other things about the message.  Certain headers are
well known and effectively mandatory:</para>
-->
<para>Die Nutzer einer Mailingliste wollen oft die davon stammenden
E-Mails in einem bestimmten Ordner sortieren, getrennt von ihren 
anderen E-Mails. E-Mail-Software kann das automatisch übernehmen,
indem sie die <firstterm>Header</firstterm> der E-Mails untersucht. 
Header sind die Felder im Kopf einer E-Mail, wie Absender, Empfänger, 
Betreff, Datum und verschiedenes andere das Informationen über die
Nachricht enthält. Bestimmte Header sind weit verbreitet und im
wesentlichen Pflichtangaben:</para>

<screen>
From (Von): ...
To (An): ...
Subject (Betreff): ...
Date (Datum): ...
</screen>
<!--
<para>Others are optional, though still quite standard.  For example,
emails are not strictly required to have the</para>
-->
<para>Andere sind optional, wenn auch ziemlich üblich. E-Mails müssen
z.B. genau genommen keinen</para>

<screen>
<!--
Reply-to: sender@email.address.here
-->
Reply-to (Antwort An): absender@email.adresse.hier
</screen>
<!--
<para>header, but most do, because it gives recipients a foolproof way
to reach the author (it is especially useful when the author had to
send from an address other than the one to which replies should be
directed).</para>
-->
<para>Header angeben, tun es aber trotzdem, da es den Empfängern eine 
narrensichere Möglichkeit gibt den Autoren zu erreichen (was besonders 
nützlich ist wenn der Autor die E-Mail von einer anderen Adresse 
senden musste, als diejenige an die die Antworten gerichtet sein sollten).</para>
<!--
<para>Some mail reading software offers an easy-to-use interface for
filing mails based on patterns in the Subject header.  This leads
people to request that the mailing list add an automatic prefix to all
Subjects, so they can set their readers to look for that prefix and
automatically file the mails in the right folder.  The idea is that
the original author would write:</para>
-->
<para>In manchen E-Mail-Programmen ist es einfach, E-Mails anhand von 
verschiedenen Mustern im Betreff unterschiedlich abzulegen. Das führt
zum Bedarf, dass der Verteiler automatisch einen Präfix vor jeden 
Betreff setzen soll, damit E-Mail-Programme danach suchen und 
automatisch Nachrichten in den richtigen Ordnern ablegen können. Die 
Idee ist, dass der Autor folgendes schreiben würde:</para>

<screen>
<!--
Subject: Making the 2.5 release.
-->
Betreff: Erstelle die Version 2.5.
</screen>
<!--
<para>but the mail would show up on the list looking like this:</para>
-->
<para>die Nachricht aber wie folgt ankommen würde:</para>

<screen>
<!--
Subject: [discuss@lists.example.org] Making the 2.5 release.
-->
Betreff: [diskussion@verteiler.beispiel.org] Erstelle die Version 2.5.
</screen>
<!--
<para>Although most list management software offers the option to do
this, I strongly recommend against turning the option on.  The problem
it solves can easily be solved in much less obtrusive ways, and the
cost of eating space in the Subject field is far too high.
Experienced mailing list users typically scan the Subjects of the
day's incoming list mail to decide what to read and/or respond to.
Prepending the list's name to the Subject can push the right side of
the Subject off the screen, rendering it invisible.  This obscures
information that people depend on to decide what mails to open, thus
reducing the overall functionality of the mailing list for
everyone.</para>
-->
<para>Obwohl die meisten Listenlösungen diese Möglichkeit bieten, empfehle 
ich diese Option nicht anzuschalten. Das Problem, kann viel einfacher 
auf eine sehr viel weniger aufdringliche Art gelöst werden, und der 
Preis den man durch verlorenen Platz im Betreff verliert ist viel zu 
hoch. Erfahrene Nutzer von Mailinglisten, suchen die Betreffzeilen 
ihrer im Laufe des Tages eingetroffenen E-Mails ab und entscheiden daran,
ob sie eine Nachricht lesen oder auf sie antworten. Den Namen der
Liste vor dem eigentlichen Betreff zu setzen, kann die rechte Seite 
des Betreffs über den Bildschirmrand hinausschieben, wodurch er
verschwindet. Die Informationen auf denen sich Leser verlassen um zu 
entscheiden, welche Nachrichten Sie öffnen sollen gehen damit z.T. 
verloren und der Nutzen der Liste wird dadurch insgesamt für alle
verringert.</para>
<!--
<para>Instead of munging the Subject header, teach your users to take
advantage of the other standard headers, starting with the To header,
which should say the mailing list's name:</para>
-->
<para>Anstatt die Betreffzeile zu verunstalten, sollten Sie Ihren 
Nutzern beibringen, andere übliche Header zu verwenden, angefangen mit 
dem "To:" Header indem die Adresse der Liste angeben werden
sollte:</para>

<screen>
<!--
To: &lt;discuss@lists.example.org&gt;
-->
To: &lt;diskussion@verteiler.beispiel.org&gt;
</screen>
<!--
<para>Any mail reader that can filter on Subject should be able to filter on
To just as easily.</para>
-->
<para>Jede E-Mail-Software die nach Betreff filtern kann, sollte ebenso 
einfach auch in der Lage sein, nach dem To-Header zu filtern.
</para>
<!--
<para>There are a few other optional-but-standard headers expected for
mailing lists.  Filtering on these is even more reliable than using
the "To" or "Cc" headers; since these headers are added to each post
by the mailing list management software itself, some users may be
counting on their presence:</para>
-->
<para>Es gibt ein paar weitere optionale, aber üblicherweise angegebene 
Header, die bei Mailinglisten erwartet werden. Nach ihnen zu filtern 
ist noch zuverlässiger als die "To" oder "Cc" Header; da diese Header 
von dem Verteiler an jede Nachrichten angehängt werden, verlassen sich
manche Nutzer möglicherweise auf sie:</para>

<screen>
list-help: &lt;mailto:discuss-help@lists.example.org&gt;
list-unsubscribe: &lt;mailto:discuss-unsubscribe@lists.example.org&gt;
list-post: &lt;mailto:discuss@lists.example.org&gt;
Delivered-To: mailing list discuss@lists.example.org
Mailing-List: contact discuss-help@lists.example.org; run by ezmlm
</screen>
<!--
<para>For the most part, they are self-explanatory.  See <ulink
url="http://www.nisto.com/listspec/list-manager-intro.html"/> for more
explanation, or if you need the really detailed, formal specification,
see <ulink url="http://www.faqs.org/rfcs/rfc2369.html"/>.
</para>
-->
<para>Zum größten Teil sind diese selbsterklärend. Siehe 
<ulink url="http://www.nisto.com/listspec/list-manager-intro.html"/> 
für eine weitergehende Erklärung, oder 
<ulink url="http://www.faqs.org/rfcs/rfc2369.html"/> für die 
ausführliche formale Spezifikation.</para>
<!--
<para>Notice how these headers imply that if you have a mailing list
named "list", then you also have administrative addresses "list-help"
and "list-unsubscribe" available.  In addition to these, it is normal
to have "list-subscribe", for joining, and "list-owner", for reaching
the list administrators.  Depending on the list management software
you use, these and/or various other administrative addresses may be
set up; the documentation will have details.  Usually a complete
explanation of all these special addresses is mailed to each new user
as part of an automated "welcome mail" on subscribing.  You yourself
will probably get a copy of this welcome mail.  If you don't, then ask
someone else for a copy, so you know what your users are seeing when
they join the list.  Keep the copy handy so you can answer questions
about the mailing list functions, or better yet, put it on a web page
somewhere.  That way when people lose their own copy of the
instructions and post to ask "How do I unsubscribe from this list?",
you can just hand them the URL.</para>
-->
<para>Beachten Sie auch, dass diese Header durch den Prefix "list" 
implizieren, dass Sie auch administrative Adressen mit den Namen 
"list-help" und "list-unsubscribe" eingerichtet haben. Weitere üblich 
Adressen sind "list-subscribe", um die Liste zu abonnieren und 
"list-owner", um seine Administratoren zu erreichen. Je nachdem welche
Software Sie für Ihre Liste verwenden, werden diese und 
verschiedene andere eingerichtet sein; die Dokumentation wird dazu 
weitere Angaben bietem. Eine vollständige Liste aller Adressen wird
meistens jedem Nutzer als Teil der "Willkommensnachricht", bei der 
Anmeldung zugeschickt. Sie werden selber wahrscheinlich eine Kopie 
dieser E-Mail bekommen. Wenn nicht sollten Sie jemand um eine Kopie
bitten, damit Sie wissen was Ihre Nutzer sehen, sobald sie die 
Liste abonnieren. Behalten Sie sie in Griffweite um Fragen über die
Funktionen der Liste beantworten zu können, bzw. noch besser 
wäre, es irgendwo auf Ihre Webseite zu stellen, um bei Fragen der Form
"Wie kann ich mich abmelden?", Sie einfach auf eine URL weisen 
können.</para>
<!--
<para>Some mailing list software offers an option to append
unsubscription instructions to the bottom of every post.  If that
option is available, turn it on.  It causes only a couple of extra
lines per message, in a harmless location, and it can save you a lot
of time, by cutting down on the number of people who mail you&mdash;or
worse, mail the list!&mdash;asking how to unsubscribe.</para>
-->
<para>Manche Verteiler bieten die Option, an jede Nachricht Anweisungen
anzuhängen, um sich abmelden. Wenn es sie gibt, sollten sie 
angeschaltet werden. Es verbraucht für jede Nachricht nur ein paar 
zusätzliche Zeilen an einer harmlosen Stelle und kann viel Zeit
ersparen, indem es die Anzahl der Nutzer reduziert die an 
Sie &ndash; oder schlimmer noch an die ganze Liste &ndash; Anfragen 
schicken, wie man sich abmelden kann.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="reply-to">
<!--
<title>The Great Reply-to Debate</title>
-->
<title>Die große "reply-to"-Debatte</title>
<!--
<para>Earlier, in <xref linkend="avoid-private-discussions"/>, I stressed the
importance of making sure discussions stay in public forums, and
talked about how active measures are sometimes needed to prevent
conversations from trailing off into private email threads;
furthermore, this chapter is all about setting up project
communications software to do as much of the work for you as possible.
Therefore, if the mailing list management software offers a way to
automatically cause discussions to stay on the list, you would think
turning that feature on would be the obvious choice.</para>
-->
<para>Ich habe vorhin in <xref linkend="avoid-private-discussions"/>
betont, wie wichtig es ist, Diskussionen in den öffentlichen Foren zu 
halten und erwähnte, dass aktive Maßnahmen manchmal nötig sind, um 
zu verhindern, dass Unterhaltungen ins private abgleiten; weiterhin
geht es in diesem Kapitel darum, die Kommunikationssoftware soweit zu 
konfigurieren, dass sie möglichst viel Arbeit übernimmt. Es wäre 
deshalb anzunehmen, dass Verteiler mit einer Möglichkeit, alle
Nachrichten öffentlich zu halten, diese Option offensichtlich
anschalten sollte.</para>
<!--
<para>Well, not quite.  There is such a feature, but it has some
pretty severe disadvantages.  The question of whether or not to use it
is one of the hottest debates in mailing list
management&mdash;admittedly, not a controversy that's likely to make
the evening news in your city, but it can flare up from time to time
in free software projects.  Below, I will describe the feature, give
the major arguments on both sides, and make the best recommendation I
can.</para>
-->
<para>Nun ja, nicht ganz. Es gibt solch eine Funktion, allerdings hat
sie ein paar schwerwiegende Nachteile. Die Frage ob man sie benutzen
soll oder nicht, ist eine der am heißesten debattierten bei der 
Verwaltung von Mailinglisten &ndash; zugegeben, es ist nicht 
unbedingt eine Kontroverse die es auf die Titelseite Ihres Tageblatts
schaffen würde, aber Sie kann in einem freien Software-Projekt ab und
zu aufflammen. Unten werde ich die Funktion beschreiben, die 
Hauptargumente beider Seiten erläutern und die mir bestmögliche
Empfehlung geben.</para>
<!--
<para>The feature itself is very simple: the mailing list software
can, if you wish, automatically set the Reply-to header on every post
to redirect replies to the mailing list.  That is, no matter what the
original sender puts in the Reply-to header (or even if they don't
include one at all), by the time the list subscribers see the post,
the header will contain the list address:</para>
-->
<para>Die Funktion selbst ist relativ einfach: Wenn Sie wollen, kann
der Listen-Software automatisch den Reply-to (de. Antwort an) Header
auf die Adresse der Liste setzen. Was so viel heißt, dass egal 
was der Autor einer E-Mail in den Reply-to Header schreibt (bzw.
selbst wenn er nicht einmal angegeben wird), bei den Empfängern 
der Header mit der Adresse der Liste erscheint:</para>

<screen>
Reply-to: discuss@lists.example.org
</screen>
<!--
<para>On its face, this seems like a good thing.  Because virtually
all mail reading software pays attention to the Reply-to header, now
when anyone responds to a post, their response will be automatically
addressed to the entire list, not just to the sender of the message
being responded to.  Of course, the responder can still manually
change where the message goes, but the important thing is that
<emphasis>by default</emphasis> replies are directed to the list.
It's a perfect example of using technology to encourage
collaboration.</para>
-->
<para>Oberflächlich scheint das eine gute Sache zu sein. Praktisch 
jede E-Mail-Software berücksichtigt den Reply-to Header. Wenn nun 
jemand auf eine Nachricht antwortet, wird seine Nachricht an die 
gesamte Liste gerichtet sein und nicht nur an den Autor der 
ursprünglichen Nachricht. Natürlich kann der Antwortende immer noch 
händisch den Empfänger ändern, wichtig ist aber, dass Antworten 
<emphasis>standardmäßig</emphasis> an die Liste gerichtet sind. Es
ist ein perfektes Beispiel für eine Technik, um gemeinschaftliche 
Arbeit zu unterstützen.</para>
<!--
<para>Unfortunately, there are some disadvantages.  The first is known
as the <firstterm>Can't Find My Way Back Home</firstterm> problem:
sometimes the original sender will put their "real" email address in
the Reply-to field, because for one reason or another they send email
from a different address than where they receive it.  People who
always read and send from the same location don't have this problem,
and may be surprised that it even exists.  But for those who have
unusual email configurations, or who cannot control how the From
address on their mails looks (perhaps because they send from work and
do not have any influence over the IT department), using Reply-to may
be the only way they have to ensure that responses reach them.  When
such a person posts to a mailing list that he's not subscribed to, his
setting of Reply-to becomes essential information.  If the list
software overwrites it, he may never see the responses to his post.</para>
-->
<para>Leider gibt es einige Nachteile. Der erste ist bekannt als 
das <firstterm>Ich-finde-den-Weg-nicht-Nachhause</firstterm>-Problem:
Manchmal setzt der ursprüngliche Absender seine "echte" E-Mail-Adresse
in den Reply-to Header, da er aus irgendeinem Grund die Nachricht von 
einer anderen Adresse absendet, als er Antworten empfangen möchte.
Personen, die immer von der gleichen Adresse absenden und empfangen, 
kennen dieses Problem nicht und viele sind überrascht, dass es das 
Problem überhaupt gibt. Für Leute mit einer ungewöhnlichen 
E-Mail-Konfiguration oder ohne Einfluss auf die Gestalt ihrer E-Mails 
(vielleicht weil sie von der Arbeit schreiben und keinen Einfluss 
auf ihre IT-Abteilung haben), kann der Reply-to Header die einzig
sichere Möglichkeit sein, Antworten an die richtige Adresse zu leiten.
Wenn Sie nun an eine Liste schreiben, ohne in dieser angemeldet zu 
sein, wird ihre Reply-to Einstellung zu einer unabdingbaren Information.
Wenn der Verteiler diese nun überschreibt, wird Sie die Rückmeldung auf 
Ihre Nachricht vielleicht niemals erreichen.</para>
<!--
<para>The second disadvantage has to do with expectations, and in my
opinion is the most powerful argument against Reply-to munging.  Most
experienced mail users are accustomed to two basic methods of
replying: <firstterm>reply-to-all</firstterm> and
<firstterm>reply-to-author</firstterm>.  All modern mail reading
software has separate keys for these two actions.  Users know that to
reply to everyone (that is, including the list), they should choose
reply-to-all, and to reply privately to the author, they should choose
reply-to-author.  Although you want to encourage people to reply to
the list whenever possible, there are certainly circumstances where a
private reply is the responder's prerogative&mdash;for example, they
may want to say something confidential to the author of the original
message, something that would be inappropriate on the public
list.</para>
-->
<para>Der zweite Nachteil betrifft eine Erwartungshaltung, und das ist
meiner Meinung nach das stärkste Argument gegen die Verunstaltung von 
Reply-to. Die meisten erfahrenen E-Mail-Nutzer, sind an zwei 
grundsätzliche Arten zu antworten gewohnt: <firstterm>reply-to-all 
(Antwort an alle)</firstterm> und <firstterm>reply-to-author
(Antwort an Autor)</firstterm>. Alle modernen E-Mail-Programme bieten 
beide Optionen an. Nutzer wissen, dass sie reply-to-all wählen 
sollten um an alle zu antworten (d.h. inklusive der Personen auf der 
Liste), und dass sie reply-to-author wählen sollten, um eine 
private Nachricht an den Autor zu schicken. Auch wenn Sie an jeder
möglichen Stelle zu offenen Diskussionen ermutigen sollten, gibt es
doch Situationen, bei denen der Antwortende eine private Nachricht
bevorzugen sollte &ndash; zum Beispiel wenn er etwas im Vertrauen
an den Autor schreiben möchte, was unangemessen für die öffentliche
Liste wäre.</para>
<!--
<para>Now consider what happens when the list has overridden the
original sender's Reply-to.  The responder hits the reply-to-author
key, expecting to send a private message back to the original author.
Because that's the expected behavior, he may not bother to look
carefully at the recipient address in the new message.  He composes
his private, confidential message, one which perhaps says embarrassing
things about someone on the list, and hits the send key.
Unexpectedly, a few minutes later his message appears <emphasis>on the
mailing list!</emphasis> True, in theory he should have looked
carefully at the recipient field, and should not have assumed anything
about the Reply-to header.  But authors almost always set Reply-to to
their own personal address (or rather, their mail software sets it for
them), and many longtime email users have come to expect that.  In
fact, when a person deliberately sets Reply-to to some other address,
such as the list, he usually makes a point of mentioning this in the
body of the message, so people won't be surprised at what happens when
they reply.</para>
-->
<para>Schauen Sie, was nun passiert, wenn der Verteiler den 
ursprünglichen Reply-to Eintrag überschreibt und der Antwortende auf 
den reply-to-author Knopf drückt, in der Erwartung eine private E-Mail
an den Absender zu schicken. Aufgrund seiner Erwartungshaltung, wird 
er die Adresse des Empfängers vielleicht nicht nochmals überprüfen. Er
hat dabei vielleicht eine geheime, vertrauliche Nachricht verfasst,
mit peinlichen Details über ein Mitglied des Verteilers und drückt nun
auf absenden. Seine Nachricht erscheint nun unerwartet, etwas später
<emphasis>auf dem Verteiler!</emphasis> Zugegeben, theoretisch hätte
er sorgfältig auf das Empfänger-Feld achten sollen, und keine Annahmen
über den Reply-to Header machen sollen. Autoren setzen aber fast immer
Reply-to auf ihre eigene persönliche Adresse (bzw. ihre E-Mail-Software
macht es für sie), und viele langjährige Nutzer, erwarten es 
mittlerweile. Das geht sogar soweit, dass wenn jemand absichtlich 
reply-to auf irgendeine andere Adresse setzt als den Verteiler, er es
explizit in dem Text der E-Mail erwähnt, damit Leute sich bei ihrer 
Antwort nicht wundern.</para>
<!--
<para>Because of the possibly severe consequences of this unexpected
behavior, my own preference is to configure list management software
to never touch the Reply-to header.  This is one instance where using
technology to encourage collaboration has, it seems to me, potentially
dangerous side-effects.  However, there are also some powerful
arguments on the other side of this debate.  Whichever way you choose,
you will occasionally get people posting to your list asking why you
didn't choose the other way.  Since this is not something you ever
want as the main topic of discussion on your list, it might be good to
have a canned response ready, of the sort that's more likely to stop
discussion than encourage it.  Make sure you do
<emphasis>not</emphasis> insist that your decision, whichever it is,
is obviously the only right and sensible one (even if you think that's
the case).  Instead, point out that this is a very old debate, there
are good arguments on both sides, no choice is going to satisfy
all users, and therefore you just made the best decision you
could.  Politely ask that the subject not be revisited unless someone
has something genuinely new to say, then stay out of the thread and
hope it dies a natural death.</para>
-->
<para>Aufgrund der potentiell schwerwiegenden Folgen dieses unerwarteten
Verhaltens, bevorzuge ich es, Verteiler so zu konfigurieren, dass sie
den reply-to Header niemals anfassen. Es ist ein Beispiel für eine
Technik um Zusammenarbeit zu unterstützen, mit wie es mir scheint,
potentiell gefährliche Nebenwirkungen. Auf der anderen Seite dieser 
Debatte gibt es jedoch auch starke Argumente. Es werden Leute, egal wie
Sie sich entscheiden, ab und zu fragen, warum Sie sich nicht anders
entschieden haben. Da sowas niemals zum Hauptthema einer Diskussion 
werden sollte, kann es angebracht sein, hierfür eine vorformulierte 
Antwort parat zu haben, die so gestaltet ist, dass sie die Diskussion
eher beendet als anfeuert. Stellen Sie klar, dass Sie 
<emphasis>nicht</emphasis> darauf bestehen, die einzig richtige und
sinnvolle Entscheidung getroffen zu haben, (selbst wenn Sie das denken).
Deuten statt dessen darauf wie alt diese Debatte ist, dass es gute 
Argumente auf beiden Seiten gibt, keine Entscheidung alle 
zufriedenstellen wird und dass Sie einfach die Ihnen bestmögliche 
Entscheidung getroffen haben. Bitten Sie höfflich darum diese 
Diskussion nicht weiterzuführen, es sei denn jemand hat etwas wirklich
neues zu sagen. Halten Sie sich danach aus dem Thread und hoffen Sie,
dass er eines natürlichen Todes stirbt.</para>
<!--
<para>Someone may suggest a vote to choose one way or the other.  You
can do that if you want, but I personally do not feel that counting
heads is a satisfactory solution in this case.  The penalty for
someone who is surprised by the behavior is so huge (accidentally
sending a private mail to a public list), and the inconvenience for
everyone else is fairly slight (occasionally having to remind someone
to respond to the whole list instead of just to you), that it's not
clear that the majority, even though they are the majority, should be
able to put the minority at such risk.</para>
-->
<para>Jemand wird vielleicht vorschlagen eine Wahl darüber zu halten.
Wenn Sie möchten können Sie das tun, ich persönlich finde es in diesem 
Fall jedoch unzureichend einfach Köpfe zu zählen. Für jemanden, der ein 
gewisses Verhalten erwartet, wäre die Strafe unangemessen hoch 
(versehentliche Sendung einer privaten E-Mail an die Liste) und 
die Unbequemlichkeit für die übrigen Teilnehmer ist relativ gering (ab 
und zu jemand daran erinnern an den ganzen Verteiler zu antworten,
statt nur an den Autor), weshalb man nicht eindeutig sagen kann dass 
die Mehrheit, auch wenn sie das ist, eine Minderheit in solch eine 
Gefahr bringen darf.</para>
<!--
<para>I have not addressed all aspects of this issue here, just the
ones that seemed of overriding importance.  For a full discussion, see
these two canonical documents, which are the ones people always cite
when they're having this debate:
-->
<para>Ich habe nur die wichtigsten Aspekte dieses Themas hier 
angesprochen. Für eine vollständige Behandlung des Themas verweise 
ich auf folgende zwei anerkannten Dokumente, die bei dieser Debatte 
immer wieder zitiert werden:

<itemizedlist>
  <listitem>
<!--
     <para><emphasis role="bold">Leave Reply-to alone</emphasis>,
     <emphasis>by Chip Rosenthal</emphasis></para>
-->
     <para><emphasis role="bold">Lass Reply-to in Ruhe</emphasis>,
     <emphasis>von Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
<!--
     <para><emphasis role="bold">Set Reply-to to list</emphasis>,
     <emphasis>by Simon Hill</emphasis></para>
-->
     <para><emphasis role="bold">Setze Reply-to auf die Liste</emphasis>,
     <emphasis>von Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.net/essays/reply-to.mhtml"/></para>
  </listitem>
</itemizedlist>

</para>
<!--
<para>Despite the mild preference indicated above, I do not feel there
is a "right" answer to this question, and happily participate in many
lists that <emphasis>do</emphasis> set Reply-to.  The most important
thing you can do is settle on one way or the other early, and try not
to get entangled in debates about it after that.</para>
-->
<para>Trotz meiner angedeuteten leichten Präferenz, denke ich nicht,
dass es auf diese Frage eine "richtige" Antwort gibt und beteilige 
mich auch gerne auf vielen Listen die Reply-to setzen. Das 
wichtigste zu diesem Thema ist, sich frühzeitig für das eine oder 
andere zu entscheiden und sich danach nicht zu Debatten über das Thema
verleiten zu lassen.</para>

<sect3 id="reply-fantasies">
<title>Zwei Fantasien</title>

<para>Eines Tages wird jemand auf die geniale Idee kommen, einen
<firstterm>reply-to-list</firstterm> Schlüssel in einer E-Mail 
Software zu implementieren. Es würde irgend welche der vorher 
erwähnten spezifisch Header benutzen, um die Adresse der Mailingliste
herauszufinden und direkt bzw. nur an die Liste zu 
antworten, ohne gesonderte Adresse für den Empfänger, da diese höchst 
wahrscheinlich sowieso die Liste abonniert haben. Mit der Zeit 
werden andere E-Mail-Programme diese Funktion übernehmen und diese 
ganze Debatte wird sich auflösen. (Tatsächlich gibt es sogar eine 
E-Mail-Software namens <ulink url="http://www.mutt.org/">Mutt</ulink> 
mit einer solchen Funktion.<footnote><para> Kurz nachdem dieses Buch 
erschien, schrieb mir 
<ulink url="http://www.michaelbernstein.com/">Michael Bernstein</ulink>
folgende Nachricht: "Es gibt weitere E-Mail-Programme außer Mutt, die 
eine reply-to-list Funktion implementiert haben. Evolution bietet
diese Funktion z.B. wenn auch ohne eigene Schaltfläche, über die 
Tastenkombination (Strg+L)."</para></footnote>)
</para>

<para>Eine noch bessere Lösung wäre es, die Verunstaltung von 
Reply-to jedem selbst zu überlassen. Wer haben möchte, dass der
Verteiler ihre Reply-to Header ändert (entweder nur für ihren eigenen
oder für alle Nachrichten) könnten darum bitten und solche die es 
nicht wollen, könnten bitten es in Ruhe zu lassen. Ich kenne jedoch 
keine Software die so etwas für jeden Benutzer einzeln einstellen lässt. 
Es scheint, dass wir derzeit mit einer globalen Einstellung für alle
leben müssen.<footnote><para>Seitdem ich das schrieb, habe ich
zumindest von einer Mailinglisten-Software erfahren, die diese 
Funktion anbietet: 
<ulink url="http://siesta.unixbeard.net/">Siesta</ulink>. Siehe dazu
auch diesen Artikel:
<ulink url="http://www.perl.com/pub/a/2004/02/05/siesta.html"/></para></footnote></para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="archiving">
<title>Archivierung</title>

<para>Wie man genau ein Archiv für Mailinglisten einrichtet, ist bei
jeder Listen-Software unterschiedlich, und würde den Rahmen dieses Buchs
sprengen. Wenn Sie ein Programm zur Archivierung wählen oder konfigurieren,
sollten Sie auf folgendes achten:</para>

<variablelist>

  <varlistentry><term>Zeitnahe Aktualisierung</term>
    <listitem>
      <para>Teilnehmer werden oft auf eine archivierte Nachricht
            verweisen wollen, die erst vor ein oder zwei Stunden 
			gepostet wurde. Wenn möglich sollte die Software jede
			Nachricht sofort archivieren, sodass im gleichen Moment,
			indem es vom Verteiler versandt wird, es auch im Archiv
			ist. Wenn diese Option nicht verfügbar ist, versuchen Sie
			die Software zumindest so einzustellen, dass es sich ca. 
			jede Stunde aktualisiert. (Standardmäßig lässt mache 
			Software die Aktualisierung ein Mal jede Nacht laufen, was
			aber bei einer aktiven Mailingliste in der Praxis eine
			viel zu große Verzögerung bedeutet.)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Link Stabilität</term>
    <listitem>
      <para>Sobald eine E-Mail unter einer bestimmten URL archiviert
            wurde, sollte sie ewig, bzw. so lang wie möglich unter 
            genau der gleichen URL erreichbar sein. Selbst wenn die 
            Archive neu aufgebaut werden, aus einem Backup
            wiederhergestellt werden oder sonstwie repariert werden, 
            sollte jede öffentlich bekannte URL weiterhin gültig sein.
			Stabile Verweise ermöglichen es Suchmaschinen die Archive
			zu indexieren und das ist für Nutzer die auf der Suche nach
			einer bestimmten Nachricht sind, ein großer Segen. Stabile
			Verweise sind auch wichtig, da der Bugtracker (siehe 
            <xref linkend="bug-tracker"/>)<phrase output="printed"> 
            später in diesem Kapitel</phrase> oder Dokumente des 
			Projekts oftmals auf darin enthaltene Nachrichten
            verweisen.</para>

      <para>Idealerweise würde die Mailinglisten-Software eine URL 
            der jeweiligen Nachricht im Archiv, in einem Header 
            mitschicken oder zumindest den URL-Teil, spezifisch für 
            die E-Mail. So weiß jeder mit einer Kopie der E-Mail, wo 
            es im Archiv zu finden ist, ohne die Archive tatsächlich 
            aufsuchen zu müssen, was hilfreich wäre da jeder Vorgang 
            mit dem Browser, automatisch einen größeren Zeitaufwand
            bedeutet. Ich weiß nicht ob irgendeine Listen-Software 
            diese Funktion anbietet; diejenigen die ich benutzt habe, 
            können es leider nicht. Es ist allerdings etwas nachdem 
            man suchen sollte (oder falls Sie Mailinglisten-Software 
            schreiben, wäre es eine Funktion, die Sie bitte
            in Erwägung ziehen sollten).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Backup</term>
    <listitem>
      <para>Es sollte ziemlich offensichtlich sein wie man Sicherungen
            des Archivs macht und der Vorgang um sie wiederherzustellen
			sollte nicht zu schwierig sein. Mit anderen Worten, 
			behandeln Sie Ihr Archiv nicht wie eine Blackbox. Sie (oder
			jemand aus Ihrem Projekt) sollte wissen wo die Nachrichten
			gespeichert werden und wie die Seiten des Archivs 
			sich wiederherzustellen lassen, sollte es jemals nötig 
			werden. Diese Archive sind wertvolle Daten &ndash; wenn ein
			Projekt sie verliert, geht auch ein großer Teil seiner 
			kollektiven Erinnerung verloren.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Unterstützung für Threads</term>
    <listitem>
      <para>Es sollte möglich sein, von jeder Nachricht aus, zu seinem
			zugehörigen <firstterm>thread</firstterm> (eine Gruppe
			verwandter Nachrichten) zu gehen. Jeder Thread sollte auch
			seine eigene URL haben, getrennt von denen seiner einzelnen 
            Nachrichten.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Suchfunktion</term>
    <listitem>
      <para>Ein Archiv das man nicht durchsuchen kann &ndash; sowohl
            Volltext, als auch Betreffzeilen &ndash; ist nahezu wertlos.
			Bedenke, dass manche Archive ihre Suchfunktion über eine
			externe Suchmaschinen wie 
            <ulink url="http://www.google.com/">Google</ulink> 
            anbieten, indem sie die Arbeit einfach auslagern. Das 
            ist zwar akzeptable, aber eine direkte Suchfunktion ist 
            meistens besser abgestimmt, da es dem Suchenden z.B. 
			erlaubt, nur die Betreffzeile zu durchsuchen oder den
			gesamten Text.</para>
    </listitem>
  </varlistentry>

</variablelist>

<para>Obiges ist lediglich eine Checkliste, um Ihnen die Evaluierung und
Einrichtung der Software für ihre Archive zu erleichtern. Leute zu
überreden es wirklich zum Vorteil des Projekts zu 
<emphasis>benutzen</emphasis> wird in späteren Kapiteln behandelt, 
insbesondere im Abschnitt <xref linkend="using-archives"/>.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="mailing-list-software">
<title>Mailinglisten-Software</title>

<para>Hier sind einige Open-Source-Programme für die Verwaltung von
Listen und Archives. Wenn Ihre Projektseite bereits vorkonfiguriert
wurde, werden Sie sich u.U. niemals für eines entscheiden müssen. Wenn 
Sie es jedoch selber einrichten müssen, sind hier einige Optionen. Zu 
der Software, die ich tatsächlich benutzt habe gehört Mailman, Etmlm, 
MHonArc, und Hypermail, was aber keine Aussage über andere sein soll
(und natürlich gibt es bestimmt auch andere Programme die ich einfach
nicht gefunden habe, betrachten Sie diese Liste also nicht als 
vollständig).</para>

<para>Software für Mailinglisten:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">Mailman</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.list.org/"/></para>
   <para>(Mit einem eingebauten Archiv und die Möglichkeit externe 
         einzubinden.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">SmartList</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>(Für die Nutzung mit Procmail gedacht.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ecartis</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.ecartis.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">ListProc</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://listproc.sourceforge.net/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ezmlm</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://cr.yp.to/ezmlm.html"/></para>
   <para>(Entworfen für 
         <ulink url="http://cr.yp.to/qmail.html">Qmail</ulink>.)</para> 
 </listitem>
 <listitem>
   <para><emphasis role="bold">Dada</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://mojo.skazat.com/"/></para>
   <para>(Trotz des bizarren Versuchs der Webseite die Tatsache zu
         verstecken, dass sie freie Software ist, wird sie unter der 
         GNU GPL veröffentlicht. Es hat auch einen eingebauten 
         Archiv.)</para>
 
 </listitem>
</itemizedlist>

<para>Software zur Archivierung:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">MHonArc</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.mhonarc.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Hypermail</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.hypermail.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Lurker</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://sourceforge.net/projects/lurker/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Procmail</emphasis>&nbsp;&ndash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>(Begleitend zu SmartList, eine allgemeine Software zur 
         Verarbeitung von E-Mails und scheinbar auch als Archiv
         konfigurierbar.)</para>
 </listitem>
</itemizedlist>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="vc">
<title>Versionsverwaltung</title>

<para>Eine <firstterm>Versionsverwaltung<footnote><para>im Deutschen
auch manchmal "Versionskontrolle" genannt.</para></footnote></firstterm>
(en. Version Control) ist eine Kombination verschiedener Techniken
und Verfahren um Änderung an den Dateien eines Projekts, insbesondere
Quellcode, Dokumentation und Webseiten, zu verfolgen und verwalten. Wenn
Sie Versionsverwaltung noch nie benutzt haben, sollten Sie sich als
Erstes jemand suchen die es kennt und sie überreden dem Projekt
beizutreten.  Heutzutage wird jeder erwarten, dass zumindest Ihr
Quellcode unter Versionsverwaltung steht und keiner wird Ihr Projekt
ernst nehmen, wenn es nicht zumindest halbwegs kompetent mit seiner 
Versionsverwaltung umgeht.</para>

<para>Versionsverwaltung ist beim betrieb eines Projekts allgegenwärtig
weile es in nahezu jedem Bereich hilft: Kommunikation unter den 
Entwicklern, Veröffentlichung neuer Versionen, Bug-Verwaltung, 
Code-Stabilität und experimentelle Entwicklungen sowie die Annahme von und
Anerkennung für Änderungen durch bestimmte Entwickler. Die
Versionsverwaltung kann all diese Bereiche zentral koordinieren. Der 
Kern der Versionsverwaltung ist die Verwaltung von Änderungen (en.
<firstterm>change management</firstterm>: Sie identifiziert jede 
einzelne Änderung an den Dateien eines Projekts, fügt ihnen Metadaten 
bei, wie das Datum der Änderung, den Namen des Autors und kann jedem der
danach sucht, diese auf die gewünschte Art aufbereiten. Sie ist eine
Methode zur Kommunikation, bei dem eine Änderung die grundlegende 
Einheit der Information ist.</para>

<para>Dieser Abschnitt behandelt nicht alle Aspekte der Bedienung 
einer Versionsverwaltung. Dieses Thema ist derart umfassend, dass es im
Verlaufe des Buchs immer wieder angesprochen werden muss. Hier werden 
wir uns darauf konzentrieren ein Versionsverwaltung auszuwählen und 
einzurichten, sodass es später die gemeinschaftliche Entwicklung 
unterstützt.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="vc-vocabulary">
<title>Vokabular der Versionsverwaltung</title>

<para>Dieses Buch kann Ihnen die Bedienung einer Versionsverwaltung 
nicht beibringen ohne vorherige Erfahrung, es wäre aber unmöglich das 
Thema zu behandeln, ohne ein paar Begriffe zu klären. Diese sind 
unabhängig von der eingesetzten Versionsverwaltung: Sie sind die
grundsätzlichen Nomen und Verben der gemeinsamen Arbeit im Netzwerk
und sie werden immer wieder im Verlaufe des Buches aufkommen. Selbst
wenn es keine Versionsverwaltung gäbe, bestünde das Problem der
Verwaltung von Änderungen und diese Wörter geben uns eine Sprache um
präzise und prägnant über das Problem zu reden.

<variablelist>

 <varlistentry id="vc-vocabulary-commit">
  <term><firstterm>Commit</firstterm></term>
  <listitem><para>Eine Änderung an dem Projekt vornehmen; formeller
  gesagt, eine Änderung in die Versionsverwaltung zu speichern, sodass
  es in zukünftige Versionen des Projekts eingebunden werden kann.
  "Commit" (de. festlegen) kann als Nomen oder als Verb benutzt werden.
  Als Nomen ist es im wesentlichen ein Synonym für Änderung. Beispiel:
  "Ich habe eben einen Bugfix der bei Nutzern von Max OS X, Abstürze
  ihrer Server verursacht hat committed, Jay könntest du dir bitte den
  Commit anschauen und überprüfen, dass ich dort mit der Speicher
  Zuweisung nicht falsch umgehe?"</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-log-message">
  <term><firstterm>Commit-Log</firstterm></term>
  <listitem><para>Ein Kommentar der an jedem Commit angehängt wird,
  mit einer Beschreibung über die Änderung und sein Nutzen.
  Commit-Kommentare sind mitunter die wichtigsten Dokumente in einem
  Projekt: Sie sind die Brücke zwischen der äußerst technischen 
  Sprache der einzelnen Änderungen am Code und der eher Nutzer 
  orientierten Sprache der Funktionen, Bugfixes und dem 
  Projektfortschritt. Später in diesem Abschnitt werden wir uns
  Möglichkeiten anschauen, Commit-Logs für das entsprechend
  angemessene Publikum zu veröffentlichen; ebenso sind in  
  <xref linkend="codifying-tradition"/><phrase output="printed"> im 
  Kapitel <xref linkend="communications"/></phrase> Methoden 
  beschrieben, Beteiligte dazu anzuregen, kurze prägnante und nützliche 
  Commit-Kommentare zu schreiben.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-update">
  <term><firstterm>Update</firstterm></term>
  <listitem><para>Eine Anfrage die Änderungen (Commits) anderer
  Teilnehmer in die eigenen lokalen Kopie des Projekts einzubinden; 
  bzw. Ihre Kopie zu aktualisieren. Dies ist ein sehr häufiger 
  Vorgang; die meisten Entwickler aktualisieren ihren Code mehrmals 
  am Tag um sicherzustellen, dass sie ungefähr das Gleiche benutzen, 
  wie die anderen Entwickler und beim Auffinden eines Fehlers sicher
  sein zu können, dass er noch nicht behoben wurde. z.B.: "Hallo, ich 
  habe bemerkt, dass der Code für die Indexierung immer das letzte 
  Byte fallen lässt. Ist das ein neuer Bug?". "Ja, aber er wurde letzte
  Woche behoben &ndash; versuch mal ein Update zu machen, dann sollte 
  er verschwinden."</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-repository">
  <term><firstterm>Projektarchiv</firstterm></term> (engl. Repository)
  <listitem><para>Die Datenbank der Versionsverwaltung in der 
  Änderungen gespeichert werden. Manche Systeme sind zentralisiert: Es 
  gibt ein Projektarchiv, in dem alle Änderungen am Projekt gespeichert
  werden. Andere sind dezentralisiert: dort hat jeder Entwickler sein 
  eigenes Projektarchiv, und Änderungen können beliebig hin und her 
  getauscht werden. Die Versionsverwaltung verfolgt die Abhängigkeiten 
  zwischen den Änderungen und wenn es Zeit wird, eine neue Version zu 
  herauszugeben, bekommt ein bestimmter Satz von Änderungen den Zuspruch als
  neue Version. Die Frage welche der beiden besser ist, ist ein weiterer
  der andauernden heiligen Kriege der Softwareentwicklung; versuchen
  Sie nicht in die Falle zu tappen, auf Ihrer Mailingliste darüber zu
  streiten.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-checkout">
  <term><firstterm>Checkout</firstterm></term>
  <listitem><para>Sich eine Kopie des Projekts aus dem Projektarchiv zu 
  beschaffen. Ein Checkout produziert meistens eine Verzeichnisstruktur,
  auch als Arbeitsverzeichnis (siehe unten) bekannt, von dem aus 
  Änderungen wieder zurück ins Projektarchiv übertragen werden können.
  Bei manchen dezentralisierten Versionsverwaltungen ist jedes
  Arbeitsverzeichnis selbst ein eigenes Projektarchiv, von dem
  aus Änderungen an jedes Projektarchiv hoch- oder heruntergeladen werden
  können, das sie annehmen möchte.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-working-copy">
  <term><firstterm>Arbeitsverzeichnis<footnote><para>engl. "working
  copy"</para></footnote></firstterm></term>
  <listitem><para>Der private Verzeichnisbaum eines Entwicklers, 
  mit dem Quellcode des Projekts und möglicherweise seine Webseite 
  oder andere Dokumente. Eine Arbeitskopie enthält auch ein paar 
  Metadaten, die von der Versionsverwaltung benutzt werden um zu 
  Kennzeichen, von welchem Projektarchiv sie kommt, welche "Revision" 
  (siehe unten) der Dateien vorliegen, usw. Im allgemeinen hat jeder 
  Entwickler seine eigenes Arbeitsverzeichnis, indem er seine 
  Änderungen macht, prüft und anschließend als Commit an das
  Projektarchiv schickt.</para></listitem></varlistentry>

 <varlistentry id="vc-vocabulary-revision">
  <term><firstterm>Revision</firstterm><footnote><para> im engl. auch
  <firstterm>change</firstterm> oder 
  <firstterm>changeset</firstterm> (de. Satz von 
  Änderungen)</para></footnote></term>
  <listitem><para>Eine "Revision" ist für gewöhnlich eine bestimmte
  Version einer Datei oder einem Verzeichnis. Wenn das Projekt z.B.
  mit der Revision 6 der Datei D anfängt und dann jemand eine Änderung
  an D committed, entsteht die Revision 7 von D. Manche Systeme
  benutzen "Revision" auch als Bezeichnung für einen ganzen Satz an 
  Änderungen die zusammen als Einheit committed wurden.</para>

  <para>Diese Begriffe haben ab und zu eine Bestimmte technische 
  Bedeutung abhängig von der Versionsverwaltung, im Allgemeinen ist 
  die Idee jedoch immer die gleiche: Sie ermöglichen es genau über 
  bestimmte Zeitpunkte in der Geschichte einer Datei zu reden (wie, 
  direkt vor und nachdem ein Fehler behoben wurde). Beispielsweise: 
  "Ja, sie hat das in Revision 10 behoben" oder "Sie hat das in 
  Revision 10 von foo.c behoben."</para>

  <para>Wenn man von einer Datei oder einer Sammlung von Dateien 
  spricht ohne eine bestimmte Revision anzugeben, geht man im 
  Allgemeinen von der aktuellsten Revision aus.</para></listitem>
 </varlistentry>

  <sidebar id="version-vs-revision">
  <title>"Version" kontra "Revision"</title>
  <para>Das Wort <firstterm>Version</firstterm> wird manchmal als
  Synonym für "Revision" benutzt, ich werde es jedoch in diesem Buch 
  nicht auf diese Art verwenden da es zu leicht mit "Version" im 
  Sinne einer bestimmten Version einer Software &ndash; also eine
  Veröffentlichung, mit einer Versionsnummer wie "Version 1.0", zu 
  verwechseln ist . Da der Begriff Versionsverwaltung bereits geläufig 
  ist, werden ich diesen trotzdem weiterhin verwenden.</para>
  </sidebar>

 <varlistentry id="vc-vocabulary-diff">
  <term><firstterm>Diff</firstterm><footnote><para>kurz für
  <foreignphrase>difference</foreignphrase>(de.
  Unterschied)</para></footnote></term> <listitem><para>Eine textuelle
  Representation einer Änderung. Ein Diff zeigt wie und welche Zeilen
  geändert wurden, sowie ein paar zusätzliche Zeilen um einen Kontext zu
  geben. Ein Entwickler der bereits ein wenig mit dem Code vertraut ist,
  kann für gewöhnlich ein Diff lesen und verstehen was die Änderung 
  gemacht hat und sogar Fehler bemerken.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-tag">
  <term><firstterm>Tag<footnote><para>de. 
  Etikett</para></footnote></firstterm></term>
  <listitem><para>Eine Beschriftung einer bestimmen Menge an Dateien
  ganz bestimmter Revisionen. Tags werden üblicherweise benutzt um 
  interessante Revisionen des Projekts zu bewahren. Für jede neue 
  veröffentlichte Version wird z.B. ein neuer "Tag" erstellt, um später
  genau dieselben Dateien/Revisionen aus der Versionsverwaltung
  herunterladen zu können. Häufige "Tag" Bezeichnungen sind 
  <literal>Version_X_Y</literal>, 
  <literal>Auslieferung_00456</literal>, usw.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-branch">
  <term><firstterm>Branch<footnote><para>de. 
  Zweig/Ast</para></footnote></firstterm></term><listitem><para>Eine
  Kopie des Projekts in der Versionsverwaltung, die aber vom Hauptzweig
  isoliert ist, damit Änderungen nicht das Übrige Projekt beeinflussen
  und umgekehrt, außer wenn Änderungen absichtlich von einer Seite zur
  Anderen portiert werden (siehe unten). Ein Branch kann man auch als
  Entwicklungszweig bezeichnen. Selbst wenn ein Projekt nicht explizit
  irgendwelche Zweige hat, gibt es dennoch einen sogenannten 
  "Hauptzweig"<footnote><para>engl. "main branch" auch "main line" oder 
  "<firstterm>trunk</firstterm>" de. "Stamm"</para></footnote>als den
  Zweig auf dem die Entwicklung stattfindet.</para>

  <para>Zweige bieten bei der Entwicklung, die Möglichkeit verschiedene
  Richtungen getrennt zu verfolgen. Ein Zweig kann z.B. für 
  experimentelle Entwicklung benutzt werden, die für den Hauptzweig 
  nicht stabil genug wären. Umgekehrt kann ein Zweig auch als Ort 
  benutzt werden um eine neue Version zu stabil zu bekommen. Während der
  Entwicklung kann die reguläre Entwicklung im Hauptzweig ohne
  Unterbrechung weiterlaufen; währenddessen werden auf dem Zweig der 
  neuen Version keine Änderungen mehr zugelassen, außer sie werden von
  einem Versionsverwalter genehmigt. Auf diese Art, muss eine neue
  Version die laufende Entwicklung nicht stören. Siehe 
  <xref linkend="branches"/><phrase output="printed">später in diesem 
  Kapitel</phrase> für eine detailliertere Erörterung über 
  Zweige.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-merge">
  <term><firstterm>Merge<footnote><para>im engl. auch "port" de. 
  Zusammenführung/Portierung</para></footnote></firstterm></term>
  <listitem><para>Eine Änderung von einem Zweig in ein Anders 
  übernehmen. Was auch portieren von Änderungen aus dem Hauptzweig in
  einem anderen Zweig oder umgekehrt bedeuten kann. Tatsächlich ist
  das sogar die häufigste Art zu mergen; man portiert selten eine
  Änderung zwischen zwei Zweige, die nicht beide Hauptzweige sind. 
  Siehe <xref linkend="vc-singularity"/> für mehr zu dieser Art zu
  portieren.</para>

  <para>"Merge" hat eine zweite, verwandte Bedeutung: Die 
  Versionsverwaltung macht einen Merge, wenn zwei Leute die gleiche 
  Datei bearbeitet haben, sodass die Änderungen sich nicht überlappen.
  Da die Änderungen nicht miteinander kollidieren, werden die 
  Änderungen in die eigenen Kopie (mit eigenen Änderungen) übertragen,
  bzw. die Kopie wird aktualisiert. Das kommt sehr häufig vor, 
  besonders in Projekten bei dem mehrere Entwickler am gleichen Code 
  arbeiten. Wenn zwei verschiedene Änderungen <emphasis>doch</emphasis> 
  überlappen, gibt es einen "Konflikt"; siehe unten.</para>
  </listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-conflict">
  <term><firstterm>Konflikt</firstterm></term>
  <listitem><para>Was geschieht wenn zwei Personen gleichzeitig 
  unterschiedliche Änderungen vornehmen, an der gleichen Stelle im Code.
  Jede Versionsverwaltung erkennt Konflikte automatisch, und 
  benachrichtigt mindestens einen der Beteiligten, dass ihre 
  Änderungen mit denen von anderen kollidieren. Der Konflikt muss 
  dann von einem Menschen bereinigt (engl. <firstterm>resolve</firstterm>)
  und an die Versionsverwaltung übermittelt werden.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-lock">
  <term><firstterm>Lock</firstterm></term>
  <listitem><para>(de. Schloss/Sperre) Eine Möglichkeit eine exklusive
  Absicht auf eine Datei oder ein Verzeichnis zu erklären. z.B.: "Ich 
  kann gerade keine Änderungen an der Webseite machen. Es scheint das 
  Alfred alles gesperrt hat während er die Hintergrundbilder
  korrigiert". Nicht jede Versionsverwaltung bieten überhaupt die 
  Möglichkeit Dateien zu sperren, und solche die es tun erfordern 
  nicht alle, dass sie auch benutzt wird. Das liegt daran, dass 
  parallele, gleichzeitige Entwicklung der Normalfall ist und Sperren
  auf Dateien, diesem Ideal (üblicherweise) widersprechen.</para>

  <para>Eine Versionsverwaltung die einen Lock erfordert um einen 
  Commit zu machen, benutzt das sogenannte 
  <firstterm>lock-modify-unlock</firstterm> Verfahren. Solche die es 
  nicht erfordern, nutzen das <firstterm>copy-modify-merge</firstterm>
  Verfahren. Eine ausgezeichnete tiefgehende Erklärung und Vergleich 
  der beiden Methoden ist auf
  <ulink url="http://svnbook.red-bean.com/svnbook-1.0/ch02s02.html"/>
  zu finden. Im allgemeinen ist die copy-modify-merge Methode besser
  für die Open-Source-Entwicklung und jede Versionsverwaltung in 
  diesem Buch unterstützen sie.</para>
  </listitem>
 </varlistentry>

</variablelist>

</para>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-choosing">
<title>Wahl einer Versionsverwaltung</title>

<para>Zum Zeitpunkt dieses Schreibens sind die zwei verbreitetsten 
Systeme für Versionsverwaltung in der Welt der freien Software das 
<firstterm>Concurrent Versions System</firstterm> oder auch 
<firstterm>CVS</firstterm> (<ulink url="http://www.cvshome.org/"/>)
und <firstterm>Subversion</firstterm> (<firstterm>SVN</firstterm>,
<ulink url="http://subversion.tigris.org/"/>).</para>

<para>CVS gibt es schon lange. Die meisten erfahrenen Entwickler sind
bereits damit vertraut, es erledigt die Aufgabe mehr oder weniger gut
und da es die Norm ist, werden Sie keine lange Debatten darüber führen
müssen ob es die richtige Wahl war. CVS hat jedoch einige Nachteile.
Es bietet keine einfache Möglichkeit an, Änderungen über mehrere
Dateien abzufragen; es erlaubt nicht, Dateien im Projektarchiv
umzubenennen oder zu kopieren (was besonders nervt, wenn Sie Ihren Code 
neu organisieren wollen, nachdem Sie das Projekt gestartet haben); es 
bietet nur dürftige Merge-Unterstützung an; es kann nicht sonderlich 
gut mit großen oder binären Dateien umgehen; und manche Vorgänge sind
bei vielen Dateien sehr langsam.</para>

<para>Kein Fehler von CVS ist fatal und es ist immer noch ziemlich 
beliebt. In den vergangenen Jahren hat das neuere Subversion an Boden
gewonnen, inbesondere bei neuen Projekten.<footnote><para>Siehe
<ulink url="http://cia.vc/stats/vcs"/> und <ulink 
url="http://subversion.tigris.org/svn-dav-securityspace-survey.html"/>
für beweise für dieses Wachstum.</para></footnote>. Wenn Sie ein neues
Projekt anfangen, empfehle ich Ihnen Subversion.</para>

<para>Da ich andererseits auch an dem Subversion-Projekt arbeite,
könnte man meine objektivität berechtigt in Frage stellen. In den
letzden Jahren sind ein paar neue Versionsverwaltungssysteme 
erschienen. <xref linkend="vc-systems"/> listet alle mir bekannten 
auf. Wie diese Liste klar macht kann die Entscheidung für eine 
Versionsverwaltung zu einem lebenslangen Forschungsprojekt werden. 
Möglicherweise wird Ihnen die Entscheidung erspart bleiben weil sie 
von Ihrer Hosting-Seite bereits getroffen wurde. Wenn Sie sich aber 
für eines entscheiden müssen, fragen Sie andere Entwickler, finden 
Sie heraus womit Andere bereits Erfahrung haben, suchen Sie sich 
eines aus und bleiben Sie dabei. Jede stabile, ausgereifte 
Versionsverwaltung reicht aus; Sie müssen sich keine Sorgen darüber 
machen, dass Sie eine furchtbar schlechte Entscheidung treffen werden.
Wenn Sie sich einfach nicht entscheiden können, dann nehmen Sie CVS. 
Es ist immer noch die Norm und wird es auch wahrscheinlich ein paar 
Jahre lang bleiben. Viele andere Systeme unterstützen auch die 
Konvertierung in eine Richtung von einem CVS Archiv, Sie können sich 
also später auch umentscheiden.</para>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-using">
<title>Nutzung einer Versionsverwaltung</title>

<para>Die Empfehlungen in diesem Abschnitt sind nicht auf eine
bestimmte Versionsverwaltung abgestimmt und sollten in allen Systemen
einfach zu implementieren sein. Für weitere Details, schlagen Sie in 
der Dokumentation Ihrer Versionsverwaltung nach.</para>

<sect3 id="version-everything">
<title>Versioniere alles</title>

<para>Benutzen Sie die Versionsverwaltung nicht nur für den Quellcode 
Ihres Projekts, sondern auch die Webseite, Dokumentation, FAQ, 
Entwurfsskizen und alles andere, was jemand vielleicht bearbeiten
möchte. Behalten Sie alles direkt neben dem Quellcode, im selben
Projektarchiv. Jede Information, die sich lohnt niederzuschreiben, ist es 
auch Wert im Projektarchiv zu sein &ndash; also jede Information die
sich ändern könnte. Sachen die sich nicht ändern, sollten archiviert 
und nicht versioniert werden. Eine E-Mail ändert sich beispielsweise
nicht, wenn sie einmal abgeschickt wurde; deshalb würde es keinen 
Sinn machen sie zu versionieren (es sei denn sie wird zu einem Teil 
eines größeren, sich entwickelnden Dokuments).</para>

<para>Der Grund warum es wichtig ist alles an einem Ort zu 
versionieren ist, dass Personen nur eine Methode lernen müssen um 
Änderungen einzureichen. Oftmals, wird ein Beteiligter damit anfangen 
Änderungen an der Webseite oder der Dokumentation zu machen, und gehen
später dazu über kleine Beiträge am Quellcode zu machen. Wenn das 
Projekt dasselbe System für alle Beiträge verwendet, müssen Beteiligte
nur eine Methode lernen. Alles zusammen zu versionieren, bedeutet 
auch, dass neue Funktionen gleich zusammen mit ihrer zugehörigen 
Aktualisierungen an der Doku eingereicht werden können, sodass ein 
Zweig für den Code auch ein Zweig für die Doku mit sich bringt, 
usw.</para>

<para>Behalten Sie keine <firstterm>generierte Dateien</firstterm> im
Projektarchiv. Sie sind nicht wirklich bearbeitbare Daten, da sie aus
anderen Daten erzeugt werden. Manche Build-Systeme erzeugen
beispielsweise <filename>configure</filename> aus der Vorlage
<filename>configure.in</filename>. Um eine Änderung an 
<filename>configure</filename> vorzunehmen, würde man 
<filename>configure.in</filename> bearbeiten und es daraus neu 
erzeugen lassen; weßhalb lediglich die Vorlage 
<filename>configure.in</filename> "bearbeitbar" ist. Versionieren Sie 
lediglich die Vorlage &ndash; wenn Sie die erzeugten Dateien auch 
versionieren, wird man zwangsläufig vergessen sie neu zu erzeugen
nachdem man eine Änderung an einer Vorlagen eingespielt hat. Die 
daraus resultierende Inkonsistenz wird endlose Verwirrung 
stiften.<footnote><para>Eine andere Meinung im Bezug auf die 
Versionierung von <filename>configure</filename> Dateien, kann man in 
"<citetitle>configure.in and version control</citetitle>" bei 
<ulink url="http://versioncontrolblog.com/2007/01/08/configurein-and-version-control/"/>
von Alexey Makhotkin nachlesen.</para></footnote></para>

<para>Zu der Regel, dass alle bearbeitbare Dateien im Projektarchiv
sein sollten, gibt es eine Ausnahme: den Bugtracker. Eine 
Bug-Datenbank enthält eine Menge bearbeitbarer Daten, kann aber aus
technischen Gründen diese Daten im allgemeinen nicht im Projektarchiv
speichern. (Manche Tracker haben eigene primitive Funktionen zur
Versionierung, die allerdings von der Versionsverwaltung des Projekts 
getrennt ist.)</para>

</sect3>

<sect3 id="vc-browsing">
<title>Zugang per Browser</title>

<para>Das Projektarchiv eines Projekts sollte per Browser erreichbar sein.
Das bedeutet nicht nur die neuste Version der 
einzelnen Dateien einsehen zu können, sondern auch in der Zeit zurück 
zu gehen und frühere Revisionen der Dateien zu sehen, die Unterschiede
zwischen den verschiedenen Versionen der Dateien sehen zu können, die 
commit-logs bestimmter Änderungen lesen zu können, usw.</para>

<para>Der Browser-Zugang ist wichtig, denn er bietet ein
leichtgewichtiges Portal zu den Projekt-Daten. Ist der Zugriff
per Browser nicht möglich, dann würde jemand, nur um
eine bestimmte Datei zu untersuchen (sagen wir, um nachzuschauen
ob ein bestimmter Bugfix es in den Code geschafft hat), zuerst
lokal eine Versionsverwaltungs-Software installieren müssen, was eine
einfache zweiminutige Anfrage zu einer halbstündigen Aufgabe macht.</para>

<para>Der Browser-Zugang erlaubt auch normale URLs auf bestimmte Revisionen 
von Dateien oder die jeweils aktuellste Revisionen. Das 
kann bei technischen Diskussionen sehr nützlich sein, oder falls man jemanden 
auf die Dokumentation verweisen will. Man könnte zum Beispiel anstatt 
"Eine ausführliche Anleitungen zum Fehlermanagement enthält die Datei
community-guide/index.html deiner lokalen Arbeitskopie." folgendes schreiben:
"Eine ausführliche Anleitungen zum Fehlermanagement kannst du unter
<emphasis>http://subversion.apache.org/docs/community-guide/</emphasis>
nachlesen.", wobei die URL auf die aktuelle Version der Datei zeigt. 
Die URL ist überlegen: sie ist eindeutig und erübrigt die Frage,
ob der Angesprochene wirklich eine aktuelle Arbeitskopie verwendet.</para>

<para>Manche Versionsverwaltungssysteme haben eine eingebaute Funktion
um das Projektarchiv online zu durchsuchen, andere verlassen sich hierfür
auf zusätzliche Software. Drei Beispiele hierfür sind 
<firstterm>ViewCVS</firstterm> 
(<ulink url="http://viewcvs.sourceforge.net/"/>), 
<firstterm>CVSWeb</firstterm> 
(<ulink url="http://www.freebsd.org/projects/cvsweb.html"/>), und
<firstterm>WebSVN</firstterm> 
(<ulink url="http://websvn.tigris.org/"/>). Ersteres funktioniert 
sowohl mit CVS als auch Subversion, das Zweite nur mit CVS und 
Letzteres nur mit Subversion.</para>

</sect3>

<sect3 id="commit-emails">
<title>Commit-E-Mails</title>

<para>Jeder Commit an das Projektarchiv sollte eine E-Mail erzeugen, die
zeigt, wer den Commit gemacht hat, wann er gemacht wurde, welche 
Dateien und Verzeichnisse sich geändert haben und was sich an ihnen
geändert hat. Die E-Mail sollte auf eine bestimmte Mailingliste gehen, 
eine andere als die Liste der Entwickler. Diese und andere 
interessierte Beteiligte sollten ermutigt werden sich auf den Commit-Liste 
anzumelden, da es die effektivste Art ist sich über die 
Ereignisse auf Code-Ebene des Projekts auf dem Laufenden zu halten.
Abgesehen von den offensichtlichen technischen Vorteilen der 
Überprüfung durch andere Entwickler (siehe 
<xref linkend="code-review"/>), können die Commit E-Mails dazu 
beitragen eine Gemeinschaft aufzubauen, da sie eine gemeinsame 
Umgebung schaffen indem Personen auf Ereignisse(Commits) reagieren 
können von denen sie wissen das Andere sie auch wahrnehmen.</para>

<para>Wie man Commit E-Mails einrichtet, hängt von Ihrer 
Versionsverwaltung ab, meistens gibt es aber hierfür einen Script oder
eine andere Einrichtung bei ihrer Software. Wenn Sie Schwierigkeiten 
bekommen es zu finden, schlagen Sie in Ihrer Dokumentation den Begriff
<firstterm>hooks</firstterm>, insbesondere auch 
<firstterm>post-commit hook</firstterm> nach, bei CVS auch 
<firstterm>loginfo hook</firstterm> genannt. Diese Commit-Hooks sind 
eine allgemeine Möglichkeit, Befehle nach jedem Commit zu schalten.
Der Hook wird von einem Commit ausgelöst, ihm werden alle 
Informationen über den Commit geben und es ist ihm dann freigestellt, 
was er damit anfängt &ndash; wie z.B. eine E-Mail abschicken.</para>

<para>Bei fertig eingerichteten Systemen für Commit E-Mails, werden 
Sie möglicherweise, das übliche Verhalten ändern wollen:</para>

<orderedlist>

  <listitem>
  <para>Manchmal beinhalten die Commit E-Mails nicht die tatsächlichen
  Diffs und geben stattdessen eine URL an, bei dem man die Änderungen 
  über das Web-Portal des Projektarchivs einsehen kann. Obwohl es gut ist 
  eine URL anzugeben, auf der man später verweisen kann, ist es auch 
  <emphasis>sehr</emphasis> wichtig, dass die Diffs in den
  Nachrichten enthalten sind. E-Mails zu lesen gehört schon zum 
  Alltag der Leute, wenn also die Änderungen gleich in der E-Mail zu 
  lesen sind, werden Entwickler sie auf der Stelle untersuchen, ohne 
  ihre E-Mail-Anwendung verlassen zu müssen. Wenn sie erst auf eine 
  URL klicken müssen werden es die Meisten bleiben lassen, da es eine 
  weitere Aktion erfordert anstatt fortzusetzen was sie bereits 
  angefangen hatten. Desweiteren geht es bei Fragen über die Änderung 
  viel schneller einfach auf die E-Mail zu antworten und eine 
  Bemerkung an entsprechender Stelle zu schreiben als eine Webseite 
  zu besuchen und mühselig den Diff aus dem Webbrowser heraus in die
  E-Mail zu kopieren.</para>

  <para>(Wenn der Diff natürlich riesig ist, wie z.B. wenn eine große 
  Menge neuer Code im Projektarchiv eingefügt wurde, macht es 
  natürlich Sinn den Diff wegzulassen und nur die URL anzubieten. Die 
  meisten Systeme für Commit E-Mails können diese Art der Verkürzung 
  automatisch. Wenn Ihres es nicht kann, ist es immer noch besser, die
  Diffs mitzuschicken und gelegentlich mit riesigen E-Mails zu leben, 
  als die Diffs komplett auszuschalten. Bequeme Möglichkeiten zur 
  Überprüfung und Bewertung sind ein Eckstein der gemeinschaftlichen 
  Entwicklung und deshalb unerlässlich.)</para>
  </listitem>

  <listitem><para>Der Reply-to-Header der Commit-E-Mails sollte auf
  den Mailingliste der Entwickler weisen, nicht an die 
  Commit-Liste. Wenn also jemand eine Commit-E-Mail durchgelesen und 
  bewertet hat und daraufhin eine Antwort schreibt, sollte die Antwort
  an die Liste der Entwickler gehen auf dem technische 
  Angelegenheiten üblicherweise stattfinden. Es gibt hierfür ein paar 
  Gründe. Erstens wollen Sie alle technischen Diskussionen auf einer 
  Liste behalten, Leute erwarten nämlich, dass sie dort gehalten 
  werden und so auch nur ein Archiv durchsucht werden muss. Zweitens
  könnte es interesierte Parteien geben die nicht bei der Commit-Liste
  angemeldet sind. Drittens wird die Commit-Liste als 
  Dienst verstanden um Commits zu verfolgen und nicht um Commits zu 
  verfolgen <emphasis>und</emphasis> gelegentlich auch technische 
  Diskussionen zu führen. Wer sich auf den Commit-Liste angemeldet hat, 
  will nichts anderes als Commit-E-Mails; wenn Ihnen also anderes 
  Material über diese Liste zugesandt wird, bricht das ein 
  ungesprochenes Übereinkommen. Viertens schreiben Beteiligte oft 
  Programme um die Commit-E-Mails zu lesen und zu verarbeiten (z.B. um
  sie auf einer Webseite anzuzeigen). Diese Programme sind auf eine 
  konsistente Formatierung ausgelegt, nicht jedoch auf inkonsistente 
  von Menschen geschriebene E-Mails.</para>

  <para>Beachten Sie dass dieser Ratschlag, Reply-to umzuschreiben 
  nicht den Empfehlungen aus <xref linkend="reply-to"/> 
  <phrase output="printed"> in einem früheren Abschnitt dieses Kapitels
  </phrase> widerspricht. Es ist immer in Ordnung, wenn der 
  <emphasis>Absender</emphasis> einer Nachricht Reply-to setzt. In 
  diesem Fall ist der Absender die Versionsverwaltungs selber und es 
  setzt Reply-to um anzudeuten, dass der angemessene Ort für Antworten
  die Entwickler-Liste ist und nicht die Commit-Liste.</para>

  </listitem>

</orderedlist>

<sidebar id="cia">
<title>CIA: Eine weitere Möglichkeit für Commit-Benachrichtigungen</title>

<para>Commit E-Mails sind nicht die einzige Möglichkeit um Nachrichten
über Änderungen zu verbreiten. Vor kurzem wurde eine weiter 
Möglichkeit namens CIA (<ulink url="http://cia.navi.cx/"/>) 
entwickelt. CIA fasst Commit-Statistiken zusammen und Verbreitet sie 
in Echtzeit. Die verbreitetste Verwendung von CIA ist Commit 
Benachrichtigungen an IRC-Kanäle zu senden, damit die Leute dort in 
Echtzeit mitbekommen, wann Änderungen gemacht werden. Obwohl diese
Methode nicht ganz so nützlich ist wie Commit E-Mails, da Beteiligte 
unter Umständen nicht während einem Commit im IRC anwesend sind, hat
diese Methode trotzdem einen immensen <emphasis>sozialen</emphasis>
Wert. Leute bekommen das Gefühl ein Teil von etwas lebendig und
aktivem zu sein und dass der Fortschritt vor ihren Augen gemacht
wird.</para>

<para>Es funktioniert indem Sie die CIA Anwendung automatisch nach 
jedem Commit aufrufen. Es formatiert die Information über den Commit
in eine XML Nachricht, und sendet es an einen zentralen Server 
(typischerweise <literal>cia.navi.cx</literal>). Der Commit-Server 
verteilt diese Information dann an andere Foren.</para>

<para>CIA kann auch konfiguriert werden um einen
<ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html">RSS</ulink>
feed zu erzeugen. Weiteres dazu können Sie in der Dokumentation bei
<ulink url="http://cia.navi.cx/"/> nachlesen.</para>

<para>Sie können sich von CIA einen Eindruck verschaffen, indem Sie 
sich mit Ihrem IRC-Client bei <literal>#commits</literal> auf dem 
Server <literal>irc.freenode.net</literal> einloggen.</para>

</sidebar>

</sect3>

<sect3 id="branches">
<title>Benutze Zweige, um Engpässe zu vermeiden</title>

<para>Laien im Umgang mit Versionsverwaltung scheuen sich manchmal 
vorm Verzweigen und Zusammenführen. Das ist wahrscheinlich ein 
Nebeneffekt des Erfolgs von CVS: Die Schnittstellen von CVS um Zweige
zu machen und wieder zusammenzuführen sind nicht ganz eingängig, 
weshalb viele sich angeeignet haben diese Operationen komplett zu 
vermeiden.</para>

<para>Wenn Sie zu diesen Leuten gehören, nehmen Sie sich vor alle
Ängste die Sie haben mögen zu besiegen und nehmen Sie sich die Zeit 
um zu lernen, wie man Zweige macht und wieder zusammenführt. Es sind 
keine schwierigen Vorgänge, wenn man sich erst einmal daran gewöhnt 
hat und sie werden mit der Zeit immer wichtiger, sowie ein Projekt 
immer mehr Entwickler aufnimmt.</para>

<para>Zweige sind wichtig da sie eine knappe Ressource &ndash; den Platz
im Code des Projekts &ndash; im Überfluss bereitstellt. Normalerweise 
arbeiten alle Entwickler im gleichen Sandkasten und bauen an der 
gleichen Burg. Wenn jemand eine neue Zugbrücke anbauen will, jedoch
nicht alle überzeugen kann, dass es eine Verbesserung wäre, ermöglicht
ein Zweig es ihr in eine eigenen isolierte Ecke zu experimentieren. 
Wenn es funktioniert kann sie die anderen Entwickler einladen, sich 
das Ergebnis anzuschauen. Wenn alle zustimmen, dass das Ergebnis gut 
ist können sie mittels der Versionsverwaltung die Zugbrücke aus dem 
Burgflügel in die Haupt-Burg übernehmen (einen "Merge" machen).</para>

<para>Es ist einfach zu erkennen, wie diese Fähigkeit die 
gemeinschaftliche Entwicklung fördert. Menschen brauchen die Freiheit 
Neues auszuprobieren ohne das Gefühl zu bekommen andere bei der Arbeit
zu stören. Gleichermaßen gibt es Zeiten an denen es wichtig ist,
bestimmten Code von der alltäglichen Entwicklung zu isolieren, um 
einen Fehler zu beheben oder eine neue Version stabil zu machen (siehe
<xref linkend="stabilizing-a-release"/> und 
<xref linkend="release-lines"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>) ohne sich über ein
bewegliches Ziel Gedanken zu machen.</para>

<para>Seien Sie großzügig bei der Nutzung von Zweige und ermutigen Sie 
andere ebenso zu verfahren.
Achten Sie aber auch darauf, dass jeder Zweig nur so lange 
aktiv bleibt wie nötig. Jeder aktive Zweig beansprucht die Aufmerksamkeit
der Gemeinschaft ein klein wenig. Selbst diejenigen die nicht an 
einem Zweig arbeiten, behalten noch einen groben Überblick über die
Ereignisse darin. Diese Aufmerksamkeit ist natürlich wünschenswert 
und Commit-Nachrichten sollten auch für Zweige eingeschaltet sein, 
genau wie für jeden anderen Commit. Zweige sollten jedoch nicht zu 
einer Methode werden die Gemeinschaft zu spalten. Mit seltenen 
Ausnahmen, sollte jeder Zweig das Ziel haben irgendwann wieder zurück 
in den Hauptzweig zu wachsen und zu verschwinden.</para>

</sect3>

<sect3 id="vc-singularity">
<title>Singuläre Informationen</title>

<para>Merges haben eine wichtige Konsequenz: Die selbe Änderung
sollte niemals doppelt committet werden. D.h. eine bestimmte Änderung
sollte durch das Versionsverwaltungssystem nur genau einmal übernommen
werden. Die Revision (oder die Gruppe von Revisionen) in dem diese
Änderung eingebracht wurde, ist von da an seine eindeutige Kennung.
Wenn sie auf weitere Zweigen angewendet werden soll, sollte es von seinem
ursprünglichen Eintrittspunkt aus in diese anderen Ziele portiert
werden &ndash; man sollte also nicht mehrer textgleiche Änderungen 
committen, was zwar die gleiche Wirkung auf den Code haben würde,
aber eine genaue Buchführung unmöglich machen würden.</para>

<para>Die praktische Auswirkung dieser Empfehlung sind unterschiedlich,
je nach Versionsverwaltungssystem. Manche Systeme erfassen einen Merge 
als besonderes Ereignis, grundsätzlich von einem Commit zu
unterscheiden, und haben ihre eigene Metadaten. Bei anderen wird das
Ergebnis von einem Merge genau wie jeder andere Commit eingespielt, 
also wird ein "Merge-Commit" borzugsweise in dem Commit-Log von einem 
"Änderungs-Commit" unterschieden. In dem Commit-Log von einem Merge 
sollte nicht die Nachricht der Ursprünglichen Änderung wiederholt 
werden. Statt dessen sollten Sie lediglich angeben, dass es sich um 
einen Merge handelt, und die Revisionsnummer der Ursprünglichen 
Änderung angeben und höchstens einen Satz um die Auswirkungen der 
Änderung zusammenzufassen. Wenn jemand den kompletten Commit-Log sehen 
will, sollte sie die ursprünglich Revision aufsuchen.</para>

<para>Es ist wichtig zu vermeiden, die Commit-Logs zu wiederholen, da
ein Log manchmal nach dem Commit geändert werden. Wenn der Log einer
Änderung bei jedem Merge wiederholt würde, blieben selbst bei einer
korrektur der Ursprünglichen Nachricht alle Kopien 
unverändert &ndash; was später unweigerlich zu Verwirrung führen 
kann.</para>

<para>Dasselbe Prinzip gilt beim Zurückdrehen einer Änderung. Wenn 
eine Änderung wieder vom Code entfernt wird, sollte sein Commit-Log
lediglich festhalten, dass die Änderung einer bestimmten Revision 
rückgängig gemacht wird und <emphasis>nicht</emphasis> eine 
Beschreibung der tatsächlichen Änderungen am Code, da diese 
Information aus der ursprünglichen Änderungen und sein Log ersichtlich
ist. Selbstverständlich sollte der Log auch den Grund für die 
Entfernung nennen, jedoch nichts aus dem ursprünglichen Log 
wiederholen. Wenn möglich gehen Sie zurück und Ändern Sie den Log der 
ursprünglichen Änderung und weisen Sie darauf hin, dass sie
zurückgedreht wurde.</para>

<para>Die vorhergehenden Passagen implizieren die Verwendenung einer
konsistenten und gleichbleibende Syntax um auf Revisionen Bezug zu
nehmen. Das ist nicht nur in den Logs hilfreich, sondern auch in 
E-Mails, dem Bugtracker und anderswo. Wenn Sie CVS verwenden, schlage
ich "<literal>path/to/file/in/project/tree:REV</literal>" als Format
vor, wobei REV eine CVS Revisionsnummer wie "1.76" darstellt. Wenn Sie
Subversion verwenden, ist die übliche Syntax für die Revision 1729
"r1729" (Datei-Pfade sind bei Subversion nicht nötig, da es globale 
Revisionsnummern verwendet). Andere Systemen haben meistens ihre
eigene übliche Syntax um Änderungen zu kenzeichnen. Konsistente 
Bezeichnungen erleichtern die Buchhaltung eines Projekts ungemein (was
wir in <xref linkend="communications"/> und 
<xref linkend="development-cycle"/>) sehen werden und da ein großer 
Teil der Buchhaltung von Freiwilligen erledigt wird, muss es so 
einfach wie Möglich sein.</para>

<para>Siehe auch
<xref linkend="releases-and-daily-development"/><phrase output="printed">
im Kapitel <xref linkend="development-cycle"/></phrase>.</para>

</sect3>

<sect3 id="vc-authz">
<title>Autorisierung</title>

<para>Fast jede Versionsverwaltung bietet eine Funktion an um 
bestimmte Personen Schreibzugriff auf einzelne Bereiche des Projektarchivs
zu erlauben oder verwehren. Nach dem Grundsatz, dass wenn man jemand 
einen Hammer reicht, er anfangen wird überall Nägel zu sehen, wird 
diese Funktion von vielen Projekten hemmungslos benutzt. Sie erlaben 
vorsichtig Beteiligte lediglich schreibzugriff auf Bereiche nachdem sie
Zustummung erhalten haben und sichergestellt ist, dass sie nirgendwo 
sonst Schreibzugriff haben. (Siehe 
<xref linkend="committers"/><phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> indem beschrieben ist,
wie Projekte entscheiden wer wo Änderungen machen kann.)</para>

<para>Es ist wahrscheinlich nicht allzu schädlich solch eine strenge 
Kontrolle auszuüben, eine lockere Haltung ist aber auch in Ordnung.
Manche Projekte benutzen einfach einen System basierend auf Ehre: Wenn
einer Person Commit-Zugriff gewährt wird, wenn auch nur für einen
Teilbereich des Projektarchivs, erhalten sie in Wirklichkeit den Schlüssel,
um überall im Projekt zu Änderungen zu machen. Sie werden einfach 
darum gebeten, sich auf ihren Bereich zu beschränken. Denken Sie daran,
dass hierin keine echte Gefahr besteht: In einem aktiven Projekt
wird sowieso jeder Commit überprüft. Wenn jemand in einem Bereich etwas
ändert den er nicht sollte, werden es andere bemerken und etwas sagen.
Wenn eine Änderung rückgängig gemacht werden muss, ist das auch kein 
Problem &ndash; es ist eh alles in der Versionsverwaltung, also kann man
es einfach rückgängig machen.</para>

<para>Die Sache locker anzugehen hat mehrere Vorteile. Erstens gibt es
keinen weiteren Aufwand um Entwickler zusätzliche Rechte einzuräumen, 
sobald sie sich auf andere Bereiche ausweiten (was meistens irgendwann
passiert, wenn sie länger beim Projekt bleiben). Sobald die 
Entscheidung getroffen wurde, kann die Person gleich anfangen 
Änderungen im neuen Bereich zu machen.</para>

<para>Zweitens kann die Erweiterung viel feiner granuliert werden. 
Allgemein wird ein Commit-Berechtigter im Bereich X der auch im Bereich
Y arbeiten will, anfangen Patches für Y einzureichen und darum bitten,
dass sie überprüft werden. Wenn jemand der bereits Zugriff auf dem 
Bereich Y hat solch einen Patch sieht und ihm zustimmt, können sie dem
Autor einfach sagen, dass sie die Änderung gleich selber einspielen
können(natürlich mit Namensangabe vom Überprüfenden bzw, Zustimmenden 
im Commit-Log). Auf diese Art stammt der Commit von dem, der ihn auch 
geschrieben hat, was sowohl aus Sicht der Informationsverwaltung als 
auch der Anerkennung vorzuziehen ist.</para>

<para>Zuletzt und vielleicht am wichtigsten, regt ein System welches
auf Ehre basiert, eine Atmosphäre des Vertrauens und des gegenseitigen
Respekts an. Jemandem Commit-Zugriff auf einem Teilgebiet zu geben ist
eine Aussage über ihre fachliche Vorbereitung &ndash; es sagt: "Wir 
sehen, dass du die Kenntnisse hast um auf einem Gebiet Änderungen zu 
machen, also leg los". Strikte Autorisierung aufzuerlegen sagt aber: 
"Wir behaupten nicht nur, dass deine Kenntnisse begrenzt sind, wir 
sind auch ein wenig verdächtig im Bezug auf deine 
<emphasis>Absichten</emphasis>". Das ist keine Behauptung die Sie in
den Raum stellen wollen, wenn es sich vermeiden lässt. Jemand an dem 
Projekt als Commit-Berechtigt zu beteiligen, ist eine Gelegenheit sie 
in einem Kreis vertrauter Personen aufzunehmen. Das errecht man am
besten indem man ihr mehr Macht gibt als sie benutzen sollen, und sie 
darüber informiert, dass es an ihr liegt sich innerhalb der genannten 
Grenzen zu bewegen.</para>

<para>Das Subversion-Projekt arbeitet schon seit vier Jahren nach dem
Ehren-Prinzip, mit 33 voll und 43 teil-berechtigte Entwickler zum
Zeitpunkt dieses Schreibens. Die einzige Unterscheidung die das System
macht, ist zwischen Commit-Berechtigte und nicht Commit-Berechtigte; 
weitere Unterteilungen bestehen alleine auf zwischenmenschlicher Ebene.
Dennoch hatten wir nie Probleme mit den Grenzen der Berechtigungen. Es
gab ein-zwei Missverständnisse über das Ausmaß der 
Commit-Berechtigungen, die jedoch immer schnell und freundlich gelöst
wurden.</para>

<para>Offensichtlich muss man sich auf strikte Autorisierung verlassen
können, wenn Selbstkontrolle nicht sinnvoll ist. Solche Situationen
sind jedoch selten. Selbst bei Unmengen Code und hunderte oder tausende
Entwicklern, sollte ein Commit zu jedem beliebigen Modul von denen 
zuständigen Personen überprüft werden, die auch erkennen können ob 
jemand an eine Stelle etwas geändert hat die er nicht sollte. Wenn 
Änderungen <emphasis>nicht</emphasis> regelmäßig überprüft werden, 
dann hat das Projekt ohnehin größere Probleme als die
Commit-Berechtigung.</para>

<para>Insgesamt sollte man nicht allzuviel Zeit damit verbringen, die 
Berechtigungen der Versionsverwaltung auszutüfteln, es sei denn Sie 
haben einen ganz bestimmten Grund dazu. Es wird für meistens wenig
handfesten Nutzen bringen und es hat seine Vorteile sich stattdessen
auf menschliche Kontrolle zu verlassen.</para>

<para>Natürlich sollte man nichts hiervon so auffassen, dass die 
Beschränkungen an und für sich unwichtig sind. Es wäre schlecht für 
das Projekt, Teilnehmer anzuregen Bereiche zu ändern, für denen sie
nicht qualifiziert sind. Desweiteren geben viele Projekte den vollen 
(uneingeschränkter) Zugriff auf das Projektarchiv, einen besonderen 
Status: Es impliziert, dass der Teilnehmen das Recht hat, über Fragen 
die das ganze Projekt betreffen abzubestimmen. Dieser politische 
Aspekt der Commit-Berechtigung wird weiter in 
<xref linkend="electorate"/><phrase output="printed"> im Kapitel 
<xref linkend="social-infrastructure"/></phrase> behandelt.</para>

</sect3>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="bug-tracker">
<title>Bugtracker</title>

<para>"Bugtracking" ist ein weites Thema von dem viele Aspekte im 
Verlauf dieses Buchs besprochen werden. Ich werde versuchen, mich hier
auf die Einrichtung und die technischen Erwägungen zu konzentrieren. 
Vorher müssen wir aber mit einer grundsätzlichen Frage anfangen: 
Welche Informationen genau sollten im Bugtracker gehalten 
werden?</para>

<para>Der Begriff <firstterm>Bugtracker</firstterm> ist irreführend.
Diese Systeme werden häufig auch verwendet, um Anfragen für neue 
Funktionen, einmalige Aufgaben, unaufgeforderte Patches &ndash; im
Prinzip alles zu verfolgen (engl. to track), was einen eindeutigen 
Anfangs- und Endzustand sowie optionale Übergangszuständen hat und
dessen Lebenszyklus Informationen anfallen. Aus diesem Grund 
haben Bugtracker auch häfig Namen<footnote><para>Im Deutschen Raum
sind die Begriffe <firstterm>Bugtracker</firstterm> und 
<firstterm>Ticket-System</firstterm> am weitesten 
verbreitet.</para></footnote> wie <firstterm>Issue 
Tracker</firstterm>, <firstterm>Defect 
Tracker</firstterm>, <firstterm>Artifact Tracker</firstterm>, 
<firstterm>Request Tracker</firstterm>, <firstterm>Trouble Ticket 
System</firstterm>, usw. Eine Liste verfügbarer Software finden Sie im
Anhang <xref linkend="bug-trackers"/>.</para>

<para>In diesem Buch werde ich weiterhin "Bugtracker" für Software 
benutzen, die jegliche der vorher erwähnten Angelegenheiten verfolgt, 
da es weithin so bezeichnet wird, ein einzelnes Element in der 
Datenbank des Bugtracker werde ich jedoch als 
<firstterm>Ticket</firstterm> (im engl. auch "issue") bezeichnen. So 
können wir zwischen Verhalten oder Fehlverhalten unterscheiden, die ein
Nutzer beobachtet hat, (also einen Fehler) und die 
<emphasis>Erfassung</emphasis> seiner Entdeckung, Diagnose und Lösung 
im Tracker. Behalten Sie im Hinterkopf, dass auch wenn es bei den 
meisten Tickets um Fehler handelt, sie auch benutzt werden können um 
andere Aufgaben zu verfolgen.</para>

<para>Der klassische Verlauf eines Tickets sieht wie folgt aus:

<orderedlist>
  <listitem><para>Jemand reicht das Ticket ein. Sie machen eine 
            Zusammenfassung, eine anfängliche Beschreibung 
            (einschließlich dessen wie man den Fehler reproduziert, falls 
            anwendbar, siehe <xref 
            linkend="users-to-volunteers"/><phrase output="printed"> 
            im Kapitel <xref linkend="managing-volunteers"/></phrase> 
            in der beschrieben wird, wie man gute Bug-Meldungen fördert
            ermutigen kann), und sonstige Informationen. die der Tracker
            verlangt. Die Person die den Fehler meldet, kann dem 
            Projekt völlig unbekannt sein &ndash; Bug-Meldungen und 
            Anfragen für Funktion können genau so aus der 
            Nutzer-Gemeinschaft kommen, wie von den Entwicklern.</para>

            <para>Sobald der Ticket gemeldet wurde sagt man, dass er 
            <firstterm>offenen</firstterm> ist. Da bisher nichts 
            unternommen wurde, kennzeichnen manche Tracker diese auch
            als <firstterm>unbestätig</firstterm> (engl. "unverified")
            oder <firstterm>nicht angefangen</firstterm> (engl. 
            "unstarted"). Er wurde noch niemandem Zugewiesen; oder, 
            in manchen Systemen, wird es einem fiktiven Benutzer 
            zugewiesen um anzudeuten, dass es nicht wirklich jemandem 
            zugewiesen wurde. Zu diesem Zeitpunkt steht es in einer
            Warteschlange: Das Ticket wurde erfasst, jedoch nicht im 
            Bewusstsein des Projekts aufgenommen.</para>
  </listitem>
  <listitem><para>Andere lesen den Ticket, sie fügen Kommentare hinzu,
            und bitten vielleicht dem Meldenden einige Punkte zu 
            klären.</para>
  </listitem>
  <listitem><para>Der Fehler wird <firstterm>reproduziert</firstterm>.
            Dieser Augenblick mag der Wichtigste in seinem 
            Lebenszyklus sein. Auch wenn der Bug noch nicht behoben 
            wurde ist die Tatsache, dass jemand außer dem der ihn 
            gemeldet hat, es geschafft hat selber den Fehler zu finden
            beweist, dass er echt ist und, nicht zuletzt, dem
            Berichtenden bestätigt hat, dass sie durch die Meldung
            eines echten Fehlers etwas zum Projekt beigetragen 
            haben.</para>
  </listitem>
  <listitem><para>Der Fehler wird <firstterm>untersucht</firstterm>: 
            seine Ursache wird identifiziert und wenn möglich, wird 
            der nötig Aufwand geschätzt um ihn zu beheben. Stellen Sie
            sicher, dass diese Sachen in dem Ticket erfasst werden; 
            wenn die Person die den Bug untersucht hat, plötzlich eine
            längere Zeit vom Projekt wegtreten muss (was bei 
            freiwilligen Entwicklern häufig passieren kann), sollte 
            jemand anders in der Lage sein, seine Arbeit wieder 
            aufzunehmen.</para>
            
            <para>In dieser Phase oder manchmal schon vorher, kann ein
            Entwickler den Ticket in Besitz nehmen, und ihn sich
            selber <firstterm>zuweisen</firstterm> (In
            <xref linkend="delegation-assignment"/><phrase
            output="printed"> im Kapitel
            <xref linkend="managing-volunteers"/></phrase> wird der
            diese Zuweisung genauer untersucht. Die
            <firstterm>Priorität</firstterm> kann in dieser Phase auch
            bestimmt werden. Wenn er z.B. derart schwerwiegend ist,
            dass er die nächste Version verzögern würde, muss diese
            Tatsache frühzeitig erkannt werden und der Tracker sollte
            eine Möglichkeit bieten das zu erfassen.</para>
  </listitem>
  <listitem><para>Es wird geplant wann der Ticket aufgelöst werden
            soll, wobei dabei nicht unbedingt ein bestimmtes Datum
            gemeint ist an dem er behoben sein soll. Manchmal bedeutet
            es einfach eine Entscheiden bis zu welcher Version (nicht 
            unbedingt die Nächste) der Bug behoben sein soll, oder 
            dass er keine bestimmte Version blockieren muss. Wenn der 
            Bug schnell behoben werden kann, ist die Planung
            wahrscheinlich überflüssig.
	</para>
  </listitem>
  <listitem><para>Der Bug wird behoben (oder die Aufgabe wird erledigt,
            oder der Patch angewandt, oder was auch immer). Die 
            Änderung die ihn beheben sollten in einem Kommentar des
            Tickets protokolliert werden, worauf er 
            <firstterm>geschlossen</firstterm> wird und/oder als 
            <firstterm>gelöst</firstterm> markiert wird.
	</para>
  </listitem>
</orderedlist>

</para>

<para>Dieser Lebenszyklus variiert häufig. Manchmal wird ein Ticket
frühzeitig nach seiner Meldung geschlossen, da sich herausstellt, dass
es sich nicht um einen Fehler handelt, sondern um ein Missverständnis
seitens des Anwenders. Sowie ein Projekt immer mehr Benutzer aufnimmt,
werden immer mehr dieser ungültigen Tickets aufkommen und Entwickler 
werden sie mit zunehmend gereizt schließen. Versuchen Sie der letzteren
Neigung entgegenzuwirken. Sie hilft keinem, da der einzelne Nutzer in
jedem Einzelfall nicht für alle vorhergehenden ungültigen Tickets
verantwortlich ist; die statistische Zunahmen ist lediglich für die
Entwickler sichtbar nicht für die Nutzer. (In
<xref linkend="bug-filtering"/><phrase output="printed"> später in 
diesem Kapitel,</phrase> werden wir die Methoden untersuchen, um die 
Anzahl der ungültigen Tickets zu verringern). Wenn verschiedene Nutzer
immer wieder dasselbe Missverständnis haben, kann das ein Hinweis 
sein, dass ein bestimmter Bereich der Software überdacht werden muss.
Diese Muster können am einfachsten von einem Ticket-Verwalter bemerkt
werden, der die Bug-Datenbank überwacht; siehe 
<xref linkend="issue-manager"/><phrase output="printed"> im Kapitel 
<xref linkend="managing-volunteers"/></phrase>.</para>

<para>Eine weitere häufige Abweichung zu diesem Lebenszyklus ist, dass
der Ticket als <firstterm>Duplikat</firstterm> gleich nach dem ersten
Schritt geschlossen wird. Ein Duplikat erscheint wenn jemand ein Ticket
meldet der dem Projekt bereits bekannt ist. Duplikate beschränken sich 
nicht auf offene Tickets: Es ist auch möglich, dass ein Bug 
wiederkehrt, nachdem er behoben wurde (auch als 
<firstterm>Regression</firstterm> bekannt). In solchen Fällen öffnet
man Vorzugsweise wieder den ursprünglichen Ticket und alle neuen 
Meldungen werden als Duplikate des Originals geschlossen. Der 
Bugtracker sollte diese Beziehung in beiden Richtungen verfolgen 
können, um Informationen wie man ihn Reproduziert dem ursprünglichen
Ticket verfügbar zu machen und umgekehrt.</para>

<para>Eine dritte Variante ist, dass Entwickler einen Ticket schließen,
in der Annahme, der Fehler wurde bereits behoben, was der Meldendende
allerdings abgewiest und ihn erneut öffnet. Meistens geschieht das, 
wenn die Entwickler nicht die nötige Umgebung haben, um den Fehler zu 
reproduzieren oder da nicht mit genau dieselbe Anleitung zur 
Reproduktion beim testen genutzt haben wie der Meldende.</para>

<para>Abgesehen von diesen Abweichungen, kann es andere kleine Details
im Lebenszyklus geben, die sich abhängig von der Software des 
Bugtrackers unterscheiden. Die grundsätzliche Form ist jedoch bei
allen die gleiche, und obwohl der Lebenszyklus nicht eigen zu 
Open-Source-Software ist, hat es Auswirkungen darauf wie 
Open-Source-Projekte ihre Bugtracker benutzen.</para>

<para>Wie der erste Schritt andeutet, bietet ein Bugtracker der 
Öffentlichkeit genau so sehr ein Bild des Projekts wie seine Mailinglisten
oder seine Webseite. Jeder kann ein Ticket aufmachen, jeder kann
sich ein Ticket anschauen und jeder kann die Liste der offenen Tickets
anschauen. Daraus folgt, dass Sie niemals wissen können, wieviele Leute
darauf warten, Fortschritte für ein bestimmtes Ticket zu sehen. 
Auch wenn die Größe und Erfahrung der Entwicklergemeinschaft die 
Geschwindigkeit einschränken kann, mit der Tickets abgearbeitet 
werden, sollte das Projekt zumindest versuchen, jedes Ticket gleich
nach seiner Meldung zu bestätigen. Selbst wenn er eine Weile lang 
liegen bleibt, ermutigt eine Reaktion dem Melder gegenüber, sich weiterhin
an seiner Lösung zu beteiligen, da er das Gefühl bekommt, dass ein Mensch
sich seiner Mühe bewust ist (bedenken Sie, dass ein Ticket aufzumachen
für gewöhnlich einen größeren Aufwand bedeutet, als sagen wir eine 
E-Mail zu schreiben). Desweiteren tritt das Ticket, sobald es von 
einem Entwickler bemerkt wird, in das Bewusstsein des Projekts, womit 
gemeint ist, dass dieser Entwickler darauf achten kann, ob das Ticket
an anderer Stelle irgendwo auftaucht, mit anderen Entwicklern darüber 
reden kann, usw.</para>

<para>Das eine zeitige Reaktionen unabdingbar ist, impliziert 
zweierlei:

<itemizedlist>
  <listitem>
    <para>Der Tracker muss mit einer Mailingliste verbunden sein,
    damit jede Änderung an einem Ticket, inklusive seine erste Meldung,
    eine E-Mail erzeugt die beschreibt was passiert ist. Diese 
    Liste ist normalerweise ein anderer als der gewöhnliche 
    Entwickler-Liste, da nicht alle Entwickler automatisierte Bug-Mails 
    empfangen wollen, der Reply-to-Header sollte aber (genau 
    wie bei Commit-Mails) auf die Entwicklunger-Liste 
    weisen.</para>
  </listitem>
  <listitem>
    <para>Das Formular um Tickets zu melden, sollte die E-Mail-Adresse
    des Meldenden erfassen, damit sie für weitere Informationen 
    erreicht werden kann. (Die E-Mail-Adresse sollte jedoch nicht 
    <emphasis>erforderlich</emphasis> sein, da manche Leute es 
    vorziehen anonym Fehler zu melden. Siehe 
    <xref linkend="anonymity"/><phrase output="printed"> später in 
    diesem Kapitel</phrase> indem die Wichtigkeit der Anonymität 
    behandelt wird.)</para>
  </listitem>
</itemizedlist>

</para>

<sect2 id="bug-tracker-mailing-list-interaction">
<title>Interaktion mit Mailinglisten</title>

<para>Sorgen Sie dafür, dass der Bugtracker nicht zu einem
Diskussionsforum wird. Obwohl menschliche Anwesenheit auf dem 
Bugtracker wichtig ist, eignet er sich nicht grundsätzlich für
Diskussionen. Betrachten Sie es eher als ein Archiv, eine Möglichkeit 
Tatsachen und Verweise auf andere Diskussionen zu organisieren, die
hauptsächlich auf Listen stattfinden.</para>

<para>Es gibt Zwei Gründe diese Unterscheidung zu machen. Erstens ist
die Bedienung des Bugtrackers umständlicher als die einer Mailingliste
(oder, wo wir gerade dabei sind, IRC oder andere Echtzeit-Foren). Das liegt 
nicht an der schlechten Benutzeroberflöche im Bugtracker, sondern an
seine Ausrichtung auf die Erfassung und Darstellung getrennter 
Zustände und nicht auf offene Diskussionen. Zweitens beobachtet nicht 
jeder den Bugtracker der auch an der Diskussion eines Tickets 
beteiligt sein sollte. Ein Teil guter Ticker-Verwaltung (siehe 
<xref linkend="share-management"/><phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase>) besteht darin 
sicherzustellen, dass jeder Ticket eher die Aufmerksamkeit der 
richtigen Leute bekommt, als dass jeder Entwickler über jeden Ticket
beischeid wissen muss. In
<xref linkend="bug-tracker-usage"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/>,</phrase> werden wir Wege untersuchen,
Leute daran zu hindern versehentlich Diskussionen von ihren
angemessenen Foren auf den Bugtracker auszulagern.</para>

<para>Manch Bugtracker können Mailinglisten überwachen und 
automatisch alle E-Mails protokollieren, die sich um einen bekannten
Ticket drehen. Typischerweise erkennen sie das anhand der 
Identifikationsnummer des Tickets in der Betreffzeile der E-Mail, als 
Teil einer bestimmten Zeichenfolge; Entwickler lernen diese 
Zeichenfolgen in ihrer E-Mails zu benutzen, um die Aufmerksamkeit des 
Bugtrackers anzulocken. Der Tracker kann entweder die E-Mail als 
ganzes speichern oder (besser noch) einen Link zu dem Archiv der
Liste. So oder so ist diese Funktion sehr nützlich; wenn Ihr 
Tracker sie hat, sollten Sie sie unbedingt einschalten und Teilnehmer
erinnern sie zu nutzen.</para>

</sect2>

<sect2 id="bug-filtering">
<title>Ticket-Filterung</title>

<para>Die meisten Ticket-Datenbanken leiden irgendwann an dem gleichen
Problem: Eine erstickende Anzahl doppelter oder ungültiger Tickets die
mit guter Absicht aber von unerfahrenen oder schlecht informierten
Nutzern gemeldet werden. Der erste Schritt dieser Entwicklung 
entgegenzuwirken ist gewöhnlicherweise, einen prominenten Hinweis auf 
der Hauptseite des Trackers anzubringen, die erklärt woran man 
erkennen kann ob ein Bug wirklich ein Bug ist, wie man nach bereits
gemeldete Fehler suchen kann und letztendlich wie man eine effektive 
Meldung machen kann, wenn man immer noch der Meinung ist, dass es ein 
neuer Bug ist.</para>

<para>Der Geräuschpegel sollte danach eine Weile reduziert sein, sowie
die Anzahl der Nutzer zunimmt, wird das Problem jedoch wiederkehren. 
Kein einzelner Nutzer ist daran Schuld. Jeder versucht nur zum Wohl 
des Projekts beizutragen und auch wenn ihre erste Meldung nicht 
hilfreich ist, sollten Sie dennoch dazu ermutigen sich weiterhin zu 
beteiligen und zukünftig bessere Tickets zu schreiben. In der 
Zwischenzeit muss das Projekt die Ticket-Datenbank so frei von Müll 
halten wie möglich.</para>

<para>Die zwei größten Abhilfen sind: Sicherzustellen, dass Leute den 
Bugtracker beobachten, die genügend wissen um ungültige oder doppelte
Tickets gleich nach ihrer Meldung zu schließen und von Nutzern 
erfordern (oder nachdrücklich dazu anregen) ihre Bugs von andere 
bestätigen zu lassen vor sie eine Meldung im Tracker eintragen.</para>

<para>Die erste Methode scheint universelle Anwendung zu finden. Selbst
Projekte mit riesigen Ticket-Datenbanken (wie der Debian-Bugtracker
bei <ulink url="http://bugs.debian.org/"/>, mit 315,929 Tickets zum
Zeitpunkt dieses Schreibens hatte) organisieren sich so, dass
<emphasis>irgendjemand</emphasis> jeden eintreffenden Ticket sieht. Es
können verschiedene Personen sein, abhängig von der Kategorie des
Tickets. Das Debian-Projekt ist z.B. eine Sammlung verschiedener
Software-Pakete, also leitet Debian automatisch jeden Ticket an die
entsprechend Zuständigen für das Packet. Natürlich, kann es manchmal 
vorkommen, dass Nutzer ein Ticket falsch einordnen mit dem Ergebnis, 
dass der Ticket zunächst an die falsche Person geleitet wird die ihn
dann möglicherweise wieder umleiten muss. Wichtige dabei ist, dass 
diese Last trotzdem verteilt wird &ndash; ob der Nutzer beim Ausfüllen
des Formulars richtig oder falsch rät, die Beobachtung der Tickets
sollte dennoch mehr oder weniger gleichmäßig auf die Entwickler 
aufgeteilt sein, damit jedes Ticket eine zeitige Antwort erhalten 
kann.</para>

<para>Die zweite Technik ist weniger verbreitet, wahrscheinlich, da
sie sich schwerer automatisieren lässt. Der Grundgedanke ist jeden
Ticket einen "Buddy" zuzuordnen. Wenn ein Nutzer denkt er, hat ein
Problem gefunden, wird er darum gebeten, es auf einer der Mailinglisten
oder im IRC zu beschreiben und sich von jemandem bestätigen
zu lassen, dass es sich auch wirklich um einen Bug handelt. Ein zweites
Augenpaar frühzeitig einzubeziehen, kann viele störende Meldungen
verhindern. Manchmal kann die zweite Partei erkennen, dass das 
Verhalten kein Fehler ist, oder dass er in einer neuern Version 
behoben wurde. Sie kann auch mit den Symptomen aus einem früheren
Ticket vertraut sein und einen doppelten Eintrag verhindern, indem sie
den Nutzer auf das ältere Ticket hinweist. Oftmals reicht es auch
den Nutzer zu fragen, "Hast du im Bugtracker geschaut ob er bereits 
gemeldet wurde?" Viele denken einfach nicht daran, haben jedoch kein 
Problem es zu tun wenn sie wissen, dass jemand es von ihnen 
<emphasis>erwartet</emphasis>.</para>

<para>Das Buddy-System kann die Ticket-Datenbank wirklich sauber
halten, hat aber auch einige Nachteile. Viele machen trotzdem alleine
Meldungen, weil sie entweder die Anweisungen sich für neue Tickets
einen Buddy zu suchen entweder nicht sehen oder ignorieren. Von daher 
ist es immer noch nötig die Ticket-Datenbank von freiwilligen 
überwachen zu lassen. Desweiteren ist es nicht gerechtfertigt sie für
ihre Ignoranz gegenüber den Richtlinien allzusehr zurechtzuweisen, da 
die meisten die ihre erste Meldung machen, nicht verstehen wie schwer 
es ist, die Ticket-Datenbank in Stand zu halten. Die Freiwilligen 
müssen deshalb wachsam sein und dennoch Zurückhaltung üben wenn sie 
Tickets ohne einen Buddy wieder an seinen Autor zurückweisen. Das Ziel
ist jeden beizubringen, dass sie zukünftig das Buddy-System verwenden
sollen, um eine wachsende Gemeinschaft entstehen zu lassen, die das 
Filter-System für die Tickets verstehen. Bei der Sichtung eines Tickets
ohne einen Buddy sind die optimalen Schritte:</para>

<orderedlist>
  <listitem>
    <para>Antworten Sie sofort auf das Ticket, bedanken Sie den Nutzer
          für die Meldung weise sie dabei aber auf die Buddy 
          Richtlinien(die natürlich auf der Webseite herausragen 
          sollten).</para>
  </listitem>
  <listitem>
    <para>Wenn dat Ticket ansonsten nicht eindeutig berechtigt ist,
          schließen Sie es, bitten Sie dem Autor aber darum, ihn 
          wieder aufzumachen, sollte es von einem Buddy bestätigt
          werden. Danach sollten Sie einen Verweis auf den Thread mit
          der Bestätigung geben (z.B. eine URL aus dem Archiv der
          Mailingliste).</para>
  </listitem>
</orderedlist>

<para>Denken Sie daran, dass obwohl dieses System, mit der Zeit das
Signal/Rausch Verhältnis in der Ticket-Datenbank verbessern wird, es 
niemals alle Falschmeldungen unterbinden kann. Der einzige Weg 
Falschmeldungen komplett zu verhindern, ist den Bugtracker komplett,
für alle außer die Entwickler abzuschalten &ndash; eine Medizin die
meistens schlimmer ist als die Krankheit. Es ist besser sich damit
abzufinden, dass die Entfernung ungültiger Tickets immer ein Teil der
üblichen Wartungsarbeiten am Projekt bleiben wird und so viele Leute
wie möglich dazu zu überreden, dabei zu helfen.</para>

<para>Siehe auch
<xref linkend="issue-manager"/><phrase output="printed"> im Kapitel 
<xref linkend="managing-volunteers"/></phrase>.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="irc">
<title>IRC / Echtzeit-Nachrichtendienste</title>

<para>Viele Projekte biete Chat-Foren über <firstterm>Internet Relay
Chat</firstterm> (<firstterm>IRC</firstterm>) an, in denen Nutzer und
Entwickler einander Fragen stellen können und sofort Antworten erhalten
können. Auch wenn Sie einen IRC-Server über Ihre eigene Webseite
betreiben <emphasis>können</emphasis>, ist es im allgemeinen den
Aufwand nicht wert. Machen Sie statt dessen was alle Anderen auch
machen: Betreiben Sie Ihre <firstterm>IRC-Kanäle</firstterm> auf
Freenode (<ulink url="http://freenode.net/"/>). Freenode bietet Ihnen
die nötige Kontrolle um die IRC-Kanäle für Ihr Projekt zu 
verwalten<footnote><para>Es gibt keine Voraussetzung oder Erwartung, 
dass Sie an Freenode spenden, wenn Ihr Projekt es sich aber leißten 
kann, sollten es in Erwägung ziehen. Sie sind eine von Steuern
befreite gemeinnützige Einrichtung in den USA und sie betreiben einen 
wertvollen Dienst.</para></footnote>, obgleich Sie Ihnen die nicht 
unwesentliche Mühe ersparen, einen eigenen IRC-Server zu
betreiben.</para>

<para>Das erste was Sie tun müssen, ist einen Namen für den Kanal
auszusuchen. Die offensichtlichste Wahl ist der Namen Ihres 
Projekts &ndash; wenn dieser bei Freenode verfügbar ist, nehmen Sie ihn.
Wenn nicht, wählen Sie etwas möglichst ähnliches und leicht zu
merkendes. Bewerben Sie den Kanal auf Ihrer Webseite, damit Besucher 
mit kurzen Fragen hat ihn gleich finden. Folgender Hinweis erscheint 
z.B. markant in einem Kasten oben auf der Hauptseite von 
Subversion:</para>

  <blockquote>
    <para><emphasis>Wenn Sie Subversion nutzen, empfehlen wir Ihnen
    die </emphasis> <literal>users@subversion.tigris.org</literal>
    <emphasis>Mailingliste zu aboniieren und das 
    <ulink url="http://svnbook.red-bean.com/">Subversion-Buch</ulink>
	sowie die 
    <ulink url="http://subversion.tigris.org/faq.html">FAQ</ulink> zu 
    lesen. Sie können auch Fragen im IRC stellen auf 
    </emphasis><literal>irc.freenode.net</literal><emphasis> im 
    Kanal</emphasis>&nbsp;<literal>#svn</literal>.</para>
  </blockquote>

<para>Manche Projekte haben mehrere Kanäle, einen für jedes Unterthema.
Einen z.B. für Probleme bei der Installation, einen weiteren für Fragen
der Nutzer, noch einen für Diskussionen der Entwickler, usw.
(<xref linkend="growth"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase> behandelt wie man die 
verschieden Kanäle aufteilt). Wenn Ihr Projekt noch jung ist, sollte
es nur einen Kanal geben, indem alle zusammen miteinander reden. 
Später, sobald das Verhältnis von Nutzer zu Entwickler zunimmt, kann 
es nötig werden separate Kanäle zu haben.</para>

<para>Wie sollen Leute jedem Kanal erfahren und woher sollen sie gar
wissen in welchen sie reden sollen? Und wenn sie reden, woher sollen
sie die hiesigen Konventionen kennen?</para>

<para>Die Antwort ist, es ihnen zu sagen, indem man den
<firstterm>channel topic</firstterm> entsprechend 
setzt.<footnote><para>Um den Topic in einem Kanal zu setzen, benutzen 
Sie den <literal>/topic</literal> Befehl. Alle Befehle im IRC fangen 
mit einem "<literal>/</literal>" an. Siehe 
<ulink url="http://www.irchelp.org/"/> wenn Sie nicht mit der Nutzung 
und Administration von IRC vertraut sind; insbesondere ist 
<ulink url="http://www.irchelp.org/irchelp/irctutorial.html"/> eine 
hervorragende Anleitung.</para></footnote> Der Topic des Kanals ist 
eine kurze Nachricht, die jeder Nutzer beim betreten des Kanals sieht.
Es gibt Neulinge eine kurze Anleitung und Hinweise wie sie an weitere 
Informationen kommen wie z.B.:</para>

<screen>
Sie sind jetzt in #svn

Topic: #svn ist ein Forum für Fragen von Subversion-Benutzern, siehe 
auch http://subversion.tigris.org/. || Entwickler-Diskussionen finden 
in #svn-dev statt. || Fügen Sie hier bitte keine langen Protokolle ein,
nutzen Sie hierzu eine Pastebin-Seite wie http://pastebin.ca/. || 
Neuigkeiten: Freigabe von Subversion 1.1.0, weiteres dazu auf
http://svn110.notlong.com/.
</screen>

<para>Das ist zwar knapp, aber es sagt neue, was sie wissen müssen.
Es sagt genau wofür der Channel ist, gibt einen Link zu der Webseite
des Projekts (falls jemand an den Channel vorbei kommt ohne vorher drauf
gewesen zu sein), erwähnt einen verwanden Channel, und gibt ein wenig
Anleitung, wie über sich beim Einfügen verhalten soll.</para>

<sidebar id="paste-sites">
<title>Pastebin-Seiten</title>

<para>Der Platz in einem IRC-Kanal wird von allen geteilt: jeder sieht
was der andere sagt. Normalerweise ist das etwas gutes, da es Leute
erlaubt sich an eine Unterhaltung zu beteiligen, wenn sie meinen etwas 
beitragen zu können und Beobachtern erlaubt beim zusehen etwas zu 
lernen. Wenn jemand aber einen langen Text zitieren muss, wie ein 
Protokoll aus einem Debugger wird das problematisch, da eine derart 
viele Zeilen andere Unterhaltungen stören würde.</para>

<para>Die Lösung ist eine der <firstterm>pastebin</firstterm> oder
auch <firstterm>pastebot</firstterm> Seiten zu benutzen. Wenn man eine
viele Daten bei jemanden anfragt, bitten Sie darum es nicht in den
Kanal einzufügen, sondern ihre Daten (beispielsweise) auf 
<ulink url="http://pastebin.ca/"/> abzulegen und die sich ergebende URL
in den Kanal zu kopieren. So kann jeder der möchte sich die Daten 
anschauen.</para>

<para>Es gibt eine Vielzahl verfügbarer Seiten, zu viele um alle
aufzulisten, hier sind jedoch einige die ich in Verwendung gesehen 
habe:
<ulink url="http://www.nomorepasting.com/"/>,
<ulink url="http://pastebin.ca/"/>,
<ulink url="http://nopaste.php.cd/"/>
<ulink url="http://rafb.net/paste/"/>
<ulink url="http://sourcepost.sytes.net/"/>,
<ulink url="http://extraball.sunsite.dk/notepad.php"/>,
und
<ulink url="http://www.pastebin.com/"/>.</para>

</sidebar>

<sect2 id="bots">
<title>Bots</title>

<para>Viele IRC-Kanäle mit einem technischen Thema haben einen nicht 
Menschlichen Teilnehmer, einen sogenannten <firstterm>Bot</firstterm> 
der in der Lage ist auf bestimmte Befehle zu reagieren indem er 
Informationen speichert und wiederzugibt. Typischerweise wird der Bot 
genau wie jeder andere im Kanal angesprochen, was soviel heißt wie die 
Befehle zu übermitteln, indem man mit dem Bot "redet". Z.B.:</para>

<screen>
&lt;kfogel&gt; ayita: learn diff-cmd = http://subversion.tigris.org/faq.html#diff-cmd
&lt;ayita&gt;  Thanks!
</screen>

<para>Dem Bot (mit dem Namen ayita im Kanal angemeldet) wurde dadurch
gesagt, dass er sich eine bestimmte URL merken soll und bei einer
Anfrage nach "diff-cmd" wiedergeben soll. Jetzt können wir ayita 
ansprechen und bitten einem anderen Nutzer etwas über das diff-cmd zu 
erzählen:</para>

<screen>
&lt;kfogel&gt; ayita: tell hmustermann about diff-cmd
&lt;ayita&gt;  hmustermann: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>Dafür gibt es auch ein Kürzel:</para>

<screen>
&lt;kfogel&gt; !a hmustermann diff-cmd
&lt;ayita&gt;  hmustermann: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>Der genaue Befehl und das Verhalten unterscheidet sich bei jedem
Bot. Das obige Beispiel benutzt <literal>ayita</literal>
(<ulink url="http://hix.nu/svn-public/alexis/trunk/"/>), wovon
üblicherweise in <literal>#svn</literal> eine Instanz läuft. Andere Bots
sind unter anderem (<ulink url="http://dancer.sourceforge.net/"/>) und
Supybot (<ulink url="http://supybot.com/"/>). Beachten Sie, dass man
keine besonderen Rechte auf den Server haben muss um einen Bot zu
betreiben. Ein Bot kann auf einem beliebigen Rechner betrieben werden;
jeder kann einen Einrichten und anweisen einen bestimmten 
Server/Kanal zu betreten.</para>

<para>Wenn Sie in Ihrem Kanal bemerken, dass immer wieder die gleichen
Fragen gestellt werden, empfehlen ich Ihnen dringend einen Bot 
einzurichten. Nur wenige Nutzer im Kanal werden herausfinden wie der
Bot zu bedienen ist, diese Personen werden aber einen um so mehr Fragen
beantworten können, da der Bot es Ihnen ermöglicht, viel effektiver 
antworten zu können.</para>

</sect2>

<sect2 id="irc-archiving">
<title>IRC-Archive</title>

<para>Auch wenn es möglich ist alles in einem Kanal zu archivieren,
wird das nicht unbedingt erwartet. Unterhaltungen im IRC sind im Grunde
genommen öffentlich, aber viele betrachten es sie als informelle,
halbwegs private Unterhaltungen. Nutzer neigen dazu nicht so sehr auf
ihre Grammatik zu achten und äußern Meinungen (zum Beispiel über andere
Entwickler im Projekt) die sie nicht unbedingt archiviert haben 
möchten.</para>

<para>Es wird natürlich manchmal <emphasis>Auszüge</emphasis> geben,
die erhalten werden sollte und das ist auch in Ordnung. Die meisten 
IRC-Anwendungen können, wenn der Nutzer das möchte, Unterhaltungen
mitschneiden oder wenn das nicht geht, kann die Unterhaltung immer noch
aus dem Fenster der Anwendung heraus kopiert und in ein beständigeres
Forum (meistens der Bugtracker) einfügt werden. Alles mitzuschneiden 
kann aber manche Nutzer unruhig machen. Wenn sie doch alles 
archivieren, stellen Sie sicher, dass es klar im Topic
erklärt wird und geben Sie die URL des Archivs an.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="wikis">
<title>Wiki</title>

<para>Ein <firstterm>Wiki</firstterm> ist eine Webseite die es jedem
Besucher erlaubt ihren Inhalt zu bearbeiten; der Begriff "wiki" (von
dem Hawaiischen Wort für "schnell" oder "super-schnell") ist auch der
Name der Software, die diese Bearbeitung möglich macht. Wikis wurden 
1995 erfunden, wurden aber erst 2000 oder 2001 populär, z.T. 
unterstützt durch den Erfolg von Wikipedia
(<ulink url="http://www.wikipedia.org/"/>), ein wiki basiertes freies 
Lexikon. Sie können eine wiki zwischen dem IRC und einer Webseite 
einordnen: Wikis finden nicht in Echtzeit statt, also haben Leute die 
Möglichkeit ihre Beiträge zu überdenken und zu polieren, es ist aber 
auch sehr leicht beiträge zu machen, da der Aufwand für die bearbeitung
geringer ist als bei einer gewöhnlichen Webseite.</para>

<para>Wikis gehören noch nicht zur Standardausstattung für 
Open-Source-Projekte, werden es aber wahrscheinlich bald sein. Sie sind
eine relativ neu Technik, und es wird noch mit ihrer Nutzung 
experimentiert. Ich gebe hier ein paar Worte zur Vorsicht &ndash; derzeit
ist es einfacher, den Missbrauch von Wikis zu untersuchen als ihre 
Erfolge.</para>

<para>Wenn Sie sich entschließen ein Wiki zu betreiben, sollten Sie
eine Menge in eine klare Organization der Seiten und einen angenehmen
Seitenaufbau investieren, damit Besucher (bzw. potentielle Teilnehmer)
instinktiv wissen, wo sie ihre Beiträge einordnen sollen. Gleichermaßen
wichtig ist es, diese Richtlinien in das Wiki hinein zu schreiben, damit 
Teilnehmer etwas zur Orientierung haben. Viel zu oft fallen 
Administratoren der Fantasie zum Opfer, dass eine Horde Besucher alle
für sich genommen qualitativ hochwertige Beiträge leisten, und der 
Inhalt deshalb auch insgesamt qualitativ hochwertig sein muss. So jedoch
funktionieret ein Wiki nicht. Jede individuelle Seite, jeder Abschnitt,
kann für sich genommen gut sein, aber es wird niemals gut sein dass es in einem 
schlecht organisierten oder verwirrenden Ganzen eingebettet ist. Wikis
leiden viel zu häufig an:</para>

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Einem Mangel an
     Orientierungsrichtlinien.</emphasis> Eine gut organisierte 
     Webseite gibt dem Besucher das Gefühl, jederzeit Bescheid zu wissen,
     wo er ist. Bei Seiten mit einer guten Aufmachung kann man 
     beispielsweise intuitiv den Unterschied zwischen dem Bereich für
     das "Inhaltsverzeichnis" und dem für den "Inhalt" erkennen. 
     Autoren des Wikis werden solche Unterschiede auch respektieren, 
     aber nur wenn die Unterschiede schon am Anfang vorhanden 
     sind.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Doppelte Informationen.</emphasis> 
     Häufig passiert es in Wikis, dass irgendwann verschiedene Seiten 
     ähnliches sagen, da die einzelnen Teilnehmer nicht unbedingt 
     mitbekommen was andere schreiben. Teilweise kann das am Fehlen der
     oben erwähnten Orientierungsprinzipien liegen insofern, dass 
     Personen vielleicht nicht die doppelten Inhalte finden wenn sie 
     nicht dort liegen, wo man sie erwarten würde.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Unklarheit bezüglich der Zielgruppe.</emphasis>
     Zu einem gewissen Grad ist dieses Problem bei einer großen Anzahl
     an Autoren unvermeidbar, kann aber verringert werden, wenn es 
     schriftliche Richtlinien gibt, wie man die Inhalte erstellt. Es 
     hilft auch, neue Beiträge am Anfang aggressiv zu bearbeiten, damit
     die Normen eine Wirkung hinterlassen.</para>
  </listitem>
</itemizedlist>

<para>Die Gemeinsame Lösung für all diese Probleme ist die gleiche:
Redaktionelle Normen anzusetzen und sich nicht allein auf ihre Bekanntgabe
zu verlassen, sondern sie durch die Bearbeitung von Seiten durchzusetzen
und sich ihnen auch selbst zu unterwerfen.
Im Allgemeinen werden Wikis alle Schwächen im
Ausgangsmaterial verstärken, da die Teilnehmer alle Muster nachahmen 
werden, die sie vorfinden. Richten Sie das Wiki nicht nur ein und
hoffen Sie, dass sich alles fügt. Es muss auch mit gut geschriebenen
Inhalten angefangen werden, damit Besucher eine Vorlage als Beispiel
haben.</para>

<para>Das leuchtende Beispiel eines gut betriebenen Wikis ist die
Wikipedia, obwohl das teilweise daran liegen mag, dass der Inhalt
(Lexikon-Einträge) von Natur aus für das Wiki-Format geeignet ist. Wenn
Sie die Wikipedia aber genauer ansehen, werden Sie feststellen,
dass die Administratoren eine <emphasis>äußerst</emphasis> gründliche
Basis für die Zusammenarbeit ausgelegt haben. Es gibt eine ausführliche
Dokumentation dazu, wie man neue Einträge schreiben soll, wie man einen 
angemessenen, neutralen Standpunkt bewahrt, welche Art von Änderungen 
man vornehmen oder vermeiden sollte, welche Verfahren dazu taugen, 
Konflikte zwischen sich widersprechende Bearbeitungen aufzulösen (mit 
mehreren Schritten, mitunter auch das letzte Mittel eines 
Schiedsgerichts) usw. Sie haben auch eine Verwaltung für die 
Autorisierung, damit sie eine Seite für die Bearbeitung so lange 
sperren können, sollte sie zum Ziel mehrfacher unangemessener
Bearbeitungen werden, bis das Problem gelöst wurde. Mit anderen Worten,
schmeißen sie nicht einfach ein paar Vorlagen auf eine Webseite und 
drückten die Daumen. Wikipedia funktioniert deshalb, weil die Gründer 
sorgfältig darüber nachgedacht haben, wie man tausende Fremde dazu 
bringt, ihren Schreibstil einer gemeinsamen Vision anzupassen. Auch 
wenn sie nicht gleichermaßen vorbereitet sein müssen, um in einem freien
Software-Projekt ein Wiki zu betreiben, lohnt es sich diesen Geist 
nachzuempfinden.</para>

<para>Weitere Informationen über Wikis finden Sie unter 
<ulink url="http://en.wikipedia.org/wiki/Wiki"/>. Das erste Wiki ist
weiterhin wohlauf und beinhaltet viel Material darüber wie man Wikis 
betreibt: Siehe <ulink url="http://www.c2.com/cgi/wiki?WelcomeVisitors"/>, 
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorks"/>, und
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorksNot"/> für 
verschiedene Ansichten.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="web-site">
<title>Webseite</title>

<para>Es gibt aus technischer Sicht nicht viel darüber zu sagen, wie man
die Webseite für das Projekt einrichtet: Einen Webserver aufzubauen 
und Webseiten zu schreiben sind relativ einfache Aufgaben, und das 
wichtigste im Bezug auf das Layout und die Anordnung wurde bereits im 
vorherigen Kapitel abgedeckt. Die Hauptfunktion der Webseite ist es, 
eine klare und einladende Übersicht über das Projekts zu geben und die 
anderen Werkzeuge einzubinden (die Versionsverwaltung, Bugtracker, 
usw.). Wenn Ihnen die Kenntnisse dazu fehlen, selbst einen Webserver 
aufzusetzen, ist es normalerweise kein Umstand, jemand zu finden der es
kann und bereit ist zu helfen. Trotzdem ziehen es manche vor, 
Hosting-Pakete zu nutzen, um sich Zeit und Mühe zu sparen.</para>

<sect2 id="canned-hosting">
<title>Hosting-Pakete</title>

<para>Es gibt zwei Hauptvorteile bei der Nutzung von Hosting-Paketen. 
Der erste ist die Kapazität ihrer Server und ihre Bandbreite: Ihre
Server sind schnelle Kisten mit dicken Leitungen. Egal wie erfolgreich
Ihr Projekt wird, Ihnen wird niemals der Plattenplatz oder
die Bandbreite ausgehen. Der zweite Vorteil ist seine Einfachheit. Sie
haben bereits einen Bugtracker, eine Versionsverwaltung, eine
Malinglisten-System, ein Archiv-System und alles andere was Sie benötigen
um eine Seite zu betreiben. Sie haben die Programme konfiguriert, und 
kümmern sich um die Sicherung aller Daten dieser Programme. Sie müssen
nicht viele Entscheidungen treffen. Sie müssen lediglich ein Formular
ausfüllen, einen Knopf drücken und plötzlich haben Sie eine Webseite
für Ihr Projekt .</para>

<para>Das sind ziemlich schwerwiegende Vorteile. Der Nachteil ist 
natürlich, dass Sie sich mit <emphasis>deren</emphasis> Auswahl und
Konfiguration abfinden müssen, selbst wenn etwas anderes für Ihr
Projekt besser wäre. Meistens lassen sich diese Seiten innerhalb enger
Grenzen konfigurieren, aber Sie werden niemals die feingranulare
Kontrolle haben wie bei einer selbstgebauten Seite mit vollem 
administrativen Zugriff auf den Server.</para>

<para>Ein perfektes Beispiel hierfür ist die Handhabung generierter
Dateien. Bestimmte Webseiten des Projekts können generierte Dateien
sein &ndash; es gibt z.B. Systeme um die Daten für eine FAQ in ein
einfaches Quellformat zu schreiben, von dem aus HTML, PDF und andere 
Darstellungsformate generiert werden kann. Wie in 
<xref linkend="version-everything"/><phrase output="printed"> früher 
in diesem Kapitel</phrase> beschrieben, wollen Sie nicht die
generierten Formate in der Versionsverwaltung haben, sondern nur die
Quelldatei. Wenn Ihre Webseite aber auf den Server von jemand anderem
betrieben wird, kann es unmöglich sein, ein eigenes Script einzubinden,
um die HTML-Version automatisch zu erzeugen, gleich nachdem etwas an 
der Quelldatei geändert wurde. Die einzige Abhilfe ist es die generierten
Formate zusätzlich in der Versionsverwaltung abzulegen, damit sie auch auf
der Webseite auftauchen.</para>

<para>Es kann auch schwerwiegendere Folgen geben. Sie werden vielleicht
nicht so viel Kontrolle über die Präsentation haben, wie Sie es sich wünschen
würden. Manche Hosting-Seiten erlauben es Ihnen, Ihre Webseiten 
anzupassen, der vorgegebene Aufbau hinterlässt aber aber meistens an 
verschiedenen Stellen erkennbare Spuren. Manche auf SourceForge gehostete
Projekte haben ausgefeilte eigene Webseiten, verweisen 
Entwickler aber immer noch auf ihre "SourceForge Seite" für weitere 
Informationen. Die SourceForge-Seite ist, was die Webseite des Projekts
gewesen wäre, wenn das Projekt keine angepasste Seite benutzt hätte. Auf
der SourceForge-Seite sind Verweise auf den Bugtracker, zum 
CVS-Repository, Downloads, usw. Eine SourceForge-Seite beinhaltet
unglücklicherweise auch eine ganze Menge belangloses Rauschen. Oben ist
ein Werbebanner, oftmals eine Animation. Links ist eine vertikale
Anordnung verschiedener Verweise die für jemandem, der am Projekt 
interessiert ist, kaum von Bedeutung sein dürften. Rechts ist meistens
noch mehr Werbung. Lediglich der mittlere Bereich der Seite ist dem 
Material des Projekts gewidmet und selbst das ist verwirrend 
angeordnet, so dass Benutzer unsicher sind, worauf sie als nächstes 
klicken sollen.</para>

<para>Hinter jedem einzelnen Aspekt, gibt es zweifelsohne einen guten
Grund; gut für SourceForge, wie z.B. die Werbung. Für das einzelne 
Projekt kann das Ergebnis aber eine nicht ganz optimale Webseite sein.
Es ist nicht meine Absicht, auf SourceForge herum zu hacken; ähnliche 
Bedenken lassen sich auf viele andere Seiten übertragen, die Hosting-Pakete 
anbieten. Das Wesentliche ist hierbei, den Kompromiss zu erkennen den man
eingeht. Es wird Ihnen die technische Bürde abgenommen, eine eigene
Webseite zu betreiben, dafür müssen Sie akzeptieren das jemand anders
bestimmt, wie sie betrieben wird.</para>

<para>Sie alleine können entscheiden, ob ein Hosting-Paket für Ihr
Projekt das Beste ist. Wenn Sie eine solche Seite wählen, halten Sie
sich die Möglichkeit offen, im nachhinein auf Ihre eigenen Server zu 
wechseln, indem Sie einen gesonderten Domain-Namen als Adresse 
verwenden. Sie können diese URL für komplizierte Funktionen auf die 
Hosting-Seite leiten. Ordnen Sie aber unbedingt alles so, dass 
Sie die die Adresse des Projekts nicht ändern müssen, sollten Sie sich 
später umentscheiden.</para>

<sect3 id="canned-hosting-choosing">
<title>Die Wahl eines Hosting-Pakets</title>

<para>Die größte und bekannteste Hosting-Site ist 
<ulink url="http://www.sourceforge.net/">SourceForge</ulink>.  Zwei 
weitere Sites, die gleiche oder ähnliche Dienste anbieten, sind 
<ulink url="http://savannah.gnu.org/">savannah.gnu.org</ulink> und 
<ulink url="http://www.berlios.de/">BerliOS.de</ulink>. Ein paar 
Organisationen, wie die <ulink url="http://www.apache.org/">Apache 
Software Foundation</ulink> und 
<ulink url="http://www.tigris.org/">Tigris.org</ulink><footnote><para>Haftungsausschluss: 
Ich bin bei <ulink url="http://www.collab.net/">CollabNet</ulink> 
angestellt, das ein Sponsor von Tigris.org ist und ich benutze 
regelmäßig Tigris.</para></footnote>, bieten kostenloses Hosting für 
Open-Source-Projekte an, die gut zu ihrer Mission und den existierenden
Projekten der Gemeinschaft passen.</para>

<para>Als Teil der Nachforschungen für seine Diplomarbeit 
<citetitle>Aufbau eines Modells zur Evaluierung von Freie/Open Source
Projekt Hosting (FOSPHost) Seiten</citetitle> hat Haggen so eine
gründliche Evaluierung verschiedener Hosting-Seiten gemacht. Die
Ergebnisse finden Sie bei 
<ulink url="http://www.ibiblio.org/fosphost/"/>, die Vergleichstabelle
bei <ulink url="http://www.ibiblio.org/fosphost/exhost.htm"/> ist
besonders anschaulich und lesenswert.</para>

</sect3>

<sect3 id="anonymity">
<title>Anonymität und Beteiligung</title>

<para>Ein Problem, das nicht zwangsläufig auf Seiten beschränkt ist,
die Hosting-Pakete benutzen, dort aber am häufigsten anzutreffen sind, ist der 
Missbrauch der Login-Funktion. Die Funktion selbst ist relativ einfach:
Die Seite erlaubt jedem Benutzer sich mit Namen und Passwort zu 
registrieren. Von da an speichert sie ein Profil für diesen Nutzer und
die Administratoren der Projekte können dem Nutzer bestimmte Rechte
einräumen, z.B. Schreibzugriff auf das Projektarchiv.</para>

<para>Das kann äußerst nützlich sein und es ist tatsächlich eines der
wesentlichen Argument für fertige Hosting-Pakete. Das Problem ist, dass 
Nutzer sich manchmal für Aufgaben anmelden müssen, die eigentlich auch
ohne Anmeldung möglich sein sollten, z.B. um Tickets im Bugtracker
zu erstellen. Indem man eine Anmeldung für solche Aufgaben voraussetzt,
hebt das Projekt die Hürde zur Mitwirkung an Dingen an, die
möglichst schnell und einfach sein sollten. Natürlich möchte man
jemanden erreichen können, der Daten in den Bugtracker eingetragen hat,
dazu reicht aber ein Feld, in dem er seine ihre E-Mail-Adresse eingeben kann
(falls er möchte). Wenn ein neuer Benutzer einen Bug findet und ihn
melden möchte, wird er durch die Anforderung verärgert sein, ein 
Konto erstellen zu müssen, nur um einen Eintrag in den Tracker zu 
machen. Er könnte sich leicht entscheiden den Bug gar nicht zu 
melden.</para>

<para>Die Vorteile einer Nutzerverwaltung wiegen im Allgemeinen
schwerer als die Nachteile. Wenn Sie es sich aussuchen können, welche
Aufgaben anonym gemacht werden können, sollten Sie aber nicht nur 
<emphasis>alle</emphasis> Abläufe ohne Schreibzugriff 
für unangemeldete Besucher erlauben, sondern auch bestimmte Aktivitäten um
Daten einzugeben, insbesondere im Bugtracker sowie, falls vorhanden,
auf den Seiten des Wikis.</para>

</sect3>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->

</chapter>
