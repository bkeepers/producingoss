<chapter id="technical-infrastructure">

<title>Technische Infrastruktur</title>

<simplesect>

<para>Freie Software Projekte verlassen sich auf Technologien, die eine
selektive Aufnahme und Integration von Information ermöglichen. Je 
gewandter Sie mit diesen Technologien umgehen und andere dazu bewegen 
können sie zu benutzen, desto erfolgreicher wird Ihr Projekt sein. Mit
zunehmender Größe Ihres Projekts, stimmt das umso mehr. Eine gute
Informationensverwaltung ist es was Open Source Projekte daran hindert, 
unter der Last von Brooks Gesetz ,<footnote><para>Aus seinem Buch 
<citetitle>The Mythical Man Month</citetitle>, 1975. Siehe 
<ulink url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> und 
<ulink url="http://en.wikipedia.org/wiki/Brooks_Law"/>.</para></footnote>
zusammenzubrechen die besagt: Der Einsatz zusätzlicher Arbeitskräfte 
bei bereits verzögerten Softwareprojekten verzögert sie nur noch mehr. 
Er beobachtete, dass die Komplexität eines Projekts mit der Anzahl der 
Teilnehmer <emphasis>Quadratisch</emphasis> zunimmt. Wenn nur wenige
beteiligt sind, kann jeder leicht mit jedem reden, wenn aber hunderte
beteiligt sind, ist es nicht weiter möglich, dass jeder über die Arbeit
jedes anderen bescheid weis. Wenn es bei der Verwaltung eines freien 
Software Projekts darum geht, jedem das Gefühl zu geben in einem Raum 
mit allen Anderen zu sitzen, stellt sich die offensichtliche Frage: Was 
passiert wenn alle in einem gedrängten Raum versuchen auf einmal zu 
reden?</para>

<para>Dieses Problem ist nicht neu. In nicht metaphorisch gesehene
gedrängte Räume ist die Lösung wie in einem Parlament vor zu gehen:
Es gibt formelle Richtlinien für Diskussionen innerhalb von großen 
Gruppen um sicherzustellen, dass wichtige Meinungsverschiedenheiten
nicht durch Zwischenrufe verloren gehen, weitere Richtlinien für die 
Bildung von Untergremien, sowie um erkennen zu können wann 
Entsheidungen getroffen werden, usw. Ein wichtiger Teil der 
Parlamentarischen Diskussion ist zu spezifizieren, wie die Gruppe ihre
Informationen verwaltet. Manche Anmerkungen werden "fürs Protokoll"
gemacht, andere nicht. Das Protokoll selbst ist Gegenstand direkter
Änderungen, und wird nicht als wörtliche Niederschrift der Ereignisse 
auflistungen von Abläufen, usw.</para>

<para>Da das Internet nicht wirklich ein Raum ist, müssen wir nicht die 
Teile der parlamentarischen Diskussion replizieren, die manche Leute 
ruhig hält, während andere Reden. Wenn es aber um Techniken zur 
Verwaltung von Informationen geht, sind gut betriebene Open-Source
Projekte wie eine parlamentarische Diskussionen auf Steroiden. Weil 
fast die gesamte Kommunikation in Open Source Projekten schriftlich
abläuft, haben sich wohl durchdachte Systeme entwickelt um Daten 
angemessen zu markieren und an die richtigen Stellen zu leiten; um 
Wiederholungen zu minimieren, damit Diskussionen nicht auseinander 
laufen; um Daten zu speichern und abzurufen; um schlechte oder veraltete
Informationen zu korrigieren; und um getrennte Informationen miteinander 
zu verbinden, wenn Zusammenhänge gesehen werden. Aktive Teilnehmer in 
Open Source Projekten verinnerlichen viele dieser Techniken und werden 
oft komplexe manuelle Aufgaben durchführen, um sicherzustellen, dass 
Information am richtigen Ziel ankommen. Diese Bestrebungen hängen aber 
letztendlich von der Unterstützung ausgeklügelte Software ab. Die
Kommunikationsmedien sollten so weit möglich, diese Aufgaben selber
übernehmen und Information für Menschen so bequem wie möglich
aufbereiten. In der Praxis werden Menschen natürlich an vielen Stellen
eingreifen müssen und es ist wichtig, dass diese Eingriffe möglichst
einfach sind. Im allgemeinen sollte aber, solange die Menschen sich 
bemühen Informationen sorgfältig zu Kennzeichnen und am richtigen Ziel
zu leiten, die Software so konfiguriert sein, dass sie den 
größtmöglichen Nutzen aus diesen Metadaten zieht.</para>

<para>Die Ratschläge in diesem Kapitel sind sehr Praxisnah und basieren
auf ganz bestimmte Software und Nutzungsverhalten. Es geht hierbei aber
nicht nur darum bestimmte Techniken zu zeigen. Es geht auch darum,
durch viele kleine Beispiele, die beste Haltung zu demonstrieren, um in
Ihrem Projekt eine möglichst gute Informationsverwaltung zu fördern. 
Diese Haltung wird eine Kombination aus technischen Fähigkeiten und 
sozialer Kompetenz sein. Technische Fähigkeiten sind unentberlich, da
die Software für die Informationsverwaltung konfiguriert werden muss,
sowie ein gewisser Grad fortwährender Pflege und Anpassungen sobald
neue Anforderungen auftauchen (siehe z.B. den Abschnitt über die
Handhabung von Wachstum im Projekt im Abschnitt 
<xref linkend="bug-filtering"/><phrase output="printed"> später in 
diesem Kapitel</phrase>). Soziale Kompetenz ist nötig, da eine menschliche 
Gemeinschaft auch gepflegt werden muss: Es ist nicht immer sofort 
ersichtlich wie diese Hilfsmittel am besten genutzt werden und manchmal,
haben Projekte widersprüchliche Konventionen (siehe z.B. Beispiel die 
Diskussion um die Einstellung des <systemitem>Reply-to</systemitem> 
Headers bei ausgehende Nachrichten des E-Mail Verteilers, in 
<xref linkend="mailing-lists"/>). Jeder der mit Projekt etwas zu tun 
hat wird zur richtigen Zeit und auf die richtigen Art, dazu ermutigt 
werden müssen, seinen Teil beizutragen, die Information des Projekts 
geordnet zu halten. Je größer die Beteiligung des Freiwilligen, desto 
komplexer und spezieller werden die Techniken die man von ihm erwarten 
kann sich anzueignen.</para>

<para>Es gibt keine schablonenhafte Lösung für Informationsverwaltung.
Es gibt einfach zu viele Variablen. Es kann sein das Sie irgendwann 
alles richtig eingerichtet haben, genau wie Sie es haben möchten, und 
die meisten Freiwilligen überredet haben mitzumachen, dann aber erweisen
sich manche dieser Vorgänge beim Wachstum des Projekts als nicht 
skalierbar. Oder der Wachstum stabilisiert sich und die Entwickler- und 
Nutzergemeinschaft gewöhnt sich an die technische Infrastruktur, dann 
aber entwickelt jemand eine völlig neues Verwaltungssystem für 
Informationen und neue Freiwillige werden ziemlich bald anfangen zu 
fragen, warum Ihr Projekt diese nicht benutzt&mdash;viele freie
Software Projekte die vor Erfindung von Wikis gegründet wurden erleben 
das gerade (siehe <ulink url="http://en.wikipedia.org/wiki/Wiki"/>). 
Viele Fragen sind Ansichtssache und sind Kompromisse zwischen dem 
Komfort derjenigen die Informationen Produzieren und dem Komfort 
derjenigen die diese Konsumieren, oder der Zeit die erforderlich ist, 
die Software einzurichten und ihrem Nutzen für das Projekt.</para>

<para>Hüten Sie sich vor der Verlockung allzuviel zu automatisieren
das eigentlich die Aufmerksamkeit eines Menschen erfordert. Technische
Infrastruktur ist wichtig, aber ein freies Software Projekt
funktioniert in Wirklichkeit ist die Fürsorge&mdash;und die kluge
Formulierung dieser Fürsorge&mdash;der beteiligten Menschen. Die 
technische Infrastruktur ist hauptsächlich um Menschen das möglichst 
bequem zu machen.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="tools-needed">
<title>Das nötige Werkzeug</title>

<para>Die meiste Open-Source Projekte haben ein mindestmaß an üblichen
Hilfsmitteln um Informationen zu Verwalten:</para>

<variablelist>

   <varlistentry><term>Webseite</term>
     <listitem>
     <para>Hauptsächlich eine zentralisiertes, eingleisiges 
           Informationskanal um das Projekt der Öffentlichkeit zu
           präsentieren. Die Webseite kann auch eine administrative 
           Schnittstelle für andere Hilfsmittel des Projekts 
           sein.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>E-Mail Verteiler</term>
     <listitem>
       <para>Meistens die aktivste Kommunikationsforum in einem
             Projekt und das Medium "fürs Protokoll".</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Versionsverwaltung</term>
     <listitem>
       <para>Ermögliche es den Entwicklern Änderungen am Code bequem 
             zu verwalten, u.a. auch rückgängig zu machen. Erlaubt es
             allen zu sehen was mit dem Code passiert.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Bug-Tracker</term>
     <listitem>
       <para>Ermöglicht Entwicklern ihre Arbeit im Blick zu behalten, 
             mit einander zu koordinieren und neue Versionen zu Planen. 
             Ermöglicht es jedem den Status von einem Bug zu überprüfen 
             und Informationen über den Bug festzuhalten (z.B. wie man 
             ihn reproduziert). Kann außer zur Beobachtung von Fehlern 
             auch für Aufgaben, neue Versionen, Funktionen usw. benutzt 
             werden.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Diskussionsforen</term>
     <listitem>
       <para><remark>Basically, bulletin board systems.  These are not
             as widespread as one would expect, and where they are
             found, they're not used as much as one would expect.  Why?
             Are they worth mentioning at all?</remark></para>
     </listitem>
   </varlistentry>
-->

   <varlistentry><term>Chat</term>
     <listitem>
       <para>Ein Ort für kurze, oberflächliche Diskussionen und um
             Fragen und Antworten auszutauschen. Wird nicht immer 
             vollständig archiviert.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para>Jedes dieser Hilfsmittel ist dazu gedacht, einen bestimmten Bedarf
zu decken, ihre Funktionen sind aber auch mit einander verwandt und 
müssen so eingerichtet werden, dass sie zusammen funktionieren. Weiter 
unten werden wir untersuchen wie man sie so einrichten kann und viel 
wichtiger noch, wie man Leute dazu bewegt sie zu benutzen. Die Webseite
wird erst zum Schluss behandelt, da es eher als Klebstoff fungiert denn 
als eigenständig zu sehendes Hilfsmittel.</para>

<para>Sie können sich eine Menge Kopfschmerzen bei der Einrichtung 
dieser Hilfsmittel ersparen mit der Hilfe von Hosting-Bündel: Ein Server
der vorkonfigurierte Seiten und Vorlagen bereitstellt, sowie alle
zugehörigen Hilfsmittel die man braucht um ein freies Software Projekt 
zu betreiben. Siehe 
<xref linkend="canned-hosting"/><phrase output="printed"> später in 
diesem Kapitel</phrase> indem die Vor- und Nachteile von Hosting-Bündel 
behandelt.</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="mailing-lists">
<title>E-Mail Verteiler</title>

<para>E-Mail Verteiler sind das Tägliche Brot der Kommunikation im 
Projekt. Wenn der Nutzer irgend einem Forum außer der Webseite
ausgesetzt wird, ist es wahrscheinlich einer der E-Mail Verteiler des 
Projekts. Vor Sie aber mit dem Verteiler etwas zu tun haben, werden Sie 
mit seiner Benutzerschnittstelle&mdash;also dem Formular mit dem man 
sich bei dem Verteiler anmeldet. Was uns zur ersten Regel von E-Mail 
Verteiler bringt:</para>

<blockquote>
   <para><emphasis>Versuche nicht den E-Mail Verteiler händisch zu 
   verwalten&mdash;Besorgen Sie sich dazu die nötige 
   Software.</emphasis></para>
</blockquote>

<para>Es wird verlockend sein, diese Aufgabe nach hinten zu stellen. Am 
Anfang scheint es überflüssig diese Software einzurichten. Kleine
Verteiler mit geringem Nachrichtenverkehr händisch zu verwalten mag
verlockend einfach erscheinen: Man richtet einfach eine Adresse für die 
Anmeldung ein, die Anmeldungen werden an Sie weiterleitet, worauf Sie 
seine Adresse in einer Text-Datei eintragen, indem alle Adressen
enthalten sind. Was könnte einfacher sein?</para>

<para>Der Haken bei gut verwalteten Verteilern&mdash;was viele
mittlerweile erwarten&mdash;ist, dass es überhaupt nicht einfach ist. Es
geht nicht nur darum Leute an- und abzumelden wenn sie eine
entsprechende Anfrage machen. Es geht u.a. darum Spam zu verhindern, 
Zusammenfassungen anstatt einzelner Nachrichten, Informationen über den 
Verteiler und das Projekt über automatisierte Antworten zu verschicken. 
Ein Mensch der die Adresse eines Verteilers beobachtet, bietet nur ein
Mindestmaß an Funktionen, und selbst dann nicht so zuverlässig und 
schnell wie es eine Software könnte.</para>

<para>Moderne Verwaltungssoftware für Verteiler bietet für gewöhnlich
mindestens folgende Funktionen:</para>

<variablelist>

  <varlistentry><term>Anmeldung sowohl über E-Mail als auch über die
  Webseite.
  </term>
    <listitem>
      <para>Wenn ein Nutzer sich beim Verteiler anmeldet, sollte er
            <emphasis>umgehend</emphasis> eine automatisierte 
            Willkommensnachricht zugesandt bekommen, indem beschrieben 
            ist wofür man sich angemeldet hat, wie man weiter mit der 
            Verteiler Software umgeht und (am wichtigsten) wie man sich 
            abmeldet. Diese automatische E-Mail kann natürlich 
            bearbeitet werden, um Projekt-spezifische Informationen 
            einzuschließen, wie z.B. die Webseite des Projekts, wo man 
            die FAQ findet, usw.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Nachrichten in Kurzform oder als 
	              Einzelnachrichten</term>
    <listitem>
      <para>Bei der Kurzform erhält der Teilnehmer eine Email am Tag, 
            indem die gesamte Aktivität auf des Verteilers an dem Tag 
            enthalten ist. Wer den Verteiler nur nebenher verfolgt, ohne
            selber beteiligt zu sein, bevorzugt oft die Kurzform, da es 
            ihnen erlaubt alle Themen auf einmal durchzusehen und man
            die Ablenkung durch plötzlich eintreffende E-mails
            vermedet.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Moderation</term>
    <listitem>
      <para>"Moderieren" bedeutet sicherzustellen, dass Nachrichten 
            a)&nbsp;kein&nbsp;spam sind und b)&nbsp;zum&nbsp;Thema
            gehören, vor Sie an den gesamten Verteiler geschickt werden.
            Moderation muss zwangsläufig von Menschen erledigt werden,
            aber Software kann eine Menge dazu beitragen, die Aufgabe 
            einfacher zu gestalten. Zu diesem Thema später mehr.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Administrative Schnittstellen</term>
    <listitem>
      <para>Diese ermöglichen es einem Administrator u.a. ohne Umstände 
            veraltete Adressen zu löschen. Was dringend werden kann, 
            wenn die Adresse eines Empfängers anfängt "Ich bin nicht 
            mehr bei dieser Adresse" Antworten auf jede Nachricht 
            des Verteilers zu schicken. (Manche Verteiler können sowas
            automatisch erkennen und die Person abmelden.)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Manipulation der Header</term>
    <listitem>
      <para>Viele Leute haben ausgeklügelte Filter und Regel für
	    Antworten für ihre E-Mail eingerichtet. Verteiler Software 
            kann bestimmte Header hinzufügen und manipulieren, die
            Empfänger ausnutzen können (mehr dazu später).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Archivierung</term>
    <listitem>
      <para>Alle Nachrichten an die Verteiler werden gespeichert und
	    im Netz bereitgestellt; alternativ bietet manche Software 
            spezielle Schnittstellen an um externe Archivierungssoftware
            einzubinden wie z.B. 
            (<ulink url="http://www.mhonarc.org/"/>). Wie 
            <xref linkend="using-archives"/><phrase output="printed"> im 
            Kapitel <xref linkend="communications"/></phrase> 
            beschrieben, ist Archivierung äußerst wichtig.</para>
    </listitem>
  </varlistentry>

</variablelist>

<para>Der Sinn dieser Punkte ist lediglich um zu betonen, dass die
Verwaltung eines E-Mail Verteilers ein komplexes Problem ist, mit dem
sich schon viele beschäftigt haben und weitestgehend gelöst wurde. Sie 
müssen sicherlich kein Experte auf diesem Gebiet werden. Aber Sie
sollten sich bewusst machen, dass es immer mehr zu lernen gibt, und 
dass die Verwaltung des Verteilers Sie ab und zu beschäftigen während
des Betriebs eines freien Software Projekts. Im weiteren werden wir ein 
paar der häufigsten Punkte beim konfigurieren eines E-Mail Verteilers, 
angehen.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="spam-prevention">
<title>Schutz vor Spam</title>

<para>In der Zeit seit dem dieser Satz geschrieben wurde bis zu seiner
Veröffentlichung, wird das internetweite Spam Problem wahrscheinlich
doppelt so schlimm geworden sein&mdash;oder zumindest wird es einem so
vorkommen. Es gab eine Zeit, nicht all zu lange her, in der man einen 
Verteiler betreiben konnte ohne überhaupt irgend welche Maßnahmen gegen
Spam vornehmen zu müssen. Gelegentlich verirrte sich eine Nachricht,
aber selten genug um nur eine geringes Ärgernis zu sein. Diese Era ist 
für immer vorbei. Heutzutage wird ein Verteiler der keine Maßnahmen 
vornimmt um Spam zu verhindern schnell soweit von Werbemüll überflutet, 
dass es nicht mehr benutzbar ist. Schutz vor Spam ist Pflicht.</para>

<para>Wir unterteilen Schutz vor Spam in zwei Kategorien: Spam
Nachrichten daran hindern auf Ihren Verteiler aufzutauchen, und zu 
verhindern, dass Ihr Verteiler eine Quelle von Adressen für Spam 
harvester wird. Ersteres ist wichtiger also untersuchen wir es
zuerst.</para>

<sect3 id="spam-filtering">
<title>Filterung von Nachrichten</title>

<para>Es gibt drei grundsätzliche Arten spam zu vermeiden und die
meisten E-Mail Verteiler bieten alle drei an. Sie arbeiten zusammen am
effizientesten:</para>

<orderedlist>

  <listitem><para><emphasis role="bold">Es sollten nur Nachrichten von
	    angemeldeten Nutzern automatisch angenommen 
            werden.</emphasis></para>

            <para>Diese Einstellung ist weitestgehend effektiv und 
            bedarf nur geringen administrativem Aufwand, da es für 
            gewöhnlich nur eine kleine Änderung an der Konfiguration 
            der Software des Verteilers bedeutet. Beachten Sie aber, 
            dass Nachrichten denen nicht automatisch Akzeptiert werden
            nicht einfach verworfen werden sollten. Diese sollten aus 
            zwei Gründen statt dessen für weitere Moderation 
            durchgereicht werden. Erstens, wollen Sie auch nicht 
            Angemeldete erlauben Nachrichten an den Verteiler zu senden, 
            schließlich sollte eine Person mit einer Frage oder einem 
            Vorschlag, sich nicht gleich anmelden müssen um eine 
            einzige E-Mail zu senden. Zweitens kann es vorkommen, dass 
            auch angemeldete Benutzer eine anderen E-Mail Adresse
            benutzen als die mit der sie angemeldet sind. E-Mail 
            Adressen sind keine zuverlässige Möglichkeit Menschen zu 
            identifizieren und sollten nicht als solches behandelt 
            werden.</para>
            </listitem>

  <listitem><para><emphasis role="bold">Benutzen Sie einen Spam 
            Filter</emphasis></para>

            <para>Wenn die Software des Verteilers es ermöglicht (was 
            die Meisten tun), können Sie Nachrichten durch eine Spam 
            Filter Software laufen lassen. Automatisierte Spam 
            Filterung ist nicht perfekt und wird es aufgrund des
            andauernden Wettrüstes zwischen Spammer und den Autoren der
            Filter Software. Es kann aber einen großen Teil des Spams 
            reduzieren, der bis zu den Moderatoren durchkommt und da 
            jede solche Verringerung dem Moderator Zeit bei der 
            Untersuchen der Nachrichten erspart, ist jede solche 
            Filterung vorteilhaft.</para>

            <para>Wir haben hier nicht genug Platz für eine detailierte
            Anleitung wie man einen Spam Filter einrichtet. Sie werden 
            dafür die Dokumentation Ihrer Verteiler Software lesen
            müssen (siehe 
            <xref linkend="mailing-list-software"/><phrase output="printed"> später in diesem Kapitel</phrase>).
            E-Mail Verteiler haben oft eingebaute Möglichkeiten um Spam 
            zu verhindern, es kann aber sein, dass Sie weitere Filter 
            von einem dritten Anbieter hinzufügen wollen. Mit diesen 
            Beiden habe ich gute Erfahrungen gemacht: SpamAssassin 
            (<ulink url="http://spamassassin.apache.org/"/>) und 
            SpamProbe 
            (<ulink url="http://spamprobe.sourceforge.net/"/>). Was 
            allerdings kein Urteil über andere Open-Source Filter sein 
            soll von denen einige anscheinend auch ziemlich gut sind. 
            Ich habe zufällig diese Beiden benutzt und war mit ihnen
            zufrieden.</para>
  </listitem>

  <listitem><para><emphasis role="bold">Moderation.</emphasis></para>
            <para>Die Letzte Stufe für Nachrichten die nicht von einem 
            angemeldeten Benutzer stammen und es durch den Spam Filter 
            schaffen ist die <firstterm>Moderation</firstterm>: Die 
            E-Mail wird an eine bestimmte Adresse geleitet, wo es von 
            einem Menschen untersucht wird, der sie entweder annimmt 
            oder ablehnt.</para>

            <para>Eine E-Mail zu akzeptieren kann eine von zwei Formen 
            annehmen: Sie können die E-Mail nur dieses eine Mal 
            annehmen oder Sie können die Software anweisen, diese eine 
            und alle weiteren Nachrichten von dieser Adresse anzunehmen.
            Letzteres ist fast immer vorzuziehen um die zukünftige Bürde
            der Moderation zu verringern. Wie man Nachrichten annimmt, 
            kann sich von System zu System unterscheiden, für gewöhnlich
            reicht es aber eine E-Mail, an eine bestimmte Adresse zu
            senden, mit einem Befehl wie "accept" (um nur diese eine 
            E-Mail zu erlauben) oder "allow" (um diese und alle 
            weiteren Nachrichten zu erlauben).</para>

            <para>Um eine Nachricht abzulehnen reicht es meistens sie 
            einfach zu ignorieren. Wenn der Verteiler niemals eine 
            Bestätigung erhält, wird sie die E-Mail auch nicht 
            verteilen, also erreicht man das erwünschte Ergebnis indem 
            man die E-Mail einfach liegen lässt. Manchmal haben Sie 
            auch die Möglichkeit mit "reject" oder "deny" an den 
            Verteiler zu antworten was dazu führt, dass alle weiteren 
            Nachrichten von dieser Adresse automatisch abgelehnt werden 
            ohne moderiert zu werden. Es gibt selten einen Grund dafür,
            da es bei der Moderation meistens darum geht, Spam zu 
            vermeiden und Spammer neigen eh nicht dazu zwei mal die
            gleiche Adresse zu benutzen.</para>
            </listitem>
</orderedlist>

<para>Die Moderierung sollte allerdings 
<emphasis>ausschließlich</emphasis> für Spam und Nachrichten benutzt
werden, die eindeutig nicht auf den Verteiler gehören, wie z.B. wenn 
jemand aus versehen eine Nachricht an die falsche Adresse schickt. Das 
System wird Ihnen meistens eine Möglichkeit geben eine E-Mail direkt an 
den Absender zu schicken, nutzen Sie diese aber nicht um Fragen zu
beantworten die eigentlich auf den E-Mail Verteiler gehören, selbst 
wenn Ihnen sofort die Antwort einfällt. Das würde der Gemeinschaft des 
Projekts nur die Möglichkeit entziehen sich ein klares Bild zu machen, 
welche Fragen von der Öffentlichkeit gestellt werden und Sie der 
Gelegenheit berauben, diese Fragen selber zu beantworten und/oder die 
Antworten anderer zu sehen. Die Moderierung eines E-Mail Verteilers 
sollte sich strengstens auf Werbemüll und Irrelevante Nachrichten 
beschränken und sonst nichts.</para>

</sect3>

<sect3 id="address-hiding">
<title>Verschleierung von Adressen im Archiv</title>

<para>Um zu verhindern, dass Ihr Verteiler zu einer Quelle von E-Mail
Adressen für Spammer wird gibt es die gebräuchliche Methode Adressen in 
den Archiven zu verschleiern indem man z.B.</para>

    <blockquote>
      <para><literal>hmustermann@einedomain.de</literal></para>
    </blockquote>

<para>mit</para>

    <blockquote>
      <para><literal>hmustermann_AT_einedomain.de</literal></para>
    </blockquote>

<para>oder</para>

    <blockquote>
      <para><literal>hmustermannKEINSPAM@einedomain.de</literal></para>
    </blockquote>

<para>oder irgendetwas (für Menschen) ähnlich offensichtliches ersetzt. 
Da Spam Harvester oft nach dem Prinzip funktionieren, Webseiten 
abzugrasen&mdash;auch die Archive Ihres Verteilers&mdash;und nach
Zeilen mit einem "@" suchen, ist diese Art der Verschleierung eine 
effektive Methode E-Mail Adressen vor Spammer zu verstecken oder
unbrauchbar zu machen. Was natürlich nichts dazu beiträgt zu verhindern,
dass Spam an den Verteiler selbst geschickt wird, aber es kann die 
Menge an Spam reduzieren, die direkt an die persönlichen Adressen der 
Nutzer des Verteilers gesandt wird.</para>

<para>Die Verschleierung von Adressen kann kontrovers sein. Manche
finden, dass es eine gute Idee ist und werden sich wundern wenn Ihre 
Archive es nicht automatisch machen. Andere denken es ist eine zu große 
Unbequemlichkeit (da Menschen auch die Adresse wieder korrigieren 
müssen, vor sie genutzt werden können). Manche behaupten, dass es nicht 
effektiv sei, da Harvester theoretisch jede konsistente Verschleierung, 
ausgleichen können. Es gibt jedoch empirische Beweise, dass die 
Verschleierung von Adressen <emphasis>tatsächlich</emphasis>
funktioniert, siehe 
<ulink url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>

<para>Im Idealfall würde der Verteiler diese Entscheidung jedem Nutzer 
selber überlassen, entweder durch einen zusätzlichen Header oder in den 
Einstellungen seines Kontos beim Verteiler. Ich kenne allerdings keine 
Software, mit dieser Entscheidung für jede Nachricht oder jeden Nutzer 
anbietet, also wird vorerst der Administrator des Verteilers, diese 
Entscheidung für alle übernehmen müssen (angenommen die 
Archivierungssoftware bietet diese Einstellung überhaupt an, was nicht 
immer der Fall ist). Ich neigen in die Richtung die Verschleierung 
anzuschalten. Manche sind sehr vorsichtig Ihre Adresse nicht auf 
Webseiten oder irgendwo anders zu platzieren, an dem ein Spam Harvester 
sie finden könnte und sie wären enttäuscht wenn all ihre Mühe vom 
Archiv eines Verteilers zunichte gemacht würden; zudem ist der Aufwand 
der durch die Verschleierung den Nutzern auferlegt wird nur sehr gering,
da es trivial ist eine verschleierte Adresse zu korrigieren, sollte man
die Person erreichen wollen. Behalten Sie aber das Wettrüsten im 
Hinterkopf: Bis Sie diese Zeilen lesen kann es durchaus sein, dass die 
Harvester sich so weit entwickelt haben, dass sie die häufigsten 
Verschleierungen erkennen können und wir müssen uns wieder etwas neues 
ausdenken.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="header-management">
<title>Erkennung und Handhabung von Header</title>

<para>Die Nutzer des Verteilers wollen oft die von ihm stammenden
E-Mails in einem bestimmten Ordner sortieren, getrennt von ihren 
anderen E-Mails. Ihre E-Mail Software kann das automatisch durchführen,
indem es die <firstterm>Header</firstterm> der E-Mails untersucht. 
Header sind die Felder im Kopf einer E-Mail die Absender, Empfänger, 
Betreff, Datum und verschiedene andere Informationen über die Nachricht 
angeben. Bestimmte Header sind weit verbreitet und im wesentlichen
Pflicht Angaben:</para>

<screen>
From (Von): ...
To (An): ...
Subject (Betreff): ...
Date (Datum): ...
</screen>

<para>Andere sind Optional, wenn auch ziemlich üblich. E-Mails müssen
z.B. genau genommen keinen</para>

<screen>
Reply-to (Antwort An): absender@email.adresse.hier
</screen>

<para>Header angeben, haben es aber trotzdem, da es den Empfängern eine 
narrensichere Möglichkeit gibt den Author zu erreichen (was besonders 
nützlich ist wenn der Author die E-Mail von einer anderen Adresse 
senden musste, als die an der Antworten gerichtet sein sollten).</para>

<para>In manchen E-Mail Programmen ist es einfach Emails anhand von 
verschiedenen Mustern im Betreff unterschiedlich abzulegen. Das führt
zu Anfragen, dass der Verteilers automatischen einen Präfix vor jedem 
Betreff setzen soll, damit E-Mail Programme danach suchen und 
automatisch Nachrichten in den richtigen Ordnern ablegen können. Die 
Idee ist, dass der Author folgendes schreiben würde:</para>

<screen>
Betreff: Erstelle die Version 2.5.
</screen>

<para>die Nachricht aber wie folgt ankommen würde:</para>

<screen>
Betreff: [diskussion@verteiler.beispiel.org] Erstelle die Version 2.5.
</screen>

<para>Obwohl die meisten Verteiler diese Möglichkeit bieten, empfehle 
ich diese Option nicht anzuschalten. Das Problem, kann viel einfacher 
auf eine sehr viel weniger aufdringliche Art gelöst werden, und der 
Preis den man durch verlorenen Platz im Betreff verliert ist viel zu 
hoch. Erfahrene Nutzer von E-Mail Verteilern, suchen die Betreffzeilen 
ihrer im laufe des Tages eingetroffenen Emails ab und entscheiden daran,
ob sie eine Nachricht lesen oder auf ihr Antworten. Den Namen des 
Verteilers vor dem eigentlichen Betreff zu setzen kann die rechte Seite 
des Betreffs über den Bildschirmrand hinausschieben wodurch es
verschwindet. Die Informationen auf denen sich Leser verlassen um zu 
entscheiden, welche Nachrichten Sie öffnen sollen gehen damit z.T. 
verloren und der Nutzen des Verteilers wird dadurch insgesamt für alle
verringert.</para>

<para>Anstatt die Betreffzeile zu verunstalten, sollten Sie Ihren 
Nutzern beibringen, andere übliche Header zu verwenden, angefangen mit 
dem "To:" Header indem die Adresse des Verteilers angeben werden
sollte:</para>

<screen>
To: &lt;diskussion@verteiler.beispiel.org&gt;
</screen>

<para>Jede E-Mail Software die nach Betreff filtern kann, sollte auch
in der Lage sein ebenso einfach nach dem To Header zu filtern.
</para>

<para>Es gibt ein paar weitere optionale, aber üblicherweise angegebene 
Header, die bei E-Mail Verteiler erwartet werden. Nach ihnen zu filtern 
ist noch zuverlässiger als die "To" oder "Cc" Header; da diese Header 
von dem Verteiler an jede Nachrichten Angehängt werden, verlassen sich 
u.U. manche Nutzer auf sie:</para>

<screen>
list-help: &lt;mailto:discuss-help@lists.example.org&gt;
list-unsubscribe: &lt;mailto:discuss-unsubscribe@lists.example.org&gt;
list-post: &lt;mailto:discuss@lists.example.org&gt;
Delivered-To: mailing list discuss@lists.example.org
Mailing-List: contact discuss-help@lists.example.org; run by ezmlm
</screen>

<para>Zum größten Teil sind diese selbsterklärend. Siehe 
<ulink url="http://www.nisto.com/listspec/list-manager-intro.html"/> 
für eine weitergehende Erklärung, oder 
<ulink url="http://www.faqs.org/rfcs/rfc2369.html"/> für die 
ausführliche formale Spezifikation.</para>

<para>Beachten Sie auch, dass diese Header durch den Namen "list" 
impliziert, dass Sie auch administrative Adressen mit den Namen 
"list-help" und "list-unsubscribe" eingerichtet haben. Weitere üblich 
Adressen sind "list-subscribe", um dem Verteiler beizutreten und 
"list-owner", um seine Administratoren zu erreichen. Je nachdem welche
Software Sie für Ihren Verteiler verwenden, werden diese und 
verschiedene Andere eingerichtet sein; die Dokumentation wird dazu 
weiter Angaben haben. Eine vollständige Liste aller Adressen wird
meistens jedem Nutzer, als Teil der "Willkommens Nachricht", bei der 
Anmeldung zugeschickt. Sie werden selber wahrscheinlich eine Kopie 
dieser E-Mail bekommen. Wenn nicht sollten Sie jemand um eine Kopie
bitten, damit Sie wissen was Ihre Nutzer sehen, sobald sie dem 
Verteiler beitreten. Behalten Sie es in Griffweite um Fragen über die
Funktionen des Verteilers beantworten zu können, bzw. noch besser 
wäre, es irgendwo auf Ihre Webseite zu stellen, um bei Fragen der Form
"Wie kann ich mich Abmelden?", Sie einfach auf eine URL weisen 
können.</para>

<para>Manche Verteiler bieten die Option an jede Nachricht eine 
Anweisungen für zum abmelden anzuhängen. Wenn es sie gibt, sollten sie
angeschaltet werden. Es verbraucht für jede Nachricht nur ein paar 
zusätzliche Zeilen an einer harmlosen Stelle und kann viel Zeit
ersparen, indem es die Anzahl der Nutzer reduziert die an 
Sie&mdash;oder schlimmer noch an den ganzen Verteiler&mdash;Anfragen 
schicken, wie man sich abmelden kann.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="reply-to">
<title>Die große "Reply-to" Debatte</title>

<para>Ich habe vorhin in <xref linkend="avoid-private-discussions"/>
betont, wie wichtig es ist Diskussionen in den öffentlichen Foren zu 
halten und erwähnte, dass aktive Maßnahmen manchmal nötig sind um 
Unterhaltungen daran zu hindern ins private abzugleiten; weiterhin
geht es in diesem Kapitel darum, die Kommunikationssoftware soweit zu 
konfigurieren, dass es einem möglichst viel Arbeit abnimmt. Es wäre 
deshalb anzunehmen, dass wenn der Verteiler eine Möglichkeit bietet, 
alle Nachrichten öffentlich zu halten, diese Option offensichtlich
angeschaltet werden sollte.</para>

<para>Nun ja, nicht ganz. Es gibt solch eine Funktion, allerdings hat
es ein paar schwerwiegende Nachteile. Die Frage ob man sie benutzen
soll oder nicht ist einer der am heißesten debatten bei der Verwaltung
von E-Mail Verteilern&mdash;zugegeben, es ist nicht unbedingt eine 
Kontroverse die es auf die Titelseite Ihres Tagesblatts schaffen 
würde, aber Sie kann in einem freien Software Projekt ab und zu 
aufflammen. Unten werde ich die Funktion beschreiben, die 
Hauptargumente beider Seiten erläutern und die mir bestemögliche
Empfehlung geben.</para>

<para>Die Funktion selbst ist relativ einfach: Wenn Sie wollen, kann
der E-Mail Verteiler automatisch, den Reply-to (de. Antwort an) Header
auf die Adresse des Verteilers setzen. Was so viel heißt, dass egal 
was der Author einer E-Mail in den Reply-to Header schreibt (bzw.
selbest wenn nicht einmal angegeben wird), erscheint bei den 
Empfängern der Header mit der Adresse des Verteilers:</para>

<screen>
Reply-to: discuss@lists.example.org
</screen>

<para>Oberflächlich scheint das eine gute Sache zu sein. Praktisch 
jede E-Mail Software berücksichtigt den Reply-to Header, wenn nun 
jemand auf eine Nachricht antwortet, wird Ihre Nachricht an den 
gesamten Verteiler gerichtet sein und nicht nur an den Author der 
ursprünglichen Nachricht. Natürlich kann der Antwortende immer noch 
händisch den Empfänger ändern, wichtig ist aber, dass Antworten 
<emphasis>standardmäßig</emphasis> an den Verteiler gerichtet sind. Es
ist ein perfektes Beispiel für eine Technologie um gemeinschaftliche 
Arbeit zu unterstützen.</para>

<para>Leider gibt es ein einige Nachteile. Das Erste ist bekannt als 
das <firstterm>Ich finde den Weg nicht Nachhause</firstterm> Problem:
Manchmal setzt der ursprüngliche Absender seine "echte" E-Mail Adresse
in den Reply-to Header, da er aus irgendeinem Grund die Nachricht von 
einer anderen Adresse absendet, als er Antworten empfangen möchte.
Personen die immer von der gleichen Adresse absenden und empfangen, 
kennen dieses Problem nicht und viele sind überrascht, dass es das 
Problem überhaupt gibt. Für solche mit einer ungewöhnlichen E-Mail
Konfiguration oder ohne Einfluss auf die Gestalt ihrer E-Mails 
(vielleicht weil sie von der Arbeit aus absenden und keinen Einfluss 
auf ihre IT-Abteilung haben), kann der Reply-to Header die einzige 
Möglichkeit sein sicherzustellen, dass Antworten den ihren Weg zurück 
finden. Wenn eine solche Person an einen Verteiler schreibt bei dem 
sie nicht angemeldet ist, wird ihre Reply-to Einstellung zu einer 
unabdingbaren Information. Wenn der Verteiler sie überschreibt kann 
es passieren, dass sie niemals die Rückmeldung auf ihre Nachricht zu 
Gesicht bekommt.</para>

<para>Bei dem zweite Nachteil geht es um eine Erwartungshaltung, was 
meiner Meinung nach das stärkste Argument gegen die Verunstaltung von 
Reply-to ist. Die meisten erfahrenen E-Mail Nutzer, sind an zwei 
grundsätzliche Arten zu antworten gewohnt: <firstterm>reply-to-all 
(de. Antwort-an-alle)</firstterm> und <firstterm>reply-to-author (de. 
Antwort-an-Author)</firstterm>. Alle modernen E-Mail Programme bieten 
beide Optionen an. Nutzer wissen, dass sie reply-to-all wählen 
sollten um an alle zu Antworten (d.h. inklusive Personen auf dem 
Verteiler), und dass sie reply-to-author wählen sollten um eine 
private Nachricht an den Author zu schicken. Auch wenn Sie an jeder
möglichen Stelle zu offenen Diskussionen ermutigen sollten, gibt es
doch Situationen, bei denen der Antwortende eine private Nachricht
bevorzugen&mdash;zum Beispiel wenn sie etwas vertrauensvolles an den
Author schreiben wollen, was unangemessen für den öffentlichen
Verteiler wäre.</para>

<para>Schauen Sie was nun was passiert wenn der Verteiler den 
ursprünglichen Reply-to Eintrag überschreibt und der antwortende auf 
den reply-to-author Knopf drückt, in der Erwartung eine private E-Mail
an den Absender zu schicken. Aufgrund seiner Erwartungshaltung, wird 
er u.U. nicht nochmal auf die Adresse des Empfängers der neuen E-Mail
achten. Er hat dabei vielleicht eine geheime, vertrauliche Nachricht 
verfasst, mit peinlichen Details über ein Mitglied des Verteilers und 
drückt nun auf absenden. Seine Nachricht erscheint nun unerwartet,
etwas später <emphasis>auf dem Verteiler!</emphasis> Zugegeben, 
theoretisch hätte er sorgfältig auf das Empfänger Feld achten sollen, 
und keine Annahmen über den Reply-to Header machen sollen. Autoren 
setzen aber fast immer Reply-to auf ihre eigene persönliche Adresse 
(oder vielmehr macht ihre E-Mail Software es für sie), und viele die 
schon lange E-Mail benutzen erwarten es mittlerweile. Das geht sogar 
soweit, dass wenn jemand absichtlich reply-to auf irgendeine andere 
Adresse setzt als den Verteiler, er es explizit in dem Text der E-Mail
erwähnt, damit Leute sich bei ihrer Antwort nicht wundern.</para>

<para>Aufgrund der potentiell schwerwiegenden Folgen dieses
unerwarteten Verhaltens, bevorzuge ich es Verteiler so zu 
konfigurieren, dass sie niemals den reply-to header anfassen. Es ist 
ein Beispiel für eine Techniken um Zusammenarbeit zu unterstützen 
mit, wie es mir erscheint, potentiell gefährliche Nebenwirkungen. Auf
der anderen Seite dieser Debatte gibt es jedoch auch starke Argumente.
Es werden Leute, egal wie Sie sich entscheiden, ab und zu fragen warum
Sie sich nicht anders entschieden haben. Da sowas niemals zum 
Hauptthema einer Diskussion werden sollte, kann es angebracht sein
hierfür eine vorformulierte Antwort parat zu haben, die so gestaltet
ist, dass sie die Diskussion eher beendet als anfeuert. Stellen Sie 
klar, dass Sie <emphasis>nicht</emphasis> darauf bestehen, dass Ihre 
Entscheidung, egal welche das auch sein mag, eindeutig die einzig 
richtige und sinnvolle ist (selbst wenn Sie das denken). Deuten statt 
dessen darauf wie alt diese Debatte ist, dass es gute Argumente auf 
beiden Seiten gibt, keine Entscheidung alle zufriedenstellen wird und 
dass Sie einfach die Ihnen bestmögliche Entscheidung getroffen haben. 
Bitten Sie höfflich darum diese Diskussion nicht weiterzuführen, es 
sei denn jemand hat etwas wirklich neues zu sagen. Halten Sie sich 
danach aus dem Thread und hoffen Sie, dass er eines natürlichen Todes 
stirbt.</para>

<para>Jemand wird vielleicht vorschlagen eine Wahl darüber zu halten.
Wenn Sie möchten können Sie das tun, ich persönlich finde es in diesem 
Fall jedoch unzureichend einfach Köpfe abzuzählen. Für jemand der ein 
gewisses Verhalten erwartet, wäre die Strafe unangemessen hoch 
(versehentliche Sendung einer privaten E-Mail an den Verteiler) und 
die Unbequemlichkeit für die übrigen Teilnehmer ist relativ gering (ab 
und zu jemand daran erinnern an den ganzen Verteiler zu antworten 
statt nur an den Author), weshalb man nich eindeutig sagen kann dass 
die Mehrheit, auch wenn sie das ist, eine Minderheit in solch eine 
Gefahr bringen darf.</para>

<para>Ich habe nur die wichtigsten Aspekte dieses Themas hier 
angesprochen. Für eine vollständige Behandlung des Themas, verweise 
ich auf folgende zwei anerkannte Dokumente, die bei dieser Debatte 
immer wieder zitiert werden:

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Lasse Reply-to in ruhe</emphasis>,
     <emphasis>von Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Setze Reply-to auf den Verteiler
	</emphasis>,
     <emphasis>von Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.net/essays/reply-to.mhtml"/></para>
  </listitem>
</itemizedlist>

</para>

<para>Trotz meiner angedeuteten leichten Präferenz, denke ich nicht,
dass es auf diese Frage eine "richtige" Antwort gibt und beteilige 
mich auch gerne auf vielen Verteilern die Reply-to setzen. Das 
wichtigste zu diesem Thema ist sich frühzeitig für das eine oder 
andere zu entscheiden und sich danach nicht zu Debatten über das Thema
verleiten zu lassen.</para>

<sect3 id="reply-fantasies">
<title>Zwei Fantasien</title>

<para>Eines Tages wird jemand die geniale Idee einfallen einen
<firstterm>reply-to-list</firstterm> Schlüssel in einer E-Mail 
Software zu implementieren. Es würde irgend welche der vorher 
erwähnten spezifisch Header benutzen, um die Adresse des E-Mail
Verteilers herauszufinden und direkt bzw. nur an den Verteiler zu 
antworten, ohne irgend welche Empfängeradressen, da diese höchst 
wahrscheinlich sowieso beim Verteiler angemeldet sind. Mit der Zeit 
werden andere E-Mail Programme diese Funktion übernehmen und diese 
ganze Debatte wird sich auflösen. (Tatsächlich gibt es sogar eine 
E-Mail Software namens <ulink url="http://www.mutt.org/">Mutt</ulink> 
mit einer solchen Funktion.<footnote><para> Kurz nachdem dieses Buch 
erschien, schrieb mir 
<ulink url="http://www.michaelbernstein.com/">Michael Bernstein</ulink>
folgende Nachricht: "Es gibt weitere E-Mail Programme außer Mutt, die 
eine reply-to-list Funktion implementiert haben. In Evolution bietet
diese Funktion z.B. wenn auch ohne eigene Schaltfläche über die 
Tastenkombination (Strg+L)."</para></footnote>)
</para>

<para>Eine noch bessere Lösung wäre es, die Verunstaltung von 
Reply-to jedem selber zu überlassen. Wer haben möchte, dass der
Verteiler ihre Reply-to Header ändert (entweder nur für ihren eigenen
oder für alle Nachrichten) könnten darum bitten und solche die es 
nicht wollen könnten bitten es in ruhe zu lassen. Ich kenne jedoch 
keine Software die sowas für jeden Benutzer einzeln einstellen lässt. 
Es scheint, dass wir derzeit mit einer globalen Einstellung für alle
leben müssen.<footnote><para>Seitdem ich das schrieb, habe ich
zumindest von einer Software für Verteiler erfahren, die diese 
Funktion anbietet: 
<ulink url="http://siesta.unixbeard.net/">Siesta</ulink>. Siehe dazu
auch diesen Artikle:
<ulink url="http://www.perl.com/pub/a/2004/02/05/siesta.html"
/></para></footnote></para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="archiving">
<title>Archivierung</title>

<para>Wie man genau ein Archiv für den Verteiler einrichtet,
unterscheidet sich bei jeder Software, und liegen nicht im Rahmen von 
diesem Buch. Wenn Sie ein Programm zur Archivierung wählen oder 
konfigurieren, sollten Sie auf folgendes achten:</para>

<variablelist>

  <varlistentry><term>Zeitnahe Aktualisierung</term>
    <listitem>
      <para>Teilnehmer werden oft auf eine archivierte Nachricht
            verweisen wollen, die ein oder zwei Stunden erst gemacht 
            wurde. Wenn möglich sollte die Software jede Nachricht 
            sofort archivieren, sodass in dem Moment indem es vom 
            Verteiler versandt wird, es auch im Archiv ist. Wenn diese
            Option nicht verfügbar ist, versuchen Sie die Software 
            zumindest so einzustellen, dass es sich ca. jede Stunde
            aktualisiert. (Standardmäßig lässt mache Software die 
            Aktualisierung ein Mal jede Nacht laufen, was aber bei
            einem aktiven E-Mail Verteiler in der Praxis eine viel zu 
            große Verzögerung bedeutet.)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Link Stabilität</term>
    <listitem>
      <para>Sobald eine E-Mail unter einer bestimmten URL archiviert
            wurde, sollte sie ewig, bzw. so lang wie möglich unter 
            genau der gleichen URL erreichbar sein. Selbst wenn die 
            Archive neu aufgebaut werden, aus einem Backup
            wiederhergestellt werden oder sonstwie repariert werden, 
            sollte jede öffentlich bekannte URLs weiterhin gültig 
            sein. Stabile Verweise ermöglichen es Suchmaschinen die 
            Archive zu indexieren und das ist für Nutzer die auf der
            Suche nach sind ein großer Segen ist. Stabile Verweise 
            sind auch wichtig da der Bug-Tracker (siehe 
            <xref linkend="bug-tracker"/>)<phrase output="printed"> 
            später in diesem Kapitel</phrase> oder andere Dokumente
            des Projekts oftmals auf darin enthaltene Nachrichten
            verweisen.</para>

      <para>Idealerweise würde die Software des Verteilers eine URL 
            der jeweiligen Nachricht im Archiv in einem Header 
            mitschicken oder zumindest den URL-Teil, spezifisch für 
            die E-Mail. So weis jeder mit einer Kopie der E-Mail wo 
            es im Archiv zu finden ist, ohne die Archive tatsächlich 
            aufsuchen zu müssen, was hilfreich wäre da jeder Vorgang 
            mit dem Browser automatisch einen größeren Zeitaufwand
            bedeutet. Ich weiß nicht ob irgendein Verteiler Software 
            diese Funktion anbietet; diejenigen die ich benutzt habe, 
            können es leider nicht. Es ist allerdings etwas nachdem 
            man suchen sollte (oder falls Sie Software für E-Mail
            Verteiler schreiben, wäre es eine Funktion die Sie bitte
            in erwägung ziehen sollten).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Backup</term>
    <listitem>
      <para>Es sollte ziemlich offensichtlich sein wie man Sicherungen
            des Archivs macht und der Vorgang um sie 
            wiederherzustellen sollte nicht zu schwierig sein. Mit 
            anderen Worten, behandeln Sie Ihr Archiv nicht wie eine 
            Blackbox. Sie (oder jemand aus Ihrem Projekt) sollte 
            wissen wo die Nachrichten gespeichert werden und wie die 
            Seiten des Archivs wiederherzustellen sind, sollte es 
            jemals nötig werden. Diese Archive sind wertvolle
            Daten&mdash;wenn ein Projekt sie verliert, geht auch ein 
            großer Teil seiner kollektiven Erinnerung verloren.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Unterstützung für Threads</term>
    <listitem>
      <para>Es sollte möglich sein von jeder Nachricht zu dem  
            <firstterm>thread</firstterm> (eine Gruppe verwandter 
            Nachrichten) zu gehen, von dem die ursprüngliche E-Mail 
            ein Teil ist. Jeder Thread sollte auch seine eigene URL 
            haben, getrennt von denen seiner einzelnen 
            Nachrichten.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Suchfunktion</term>
    <listitem>
      <para>Ein Archiv das man nicht durchsuchen kann &mdash;sowohl
            durch den gesamten Text als den Betreffzeilen&mdash; ist 
            nahezu wertlos. Bedenke dass manche Archive ihre 
            Suchfunktion über eine externe Suchmaschinen wie 
            <ulink url="http://www.google.com/">Google</ulink> 
            unterstützen, indem sie die Arbeit einfach auslagern. Das 
            ist zwar akzeptable aber eine direkte Suchfunktion ist 
            meistens besser abgestimmt, da es dem Suchenden erlaubt 
            zu spezifizieren, ob z.B. nur die Betreffzeile durchsucht 
            werden soll oder der gesamte Text.</para>
    </listitem>
  </varlistentry>

</variablelist>

<para>Obiges ist lediglich eine Checkliste um Ihnen die evaluieren und
einzurichtung einer Software für ihre Archive zu erleichtern. Leute 
zu überreden es wirklich zum Vorteil des Projekts zu 
<emphasis>benutzen</emphasis> wird in späteren Kapiteln behandelt, 
insbesondere im Abschnittn <xref linkend="using-archives"/>.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="mailing-list-software">
<title>Software</title>

<para>Hier sind einige Open Source Programme für die Verwaltung von
Verteiler und Archive. Wenn Ihre Projektseite bereits vorkonfiguriert
wurde, werden Sie sich u.U niemals für eines entscheiden müssen. Wenn 
Sie es jedoch selber einrichten müssen sind hier einige Möglichkeiten.
Zu der Software ich tatsächlich benutzt habe gehört Mailman, Etmlm, 
MHonArc, und Hypermail, was aber keine Aussage über andere sein soll
(und natürlich gibt es bestimmt auch andere Programme die ich einfach
nicht gefunden habe, betrachten Sie diese Liste also nicht als 
vollständig).</para>

<para>Software für E-Mail Verteiler:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">Mailman</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.list.org/"/></para>
   <para>(Mit einem eingebauten Archiv und die Möglichkeit externe 
         einzubinden.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">SmartList</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>(Für die Nutung mit Procmail gedacht.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ecartis</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.ecartis.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">ListProc</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://listproc.sourceforge.net/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ezmlm</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://cr.yp.to/ezmlm.html"/></para>
   <para>(Entworfen für 
         <ulink url="http://cr.yp.to/qmail.html">Qmail</ulink>.)</para> 
 </listitem>
 <listitem>
   <para><emphasis role="bold">Dada</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://mojo.skazat.com/"/></para>
   <para>(Trotz des bizarren Versuchs der Webseite die Tatsache zu
         verstecken dass sie freie Software ist, wird sie unter der 
         GNU GPL veröffentlicht. Es hat auch einen eingebauten 
         Archiv.)</para>
 
 </listitem>
</itemizedlist>

<para>Software zur Archivierung:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">MHonArc</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.mhonarc.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Hypermail</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.hypermail.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Lurker</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://sourceforge.net/projects/lurker/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Procmail</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>(Belgeiltend zu SmartList, eine allgemeine Software zur 
         Verarbeitung von E-Mails und sheinbar auch als Archiv
         konfiguriert werden kann.)</para>
 </listitem>
</itemizedlist>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="vc">
<title>Versionsverwaltung</title>

<para>Eine <firstterm>Versionsverwaltung</firstterm> (en. Version 
Control) ist eine Kombination verschiedener Technologien und Verfahren
um Änderung an den Dateien eines Projekts, insbesondere Quellcode, 
Dokumentation und Webseiten, zu verfolgen und verwalten. Wenn Sie noch
nie eine Versionsverwaltung benutzt haben, sollten Sie sich als Erstes
jemand suchen der es bereits getan hat und sie überreden dem Projekt 
beizutreten. Heutzutage wird jeder erwarten, dass zumindest Ihr 
Quellcode unter Versionsverwaltung steht und keiner wird Ihr Projekt 
ernst nehmen, wenn es nicht zumindest halbwegs kompetent mit seiner 
Versionsverwaltung umgeht.</para>

<para>Versionsverwaltung ist beim betrieb eines Projekts 
allgegenwärtig weile es in nahezu jedem Bereich Hilft: Kommunikation 
unter den Entwicklern, Veröffentlichung neuer Versionen, Bug 
Verwaltung, Code Stabilität und experimentelle Entwicklungen sowie
die Annahme und Anerkennung für Änderungen durch bestimmte Entwickler.
Die Versionsverwaltung kann all diese Bereiche zentral koordienieren. 
Der Kern der Versionsverwaltung ist die Verwaltung von Änderungen (en.
<firstterm>change management</firstterm>: Sie identifiziert jede 
einzelne Änderung an den Dateien eines Projekts, fügt ihnen Metadaten 
bei, wie das Datum der Änderung und sein Author und kann jedem der
diese Tatsachen abfragt, auf die gewünschte Art widergeben. Sie ist 
ein Kommunikationsmechanismus bei dem eine Änderung die grundlegende 
Einheit der Information ist.</para>

<para>Dieser Abschnitt behandelt nicht alle Aspekte der Bedienung 
einer Versionsverwaltung. Es ist derart Umfassend, dass es im Verlaufe
des Buchs immer wieder angesprochen werden muss. Hier werden wie uns 
darauf konzentrieren ein Versionsverwaltung auszuwählen und 
einzurichten, sodass es später die gemeinschaftliche Entwicklung 
unterstützt.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="vc-vocabulary">
<title>Vokabular der Versionsverwaltung</title>

<para>Dieses Buch kann Ihnen die Bedienung einer Versionsverwaltung 
nicht beibringen ohne vorherige Erfahrung, es wäre aber unmöglich das 
Thema zu behandeln ohne ein paar spezifische Begriffe. Diese sind 
unabhängig von der Versionsverwaltung: Sie sind die grundsätzlichen 
Nomen und Verben der gemeinsamen Arbeit im Netzwerk und sie werden 
immer wieder im Verlaufe des Buches aufkommen. Selbst wenn es keine 
Versionsverwaltung gäbe, bestünde das Problem der Verwaltung von 
Änderungen und diese Wörter geben uns eine Sprache um präzise und 
prägnant über das Problem zu reden.

<variablelist>

 <varlistentry id="vc-vocabulary-commit">
  <term><firstterm>Commit</firstterm></term>
  <listitem><para>Eine Änderung an dem Projekt vornehmen; formeller
  gesagt, eine Änderung in der Datenbank der Versionsverwaltung zu 
  speichern, sodass es in zukünftige Versionen des Projekts 
  eingebunden werden kann. "Commit" (de. festlegen) kann sowohl als 
  Nomen sowie als Verb benutzt werden. Als Nomen ist es im 
  wesentlichen ein Synonym für Änderung. Beispiel: "Ich habe eben 
  einen Bugfix der bei Nutzern von Max OS X, Abstürze ihrer Server 
  verursacht hat committed, Jay könntest du dir bitte den Commit 
  anschauen und überprüfen, dass ich dort mit der Speicher Zuweisung
  nicht falsch umgehe?"</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-log-message">
  <term><firstterm>Commit-Log</firstterm></term>
  <listitem><para>Ein Kommentar der an jedem Commit angehängt wird,
  mit einer Beschreibung über die Änderung und sein Nutzen.
  Commit-Kommentare sind mitunter die wichtigsten Dokumente in einem
  Projekt: Sie sind die Brücke zwischen der äußerst technischen 
  Sprache der einzelnen Änderungen am Code und der eher Nutzer 
  orientierten Sprache der Funktionen, Bugfixes und dem 
  Projektfortschritt. Später in diesem Abschnitt werden wir uns
  Möglichkeiten anschauen, Commit-Logs für das entsprechend
  angemessene Publikum zu veröffentlichen; ebenso sind in  
  <xref linkend="codifying-tradition"/><phrase output="printed"> im 
  Kapitel <xref linkend="communications"/></phrase> Methoden 
  beschrieben, Beteiligte dazu anzuregen kurze prägnante und nützliche 
  Commit-Kommentare zu schreiben.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-update">
  <term><firstterm>Update</firstterm></term>
  <listitem><para>Eine Anfrage die Änderungen (Commits) anderer
  Teilnehmer in die eigenen lokalen Kopie des Projekts einzubinden; 
  bzw. Ihre Kopie zu aktualisieren. Dies ist ein sehr häufiger 
  Vorgang; die meisten Entwickler aktualisieren ihren Code mehrmals 
  am Tag um sicherzustellen, dass sie ungefähr das Gleiche benutzen, 
  wie die anderen Entwickler und beim Auffinden eines Fehlers sicher
  sein zu können, dass er noch nicht behoben wurde. Z.B.: "Hallo, ich 
  habe bemerkt, dass der Code für die Indexierung immer das letzte 
  Byte fallem lässt. Ist das ein neuer Bug?" "Ja, aber er wurde letzte
  Woche behoben&mdash;versuch mal einen Update zu machen, dann sollte 
  er verschwinden."</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-repository">
  <term><firstterm>Repository</firstterm></term>
  <listitem><para>Eine Datenbank der Versionsverwaltung in der 
  Änderungen gespeichert werden. Manche Systeme sind zentralisiert: Es 
  gibt eine Repository indem alle Änderungen am Projekt gespeichert
  werden. Andere sind dezentralisiert: Jeder Entwickler hat seine 
  eigene Repository und Änderungen können beliebig hin und her 
  getauscht werden. Die Versionsverwaltung verfolgt die Abhängigkeiten 
  zwischen den Änderungen und wenn es Zeit wird eine neue Version zu 
  machen, wird einem bestimmter Satz von Änderungen für die neue 
  Version zugestimmt. Die Frage welche der beiden besser ist, ist eine
  weitere der andauernden heiligen Kriege der Software Entwicklung; 
  versuchen Sie nicht in die Falle zu tappen auf Ihre E-Mail Verteiler
  darüber zu streiten.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-checkout">
  <term><firstterm>Checkout</firstterm></term>
  <listitem><para>Sich eine Kopie des Projekts aus der Repository zu 
  beschaffen. Ein Checkout produziert meistens eine
  Verzeichnisstruktur welches als Arbeitsverzeichniss (siehe unten) 
  bezeichnet wird, von dem aus Änderungen wieder zurück in die 
  Repository übertragen werden können. Bei manchen dezentralisierten 
  Versionsverwaltungen ist jedes Arbeistverzeichniss selbst eine 
  Repository und Änderungen können an jede Repository hoch- oder 
  heruntergeladen werden die bereit ist sie 
  anzunehmen.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-working-copy">
  <term><firstterm>Arbeitsverzeichniss<footnote><para>engl. "working
  copy"</para></footnote></firstterm></term>
  <listitem><para>Der private Verzeichnisbaum eines Entwicklers, 
  mit dem Quellcode des Projekts und möglicherweise seine Webseite 
  oder andere Dokumente. Eine Arbeitskopie enthält auch ein paar 
  Metadaten, die von der Versionsverwaltung benutzt werden um zu 
  Kennzeichen von welcher Repository sie kommt, welche "Revision" 
  (siehe unten) der Dateien vorliegen, usw. Im allgemeinen hat jeder 
  Entwickler seine eigenes Arbeitsverzeichniss, indem er seine 
  Änderungen macht, prüft und seine Commits 
  macht.</para></listitem></varlistentry>

 <varlistentry id="vc-vocabulary-revision">
  <term><firstterm>Revision</firstterm><footnote><para> im engl. auch
  <firstterm>change</firstterm> oder 
  <firstterm>changeset</firstterm> (de. Satz von 
  Änderungen)</para><footnote></term>
  <listitem><para>Eine "Revision" ist für gewöhnlich eine bestimmte
  Version einer Datei oder einem Verzeichniss. Wenn das Projekt z.B.
  mit der revision 6 der Datei D anfängt und dann jemand eine Änderung
  an D committed, entsteht die Revision 7 von D. Manche Systeme
  benutzen "Revision" auch als Bezeichnung für einen ganzen Satz an 
  Änderungen die zusammen als Einheit committed wurden.</para>

  <para>Diese Begriffe haben ab und zu eine Bestimmte technische 
  Bedeutung abhänging von der Versionsverwaltung, im Allgemeinen ist 
  die Idee jedoch immer die gleiche: Sie ermöglichen es genau über 
  bestimmte Zeitpunkte in der Geschichte einer Datei zu reden (wie, 
  direkt vor und nachdem ein Fehler behoben wurde). Beispielsweise: 
  "Ja, sie hat das in Revision 10 behoben" oder "Sie hat das in 
  Revision 10 von foo.c behoben."</para>

  <para>Wenn man von einer Datei oder einer Sammlung von Dateien 
  spricht ohne eine bestimmte revision anzugeben, geht man im 
  Allgemeinen von der aktuellsten Revision aus.</para></listitem>
 </varlistentry>

  <sidebar id="version-vs-revision">
  <title>"Version" kontra "Revision"</title>
  <para>Das Wort <firstterm>Version</firstterm> wird manchmal als
  Synonym für "Revision" benutzt, ich werde es jedoch in diesem Buch 
  nicht auf diese Art verwenden da es zu leicht mit "Version" im 
  Sinne einer bestimmten Version einer Software&mdash;also eine
  Veröffentlichung, mit einer Versionsnummer wie "Version 1.0", zu 
  verwechseln ist . Da der Begriff Versionsverwaltung bereits geläufig 
  ist, werden ich diesen trotzdem weiterhin verwenden.</para>
  </sidebar>

 <varlistentry id="vc-vocabulary-diff">
  <term><firstterm>Diff<footnote><para>kurz für difference (de. 
  Unterschied)</para></footnote></firstterm></term>
  Eine textuelle Representation einer Änderung. Ein Diff zeigt wie und
  welche Zeilen geändert wurden, sowie ein paar zusätzliche Zeilen der
  Umgebun für einen besseren Bezug. Ein Entwickler der bereits ein
  wenig mit dem Code vertraut ist, kann für gewöhnlich ein Diff lesen 
  und verstehen was die Änderung gemacht hat und sogar Fehler
  bemerken.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-tag">
  <term><firstterm>Tag<footnote><para>de. 
  Etikett</para></footnote></firstterm></term>
  <listitem><para>Eine Beschriftung einer bestimmen Menge an Dateien
  ganz bestimmter Revisionen. Tags werden üblicherweise benutzt um 
  interessante Revisionen des Projekts zu bewahren. Für jede neue 
  veröffentlichte Version wird z.B. ein neuer "Tag" erstellt um später
  genau dieselben Dateien/Revisionen aus der Versionsverwaltung
  herunterladen zu können. Häufige "Tag" Bezeichnungen sind sachen wie
  <literal>Version_1_0</literal>, 
  <literal>Auslieferung_00456</literal>, usw.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-branch">
  <term><firstterm>Zweig<footnote><para>engl. 
  branch</para></footnote></firstterm></term>
  <listitem><para>Eine Kopie des Projekts in der Versionsverwaltung
  die aber vom Hauptzweig isoliert ist, damit Änderungen nicht das 
  Übrige Projekt beeinflussen und umgekehrt, außer wenn Änderungen 
  absichtlich von einer Seite zur Anderen portiert werden (siehe 
  unten). Ein Branch kann man auch als Entwicklungszweig bezeichnen. 
  Selbst wenn ein Projekt nicht explizit irgendwelche Zweige hat, 
  gibt es dennoch einen sogenannten "Hauptzweig"<footnote><para>engl. 
  "main branch" auch "main line" oder 
  "<firstterm>trunk</firstterm>"</para></footnote>als den Zweig auf 
  dem die Entwicklung stattfindet.</para>

  <para>Zweige bieten die Möglichkeit verschiedene
  Entwicklungsrichtungen von einander zu trennen. Ein Zweig kann z.B. 
  für Experimentelle Entwicklung benutzt werden, die für den 
  Hauptzweig nicht stabil genug wären. Umgekehrt kann ein Zweig auch
  als Ort benutzt werden um eine neue Version zu stabil zu bekommen.
  Während der Entwicklung kann die reguläre Entwicklung im Hauptzweig
  ohne Unterbrechung weiterlaufen; währenddessen werden auf dem Zweig
  der neuen Version keine Änderungen mehr zugelassen, außer sie werden
  von einem Versionsverwalter genehmigt. Auf diese Art, muss eine neue
  Version die laufende Entwicklung nicht stören. Siehe 
  <xref linkend="branches"/><phrase output="printed">später in diesem 
  Kapitel</phrase> für eine detailliertere Erörterung über 
  Zweige.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-merge">
  <term><firstterm>Merge <footnote><para>im engl. auch "port" de. 
  Zusammenführung/Portierung</para></footnote></firstterm></term>
  <listitem><para>Eine Änderung von einem Zweig in ein Anders 
  übernehmen. Was auch portieren von dem Hauptzweig in einem anderen
  Zweig oder umgekehrt bedeuten kann. Tatsächlich sind das sogar die 
  häufigsten Merges; man portiert selten eine Änderung zwischen zwei 
  Zweige, die nicht beide Hauptzweige sind. Siehe 
  <xref linkend="vc-singularity"/> für mehr zu dieser Art zu
  portieren.</para>

  <para>"Merge" hat eine zweite, verwandte Bedeutung: Die 
  Versionsverwaltung macht einen Merge, wenn zwei Leute die gleiche 
  Datei bearbeitet haben, sodass die Änderungen sich nicht überlappen.
  Da die Änderungen nicht miteinander kollidieren, werden die 
  Änderungen in die eigenen Kopie (mit eigenen Änderungen) übertragen,
  bzw. die Kopie wird aktualisiert. Das kommt sehr häufig vor, 
  besonders in Projekten bei dem mehrere Entwickler am gleichen Code 
  hacken. Wenn zwei verschiedene Änderungen <emphasis>doch</emphasis> 
  überlappen, gibt es einen "Konflikt"; siehe unten.</para>
  </listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-conflict">
  <term><firstterm>Konflikt</firstterm></term>
  <listitem><para>Was geschieht wenn zwei Personen gleichzeitig 
  unterschiedliche Änderungen an der gleichen Stelle im Code vornehmen.
  Jede Versionsverwaltung erkennt Konflikte automatisch, und 
  benachrichtigt mindestens einer der beteiligten Menschen, dass ihre 
  Änderungen mit denen einer Anderen Kollidieren. Der Konflikt muss 
  dann von einem Menschen gelöst (engl. <firstterm>resolve</firstterm>)
  und an die Versionsverwaltung übermittelt werden.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-lock">
  <term><firstterm>Lock</firstterm></term>
  <listitem><para>(de. Schloss/Sperre) Eine Möglichkeit eine exklusive
  Absicht auf eine Datei oder ein Verzeichnis zu erklären. Z.B.: "Ich 
  kann gerade keine Änderungen an der Webseite machen. Es scheint das 
  Alfred alles gesperrt hat während er die Hintergrundbilder 
  korrigiert". Nicht jede Versionsverwaltung bieten überhaupt die 
  Möglichkeit Dateien zu sperren, und solche die es tun erfordern 
  nicht alle, dass sie auch benutzt wird. Das liegt daran, dass 
  parallele, gleichzeitige Entwicklung der Normalfall ist und Personen
  eine Datei für andere zu sperren (üblichicherweise) diesem Ideal
  widerspricht.</para>

  <para>Eine Versionsverwaltungs die einen Lock erfordern um ein 
  Commit zu machen, benutzt das sogenannte 
  <firstterm>lock-modify-unlock</firstterm> Verfahren. Solche die es 
  nicht erfordern nutzen das <firstterm>copy-modify-merge</firstterm>
  Verfahren. Eine ausgezeichnete tiefgehende Erklärung und Vergleich 
  der beiden Methoden ist bei 
  <ulink url="http://svnbook.red-bean.com/svnbook-1.0/ch02s02.html"/>
  zu finden. Im allgemeinen ist die copy-modify-merge Methode besser
  für die Open-Source Entwicklung und jede Versionsverwaltung in 
  diesem Buch unterstützen sie.</para>
  </listitem>
 </varlistentry>

</variablelist>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-choosing">
<title>Wahl einer Versionsverwaltung</title>

<para>Zum Zeitpungkt dieses Schreibens sind die zwei verbreitetsten 
Systeme für die Versionsverwaltung in der Welt der freien Software 
das <firstterm>Concurrent Versions System</firstterm> oder auch 
<firstterm>CVS</firstterm> (<ulink url="http://www.cvshome.org/"/>)
und <firstterm>Subversion</firstterm> (<firstterm>SVN</firstterm>,
<ulink url="http://subversion.tigris.org/"/>).</para>

<para>CVS gibt es schon lange. Die meisten erfahrenen Entwickler sind 
bereits damit vertraut, es erledigt die Aufgabe mehr oder weniger gut 
und da es die Norm ist, werden Sie keine lange Debatten darüber führen
müssen ob es die richtige Wahl war. CVS hat jedoch einige Nachteile. 
Es bietet keine einfache Möglichkeit an sich auf Änderungen an mehreren Dateien gleichzeitig
zu beziehen; es erlaubt es nicht Dateien umzubenennen oder zu kopieren
die unter Versionsverwaltung stehen (was besonders nervt, wenn Sie Ihr
Code neu organisieren wollen, nachdem Sie das Projekt gestartet haben);
es bietet nur dürftige Unterstützung für Merging an; es kann nicht
sonderlich gut mit großen oder binären Dateien umgehen; und manche
Vorgänge sind langsam, wenn sie mit großen Dateimengen zu tun haben.
</para>

<para>Keiner der Fehler von CVS ist fatal, und es ist immer noch 
ziemlich beliebt. In den letzten Jahren sind jedoch ein paar neue
Versionsverwaltungssysteme erschienen, und freie Software Projekte
fangen an sie aus zu probieren. <xref linkend="vc-systems"/> listet
alle mir bekannten auf. Wie diese Liste klar macht, kann die
Entscheidung für ein Versionsverwaltungssystem zu einer lebenslangen
Forschungsprojekt werden. Möglicherweise wird Ihnen die Entscheidung
erspart bleiben weil es von Ihrer Hosting Seite gemacht für Sie
getroffen wurde. Wenn Sie sich aber für eine entscheiden müssen,
befragen Sie andere Entwickler, finden Sie heraus womit Andere bereits
Erfahrung haben, wählen Sie eine aus und halten Sie sich daran. Jedes
stabile, ausgereifte Versionsverwaltungssystem reicht aus; Sie müssen
sich keine Sorgen darüber machen, dass Sie eine furchtbar schlechte
Entscheidung treffen werden. Wenn Sie sich einfach nicht entscheiden
können, dann nehmen Sie CVS. Es ist immer noch die Norm und wird es
auch wahrscheinlich ein paar Jahre lang bleiben. Viele andere Systeme
unterstützen auch die Konvertierung in eine Richtung von CVS, also
können Sie sich später auch umentscheiden.</para>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-using">
<title>Nutzung des Versionsverwaltungssystems</title>

<para>Die Empfehlungen in diesem Abschnitt sind nicht auf ein
bestimmtes Versionsverwaltungssystem ausgelegt, und sollten in jeder
von ihnen einfach zu implementieren sein. Für weitere Details, 
schlagen Sie in der Dokumentation Ihres Systems nach.</para>

<sect3 id="version-everything">
<title>Versioniere Alles</title>

<para>Halten Sie nicht nur den Quellcode Ihres Projekts under
Versionsverwaltung, sondern auch die Webseiten, Dokumentation, FAQ,
Designnotizen, und alles andere, welches jemand vielleicht bearbeiten
möchte. Behalten Sie alles direkt bei dem Quellcode, in der selben
repository. Jedes Stück Information, welches es sich lohnt nieder zu
schreiben, ist es auch wert versioniert zu werden&mdash;also, jedes
Stück Information welches sich Ändern könnte. Sachen die sich nicht
Ändern, sollten archiviert und nicht versioniert werden. Eine Email
ändert sich zum Beispiel nicht, nachdem sie abgeschickt wurde; 
deshalb würde es keinen Sinn machen es zu versionieren (es sei denn es
wird zum Teil einer größeren, sich entwickelnden Dokument).</para>

<para>Der Grund warum es wichtig ist alles an einem Ort zu 
versionieren ist, ist der, dass Personen nur eine Methode lernen
müssen um Änderungen einzureichen. Oftmals, wird ein Beteiligter 
damit anfangen Änderungen an den Webseiten oder der Dokumentation zu
machen, und gehen später dazu über kleine Beiträge zum Quellcode zu
machen. Wenn das Projekt das selbe System für alle Beiträge
verwendet, müssen Leute nur eine Methode lernen. Alles zusammen zu
versionieren, bedeutet auch, dass neue Funktionen gleich mit ihren 
zugehörigen Aktualisierungen an der Doku committed werden können,
dass ein Branch des Codes auch ein Branch der Doku zur Folge hat, usw.
</para>

<para>Behalten Sie <firstterm>generierte Dateien</firstterm> nicht
unter Versionsverwaltung. Sie sind nicht wirklich bearbeitbare Daten,
da sie aus anderen Dateien erzeugt werden. Manche build systeme
erzeugen zum Beispiel <filename>configure</filename> aus der Vorlage
<filename>configure.in</filename>. Um eine Änderung an <filename>
configure</filename> vorzunehmen, würde man <filename>configure.in
</filename> bearbeiten und es daraus neu erzeugen; weßhalb lediglich
die Vorlage <filename>configure.in</filename> "bearbeitbar" ist.
Versionieren Sie lediglich die Vorlage&mdash;wenn Sie die erzeugten
Dateien auch versionieren, wird man zwangsläufig vergessen sie neu
zu erzeugen, sobald man eine Änderung an einer Vorlage committed.
Die daraus resultierende Inkonsistenzen werden endlose Verwirrung 
stiften. <footnote><para>Eine andere Meinung im Bezug auf die 
Versionierung von <filename>configure</filename> Dateien, kann man in 
"<citetitle>configure.in and version control</citetitle>" bei 
<ulink url="http://versioncontrolblog.com/2007/01/08/configurein-and-version-control/"/>
von Alexey Makhotkin finden.</para></footnote></para>

<para>Zu der Regel, dass alle bearbeitbare Dateien unter 
Versionsverwaltung gestellt sein sollten, gibt es eine Ausnahme: den
Bug Tracker. Bug Datenbanken enthalten eine Menge bearbeitbarer Daten,
können aber aus technischen Gründen diese Daten im allgemeinen nicht
im Versionsverwaltungssystem speichern. (Manche Tracker haben eigene
primitive Versionierungs Funktionen, jedoch unabhängig von der
Haupt Repository des Projekts.)</para>

</sect3>

<sect3 id="vc-browsing">
<title>Durchsuchbarkeit</title>

<para>Die Repository des Projekts sollte vom Web aus durchsuchbar
sein. Das bedeutet nicht nur die neuste Version der einzelnen Dateien
einsehen zu können, sondern auch in der Zeit zurück zu gehen und
frühere Versionen der Dateien zu sehen, die Unterschiede zwischen
den verschiedenen Versionen der Dateien sehen zu können, die log
Nachrichten bestimmter Änderungen lesen zu können, usw.</para>

<para>Wenn sich Ihr Projekt durchsuchen lässt, entsteht eine
leichtgewichtiges Portal zu Ihren Daten. Wenn die Repository nicht aus
dem Web durchsucht werden kann, dann wird jemand der eine bestimmte
Datei untersuchen will (sagen wir, um nachzuschauen ob ein bestimmter
Bugfix es in den Code geschafft hat), müsste zuerst lokal einen Client
für die Versionsverwaltung installieren, was ihre einfache Anfrage von
zwei Minuten zu einer halbstündigen Aufgabe machen könnte.</para>

<para>Mit Durchsuchbarkeit meint man auch implizit feststehende URLs 
für Bestimmte Versionen von Dateien und um die derzeit neuste Version 
zu sehen. Was sehr nützlich sein in technischen Diskussionen sein kann,
oder wenn man Personen zu einer bestimmten Dokumentation weisen will.
Man könnte zum Beispiel anstatt "Tipps, wie du den Server debuggen 
kannst, findest du in der www/hacking.html Datei in deiner Arbeitskopie",
"Tipps, wie du den Server debuggen kannst, findest du bei <emphasis>
http://svn.collab.net/repos/svn/trunk/www/hacking.html</emphasis>"
sagen, womit man eine URL gibt, die immer auf die neuste Version der
Datei zeigt. Die URL ist besser, da sie nicht mehrdeutig ist, und die
Frage vermeidet, ob der Angesprochene eine aktuelle Arbeitskopie hat.
</para>

<para>Manche Versionsverwaltungssysteme haben eine eingebaute Funktion
um die Repository online zu durchsuchen, während andere sich auf
Software von dritten Parteien hierfür verlassen. Drei Beispiele 
hierfür sind <firstterm>ViewCVS</firstterm> (<ulink
url="http://viewcvs.sourceforge.net/"/>), <firstterm>CVSWeb</firstterm>
(<ulink url="http://www.freebsd.org/projects/cvsweb.html"/>), und
<firstterm>WebSVN</firstterm> (<ulink
url="http://websvn.tigris.org/"/>). Ersteres funktioniert sowohl mit
CVS als auch Subversion, das Zweite nur mit CVS und Letzteres nur mit
Subversion.</para>

</sect3>

<sect3 id="commit-emails">
<title>Commit Emails</title>

<para>Jeder Commit zu der Repository sollte eine Email erzeugen, die
zeigt, wer sie gemacht hat, wann sie es gemacht haben, welche Dateien
und Verzeichnisse sich geändert haben und inwiefern sie sich geändert
haben. Die Email sollte an einem speziellen Verteiler gehen, separat
von der zu dem die Beteiligten Nachrichten schicken. Entwickler und
andere interessierte Beteiligte sollten dazu ermutigt werden sich auf
dem Commit Verteiler anzumelden, da es die effektivste Art ist sich
über die Ereignisse auf Code Ebene des Projekts am laufenden zu halten.
Abgesehen von den offensichtlichen technischen Vorteilen welches die
Überprüfung durch andere Entwickler bringt (see 
<xref linkend="code-review"/>), können die Commit Emails dazu 
beitragen einen Gemeinschaftssinn entstehen zu lassen, da sie eine
gemeinsame Umgebung schaffen, in dem Personen auf Ereignisse(Commits)
von denen sie wissen das Andere sie auch wahrnehmen, reagieren können. 
</para>

<para>Wie man spezifisch Commit Emails einrichtet, hängt von Ihrem 
Versionsverwaltungssystem ab, für gewöhnlich gibt es aber hierfür
einen Script oder eine andere gebündelte Möglichkeit. Wenn Sie
Schwierigkeiten bekommen es zu finden, dann schauen Sie in Ihrer
Dokumentation nach <firstterm>hooks</firstterm>, insbesondere nach
<firstterm>post-commit hook</firstterm>, bei CVS auch <firstterm>
loginfo hook</firstterm> genannt. Diese Commit hooks sind eine
allgemeine Möglichkeit, nach als Reaktion auf jeden Commit befehle
Aufzurufen. Der Hook wir von einem einzelnen Commit ausgelöst, ihm
werden alle Informationen über den Commit übergeben, und es ist ihm
dann freigestellt, was er damit anfängt&mdash; zum Beispiel eine
Email abzuschicken.</para>

<para>Bei gebündelten Systemen für Commit Emails, werden Sie unter
Umständen, einige standardmäßige Verhalten Ändern wollen:</para>

<orderedlist>

  <listitem>
  <para>Manchmal beinhalten die Commit Emails nicht die tatsächlichen
	Diffs und geben anstatt dessen eine URL an, bei dem man die 
	Änderungen über das Web Portal der Repository einsehen kann.
	Obwohl es gut ist eine URL zu geben, auf die man später	
	verweisen kann, ist es auch <emphasis>sehr</emphasis> wichtig,
	dass die Diffs selber auch mit in den Emails enthalten sind.
	Emails zu lesen, gehört schon zum Alltag der Leute, wenn also
	die Änderungen gleich in der Email zu lesen sind, werden
	Entwickler sie gleich auf der Stelle untersuchen, ohne ihre
	Email Software verlassen zu müssen. Wenn sie erst auf eine URL
	klicken müssen, werden es die Meisten bleiben lassen, da es
	eine weitere Aktion erfordert anstatt einer Fortsetzung von
	dem was sie bereits angefangen hatten. Desweiteren, wenn der
	Entwickler etwas über die Änderung fragen will, geht es viel
	schneller auf die Email zu antworten, und eine Bemerkung an
	entsprechender Stelle zu schreiben, als eine Webseite zu
	besuchen und mühselig den Diff aus dem Web browser heraus
	in das Email Programm zu kopieren.</para>

  <para>(Wenn der Diff natürlich riesig ist, wie zum Beispiel wenn eine
	große Menge von neuem Code dem Repository hinzugefügt wurde,
	macht es natürlich Sinn den Diff weg zu lassen und nur die URL
	anzubieten. Die meisten Systeme für Commit Emails können diese
	Art der Limitierung automatisch. Wenn Ihres es nicht kann, ist
	es immer noch besser, die Diffs mitzuschicken und mit 
	gelegentlich riesigen Emails zu leben, als die Diffs komplett 
	aus zu schalten. Bequeme Möglichkeiten zur Überprüfung und
	Bewertung sind ein Eckstein der gemeinschaftlichen Entwicklung,
	und deshalb unerlässlich.)</para>
  </listitem>

  <listitem><para>Der Reply-to Header der Commit Emails sollte an den
	Email Verteiler für Entwickler gehen, nicht an den Commit
	Verteiler. Wenn also jemand sich eine Commit Email durchgelesen
	und bewertet hat, und daraufhin eine Antwort schreibt, sollte
	die Antwort an den Entwickler Verteiler für Menschen gehen, wo
	technische Angelegenheiten normalerweise diskutiert werden. Es
	gibt hierfür ein paar Gründe. Erstens, wollen Sie alle 
	technischen Diskussionen auf einen Verteiler behalten, Leute
	erwarten nämlich, dass sie dort gehalten werden und so auch nur
	ein Archiv durchsucht werden muss. Zweitens, wird der Commit
	Verteiler als Dienst beworben um Commits zu verfolgen, und
	nicht um Commits zu verfolgen <emphasis>und</emphasis>
	gelegentlich auch technische Diskussionen. Diejenigen die sich
	auf den Commit Verteiler angemeldet haben, wollen nichts 
	anderes als Commit Emails; wenn ihnen also anderes Material
	mittels diesem Verteiler zugesandt wird, brich das ein 
	unausgesprochenes Übereinkommen. Viertens, schreiben Beteiligte
	oft Programme, welche die Commit Emails lesen und verarbeiten
	(um sie zum Beispiel auf einer Webseite anzuzeigen). Diese
	Programme sind auf konsistent formatierte Commit Emails
	ausgelegt, nicht jedoch auf inkonsistente von Menschen 
	geschriebene Emails.</para>

  <para>Bemerke, dass dieser Ratschlag, Reply-to unzuschreiben nicht
	den Empfehlungen aus <xref linkend="reply-to"/>
	<phrase output="printed"> in einem Früheren Abschnitt dieses
	Kapitels</phrase> widerspricht. Es ist immer in Ordnung, wenn
	der <emphasis>Absender</emphasis> einer Nachricht Reply-to
	setzt. In diesem Fall, ist der Absender das 
	Versionsverwaltungssystem selbst, und es setzt Reply-to um
	anzudeuten, dass der angemessene Ort für Antworten der
	Entwickler Verteiler ist, und nicht der Commit Verteiler.</para>

  </listitem>

</orderedlist>

<sidebar id="cia">
<title>CIA: Eine andere Möglichkeit Änderungen bekannt zu machen</title>

<para>Commit Emails sind nicht die einzige Möglichkeit um Nachrichten
über Änderungen zu verbreiten. Neulich wurde eine weiter Möglichkeit
namens CIA (<ulink url="http://cia.navi.cx/"/>) entwickelt. CIA
fasst Commit Statistiken zusammen und Verbreitet sie in Echtzeit. 
Die verbreitetste Art CIA zu benutzen ist, Commit Benachrichtigungen
an IRC zu senden, damit Leute die sich in IRC angemeldet haben, in
Echtzeit mitbekommen, wann Änderungen Committed werden. Obwohl sie
nicht ganz so nützlich ist wie Commit Emails, da Beteiligte vielleicht
oder vielleicht auch nicht anwesend sein könnten wenn eine Commit
Nachricht auftaucht, ist diese Methode von immensem <emphasis>sozialen
</emphasis> nutzen. Leute bekommen das Gefühl ein Teil von etwas 
lebendig und aktivem zu sein, und dass der Fortschritt vor ihren
Augen geschieht.</para>

<para>Es funktioniert so, dass Sie die CIA Anwendung vom post-commit
hook aus aufrufen. Es formatiert die Commit Information in eine XML
Nachricht, und sendet es an einen zentralen Server (typischer weise 
<literal>cia.navi.cx</literal>). Der Commit Server verteilt diese
Information dann an andere Foren.</para>

<para>CIA kann auch konfiguriert werden um <ulink
url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html">RSS</ulink>
feeds herauszugeben. Für weitere Details, schlagen Sie die Dokumentation
bei <ulink url="http://cia.navi.cx/"/> nach.</para>

<para>Sie können von CIA ein Bild machen, indem Sie mit Ihrem IRC
Client <literal>#commits</literal> auf dem Server <literal>
irc.freenode.net</literal> beitreten.</para>

</sidebar>

</sect3>

<sect3 id="branches">
<title>Um Engpässe zu vermeiden, benutzen Sie Branching</title>

<para>Manche die nicht Experten in Versionsverwaltung sind, scheuen
sich vor Branching und Merging. Das ist wahrscheinlich ein
Nebeneffekt vom Erfolg von CVS: Die Schnittstellen von CVS um 
Branches und Merges zu machen sind nicht ganz eingängig, weshalb
viele sich angeeignet haben diese Operationen komplett zu vermeiden.
</para>

<para>Wenn Sie zu diesen Leuten zählen, nehmen sich sich vor alle
Ängste die Sie vielleicht haben zu besiegen und nehmen Sie sich die
Zeit um zu lernen, wie man Branches und Merges macht. Es sind keine
schwierigen Vorgänge wenn man sich erst einmal an sie gewöhnt hat,
und sie werden zunehmend wichtiger, sobald ein Projekt mehr
Entwickler aufnimmt.</para>

<para>Branches sind wichtig, da sie eine knappe Resource&mdash;der
Arbeitsraum in dem Code von einem Projekt&mdash; zu einer im
Überfluss vorhandenen macht. Normalerweise, arbeiten alle
Entwickler im gleichen Sandkasten und bauen an der gleichen Burg.
Wenn jemand eine neue Zugbrücke anbauen will, nicht aber jeden davon
überzeugen kann, dass es eine Verbesserung wäre, ermöglicht ein
Branch es ihr in einer isolierten Ecke zu gehen und es aus zu
probieren. Wenn es funktioniert, kann sie die anderen Entwickler
dazu einladen, sich das Ergebnis anzuschauen. Wenn jeder zustimmt,
dass das Ergebnis gut ist, können sie das Versionsverwaltungssystem
anweisen die Zugbrücke vom Branch in die Haupt Burg zu übernehmen
("mergen").</para>

<para>Es ist einfach zu sehen, wie diese Fähigkeit die 
gemeinschaftliche Entwicklung fördert. Menschen brauchen die
Freiheit neue Sachen auszuprobieren, ohne das Gefühl zu bekommen die
Arbeit anderer zu stören. Gleichermaßen wichtig, gibt es Zeiten,
wann Code von der Alltäglichen Entwicklung isoliert werden muss, um
einen Bug zu beheben oder eine neue Version stabil zu bekommen
(siehe <xref linkend="stabilizing-a-release"/> und <xref 
linkend="release-lines"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>) ohne sich über ein
bewegliches Ziel Gedanken zu machen.</para>

<para>Benutzen Sie Branches freizügig, und ermutigen Sie andere dazu
sie zu benutzen. Stellen Sie aber auch sicher das jeder Branch nur so
lange in Aktiv bleibt wie nötig. Jeder aktive Branch zieht ein klein
Wenig Aufmerksamkeit der Gemeinschaft ab. Selbst diejenigen die nicht
an einem Branch arbeiten, halten immer noch einen oberflächlichen 
Überblick über die Ereignisse darin. Diese Aufmerksamkeit ist natürlich
wünschenswert, und Commit Emails sollten auch für Branches versandt
werden, genau wie für jeden anderen Commit. Branches sollten jedoch
nicht zu einer Methode werden die Entwickler Gemeinschaft zu spalten.
Mit seltenen Ausnahmen, sollte es das Ziel von jedem Branch sein,
letztendlich wieder zurück in die Haupt Line zu gehen und danach zu
verschwinden.</para>

</sect3>

<sect3 id="vc-singularity">
<title>Einzigartigkeit von Information</title>

<para>Merges haben eine wichtige Begleitfolge: Die selbe Änderung
sollte niemals doppelt committed werden. Das heißt, das jede Änderung
das Versionsverwaltungssystem nur genau ein mal in die Repository
eingehen sollte. Die Revision (oder der Satz an Revisionen) in dem
die Änderung eingepflegt wurde, ist von da an seine einzigartige 
Kennung. Wenn es auf andere Branches als den bei dem es eingegangen
ist, angewandt werden muss, sollte es von der ursprünglichen Revision
aus in diese anderen Ziele gemerged werden&mdash;im Gegensatz dazu
sollte man nicht identische aber separate Änderungen committen, die
zwar den gleichen Effekt auf den Code haben würden aber eine genaue
Buchführung unmöglich machen würden.</para>

<para>Die praktischen Auswirkungen von dieser Empfehlung unterscheiden
sich von einem Versionsverwaltungssystem zum anderen. Manche Systeme
erfassen Merges als besondere Ereignisse, grundsätzlich unterschiedlich 
zu einem Commit, und tragen ihre eigene Metadaten bei sich. Bei 
anderen, werden die Ergebnisse von Merges genau so committed wie jede
andere Änderung, also ist die bevorzugte Art einen "merge commit" von
einem "Änderungscommit" zu Unterscheiden die Log Nachricht. In der Log
Nachricht von einem Merge sollte nicht die Nachricht der Ursprünglichen
Änderung wiederholt werden. Statt dessen, sollten Sie lediglich 
angeben, das es sich um einen Merge handelt, und die Revisionsnummer
der Ursprünglichen Änderung angeben und höchstens einen Satz um die
Auswirkungen der Änderung zusammen zu fassen. Wenn jemand die
komplette Log Nachricht sehen will, sollte sie die ursprünglich
Revision nachschlagen.</para>

<para>Der Grund warum es wichtig ist, es zu vermeiden, die Log
Nachrichten zu wiederholen ist, dass Log Nachrichten manchmal geändert
werden, nachdem sie committed wurden. Wenn die Log Nachricht einer
Änderung bei jedem Merge wiederholt würde, wären selbst wenn die
Ursprüngliche Nachricht korrigiert würde alle Kopien unverändert&mdash; 
wodurch im nachhinein nur Verwirrung entsteht.</para>

<para>Dasselbe Prinzip gilt bei Zurückdrehen einer Änderung. Wenn eine
Änderung wieder vom Code entfernt wird, sollte die Log Nachricht der
Revision, lediglich festhalten, dass eine Änderung einer bestimmten
Revision rückgängig gemacht wird und <emphasis>nicht</emphasis> eine
Beschreibung der tatsächlichen Änderungen am Code, da die Änderungen
aus der ursprünglichen Log Nachricht gelesen werden und geändert werden
können. Selbstverständlich, sollte der Log auch den Grund für die
Entfernung nennen, sollte aber nichts aus dem ursprünglichen Log
wiederholen. Wenn möglich, gehen Sie zurück und Ändern Sie den Log
der ursprünglichen Änderung und weisen Sie darauf hin, das es 
zurückgedreht wurde.</para>

<para>Die vorhergehenden Passagen implizieren, dass Sie eine konsistent
und gleichbleibende Syntax verwenden um sich auf Revisionen zu 
beziehen. Das ist nicht nur hilfreich in den Logs sondern auch in 
Emails, dem Bug Tracker und anderswo. Wenn Sie CVS verwenden, schlage
ich "<literal>path/to/file/in/project/tree:REV</literal>" vor,
wobei REV eine CVS Revisionsnummer wie "1.76" angibt. Wenn Sie
Subversion verwenden, ist die standard syntax für die Revision 1729
"r1729" (Datei Pfade werden bei Subversion nicht benötigt, da es 
globale Revisionsnummern verwendet). Bei anderen Systemen, gibt es für 
gewöhnlich eine standardmäßige Syntax um einen Satz von Änderungen zu
bezeichnen. Konsistente Bezeichnung von Änderungen erleichtert die 
Buchhaltung eines Projekts ungemein (was wir in <xref 
linkend="communications"/> und <xref linkend="development-cycle"/>) 
sehen werden, und da ein großer Teil der Buchhaltung von Freiwilligen
erledigt wird, muss es so einfach wie Möglich sein.</para>

<para>Siehe auch
<xref
linkend="releases-and-daily-development"/><phrase
output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>.</para>

</sect3>

<sect3 id="vc-authz">
<title>Authorization</title>

<para>Die meisten Versionsverwaltungssysteme bieten eine Funktion an,
wonach bestimmten Personen erlaubt oder verboten werden kann Commits
an bestimmte Bereiche einer Repository zu machen. Nach dem Prinzip,
wenn man den Leuten einen Hammer reicht, sie anfangen überall Nägel zu
sehen, wird diese Funktion von vielen Projekten Hemmungslos benutzt.
Sie erlaben vorsichtig Beteiligte lediglich dorthin zu committen, wo
vorher zugestimmt wurde und es wird sichergestellt, das sie sonst
nirgends committen können. (Siehe 
<xref linkend="committers"/><phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> welches beschreibt,
wie Projekte entscheiden wer wohin comitten kann.)</para>

<para>Es ist wahrscheinlich nicht all zu schädlich solch eine enge
Einschränkung auszuüben, eine lockere Haltung ist aber auch in Ordnung.
Manche Projekte benutzen einfach einen System basierend auf Ehre: Wenn
einer Person commit Zugriff gewährt wird, wenn auch nur für einen
Teilbereich der Repository, ist was sie tatsächlich erhalten, ein
Schlüssel um überall im Projekt zu committen. Sie werden einfach darum
gebeten, ihre Commits auf ihren Bereich zu beschränken. Bedenken Sie,
dass hierin keine echte Gefahr droht: in einem aktiven Projekt, werden
sowieso alle commits überprüft. Wenn jemand in einem Bereich committed,
welches er nicht soll, werden es andere bemerken, und etwas sagen. Wenn
eine Änderung rückgängig gemacht werden muss, ist das auch kein Problem 
&mdash;es ist eh alles unter Versionsverwaltung, also kann man einfach
einen Revert machen.</para>

<para>Es gibt mehrere Vorteile bei der lockeren Herangehensweise.
Erstens, gibt es einen weiteren Aufwand um Entwickler zusätzliche 
Rechte einzuräumen, sobald sie sich auf andere Bereich ausweiten
(was im für gewöhnlich der Fall ist, wenn sie beim Projekt bleiben).
Sobald die Entscheidung getroffen wurde, kann die Person gleich 
anfangen Änderungen im neuen Bereich zu commiten.</para>

<para>Zweitens, kann die Erweiterung viel feiner granuliert 
vorgenommen werden. Allgemein wird ein Committer im Bereich X der sich
auf dem Bereich Y ausweiten will, anfangen Patches für Y einzureichen, 
und darum bitten, dass sie überprüft werden. Wenn jemand der bereits
Zugriff auf dem Bereich Y hat, solch einen Patch sieht und ihm
zustimmt, können sie dem Author einfach sagen, dass sie die Änderung
gleich selber commiten können(natürlich mit Namen vom Überprüfenden
bzw Zustimmenden im Log). Auf diese Art, kommt der Commit von 
demjenigen, der es auch geschrieben hat, was sowohl aus Sicht der 
Informationsverwaltung als auch aus Sicht der Anerkennung vorzuziehen
ist.</para>

<para>Zuletzt und vielleicht am wichtigsten, regt ein System welches
auf Ehre basiert, eine Atmosphäre der Ehre und des gegenseitigen 
Respekts an. Jemandem Commitzugriff auf ein Teilgebiet zu geben ist 
eine Aussage darüber wie gut sie technisch vorbereitet sind&mdash; es
sagt: "Wir sehen, dass du die Kenntnisse hast, um auf einem Gebiet
Commits zu machen, also leg los". Strickte Authorization auf zu erlegen
sagt aber: "Wir behaupten nicht nur, dass deine Kenntnisse begrenzt 
sind, wird sind auch ein wenig verdächtig im Bezug auf deine <emphasis>
Absichten</emphasis>". Das ist nicht eine Behauptung die sie machen
wollen, wenn Sie es vermeiden können. Jemand an dem Projekt als
Committer zu beteiligen, ist eine Gelegenheit sie in einem Kreis
gegenseitigem Vertrauens mit aufzunehmen. Eine gute Methode dieses zu
erreichen ist, ihnen mehr Macht zu geben als sie benutzen sollen, und
sie darüber zu informieren, dass es an ihnen ist sich innerhalb der
genannten Grenzen zu halten.</para>

<para>Das Subversion Projekt arbeitet schon seit vier Jahren, nach
dem Ehren Prinzip, mit 33 voll und 43 teil-berechtigten Committer
zur Zeit dieses Schreibens. Die einzige Unterscheidung die das
System macht, ist zwischen Committer und nicht Committer; weitere
Unterteilungen werden alleine durch Menschen aufrechterhalten. Dennoch
hatten wir nie ein Problem damit, dass jemand außerhalb von seinem
Bereich committed hat. Es gab ein zwei mal Missverständnisse über das
Ausmaß der Commit Berechtigungen, was jedoch immer schnell und
freundlich aufgelöst wurde.</para>

<para>Offensichtlich, muss man sich auf strikte authorisation verlassen
können, wenn Selbstkontrolle nicht sinnvoll ist. Solche Situationen
sind jedoch selten. Selbst bei Millionen von Code Zeilen und hunderten
oder tausenden Entwicklern, sollte ein Commit zu irgend einem 
beliebigen Modul immer noch von denen Überprüft werden, die für diesen
Modul zuständig sind, die auch erkennen können ob jemand an eine Stelle
committed hat, an die er nicht sollte. Wenn Commits <emphasis>nicht
</emphasis> regelmäßig überprüft werden, dann hat das Projekt, ohnehin
schwerwiegendere Probleme als das authorizations System.</para>

<para>Insgesamt, sollte man nicht all zu viel Zeit damit verbringen,
die authorization des Versionsverwaltungssystems auszutüfteln, es sei
denn Sie haben einen ganz bestimmten Grund dazu. Es wird für gewöhnlich
wenig handfesten Nutzen bringen, und sich statt dessen auf Kontrolle 
durch Menschen zu verlassen hat seine Vorteile.</para>

<para>Natürlich sollte man nichts hiervon so auffassen, das die 
Beschränkungen selber unwichtig sind. Es wäre schlecht für das Projekt,
Teilnehmer dazu anzuregen, an Bereiche zu comitten, für die sie nicht
qualifiziert sind. Desweiteren, hat voller (uneingeschränkter) Zugriff
auf die Repository in vielen Projekten, einen besonderen Status: Es
wird dadurch impliziert, das der Teilnehmen, das Recht hat, über
Fragen die das ganze Projekt betreffen mitzubestimmen. Dieses 
politische Aspekt von commit Berechtigungen, wird weiter in <xref
linkend="electorate"/><phrase output="printed"> im Kapitel <xref 
linkend="social-infrastructure"/></phrase> behandelt.</para>

</sect3>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="bug-tracker">
<title>Bug Tracker</title>

<para>Das "Bug tracking" ist ein breites Thema von dem viele Aspekte
im Verlauf dieses Buchs besprochen werden. Ich werden versuchen mich
hier auf den Aufbau und technische Überlegungen zu konzentrieren. Bevor
wir dazu kommen, müssen wir aber mit einer Grundsätzlichen Frage 
anfangen: Welche Art von Informationen sollten genau, im Bug Tracker
gehalten werden?</para>

<para>Der Begriff <firstterm>Bug Tracker</firstterm> ist irreführend.
Bug Tracking Systeme werden häufig auch verwendet, um Anfragen für
neue Funktionen , einmalige Aufgaben, unaufgeforderte Patches&mdash;im
Prinzip alles zu verfolgen(en. to track), was einen eindeutigen Anfangs- 
und Endzustand hat, zwischendurch mit optionalen Übergangszuständen,
und bei denen im seinem Verlauf Informationen anfallen. Aus diesem 
Grund werden Bug Tracker auch <firstterm>Issue Tracker</firstterm>,
<firstterm>Defect Trackers</firstterm>, <firstterm>Artifact Trackers
</firstterm>, <firstterm>Request Trackers</firstterm>, <firstterm>
Trouble Ticket Systems</firstterm>, usw. genannt. Eine Liste von
Software finden sie in <xref linkend="bug-trackers"/>.</para>

<para>In diesem Buch werde ich weiterhin "Bug Tracker" für die
Software benutzen, welche jegliche vorher erwähnten Angelegenheiten
verfolgt, da es weithin so bezeichnet wird, ein einzelnes Element in
der Datenbank des Bug Trackers werde ich jedoch als <firstterm>issue
</firstterm> (de. Angelegenheit) bezeichnen. So können wir zwischen
einem Verhalten oder Fehlverhalten, welches ein Nutzer beobachtet hat,
(also den Bug selbst) und seiner <emphasis>Aufzeichnung</emphasis> von
der Entdeckung, Diagnose und seiner Lösung im Tracker. Behalten Sie im
Hinterkopf, dass auch wenn die meisten Issues sich um Bugs drehen,
Issues auch benutzt werden können um andere Aufgaben zu verfolgen.
</para>

<para>Der klassische Verlauf eines Issues sieht folgendermaßen aus:

<orderedlist>
  <listitem><para>Die Issue wird von jemandem gemeldet. Sie geben eine
	Zusammenfassung an, eine anfängliche Beschreibung 
	(einschließlich wie man den Fehler reproduziert, falls 
	anwendbar, siehe <xref linkend="users-to-volunteers"/><phrase
	output="printed"> im Kapitel <xref 
	linkend="managing-volunteers"/></phrase> in der beschrieben
	wird, wie man zu guten Bug Meldungen ermutigen kann), und
	welche andere Informationen der Tracker verlangt. Die Person,
	die den Bug meldet, kann dem Projekt völlig unbekannt sein
	&mdash;Bug Meldungen und Anfragen für Funktion können genau
	so aus der Nutzer Gemeinschaft kommen, wie von den Entwicklern.
	</para>

	<para>Sobald die Issue gemeldet ist, sagt man, dass es in einem
	<firstterm>offenen</firstterm> Zustand ist. Da bisher nichts
	unternommen wurde, kennzeichnen manche Tracker solche auch als
	<firstterm>unverified</firstterm> (de. nicht bestätigt) oder
	<firstterm>unstarted</firstterm> (de. nicht angefangen). Es 
	ist, noch niemandem Zugewiesen; oder, bei manchen Systemen,
	wird es einem erfundenen Benutzer zugewiesen, um zu 
	kennzeichnen, dass es nicht wirklich jemandem zugewiesen wurde.
	Zu diesem Zeitpunkt, steht es in einem Wartebereich: Die Issue
	wurde Aufgezeichnet, jedoch nicht im Bewusstsein des Projekts
	aufgenommen.</para>
  </listitem>
  <listitem><para>Die Issue wird von Anderen gelesen, die Kommentare
	hinzufügen, und dem Meldenden vielleicht darum bitten einige
	Punkte zu klären.</para>
  </listitem>
  <listitem><para>Der Bug wird <firstterm>reproduziert</firstterm>.
	Dieser Augenblick mag der Wichtigste in seinem Lebenszyklus
	sein. Auch wenn der Bug noch nicht behoben wurde, ist die
	Tatsache, dass jemand außer derjenige der es Gemeldet hat, es
	geschafft hat den Bug zu finden, beweist, dass er echt ist, und
	was nicht unwesentlich ist, bestätigt es dem Melder, dass Sie
	indem sie einen echten Bug gemeldet haben, etwas zum Projekt 
	beigetragen haben.</para>
  </listitem>
  <listitem><para>Der Bug wird <firstterm>untersucht</firstterm>: seine
	Ursache wird identifiziert, und wenn möglich, wird der Aufwand
	um ihn zu beheben, geschätzt. Stellen Sie sicher, dass diese
	Sachen in dem Issue erfasst werden; wenn die Person die den Bug
	untersucht hat, plötzlich eine weile lang vom Projekt wegtreten
	muss (was häufig passieren kann bei freiwilligen Entwicklern), 
	sollte jemand anders in der Lage sein, die Arbeit wieder 
	aufzunehmen.</para>

	<para>In dieser Phase, oder manchmal in einer früheren, kann
	ein Entwickler die Issue in Besitz nehmen, und sie sich selbst
	<firstterm>zuweisen</firstterm> (en. assign) (In <xref
	linkend="delegation-assignment"/><phrase output="printed"> im
	Kapitel <xref linkend="managing-volunteers"/></phrase> wird der
	Vorgang des Zuweisens genauer untersucht. Die <firstterm>
	Priorität</firstterm> kann in dieser Phase auch bestimmt 
	werden. Wenn es zum Beispiel so schwerwiegend ist, das es die
	nächste Version verzögern würde, muss diese Tatsache frühzeitig
	erkannt werden, und der Tracker sollte eine Möglichkeit haben
	das zu erfassen.</para>
  </listitem>
  <listitem><para>Es wird geplant wann die Issue aufgelöst werden soll,
	wobei dabei nicht unbedingt ein Datum genant wird bis wann es
	behoben werden soll. Manchmal bedeutet es einfach zu 
	entscheiden welcher zukünftige Version (nicht unbedingt die
	Nächste) der Bug behoben sein soll, oder dass es keine 
	bestimmte Version blockieren soll. Wenn der Bug schnell
	behoben werden kann, kann man die Planung auch weg lassen.
	</para>
  </listitem>
  <listitem><para>Der Bug wird behoben (oder die Aufgabe wird erledigt,
	oder der Patch angewandt, oder was auch immer). Die Änderung
	oder der Satz von Änderungen die es behoben haben sollte in
	einem Kommentar der Issue protokolliert werden, worauf sie
	<firstterm>geschlossen</firstterm> wird und/oder als
	<firstterm>gelöst</firstterm> (en. resolved) markiert wird.
	</para>
  </listitem>
</orderedlist>

</para>

<para>Es gibt einige häufige Abweichungen von diesem Lebenszyklus.
Manchmal wird eine Issue frühzeitig nachdem sie gemeldet wurde
geschlossen, da es sich herausstellt, dass es sich nicht um einen
Bug handelt, sondern um ein Missverständnis, seitens des Benutzers.
Sowie ein Projekt mehr Benutzer aufnimmt, werden immer mehr solcher
ungültiger Issues hereinkommen, und Entwickler werden sie mit zunehmend
gereizten Bemerkungen schließen. Versuchen Sie der letzteren Neigung
entgegenzuwirken. Es hilft niemandem, da der einzelne Nutzer in 
jedem Einzelfall nicht für alle vorhergehenden ungültigen Issues
verantwortlich ist; die statistische Zunahmen ist lediglich aus der
Sicht der Entwickler erkennbar, nicht aus der der Nutzer. (In
<xref linkend="bug-filtering"/><phrase output="printed"> später
in diesem Kapitel,</phrase> werden wir die Methoden untersuchen,
wie man die Anzahl der ungültigen Issues verringern kann). Wenn
verschiedene Nutzer immer wieder das selbe Missverständnis haben,
kann kann das ein Hinweis darauf sein, dass ein bestimmter Bereich
der Software überdacht werden muss. Diese Muster können am einfachsten
durch einen Issue Manager, der die Bug Datenbank überwacht, bemerkt
werden; siehe <xref linkend="issue-manager"/><phrase output="printed">
im Kapitel <xref linkend="managing-volunteers"/></phrase>.</para>

<para>Eine weitere häufige Abweichung von diesem Lebenszyklus ist,
das die Issue als <firstterm>Duplikat</firstterm> bald nach dem ersten
Schritt geschlossen wird. Ein Duplikat, ist wenn jemand eine Issue
meldet, welches dem Projekt bereits bekannt ist. Duplikate beschränken
sich nicht auf offene Issues: Es ist auch Möglich, dass ein Bug wieder
auftaucht, nachdem es behoben wurde (dies wird als <firstterm>regression
</firstterm> (de. Rückgang/Rückentwicklung) bezeichnet). In einem 
solchen Fall ist die bevorzugte Vorgehensweise, die ursprüngliche Issue
wieder zu eröffnen, und alle neuen Meldungen als Duplikate des
Originals zu schließen. Der Bug Tracker sollte diese Beziehung in beiden
Richtungen verfolgen können, damit Informationen zur Reproduktion für
die ursprüngliche Issue verfügbar ist, und umgekehrt.</para>

<para>Eine dritte Variante ist, dass die Entwickler eine Issue 
schließen, mit der Annahme das sie es behoben haben, um anschließend
vom Meldenden den Fix abgewiesen zu bekommen, und sie erneut zu öffnen.
Meistens geschieht das, wenn die Entwickler nicht die nötige Umgebung
haben, um den Bug zu reproduzieren, oder da sie den Fix nicht mit genau
der selben Anleitung zur Reproduktion getestet haben, wie der Meldende.
</para>

<para>Abgesehen von diesen Abweichungen, kann es andere kleine Details
im Lebenszyklus geben, die sich abhängig von der Bug Tracker Software
unterscheiden. Die grundsätzliche Form ist jedoch die gleiche, und
obwohl der Lebenszyklus nicht spezifisch für Open Source Software ist,
hat es Auswirkungen darauf, wie Open Source Projekte ihre Bug Tracker
nutzen.</para>

<para>Wie der erste Schritt andeutet, ist der Bug Tracker der 
Öffentlichkeit genau so sehr ein Bild des Projekts wie seine
Nachrichten Verteiler oder seine Webseiten. Jeder kann eine Issue 
melden, jeder kann sich eine Issue anschauen, und jeder kann die Liste
der derzeit offenen Issues anschauen. Daraus folgt, dass Sie niemals
wissen können wieviele Leute darauf warten, Fortschritte für eine
bestimmte Issue zu sehen. Auch wenn die Größe und Erfahrung der
Entwicklergemeinschaft die Geschwindigkeit einschränken kann, mit der
die Issues gelöst werden, sollte das Projekt zumindest versuchen,
jede Issue, sobald sie gemeldet wird, zu bestätigen. Selbst wenn
die Issue eine weile lang daliegt, ermutigt eine Reaktion den
Meldenden dazu an weiterhin beteiligt zu bleiben, da sie das Gefühl
bekommt, dass ein Mensch erfasst hat, was sie getan hat (bedenken
Sie, das eine Issue zu melden für gewöhnlich einen größeren Aufwand
bedeutet, als sagen wie eine Email zu schreiben). Desweiteren, tritt
die Issue, sobald es von einem Entwickler bemerkt wird, im Bewusstsein
des Projekts, womit gemeint ist, dass dieser Entwickler darauf achten
kann, ob die Issue noch irgendwo auftaucht, mit anderen Entwicklern
darüber reden kann, usw.</para>

<para>Die Notwendigkeit zeitiger Reaktionen impliziert zweierlei:

<itemizedlist>
  <listitem>
    <para>Der Tracker muss an einem Email Verteiler angeschlossen sein,
	damit jede Änderung an einem Issue, inklusive seine erste
	Meldung, eine Email verursacht die beschreibt was passiert ist.
	Dieser Verteiler ist normalerweise ein anderer als der
	gewöhnliche Entwickler Verteiler, da nicht alle Entwickler
	automatisierte Bug Emails empfangen wollen, der Reply-to Header
	sollte aber (genau wie bei Commit Emails) auf den Entwicklungs 
	Verteiler verweisen.</para>
  </listitem>
  <listitem>
    <para>Das Formular um Issues zu melden, sollte die Email Adresse
	des Meldenden erfassen, damit sie für weitere Informationen
	erreicht werden kann. (Es sollte die Email Adresse jedoch 
	nicht <emphasis>benötigen</emphasis>, da manche Leute es
	vorziehen anonym Issues zu melden. Siehe <xref 
	linkend="anonymity"/><phrase output="printed"> später in diesem
	Kapitel</phrase> welches die Wichtigkeit von Anonymität 
	behandelt.)</para>
  </listitem>
</itemizedlist>

</para>

<sect2 id="bug-tracker-mailing-list-interaction">
<title>Interaction with Mailing Lists</title>

<para>Stellen Sie sicher, das der Bug Tracker nicht zu einem
Diskussionsforum wird. Obwohl es wichtig ist, auf dem Bug Tracker 
menschliche Anwesenheit zu erhalten, ist es nicht grundsätzlich für
Diskussionen in Echtzeit geeignet. Betrachten Sie es eher als ein
Archiv, eine Art Tatsachen und Verweise auf andere Diskussionen, die
hauptsächlich auf Verteiler stattfinden, zu organisieren.</para>

<para>Es gibt Zwei Gründe diese Unterscheidung zu machen. Erstens, ist
es umständlicher den Bug Tracker zu benutzen als einen Email Verteiler
(oder wenn wir dabei sind Echtzeit Foren wie Chats). Das liegt nicht
daran, dass Bug Tracker einen schlechte Bedienoberfläche haben, 
sondern daran, dass ihre Oberflächen darauf ausgelegt sind separate
Zustände zu erfassen und darzustellen, nicht frei verlaufende 
Diskussionen. Zweitens, beobachtet nicht jeder den Bug Tracker, der
auch an der Diskussion eines Issues beteiligt sein sollte. Ein Teil
guter Issue Management (siehe <xref 
linkend="share-management"/><phrase output="printed"> im Kapitel <xref
linkend="managing-volunteers"/></phrase>) besteht darin sicher zu 
stellen, dass jede Issue eher zu der Aufmerksamkeit der richtigen 
Leute gebracht wird, als dass jeder Entwickler alle Issues überwachen
muss.</para>

<para>Manch Bug Tracker können Email Verteiler überwachen und 
automatisch alle Emails protokollieren, die sich um eine bekannte Issue
drehen. Typischerweise erkennen sie das an der Identifikationsnummer
der Issue, in der Betreffzeile der Email, als teil einer bestimmten
Zeichenfolge; Entwickler lernen es diese Zeichenfolgen in ihren Emails
zu benutzen, um die Aufmerksamkeit des Bug Trackers zu erregen. Der
Tracker kann entweder die Email als ganzes speichern, oder (besser 
noch) einen Link zu dem gewöhnlichen Archiv des Verteilers. So oder 
so, ist dies eine sehr nützliche Funktion; wenn Ihr Tracker sie hat,
vergewissern Sie sich, dass es an geschaltet ist, und erinnern Sie
die Teilnehmer daran es zu ihrem Vorteil zu nutzen.</para>

</sect2>

<sect2 id="bug-filtering">
<title>Vorherige Filterung des Bug Trackers</title>

<para>Die meiste Issue Datenbanken leiden irgendwann an dem gleichen
Problem: Eine erstickende Anzahl doppelter oder ungültiger Issues die
von wohlwollenden aber unerfahrenen oder schlecht informierten Nutzern
gemeldet werden. Der erste Schritt dieser Entwicklung entgegenzuwirken
ist gewöhnlicherweise, einen hervorstehende Hinweis auf der Hauptseite
des Trackers zu setzen, welche erklärt, woran man erkennen kann ob ein
Bug wirklich ein Bug ist, wie man danach suchen kann ob ein Bug 
bereits gemeldet wurde, und letztendlich wie man effektiv eine Meldung
machen kann, wenn man immer noch denkt, dass es ein neuer Bug ist.
</para>

<para>Der Geräuschpegel sollte dadurch für eine Weile reduziert sein,
sowie die Anzahl der Nutzer zunimmt, wird das Problem jedoch 
wiederkehren. Kein einzelner Nutzer ist daran Schuld. Jeder versucht
nur zum Wohl des Projekts beizutragen, und auch wenn ihre erste
Meldung nicht hilfreich ist, sollten Sie dennoch dazu ermutigen
sich weiterhin zu beteiligen und zukünftig bessere Issues zu melden.
In der Zwischenzeit, muss das Projekt die Issue Datenbank so frei von
Müll halten wie möglich.</para>

<para>Die zwei Sachen welche am meisten dazu beitragen werden sind:
sicherzustellen, dass Leute den Bug Tracker beobachten, die genügend 
wissen, um ungültige oder doppelte Issues in dem Moment zu schließen,
indem sie gemeldet werden, und von Nutzern erfordern (oder 
nachdrücklich dazu anregen) ihre Bugs durch andere zu bestätigen vor
sie eine Meldung im Tracker machen.</para>

<para>Die erste Methode scheint universell angewandt zu werden. Selbst
Projekte mit riesigen Issue Datenbanken (wie der Debian Bug Tracker bei
<ulink url="http://bugs.debian.org/"/>, welche 315,929 Issues zum
Zeitpunkt des Schreibens hatte) organisieren sich so, dass <emphasis>
irgendjemand</emphasis> jede Issue die hereinkommt sieht. Es kann eine
andere Person sein, abhängig von der Kategorie des Issues. Das Debian
Projekt ist zum Beispiel eine Sammlung von Software Paketen, also
leitet Debian automatisch jede Issue die entsprechenden Zuständigen für
das Packet. Natürlich, kann es manchmal vorkommen, das Nutzer eine 
Issue falsch kategorisieren, mit dem Ergebnis, dass das Issue zunächst
an die falsche Person geschickt wird, welche es dann möglicherweise
wieder umleiten muss. Das wichtige ist aber, dass diese Last trotzdem
verteilt ist&mdash;ob der Nutzer bei der Meldung richtig oder falsch
rät, ist die Beobachtung der Issues dennoch mehr oder weniger 
gleichmäßig auf die Entwickler aufgeteilt, womit jede Issue eine
zeitige Antwort erhalten kann.</para>

<para>Die zweite Technik ist weniger verbreitet, wahrscheinlich, da
es schwerer zu automatisieren ist. Der grundsätzliche Gedanke ist, dass
jede Issue einem "Buddy" zugeordnet wird. Wenn ein Nutzer denkt, das er
ein Problem gefunden hat, wird er darum gebeten, es auf einem der Email
Verteiler oder im IRC zu beschreiben, und sich von jemandem bestätigen
zu lassen, dass es sich auch wirklich um einen Bug handelt. Ein zweites
Paar Augen frühzeitig einzubeziehen, kann viele störende Meldungen
verhindern. Manchmal kann die zweite Partei sehen, dass das Verhalten
kein Bug ist, oder dass es in einer neuern Version behoben wurde. Sie
kann auch mit den Symptomen aus einem früheren Issue vertraut sein, und
kann einen doppelten Eintrag verhindern, indem sie den Nutzer auf die
ältere Issue hinweist. Oftmals reicht es auch den Nutzer zu fragen
"Hast du im Bug Tracker geschaut ob es bereits gemeldet wurde?" Viele
denken einfach nicht daran, haben jedoch kein problem damit wenn sie
wissen, das jemand es von ihnen <emphasis>erwartet</emphasis>.</para>

<para>Das Buddy System kann die Issue Datenbank wirklich sauber halten,
hab aber auch einige Nachteile. Viele machen trotzdem eine alleine
Meldungen, weil sie entweder die Anweisungen sich einen Buddy für neue
Issues zu suchen nicht sehen, oder nicht beachten. Von daher ist es
immer noch nötig, dass die Issue Datenbank von freiwilligen überwacht
wird. Desweiteren, da die meisten neuen Meldenden nicht verstehen, wie
schwer die Aufgabe ist, die Issue Datenbank in stand zu halten, ist es
nicht gerechtfertigt sie all zu rau dafür zu schelten, dass sie die
Richtlinien ignoriert haben. Die Freiwilligen müssen deshalb wachsam 
sein, und dennoch Zurückhaltung dabei üben, wie sie Issues ohne einen
Buddy wieder an den Meldenden zurückweisen. Das Ziel ist es, jeden
der Meldungen macht, beizubringen zukünftig das Buddy System zu 
verwenden, damit es eine immer größere Gemeinschaft gibt, die das
System Issues zu filtern verstehen. Bei der Sichtung eines Issues ohne
einen Buddy sind die optimalen Schritte:</para>

<orderedlist>
  <listitem>
    <para>Antworten Sie sofort auf die Issue, bedanken Sie den Nutzer
	für die Meldung, aber verweisen Sie dabei auf die Buddy 
	Richtlinien(die natürlich auf der Webseite herausragen 
	sollten).</para>
  </listitem>
  <listitem>
    <para>Ansonsten, wenn die Issue nicht eindeutig berechtigt ist,
	schließen Sie es, bitten Sie dem Meldenden aber darum, es 
	wieder zu öffnen, wenn Sie von einem Buddy eine Bestätigung
	erhalten. Sobald das geschieht, sollten Sie einen Verweis auf
	den bestätigenden Thread geben (z.B. eine URL zum Archiv des
	Verteilers).</para>
  </listitem>
</orderedlist>

<para>Denken Sie daran, dass obwohl dieses System, mit der Zeit, das
Signal/Rausch Verhältnis in der Issue Datenbank verbessern wird, wird
es niemals die Falschmeldungen komplett unterbinden. Der einzige Weg
Falschmeldungen komplett zu verhindern, ist den Bug Tracker komplett,
für alle außer die Entwickler ab zu schalten&mdash;eine Heilung die
fast schlimmer als die Krankheit ist. Es ist besser sich damit
abzufinden, dass die Entfernung ungültiger Issues immer ein Teil der
regulären Wartungsarbeiten am Projekt bleiben wird, und so viele Leute
wie möglich, dazu zu bringen, dabei zu helfen.</para>

<para>Siehe auch
<xref linkend="issue-manager"/><phrase output="printed"> im Kapitel 
<xref linkend="managing-volunteers"/></phrase>.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="irc">
<title>IRC / Echtzeit Chat Systeme</title>

<para>Viele Projekte biete Echtzeit Chats an, mittels <firstterm>
Internet Relay Chat</firstterm> (<firstterm>IRC</firstterm>), welches
Foren sind, in denen Nutzer und Entwickler einander Fragen stellen
können und sofort Antworten erhalten können. Auch wenn Sie einen IRC
Server von Ihrer eigenen Webseite aus betreiben <emphasis>können
</emphasis>, ist dies im allgemeinen nicht den Aufwand wert. Machen 
Sie statt dessen was alle Anderen auch machen: Betreiben Sie Ihre
<firstterm>IRC Channels</firstterm> bei Freenode (<ulink 
url="http://freenode.net/"/>). Freenode gibt Ihnen die nötige 
Kontrolle um die IRC Channels Ihres Projekts zu verwalten,<footnote>
<para>Es Voraussetzung oder Erwartung, dass Sie an Freenode spenden,
wenn Ihr Projekt es sich aber leißten kann, ziehen Sie einen Beitrag
in Erwägung. Sie sind eine von Steuern befreite Gemeinnützige 
Einrichtung in den USA, und sie bieten einen wertvollen Dienst an. 
</para></footnote> wobei Sie Ihnen die nicht unwesentliche Mühe
ersparen, einen IRC Server selber zu betreiben.</para>

<para>Das erste was Sie tun müssen, ist einen Channel Namen zu wählen.
Die offensichtlichste Wahl, ist der Namen Ihres Projekts&mdash;wenn
dieser bei Freenode verfügbar ist, nutzen Sie ihn. Wenn nicht, wählen
Sie etwas, so nahe an dem Namen Ihres Projekts und leicht einprägsames,
wie möglich. Bewerben Sie die Verfügbarkeit des Channels auf Ihrer
Webseite, damit ein Besucher der eine kurze Frage hat es gleich findet.
Dieser Hinweis erscheint zum Beispiel, markant in einem Kasten oben auf
der Hauptseite von Subversion:</para>

  <blockquote>
    <para><emphasis>Wenn Sie Subversion nutzen, empfehlen wir Ihnen
	dem </emphasis> <literal>users@subversion.tigris.org</literal>
	<emphasis>Email Verteiler, beizutreten und das <ulink
	url="http://svnbook.red-bean.com/">Subversion Buch</ulink>
	sowie die <ulink url="http://subversion.tigris.org/faq.html">
	FAQ</ulink> zu lesen. Sie können auch Fragen im IRC stellen,
	bei </emphasis><literal>irc.freenode.net</literal><emphasis>
	im Channel</emphasis>&nbsp;<literal>#svn</literal>.</para>
  </blockquote>

<para>Manche Projekte haben mehrere Channels, einen pro Unterthema.
Zum Beispiel einen für Probleme bei der Installation, einen weiteren
für Fragen der Nutzer, noch einen für Entwickler Diskussionen, usw.
(<xref linkend="growth"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase> behandelt wie man in 
verschieden Channels aufteilt). Wenn Ihr Projekt noch jung ist, sollte
es nur einen Channel geben, wo alle zusammen miteinander reden. Später,
sobald das Verhältnis von Nutzer zu Entwickler zunimmt, kann es nötig
werden separate Channels zu haben.</para>

<para>Wie sollen Leute alle Channels kennen können, ganz abgesehen
davon in welchen sie reden sollen? Und wenn sie reden, woher sollen
sie wissen, wie die hiesigen Konventionen kennen?</para>

<para>Die Antwort dazu ist, es ihnen zu sagen, indem man den
<firstterm>channel topic</firstterm> entsprechend setzt.<footnote>
<para>Um den Topic in einem Channel zu setzen, benutzen Sie den
<literal>/topic</literal> Befehlt. Alle Befehle im IRC fangen mit einem
"<literal>/</literal>" an. Siehe <ulink url="http://www.irchelp.org/"/>
wenn Sie nicht mit der Nutzung und Administration von IRC vertraut sind;
insbesondere ist <ulink 
url="http://www.irchelp.org/irchelp/irctutorial.html"/> eine 
hervorragende Anleitung.</para></footnote> Der Channel Topic ist eine
kurze Nachricht, die jeder Nutzer sieht, wenn er zum erstem mal das
Channel betritt. Es gibt Neuankömmlinge eine kurze Anleitung und 
Hinweise wie sie an weitere Informationen kommen. Zum Beispiel:</para>

<screen>
Sie sind jetzt in #svn

Das Topic für #svn ist ein Forum für Fragen von Subversion Benutzer,
siehe auch http://subversion.tigris.org/. || Entwickler Diskussionen
finden in #svn-dev statt. || Fügen Sie hier bitte keine langen
Protokolle ein, nutzen Sie hierzu eine pastebin Seite wie 
http://pastebin.ca/. || NEUES: Subversion 1.1.0 ist freigegeben, für
weiteres, siehe http://svn110.notlong.com/.
</screen>

<para>Das ist zwar knapp, aber es sagt neue, was sie wissen müssen.
Es sagt genau wofür der Channel ist, gibt einen Link zu der Webseite
des Projekts (falls jemand an den Channel vorbei kommt ohne vorher drauf
gewesen zu sein), erwähnt einen verwanden Channel, und gibt ein wenig
Anleitung, wie über sich beim Einfügen verhalten soll.</para>

<sidebar id="paste-sites">
<title>Paste Seiten</title>

<para>Der Platz in einem IRC Channel wird geteilt: jeder sieht was
der andere sagt. Normalerweise ist das etwas gutes, da es Leuten
erlaubt an eine Unterhaltung zu beteiligen, wenn meinen etwas 
beitragen zu können, und erlaubt es Beobachtern durch zuschauen etwas
zu lernen. Wenn jemand aber eine Menge Informationen auf einmal 
bereitstellen muss, wie ein Protokoll von einer Debugging Session,
wird das problematisch, da eine derart große Anzahl an Zeilen andere
Unterhaltungen stören würde.</para>

<para>Die Lösung ist eine der <firstterm>pastebin</firstterm> oder
auch <firstterm>pastebot</firstterm> Seiten zu benutzen. Wenn man eine
große Menge Daten von jemand anfragt, bitten Sie darum, es nicht in den
Channel zu ein zu fügen, sondern (zum Beispiel) auf <ulink 
url="http://pastebin.ca/"/>, ihre Daten abzulegen, und die 
resultierende URL in den Channel zu kopieren. So kann sich jeder die
Daten anschauen der möchte.</para>

<para>Es gibt eine Vielzahl verfügbarer Seiten, zu viele um eine
Umfassende Liste erstellen zu können, hier sind jedoch einige von denen
ich gesehen habe, dass sie benutzt werden:
<ulink url="http://www.nomorepasting.com/"/>,
<ulink url="http://pastebin.ca/"/>,
<ulink url="http://nopaste.php.cd/"/>
<ulink url="http://rafb.net/paste/"/>
<ulink url="http://sourcepost.sytes.net/"/>,
<ulink url="http://extraball.sunsite.dk/notepad.php"/>,
und
<ulink url="http://www.pastebin.com/"/>.</para>

</sidebar>

<sect2 id="bots">
<title>Bots</title>

<para>Viele technisch orientierte IRC Channels haben einen nicht 
Menschlichen Teilnehmer, ein sogenannter <firstterm>Bot</firstterm> der
in der Lage ist als Reaktion auf bestimmte Befehle Informationen zu 
speichern und wiederzugeben. Typischerweise, wird der Bot genau wie
jeder andere im Channel angesprochen, was soviel heißt, dass die 
Befehle übermittelt werden, indem man mit dem Bot "redet". Zum 
Beispiel:</para>

<screen>
&lt;kfogel&gt; ayita: learn diff-cmd = http://subversion.tigris.org/faq.html#diff-cmd
&lt;ayita&gt;  Thanks!
</screen>

<para>Das hat den Bot (der als ayita im Channel eingeloggt ist) gesagt,
dass er sich eine bestimmte URL merken soll als Antwort auf die Anfrage
"diff-cmd". Jetzt können wir ayita ansprechen und darum bitten einen
anderen Nutzer etwas über diff-cmd zu erzählen:</para>

<screen>
&lt;kfogel&gt; ayita: tell jrandom about diff-cmd
&lt;ayita&gt;  hmustermann: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>Das gleich kann mittels eines bequemen Kürzels erreicht werden:
</para>

<screen>
&lt;kfogel&gt; !a hmustermann diff-cmd
&lt;ayita&gt;  hmustermann: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>Der genaue Befehl und das Verhalten unterscheidet sich von Bot zu
Bot. Das obige Beispiel mit <literal>ayita</literal> (<ulink 
url="http://hix.nu/svn-public/alexis/trunk/"/>), von der für gewöhnlich
eine Instanz in <literal>#svn</literal> auf freenode läuft. Andere Bots
sind unter anderem (<ulink url="http://dancer.sourceforge.net/"/>) und
Supybot (<ulink url="http://supybot.com/"/>). Beachten Sie, dass man
keine besonderen Rechte auf dem Server haben muss um einen Bot zu
betreiben. Ein Bot ist eine Nutzanwendung; jeder kann einen Einrichten 
und es anweisen, einen bestimmten Server/Channel zu betreten.</para>

<para>Wenn in Ihrem Channel die Tendenz auftritt, dass immer wieder die
gleichen Fragen gestellt werden, empfehlen ich Ihnen dringend einen Bot
einzurichten. Nur ein kleiner Anteil der Nutzer im Channel werden die
Kenntnisse erlangen einen Bot steuern, die die es tun, werden aber einen
um so größeren Anteil der Fragen beantworten können, da der Bot es Ihnen 
ermöglicht, viel effektiver antworten zu können.</para>

</sect2>

<sect2 id="irc-archiving">
<title>Archivierung von IRC</title>

<para>Auch wenn es möglich ist alles in einem Channel zu archivieren,
wird das nicht unbedingt erwartet. Unterhaltungen im IRC sind im
Grunde genommen öffentlich, aber viele betrachten es sie als informell,
halbwegs private Unterhaltungen. Nutzer können neigen dazu achtlos mit
ihrer Grammatik sein und äußern Meinungen (zum Beispiel über andere
Software oder Entwickler) welche Sie nicht in einem Online Archiv
erhalten haben möchten.</para>

<para>Es wird natürlich manchmal <emphasis>Auszüge</emphasis> geben,
die erhalten werden sollte, und das ist in Ordnung. Die Meißten IRC
Anwendungen können, wenn der Nutzer das möchte, Unterhaltungen in eine
Datei mit protokollieren, oder wenn das nicht geht, kann immer noch die
Unterhaltung aus dem IRC selbst heraus kopieren und in ein beständigeres
Forum (was meißtens der Bug Tracker ist) einfügen. Alles mit zu 
protokollieren kann aber manche Nutzer unruhig machen. Wenn sie doch
alles archivieren, stellen Sie sicher, dass es klar im Channel Topic
erklärt wird, und geben Sie die URL des Archivs an.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="wikis">
<title>Wikis</title>

<para>Ein <firstterm>Wiki</firstterm> ist eine Webseite die es jedem
Besucher erlaubt ihren Inhalt zu bearbeiten; der Begriff "wiki" (aus
dem Hawaiischen Wort für "schnell" oder "super-schnell") wird auch
benutzt um die Software zu bezeichnen, die diese Bearbeitung möglich
macht. Wikis wurden 1995 erfunden, ihre Popularität stieg aber erst
2000 oder 2001 an, zum Teil unterstützt durch den Erfolg von Wikipedia
(<ulink url="http://www.wikipedia.org/"/>), eine auf wiki basierende
freies Lexikon. Sie können eine wiki irgendwo zwischen IRC und 
Webseiten einordnen: Wikis finden nicht in Echtzeit statt, also haben
Leute die Möglichkeit ihre Beiträge zu überdenken und zu polieren, es
ist aber auch sehr leicht zu ihnen beizutragen, da der Aufwand sie zu
bearbeiten geringer ist als bei einer gewöhnlichen Webseite.</para>

<para>Wikis gehören noch nicht zur Standardausstattung für Open Source
Projekte, werden es aber wahrscheinlich bald sein. Sie sind eine 
relativ neu Technologie, und es wird noch mit verschiedene Arten der
Nutzung experimentiert. Ich werde hier ein paar Worte zur Vorsicht 
sagen&mdash;zu diesem Zeitpunkt, ist es einfacher die schlechte Arten
Wikis zu nutzen als ihre Erfolge.</para>

<para>Wenn Sie sich dazu entschließen eine Wiki zu betreiben, 
investieren Sie eine Menge Aufwand, in eine klare Organization der
Seiten und ein visuell angenehmes Layout, damit Besucher (also 
potentielle Teilnehmer) instinktiv wissen werden, wo sie ihre Beiträge
einordnen sollen. Gleichermaßen wichtig ist es, diese Richtlinien in 
die Wiki zu schreiben, damit Teilnehmer etwas zur Orientierung haben.
Viel zu oft fallen Administratoren der Fantasie zum Opfer, dass da
eine Horde Besucher jeder Einzeln qualitativ hochwertige Beiträge
leistet, der Inhalt der im gesamten auch qualitativ hochwertig sein
muss. So funktionieren Webseiten nicht. Jede individuelle Seite oder
Paragraph, kann für sich gut sein, aber es wird niemals gut, innerhalb
von einem schlecht organisiertem oder verwirrendem ganzen eingebettet
wird. All zu oft leiden Wikis unter:</para>

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Ein Mangel an Prinzipien der 
	Orientierung.</emphasis> Ein gut organisierte Webseite gibt
	dem Besucher das Gefühl, zu jeder Zeit zu wissen, wo sie sind.
	Wenn die Seiten zum Beispiel gut aufgemacht sind, kann man
	intuitiv den Unterschied zwischen einem Bereich für das 
	"Inhaltsverzeichnis" und dem für den "Inhalt" erkennen. 
	Teilnehmer der Wiki werden solche Unterschiede auch 
	respektieren, aber nur dann, wenn die Unterschiede schon zu
	Anfang vorhanden sind.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Verdoppelung von Informationen.
	</emphasis> Häufig passiert es in Wikis, dass irgendwann 
	verschiedene Seiten ähnliche Sachen sagen, da die einzelnen
	Teilnehmer nicht die Verdoppelungen gemerkt haben. Zum Teil
	kann das am Fehlen der oben erwähnten Prinzipien der
	Orientierung liegen, insofern, dass Personen vielleicht nicht
	die doppelten Inhalte gefunden haben wenn es nicht dort ist,
	wo sie es erwarten.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Inkonsistente Zielgruppe.</emphasis>
	Zu einem gewissen Grad ist dieses Problem bei so vielen Autoren
	unvermeidbar, kann aber verringert werden, wenn es schriftliche
	Richtlinien gibt, wie man die Inhalte erstellt. Es hilft auch
	neue Beiträge am Anfang aggressiv zu bearbeiten, damit die
	Normen sich eine Wirkung hinterlassen.</para>
  </listitem>
</itemizedlist>

<para>Die Gemeinsame Lösung für all diese Probleme ist die gleiche: 
Redaktionelle Normen, und sie nicht nur durch ihre Bekanntmachung
durchzusetzen, sondern indem man Seiten bearbeitet und sie selber
befolgt. Im Allgemeinen, werden Wikis alle Schwächen im Ausgangsmaterial
verstärken, da die Teilnehmer alle Muster die sie vor sich finden
nachmachen werden. Richten Sie nicht nur die Wiki ein und hoffen Sie
darauf, dass alles sich zusammenfügt. Sie müssen es auch mit gut 
geschriebenen Inhalten angefangen werden, damit Besucher eine Vorlage
als Beispiel haben.</para>

<para>Das leuchtende Beispiel einer gut betriebenen Wiki ist die
Wikipedia, obwohl das zum Teil daran liegen mag, dass der Inhalt
(Lexikon Einträge) von Natur aus für das Wiki Format geeignet sind.
Wenn Sie die Wikipedia aber genauer Untersuche, werden Sie feststellen,
dass die Administratoren eine <emphasis>äußerst</emphasis> gründliche
Basis für die Zusammenarbeit ausgelegt haben. Es gibt eine ausführliche
Dokument wie man neue Einträge schreiben soll, wie man einen 
angemessenen Standpunkt bewahrt, welche Art von Änderungen man machen
soll und welche man vermeiden soll, ein Verfahren um Konflikte im
Bezug auf sich widersprechende Bearbeitungen aufzulösen (mit mehreren
schritten mitunter letztendlich auch ein Schiedsgericht), und so 
weiter. Sie haben auch eine Verwaltung für die Authorisation, damit
sie eine Seite so lange von der Bearbeitung ausschießen können, sollte 
es zum Ziel mehrfacher unangemessener Bearbeitungen werden, bis das
Problem aufgelöst wurde. Mit anderen Worten, schmissen sie nicht 
einfach ein paar Vorlagen auf eine Webseite und drückten die Daumen.
Wikipedia funktioniert deshalb, weil die Gründer sorgfältig darüber
nachdachten, wie man Tausende Fremde dazu bringt, ihren Schreibstil 
einer gemeinsamen Vision anzupassen. Auch wenn sie nicht den gleichen
Grad an Vorbereitung haben müssen um in einem freien Software Projekt
eine Wiki zu betreiben, ist es Wert, den Geist nachzuahmen.</para>

<para>Weitere Informationen über Wikis finden Sie unter <ulink 
url="http://en.wikipedia.org/wiki/Wiki"/>. Das erste Wiki ist
weiterhin wohlauf und beinhaltet viele Material darüber wie man
Wikis betreibt: siehe <ulink
url="http://www.c2.com/cgi/wiki?WelcomeVisitors"/>, 
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorks"/>, und
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorksNot"/> für 
verschiedene Ansichten.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="web-site">
<title>Webseite</title>

<para>Es gibt aus technischer Sicht nicht viel darüber zu sagen
wie man die Webseite für das Projekt einrichtet: Einen Web Server
aufzubauen und Webseiten zu schreiben sind relativ einfache Aufgaben,
und die wichtigsten Sachen im Bezug auf das Layout und die Anordnung
wurden bereits im vorherigen Kapitel abgedeckt. Die Hauptfunktion
der Webseite ist es, eine klare und einladende Übersicht des Projekts
zu geben und die anderen Werkzeuge einzubinden (das 
Versionsverwaltungssystem, Bug Tracker, usw). Wenn Sie nicht die
Kenntnisse haben um selber einen Webserver einzurichten, ist es
normalerweise kein Umstand, jemand zu finden der es kann und bereit
ist zu helfen. Trotzdem ziehen es manche von Hosting Bündel zu nutzen,
um sich Zeit und Mühe zu sparen.</para>

<sect2 id="canned-hosting">
<title>Hosting Bündel</title>

<para>Es gibt zwei hauptsächliche Vorteile bei der Nutzung von Hosting
Bündeln. Das Erste ist ihre Server Kapazität und ihre Bandbreite: Ihre
Server sind starke Kisten an dicken Leitungen. Egal wie erfolgreich Ihr
Projekt wird, wird es Ihnen wird niemals der Festplatten Platz ausgehen
oder die Netzwerkverbindung verstopfen. Der zweite Vorteil ist seine
Einfachheit. Sie haben bereits einen Bug Tracker, ein 
Versionsverwaltungssystem, einen Email Verteiler System, eine Archiv
System, und alles andere was Sie benötigen um eine Seite zu betreiben.
Sie haben die Programme konfiguriert, und kümmern sich um die Sicherung
aller Daten in diesen Programmen. Sie müssen nicht viele Entscheidungen
treffen. Sie müssen lediglich ein Formular ausfüllen, einen Knopf 
drücken, und plötzlich haben Sie eine Projekt Webseite.</para>

<para>Das sind ziemlich erhebliche Vorteile. Der Nachteil ist 
natürlich, dass Sie sich mit <emphasis>deren</emphasis> Auswahl und
Konfiguration abfinden müssen, selbst wenn etwas Anderes für Ihr
Projekt besser wäre. Für gewöhnlich lassen sich diese Seiten innerhalb
enger Grenzen einstellen, aber Sie werden niemals die fein granulierte
Kontrolle bekommen welches Sie erhalten, wenn Sie selber die Seite
aufbauen und vollen administrativen Zugriff auf den Server hätten.
</para>

<para>Ein perfektes Beispiel hierfür ist die Handhabung generierter
Dateien. Bestimmte Webseiten des Projekts können generierte Dateien
sein&mdash;es gibt z.B. Systeme um die Daten für eine FAQ in ein
leicht zu bearbeitendes Quellformat zu halten, von dem aus HTML, PDF
und andere Darstellungsformate generiert werden kann. Wie vorhin in
<xref linkend="version-everything"/><phrase output="printed">
früher in diesem Kapitel</phrase> beschrieben, wollen Sie nicht die
generierten Formate in der Versionsverwaltung haben, sondern nur die
Quelldatei. Wenn Ihre Webseite aber auf den Server von jemand anderem
betrieben wird, kann es unmöglich sein ein eigenes Script einzubinden,
welches die HTML Version automatisch neu erstellt, sobald etwas an der
Quelldatei geändert wird. Die einzige Abhilfe ist es, die generierten
Formate mit in der Versionsverwaltung zu halten, damit Sie auch auf der
Webseite auftauchen.</para>

<para>Es kann auch größere Folgen geben. Sie werden vielleicht nicht
so viel Kontrolle auf die Präsentation wie Sie es sich wünschen würden.
Aufmachung Ihrer There can be larger consequences as well. Manche
Hosting Seiten erlauben es Ihnen Ihre Webseiten anzupassen, man erkennt
aber meißtens auf unbequeme Art, dass der Vorgegebene Aufbau an 
verschiedenen Stellen durchkommt. Manche Projekte die sich auf 
SourceForge hosten lassen, haben komplett eigens angepasste Webseiten,
weisen Entwickler aber immer noch auf ihre "SourceForge Seite" für 
weitere Informationen. Die SourceForge Seite ist was die Webseite des
Projekts gewesen wäre wenn das Projekt keine angepasste Seite benutzt
hätte. Auf der SourceForge Seite sind Links zum Bug Tracker, dem CVS
Repository, Downloads, usw. Eine SourceForge Seite beinhaltet
unglücklicherweise auch eine ganze Menge belangloses Rauschen. Oben ist
ein Werbeplakat, oftmals ein animiertes Bild. Links ist eine vertikale
Anordnung von Links die für jemandem der an das Projekt interessiert is 
von wenig Bedeutung sein dürften. Rechts ist oft noch mehr Werbung.
Lediglich der Mittlere Bereich der Seite ist dem Projekt spezifischen
Material gewidmet, und selbst das ist auf eine verwirrende Art 
angeordnet, welches Nutzer unsicher macht, worauf sie als nächstes 
klicken sollen.</para>

<para>Hinter jedem einzelnen Aspekt, gibt es ohne Zweifel einen guten
Grund;gut aus sich von SourceForge, wie die Werbung. Aus der 
Perspektive eines einzelnen Projekts aber kann das Ergebnis eine 
weniger als optimale Webseite sein. Es ist nicht meine Absicht auf
SourceForge rum zu hacken; ähnliche Bedenken lassen sich auf viele
Seiten anwenden, die Gebündeltes Hosting anbieten. Das wesentliche ist,
dass man einen Kompromiss eingeht. Es werden Ihnen die technischen
Bürden eine Projekt Webseite zu betreiben genommen, dafür müssen Sie
akzeptieren das jemand anderes bestimmt wie es betrieben wird.</para>

<para>Sie alleine können entscheiden ob ein Hosting Bündel das Beste
ist für Ihr Projekt. Wenn Sie eine solche Seite wählen, halten Sie sich
die Option offen, im nachhinein auf Ihre eigenen Server wechseln zu
können, indem Sie einen gesonderten Domain-Namen als Adresse verwenden.
Sie können diese URL für komplizierte Funktionen an die Hosting Seite 
leiten lassen. Stellen Sie nur sicher, alles so anzuordnen, dass wenn 
Sie sich später entscheiden eine andere Lösung zu verwenden, Sie nicht
die Adresse des Projekts ändern müssen.</para>

<sect3 id="canned-hosting-choosing">
<title>Die Wahl eines Hosting Bündels</title>

<para>Die größte und bekannteste Hosting Seite ist <ulink
url="http://www.sourceforge.net/">SourceForge</ulink>.  Zwei weitere
Seiten die bieten gleiche oder ähnliche Dienste anbieten sind <ulink
url="http://savannah.gnu.org/">savannah.gnu.org</ulink> und <ulink
url="http://www.berlios.de/">BerliOS.de</ulink>. Ein paar 
Organisationen, wie die <ulink url="http://www.apache.org/">Apache 
Software Foundation</ulink> und <ulink url="http://www.tigris.org/">
Tigris.org</ulink><footnote><para>Haftungsausschluss: Ich bin bei 
<ulink url="http://www.collab.net/">CollabNet</ulink> angestellt,
welches ein Sponsor von Tigris.org ist, und ich nutze regelmäßig 
Tigris.</para></footnote>, biete kostenloses Hosting für Open Source
Projekte an, welche gut zu ihrer Mission und ihrer Gemeinschaft 
vorhandener Projekte passen.</para>

<para>Als Teil der Nachforschungen für seine Diplomarbeit <citetitle>Aufbau
eines Modells zur Evaluierung von Freie/Open Source Projekt
Hosting (FOSPHost) Seiten</citetitle> hat Haggen so eine
gründliche Evaluierung verschiedener Hosting Seiten gemacht, Die
Ergebnisse finden Sie bei <ulink
url="http://www.ibiblio.org/fosphost/"/>, insbesondere die sehr
leserliche Vergleichstabelle bei <ulink
url="http://www.ibiblio.org/fosphost/exhost.htm"/>.</para>

</sect3>

<sect3 id="anonymity">
<title>Anonymität und Beteiligung</title>

<para>Ein Problem welches sich nicht zwangsläufig auf Gebündelte Seiten
beschränkt, dort aber am häufigsten anzutreffen ist, ist der Missbrauch
der login Funktionalität. Die Funktion selber ist relativ Einfach: Die
Seite erlabt jedem Benutzer sich mit einem Namen und Passwort zu 
registrieren. Ab da speichert es ein Profil für diesen Nutzer, und die
Administratoren von Projekten können dem Nutzer bestimmte Rechte 
einräumen, wie das Recht an die Repository zu committen.</para>

<para>Das kann äußerst nützlich sein, und es ist tatsächlich eines der
wesentlichen Vorteile gebündeltes Hosting zu benutzen. Das Problem ist,
dass Nutzer sich manchmal für Aufgaben einloggen müssen, die eigentlich
auch für nicht registrierte Nutzer erlaubt sein sollte, insbesondere um
Issues im Bug Tracker zu Melden. Indem man eine Anmeldung für solche
Aufgaben voraussetzt, hebt das Projekt die Grenze für die Teilnahme für
Sachen an, die schnell und bequem gehen sollten. Natürlich möchte man
jemand erreichen können, der Daten in den Issue Tracker eingetragen 
hat, es reicht aber ein Feld zu haben, indem Sie ihre Email Adresse
(wenn sie es möchte) eingeben kann. Wenn ein neuer Nutzer einen Bug
findet, und ihn melden will, wird sie durch die Anforderung ein Konto
erstellen zu müssen, um einen Eintrag in den Tracker zu machen nur 
verärgert sein. Sie wird sich vielleicht einfach entscheiden den Bug
überhaupt nicht zu melden.</para>

<para>Die Vorteile einer Nutzerverwaltung wiegen im allgemeinen
schwerer als die Nachteile. Wenn Sie aber auswählen können, welche
Abläufe anonym gemacht werden können, stellen Sie nicht nur sicher,
dass <emphasis>alle</emphasis> schreibgeschützte Abläufe für nicht
angemeldete Besucher erlaubt sind, sonder auch manche Abläufe um Daten
einzugeben, insbesondere im Bug Tracker und falls vorhanden auf den
Wiki Seiten.</para>

</sect3>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->


</chapter>

<!--
vim: tw=72 ft=docbook

local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

