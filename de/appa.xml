<appendix id="vc-systems">
<title>Freie Versionsverwaulungssysteme</title>

<simplesect>

<para>Diese sind alle mir mitte 2007 bekannten Open Source 
Versionsverwaltungssysteme. Das einzige welches ich regelmäßig benutze
ist Subversion. Ich habe wenig oder keine Erfahrung mit den meisten
anderen Systemen, außer Subversion und CVS; die Information hier stammt
von anderen Webseiten. Siehe auch
<ulink
url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvs">
<title><emphasis role="bold">CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/cvs/"/></title>

<para>CVS gibt es schon seit langem, und viele Entwickler sind bereits
damit vertraut. Zu seiner Zeit war es revolutionär: Es war das erste
Open Source Versionsverwaltungssystem welches Entwicklern Zugang über
weite Netze anbot (so weit ich weiß), und das erste welches anonyme,
rein lesende Checkouts zu machen, was neuen Entwicklern einen einfachen
Weg gab, sich an Projekte zu beteiligen. CVS verwaltet lediglich
Dateien, keine Verzeichnisse; es biete Verzweigung an, Tags, und gute
Geschwindigkeit auf der Client Seite, kann aber nicht so gut mit großen
oder binären Dateien umgehen. Es unterstützt auch keine atomaren
Commits.<emphasis>[Haftungsauschluss: Ich war ca. fünf Jahre lang
aktiver Entwickler bei CVS, vor ich dabei half, das Subversion Projekt
anzufangen, um es zu ersetzen.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-subversion">
<title><emphasis role="bold">Subversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://subversion.tigris.org/"/></title>

<para>Subversion wurde vor allem als Ersatz für CVS
geschrieben&mdash;d.h. seine Herangehensweise an die Versionsverwaltung
ist ungefähr die gleiche wie bei CVS, aber ohne die Probleme und
fehlende Funktionen, welche die meisten Nutzer von CVS verärgern. Eine
der Ziele von Subversion ist, dass der Übergang nach Subversion für 
Leute die bereits mit CVS vertraut sind, als relativ glatt empfinden. 
Es ist hier nicht genug Platz um detalliert die Funktionen von
Subversion zu behandeln; gehen Sie zu der Webseite des Projekts für
weitere Informationen. <emphasis>[Hauftungsauschluss: Ich bin an der
Entwicklung von Subversion beteiligt, und es ist das einzige System
welches ich regelmäßig benutze.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-svk">
<title><emphasis role="bold">SVK</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://svk.elixus.org/"/></title>

<para>Auch wenn es auf Subversion aufbaut, ähnelt SVK wahrscheinlich
eher einige der dezentralisierten Systeme weiter unten als Subversion.
SVK unterstützt verteilte Entwicklung, lokale Commits, ausgeklügelte
Zusammenführung von Änderungen, und die Fähigkeit Bäume aus
Versionsverwaltungssystemen außer SVK zu spiegeln. Siehe seine Webseite
für weitere Details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-mercurial">
<title><emphasis role="bold">Mercurial</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.selenic.com/mercurial/"/></title>

<para>Mercurial ist ein verteiltes Versionsverwaltungssystem, welches
unter anderem "vollständige kreuzindexierung von Dateien sowie den 
Änderungen an mehereren Dateien; Bandbreite und Prozessor sparende HTTP
und SSH Protokolle für die Synchronisierung; beliebige Merges zwischen
den Zweigen von Entwicklern; integrierte autonome Web basierte
Benutzeroberfläche; [unterstützung für] UNIX, MacOS X, und Windows" und
mehr (die vorangehende Liste von Funktionen stammt von der Webseite von
Mercurial).</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-git">
<title><emphasis role="bold">GIT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://git.or.cz/"/></title>

<para>GIT ist ein Projekt welches von Linus Torvalds gestartet wurde, um
den Quellcode von dem Linux Kernel zu verwalten. GIT war zunächst
relativ auf die Bedürfnisse der Kernel Entwicklung konzentriert, ist
aber darüber hinaus gewachsen und wird mittlerweile von anderen
Projekten als dem Linux Kernel benutzt. Auf der Webseite steht
"...entwickelt um sehr große Projekte schnell und effizient zu
verwalten; es wird hauptsächlich von verschiedenen Open Source Projekten
benutzt, insbesondere von dem Linux Kernel. Git gehört zu der Kategorie
der verteilten Verwaltungssysteme für Quellcode, ähnlich wie z.B. GNU
Arch oder Monotone (oder BitKeeper aus der proprietären Welt). Jedes
Arbeitsverzeichnis von GIT ist eine vollwertige Repository mit der
Möglichkeit Revisionen zu verfolgen, unabhängig von der Verfügbarkeit
des Netzwerks oder einem Server."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar">
<title><emphasis role="bold">Bazaar</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar.canonical.com/"/></title>

<para>Bazaar befindet sich noch in der Entwicklung. Es wird eine
Implementierung des GNU Arch Protokolls sein, währen es sich entwickelt,
wird es die Kompatibilität mit GNU Arch bewahren, und mit der GNU Arch 
Gemeinschaft bei Änderungen zusammen arbeiten, die aufgrund der
Benutzerfreundlichkeit erforderlich werden könnten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar-ng">
<title><emphasis role="bold">Bazaar-NG</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar-ng.org/"/></title>

<para>Bazaar-NG (oder bzr) wird derzeit von Canonical entwickelt
(<ulink url="http://canonical.com/"/>). Es bietet die Entscheidung
zwischen zentralisierter und dezentralisierter Arbeit innerhalb von
einem einzigen Projekt an. Wenn Sie zum Beispiel im Büro sind, können
Sie auf einem zentralen Ast arbeiten; bei experimentellen Änderungen
oder offline Arbeit, können Sie ihren Ast auf dem Laptop mitnehmen und
es später wieder zusammenführen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-darcs">
<title><emphasis role="bold">Darcs</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://abridgegame.org/darcs/"/></title>

<para>"David's Advanced Revision Control System ist noch ein weiterer
Ersatz für CVS. Es wurde in Haskell geschrieben, und wurde schon auf
Linux, MacOS X, FreeBSD, OpenBSD und Microsoft Windows benutzt. Darcs
beinhaltet auch ein cgi script, mit dem man sich den Ihnhalt Ihrer 
Repository anschauen kann."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arch">
<title><emphasis role="bold">Arch</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.gnu.org/software/gnu-arch/"/></title>

<para>GNU Arch unterstützt sowohl verteilte als auch die zentralisierte
Entwicklung. Entwickler committen ihre Änderungen zu einem "Archiv",
welches lokal sein kann, und die Änderungen können zu anderen Archiven
geschoben oder gezogen werden, wie es die Verwalter der Archive für
richtig halten. Wie solch eine Methodik impliziert, hat Arch feinere
Unterstützung für Merges als CVS. Arch erlaubt es auch einfach Zweige
von Archiven zu erstellen auf denen man keinen commit Zugriff hat; siehe
die Webseiten von Arch für weitere Details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-monotone">
<title><emphasis role="bold">monotone</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.venge.net/monotone/"/></title>

<para>"monotone ist ein freies verteiltes Versionsverwaltungssystem. Es
bietet einen einfachen, aus einer Datei bestehenden auf Transaktionen
basierenden Speicher, mit vollständig entkoppeltem Betrieb und eine
effizientes peer-to-peer synchronizationsprotokoll. Es versteht
historisch abhängige Merges, leichtgewichtige Zweige, integrierte
Überprüfung und Tests durch dritte. Es benutzt kryptographische
Benennung von Versionen sowie Client Seitige RSA Zertifikate. Es hat
gute Unterstützung für Internationalisierung, hat keine externen
Abhängigkeiten, läuft unter Linux solaris, OSX, und windows, und ist
under der GNU GPL lizensiert."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-codeville">
<title><emphasis role="bold">Codeville</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://codeville.org/"/></title>

<para>"Warum noch ein weiteres Versionsverwaltungssystem? Alle anderen
Versionsverwaltungssysteme erfordern, dass Sie genau auf die Beziehungen
zwischen Zweigen acht halten, um nicht wiederholt die selben Konflikte
zusammenführen zu müssen. Codeville ist sehr viel zügelloser. Es erlaubt
Ihnen ein Commit von oder zu einer Repository zu machen, jederzeit und
ohne unnötige wiederholte Merges."</para>

<para>"Codeville arbeitet, indem es einen für jede Änderung die gemacht
wird eine Kennung erstellt, und sich eine Liste aller Änderungen die je
auf einer Datei angewandt wurden behällt, sowie die Letzte Änderung die
jede Zeile in jeder Datei geändert hat. Wenn es einen Konflikt gibt,
überprüft es ob einer der beiden Seiten bereits auf die andere angewandt
wurde, und wenn das der Fall ist, gewinnt die andere Seite automatisch.
Wenn es einen Konflikt gibt, der wirklich nicht automatisch 
zusammengeführt werden kann, verhällt sich fast genau wie CVS."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-vesta">
<title><emphasis role="bold">Vesta</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.vestasys.org/"/></title>

<para>"Vesta ist ein portables SCM [Software Configuration Management]
System dessen Ziel es ist die Entwicklung von fast jeder Größe
unterstützen soll, von ziemlich klein (unter 10.000 Code Zeilen) bis
sehr groß (10.000.000 Code Zeilen)."</para>

<para>"Vesta ist ein ausgereiftes System. Es ist das Ergebnis von über
10 Jahren Forschungs und Entwicklungsarbeit an dem Compaq/Digital 
Systems Forschungszentrum,
Research Center, and it was in production use by Compaq's Alpha microprocessor
group for over two and a half years.  The Alpha group had over 150
active developers at two sites thousands of miles apart, on the east
and west coasts of the United States.  The group used Vesta to manage
builds with as much as 130 MB of source data, each producing 1.5 GB of
derived data.  The builds done at the eastern site in an average day
produced about 10-15 GB of derived data, all managed by Vesta.
Although Vesta was designed with software development in mind, the
Alpha group demonstrated the system's flexibility by using it for
hardware development, checking their hardware description language
files into Vesta's source code control facility and building
simulators and other derived objects with Vesta's builder.  The
members of the former Alpha group, now a part of Intel, are continuing
to use Vesta today in a new microprocessor project."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-aegis">
<title><emphasis role="bold">Aegis</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://aegis.sourceforge.net/"/></title>

<para>"Aegis is a transaction-based software configuration management
system.  It provides a framework within which a team of developers may
work on many changes to a program independently, and Aegis coordinates
integrating these changes back into the master source of the program,
with as little disruption as possible."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvsnt">
<title><emphasis role="bold">CVSNT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://cvsnt.org/"/></title>

<para>"CVSNT is an advanced multiplatform version control system.
Compatible with the industry standard CVS protocol it now supports
many more features. ... CVSNT is Open Source, Free software licensed
under the GNU General Public License."  Its feature list includes
authentication via all standard CVS protocols, plus Windows specific
SSPI and Active Directory; secure transport support, via sserver or
encrypted SSPI; cross platform (runs in Windows or Unix environments);
NT version is fully integrated with Win32 system; MergePoint
processing means no more tagging to merge; under active
development.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-meta-cvs">
<title><emphasis role="bold">META-CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://users.footprints.net/~kaz/mcvs.html"/></title>

<para>"Meta-CVS is a version control system built around CVS.
Although it retains most of the features of CVS, including all of the
networking support, it is more capable than CVS, and easier to use."
The features listed on META-CVS's web site include: directory
structure versioning, improved file type handling, simpler and more
user-friendly branching and merging, support for symbolic links,
property lists attached to versioned data, improved third-party data
importing, and easy upgrading from stock CVS.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-opencm">
<title><emphasis role="bold">OpenCM</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.opencm.org/"/></title>

<para>"OpenCM is designed as a secure, high-integrity replacement for
CVS.  A list of the key features can be found on the features page.
While not as 'feature rich' as CVS, it supports some useful things
that CVS lacks.  Briefly, OpenCM provides first-class support for
renames and configuration, cryptographic authentication and access
control, and first-class branches."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-stellation">
<title><emphasis role="bold">Stellation</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.eclipse.org/stellation/"/></title>

<para>"Stellation is an advanced, extensible software configuration
management system, originally developed at IBM Research.  While
Stellation provides all of the standard functions available in any SCM
system, it is distinguished by a number of advanced features, such as
task-oriented change management, consistent project versioning and
lightweight branching, intended to ease the development of software
systems by large groups of loosely coordinated developers."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-prcs">
<title><emphasis role="bold">PRCS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://prcs.sourceforge.net/"/></title>

<para>"PRCS, the Project Revision Control System, is the front end to
a set of tools that (like CVS) provide a way to deal with sets of
files and directories as an entity, preserving coherent versions of
the entire set. ... Its purpose is similar to that of SCCS, RCS, and
CVS, but (according to its authors, at least), it is much simpler than
any of those systems."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arx">
<title><emphasis role="bold">ArX</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/arx/"/></title>

<para>ArX is a distributed version control system offering branching
and merging features, cryptographic data integrity verification, and
the ability to publish archives easily on any HTTP server.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-sourcejammer">
<title><emphasis role="bold">SourceJammer</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://sourcejammer.org/"/></title>

<para>"SourceJammer is a source control and versioning system written
in Java.  It consists of a server-side component that maintains the
files and version history, and handles check-in, check-out, etc. and
other commands; and a client-side component that makes requests of the
server and manages the files on the client-side file system."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-fastcst">
<title><emphasis role="bold">FastCST</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.zedshaw.com/projects/fastcst/index.html"/></title>

<para>"A 'modern' system that uses changesets over file revisions and
distributed operation rather than centralized control.  As long as you
have an e-mail account you can use FastCST.  For larger distribution
you only need an FTP server and/or an HTTP server or use the built in
'serve' command to serve your stuff up directly.  All changesets are
universally unique and have tons of meta-data so you can reject
anything you don't [want] before you try it.  Merging is done by comparing a
merged changeset against the current directory contents, rather than
trying to merge it with another changeset."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-superversion">
<title><emphasis role="bold">Superversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.superversion.org/"/></title>

<para>"Superversion is a multi-user distributed version control system
based on change sets. It aims to be an industrial-strength, open
source alternative to commercial solutions that is equally easy to use
(or even easier) and similarly powerful. In fact, intuitive and
efficient usability has been one of the top priorities in
Superversion's development from the very beginning."</para>

</sect2>

</simplesect>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->

# vim: tw=72
