<chapter id="social-infrastructure">

<title>Soziale und Politische Infrastruktur</title>

<simplesect>

<para>Die erste Frage, die Leute über freie Software fragen ist für
gewöhnlich "Wie funktioniert es? Was hält ein Projekt am laufen? Wer
trifft die Entscheidungen?" Ich bin immer unzufrieden mit den faden
Antworten über Meritokratie, der Geist der Zusammenarbeit, Code der
für sich selber spricht, usw. Tatsache ist, dass die Frage nicht so
leicht zu beantworten ist. Meritokratie, Zusammenarbeit und laufender
Code sind alle ein Teil davon, aber sie tragen wenig dazu bei, zu
erklären, wie Projekte wirklich auf einer täglichen basis laufen, und
sagen nichts darüber aus wie Konflikte gelöst werden.</para>

<para>Diese Kapitel versucht die Gemeinsamen strukturellen Grundsteine
welche erfolgreiche Projekte aufzuzeigen. Mit "erfolgreich, meine ich
nicht nur im sinne technischer Qualität, sondern auch was die 
betriebliche Gesundheit und Überlebensfähigkeit angeht. Die
betriebliche Gesundheit ist die andauernde Fähigkeit des Projekts neue
Code Beiträge und Entwickler aufzunehmen, sowie auf neue Bug Meldungen
reagieren zu können. Überlebensfähigkeit ist die Fähigkeit des 
Projekts, unabhängig von irgend einem Beteiligten oder Sponsor
fortbestehen zu können&mdash;betrachten Sie es als die 
Wahrscheinlichkeit, dass das Projekt weiter gehen würde selbst wenn
alle Gründungsmitglieder ihre Sachen packen würden und sich anderen
Sachen widmen würden. Technischer Erfolg ist nicht schwer zu erreichen,
aber ohne eine robusten Entwicklerbasis, kann ein Projekt vielleicht
nicht mit dem Wachstum welches anfänglicher Erfolg bringt, oder dem
Verlust charismatischer Individuen, zurechtkommen.</para>

<para>Es gibt verschiedene Wege diesen Art Erfolg zu erreichen. Manche
beinhalten eine formale Struktur der Regierung, womit Debatten
aufgelöst werden, neue Entwickler eingeladen werden (manchmal auch
ausgeladen), neue Funktionen geplant werden, usw. Andere beinhalten
weniger formelle Strukturen, aber bewusstere Zurückhaltung, um eine
Atmosphäre der Fairness herzustellen, auf das sich Leute verlassen
können als eine so gut wie echte Regierungsform. Beide Wege führen
zum gleichen Ergebnis: Das Gefühl einer beständigen Institution, 
welches von Gewohnheiten und Abläufen unterstützt werden, die alle
Beteiligten wohl verstehen. Diese Eigenschaften sind noch wichtiger
bei selbst organisierenden Systemen als bei zentral verwalteten, da
bei selbst organisierenden Systemen, jeder sich darüber im klaren ist,
das ein paar faule Äpfel die gesamte Obstschale verderben, zumindest
eine Zeit lang.</para>

<sect1 id="forkability">
<title>Forkability</title>

<para>Der Fork (de. Gabel im sinne von Aufspaltung)
Die unabdingbare Zutat, welche Entwickler in einem freien Software
Projekt zusammenbindet, und Sie Bereitwillig macht wenn Kompromisse 
nötig einzugehen, ist die <firstterm>Forkbarkeit</firstterm> des Codes:
Die Möglichkeit von jedem, eine Kopie des Quellcodes zu nehmen und ein
konkurierendes Projekt anzufangen, bekannt als <firstterm>Fork
</firstterm>. Das paradoxe daran ist, dass die <emphasis>Möglichkeit
</emphasis> eines Forks in freien Software Projekten für gewöhnlich 
ein viel größerer Antrieb ist, als wirkliche Forks welche sehr selten
sind. Da ein Fork schlecht für alle ist (aus Gründen, die in <xref 
linkend="forks"/><phrase output="printed"> im Kapitel <xref 
linkend="managing-volunteers"/></phrase> detailiert untersucht werden),
sind mehr Beteiligte dazu bereit Kompromisse einzugehen, wenn die
Gefahr eines Forks besteht.</para>

<para>Forks, oder vielmehr potentielle Forks, sind der Grund, dass es
keine wirklichen Diktatoren in freien Software Projekten gibt. Das mag
sich nach einer Überraschenden Behauptung anhören, wenn man bedenkt wie
gängig es ist das jemand ein "Diktator" oder "Tyrann" in einem 
beliebigen Open Source Projekt genannt wird. Diese Art der Tyrannei 
ist aber besonders, recht unterschiedlich von dem gewöhnlichen 
Verständnis des Wortes. Stellen Sie sich einen König vor, dessen
Untergebenen sein Königreich jederzeit kopieren können und dort regieren
könnten wie sie es für angemessen halten. Würde solch ein König nicht
wesentlich anders regieren, als einer dessen Untergebenen an ihn
gebunden wären, egal was er tut?</para>

<para>Deshalb sind selbst Projekte die nicht formal wie Demokratien
organisiert sind, in der Praxis, Demokratien, wenn es sich um wichtige
Entscheidungen dreht. Nachbildbarkeit impliziert auch Forkbarkeit;
Forkbarkeit impliziert Konsens. Es mag sein, das jeder dazu bereit ist
auf einen Anführer zu verweisen (das bekannteste Beispiel mag Linus
Torvalds bei der Entwicklung des Linux Kernels sein), aber nur 
deshalb, weil sie es sich so <emphasis>ausgesucht</emphasis> haben, 
auf eine komplett nicht zynische oder unheimliche Art. Der Diktator
hat keinen magischen Einfluss auf das Projekt. Eine 
Schlüsseleigenschaft aller Open Source Lizenzen ist, dass sie keiner
einzelnen Partei, bezüglich Entscheidungen wie Code geändert oder 
benutzt werden kann, mehr Macht geben als einer anderen. Wenn der
Diktator plötzlich anfangen würde schlechte Entscheidungen zu treffen,
gäbe es Unruhe, letztendlich gefolgt von einem Aufstand und einem Fork.
So weit kommt es aber meißtens nicht, da der Diktator vorher 
Kompromisse eingeht.</para>

<para>Nur weil die Forkbarkeit eine obere Grenze vorgibt, wieviel
Macht jeder einzelne ausüben kann, bedeutet es aber nicht, dass es
nicht wesentliche Unterschiede gibt, wie Projekte regiert werden.
Sie wollen nicht, dass jede Entscheidung auf die Frage hinausläuft,
wer bereit ist einen Fork zu machen. Das würde sehr schnell ermüdend
werden, und Energie von echter Arbeit wegreißen. Die nächsten beiden
Abschnitte untersuchen, die verschiedenen Wege Projekte so zu 
organisieren, dass die meisten Entscheidungen reibungslos verlaufen.
Diese beiden Beispiele sind etwas idealisierte Grenzfälle; viele
Projekte fallen irgendwo zwischen ihnen.</para>

</sect1>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="benevolant-dictator">
<title>Gütige Diktatoren</title>

<para>Das Modell des <firstterm>gütigen Diktators</firstterm> ist genau
das, wonach es sich anhört: Die letztendliche Entscheidungsgewalt liegt 
bei einer Person, welcher, von dem, aufgrund seiner Persönlichkeit und 
Erfahrung, erwartet wird, dass er es weise benutzt.</para>

<para>Auch wenn der Begriff "gütige Diktator" im Englischen bekannt als
"benevolent dictator" und dort der standardmäßige Begriff für diese 
Rolle ist, wäre es besser ihn als einen von der Gemeinschaft 
anerkannten Vermittler oder Richter zu betrachten. Im Allgemeinen,
treffen gütige Diktatoren nicht alle Entscheidungen oder auch nur die
meisten Entscheidungen. Es ist sowieso unwahrscheinlich, dass eine
Person genug Kenntnisse haben könnte, um in einem gesamten Projekt
durchweg gute Entscheidungen treffen zu können. Hochwertige Entwickler
werden sich nicht lange am Projekt beteiligen, wenn sie nicht zumindest
einen Stück weit, Einfluß auf die Richtung des Projekts haben. 
Deshalb diktieren gütige Diktatoren nicht besonders viel. Statt dessen,
lassen sie wann immer Möglich die Sachen sich von alleine durch 
Diskussionen oder Erprobung erledigen. Sie nehmen selber an diesen 
Diskussionen teil, aber als gewöhnliche Entwickler, oftmals verweisen
sie auf einen Zuständigen für bestimmte Bereiche die mehr Kenntnisse
haben. Nur wenn es klar ist, dass es kein Konsens erreicht werden kann,
und das der größte Teil der Gruppe von jemandem <emphasis>will
</emphasis>, dass die Entscheidung Geleitet wird, damit die Entwicklung
weiter gehen kann, sprechen sie ein Machtwort und sagen "So wird das
jetzt gemacht". Der Widerwille Entscheidungen durch Gebote zu treffen
ist eine Wesenszug welche praktisch alle erfolgreichen gütigen 
Diktatoren teilen; es ist eines der Gründe, warum sie es schaffen diese
Rolle zu behalten.</para>

<sect2 id="benevolant-dictator-qualifications">
<title>Wer kann ein gütiger Diktator sein?</title>

<para>Ein gütiger Diktator erfordert eine Reihe von Wesenszügen. Es
bedarf erstens eine fein sinniges Gespür für den eigenen Einfluss im
Projekt, welche wiederum Zurückhaltung mit sich bringt. In den frühen
Phasen einer Diskussion, sollte man nicht seine Meinungen und 
Folgerungen mit einer solchen Sicherheit ausdrücken, dass andere das
Gefühl bekommen, dass es sinnlos ist zu widersprechen. Menschen 
sollten die Freiheit haben ihre Ideen auszudrücken, selbst blöde Ideen.
Es ist natürlich unvermeidlich, dass der gütige Diktator von Zeit zu 
Zeit eine blöde Idee abgeben wird, und die Rolle erfordert deshalb
auch die Fähigkeit zu erkennen und zu würdigen, dass man eine falsche
Entscheidung getroffen hat&mdash;wobei das ein Wesenszug ist welches
<emphasis>alle</emphasis> gut Entwickler aufweisen sollten, 
insbesondere wenn sie lange beim Projekt bleiben. Der Unterschied ist
aber, dass der gütige Diktator ohne sich über die Langzeitschäden an
ihrem Ruf all zu viele Sorgen machen zu müssen. Entwickler die nicht
so lang beteiligt sind, können sich weniger sicher fühlen, also sollte
der gütige Diktator seine Kritiken oder entgegengesetzten 
Entscheidungen mit etwas Gespür für das Gewicht seiner Worte, sowohl
technisch als auch psychologisch.</para>

<para>Der gütige Diktator muss <emphasis>nicht</emphasis> die besten
technischen Fähigkeiten von allen im Projekt haben. Er muss lediglich
gut genug sein, am Code selber zu arbeiten, und einen Kommentar zu
einer Änderung welches unter Betrachtung steht, verstehen zu können,
das ist aber auch schon alles. Die Position des gütigen Diktators kann
man sich weder aneignen, noch behalten mittels Einschüchternden
Programmierfähigkeiten. <emphasis>Wirklich</emphasis> wichtig ist
Erfahrung und einen übergreifendes Gefühl für Design&mdash;nicht
unbedingt die Fähigkeit gutes Design auf Kommando zu produzieren,
sondern die Fähigkeit sie zu erkennen, unabhängig von der Quelle.</para>

<para>Es ist verbreitet, dass der gütige Diktator auch der Gründer des
Projekts ist, was aber eher ein Zusammenhang als eine Ursache ist. Die
Qualitäten die einen ermöglichen ein Projekt erfolgreich anzufangen
&mdash;technische Kompetenz, die Fähigkeit andere überzeugen zu können
mit zu machen, usw.&mdash;sind genau die gleichen Qualitäten welche
jeder gütiger Diktator besitzen müsste. Natürlich haben die Gründer
sozusagen automatisch ein gewisses Betriebsalter, was genug sein kann
um eine gütige Diktatur, für alle Beteiligten, als den Weg des 
geringsten Widerstands erscheinen zu lassen.</para>

<para>Denken Sie daran, dass das Potential eines Forks in beiden
Richtungen geht. Ein gütiger Diktator kann genau so gut wie jeder 
andere einen Fork machen kann, und gelegentlich ist das auch passiert,
als sie das Gefühl bekamen, dass die Richtung in der sie das Projekt
führen wollten eine andere war, als die Mehrheit der anderen 
Entwickler. Aufgrund der Forkbarkeit, macht es keinen Unterschied,
ob der gütige Diktator root (de. Administrator) Zugriff auf die 
Hauptserver des Projekts hat oder nicht. Leute reden manchmal vom
Zugriff auf die Server als ob es die ultimative Quelle von Macht in
einem Projekt wäre, tatsächlich ist es aber bedeutungslos. Die 
Fähigkeit die commit Passwörter von Beteiligten hinzuzufügen oder zu
entfernen, beeinflusst nur die Kopie des Projekts welches auf dem 
Server liegt. Anhaltender Missbrauch dieser Macht, ob von dem gütigen
Diktator oder jemand anderem, würde einfach zum Umzug der Entwicklung
auf einen anderen Server führen.</para>

</sect2>

<para>Ob Ihr Projekt einen gütigen Diktator haben sollte oder besser
laufen würde mit einem zentralisierten System, hängt größtenteils 
davon ab, wer für die Rolle verfügbar ist. Als Faustregel kann man
nehmen, dass wenn es einfach offensichtlich für jeden ist, wer der
gütige Diktator sein sollte, dann ist das der richtige Weg. Wenn
aber kein Kandidat gleich offensichtlich ist, dann sollte das Projekt
wahrscheinlich ein zentralisiertes System für Entscheidungen, wie im
nächsten Abschnitt beschrieben nehmen.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>Konsens basierte Demokratie</title>

<para>Mit zunehmenden alter des Projekts, neigt man dazu weg von dem
Modell des gütigen Diktators wegzugehen, hin zu offeneren 
demokratischen Systemen. Das ist nicht zwangsläufig aufgrund von
Unzufriedenheit mit einem bestimmte gütigen Diktator. Es ist einfach
nur, dass ein Regierungssystem welches auf eine Gruppe basiert,
"evolutionär stabiler" ist, um mal eine Metapher aus der Biologie zu
entleihen. Immer dann, wann ein gütiger Diktator zurücktritt, oder
versucht die Entscheidungsgewalt gleichmäßiger zu verteilen, ist das
eine Gelegenheit für die Gruppe, sich auf ein neues nicht 
diktatorisches System zu einigen&mdash;sozusagen eine Verfassung 
einführen. Die Gruppe wird vielleicht nicht beim ersten oder zweiten
Mal diese Gelegenheit wahrnehmen, letztendlich werden sie es aber;
sobald sie es tun, ist es unwahrscheinlich, dass es jemals rückgängig
gemacht wird. Das lässt sich durch Vernunft erklären: Wenn eine Gruppe
bestehend aus N Personen in einer bestimmten Person, würde das 
bedeuten, dass N&nbsp;-&nbsp;1 Personen jeder sich damit einverstanden
erklären würde, seinen eigenen Einfluss zu verringern. Menschen wollen
das im allgemeinen. Selbst wenn sie es täten, wäre die entstandene
Diktatur trotzdem nur bedingt: Ein von der Gruppe gesalbter gütiger
Diktator, kann genau so gut von der Gruppe wieder abgesetzt werden.
Sobald ein Projekt von der Führung durch einer einzelnen charismatischen
Person, hin zu einem formaleren, System basierend auf der Gruppe, geht
es selten zurück.</para>

<para>Die Einzelheiten wie diese Systeme funktionieren variieren zwar
erheblich, es gibt aber zwei Gemeinsamkeiten: Erstens, die Gruppe
funktioniert meistens mittels Konsens; zweitens, es gibt eine formale
Einrichtung zur Abstimmung gibt, auf der man zurückgreifen kann, wenn
Konsens nicht erreicht werden kann.</para>

<para><firstterm>Konsens</firstterm> bedeutet lediglich eine 
Vereinbarung mit der jeder leben kann. Es ist kein mehrdeutiger 
Zustand: eine Gruppe had Konsens erreicht, wenn jemand vorschlägt,
dass es erreicht wurde und keiner widerspricht, und welche Tätigkeiten
als Folge daraus durchgeführt würden, wenn sie nicht schon 
offensichtlich sind.</para>

<para>Die meisten Unterhaltungen in einem Projekt sind über technische
Themen, wie der richtige Weg einen Bug zu beheben, ob eine neue 
Funktion hinzugefügt werden soll oder nicht, wie streng man 
Schnittstellen dokumentieren soll, usw. Regierungen basierend auf
Konsens funktionieren deshalb gut, da sie nahtlos mit der technischen
Diskussion selbst verläuft. Bis zum ende der Diskussion, gibt es oft
eine allgemeine Übereinstimung darüber welchen Kurs zu nehmen. Für
gewöhnlich schreibt jemand eine abschließende Nachricht was auch
gleichzeitig eine Zusammenfassung der Entscheidungen und ein
impliziter Konsens Vorschlag. Das gibt eine letzte Möglichkeit
für jemand anderes zu sagen "Warte, dazu habe ich nicht zugestimmt.
Wir müssen das noch ein wenig kleinhacken".</para>

<para>Bei kleinen nicht kontroversen Entscheidungen, ist der Konsens 
Vorschlag implizit. Wenn ein Entwickler zum Beispiel spontan einen
Bugfix committed, ist der Commit selber der Konsens Vorschlag: "Ich 
nehme an, dass wir alle darüber einstimmen, dass dieser Bug behoben
werden muss und, dass dies der Weg ist ihn zu beheben". Natürlich sagt
der Entwickler das nicht tatsächlich; Er committed nur den Fix, und
die Anderen im Projekt machen sich nicht die Mühe ihre Zustimmung zu
geben, da schweigen eine Zusage ist. Wenn jemand einen Commit macht,
bei dem sich herausstellt, dass es <emphasis>keinen</emphasis> Konsens
gab, resultiert daraus, dass die Änderung so besprochen als wäre es 
noch gar nicht committed worden. Warum das so funktioniert, ist das 
Thema des nächsten Abschnitts.</para>

<sect2 id="version-control-relaxation">
<title>Versionsverwaltung bedeutet, dass Sie sich entspannen können</title>

<para>Die Tatsache, dass der Quellcode des Projekts unter 
Versionsverwaltung gehalten wird hat zur Folge, dass die Meisten 
Entscheidungen leicht rückgängig gemacht werden können. Der häufigste
Ablauf, ist wenn jemand aus Versehen einen Commit macht, in der Annahme,
dass jeder damit glücklich wäre, nur um nachher mit Einwenden 
konfrontiert zu werden begegnen. Es ist typisch, dass solche Einwände
mit einer obligatorischen Entschuldigung anfangen, dafür dass man die
vorherige Diskussion verpasst hat, wobei man das auslassen kann, wenn
derjenige mit dem Einwand keine Aufzeichnung der Diskussion in den
Archiven des Email Verteilers findet. So oder so, gibt es keinen Grund
dass der Ton anders sein sollte nachdem die Änderung committed wurde
als davor. Jede Änderung kann rückgängig gemacht werden, zumindest
solange, bis abhängige Änderungen vorgestellt werden (wie neuer Code 
der nicht mehr funktionieren würde wenn man die Änderung plötzlich
herausnimmt). Das Versionsverwaltungssystem gibt dem Projekt eine
Möglichkeit die Auswirkungen schlechter oder übereilter Urteile 
rückgängig zu machen. Das wiederum gibt den Leuten die Freiheit ihr
Instinkte darüber zu vertrauen, wieviel Rückmeldung nötig ist bevor 
man etwas macht.</para>

<para>Das bedeutet auch, dass der Ablauf den Konsens herzustellen nicht
sonderlich formal sein muss. Die meisten Projekten handhaben es nach
Gefühl. Kleine Änderungen können ohne eine Diskussion eingebracht 
werden, oder mit minimaler Diskussion und abschließendem ab genickt
werden. Bei schwerwiegenderen Änderungen, besonders bei solchen die
eine Menge Code instabil machen könnten, sollten die Beteiligten ein
zwei Tage lang warten, vor sie annehmen das Konsens herrscht, da
niemand bei einer wichtigen Diskussion ausgelassen werden sollte, nur
weil sie nicht häufig genug ihre Emails abgerufen hat.</para>

<para>Wenn als jemand zuversichtlich ist, dass sie weiß was getan
werden muss, sollte sie einfach damit fortfahren. Das gilt nicht nur
für Bugfixes, sondern auch für Aktualisierungen an der Webseite, 
Änderungen an der Dokumentation und alles andere was wahrscheinlich 
nicht kontrovers sein wird. Für gewöhnlich gibt es nur wenige Fälle bei
denen ein Vorgang rückgängig gemacht werden muss und diese können von
Fall zu Fall behandelt werden. Natürlich sollte man Leute nicht dazu
ermutigen eigensinnig zu werden. Es gibt immer noch einen 
psychologischen Unterschied zwischen einer Entscheidung die zur Debatte
steht und eine welche bereits angewandt wurde, selbst wenn es technisch
umkehrbar ist. Menschen haben immer das Gefühl das Bewegung mit 
Entscheidung verbunden ist, und sind weniger bereit eine Änderung
rückgängig zu machen, als es von vorne herein zu verhindern. Wenn ein
Entwickler jedoch diese Tatsache missbraucht, indem er eine 
möglicherweise Kontroverse Änderung zu schnell committed, können und
sollten Leute sich beschweren und dem Entwickler engere Grenzen 
setzen, bis sich die Lage verbessert.</para>

</sect2>

<sect2 id="voting">
<title>Stimme ab, wenn Konsens nicht erreicht werden kann</title>

<para>Manche Debatten werden zwangsläufig nicht in Konsens enden.
Wenn alle anderen Möglichkeiten einen Stillstand aufzulösen 
fehlschlagen, ist die Lösung darüber abzustimmen. Vor eine Abstimmung
aber stattfinden kann, muss es eine klare Auswahl auf dem Stimmzettel
geben. Auch hier verläuft die technische Diskussion wieder glücklich 
mit den Entscheidungsabläufen des Projekts. Die Art von Fragen welche
zu einer Abstimmung führen haben oftmals mit komplexe mehrschichtige
Angelegenheiten zu tun. Bei jeder solche komplexe Entscheidung gibt
es meistens ein oder zwei Personen welche die Rolle des <firstterm>
ehrlichen Marklers</firstterm>: Sie fassen periodisch die verschiedenen
Argumente und behalten den Überblick über die Zentralen 
Meinungsverschiedenheiten (und Übereinstimmungen). Diese 
Zusammenfassungen helfen allen dabei feststellen zu können, wieviel
Fortschritt gemacht wurde, und erinnern alle daran welche Punkte noch
offen sind. Selbige Zusammenfassungen dienen als Prototypen für die
Stimmzettel, sollte eine Wahl nötig werden. Wenn die ehrlichen Markler
ihre Arbeit gut gemacht haben, werden Sie glaubhaft eine Wahl halten
können, wenn es dafür Zeit dafür wird, und die Gruppe wird diese 
Stimmzettel akzeptieren, auf der Basis dieser Zusammenfassung der
offenen Punkte. Die Markler können an der Debatte Teilnehmen; es ist
nicht nötig, dass sie sich aus dem Schlachtgetümmel heraushalten,
solange sie die Ansichten Anderer verstehen und angemessen 
repräsentieren können, und die Meinungen ihrer Partei Sie nicht
daran hinder den Zustand der Debatte auf eine neutrale Art 
Zusammenzufassen.</para>

<para>Der tatsächliche Inhalt des Stimmzettels ist normalerweise nicht
kontrovers. Bis es zu einer Wahl kommt, hat sich die 
Meinungsverschiedenheit auf ein paar Kernpunkte reduziert, mit
erkennbaren Namen und kurzen Beschreibungen. Ab und zu wird ein
Entwickler die Form des Stimmzettels beanstanden. Manchmal sind diese
Bedenken gerechtfertigt, zum Beispiel wenn eine Wichtige Wahl auf dem
Stimmzettel ausgelassen wurde oder nicht richtig beschrieben wurde.
Zuweilen kann ein Entwickler aber auch lediglich die Absicht haben,
das Unausweichliche hinauszuschieben, vielleicht mit dem Wissen, dass
die Wahl nicht zu seinem Gunsten ausfallen wird. <xref 
linkend="difficult-people"/><phrase output="printed"> im Kapitel <xref
linkend="communications"/></phrase> beinhaltet eine Anleitung, wie man
mit dieser art vom Quertreibern umgehen kann.</para>

<para>Denken Sie daran die Art der Wahl zu spezifizieren, da es viele
Verschiedene gibt, und Leute könnten falsche Annahmen darüber treffen,
welcher Ablauf benutzt wird. In den meisten Fällen ist eine <firstterm>
Wahl durch Zustimmung</firstterm> eine gute Entscheidung, bei der jeder
Wähler für so viele der Kandidaten auf den Stimmzettel stimmen kann
wie er möchte. Wahlen durch Zustimmung sind einfach zu erklären und 
auszuzählen, und im Gegensatz zu anderen Wahlsystemen erfordern sie 
nur einen Wahlgang. Siehe <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> für
weitere Details über Wahlen durch Zustimmung. Versuchen Sie sich aber
nicht zu einer Debatte darüber welches Wahlsystem zu nutzen verleiten 
zu lassen (dann stünden Sie natürlich vor einer Debatte welches
Wahlsystem zu nutzen um über das Wahlsystem abzustimmen!). Ein Grund
weßhalb Wahlen durch Zustimmung eine Gute Wahl ist, dass es sehr
wenig an ihnen gibt, was man beanstanden könnten&mdash;es ist etwa so
gerecht wie ein Wahlsystem sein kann.</para>

<para>Zuletzt, halten Sie die Wahlen öffentlich. Es gibt keinen
Grund für Geheimhaltung oder Anonymität bei einer Wahl die sowieso
öffentlich debattiert wurde. Lassen Sie jeden Beteiligten seine 
Stimmen an den Email Verteiler schicken, damit jeder Beobachter 
selber die Ergebnisse nachrechnen und überprüfen kann, und damit
alles in den Archiven aufgezeichnet wird.</para>

</sect2>

<sect2 id="when-to-vote">
<title>Wann Abzustimmen</title>

<para>Das schwerste bei Wahlen, ist zu bestimmen wann es dafür Zeit
ist. Im allgemeinen, sollten Wahlen sehr selten sein&mdash;als letztes
Mittel, wenn alle anderen Möglichkeiten fehlgeschlagen sind. Betrachten
Sie Wahlen nicht als eine tolle Möglichkeit Debatten zu lösen. Das ist
es nicht. Sie beenden Diskussionen, und beenden dadurch kreative
Überlegungen zu dem Problem. So lange die Diskussion weitergeht, gibt
es die Möglichkeit, dass jemand an eine neue Lösung denken wird, 
welches allen gefällt. Das geschieht überraschend oft: Eine lebhafte
Debatte kann zu einer neuen Art über das Problem zu denken führen, und
letztendlich zu einer Lösung führen, welches alle zufriedenstellt. 
Selbst wenn kein Vorschlag auftaucht, ist es für gewöhnlich trotzdem
besser einen Kompromiss auszuhandeln als eine Wahl zu halten. Nach 
einem Kompromiss, ist jeder ein wenig unglücklich, im Gegensatz zu
Wahlen bei denen manch unglücklich sind, während andere glücklich sind.
Aus einem politischen Standpunkt, ist erstere Situation vorzuziehen:
Zumindest bekommt jeder das Gefühl, etwas aus seiner Unzufriedenheit
herausgeholt zu haben. Er mag unzufrieden sein, aber alle anderen sind
es auch.</para>

<para>Der Hauptvorteil bei Abstimmungen ist, dass es endlich eine
Frage erledigt, damit alle weitergehen können. Es erledigt es aber
durch das Zählen von Köpfen, anstatt durch einen vernünftigen Dialog
welches alle zum selben Ergebnis führt. Je erfahrener die Leute mit
Open Source Projekten sind, desto weniger begierig finde ich sie
Fragen durch Wahlen zu erledigen. Statt dessen, werden Sie versuchen
vorher nicht in Erwägung gezogene Lösungen zu erkunden, oder größere
Kompromisse einzugehen, als sie ursprünglich geplant hatten. Es gibt
verschiedene Möglichkeiten um eine voreilige Wahl zu verhindern. Die
Offensichtlichste ist einfach zu sagen, "Ich denke nicht, das wir
schon bereit für eine Wahl sind," und zu erklären warum. Eine weitere
ist, nach einer informellen (nicht bindenden) heben von Händen zu
fragen. Wenn die Reaktion klar in die eine oder andere Richtung
tendiert, wird es manche plötzlich eher dazu bereit machen Kompromisse
einzugehen, und die Notwendigkeit einer formelle Wahl vorbeugen. Die
effektivste Lösung ist aber einfach eine neue Lösung anzubieten, oder
eine neue Sicht auf einen alten Vorschlag, damit Leute sich erneut mit
dem Sachverhalt befassen, anstatt lediglich die gleichen Argumente zu
wiederholen.</para>

<para>In bestimmte seltenen Fällen, werden vielleicht alle darüber
einstimmen, dass alle Kompromisslösungen schlimmer sind als irgend
eines der nicht auf Kompromisse basierenden. Wenn das geschieht, gibt
es weniger an einer Abstimmung auszusetzen, sowohl weil es 
wahrscheinlich zu einer besseren Lösung führt als auch weil die
Beteiligten nicht sonderlich unglücklich mit der Lösung sein werden,
egal wie es ausgeht. Auch dann sollte die Wahl nicht gedrängt werden.
Die Diskussion die der Wahl vorausgeht ist es, was die Wählerschaft 
belehrt, also kann ein frühes Ende dieser Diskussion die Qualität des
Ergebnisses verringern.</para>

<para>(Denken Sie daran, dass diese Empfehlung widerwillig Wahlen
auszurufen nicht für Wahlen über die Aufnahme von Änderungen gilt,
welches in <xref linkend="stabilizing-a-release"/><phrase
output="printed"> im Kapitel <xref linkend="development-cycle"/>
</phrase> beschrieben ist. Dort sind Wahlen eher ein Mittel zur
Kommunikation, eine Möglichkeit seine Beteiligung an der Überprüfung
einer Änderung kund zu tun, damit alle erkennen können, wie sehr
eine Änderung überprüft wurde).</para>

</sect2>

<sect2 id="electorate">
<title>Wer wählt?</title>

<para>Wenn man ein Wahlsystem hat, stellt sich die Frage nach der
Wählerschaft: Wer darf wählen? Das hat das Potential eine
sensible Frage zu sein, da es das Projekt dazu zwingt offiziell
manche Personen anzuerkennen, da sie mehr beteiligt sind oder ein
besseres Urteilsvermögen haben als andere.</para>

<para>Die beste Lösung ist einfach eine vorhandene Unterscheidung wie
der commit Zugriff zu nehmen, und daran das Wahlrecht festzumachen.
Bei Projekten welche sowohl vollen als auch teilweisen commit Zugriff
anbieten, hängt die Frage ob solche mit geringerem Zugriff wählen
können, größtenteils von dem Ablauf ab mit dem die Zugriffsrechte
gewährt werden. Wenn ein Projekt sie freizügig austeilt, zum Beispiel
um eine Vielzahl an Programmen von dritten Parteien in dem Repository
zu pflegen, solle es klar gestellt werden, dass es bei eingeschränkten
commit Berechtigung wirklich nur ums committen geht und nicht um die
Wahlberechtigung. Die umgekehrte Implikation gilt natürlich auch: da
vollberechtigte Committer wahlberechtigt sein werden, müssen sie nicht
nur als Programmierer, sondern als Mitglieder der Wählerschaft
ausgesucht werden. Wenn jemand auf dem Email Verteiler Tendenzen zeigt
Unruhe zu stiften oder Behinderungen zu verursachen, sollte die Gruppe
sehr vorsichtig damit sein Ihm commit Berechtigungen zu geben, selbst
wenn diese Person technisch begabt ist.</para>

<para>The voting system itself should be used to choose new
committers, both full and partial.  But here is one of the rare
instances where secrecy is appropriate.  You can't have votes about
potential committers posted to a public mailing list, because the
candidate's feelings (and reputation) could be hurt.  Instead, the
usual way is that an existing committer posts to a private mailing
list consisting only of the other committers, proposing that someone
be granted commit access.  The other committers speak their minds
freely, knowing the discussion is private.  Often there will be no
disagreement, and therefore no vote necessary.  After waiting a few
days to make sure every committer has had a chance to respond, the
proposer mails the candidate and offers him commit access.  If there
is disagreement, discussion ensues as for any other question, possibly
resulting in a vote.  For this process to be open and frank, the mere
fact that the discussion is taking place at all should be secret.  If
the person under consideration knew it was going on, and then were
never offered commit access, he could conclude that he had lost
the vote, and would likely feel hurt.  Of course, if someone
explicitly asks for commit access, then there is no choice but to
consider the proposal and explicitly accept or reject him.  If the
latter, then it should be done as politely as possible, with a clear
explanation: "We liked your patches, but haven't seen enough of them
yet," or "We appreciate all your patches, but they required
considerable adjustments before they could be applied, so we don't
feel comfortable giving you commit access yet.  We hope that this will
change over time, though."  Remember, what you're saying could come as
a blow, depending on the person's level of confidence.  Try to see it
from their point of view as you write the mail.</para>

<para>Because adding a new committer is more consequential than most
other one-time decisions, some projects have special requirements for
the vote.  For example, they may require that the proposal receive at
least <emphasis>n</emphasis> positive votes and no negative votes, or
that a supermajority vote in favor.  The exact parameters are not
important; the main idea is to get the group to be careful about
adding new committers.  Similar, or even stricter, special requirements
can apply to votes to <emphasis>remove</emphasis> a committer, though
hopefully that will never be necessary.  See <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on the
non-voting aspects of adding and removing committers.</para>

</sect2>

<sect2 id="polls">
<title>Polls Versus Votes</title>

<para>For certain kinds of votes, it may be useful to expand the
electorate. For example, if the developers simply can't figure out
whether a given interface choice matches the way people actually use
the software, one solution is to ask to all the subscribers of the
project's mailing lists to vote.  These are really
<firstterm>polls</firstterm> rather than votes, but the developers may
choose to treat the result as binding.  As with any poll, be sure to
make it clear to the participants that there's a write-in option: if
someone thinks of a better option not offered in the poll questions,
her response may turn out to be the most important result of the
poll.</para>

</sect2>

<sect2 id="veto">
<title>Vetoes</title>

<para>Some projects allow a special kind of vote known as a
<firstterm>veto</firstterm>.  A veto is a way for a developer to put a
halt to a hasty or ill-considered change, at least long enough for
everyone to discuss it more.  Think of a veto as somewhere between a
very strong objection and a filibuster.  Its exact meaning varies from
one project to another.  Some projects make it very difficult to
override a veto; others allow them to be overridden by regular
majority vote, perhaps after an enforced delay for more discussion.
Any veto should be accompanied by a thorough explanation; a veto
without such an explanation should be considered invalid on
arrival.</para>

<para>With vetoes comes the problem of veto abuse.  Sometimes
developers are too eager to raise the stakes by casting a veto, when
really all that was called for was more discussion.  You can prevent
veto abuse by being very reluctant to use vetoes yourself, and by
gently calling it out when someone else uses her veto too often.  If
necessary, you can also remind the group that vetoes are binding for
only as long as the group agrees they are&mdash;after all, if a
clear majority of developers wants X, then X is going to happen one
way or another.  Either the vetoing developer will back down, or the
group will decide to weaken the meaning of a veto.</para>

<para>You may see people write "-1" to express a veto.  This usage
comes from the Apache Software Foundation, which has a highly
structured voting and veto process, described at <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The Apache
standards have spread to other projects, and you will see their
conventions used to varying degrees in a lot of places in the open
source world.  Technically, "-1" does not always indicate a formal
veto even according to the Apache standards, but informally it is
usually taken to mean a veto, or at least a very strong
objection.</para>

<para>Like votes, vetoes can apply retroactively.  It's not okay to
object to a veto on the grounds that the change in question has
already been committed, or the action taken (unless it's something
irrevocable, like putting out a press release).  On the other hand, a
veto that arrives weeks or months late isn't likely to be taken very
seriously, nor should it be.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>Writing It All Down</title>

<para>At some point, the number of conventions and agreements floating
around in your project may become so great that you need to record it
somewhere.  In order to give such a document legitimacy, make it clear
that it is based on mailing list discussions and on agreements already
in effect.  As you compose it, refer to the relevant threads in the
mailing list archives, and whenever there's a point you're not sure
about, ask again.  The document should not contain any surprises: it
is not the source of the agreements, it is merely a description of
them.  Of course, if it is successful, people will start citing it as
a source of authority in itself, but that just means it reflects the
overall will of the group accurately.</para>

<para>This is the document alluded to in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturally, when the
project is very young, you will have to lay down guidelines without
the benefit of a long project history to draw on.  But as the
development community matures, you can adjust the language to reflect
the way things actually turn out.</para>

<para>Don't try to be comprehensive.  No document can capture
everything people need to know about participating in a project.  Many
of the conventions a project evolves remain forever unspoken, never
mentioned explicitly, yet adhered to by all.  Other things are simply
too obvious to be mentioned, and would only distract from important
but non-obvious material.  For example, there's no point writing
guidelines like "Be polite and respectful to others on the mailing
lists, and don't start flame wars," or "Write clean, readable bug-free
code."  Of course these things are desirable, but since there's no
conceivable universe in which they might <emphasis>not</emphasis> be
desirable, they are not worth mentioning.  If people are being rude on
the mailing list, or writing buggy code, they're not going to stop
just because the project guidelines said to.  Such situations need to
be dealt with as they arise, not by blanket admonitions to be good.
On the other hand, if the project has specific guidelines about
<emphasis>how</emphasis> to write good code, such as rules about
documenting every API in a certain format, then those guidelines
should be written down as completely as possible.</para>

<para>A good way to determine what to include is to base the document
on the questions that newcomers ask most often, and on the complaints
experienced developers make most often.  This doesn't necessarily mean
it should turn into a FAQ sheet&mdash;it probably needs a more
coherent narrative structure than FAQs can offer.  But it should
follow the same reality-based principle of addressing the issues that
actually arise, rather than those you anticipate might arise.</para>

<para>If the project is a benevolent dictatorship, or has officers
endowed with special powers (president, chair, whatever), then the
document is also a good opportunity to codify succession procedures.
Sometimes this can be as simple as naming specific people as
replacements in case the BD suddenly leaves the project for any
reason.  Generally, if there is a BD, only the BD can get away with
naming a successor.  If there are elected officers, then the
nomination and election procedure that was used to choose them in the
first place should be described in the document.  If there was no
procedure originally, then get consensus on a procedure on the mailing
lists <emphasis>before</emphasis> writing about it.  People can
sometimes be touchy about hierarchical structures, so the subject
needs to be approached with sensitivity.</para>

<para>Perhaps the most important thing is to make it clear that the
rules can be reconsidered.  If the conventions described in the
document start to hamper the project, remind everyone that it is
supposed to be a living reflection of the group's intentions, not a
source of frustration and blockage.  If someone makes a habit of
inappropriately asking for rules to be reconsidered every time the
rules get in her way, you don't always need to debate it with
her&mdash;sometimes silence is the best tactic.  If other people
agree with the complaints, they'll chime in, and it will be obvious
that something needs to change.  If no one else agrees, then the
person won't get much response, and the rules will stay as they
are.</para>

<para>Two good examples of project guidelines are the Subversion
<filename>hacking.html</filename> file, at <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, and the Apache
Software Foundation governance documents, at <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> and <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The ASF is
really a collection of software projects, legally organized as a
nonprofit corporation, so its documents tend to describe governance
procedures more than development conventions.  They're still worth
reading, though, because they represent the accumulated experience of
a lot of open source projects.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
