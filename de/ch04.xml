<chapter id="social-infrastructure">

<title>Soziale und Politische Infrastruktur</title>

<simplesect>

<para>Die erste Frage, die Leute über freie Software fragen ist für
gewöhnlich "Wie funktioniert es? Was hält ein Projekt am laufen? Wer
trifft die Entscheidungen?" Ich bin immer unzufrieden mit den faden
Antworten über Meritokratie, der Geist der Zusammenarbeit, Code der
für sich selber spricht, usw. Tatsache ist, dass die Frage nicht so
leicht zu beantworten ist. Meritokratie, Zusammenarbeit und laufender
Code sind alle ein Teil davon, aber sie tragen wenig dazu bei, zu
erklären, wie Projekte wirklich auf einer täglichen basis laufen, und
sagen nichts darüber aus wie Konflikte gelöst werden.</para>

<para>Diese Kapitel versucht die Gemeinsamen strukturellen Grundsteine
welche erfolgreiche Projekte aufzuzeigen. Mit "erfolgreich, meine ich
nicht nur im sinne technischer Qualität, sondern auch was die 
betriebliche Gesundheit und Überlebensfähigkeit angeht. Die
betriebliche Gesundheit ist die andauernde Fähigkeit des Projekts neue
Code Beiträge und Entwickler aufzunehmen, sowie auf neue Bug Meldungen
reagieren zu können. Überlebensfähigkeit ist die Fähigkeit des 
Projekts, unabhängig von irgend einem Beteiligten oder Sponsor
fortbestehen zu können&mdash;betrachten Sie es als die 
Wahrscheinlichkeit, dass das Projekt weiter gehen würde selbst wenn
alle Gründungsmitglieder ihre Sachen packen würden und sich anderen
Sachen widmen würden. Technischer Erfolg ist nicht schwer zu erreichen,
aber ohne eine robusten Entwicklerbasis, kann ein Projekt vielleicht
nicht mit dem Wachstum welches anfänglicher Erfolg bringt, oder dem
Verlust charismatischer Individuen, zurechtkommen.</para>

<para>Es gibt verschiedene Wege diesen Art Erfolg zu erreichen. Manche
beinhalten eine formale Struktur der Regierung, womit Debatten
aufgelöst werden, neue Entwickler eingeladen werden (manchmal auch
ausgeladen), neue Funktionen geplant werden, usw. Andere beinhalten
weniger formelle Strukturen, aber bewusstere Zurückhaltung, um eine
Atmosphäre der Fairness herzustellen, auf das sich Leute verlassen
können als eine so gut wie echte Regierungsform. Beide Wege führen
zum gleichen Ergebnis: Das Gefühl einer beständigen Institution, 
welches von Gewohnheiten und Abläufen unterstützt werden, die alle
Beteiligten wohl verstehen. Diese Eigenschaften sind noch wichtiger
bei selbst organisierenden Systemen als bei zentral verwalteten, da
bei selbst organisierenden Systemen, jeder sich darüber im klaren ist,
das ein paar faule Äpfel die gesamte Obstschale verderben, zumindest
eine Zeit lang.</para>

<sect1 id="forkability">
<title>Forkability</title>

<para>Der Fork (de. Gabel im sinne von Aufspaltung)
Die unabdingbare Zutat, welche Entwickler in einem freien Software
Projekt zusammenbindet, und Sie Bereitwillig macht wenn Kompromisse 
nötig einzugehen, ist die <firstterm>Forkbarkeit</firstterm> des Codes:
Die Möglichkeit von jedem, eine Kopie des Quellcodes zu nehmen und ein
konkurierendes Projekt anzufangen, bekannt als <firstterm>Fork
</firstterm>. Das paradoxe daran ist, dass die <emphasis>Möglichkeit
</emphasis> eines Forks in freien Software Projekten für gewöhnlich 
ein viel größerer Antrieb ist, als wirkliche Forks welche sehr selten
sind. Da ein Fork schlecht für alle ist (aus Gründen, die in <xref 
linkend="forks"/><phrase output="printed"> im Kapitel <xref 
linkend="managing-volunteers"/></phrase> detailiert untersucht werden),
sind mehr Beteiligte dazu bereit Kompromisse einzugehen, wenn die
Gefahr eines Forks besteht.</para>

<para>Forks, oder vielmehr potentielle Forks, sind der Grund, dass es
keine wirklichen Diktatoren in freien Software Projekten gibt. Das mag
sich nach einer Überraschenden Behauptung anhören, wenn man bedenkt wie
gängig es ist das jemand ein "Diktator" oder "Tyrann" in einem 
beliebigen Open Source Projekt genannt wird. Diese Art der Tyrannei 
ist aber besonders, recht unterschiedlich von dem gewöhnlichen 
Verständnis des Wortes. Stellen Sie sich einen König vor, dessen
Untergebenen sein Königreich jederzeit kopieren können und dort regieren
könnten wie sie es für angemessen halten. Würde solch ein König nicht
wesentlich anders regieren, als einer dessen Untergebenen an ihn
gebunden wären, egal was er tut?</para>

<para>Deshalb sind selbst Projekte die nicht formal wie Demokratien
organisiert sind, in der Praxis, Demokratien, wenn es sich um wichtige
Entscheidungen dreht. Nachbildbarkeit impliziert auch Forkbarkeit;
Forkbarkeit impliziert Konsens. Es mag sein, das jeder dazu bereit ist
auf einen Anführer zu verweisen (das bekannteste Beispiel mag Linus
Torvalds bei der Entwicklung des Linux Kernels sein), aber nur 
deshalb, weil sie es sich so <emphasis>ausgesucht</emphasis> haben, 
auf eine komplett nicht zynische oder unheimliche Art. Der Diktator
hat keinen magischen Einfluss auf das Projekt. Eine 
Schlüsseleigenschaft aller Open Source Lizenzen ist, dass sie keiner
einzelnen Partei, bezüglich Entscheidungen wie Code geändert oder 
benutzt werden kann, mehr Macht geben als einer anderen. Wenn der
Diktator plötzlich anfangen würde schlechte Entscheidungen zu treffen,
gäbe es Unruhe, letztendlich gefolgt von einem Aufstand und einem Fork.
So weit kommt es aber meißtens nicht, da der Diktator vorher 
Kompromisse eingeht.</para>

<para>Nur weil die Forkbarkeit eine obere Grenze vorgibt, wieviel
Macht jeder einzelne ausüben kann, bedeutet es aber nicht, dass es
nicht wesentliche Unterschiede gibt, wie Projekte regiert werden.
Sie wollen nicht, dass jede Entscheidung auf die Frage hinausläuft,
wer bereit ist einen Fork zu machen. Das würde sehr schnell ermüdend
werden, und Energie von echter Arbeit wegreißen. Die nächsten beiden
Abschnitte untersuchen, die verschiedenen Wege Projekte so zu 
organisieren, dass die meisten Entscheidungen reibungslos verlaufen.
Diese beiden Beispiele sind etwas idealisierte Grenzfälle; viele
Projekte fallen irgendwo zwischen ihnen.</para>

</sect1>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title>Gütige Diktatoren</title>

<para>Das Modell des <firstterm>gütigen Diktators</firstterm> ist genau
das, wonach es sich anhört: Die letztendliche Entscheidungsgewalt liegt 
bei einer Person, welcher, von dem, aufgrund seiner Persönlichkeit und 
Erfahrung, erwartet wird, dass er es weise benutzt.</para>

<para>Auch wenn der Begriff "gütige Diktator" im Englischen bekannt als
"benevolent dictator" und dort der standardmäßige Begriff für diese 
Rolle ist, wäre es besser ihn als einen von der Gemeinschaft 
anerkannten Vermittler oder Richter zu betrachten. Im Allgemeinen,
treffen gütige Diktatoren nicht alle Entscheidungen oder auch nur die
meisten Entscheidungen. Es ist sowieso unwahrscheinlich, dass eine
Person genug Kenntnisse haben könnte, um in einem gesamten Projekt
durchweg gute Entscheidungen treffen zu können. Hochwertige Entwickler
werden sich nicht lange am Projekt beteiligen, wenn sie nicht zumindest
einen Stück weit, Einfluß auf die Richtung des Projekts haben. 
Deshalb diktieren gütige Diktatoren nicht besonders viel. Statt dessen,
lassen sie wann immer Möglich die Sachen sich von alleine durch 
Diskussionen oder Erprobung erledigen. Sie nehmen selber an diesen 
Diskussionen teil, aber als gewöhnliche Entwickler, oftmals verweisen
sie auf einen Zuständigen für bestimmte Bereiche die mehr Kenntnisse
haben. Nur wenn es klar ist, dass es kein Konsens erreicht werden kann,
und das der größte Teil der Gruppe von jemandem <emphasis>will
</emphasis>, dass die Entscheidung Geleitet wird, damit die Entwicklung
weiter gehen kann, sprechen sie ein Machtwort und sagen "So wird das
jetzt gemacht". Der Widerwille Entscheidungen durch Gebote zu treffen
ist eine Wesenszug welche praktisch alle erfolgreichen gütigen 
Diktatoren teilen; es ist eines der Gründe, warum sie es schaffen diese
Rolle zu behalten.</para>

<sect2 id="benevolent-dictator-qualifications">
<title>Wer kann ein gütiger Diktator sein?</title>

<para>Ein gütiger Diktator erfordert eine Reihe von Wesenszügen. Es
bedarf erstens eine fein sinniges Gespür für den eigenen Einfluss im
Projekt, welche wiederum Zurückhaltung mit sich bringt. In den frühen
Phasen einer Diskussion, sollte man nicht seine Meinungen und 
Folgerungen mit einer solchen Sicherheit ausdrücken, dass andere das
Gefühl bekommen, dass es sinnlos ist zu widersprechen. Menschen 
sollten die Freiheit haben ihre Ideen auszudrücken, selbst blöde Ideen.
Es ist natürlich unvermeidlich, dass der gütige Diktator von Zeit zu 
Zeit eine blöde Idee abgeben wird, und die Rolle erfordert deshalb
auch die Fähigkeit zu erkennen und zu würdigen, dass man eine falsche
Entscheidung getroffen hat&mdash;wobei das ein Wesenszug ist welches
<emphasis>alle</emphasis> gut Entwickler aufweisen sollten, 
insbesondere wenn sie lange beim Projekt bleiben. Der Unterschied ist
aber, dass der gütige Diktator ohne sich über die Langzeitschäden an
ihrem Ruf all zu viele Sorgen machen zu müssen. Entwickler die nicht
so lang beteiligt sind, können sich weniger sicher fühlen, also sollte
der gütige Diktator seine Kritiken oder entgegengesetzten 
Entscheidungen mit etwas Gespür für das Gewicht seiner Worte, sowohl
technisch als auch psychologisch.</para>

<para>Der gütige Diktator muss <emphasis>nicht</emphasis> die besten
technischen Fähigkeiten von allen im Projekt haben. Er muss lediglich
gut genug sein, am Code selber zu arbeiten, und einen Kommentar zu
einer Änderung welches unter Betrachtung steht, verstehen zu können,
das ist aber auch schon alles. Die Position des gütigen Diktators kann
man sich weder aneignen, noch behalten mittels Einschüchternden
Programmierfähigkeiten. <emphasis>Wirklich</emphasis> wichtig ist
Erfahrung und einen übergreifendes Gefühl für Design&mdash;nicht
unbedingt die Fähigkeit gutes Design auf Kommando zu produzieren,
sondern die Fähigkeit sie zu erkennen, unabhängig von der Quelle.</para>

<para>Es ist verbreitet, dass der gütige Diktator auch der Gründer des
Projekts ist, was aber eher ein Zusammenhang als eine Ursache ist. Die
Qualitäten die einen ermöglichen ein Projekt erfolgreich anzufangen
&mdash;technische Kompetenz, die Fähigkeit andere überzeugen zu können
mit zu machen, usw.&mdash;sind genau die gleichen Qualitäten welche
jeder gütiger Diktator besitzen müsste. Natürlich haben die Gründer
sozusagen automatisch ein gewisses Betriebsalter, was genug sein kann
um eine gütige Diktatur, für alle Beteiligten, als den Weg des 
geringsten Widerstands erscheinen zu lassen.</para>

<para>Denken Sie daran, dass das Potential eines Forks in beiden
Richtungen geht. Ein gütiger Diktator kann genau so gut wie jeder 
andere einen Fork machen kann, und gelegentlich ist das auch passiert,
als sie das Gefühl bekamen, dass die Richtung in der sie das Projekt
führen wollten eine andere war, als die Mehrheit der anderen 
Entwickler. Aufgrund der Forkbarkeit, macht es keinen Unterschied,
ob der gütige Diktator root (de. Administrator) Zugriff auf die 
Hauptserver des Projekts hat oder nicht. Leute reden manchmal vom
Zugriff auf die Server als ob es die ultimative Quelle von Macht in
einem Projekt wäre, tatsächlich ist es aber bedeutungslos. Die 
Fähigkeit die commit Passwörter von Beteiligten hinzuzufügen oder zu
entfernen, beeinflusst nur die Kopie des Projekts welches auf dem 
Server liegt. Anhaltender Missbrauch dieser Macht, ob von dem gütigen
Diktator oder jemand anderem, würde einfach zum Umzug der Entwicklung
auf einen anderen Server führen.</para>

</sect2>

<para>Ob Ihr Projekt einen gütigen Diktator haben sollte oder besser
laufen würde mit einem zentralisierten System, hängt größtenteils 
davon ab, wer für die Rolle verfügbar ist. Als Faustregel kann man
nehmen, dass wenn es einfach offensichtlich für jeden ist, wer der
gütige Diktator sein sollte, dann ist das der richtige Weg. Wenn
aber kein Kandidat gleich offensichtlich ist, dann sollte das Projekt
wahrscheinlich ein zentralisiertes System für Entscheidungen, wie im
nächsten Abschnitt beschrieben nehmen.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>Konsens basierte Demokratie</title>

<para>Mit zunehmenden alter des Projekts, neigt man dazu weg von dem
Modell des gütigen Diktators wegzugehen, hin zu offeneren 
demokratischen Systemen. Das ist nicht zwangsläufig aufgrund von
Unzufriedenheit mit einem bestimmte gütigen Diktator. Es ist einfach
nur, dass ein Regierungssystem welches auf eine Gruppe basiert,
"evolutionär stabiler" ist, um mal eine Metapher aus der Biologie zu
entleihen. Immer dann, wann ein gütiger Diktator zurücktritt, oder
versucht die Entscheidungsgewalt gleichmäßiger zu verteilen, ist das
eine Gelegenheit für die Gruppe, sich auf ein neues nicht 
diktatorisches System zu einigen&mdash;sozusagen eine Verfassung 
einführen. Die Gruppe wird vielleicht nicht beim ersten oder zweiten
Mal diese Gelegenheit wahrnehmen, letztendlich werden sie es aber;
sobald sie es tun, ist es unwahrscheinlich, dass es jemals rückgängig
gemacht wird. Das lässt sich durch Vernunft erklären: Wenn eine Gruppe
bestehend aus N Personen in einer bestimmten Person, würde das 
bedeuten, dass N&nbsp;-&nbsp;1 Personen jeder sich damit einverstanden
erklären würde, seinen eigenen Einfluss zu verringern. Menschen wollen
das im allgemeinen. Selbst wenn sie es täten, wäre die entstandene
Diktatur trotzdem nur bedingt: Ein von der Gruppe gesalbter gütiger
Diktator, kann genau so gut von der Gruppe wieder abgesetzt werden.
Sobald ein Projekt von der Führung durch einer einzelnen charismatischen
Person, hin zu einem formaleren, System basierend auf der Gruppe, geht
es selten zurück.</para>

<para>Die Einzelheiten wie diese Systeme funktionieren variieren zwar
erheblich, es gibt aber zwei Gemeinsamkeiten: Erstens, die Gruppe
funktioniert meistens mittels Konsens; zweitens, es gibt eine formale
Einrichtung zur Abstimmung gibt, auf der man zurückgreifen kann, wenn
Konsens nicht erreicht werden kann.</para>

<para><firstterm>Konsens</firstterm> bedeutet lediglich eine 
Vereinbarung mit der jeder leben kann. Es ist kein mehrdeutiger 
Zustand: eine Gruppe had Konsens erreicht, wenn jemand vorschlägt,
dass es erreicht wurde und keiner widerspricht, und welche Tätigkeiten
als Folge daraus durchgeführt würden, wenn sie nicht schon 
offensichtlich sind.</para>

<para>Die meisten Unterhaltungen in einem Projekt sind über technische
Themen, wie der richtige Weg einen Bug zu beheben, ob eine neue 
Funktion hinzugefügt werden soll oder nicht, wie streng man 
Schnittstellen dokumentieren soll, usw. Regierungen basierend auf
Konsens funktionieren deshalb gut, da sie nahtlos mit der technischen
Diskussion selbst verläuft. Bis zum ende der Diskussion, gibt es oft
eine allgemeine Übereinstimung darüber welchen Kurs zu nehmen. Für
gewöhnlich schreibt jemand eine abschließende Nachricht was auch
gleichzeitig eine Zusammenfassung der Entscheidungen und ein
impliziter Konsens Vorschlag. Das gibt eine letzte Möglichkeit
für jemand anderes zu sagen "Warte, dazu habe ich nicht zugestimmt.
Wir müssen das noch ein wenig kleinhacken".</para>

<para>Bei kleinen nicht kontroversen Entscheidungen, ist der Konsens 
Vorschlag implizit. Wenn ein Entwickler zum Beispiel spontan einen
Bugfix committed, ist der Commit selber der Konsens Vorschlag: "Ich 
nehme an, dass wir alle darüber einstimmen, dass dieser Bug behoben
werden muss und, dass dies der Weg ist ihn zu beheben". Natürlich sagt
der Entwickler das nicht tatsächlich; Er committed nur den Fix, und
die Anderen im Projekt machen sich nicht die Mühe ihre Zustimmung zu
geben, da schweigen eine Zusage ist. Wenn jemand einen Commit macht,
bei dem sich herausstellt, dass es <emphasis>keinen</emphasis> Konsens
gab, resultiert daraus, dass die Änderung so besprochen als wäre es 
noch gar nicht committed worden. Warum das so funktioniert, ist das 
Thema des nächsten Abschnitts.</para>

<sect2 id="version-control-relaxation">
<title>Versionsverwaltung bedeutet, dass Sie sich entspannen können</title>

<para>Die Tatsache, dass der Quellcode des Projekts unter 
Versionsverwaltung gehalten wird hat zur Folge, dass die Meisten 
Entscheidungen leicht rückgängig gemacht werden können. Der häufigste
Ablauf, ist wenn jemand aus Versehen einen Commit macht, in der Annahme,
dass jeder damit glücklich wäre, nur um nachher mit Einwenden 
konfrontiert zu werden begegnen. Es ist typisch, dass solche Einwände
mit einer obligatorischen Entschuldigung anfangen, dafür dass man die
vorherige Diskussion verpasst hat, wobei man das auslassen kann, wenn
derjenige mit dem Einwand keine Aufzeichnung der Diskussion in den
Archiven des Email Verteilers findet. So oder so, gibt es keinen Grund
dass der Ton anders sein sollte nachdem die Änderung committed wurde
als davor. Jede Änderung kann rückgängig gemacht werden, zumindest
solange, bis abhängige Änderungen vorgestellt werden (wie neuer Code 
der nicht mehr funktionieren würde wenn man die Änderung plötzlich
herausnimmt). Das Versionsverwaltungssystem gibt dem Projekt eine
Möglichkeit die Auswirkungen schlechter oder übereilter Urteile 
rückgängig zu machen. Das wiederum gibt den Leuten die Freiheit ihr
Instinkte darüber zu vertrauen, wieviel Rückmeldung nötig ist bevor 
man etwas macht.</para>

<para>Das bedeutet auch, dass der Ablauf den Konsens herzustellen nicht
sonderlich formal sein muss. Die meisten Projekten handhaben es nach
Gefühl. Kleine Änderungen können ohne eine Diskussion eingebracht 
werden, oder mit minimaler Diskussion und abschließendem ab genickt
werden. Bei schwerwiegenderen Änderungen, besonders bei solchen die
eine Menge Code instabil machen könnten, sollten die Beteiligten ein
zwei Tage lang warten, vor sie annehmen das Konsens herrscht, da
niemand bei einer wichtigen Diskussion ausgelassen werden sollte, nur
weil sie nicht häufig genug ihre Emails abgerufen hat.</para>

<para>Wenn als jemand zuversichtlich ist, dass sie weiß was getan
werden muss, sollte sie einfach damit fortfahren. Das gilt nicht nur
für Bugfixes, sondern auch für Aktualisierungen an der Webseite, 
Änderungen an der Dokumentation und alles andere was wahrscheinlich 
nicht kontrovers sein wird. Für gewöhnlich gibt es nur wenige Fälle bei
denen ein Vorgang rückgängig gemacht werden muss und diese können von
Fall zu Fall behandelt werden. Natürlich sollte man Leute nicht dazu
ermutigen eigensinnig zu werden. Es gibt immer noch einen 
psychologischen Unterschied zwischen einer Entscheidung die zur Debatte
steht und eine welche bereits angewandt wurde, selbst wenn es technisch
umkehrbar ist. Menschen haben immer das Gefühl das Bewegung mit 
Entscheidung verbunden ist, und sind weniger bereit eine Änderung
rückgängig zu machen, als es von vorne herein zu verhindern. Wenn ein
Entwickler jedoch diese Tatsache missbraucht, indem er eine 
möglicherweise Kontroverse Änderung zu schnell committed, können und
sollten Leute sich beschweren und dem Entwickler engere Grenzen 
setzen, bis sich die Lage verbessert.</para>

</sect2>

<sect2 id="voting">
<title>Stimme ab, wenn Konsens nicht erreicht werden kann</title>

<para>Manche Debatten werden zwangsläufig nicht in Konsens enden.
Wenn alle anderen Möglichkeiten einen Stillstand aufzulösen 
fehlschlagen, ist die Lösung darüber abzustimmen. Vor eine Abstimmung
aber stattfinden kann, muss es eine klare Auswahl auf dem Stimmzettel
geben. Auch hier verläuft die technische Diskussion wieder glücklich 
mit den Entscheidungsabläufen des Projekts. Die Art von Fragen welche
zu einer Abstimmung führen haben oftmals mit komplexe mehrschichtige
Angelegenheiten zu tun. Bei jeder solche komplexe Entscheidung gibt
es meistens ein oder zwei Personen welche die Rolle des <firstterm>
ehrlichen Marklers</firstterm>: Sie fassen periodisch die verschiedenen
Argumente und behalten den Überblick über die Zentralen 
Meinungsverschiedenheiten (und Übereinstimmungen). Diese 
Zusammenfassungen helfen allen dabei feststellen zu können, wieviel
Fortschritt gemacht wurde, und erinnern alle daran welche Punkte noch
offen sind. Selbige Zusammenfassungen dienen als Prototypen für die
Stimmzettel, sollte eine Wahl nötig werden. Wenn die ehrlichen Markler
ihre Arbeit gut gemacht haben, werden Sie glaubhaft eine Wahl halten
können, wenn es dafür Zeit dafür wird, und die Gruppe wird diese 
Stimmzettel akzeptieren, auf der Basis dieser Zusammenfassung der
offenen Punkte. Die Markler können an der Debatte Teilnehmen; es ist
nicht nötig, dass sie sich aus dem Schlachtgetümmel heraushalten,
solange sie die Ansichten Anderer verstehen und angemessen 
repräsentieren können, und die Meinungen ihrer Partei Sie nicht
daran hinder den Zustand der Debatte auf eine neutrale Art 
Zusammenzufassen.</para>

<para>Der tatsächliche Inhalt des Stimmzettels ist normalerweise nicht
kontrovers. Bis es zu einer Wahl kommt, hat sich die 
Meinungsverschiedenheit auf ein paar Kernpunkte reduziert, mit
erkennbaren Namen und kurzen Beschreibungen. Ab und zu wird ein
Entwickler die Form des Stimmzettels beanstanden. Manchmal sind diese
Bedenken gerechtfertigt, zum Beispiel wenn eine Wichtige Wahl auf dem
Stimmzettel ausgelassen wurde oder nicht richtig beschrieben wurde.
Zuweilen kann ein Entwickler aber auch lediglich die Absicht haben,
das Unausweichliche hinauszuschieben, vielleicht mit dem Wissen, dass
die Wahl nicht zu seinem Gunsten ausfallen wird. <xref 
linkend="difficult-people"/><phrase output="printed"> im Kapitel <xref
linkend="communications"/></phrase> beinhaltet eine Anleitung, wie man
mit dieser art vom Quertreibern umgehen kann.</para>

<para>Denken Sie daran die Art der Wahl zu spezifizieren, da es viele
Verschiedene gibt, und Leute könnten falsche Annahmen darüber treffen,
welcher Ablauf benutzt wird. In den meisten Fällen ist eine <firstterm>
Wahl durch Zustimmung</firstterm> eine gute Entscheidung, bei der jeder
Wähler für so viele der Kandidaten auf den Stimmzettel stimmen kann
wie er möchte. Wahlen durch Zustimmung sind einfach zu erklären und 
auszuzählen, und im Gegensatz zu anderen Wahlsystemen erfordern sie 
nur einen Wahlgang. Siehe <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> für
weitere Details über Wahlen durch Zustimmung. Versuchen Sie sich aber
nicht zu einer Debatte darüber welches Wahlsystem zu nutzen verleiten 
zu lassen (dann stünden Sie natürlich vor einer Debatte welches
Wahlsystem zu nutzen um über das Wahlsystem abzustimmen!). Ein Grund
weßhalb Wahlen durch Zustimmung eine Gute Wahl ist, dass es sehr
wenig an ihnen gibt, was man beanstanden könnten&mdash;es ist etwa so
gerecht wie ein Wahlsystem sein kann.</para>

<para>Zuletzt, halten Sie die Wahlen öffentlich. Es gibt keinen
Grund für Geheimhaltung oder Anonymität bei einer Wahl die sowieso
öffentlich debattiert wurde. Lassen Sie jeden Beteiligten seine 
Stimmen an den Email Verteiler schicken, damit jeder Beobachter 
selber die Ergebnisse nachrechnen und überprüfen kann, und damit
alles in den Archiven aufgezeichnet wird.</para>

</sect2>

<sect2 id="when-to-vote">
<title>Wann Abzustimmen</title>

<para>Das schwerste bei Wahlen, ist zu bestimmen wann es dafür Zeit
ist. Im allgemeinen, sollten Wahlen sehr selten sein&mdash;als letztes
Mittel, wenn alle anderen Möglichkeiten fehlgeschlagen sind. Betrachten
Sie Wahlen nicht als eine tolle Möglichkeit Debatten zu lösen. Das ist
es nicht. Sie beenden Diskussionen, und beenden dadurch kreative
Überlegungen zu dem Problem. So lange die Diskussion weitergeht, gibt
es die Möglichkeit, dass jemand an eine neue Lösung denken wird, 
welches allen gefällt. Das geschieht überraschend oft: Eine lebhafte
Debatte kann zu einer neuen Art über das Problem zu denken führen, und
letztendlich zu einer Lösung führen, welches alle zufriedenstellt. 
Selbst wenn kein Vorschlag auftaucht, ist es für gewöhnlich trotzdem
besser einen Kompromiss auszuhandeln als eine Wahl zu halten. Nach 
einem Kompromiss, ist jeder ein wenig unglücklich, im Gegensatz zu
Wahlen bei denen manch unglücklich sind, während andere glücklich sind.
Aus einem politischen Standpunkt, ist erstere Situation vorzuziehen:
Zumindest bekommt jeder das Gefühl, etwas aus seiner Unzufriedenheit
herausgeholt zu haben. Er mag unzufrieden sein, aber alle anderen sind
es auch.</para>

<para>Der Hauptvorteil bei Abstimmungen ist, dass es endlich eine
Frage erledigt, damit alle weitergehen können. Es erledigt es aber
durch das Zählen von Köpfen, anstatt durch einen vernünftigen Dialog
welches alle zum selben Ergebnis führt. Je erfahrener die Leute mit
Open Source Projekten sind, desto weniger begierig finde ich sie
Fragen durch Wahlen zu erledigen. Statt dessen, werden Sie versuchen
vorher nicht in Erwägung gezogene Lösungen zu erkunden, oder größere
Kompromisse einzugehen, als sie ursprünglich geplant hatten. Es gibt
verschiedene Möglichkeiten um eine voreilige Wahl zu verhindern. Die
Offensichtlichste ist einfach zu sagen, "Ich denke nicht, das wir
schon bereit für eine Wahl sind," und zu erklären warum. Eine weitere
ist, nach einer informellen (nicht bindenden) heben von Händen zu
fragen. Wenn die Reaktion klar in die eine oder andere Richtung
tendiert, wird es manche plötzlich eher dazu bereit machen Kompromisse
einzugehen, und die Notwendigkeit einer formelle Wahl vorbeugen. Die
effektivste Lösung ist aber einfach eine neue Lösung anzubieten, oder
eine neue Sicht auf einen alten Vorschlag, damit Leute sich erneut mit
dem Sachverhalt befassen, anstatt lediglich die gleichen Argumente zu
wiederholen.</para>

<para>In bestimmte seltenen Fällen, werden vielleicht alle darüber
einstimmen, dass alle Kompromisslösungen schlimmer sind als irgend
eines der nicht auf Kompromisse basierenden. Wenn das geschieht, gibt
es weniger an einer Abstimmung auszusetzen, sowohl weil es 
wahrscheinlich zu einer besseren Lösung führt als auch weil die
Beteiligten nicht sonderlich unglücklich mit der Lösung sein werden,
egal wie es ausgeht. Auch dann sollte die Wahl nicht gedrängt werden.
Die Diskussion die der Wahl vorausgeht ist es, was die Wählerschaft 
belehrt, also kann ein frühes Ende dieser Diskussion die Qualität des
Ergebnisses verringern.</para>

<para>(Denken Sie daran, dass diese Empfehlung widerwillig Wahlen
auszurufen nicht für Wahlen über die Aufnahme von Änderungen gilt,
welches in <xref linkend="stabilizing-a-release"/><phrase
output="printed"> im Kapitel <xref linkend="development-cycle"/>
</phrase> beschrieben ist. Dort sind Wahlen eher ein Mittel zur
Kommunikation, eine Möglichkeit seine Beteiligung an der Überprüfung
einer Änderung kund zu tun, damit alle erkennen können, wie sehr
eine Änderung überprüft wurde).</para>

</sect2>

<sect2 id="electorate">
<title>Wer wählt?</title>

<para>Wenn man ein Wahlsystem hat, stellt sich die Frage nach der
Wählerschaft: Wer darf wählen? Das hat das Potential eine
sensible Frage zu sein, da es das Projekt dazu zwingt offiziell
manche Personen anzuerkennen, da sie mehr beteiligt sind oder ein
besseres Urteilsvermögen haben als andere.</para>

<para>Die beste Lösung ist einfach eine vorhandene Unterscheidung wie
der commit Zugriff zu nehmen, und daran das Wahlrecht festzumachen.
Bei Projekten welche sowohl vollen als auch teilweisen commit Zugriff
anbieten, hängt die Frage ob solche mit geringerem Zugriff wählen
können, größtenteils von dem Ablauf ab mit dem die Zugriffsrechte
gewährt werden. Wenn ein Projekt sie freizügig austeilt, zum Beispiel
um eine Vielzahl an Programmen von dritten Parteien in dem Repository
zu pflegen, solle es klar gestellt werden, dass es bei eingeschränkten
commit Berechtigung wirklich nur ums committen geht und nicht um die
Wahlberechtigung. Die umgekehrte Implikation gilt natürlich auch: da
vollberechtigte Committer wahlberechtigt sein werden, müssen sie nicht
nur als Programmierer, sondern als Mitglieder der Wählerschaft
ausgesucht werden. Wenn jemand auf dem Email Verteiler Tendenzen zeigt
Unruhe zu stiften oder Behinderungen zu verursachen, sollte die Gruppe
sehr vorsichtig damit sein Ihm commit Berechtigungen zu geben, selbst
wenn diese Person technisch begabt ist.</para>

<para>Das Wahlsystem selbst sollte benutzt werden, um neue Commiter
zu Wählen, sowohl eingeschränkte als auch volle. Hierbei haben wir
allerdings einer der wenigen Stellen an denen Geheimhaltung 
angemessen ist. Sie können keine Wahlen über potentielle Committer
auf dem öffentlichen Email Verteiler halten, da es die Gefühle (und
den Ruf) des Kandidaten verletzen könnte. Statt dessen, ist der
normale Weg, dass ein vorhandener Committer an einen privaten
Verteiler schreiben, welches lediglich aus den anderen Commiter 
besteht, mit dem Vorschlag, das jemand Commit Zugriff bekommt. Die
anderen Committer geben ihre ehrliche Meinung, mit dem wissen, dass
die Diskussion privat ist. Oft wird es keinen Einspruch geben, und eine
Wahl ist nicht notwendig. Nachdem man ein paar Tage gewartet hat, um
allen Committern genügend Zeit um zu reagieren zu geben, wird der
Antragsteller dem neuen Kandidaten eine Email schicken und ihm commit
Zugriff anbieten. Wenn es Einwände gibt, wird wie bei jeder anderen
Frage eine Diskussion entstehen die möglicherweise mit einer 
Abstimmung endet. Damit diese Diskussion offen und ehrlich vor sich
geht, sollte die bloße Tatsache das sie stattfindet geheim gehalten
werden. Wenn die Person die in Betracht gezogen wird wüsste was vor
sich geht, und niemals Commit Zugriff angeboten bekommen würde, könnte
er daraus schließen, dass er die Wahl verloren hat, und wäre 
wahrscheinlich gekränkt. Wenn jemand natürlich explizit nach Commit
Zugriff fragt, dann gibt es keine andere Möglichkeit als den Vorschlag
in Betracht zu ziehen und ihn entweder anzunehmen oder abzuweisen. Wenn
letzteres der Fall ist, dann sollte es so höflich wie möglich 
verlaufen, mit einer eindeutigen Erklärung: "Wir mögen deine Patches,
haben aber von ihnen bisher nicht genug gesehen", oder "Wir mögen
deine Patches, mussten aber wesentliche Anpassungen an ihnen machen,
damit sie angewandt werden konnten, also fühlen wir uns noch nicht Wohl
dabei, dir derzeit Commit Zugriff zu geben. Wir hoffen allerdings, dass
sich das mit der Zeit ändert". Bedenken Sie, dass was Sie sagen der
Person einen Schlag versetzen könnte je nachdem wie Selbstsicher er 
ist. Versuchen Sie es aus ihrer Sicht zu sehen wenn Sie die Email 
schreiben.</para>

<para>Da es eine schwerwiegendere Entscheidung ist einen neuen 
Committer aufzunehmen als die meisten anderen einmaligen 
Entscheidungen, haben manche Projekte besondere Anforderungen für
solche Abstimmungen. Zum Beispiel, kann es erforderlich sein, dass es
<emphasis>n</emphasis> Stimmen für und keine gegen den Kandidaten 
bekommt, oder dass eine Qualifizierte Mehrheit zustimmt. Die genaue
Grenze ist nicht wichtig; die Grundidee ist, die Gruppe bei der 
Aufnahme Vorsicht walten zu lassen. Ähnliche, oder noch strengere,
besondere Anforderungen können bei Abstimmungen zu der <emphasis>
Entfernung</emphasis> eines Committers, obgleich das hoffentlich
niemals nötig sein wird. Siehe <xref linkend="committers"/><phrase
output="printed"> im Kapitel <xref linkend="managing-volunteers"/>
</phrase> für weiteres im Bezug auf Aspekte bei der Aufnahme und 
Entfernung von Committern welche nicht mit Abstimmungen zu tun
haben.</para>

</sect2>

<sect2 id="polls">
<title>Meinungsumfragen Contra Abstimmung</title>

<para>Für bestimmte Arten von Abstimmungen, kann es nützlich sein den
Wahlkreis auszuweiten. Zum Beispiel, wenn die Entwickler einfach nicht
herausbekommen ob eine bestimmte Schnittstellenwahl zu der Art wie
Leute die Software tatsächlich nutzen passt, ist eine Lösung, die
Angemeldeten auf dem Email Verteiler des Projekts darüber abstimmen zu
lassen. Diese sind in Wirklichkeit eher <firstterm>Meinungsumfragen
</firstterm> als Abstimmungen, aber die Entwickler können wenn sie 
wollen die Ergebnisse als bindend betrachten. Wie bei jeder 
Meinungsumfrage, erklären Sie den Beteiligten, dass es eine Möglichkeit
gibt Vorschläge zu machen: Wenn jemand an eine bessere Wahl denkt, die
nicht bei der Umfrage angeboten wird, kann ihre Reaktion sich als das
wichtigste Ergebnis der Umfrage herausstellen.</para>

</sect2>

<sect2 id="veto">
<title>Vetos</title>

<para>Manche Projekte erlauben eine bestimmte Art von stimme, bekannt 
als <firstterm>Veto</firstterm>. Ein Veto ist ein Weg für einen
Entwickler eine übereilte oder schlecht überlegte Änderung anzuhalten,
zumindest lange genug, damit alle es mehr diskutieren. Sie können ein
Veto irgendwo zwischen einem starken Einspruch und handfeste Obstruktion
einordnen. Seien genaue Bedeutung unterscheidet sich von einem Projekt
zu anderen. Manche Projekte machen es sehr schwer ein Veto aufzuheben;
andere erlauben, dass sie durch eine gewöhnliche Mehrheit aufgehoben
werden, etwa nach einer erzwungenen Verzögerung für weitere Diskussion.
Jedes Veto sollte von einer ausführliche Erklärung begleitet werden;
ein Veto ohne eine solche Erklärung sollte gleich als ungültig 
erachtet werden.</para>

<para>Mit Vetos kommt das Problem des Missbrauchs. Manchmal sind
Entwickler zu begierig den Einsatz zu erhöhen indem Sie ein Veto
aussprechen. Sie können den Missbrauch von Vetos verhindern, indem
Sie sie selber nur widerstreben einsetzen, und dadurch, dass Sie
sanft darauf hinweisen wenn jemand anderes ihr Veto zu oft benutzt.
Falls nötig, können Sie die Gruppe auch daran erinnern, dass Vetos
nur so lange bindend sind, wie die Gruppe sich einig ist, dass sie
es sind&mdash; denn letzten Endes wird sich Änderung X durchsetzten,
wenn eine klare Mehrheit der Entwickler X machen will. Entweder zieht
der Entwickler sein Veto zurück, oder die Gruppe wird sich 
entschließen die Bedeutung des Vetos zu verringern.</para>

<para>Sie werden Leute vielleicht "-1" schreiben sehen, um ein Veto
auszudrücken. Diese Nutzung kommt aus dem Apache Software Foundation,
welche eine im hohen Maße strukturierten Ablauf für Abstimmungen und
Vetos hat, welches bei <ulink
url="http://www.apache.org/foundation/voting.html"/> beschrieben ist. 
Die Apache Normen haben sich auf andere Projekte verbreitet, und Sie
werden ihre Konventionen in unterschiedlichem Maße an vielen Stellen
in der Open Source Welt in Verwendung sehen. Technisch gesehen, 
bedeutet "-1" nicht immer ein formelles Veto, selbst nach den Apache
Normen, informell wird es jedoch für gewöhnlich als Veto betrachtet,
oder zumindest als starken Einspruch.</para>

<para>Wie Stimmen bei einer Wahl, können Vetos auch im Nachhinein
ausgesprochen werden. Es ist nicht in Ordnung einem Veto zu 
widersprechen, mit der Begründung, dass die Änderung die zur Debatte
steht bereits committed wurde oder die Aktion bereits getätigt wurden
(es sei denn es handelt sich um etwas unumkehrbares, wie eine 
Pressemitteilung). Andererseits, wird ein Veto welches Wochen oder
Monate später ankommt wahrscheinlich nicht sonderlich Ernst genommen,
noch sollte es das werden.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>Alles Niederschreiben</title>

<para>Irgendwann wird die Anzahl der Vereinbarungen und Übereinkünfte
die in Ihrem Projekt umhergehen, derart groß werden, dass sie irgendwo
aufgezeichnet werden müssen. Damit ein solches Dokument Rechtmäßig ist,
sollten Sie klarstellen, dass es auf Diskussionen und Vereinbarungen
auf den Email Verteiler basiert, die bereits in Kraft sind. Wenn Sie es
zusammenstellen, verweisen Sie auf die relevanten Threads in den 
Archiven und immer wann Sie an einem Punkt ankommen, bei dem Sie sich 
nicht sicher sind, Fragen Sie nochmal nach. Das Dokument sollte keine
Überraschungen enthalten: Es ist keine Quelle von Vereinbarungen 
sondern lediglich eine Beschreibung derer. Wenn es erfolgreich ist,
werden Leute natürlich anfangen es zu Zitieren, als einen Quelle von
Autorität in sich selbst, was aber nur bedeutet, dass es den 
allgemeinen Wille der Gruppe zutreffend widerspiegelt.</para>

<para>Dieses ist das Dokument, welches in <xref
linkend="developer-guidelines"/><phrase output="printed"> im Kapitel 
<xref linkend="getting-started"/></phrase> angespielt wird. Wenn das
Projekt noch sehr Jung ist, werden Sie selbstverständlich die 
Richtlinien auslegen müssen, ohne den Vorteil einer langen Historie im
Projekt, auf das Sie sich beziehen können. Mit der Reifung der
Entwicklungergemeinschaft, können sie die Sprache anpassen um wieder zu
spiegeln welche Abläufe sich tatsächlich Entwickelt haben.</para>

<para>Versuchen Sie nicht alles abzudecken. Kein Dokument kann alles
umfasse was Leute wissen müssen um an einem Projekt teilzunehmen. 
Viele der Konventionen die ein Projekt entwickelt werden nie 
ausgesprochen, niemals explizit erwähnt, und würden von dem wichtigen
aber nicht offensichtlichem Material ablenken. Es hat zum Beispiel
keinen Sinn Richtlinien wie folgende zu schreiben "Seien Sie höflich
und respektvoll zu anderen auf dem Email Verteiler, und fangen Sie
keine Flamewars an", oder "Schreiben Sie sauberen, lesbaren bugfreien
Code".  Diese Sachen sind natürlich wünschenswert, da es allerdings
kein denkbares Universum gibt, indem sie <emphasis>nicht<emphasis> 
wünschenswert wären, machet es keinen Sinn sie zu erwähnen. Wenn Leute
auf dem Email Verteiler unhöflich sind, oder bugbehafteten Code 
schreiben, dann werden sie nicht damit aufhören, nur weil es die 
Richtlinien des Projekts es vorschreiben. Mit solchen Situationen muss
umgehen, während sie aufkommen, nicht mittels pauschalen Ermahnungen
sich gut zu benehmen. Wenn das Projekt andererseits spezifische
Richtlinien hat <emphasis>wie</emphasis> man guten Code schreibt,
wie Regeln über die Dokumentation jeder API in einem bestimmten
Format, dann sollten diese Richtlinien so vollständig wie möglich
niedergeschrieben werden.</para>

<para>Eine gute Möglichkeit zu bestimmen was man mit einbeziehen sollte
ist, das Dokument auf die Fragen zu basieren, welche Neuankömmlinge 
stellen sowie die Beschwerden, die Entwickler am häufigsten begegnen.
Das bedeutet nicht zwangsläufig, dass es zu einer FAQ werden sollte
&mdash;es braucht wahrscheinlich eher eine kohärente erzählerische
Struktur, als eine FAQ anbieten kann. Es sollte aber das selbe Realität
basierende Prinzip befolgen, Themen zu behandeln, die auch wirklich
auftauchen, eher als solche von denen Sie annehmen, dass sie auftauchen
würden.</para>

<para>Wenn ein Projekt eine gütige Diktatur ist, oder Mitglieder hat,
die mit besonderen Vollmachten ausgestattet sind (Präsidenten, 
Vorsitzende, was auch immer), dann ist das Dokument auch eine gute 
Gelegenheit den Ablauf für Nachfolger festzulegen. Manchmal kann das
so einfach sein wie bestimmte Personen als Ersatz zu benennen, sollte
der gütige Diktator das Projekt aus irgend einem Grund verlassen.
Im allgemeinen, wenn es einen gütigen Diktator gibt, kann nur der
Diktator selber damit durchkommen einen Nachfolger zu benennen. Wenn
es Gewählte Vorstandsmitglieder hat, dann sollten die gleichen 
Wahl Abläufe die bei ihrer Wahl verwendet wurden in dem Dokument 
beschrieben werden. Wenn es ursprünglich keinen Ablauf gab, dann 
sollten Sie Konsens zu einen bestimmten Ablauf, auf dem Email
Verteiler suchen, <emphasis>vor</emphasis> Sie darüber schreiben.
Menschen können empfindlich sein, was hierarchische Strukturen 
angeht.</para>

<para>Das wichtigste ist es vielleicht, klar zu stellen, dass die Regeln
überdacht werden können. Wenn die Konventionen in dem Dokument anfangen
das Projekt zu behindern, erinnern Sie alle daran, dass es ein Lebendes
Spiegelbild von den Absichten der Gruppe sein soll, und nicht eine
Quelle von Frustration und Blockierung. Wenn jemand eine Gewohnheit 
daraus macht, immer dann wann die Regeln ihr in den Weg stehen, 
unangebracht darum zu bitten, dass Sie neu überdacht werden sollten
&mdash;ist Schweigen manchmal die beste Taktik. Wenn andere mit den
Beschwerden übereinstimmen, werden sie auch das Wort ergreifen, und
es wird offensichtlich sein, dass sich etwas ändern muss. Wenn sonst
keiner zustimmt, dann wird die Person nicht sonderlich viel Resonanz
erhalten, und die Regeln werden bei dem bleiben was sie sind.</para>

<para>Zwei gute Beispiele für Projekt Richtlinien sind die Subversion
Datei <filename>hacking.html</filename>, bei <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, und
die Dokumente über Regierung der Apache Software Foundation bei <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> und <ulink
url="http://www.apache.org/foundation/voting.html"/>. Die ASF ist in
Wirklichkeit eine Sammlung von Software Projekten, die rechtlich als
eine Gemeinnützige Organisation gruppiert sind, als tendieren ihre
Dokumente eher dazu Regierungsabläufe als Entwickler Konventionen zu
beschreiben. Sie sind es trotzdem wert gelesen zu werden, da sie die
angehäufte Erfahrung einer Vielzahl an Open Source Projekten 
repräsentieren.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
