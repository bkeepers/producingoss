<chapter id="getting-started">

<title>Der Einstieg</title>

<simplesect>

<para>Der klassische Verlauf vom Anfang eines freien Software Projektes
beschreibt Eric Raymond in seinem nunmehr berühmten Text über Open Source,
<citetitle>The Cathedral and the Bazaar</citetitle>:</para>

    <blockquote>
      <para><emphasis>Jede gute Software entsteht aus einem persönlichen
        Bedürfnis eines Programmierers.</emphasis></para>

      <para>(von <emphasis role="bold">
        <ulink url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Raymond sagte wohlgemerkt nicht, dass Open Source Projekte nur aus
dem Persönlichen Bedürfnis eines Programmierers entsteht, sondern dass
<emphasis>gute</emphasis> Software dann entsteht, wenn der Programmiere
ein persönliches Interesse daran hat, ein Problem zu lösen; was insofern
für freie Software relevant ist, da es sich herausstellte, dass die
meisten Open Source Projekte, von Programmierern angefangen wurden, die
eines ihrer eigenen Probleme lösen wollten.</para>

<para>Die Motivation für die meisten freien Software Projekte ist auch
heute noch dieselbe, wenn auch etwas weniger als 1997, zu der Zeit als
Raymond diese Worte schrieb. Heute haben wir das Phänomen, dass 
Organisationen &mdash;auch profit-orientierte Firmen&mdash;große, zentral
organisierte Open Source Projekte anfangen. Der einsame Programmierer
der ein bisschen Code produziert um ein lokales Problem zu lösen um dann
festzustellen, dass das Ergebnis eine breitere Anwendbarkeit hat, ist 
immer noch die Quelle einer Menge freier Software, es ist aber nicht
mehr die Einzige.</para>

<para>Die Argumentation von Raymond ist aber immer noch Aufschlussreich.
Diejenigen die Software Produzieren, müssen ein direktes Interesse an
seinem Erfolg haben, weil sie auch Benutzer sind. Wenn die Software nicht
macht was es soll, wird die Person oder Organisation die sie produziert,
es bei der täglichen Arbeit merken. Ein gutes Beispiel ist das OpenAdapter
Projekt (<ulink url="http://www.openadapter.org/"/>), von der 
Investmentbank Dresdner Kleinwort Wasserstein, dass als Open Source 
Framework zur Integration unterschiedlicher finanzieller Informationssysteme 
angefangen wurde, kann wohl kaum als Bedürfnis eines eines einzelnen 
Programmierers bezeichnet werden, sondern als institutionelles 
Bedürfnis. Dieses Bedürfnis, entsteht aber direkt aus den Erfahrungen
der Institution und ihrer Partner, wenn die Software ihre Aufgabe nicht
erfüllt, kriegen sie es also mit. Aus diesem Arrangement entsteht gute
Software, da Rückmeldungen an den richtigen Stellen ankommen. Die 
Software muss nicht verkauft werden, also können sie sich auf
<emphasis>ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben
um ihre <emphasis>eigene</emphasis> Probleme zu lösen, um es dann mit 
allen zu teilen. Es ist so ähnlich, als wäre das Problem eine Krankheit
und die Software die entsprechende Medizin, mit dem Sinn eine Epidemie
auszurotten.</para>

<para>In diesem Kapitel geht es um die Frage, wie man ein neues freies
Software Projekt der Welt vorstellt. Viele seiner Empfehlungen würden
aber einer Medizinischen Organisation, bekannt vorkommen. Die Ziele 
sind sich sehr ähnlich: Man will klarstellen was die Medizin macht, es
in die Hände der richtigen Leute bringen, und sicherstellen, dass 
diejenigen die es erhalten, wissen damit umzugehen. Bei der freier
Software will man aber auch ein paar der Empfänger zu einer Beteiligung
an der fortwährenden Forschungsarbeit, zur Verbesserung der Medizin
bewegen.</para>

<para>Beim Vertrieb freier Software gibt es zwei Ziele. Die Software
muss sowohl Nutzer als auch Entwickler anziehen. Diese beiden 
Anforderungen stehen einander nicht zwangsläufig gegenüber, aber sie 
machen die anfänglichen Präsentation des Projekts, etwas komplexer. 
Manche Informationen sind für beide Gruppen nützlich, manche nur für 
die eine oder die andere. Beide Arten der Information sollten das 
Prinzip der skalierenden Präsentation verfolgen; d.h. dass die Menge an
Informationen sich jederzeit mit der Zeit und Anstrengung decken sollte,
die vom Leser aufgebracht wird. Eine größere Anstrengung sollt auch 
immer eine größere Belohnung mit sich bringen. Wenn beide nicht eng
miteinander korrelieren, werden die Leser schnell die Hoffnung aufgeben
und aufhören ihre Zeit zu investieren.</para>

<para>Daraus folgt, <emphasis>das Erscheinungsbild ist 
wichtig</emphasis>. Programmierern fällt es besonders schwer, das zu
glauben. Ihre Liebe zum Inhalt gegenüber seinem Aussehen, gehört fast
schon zum Berufsethos. Es ist kein Zufall, dass so viele Programmierer
gegen Marketing und Public Relations eine Antipathie hegen, oder dass
professionelle Grafiker über manches erschrocken sind, worauf 
Programmierer von alleine kommen.</para>

<para>Das ist schade, denn es gibt Situationen, bei denen das Aussehen
auch <emphasis>wirklich</emphasis> dem Inhalt entspricht. Die 
Präsentation eines Projekts, ist genau solch ein Fall. Die erste
Information die ein Besucher über ein Projekt erfährt, ist das Aussehen
seiner Webseite. Diese Information wird erfasst, bevor irgend ein
tatsächlicher Inhalt der Seite verstanden wird&mdash;bevor irgendein 
Text gelesen wurde oder auf irgendein Links geklickt wurde. Egal wie
ungerecht es sein mag, Leute können sich nicht anders helfen, als sich
sofort einen ersten Eindruck zu verschaffen. Das Erscheinungsbild der
Seite deutet darauf hin, ob man sich beim Aufbau der Präsentation des
Projekts mühe gemacht hat. Menschen haben eine extrem sensible Antenne
dafür wieviel Mühe in etwas investiert wurde. Die meisten können mit
einem Blick erkennen ob eine Seite eilig zusammengebastelt wurde oder
ob man sich ernsthafte Gedanken gemacht hat. Das ist die Erste 
Information die Ihr Projekt nach außen gibt, und der dadurch 
vermittelte Eindruck, übertragt sich auf das übrige Projekt.</para>

<para>Sie sollten deshalb daran denken, auch wenn das Thema in diesem
Kapitel sich um Inhaltliches dreht, das Erscheinungsbild ist auch
wichtig. Da die Webseite für zwei Arten von Besucher geeignet sein
muss&mdash;Nutzer und Entwickler&mdash;muss besonders auf Klarheit und
Führung geachtet werden. Auch wenn hier nicht die richtige Stelle für
eine allgemeine Abhandlung über Web-Design ist, gibt es ein
erwähnenswertes Prinzip, insbesondere wenn die Seite mehrere(falls 
Überlappende) Zielgruppen ansprechen soll: Besucher sollten eine grobe
Vorstellung haben, wo ein Link hinführt, bevor sie darauf klicken. Das
Ziel, von einem Link zur Dokumentation für Benutzer, sollte 
<emphasis>alleine vom Anblick</emphasis> deutlich sein, und keine
Missverständnisse aufkommen lassen, ob es nicht etwa zur Dokumentation
für Entwickler führt. Beim betrieb eines Projekts, geht es zum Teil
darum Informationen bereitzustellen, aber auch darum ein Gefühl der
Behaglichkeit anzubieten. Allein schon die Verfügbarkeit bestimmter
grundsätzlicher Angebote an den richtigen Stellen, gibt Benutzer und
Entwickler eine Sicherheit, bei ihrer Entscheidung, ob sie sich 
beteiligen wollen oder nicht. Es sagt ihnen, das Projekt hat seine
Sachen beisammen, Fragen die gestellt werden erahnt hat und sich die
Mühe macht sie so zu beantworten, dass Leute mit Fragen möglichst wenig
Einsatz aufbringen müssen. Indem das Projekt eine Aura ausstrahlt, 
vorbereitet zu sein, sendet es folgende Botschaft nach außen: "Du
verschwendest deine Zeit nicht, wenn du dich beteiligst", und das ist
genau die Botschaft, die sie hören müssen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Schauen Sie sich Vorher Um</title>

<para>Vor Sie ein Open Source Projekt anfangen, gibt es noch einen 
wichtige Warnung:</para>

<para>Schauen Sie sich vorher um, ob nicht schon ein Projekt existiert,
das ihre Anforderungen erfüllt. Die Wahrscheinlichkeit ist hoch, dass
unabhängig von dem Problem das Sie lösen wollen, ihnen jemand zuvor
gekommen ist. Wenn das der Fall ist und ihr Code unter einer freien
Lizenz gestellt wurde, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Außnahmen: Falls sie ein Projekt als Lehr-Erfahrung 
anfangen wollen, wird Ihnen bereits existierender Code nicht 
weiterhelfen. Vielleicht wissen Sie bereits von vornherein, dass Ihr
Problem so spezifisch ist, dass es mit Sicherheit noch von keinem
gelöst wurde. Im allgemeinen gibt es aber keinen Grund sich nicht 
umzuschauen und der Lohn kann beträchtlich sein. Sollten die üblichen 
Suchmaschinen keine brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über Open
Source Projekte (zu dieser Seite, später mehr), bei 
<ulink url="http://www.sourceforge.net/"/>, oder beim Verzeichnis 
freier Software der Free Software Foundation 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas derart ähnliches finden, dass es sinnvoller ist
sich an diesem Projekt zu Beteiligen und es um die fehlende Funktionen
zu erweitern, als komplett von vorne anzufangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Mit dem Vorhandenen anfangen</title>

<para>Sie haben sich umgeschaut, herausgefunden dass nichts ihre 
Anforderungen erfüllt und haben sich entschlossen, ein neues Projekt
anzufangen.</para>

<para>Was jetzt?</para>

<para>Das schwerste bei der Gründung eines neuen freien Software
Projekts ist, die eigene Vision in eine öffentliche zu verwandeln. Sie
oder Ihre Organisation mögen sehr wohl wissen was Sie wollen. Dieses
Ziel so auszudrücken, dass die Welt es versteht, ist wenn auch eine 
beträchtliche Menge Arbeit, trotzdem unabdingbar. Sie und die anderen
Gründer müssen entscheiden worum es in dem Projekt wirklich geht, bzw.
Sie müssen sowohl über seine Grenzen entscheiden&mdash;was es 
<emphasis>nicht</emphasis> machen wird, als auch was es wirklich 
machen wird&mdash;und ein Missionsziel verfassen. Dieser Teil ist für
gewöhnlich nicht allzu schwer, auch wenn es manchmal unerwähnt 
gebliebene Annahmen, sogar Meinungsverschiedenheiten über die Natur des
Projekts aufdecken kann, was aber nicht unbedingt schlecht sein
muss: Es ist besser diese jetzt aus dem Weg zu Räumen als später. Der
nächste Schritt, ist das Projekt für den öffentlichen verzehr
aufzubereiten, was im Prinzip reine Plackerei ist.</para>

<para>Diese Arbeit ist deshalb so mühselig, weil es hauptsächlich 
darum geht Sachen zu organisieren und zu dokumentieren, die jeder schon
kennt&mdash;d.h "jeder" der bisher beteiligt war. Für diejenigen die
die Arbeit machen, gibt es deshalb keinen direkten Nutzen. Sie
brauchen keine <filename>README</filename> Datei für einen Überblick
über das Projekt, oder ein Dokument über sein Aufbau oder ein Handbuch
der Software. Sie brauchen kein sorgsam aufbereiteten Code der mit den,
zwar informell, aber weit verbreiteten Normen für die Veröffentlichung
von Quellcode, konform ist. Ihnen ist es egal, wie der Quellcode 
aufgebaut ist, sie sind ja bereits daran gewöhnt, und wenn der Code
überhaupt läuft, wissen sie schon wie man ihn benutzt. Es macht ihnen
nicht einmal etwas aus, wenn die grundsätzlichen Annahmen über den 
Aufbau des Projekts nicht dokumentiert werden; das kennen sie ja auch
schon.</para>

<para>Für Neulinge sind diese Sachen andererseits sehr wichtig.
Glücklicherweise jedoch, nicht alle auf ein mal. Sie müssen nicht jede
erdenklich Ressource gleich parat haben, vor Sie ein Projekt an die
Öffentlichkeit bringen. In einer perfekten Welt, hätte jedes Projekt 
von Anfang, ein gründlich durchdachtes Dokument über seine
Architektur, eine vollständige Betriebsanleitung (mit besonderen 
Hinweisen für Funktionen die geplant aber noch nicht implementiert 
sind), wunderschön aufbereiteten und portablen Code, der auf jedem
Rechner läuft, usw. In Wirklichkeit, wäre es unvertretbar Zeitaufwendig
all diese Sachen zu erledigen und überhaupt ist es Arbeit von dem man
hoffen kann, dass Freiwillige sie aufnehmen werden, sobald das Projekt
in gang gebracht wurde.</para>

<para>Was jedoch <emphasis>wirklich</emphasis> notwendig ist, ist dass
genug in die Präsentation investiert wird, dass Neulinge an dem ersten 
Hindernis der Unbekanntheit vorbeikommen können. Sie können es sich als
den ersten Schritt beim Hochfahren vorstellen; um das Projekt auf sein 
minimales Energieniveau zur Aktivierung zu bringen. Diese Grenze wurde
auch schon <firstterm>Hacktivierungs-Energie</firstterm> genannt: Die 
Energie die Neulinge aufbringen müssen bevor sie einen Nutzen ziehen.
Je geringer die Hacktivierungs-Energie ist, desto besser. Ihre erste 
Aufgabe ist es die Hacktivierungs-Energie auf einem Niveau zu senken,
welches Leute zur Beteiligen ermutigt.</para>

<para>Jede der folgenden Unterabschnitte, beschreibt einen wichtigen
Aspekt der Gründung eines neuen Projekts. Sie werden in der groben 
Reihenfolge präsentiert, in der ein neuer Besucher sie begegnen würde. 
Die Reihenfolge in der Sie tatsächlich implementieren werden, kann
natürlich davon abweichen. Sie können es als Checkliste betrachten.
Am Anfang eines Projekts, gehen Sie der Reihe nach alle Punkte durch 
und stellen sicher, dass alle erledigt sind oder zumindest, wenn welche
weggelassen werden, dass Sie mit den möglichen Folgen umgehen 
können.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Wählen Sie einen Guten Namen</title>

<para>Versetzen Sie sich in die Lage einer Person, die gerade erst von
Ihrem Projekt erfahren hat, vielleicht zufällig, bei der Suche nach
einer Software, um ein Problem zu lösen. Ihre erste Begegnung ist der
Name.</para>

<para>Ein guter Name wird ihr Projekt nicht automatisch erfolgreich
machen und ein schlechter bedeutet auch nicht den Untergang; obwohl ein
<emphasis>wirklich</emphasis> schlechter Name das wahrscheinlich 
erreichen könnte, aber wir gehen davon aus, dass keiner hier versucht
sein Projekt aktiv zu Sabotieren. Ein schlechter Name kann jedoch die
Aufnahme in der Öffentlichkeit verlangsamen, entweder weil Leute es 
nicht ernst nehmen oder einfach nur, weil Sie Schwierigkeiten haben 
sich daran zu erinnern.</para>

<para>Ein guter Name:

<itemizedlist>
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das Projekt
            macht oder ist zumindest derart offensichtlich verwandt, 
            dass wenn man den Namen kennt, und weiss was das Projekt 
            macht, es nachher leicht ist, sich an den Name zu
            erinnern.</para>
  </listitem>
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
            Tatsache herum, dass Englisch zur Standard-Sprache im 
			Internet geworden ist: "einfach zu behalten." bedeutet in
			diesem Fall "Einfach zu behalten, für jemand der Englisch
			lesen kann". Wortspiele die von einer Einheimischen 
			Aussprache abhängen, werden vielen Menschen deren erste
			Sprache nicht Englisch ist, unklar sein. Wenn das Wortspiel
			besonders verlockend und einprägsam ist, kann es das wert
			sein; denken Sie aber daran, dass viele die den Namen sehen
			nicht dasselbe heraushören werden wie jemand dessen 
			Muttersprache Englisch ist.</para>
  </listitem>
  <listitem><para>Ist nicht der gleiche wie der eines anderen Projekts
            und verletzt auch kein Markenrecht. Das ist sowohl höflich
            als auch rechtlich sinnvoll, denn Sie wollen keine 
            Verwirrung über die Identität entstehen lassen. Es ist schon
            schwierig genug, alles was im Netz verfügbar ist zu
            verfolgen, ohne dass auch noch mehrerer Sachen den gleichen
            Namen tragen.</para>

            <para>Die vorher in <xref linkend="look-around"/> erwähnten, 
            Quellen können Ihnen dabei helfen, herauszufinden ob ein
            anderes Projekt bereits den Namen trägt, an den Sie denken.
            Kostenlose Suchen nach Markenzeichen sind bei
            <ulink url="http://www.nameprotect.org/"/> und
            <ulink url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
  <listitem><para>Ist möglichst, als Domain-Name in der
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem> top-level Domainen verfügbar
            Sie sollten sich eine aussuchen, wahrscheinlich
            <systemitem>.org</systemitem>, um sie als offizielle Seite
            des Projekts zu bewerben; die anderen Beiden sollten darauf
            verweisen und dienen einfach nur dazu, andere daran zu 
            hindern, Verwirrung um den Namen ihres Projekts zu stiften.
            Selbst wenn Sie vor haben das Projekt auf eine andere Seite
            zu betreiben (siehe 
            <xref linkend="starting-with-canned-hosting"/>), können Sie
            immer noch die Projekt-spezifischen URL registrieren und 
			sie auf die Seiten des Betreibers weiterleiten lassen. Es
			hilft dem Nutzer ungemein, wenn er sich eine einfache URL
			merken kann.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Formuliere ein Klares Missionsziel</title>

<para>Sobald Besucher ihre Projektseite gefunden haben, werden sie nach
einer kurzen Beschreibung suchen, das Ziel des Projekts um (innerhalb
von 30 Sekunden) entscheiden zu können, ob sie Interessiert sind mehr
zu erfahren. Dieser Satz sollte auf der ersten Seite besonders
herausragen, vorzugsweise direkt unterhalb vom Namen des Projekts.</para>

<para>Die Formulierung des Missionsziels sollte anschaulich sein,
grenzen setzen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Gemeinschaftlich die führende internationale Office 
  Lösung für alle wichtigen Umgebungen zu erschaffen, die durch offene
  Schnittstellen und ein XML Dateiformat, den Zugriff auf all seine 
  Funktionen und Daten ermöglicht.</emphasis></para>
  </blockquote>

<para>Mit nur wenigen Worten, haben sie alle wichtigen Punkte erwähnt,
größtenteils indem sie sich auf das bereits vorhandene Wissen der 
Leser verlassen. Mit "<emphasis>Gemeinschaftlich</emphasis>", 
signalisieren sie, dass keine einzelne Firma die Entwicklung dominieren
wird; "<emphasis>international</emphasis>" bedeutet, dass die Software
es Menschen erlauben wird, in mehreren Sprachen zu arbeiten; 
"<emphasis>alle wichtigen Umgebungen</emphasis>" heißt, für Unix, 
Macintosh, und Windows. Das Übrige signalisiert, dass offene 
Schnittstellen und leicht verständliche Dateiformate ein wichtiger Teil
ihres Ziels ist. Sie sagen nicht offen, dass sie eine freie Alternative
zu Microsoft Office sein wollen, die Meisten können das aber zwischen 
den Zeilen herauslesen. Auch wenn dieser Satz auf den ersten Blick eine
Menge abdeckt, ist es eigentlich ziemlich begrenzt: Die Worte
"<emphasis>Office Lösung</emphasis>" bedeuten etwas ganz bestimmtes für
diejenigen die mit solcher Software vertraut sind. Das Vorwissen der
Leser (in diesem Fall wahrscheinlich mit MS Office) von dem sie 
ausgehen, wird hier benutzt, um die Formulierung knapp zu halten.</para>

<para>Wie die Missionsziele formuliert sind, hängt teilweise davon ab,
wer sie schreibt, nicht nur von der Software die sie beschreiben. Es 
macht zum Beispiel Sinn für Open Office 
"<emphasis>Gemeinschaftlich</emphasis>" zu schreiben, denn das Projekt
wurde gegründet durch und wird heute noch zum größten Teil entwickelt 
von Sun Microsystems. Mit diesem Wort weist Sun auf seine Sensibilität
gegenüber Sorgen, dass Sie versuchen könnten die Entwicklung zu 
dominieren. Bei einer solchen Angelegenheit, kann allein schon der
Hinweis auf das <emphasis>mögliche</emphasis> Problem sehr hilfreich
sein, es ganz und gar zu vermeiden. Andererseits brauchen Projekte die
nicht durch eine einzige Firma Unterstützt werden keine solchen 
Ausdrücke; denn schließlich ist die Entwicklung durch eine Gemeinschaft
die Norm, es gibt also für gewöhnlich keinen Grund, es als Teil der
Mission aufzulisten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Sagen Sie, dass das Projekt Frei ist</title>

<para>Wer die Missionziele gelesen hat und noch interessiert ist, wird
als nächstes mehr Einzelheiten erfahren wollen, vielleicht eine 
Dokumentation für Benutzer oder Entwickler und schließlich werden sie
etwas herunterladen wollen. Vorher müssen sie sich jedoch sicher sein,
dass es Open Source ist.</para>

<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wäre aber überrascht wie viele Projekte es vergessen.
Ich habe schon Projekte gesehen, deren Hauptseite es nicht nur 
versäumten zu sagen, unter welcher Lizenz ihre Software veröffentlicht
war, sondern nicht einmal sagte, dass es sich um freie Software 
handelte. Manchmal verschoben sie die entscheidende Information auf die 
download Seite, die Entwickler-Seite oder irgend eine andere Seite die
ein Klick mehr erforderte. Im Extremfall wurde die Lizenz überhaupt
nicht auf der Seite angegeben&mdash;die einzige Möglichkeit es 
herauszufinden war es herunterzuladen und hereinzuschauen.</para>

<para>Machen Sie nicht diesen Fehler. Solch ein Versäumnis kann zum 
Verlust vieler potentieller Entwickler und Nutzer führen. Sagen Sie 
gleich vorweg, direkt unterhalb der Missionsziele, dass das Projekt 
freie Software oder Open Source Software ist, und geben Sie die genaue
Lizenz an. Eine kurze Anleitung zur Auswahl einer Lizenz befindet sich
im Abschnitt 
<xref linkend="license-quickstart"/><phrase output="printed">später in 
diesem Kapitel</phrase>, und Lizensfragen werden ausführlich im Kapitel
<xref linkend="legal"/> behandelt.</para>

<para>Bis hierhin hat unsere hypothetische Besucherin sich 
entschieden&mdash;wahrscheinlich innerhalb der ersten Minute oder schon 
vorher&mdash;ob sie interessiert ist, sagen wir, zumindest weiter fünf
Minuten in das Projekt zu investieren. Der nächste Abschnitt beschreibt
was sie innerhalb der nächsten fünf Minuten vorfinden sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Funktionen und Anforderungen</title>

<para>Es sollte eine kurze Liste der Funktionen geben, die von der 
Software unterstützt werden (Wenn etwas noch nicht fertig ist, können 
Sie es trotzdem auflisten, schreiben Sie aber "<emphasis>in
Planung</emphasis>" oder "<emphasis>in&nbsp;Arbeit</emphasis>"
daneben), und die Hardware Anforderungen, um die Software zu betreiben. 
Stelle Sie sich die Liste der Funktionen/Anforderungen als das vor, was
Sie jemand geben würden, der nach einer kurzen Zusammenfassung der 
Software fragt. Oft ist sie einfach nur eine logische Erweiterung der 
Missionsziele. Die Missionsziele könnten zum Beispiel folgendermaßen 
formuliert sein:</para>

  <blockquote>
  <para><emphasis>Die Erstellung einer Indizierungs und Suchmaschine
  für Volltext Dateien, mit einer reichhaltigen Schnittstelle für 
  Programmierer die Suchdienste über große Mengen von Text anbieten
  wollen.</emphasis></para>
  </blockquote>

<para>Die Liste der Funktionen und Anforderungen würde folgende
Details angeben, um die Missionsziele klarer zu machen:</para>

  <blockquote>
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Suche nach Wörter oder 
                Ausdrücke</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Unscharfe Suche</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Inkrementelle Aktualisierung
                der Indizes</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Indizierung von Ressourcen im
                Netzwerk</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Genug Festplatten Speicher für die
                Indizierung (ca. 2x Menge der 
                Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Durch diese Informationen, können Leser schnell ein Gefühl dafür
entwickeln, ob diese Software irgend eine Aussicht hat, ihnen etwas zu
nutzen und sie können sich auch überlegen, ob sie sich als Entwickler 
beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Stand der Entwicklung</title>

<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten, wollen sie wissen wie weit seine Versprechen und sein 
derzeitiger Zustand auseinanderliegen. Bei einem ausgereiften Projekt, 
wollen sie wissen, wie aktiv es gepflegt wird, wie oft neue Versionen 
veröffentlicht werden, wie schnell es wahrscheinlich auf Bug Meldungen
reagieren wird, usw.</para>

<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung einrichten, auf dem die kurzfristigen Ziele
und Anfragen des Projekts aufgelistet werden(es könnte z.B. auf der 
Suche nach Entwickler mit bestimmten Fachkenntnissen sein). Die Seite
kann auch eine Übersicht vergangener Versionen haben, mit einer 
Auflistung der jeweiligen Funktionen, damit Besucher sich ein Bild 
machen können, was das Projekt unter "Fortschritt" versteht und wie
schnell es nach dieser Vorstellung vorankommt.</para>

<para>Fürchten Sie sich nicht davor, unvorbereitet auszusehen und geben
Sie nicht der Versuchung nach, den Entwicklungsfortschritt besser
darzustellen als er wirklich ist. Jeder weiß, dass sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Es ist Alpha
Software und es hat bekannte Fehler. Sie läuft zwar und funktioniert 
zumindest manchmal, trotzdem gilt: Nutzung auf eigene Gefahr". Diese
Ausdrucksweise wird nicht die Art Entwickler verschrecken, die Sie zu
dieser Zeit brauchen. Was die Nutzer angeht: Einer der schlimmsten 
Fehler die ein Projekt machen kann, ist Nutzer anzulocken, für die die
Software noch nicht bereit ist. Ein Ruf instabil oder Fehlerträchtig zu
sein ist einmal angeeignet, nur schwer wieder loszuwerden. Konservativ 
zu bleiben zahlt sich auf lange Sicht aus; es ist besser wenn die 
Software <emphasis>stabiler</emphasis> läuft als erwartet, als weniger
und angenehme Überraschungen sorgen für die beste Mundpropaganda.</para>

<sidebar id="alpha-and-beta">
  <title>Alpha und Beta</title>
  <para>Der Begriff <firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit der Benutzer echte Arbeit erledigen können, die
  alle geplante Funktionen hat, aber auch bekannte Fehler. Der vorrangige
  Sinn von alpha Software ist Rückmeldungen zu erhalten, damit die 
  Entwickler wissen woran sie arbeiten sollen. Die nächste Stufe, 
  <firstterm>beta</firstterm> bedeutet, dass in der Software alle groben 
  Fehler behoben wurden, aber noch nicht genug getestet wurde, um als 
  fertige Version zu gelten. Der Sinn von beta Software ist entweder zur
  finalen Version zu werden, wenn keine Fehler gefunden werden oder um 
  detailierte Rückmeldungen an die Entwickler zu geben, um die fertige
  Version möglichst schnell fertigzustellen. Der Unterschied zwischen 
  alpha und beta, ist zum größten Teil eine Sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<para>Man sollte den Quellcode der Software in den üblichen Formaten 
herunterladen können. Wenn ein Projekt noch am Anfang ist, sind
binäre (ausführbare) Dateien noch nicht nötig, es sei denn der
Build-Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten Leute einen menge Arbeit wäre, die Software
überhaupt zum laufen zu bringen. (Wenn das aber der Fall ist, wird 
das Projekt sowieso Schwierigkeiten haben, Entwickler 
anzulocken.</para>

<para>Die veröffentlichten Dateien herunterzuladen, sollte möglichst
bequem, standardkonform und mühelos sein. Wenn Sie eine Krankheit 
ausrotten wollen, würden Sie die Medizin nicht derart verteilen,
dass man eine unüblich Spritze bräuchte. Ebenso sollte Software die 
üblichen Build- und Installations-Methoden beachten, denn je mehr die
Software von diesen Standards abweicht, desto größer ist das Potential,
dass Benutzer und Entwickler aufgeben und verwirrt weggehen.</para>

<para>Das hört sich sehr offensichtlich an, aber viele Projekte machen
sich sehr lange nicht diese Mühe und sagen sich, dass sie es jederzeit
machen könnten: <emphasis>"Wir erledigen den Kram sobald der Code näher
an der Fertigstellung ist.".</emphasis> Was sie dabei nicht erkennen,
ist dass indem sie die langweilige Arbeit hinausschieben, wie die 
Fertigstellung der Build- und Installations-Vorgänge, schieben sie auch
die Fertigstellung vom Code hinaus&mdash;denn sie entmutigen 
Entwickler, die ansonsten etwas beigetragen hätten. Das heimtückischste
daran ist, dass keiner etwas über diese verloren gegangenen Entwickler
überhaupt <emphasis>erfährt</emphasis>, denn der Vorgang ist eine 
Ansammlung von Nicht-Ereignissen: Jemand geht auf die Webseite, lädt 
die Software herunter, versucht ein Build zu machen, scheitert, gibt
auf und geht weg. Wer wird jemals davon etwas wissen, außer die Person
selbst? Keiner im Projekt wird je bemerken, dass das Interesse und 
Wohlwollen von jemand stumm verschwendet wurde.</para>

<para>Langweilige Arbeit mit einem hohen Nutzen, sollte immer früh
erledigt werden. Denn die Einstiegshürden zu einem Projekt zu 
verringern, zahlt sich um Vielfaches zurück.</para>

<para>Wenn Sie eine neu Version veröffentlichen, ist es wichtig, eine
eindeutige Versionsnummer zu vergeben, um alle Versionen von einander
unterscheiden zu können und ihre Reihenfolge klar. Eine ausführliche
Diskussion über Versionsnummern finden Sie in 
<xref linkend="release-numbering"/>, und Details zur Standardisierung
eines der Build- und Installations-Vorgänge werden im Abschnitt 
<xref linkend="packaging"/><phrase output="printed">, sowie in
<xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Zugriff auf die Versionsverwaltung und den Bug-Tracker</title>

<para>Den Quellcode herunterzuladen reicht für alle aus, die lediglich
die Software installieren und benutzen wollen, es reicht jedoch nicht
aus für diejenigen, die es weiterentwickeln wollen. Nächtliche 
Quellcode Snapshots können helfen, reichen aber trotzdem nicht aus für
eine gedeihende Entwicklergemeinschaft. Diese Leute brauchen 
Echtzeit-Zugriff auf den neusten Quellcode und der Weg es ihnen zu 
geben, ist eine Versionsverwaltung zu benutzen. Anonym Zugriff auf
Quellcode, der unter Versionsverwaltung steht, ist ein 
Zeichen&mdash;für Entwickler wie auch für Nutzer&mdash;dass das Projekt
sich mühe gibt, Leute das nötige zu geben, um sich zu beteiligen. Wenn
Sie nicht sofort eine Versionsverwaltung bereitstellen können, sollten
Sie zumindest darauf hinweisen, dass Sie es bald vorhaben. Die
Infrastruktur der Versionsverwaltung wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<para>Gleiches gilt für den Bug-Tracker. Ein Bug-Tracker ist nicht nur
wichtig wegen seinem Nutzen für Entwickler, sondern auch für seine
Botschaft an Außenstehende. Für Viele, ist eine offene Bug Datenbank,
eines der stärksten Anzeichen, dass ein Projekt ernst genommen werden
sollte. Desweiteren, ist ein Projekt um so besser, je mehr Fehler darin 
protokolliert sind. Auch wenn es sich widersprüchlich anhört, sollte man
bedenken, dass die Anzahl der erfassten Fehler von drei Sachen abhängt: 
Die absolute Anzahl in der Software enthaltene Fehler, die Anzahl seiner 
Benutzer und wie bequem es für diese Benutzer ist, neue Fehler
einzutragen. Von diesen dreien sind die letzten beide wesentlich. Jede
ausreichen große und komplexe Software, enthält eine im Grunde genommen
beliebige Menge an Fehlern, die nur darauf warten entdeckt zu werden. 
Die eigentliche Frage ist, wie gut kann das Projekt diese Fehler erfassen
und priorisieren? Ein Projekt mit einer großen und gepflegten Bug 
Datenbank (was so viel heißt wie, dass schnell auf Bugs reagiert wird,
Duplikate markiert werden, usw.) macht deshalb einen besseren Eindruck
als ein Projekt ohne Bug Datenbank oder einer fast leeren 
Datenbank.</para>

<para>Am Anfang vom Projekt, wird die Bug Datenbank natürlich nur sehr
wenige Meldungen enthalten und es gibt nicht viel, was Sie dagegen 
machen können. Wenn die Status Seite aber das junge Alter hervorhebt
und wenn Leute die auf die Bug Datenbank schauen sehen können, dass
die Meisten Einträge vor kurzem gemacht wurden, können sie sich 
ausrechnen, dass das Projekt immer noch eine gesunde 
<emphasis>Rate</emphasis> an Einträgen hat und werden dementsprechend 
nicht übermäßig alarmiert sein, über die niedrige absolute Anzahl an 
Bug Meldungen.</para>

<para>Man sollte auch beachten, dass Bug-Tracker oft nicht nur zur 
Verfolgung von Bugs, sondern auch für Verbesserungen an der Software, 
Änderungen an der Dokumentation, ausstehende Aufgaben und mehr benutzt
werden. Weiteres zum Betrieb eines Bug-Trackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> im Kapitel 
<xref linkend="technical-infrastructure"/></phrase> behandelt, also 
werde ich hier nicht näher darauf eingehen. Das wichtige aus Sicht der 
Präsentation, ist überhaupt einen Bug-Tracker zu
<emphasis>haben</emphasis> und sicher zu stellen, dass er von der 
Hauptseite sichtbar ist.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Kommunikationswege</title>

<para>Besucher wollen oft wissen, wie sie die Menschen hinter dem 
Projekt erreichen können. Adressen der E-Mail Verteiler, Chat Räume,
IRC Kanäle und andere Foren auf denen Beteiligte erreicht erreicht
werden können, sollten online gestellt werden. Stellen Sie klar, 
dass Sie und die anderen Autoren des Projekts auf diese Verteiler
eingetragen sind, damit Besucher sehen, dass es eine Möglichkeit gibt
an die Entwickler Rückmeldungen zu geben. Eine Anmeldung auf den
E-Mail Verteilern impliziert keine Verpflichtung, auf alle Fragen zu 
antworten oder alle Anfragen für neue Funktionen zu implementieren.
Auf lange Sicht, werden die Meisten sowieso niemals diesen Foren 
betreten aber es wird sie Trösten, dass sie es 
<emphasis>könnten</emphasis> falls es nötig werden sollte.</para>

<para>Am Anfang eines Projekts, hat es keinen Sinn die Foren für Nutzer
und Entwickler getrennt zu halten. Es ist viel besser, alle zusammen in
einem "Raum" reden zu lassen. Unter den Personen die sich früh an einem
Projekt beteiligen, ist die Unterscheidung zwischen Entwickler und 
Nutzer oft verwaschen. Sofern sie überhaupt gemacht werden kann, ist in
den frühen Tagen, gibt es wesentlich mehr Entwickler im Verhältnis zu
Nutzern als es später der Fall ist. Obwohl Sie nicht annehmen können,
dass jeder der sich früh für das Projekt interessiert ein Programmierer
ist, der an der Software hacken will, können Sie annehmen, dass sie 
zumindest daran interessiert sind die Diskussionen um die Entwicklung
mitzuverfolgen und ein Gefühl für die Richtung des Projekts zu
bekommen.</para>
   
<para>Da es in diesem Kapitel nur um den Anfang von einem Projekt geht,
reicht es zu sagen, dass diese Foren existieren sollten. Später, in 
<xref linkend="growth"/><phrase output="printed"> im Kapitel 
<xref linkend="communications"/></phrase>, werden wir untersuchten wo 
und wie man diese Foren aufbaut, inwiefern Sie möglicherweise
Moderation erfordern und wie man Foren für Nutzer und Entwickler, sobald
es nötig wird, voneinander trennt, ohne dabei einen unüberwindliches Meer 
zu erschaffen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Richtlinien für Entwickler</title>

<para>Wenn jemand sich überlegt, etwas zu einem Projekt beizutragen, 
wird sie sich nach Richtlinien für Entwickler umschauen. Diese sind 
weniger technischer, als viel mehr sozialer Natur: Sie erklären, wie
Entwickler und Benutzern miteinander umgehen und im wesentlichen, den
Ablauf der Entwicklung.</para>

<para>Dieses Thema wird ausführlich in
<xref linkend="written-rules"/><phrase output="printed"> im Kapitel
<xref linkend="social-infrastructure"/></phrase> behandelt, aber die 
wesentlichen Elemente dieser Richtlinien sind folgende:

<itemizedlist>
  <listitem><para>Verweise auf Foren für die Zusammenarbeit mit
            Entwicklern.</para> 
  </listitem>
  <listitem><para>Anleitungen wie man Fehler meldet und Patches 
            einreicht.</para>
  </listitem>
  <listitem><para>Irgend eine Hinweis darauf <emphasis>wie</emphasis>
            die Entwicklung für gewöhnlich abläuft&mdash;ob das Projekt
            eine gütige Diktatur, eine Demokratie oder etwas anderes
            ist.</para>
  </listitem>
</itemizedlist>

Im übrigen soll "Diktatur" in keiner weise herabsetzend wirken. Es ist
völlig in Ordnung eine Tyrannei zu betreiben, bei dem ein bestimmter 
Entwickler das letzte Wort über alle Änderungen haben kann. Viele 
erfolgreiche Projekte benutzen dieses Schema. Wichtig dabei ist nur,
dass das Projekt es von vornherein klar macht. Eine Tyrannei die 
vorgibt eine Demokratie zu sein, wird Menschen abschrecken; eine 
Tyrannei die klar sagt was sie ist, wird zurecht kommen sofern der 
Tyrann kompetent und vertrauenswürdig ist.</para>
  
<para>Siehe 
<ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
für ein Beispiel besonders gründlicher Richtlinien für Entwickler oder
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> für
allgemeinere Richtlinien, die sich mehr auf die Steuerung und Teilnahme
am Projekt, als auf technische Angelegenheiten konzentrieren.</para>

<para>Etwas anderes, ist eine Einführung für Programmierer 
bereitzustellen, dass in 
<xref linkend="developer-documentation"/><phrase output="printed">
später in diesem Kapitel behandelt wird</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Dokumentation</title>

<para>Dokumentation ist unerlässlich. Es muss <emphasis>irgend
etwas</emphasis> zum lesen geben, selbst wenn es nur rudimentär und 
unvollständig ist. Die Doku ist ganz klar ein Teil der vorhin
erwähnten "Plackerei" und ist oft das erste was in einem neuen Open
Source Projekt zu kurz kommt. Die Missionsziele und eine Liste von 
Funktionen zu schreiben, die Wahl einer Lizenz, den Stand der Entwicklung
zusammenzufassen&mdash;das sind alles relativ kleine Aufgaben, die mit 
einem Schlag erledigt werden können und wenn sie erledigt sind, man muss
sich normalerweise nicht weiter damit beschäftigen. Die Dokumentation
hingegen ist nie wirklich fertig, was vielleicht mit eine Grund dafür 
ist, dass man es manchmal hinauszögert sie überhaupt anzufangen.</para>

<para>Das heimtückischste daran ist, dass die Autoren der Dokumentation
keinen direkten Nutzen daraus ziehen, währen es für neue Nutzer
unerlässlich ist. Die wichtigste Dokumentation für neue Benutzer sind die
Grundlagen: Wie richte ich schnell die Software ein, eine Übersicht wie
sie funktioniert, vielleicht auch Anleitungen für häufige Aufgaben.
All das ist den <emphasis>Autoren</emphasis> jedoch nur allzu 
bekannt&mdash;so bekannt, dass es für sie schwierig sein kann sich in 
die Lage der Leser zu versetzen und mühselig die (für die Autoren) 
offensichtlichen Einzelschritte zu buchstabieren, die kaum einer 
Erwähnung wert erscheinen.</para>

<para>Es gibt keine magisch Lösung für dieses Problem. Es muss sich nur
jemand die Zeit nehmen, sie zu schreiben und anschließend an neue Nutzer
auszuprobieren, um ihre Qualität zu überprüfen. Benutzen Sie ein
einfaches, leicht zu bearbeitendes Format wie HTML, Klartext oder eine
XML variante&mdash;etwas geeignetes für kleine und spontane
Verbesserungen. Das reduziert nicht nur den Aufwand für die ersten
Autoren reduziert, sondern auch alle die später zum Projekt hinzukommen
ebenfalls ermöglicht, sie schrittweise zu verbessern.</para>

<para>Man bekommt eher eine erste Dokumentation der Grundlagen, wenn 
man von vornherein seinen Umfang einschränkt. So erscheint es zumindest
nicht wie eine endlosen Aufgabe. Als Richtlinie können folgende minimale
Bedingungen genommen werden:</para>

<itemizedlist>
  <listitem><para>Sagen Sie dem Leser klar welche technischen
            Kenntnisse erwartet werden.</para>
  </listitem>
  <listitem><para>Beschreiben sie klar und deutlich, wie man die
            Software einrichtet und sagen Sie dem Benutzer irgendwo am
            Anfang der Dokumentation, ein Merkmal oder Befehl, mit dem 
			man erkennen kann, ob sie richtig eingerichtet wurde. Die
			erste Dokumentation ist in mancherlei Hinsicht wichtiger als
			eine echte Bedienungsanleitung. Je mehr mühe jemand in die
            Installation und Einrichtung der Software investiert hat,
            desto beharrlicher wird sie bleiben fortgeschrittene, nicht
			gut dokumentierte, Funktionen herauszufinden. Wenn Leute 
			aufgeben, passiert es meistens gleich am Anfang; deshalb sind
			es die frühsten Phasen, wie die Installation bei der man die
			meiste Unterstützung braucht.</para>
  </listitem>
  <listitem><para>Geben Sie ein lehrhaftes Beispiel einer häufigen
            Aufgabe. Offensichtlich wären viele Beispiele für viele
            Aufgaben noch besser, wenn die Zeit aber knapp ist, suchen
            Sie sich eins aus und schreiben Sie eine ausführliche
            Anleitung. Sobald jemand sieht, dass die Software für eine
            Sache benutzt werden <emphasis>kann</emphasis>, werden sie
            alleine anfangen herauszufinden, wofür es noch zu gebrauchen
			ist &mdash;und mit etwas Glück, selber anfangen die 
			Dokumentation zu erweitern. Was uns zum nächsten Punkt 
			bringt...</para>
  </listitem>
  <listitem><para>Kennzeichnen Sie Bereiche der Dokumentation die 
            unvollständig sind. Indem Sie dem Leser zeigen, dass Sie 
            sich über die Defizite im klaren sind, stellen Sie sich auf
            die Sicht der Leser ein. Ihr Einfühlungsvermögen sichert 
            ihnen zu, dass das Projekt nicht erst überzeugt werden muss
            was wichtig ist. Diese Hinweise entsprechen keiner
			Verpflichtung, sie bis zu irgend einem bestimmten Datum
			auszufüllen&mdash;sie können auch als offenen Anfragen für
			Hilfe von Freiwilligen behandelt werden.</para>
  </listitem>
</itemizedlist>

<para>Der letzt Punkt ist von größerer Bedeutung und kann auf das ganze
Projekt angewandt werden, nicht nur auf die Dokumentation.  Eine genaue
Buchführung über bekannte Defizite ist in der Open Source Welt die 
Norm. Sie müssen die Mängel des Projekts nicht hochspielen, sondern
einfach gewissenhaft und leidenschaftslos aufzählen, sobald es dafür
Zeit wird (Das kann in der Dokumentation, auf dem Bug-Tracker oder in 
einer Diskussion auf einem Verteiler geschehen). Keiner wird das als vom
Projekt ausgehende Miesmacherei ansehen, oder als Verpflichtung die 
Probleme bis zu einem bestimmten Datum zu lösen, es sei denn das Projekt
geht explizit eine solche Verpflichtung ein. Da jeder Nutzer diese Mängel
selbst finden wird, ist es besser sie psychologisch darauf 
vorbereiten&mdash;das gibt den Eindruck, dass das Projekt genau über seinen
Zustand Bescheid weiss.</para>

<sidebar id="starting-a-faq">
  <title>Die Pflege einer FAQ</title>

  <para>Die Investition in eine <firstterm>FAQ</firstterm> ("Frequently
  Asked Questions"<footnote><para>Häufig gestellte 
  Fragen</para></footnote>) kann, sich durch Aufklärung vielfach 
  auszahlen. Eine FAQ ist sehr auf Fragen abgestimmt, die von Benutzern
  und Entwickler wirklich gestellt werden&mdash;nicht auf Fragen die Sie
  vielleicht von ihnen <emphasis>erwarten</emphasis> würden&mdash;und
  deshalb neigt eine gut gepflegte FAQ dazu, denjenigen die sie zu rate
  ziehen, genau das zu geben, wonach sie suchen. Die FAQ ist oft die 
  erste Stelle die Benutzer durchsuchen, wenn sie auf ein Problem 
  stoßen, sie ziehen es oft sogar dem offiziellen Handbuch vor und es 
  ist wahrscheinlich das Dokument in ihrem Projekt, worauf anderen 
  Seiten am ehesten verweisen.</para>

  <para>Leider können Sie die FAQ nicht am Anfang eines Projekts
  schreiben. Eine gute FAQ schreibt man nicht, man lässt sie wachsen.
  Sie sind schon per Definition auf Rückmeldungen angewiesen. Sie 
  entwickeln sich erst mit der Zeit, durch die täglichen Nutzung der 
  Software. Da es unmöglich ist die Fragen der Benutzer zu erahnen,
  ist es unmöglich sich hinzusetzen und von Grund auf eine nützliche
  FAQ zu schreiben.</para>

  <para>Verschwenden Sie also nicht Ihre Zeit dabei es zu versuchen.
  Sie können jedoch eine größtenteils leere FAQ einrichten, als Vorlage
  und offensichtlichen Ort an dem Leute Fragen und Antworten eintragen
  können, wenn das Projekt erst einmal läuft. Zunächst ist ihre 
  wichtigste Eigenschaft aber nicht ihre Vollständigkeit, sondern ihre
  Einfachheit: Wenn es einfach ist neue Einträge zu machen, werden 
  Leute es auch machen. (Die vernünftige Pflege einer FAQ ist ein nicht
  ganz triviale aber faszinierende Angelegenheit die in 
  <xref linkend="faq-manager"/><phrase output="printed"> im Kapitel
  <xref linkend="managing-volunteers"/></phrase> weiter behandelt 
  wird.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Erreichbarkeit der Dokumentation</title>

<para>Die Dokumentation sollte an zwei Stellen erreichbar sein: Online
(direkt von der Webseite) <emphasis>und</emphasis> in der 
veröffentlichten Version der Software (siehe 
<xref linkend="packaging"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>). Man muss sie online 
durchsuchen können, da Leute die Dokumentation oft lesen wollen
<emphasis>bevor</emphasis> sie die Software zum ersten Mal 
herunterladen, um besser entscheiden zu können, ob sie es überhaupt
herunterladen sollen. Prinzipiell, sollte es aber auch der Software
beiliegen, denn ein veröffentlichtes Paket, sollte alles enthalten
(d.h. lokal verfügbar machen), was man braucht um die Software zu
benutzen.</para>

<para>Es sollte unbedingt einen Link geben der auf die
<emphasis>komplette</emphasis> Dokumentation in einer einzigen HTML
Datei verweist (schreiben Sie einen Hinweis wie "monolitisch" oder
"eine einzige riesige Datei" daneben, damit Leser nicht überrascht sind
wenn es beim Laden etwas Zeit braucht). Das ist nützlich, da Leute oft 
die ganze Dokumentation nach einem bestimmten Wort durchsuchen wollen.
Im allgemeinen wissen sie, schon wonach sie suchen und können sich nur
nicht an die richtige Stelle erinnern. In der Situation, gibt es nichts
frustrierenderes als eine HTML Seite für die Inhaltsangabe, einer für die
Einleitung, eine weitere für die Installationsanleitung, usw. Wenn die
Seiten auf diese Art aufgebrochen sind, ist die Suchfunktion im Browser
völlig nutzlos. Eine in mehrere Seiten Aufgebrochene Dokumentation ist
gut, wenn man weiss welchen Abschnitt man braucht oder die ganze 
Dokumentation von vorne nach hinten durchlesen möchte. Das ist aber 
<emphasis>nicht</emphasis> die häufigste Art auf die Dokumentation 
zuzugreifen. Viel häufiger, kennt sich jemand im Grunde genommen mit
der Software aus und kehrt zurück um nach einem bestimmten Wort oder
Ausdruck zu suchen. Keine monolitische Datei bereitzustellen, würde
ihnen das Leben nur unnötig erschweren.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Entwickler Dokumentation</title>

<para>Die Entwickler Dokumentation wird für Programmierer geschrieben,
damit sie den Code verstehen, reparieren und erweitern können. Sie
unterscheidet sich ein wenig zu den vorhin erwähnten 
<emphasis>Richtlinien für Entwickler</emphasis>, die eher sozialer als
technischer Natur sind. Entwickler Richtlinien sagen den Programmierern
wie sie miteinander zurecht kommen; die Entwickler Dokumentation 
hingegen sagt ihnen wie sie mit dem Code zurechtkommen. Beide werden 
oft zusammen in einem Dokument gelegt, aus Gründen der Bequemlichkeit 
(wie mit dem früher angegebenen 
<ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> 
Beispiel), müssen es aber nicht.</para>

<para>Obwohl die Entwickler Dokumentation sehr hilfreich sein kann,
gibt es keinen Grund eine neue Version wegen ihr zu verzögern. So 
lange die ursprünglichen Autoren verfügbar (und bereit) sind Fragen zum
Code zu beantworten, reicht das für den Anfang. Tatsächlich ist eine 
häufige Motivation eine Dokumentation zu schreiben, die gleichen Fragen
wieder und wieder beantworten zu müssen. Aber selbst bevor es 
geschrieben wurde, werden entschlossene Freiwillige es schaffen sich im
Code zurechtzufinden. Was Leute dazu bringt Zeit damit zu verbringen 
sich mit dem Quellcode vertraut zu machen, ist sein Nutzen für sie. Wer
sich dessen sicher ist, nimmt sich auch die Zeit Probleme zu lösen; ohne
dieses Vertrauen, wird keine noch so gute Dokumentation sie anlocken oder
behalten können.</para>

<para>Wenn Sie also nur Zeit haben, um eine Dokumentation zu schreiben,
schreiben Sie eine für Benutzer. Alle Dokumentation für Benutzer ist
effektiv auch für die Entwickler; jeder Programmierer der an einer 
Software arbeitet, muss auch damit vertraut sein wie man sie benutzt.
Später wenn Sie sehen wie Programmierer andauernd die gleichen fragen 
stellen, nehmen Sie sich die Zeit eine paar separate Dokumente eigens
für sie zu schreiben.</para>

<para>Manche Projekte nutzen für den Anfang eine Wiki, manchmal sogar
für ihre Hauptdokumentation. Nach meiner Erfahrung funktioniert das 
nur, wenn die Wiki aktiv von einer Handvoll Leuten bearbeitet wird, 
die sich einig sind, wie die Dokumentation organisiert sein soll und 
was für einen Ton sie haben soll. Mehr dazu steht in 
<xref linkend="wikis"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase>.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Beispiel Ausgaben und Screenshots</title>

<para>Ein Projekt mit graphischer Benutzeroberfläche, oder graphische
sowie andere markante Ausgaben, sollte Beispiele auf der Webseite des 
Projekts zeigen. Im Fall einer Benutzeroberfläche wären es Screenshots;
für Ausgaben, können es Screenshots oder vielleicht nur Dateien sein.
Beide befriedigen das Bedürfnis des Menschen nach sofortiger Genugtuung:
Ein einziges Bild kann überzeugender sein als Paragraphen von 
Beschreibungen und Geschwätz auf dem E-Mail Verteiler, denn ein Bild 
ist ein unverkennbarer Beweis, dass die Software 
<emphasis>funktioniert</emphasis>. Sie mag ihre Fehler haben, schwer 
zu installieren und unvollständig dokumentiert sein, aber ein Bild ist
immerhin ein Beweis, dass wenn man sich nur genug Mühe gibt, man es zum
Laufen bringen kann.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
  <para>Da Screenshots einschüchternd sein können, wenn man noch nie
  welche gemacht hat, ist hier ein kleine Anleitung. Mit "The Gimp"
  (<ulink url="http://www.gimp.org/"/>), öffne 
  <guimenu>Datei</guimenu>-&gt;<guimenu>Holen</guimenu>-&gt;
  <guimenu>Screenshot</guimenu>, wähle 
  <guimenuitem>Einzelnes&nbsp;Fenster</guimenuitem> oder 
  <guimenuitem>Ganzer&nbsp;Bildschirm</guimenuitem>, klicken Sie dann
  auf <guimenuitem>Aufnehmen</guimenuitem>. Jetzt wird ihr nächster 
  Klick den gewählten Fenster oder Bildschirm als Bild in The Gimp
  aufnehmen. Ändern und schneiden Sie anschließend das Bild bei Bedarf 
  nach den Anweisungen auf <ulink 
  url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Sie können noch vieles mehr auf die Webseite des Projekts setzen,
wenn die Zeit dazu reicht, oder wenn es aus irgend ein Grund besonders
passend erscheint: Eine Seite mit Neuigkeiten, eine Seite mit der 
Historie des Projekts, eine Seite mit verwandten Links, eine 
Suchfunktion, ein Link für Spenden, usw. Nichts davon ist am Anfang 
notwendig, aber man kann sie für später im Hinterkopf behalten.</para>

<sect2 id="starting-with-canned-hosting">
<title>Hosting Bündel</title>

<para>Es gibt ein paar Seiten die kostenlos die Infrastruktur für Open
Source Projekte bereitstellen: Eine Web Bereich, Versionsverwaltung, 
ein Bug-Tracker, ein download Bereich, Chat Foren, regelmäßiger Backup,
usw. Die Details sind zwar von Seite zu Seite Unterschiedlich, aber das
Wesentliche wird bei allen angeboten. Durch die Nutzung dieser Seiten
erhalten Sie vieles umsonst, müssen dafür aber die Kontrolle über die
Benutzerführung teilweise aufgeben. Der Hosting Dienst entscheidet 
darüber welche Software die Seite benutzt, und kann das Aussehen der
Projektseite und das Gefühl, dass es vermittelt, kontrollieren oder
zumindest beeinflussen.</para>

<para>Siehe
<xref linkend="canned-hosting"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für eine 
detailliertere Diskussion über die Vor- und Nachteile von Hosting 
Bündel und eine Liste von Seiten die sie anbieten.</para> 
</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Die Wahl einer Lizenz</title>

<para>Dieser Abschnitt soll eine schnelle und sehr grobe Anleitung sein
zur Wahl einer Lizenz. Lesen Sie <xref linkend="legal"/> für ein
besseres Verständnis über die genauen rechtlichen Folgen der verschieden
Lizenzen, und wie Ihre Wahl beeinflussen kann, wie Ihre Software mit 
anderer freier Software gemischt werden kann.</para>

<para>Sie können unter einer Menge Lizenzen für freien Software wählen.
Die meisten müssen wir hier nicht beachten, da Sie für die speziellen
rechtlichen Bedürfnisse einer bestimmten Firma oder Person geschrieben
wurden und für Ihr Projekt nicht angemessen wären. Wir beschränken uns
auf die am häufigsten benutzten Lizenzen von denen Sie am ehesten eine
wählen wollen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>"Alles ist erlaubt" Lizenzen</title>

<para>Wenn Sie kein Problem damit haben, dass der Code in Ihrem Projekt
in proprietären Anwendungen benutzt wird, können Sie eine 
<firstterm>MIT/X</firstterm> ähnlich Lizenz nehmen. Es ist die 
einfachste der verschiedenen Lizenzen die nicht viel mehr machen, als 
Vervielfältigungsrechte durchzusetzen (ohne dabei wirklich die 
Vervielfältigung einzuschränken) und spezifizieren, dass keiner für den
Code haftet. Weiteres darüber finden Sie in 
<xref linkend="license-choosing-mit-x"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>Die GPL</title>

<para>Wenn Sie nicht wollen, dass Ihr Code in proprietären Anwendungen
verwendet wird, benutzen Sie die GNU General Public 
License<footnote><para>Allgemeine Öffentliche Lizenz</para></footnote>
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>). Die GPL ist 
heute die wahrscheinlich bekannteste Lizenz für freie Software der 
Welt. Das ist an und für sich schon ein großer Vorteil, da viele 
potentielle Benutzer und Teilnehmer bereits mit ihr vertraut sein 
werden und deshalb keine zusätzliche Zeit aufbringen müssen um Ihre 
Lizenz zu lesen und zu verstehen. Für weiter Details siehe
<xref linkend="license-choosing-gpl"/><phrase output="printed">
im Kapitel<xref linkend="legal"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Anwendung einer Lizenz</title>

<para>Wenn Sie sich für eine Lizenz entschieden haben, sollten Sie es
auf Ihre Hauptseite sagen. Sie brauchen nicht den kompletten Text der
Lizenz dort anzugeben; der Name und ein Verweis auf den vollständigen
Text reichen vollkommen aus.</para>

<para>Damit sagen Sie der Öffentlichkeit mit welcher Lizenz Sie 
<emphasis>vorhaben</emphasis> die Software zu veröffentlichen, 
rechtliche gesehen reicht dass aber nicht. Dafür muss die Software
selbst die Lizenz enthalten. Meißtens wird das gemacht, indem der
komplette Text der Lizenz in einer Datei namens 
<filename>COPYING</filename> (oder <filename>LICENSE</filename>)
gestellt wird, und am Anfang jeder Quellcode Datei wird dann einen 
darauf verwiesen, zusammen mit dem Datum der Erhebung, die Urheber,
die Lizenz und eine Angabe wo der komplette Text der Lizenz zu finden
ist.</para>

<para>Davon gibt es viele Variationen, also werden wir uns hier nur
ein Beispiel anschauen. Die GNU GPL sagt, dass man einen Hinweis wie
diesen am Anfang jeder Datei des Quellcodes setzen sollte.</para>

<screen> 
Copyright (C) [Jahr]  [Name des Autors]

Dieses Programm ist freie Software. Sie können es unter den 
Bedingungen der GNU General Public License, wie von der Free Software
Foundation veröffentlicht, weitergeben und/oder modifizieren, entweder
gemäß Version 2 der Lizenz oder (nach Ihrer Option) jeder späteren 
Version.

Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es
Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne
die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR 
EINEN BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public
License.

Sie sollten ein Exemplar der GNU General Public License zusammen mit
diesem Programm erhalten haben. Falls nicht, schreiben Sie an die Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110, USA.<footnote><para>Diese Übersetzung von Katja Lachmann im 
Auftrag der S.u.S.E. GmbH – <ulink url="http://www.suse.de"/> und 
überarbeitet von <ulink url="http://www.peter.gerwinski.de/">Peter 
Gerwinski</ulink>, G-N-U GmbH – <ulink url="http://www.g-n-u.de"/>, 
wird hier zum besseren Verständniss verwendet. In Ihrer
Anwendung sollten Sie jedoch die Englische Originalfassung benutzen die
Sie hier <ulink url="http://www.gnu.org/licenses/gpl.html#SEC4"/> 
finden, da diese Übersetzung nicht offiziell oder im rechtlichen Sinne 
Anerkannt ist. Die vollständige Übersetzung der GPL finden Sie hier
<ulink url="http://www.gnu.de/documents/gpl.de.html"/></para></footnote> 
</screen>

<para>Es wird nicht explizit erwähnt, dass der vollständige Text der
Lizenz in der Datei <filename>COPYING</filename> steht, dass ist aber
meistens der Fall. (Sie könnten den obigen Hinweis abändern um die 
Quelle direkt anzugeben.) Diese Vorlage gibt Ihnen auch eine 
Geographische Adresse von der Sie eine Kopie der Lizenz erhalten 
können. Noch häufiger, wird auf die Lizenz mit der URL einer Webseite
mit dem kompletten Text der Lizenz verwiesen. Die Entscheidung, wo
die beständigste Kopie dieser Lizenz Gepflegt wird, sei Ihnen
überlassen, vielleicht ist es auch einfach die Webseite Ihres Projekts.
Im Allgemeinen, muss der Hinweis am Anfang jeder Datei nicht genau so
aussehen wie der Obige, sofern es mit dem gleichen Hinweis auf den 
Halter des Urheberrechts und das Datum, sowie die Lizenz angibt und
angibt wo die komplette Lizenz zu finden ist.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Den Ton angeben</title>

<para>Bis jetzt haben wir Aufgaben behandelt die beim Aufbau des
Projekts einmal erledigt werden müssen: Eine Lizenz wählen, die 
Webseite einrichten, usw. Die wichtigsten Aspekte bei der Gründung 
eines Projekts sind aber dynamisch. Eine Adresse für den E-Mail 
Verteiler zu wählen ist einfach; sicherzustellen, dass die 
Unterhaltungen darauf beim Thema bleiben und produktiv sind, ist eine
ganz und gar andere Angelegenheit. Wenn das Projekt nach Jahren der
geschlossenen Entwicklung geöffnet wird, ändert sich 
Entwicklungsprozess und Sie werden die bestehenden Entwickler darauf
vorbereiten müssen.</para>

<para>Die ersten Schritte sind die Schwersten, da es für zukünftiges
Verhalten noch keine Beispiele oder Erwartungen gibt, nach denen man 
sich richten kann. Beständigkeit in einem Projekt, entsteht nicht durch
formale Richtlinien, sondern durch eine von allen geteilte, schwer 
greifbare, kollektive Weisheit, die sich mit der Zeit entwickelt. Oft 
gibt es auch geschriebene Regeln, die aber im wesentlichen eine 
Zusammenfassung der sich fortwährend weiterentwickelnde Vereinbarungen
sind, nach denen das Projekt sich wirklich richtet. Die 
niedergeschriebenen Richtlinien definieren nicht so sehr die Kultur des
Projekts, als das sie davon eine Beschreibung sind und selbst das nur
näherungsweise.</para>

<para>Es gibt ein paar Gründe diese Entwicklung. Wachstum und
Betriebsamkeit sind nicht so schädlich für die Anhäufung sozialer 
Normen, wie man vielleicht denken würde. So lange Veränderungen nicht
<emphasis>zu</emphasis> schnell ablaufen, gibt es Zeit für Neulinge,
Abläufe zu lernen und nachher selber diese Regeln anzuwenden und 
durchsetzen. Bedenken Sie wie Kinderlieder Jahrhunderte überdauern. Es
gibt heute Kinder die ungefähr die gleichen Lieder singen wie Kinder
vor hunderten von Jahren, auch wenn keiner von ihnen heute noch am
leben ist. Jüngere Kinder hören die Lieder, wie sie von den Älteren
gesungen werden und wenn sie wiederum älter sind, singen sie vor den
anderen jüngeren Kindern. Dabei geben sie die Lieder natürlich nicht
bewussten weiter, aber die Lieder überleben trotzdem, weil sie 
regelmäßig und weitergegeben werden. Freie Software Projekte werden
vielleicht nicht im Bereich von Jahrhunderten gemessen (zumindest bis
jetzt noch nicht), aber die Dynamik der Übertragung ist in vielerlei
Hinsicht die gleiche. Die Umsatzrate ist allerdings viel höher und 
muss bei der Weitergabe, durch eine aktivere und bedachtere 
Anstrengung, ausgeglichen werden.</para>

<para>Diese Anstrengung wird unterstützt durch die Tatsache, dass neue
Leute für gewöhnlich bei ihrer Ankunft, soziale Normen erwarten und
suchen werden. Das liegt einfach in der Natur des Menschen. In einer
Gruppe die durch ein gemeinsames Bestreben geeinigt ist, sucht man
instinktiv nach Verhaltensmuster, um sich als Mitglied dieser Gruppe
zu kennzeichnen. Sie sollten früh Beispiele setzen, um das Verhalten
der Mitglieder so zu beeinflussen, dass es für das Projekt nützlich
ist; denn einmal Etabliert, werden sie überwiegend von selbst
weiterbestehen.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Es folgen ein paar Beispiele, um gute Präzedenzfälle zu setzen.
Es ist keine ausführliche Liste, sondern lediglich einige Darstellung
der Idee, dass es enorm hilfreich ist, die Stimmung für die 
Zusammenarbeit im Projekt schon früh vorzugeben. Physikalisch mag es
sein, dass jeder Entwickler für sich, alleine in einem Raum arbeitet,
Sie können aber eine Menge machen, um ihnen das 
<emphasis>Gefühl</emphasis> zu geben, als würden alle zusammen in einem
Raum arbeiten. Je mehr sie sich so fühlen, desto mehr Zeit werden sie 
an dem Projekt verbringen wollen. Ich habe diese Beispiele gewählt, da
sie in dem Subversion Projekt aufkamen, 
(<ulink url="http://subversion.tigris.org/"/>), an dem ich mich seit
seiner Gründung beteilige und mitverfolge. Sie gelten aber nicht 
alleine für Subversion; diese Situationen werden in den meiste Open 
Source Projekten aufkommen und sollten als Gelegenheiten gesehen
werden, einen guten Anfang zu machen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Vermeide private Diskussionen</title>

<para>Selbst nachdem Sie ein Projekt an die Öffentlichkeit gebracht
haben, werden Sie und die anderen Gründungsmitglieder manchmal damit
konfrontiert werden, schwierige Fragen innerhalb eines kleineren
Kreises durch private Kommunikation lösen zu wollen. Das gilt besonders
am Anfang des Projekts, wo viele wichtige Entscheidungen zu treffen 
sind und es meist nur wenige Freiwillige gibt, die qualifiziert wären 
sie zu treffen. All die offensichtlichen Nachteile öffentlicher 
Diskussionen, auf E-Mail Verteiler, werden greifbar vor Ihnen liegen: 
Die bei E-Mail Diskussionen unvermeidbare Verzögerung, die für einen
Konsens erforderliche Zeit, die Mühe sich mit naiven Freiwilligen
auseinandersetzen zu müssen, die meinen alles zu verstehen (diese gibt
es in jedem Projekt; manchmal bringen sie im nächsten Jahr die besten 
Beiträge, manchmal bleiben sie ewig naiv), die Person die nicht 
versteht, warum Sie nur das Problem X lösen wollen, wenn es 
offensichtlich eine Untermenge des größeren Problems Y ist, usw. Die 
Verlockung diese Unterhaltungen hinter verschlossenen Türen zu führen 
und sie als vollendete Tatsache zu präsentieren oder zumindest als 
nachdrückliche Empfehlung einer vereinigten und einflussreichen 
Wählergruppe, wird gewiss groß sein.</para>

<para>Mache Sie es Nicht.</para>

<para>So langsam und mühselig öffentliche Diskussionen auch sein mögen,
sie sind auf lange Sicht trotzdem vorzuziehen. Wichtige Entscheidungen
privat zu treffen, ist Gift für Freiwillige. Kein Freiwilliger der 
seine Sache ernst meint, würde lange in einer Umgebung bleiben, in dem
alle wichtigen Entscheidungen, von einer geheimen Versammlung getroffen
werden. Desweiteren hat die öffentliche Diskussion den Vorteil, dass
ihre positiven Nebenwirkungen viel länger fortbestehen als die
kurzlebige technische Frage um die es geht:

<itemizedlist>
  <listitem>
  <para>Die Diskussion wird dabei helfen neue Entwickler auszubilden
        und zu unterrichten. Sie können nie wissen wie viele Augen die
		Diskussion beobachten; selbst wenn die Meisten sich nicht 
		beteiligen, kann es sein das Viele es im Stillen mitverfolgen,
		um Informationen über das Projekt zu sammeln.</para>
  </listitem>
  <listitem>
  <para>Bei der Diskussion werden <emphasis>Sie</emphasis> die Kunst
		lernen, technische Angelegenheiten für Leute zu erklären die 
        mit der Software nicht so vertraut sind wie Sie. Das ist eine 
        Fähigkeit, die Übung erfordert und nicht durch die Unterhaltung
		mit Ebenbürtigen erlangt werden kann.</para>
  </listitem>
  <listitem>
  <para>Die Diskussion und Ihre Ergebnisse werden auf ewig in den 
  		öffentlichen Archiven verfügbar sein und es zukünftige 
		Diskussionen ermöglichen Wiederholungen zu vermeiden. Siehe
        <xref linkend="using-archives"/><phrase output="printed"> im 
        Kapitel<xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Zuletzt gibt es noch die Möglichkeit, dass jemand auf dem
Verteiler einen echten Beitrag zu der Diskussion leisten könnte, indem
er eine Idee aufbringt, an der Sie nie gedacht hätten. Es ist schwer zu 
sagen, wie wahrscheinlich das ist; es hängt schlicht und einfach davon 
ab, wie komplex das Problem ist und den erforderlichen Kenntnissen ab.
Wenn ich aber ein Beispiel heranführen darf, wage ich zu behaupten, dass 
es viel wahrscheinlicher ist, als man es intuitiv erwarten würde. Im
Subversion Projekt, glaubten wir (die Gründer) mit einer tiefen und
komplexen Reihe von Problemen konfrontiert zu sein, über die wir uns
seit ein paar Monaten viele Gedanken gemacht hatten, und offen gesagt
zweifelten wir daran, dass irgendjemand auf dem kürzlich eingerichteten
E-Mail Verteiler etwas wertvolles zu der Diskussion beizutragen hatte.
Wir nahmen also den einfachen Weg und fingen an unsere technischen
Ideen in private E-Mails untereinander auszutauschen, bis ein 
Beobachter des Projekts<footnote><para>Wir haben zwar noch nicht das
Thema der Namensnennung und Anerkennung angesprochen, aber um auch zu
praktizieren was ich später predigen werde: Der Name des Beobachters
war Brian Behlendorf, und er war es der darauf hingedeutet hat, wie
wichtig es ist, alle Diskussionen öffentlich zu halten, es sei denn es
gibt einen bestimmten Grund für Geheimhaltung.</para></footnote> davon
Wind bekam, und uns bat, die Diskussion auf den öffentlichen Verteiler
zu verlagern. Wir verdrehten zwar ein bisschen die Augen, taten es 
aber&mdash;und waren völlig erstaunt, über die Anzahl aufschlussreicher
Kommentare und Vorschläge die schnell daraus resultierten. In vielen
Fällen boten Leute Ideen an die uns nie in den Sinn gekommen waren. Es
stellte sich heraus, dass ein paar <emphasis>sehr</emphasis> kluge Köpfe
auf diesem Verteiler waren; sie hatten nur auf den richtigen Köder 
gewartet. Es ist wahr, dass die resultierenden Diskussionen länger 
dauerten als wenn wir sie privat gehalten hätten, allerdings waren sie
derart produktiver, dass es die zusätzliche Zeit in jedem Fall wert
war.</para>

<para>Ohne in allzu verallgemeinernde Aussagen, wie "Die Gruppe ist
immer schlauer als der Einzelne" abzuleiten (wir kennen alle genügend
Gruppen, um es besser zu wissen), muss man doch anerkennen, dass es 
bestimmte Aktivitäten gibt, für die Gruppen besonders geeignet sind. 
Ausführliche Gutachten sind eines; schnell auf viele Ideen zu kommen
ist ein Weiteres. Die Qualität dieser Ideen hängt natürlich davon ab
wie hochwertig die Gedanken waren, die man hineingesteckt hat. Sie
werden aber nie erfahren, was für geistreiche Denker da draußen sind,
ohne ihnen eine Herausforderung zu geben.</para>

<para>Es gibt natürlich auch Diskussionen die man im privaten führen
muss; hierfür gibt es im ganzen Buch Beispiele. Das leitende Prinzip
sollte aber sein: <emphasis>Wenn es kein Grund gibt die Diskussion 
privat zu halten, sollte sie öffentlich geführt werden.</emphasis></para>

<para>Um das in Gang zu setzen, müssen Sie aber Einfluss üben. Es 
reicht nicht lediglich sicherzustellen, dass Ihre eigenen Nachrichten
an den öffentlichen Verteiler gehen; Sie müssen auch andere dazu 
bewegen ihre unnötig private Unterhaltungen öffentlich zu halten. Wenn
jemand versucht eine private Diskussion anzufangen, und es keinen Grund
gibt sie privat zu halten, sollten Sie sich verpflichtet fühlen sofort
eine angemessene übergeordnete Diskussion zu eröffnen. Sie sollten nicht 
einmal direkt auf das Thema eingehen, bevor Sie nicht entweder die 
Diskussion erfolgreich an einem öffentlichen Ort gelenkt haben oder 
sichergestellt haben, dass sie doch privat gehalten werden sollte. Wenn 
Sie sich konsequent so verhalten, werden Leute es ziemlich schnell 
mitbekommen und gleich die öffentlichen Foren benutzen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Unhöflichkeit im Keim ersticken</title>

<para>Sie sollten von Anfang an, gleich nachdem Ihr Projekte an die 
öffentlichen geht, null Toleranz gegenüber unhöfliches oder 
beleidigendes Verhalten in ihren Foren zeigen. Keine Toleranz heißt 
nicht unbedingt diese technisch durchzusetzen. Diese Leute sollten nicht
von dem Verteiler entfernen werden, wenn Sie einen anderen Teilnehmer 
"flamen", oder ihnen wegen abfällige Bemerkungen den Commit-Zugriff
zu entziehen. (Theoretisch, müssten Sie eventuell auf solche Mittel 
zurückgreifen, aber erst nachdem alle Anderen erschöpft sind&mdash;was 
am Anfang eines Projekts per Definition, noch nicht der Fall ist.) Null 
Toleranz bedeutet einfach niemals schlechtes Benehmen unbemerkt
vorbeiziehen zu lassen. Wenn jemand zum Beispiel eine technische
Bemerkung, zusammen mit einem <foreignphrase>argumentum ad 
hominem</foreignphrase> gegen einem anderen Entwickler macht, ist es
zwingend notwendig, dass Ihre Reaktion als <emphasis>erstes</emphasis>
den persönlichen Angriff anspricht, als separate Angelegenheit, und erst 
dann auf den technischen Inhalt eingeht.</para>

<para>Leider ist es sehr leicht und allzu üblich, dass konstruktive
Diskussionen in destruktive "flame wars" ausarten. Menschen werden
Sachen sagen die sie nie von Angesicht zu Angesicht sage würden. Die
Themen dieser Diskussionen verstärken nur diesen Effekt: Bei
technischen Angelegenheiten, fühlen Menschen oft, dass es nur eine
richtige Antwort zu den meisten Fragen gibt und dass eine
Meinungsverschiedenheit zu ihrer Antwort, nur durch die Ignoranz oder
Dummheit des Anderen erklärt werden kann. Es ist ein kurzer Weg den
technischen Vorschlag einer Person als bescheuert zu bezeichnen, bis man 
die Person selber bescheuert nennt. Tatsächlich ist es oft schwer zu
unterscheiden, wo die technische Diskussion aufhört und die persönliche
Beleidigung anfängt, was auch ein Grund ist warum drastische Maßnahmen 
oder Bestrafungen nicht angebracht sind. Sie sollten statt dessen wenn
Sie darauf stoßen, eine Nachricht schreiben die nachdrücklich darauf 
hinweist wie wichtig es ist die Unterhaltung in einem freundlichen Ton 
zu führen, ohne dabei jemand zu beschuldigen absichtlich giftig gewesen 
zu sein. Leider hören sich diese "Guter Bulle" Nachrichten meistens
wie die Predigt einer Lehrerin aus der Vorschule an, die ihre Klasse 
über gutes Benehmen belehrt:</para>

    <blockquote>
      <para><emphasis>Lasst uns bitte zuerst mit den u.U. ad hominem
      Bemerkungen aufhören; den Entwurf der Sicherheitsschicht von J 
      als "naiv und ignorant gegenüber allen Grundprinzipien der 
      Sicherheit in der Informatik" zu bezeichnen. Ob das so stimmt 
      oder nicht, es ist in jedem Fall keine Art eine Diskussion zu 
      führen. J hat seinen Entwurf mit guter Absicht vorgeschlagen. 
      Wenn es Fehler aufweist, weise darauf hin und wir werden sie 
      beheben oder einen neuen Entwurf suchen. Ich bin mir sicher, dass
      M niemand persönlich beleidigen wollte, aber er hat sich
      unglücklich ausgedrückt, und wir wollen versuchen hier 
	  konstruktiv zu bleiben.</emphasis></para>

      <para><emphasis>Und jetzt zu dem Entwurf. Ich denke M hatte recht 
      als er sagte, ...</emphasis></para>
    </blockquote>

<para>So gestelzt sich solche Antworten auch anhören, sie haben doch
eine messbare Wirkung. Wenn Sie immer wieder auf solches Verhalten 
hindeuten aber keine Entschuldigung von der angreifenden Partei 
fordern, lassen Sie ihnen die Möglichkeit sich abzuregen und ihre 
bessere Seite zu zeigen, indem sie sich beim nächsten mal anständiger 
benehmen&mdash;und das werden sie. Einer der Geheimnisse erfolgreich 
gegen solches Verhalten vorzugehen, ist niemals die untergeordnete 
Diskussion zum Hauptthema werden zu lassen. Es sollte immer nur
nebenbei erwähnt werden, ein kurzes Vorwort zu der eigentlichen Antwort. 
Weisen Sie im vorbeigehen darauf hin, dass "so arbeiten wir hier nicht", 
aber gehen Sie dann weiter zum echten Inhalt, damit Leuten immer zum 
Thema haben, worauf sie Antworten können. Wenn jemand Protest einlegt,
dass sie die zu Unrecht zurechtgewiesen wurde, sollten Sie sich nicht
in ein Streit verzetteln lassen. Antworten Sie entweder garnicht (wenn 
Sie denken, die Person will nur Dampf ablassen und es ist keine Antwort 
erforderlich), oder entschuldigen Sie sich für die Übertriebene
Reaktion und schreiben Sie, dass es schwer ist Nuancen in einer E-Mail
herauszulesen. Gehen Sie danach aber wieder auf zum eigentlichen Thema
über. Bestehen Sie niemals auf eine Antwort, privat oder öffentlich, 
von jemand der sich unangemessen verhalten hat. Wenn sie sich von
alleine entschuldigen, ist das großartig, aber es von ihnen zu verlangen
würde nur Verbitterung heraufbeschwören.</para>

<para>Das übergeordnete Ziel ist, gute Umgangsformen zu einem
wesentlichen Merkmal in der Kerngruppe wird. Das hilft dem Projekt, da
Entwickler durch "flame wars" vertrieben werden können (sogar von 
Projekten die sie mögen und unterstützen). Es kann passieren, dass Sie
ihre Vertreibung nicht einmal mitbekommen; wenn sich jemand auf dem
Verteiler umschaut und mitkriegt was für eine dicke Haut man braucht
um an dem Projekt teilzunehmen, wird er sich vielleicht entscheiden, 
sich garnicht erst zu beteiligen. Foren freundlich zu halten ist auf
lange Sicht eine Überlebenstaktik und es ist einfacher zu machen, 
solange das Projekt noch klein ist. Sobald es zu einem Teil der Kultur 
geworden ist, werden Sie nicht die einzige sein die sich darum bemüht. 
Das Verhalten wird von allen gepflegt werden.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Code Review</title>

<para>Einer der besten Möglichkeiten eine produktive 
Entwicklergemeinschaft zu fördern, ist Leute zu überreden sich
gegenseitig Ihren Code anzuschauen. Das effektiv zu gewährleisten, 
erfordert einwenig technische Infrastruktur&mdash;insbesondere sollten 
Commit E-Mails angeschaltet werden; siehe 
<xref linkend="commit-emails"/> für weiteres darüber. Commit E-Mails 
sorgen dafür, dass auf jede Änderung an dem Quellcode, eine E-Mail 
folgt, mit dem zugehörigen Kommentar des Autors und den Diffs (siehe
<xref linkend="vc-vocabulary-diff"/> im Kapitel 
<xref linkend="vc-vocabulary"/>). <firstterm>Code Review</firstterm> 
heißt diese Commit E-Mails beim Eintreffen auch durchzulesen und nach 
Fehler sowie mögliche Verbesserungen zu suchen. <footnote><para>So 
wird Review zumindest in Open Source Projekten Code Praktiziert. Für
zentralisierte Projekte, kann "Code Review" auch bedeuten, dass mehrere
Personen gemeinsam den ausgedruckten Code durchgehen und nach 
bestimmten Problemen und Mustern suchen.</para></footnote></para>

<para>Code Review dient mehreren Zwecken gleichzeitig. Es ist das
offensichtlichste Beispiel für "Peer Review" in der Open Source Welt
und hilft unmittelbar die Qualität der Software zu erhalten. Jeder
Fehler der in einer Software ausgeliefert wird kam durch einen Commit
zustande und übersehen wurde; es werden umso weniger Fehler in einer
veröffentlichten Version sein, je mehr Augen auf jeden Commit
gerichtet sind. Code Review dient aber auch einem indirekten Zweck: Es 
gibt Leute die Bestätigung, dass ihre Arbeit etwas bedeutet, denn man
würde sich nicht die Zeit nehmen über einen Commit zu schauen, wenn es 
einem nicht interessiert, welche Auswirkungen er hat. Menschen geben
sich bei ihrer Arbeit am meisten Mühe wenn sie wissen, dass Andere sich 
die Zeit nehmen es auszuwerten.</para>

<para>Jeder Review sollte öffentlich durchgeführt werden. Selbst wenn
ich im selben Physikalischen Raum mit anderen Entwicklern bin und einer
von uns einen Commit macht, achten wir darauf den Review nicht verbal
im Raum zu führen, sondern es an den Entwickler Verteiler zu schicken. 
Jeder profitiert davon wenn der Review sichtbar ist. Leute folgen den
Erläuterungen und finden darin manchmal Mängel und selbst wenn nicht,
erinnert es sie zumindest daran, dass Code Review eine erwartete
regelmäßige Aktivität ist, wie Geschirrspülen oder den Rasen zu
mähen.</para>

<para>Im Subversion Projekt hatten wir am Anfang nicht diese
Angewohnheit. Es gab keine Garantie, dass jeder Commit überprüft wurde, 
wir schauten zwar manchmal über bestimmte Änderungen, wenn ein
bestimmter Bereich im Quellcode einen besonders interessierte. Es
schlichen sich Fehler ein die man eigentlich hätte sehen sollen und
müssen. Ein Entwickler namens Greg Stein, der aus seiner vorherigen
Arbeit den Wert von Code Review kannte, entschied sich ein Beispiel zu
setzen, indem er sich jede Zeile von <emphasis>jedem einzelnen
Commit</emphasis> anschaute. Auf jedem Commit, den irgendjemand machte,
folgte bald eine E-Mail von Greg an den Entwickler Verteiler, indem er
den Commit sezierte, mögliche Probleme analysierte und ab und zu, für
besonders cleveren Code, Lob aussprach. Auf der Stelle fing er an Fehler
und nicht optimale Programmierpraktiken zu entdecken, die ansonsten
durchgerutscht wären, ohne je bemerkt zu werden. Er beschwerte sich
Wohlgemerkt nie, dass er der einzige war der Code Review betrieb, auch
wenn es keinen unwesentlichen Teil seiner Zeit in Anspruch nahm, er
lobte bei jeder Gelegenheit die Vorteile von Code Review. Ziemlich bald
fingen Andere an, ich eingeschlossen, regelmäßig Commits zu überprüfen.
Was war unsere Motivation? Greg hatte uns nicht bewusst durch Schande
dazu gebracht. Er hatte bewiesen, dass Code Review eine wertvolle
Investition von Zeit ist und dass man genau soviel zu einem Projekt
beitragen kann, indem man die Änderungen anderer durchsieht, wie wenn
man selber neuen Code schreibt. Als er das demonstriert hatte, wurde
es zum erwarteten Verhalten. Das ging sogar soweit, dass wenn auf einem
Commit keine Reaktion folgte, man sich als Committer sorgen machte und
sogar auf dem Verteiler nachfragte, ob nicht jemand die Zeit gefunden
hatte es sich anzuschauen. Später bekam Greg eine Arbeit die ihm nicht
so viel Zeit für Subversion ließ und er musste mit dem regelmäßigen
Code Review aufhören. Aber bis dahin, war die Angewohnheit so weit 
integriert, als ob es nie anders gewesen wäre.</para>

<para>Fangen Sie Code Review ab dem allerersten Commit an. Die Probleme 
die man am einfachsten beim Durchsehen der Diffs erkennen kann, sind 
Sicherheitslücken, Speicherlecks, ungenügende Kommentare oder 
Dokumentation von Schnittstellen, off-by-one Fehler, caller/callee
Ungleichgewichte und andere Probleme, deren Entdeckung keinen großen 
umgebenden Kontext erfordern. Selbst Angelegenheiten von größerem 
Umfange, wie z.B. häufig auftauchende Muster nicht an einer gemeinsamen
Stelle zu abstrahieren, werden leichter erkennbar, nachdem man Code 
Review regelmäßig betreibt, da man sich an vergangene Diffs 
erinnert.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Machen Sie sich keine sorgen, dass Sie nichts finden, worüber es 
etwas zu sagen gäbe, oder dass Sie nicht genug über alle Bereiche im
Code wissen. Es gibt meißtens irgendetwas über jeden beliebigen Commit 
zu sagen; selbst wenn Sie nichts bedenkliches finden kann es sein, dass 
Sie etwas Lobenswertes finden. Das wichtige ist, jedem der Committer 
klar zu machen, dass ihre Arbeit gesehen und verstanden wird. Natürlich 
befreit Code Review die Programmierer nicht von der Verantwortung, ihre 
Änderungen vor dem Commit zu überprüfen und zu testen; niemand sollte 
sich auf Code Review verlassen um Fehler zu finden, die sie selbst 
hätte finden müssen.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>Der Übergang geschlossener Projekte nach Open Source</title>

<para>Beim öffnen von einem bestehenden Projekt, mit aktiven 
Entwicklern, die an einer Umgebung mit geschlossenem Code gewohnt sind,
sorgen Sie für Klarheit über den Umfang der Änderungen, die auf sie
zukommen&mdash;und versuchen Sie sich so weit wie möglich in ihre Lage
zu versetzen.</para>

<para>Versuchen Sie sich die Situation aus ihrer Sicht vorzustellen: 
vorher wurden Entscheidungen über Code und Architektur in einer Gruppe 
von Programmierern getroffen, die sich alle mehr oder weniger gleich 
gut, mit der Software auskannten, die alle den gleichen Druck von oben
zu spüren bekamen und die alle ihre gegenseitigen Stärken und 
Schwächen kannten. Jetzt verlangen Sie von ihnen, ihren Code 
freizugeben nur damit irgend welche Fremde es auseinandernehmen, es
untersuchen und ihre Meinungen darüber bilden, allein anhand vom 
Quellcode den sie sehen, ohne zu wissen welcher geschäftlicher Druck
Sie zu bestimmten Entscheidungen gezwungen hat. Diese Fremde werden
viele Fragen stellen, Fragen die vorhandene Entwickler aufrütteln 
werden, wenn Sie feststellen müssen, dass die Dokumentation an der sie
so hart gearbeitet haben <emphasis>immer noch</emphasis> lückenhaft
ist (das ist unvermeidbar). Um dem ganzen noch ein Sahnehäubchen zu
geben, sind die Neulinge unbekannte, gesichtslose Wesen. Wenn einer
Ihrer Entwickler sich seiner Fähigkeiten als Programmierer unsicher
ist, stellen Sie sich vor wie es ihn erst verbittern wird, wenn die
Neulinge auf Mängel in seinem Code hinweisen, schlimmer noch vor
seinen Kollegen. Wenn Sie keine Mannschaft perfekter Programmierer
haben, ist sowas unvermeidlich&mdash;tatsächlich wird es am Anfang
wahrscheinlich allen passieren. Nicht weil sie schlechte 
Programmierer sind; sondern weil jedes Projekt über einer bestimmten
Größe, zwangsläufig Fehler beinhaltet und die Überprüfung durch eine
Gemeinschaft wird manche dieser Fehler aufdecken (siehe 
<xref linkend="code-review"/> <phrase output="printed"> früher in
diesem Kapitel</phrase>). Gleichzeitig werden die neuen Freiwilligen 
selber nicht so sehr dieser Prüfung unterliegen, da sie selber noch 
keinen Code beisteuern können, bis sie mehr mit dem Projekt vertraut 
sind. Für Ihre Entwickler kann das erscheinen, als ob die ganze Kritik 
immer nur auf sie gerichtet ist und nie nach außen geht. Es besteht 
deshalb die Gefahr, dass sich unter den alten Hasen eine  
Belagerungsmentalität einstellt.</para>

<para>Am besten kann man das verhindern, indem man alle vorwarnt, was 
auf Sie zukommt, es ihnen erklärt, ihnen sagt, dass ein anfängliches
Unbehagen völlig normal ist, und ihnen versichert, dass es mit der Zeit
besser wird. Manche dieser Warnungen sollten privat geschehen, vor das 
Projekt geöffnet wird. Es könnte aber auch hilfreich sein, die Leute 
auf dem E-Mail Verteiler zu erinnern, dass es für das Projekt eine neue 
Art der Entwicklung ist und dass die Anpassung eine gewisse Zeit
brauchen werden. Das beste was Sie machen können, ist als gutes Beispiel
voranzugehen. Wenn Sie sehen, dass Ihre Entwickler nicht genügend 
Fragen der neuen Freiwilligen beantworten, nützt es nichts ihnen zu 
sagen, dass sie mehr antworten sollen. Es mag sein, dass sie kein gutes 
Gefühl dafür haben, wann eine Reaktion gerechtfertigt ist, oder es kann 
sein, dass sie nicht wissen, welche Priorität die eigentliche Arbeit am
Code gegenüber der neuen Bürde mit Außenstehende zu kommunizieren
einnimmt. Man kann sie am ehesten dazu überreden sich zu beteiligen, 
indem man sich selbst beteiligt. Beobachten Sie den öffentlichen 
Verteiler und beantworten Sie ein paar Fragen. Wenn Sie nicht genügend
Erfahrung haben um die Fragen zu beantworten, sollten Sie es für alle
sichtbar an einem anderen Entwickler weitergeben, der die nötige
Erfahrung hat&mdash;und achten Sie darauf, dass er eine Antwort oder
zumindest eine Reaktion gibt. Natürlich wird es für die älteren 
Entwickler verlockend sein, in private Diskussionen zu verfallen,
schließlich sind sie daran gewohnt. Beobachten Sie deßhalb auch den
Verteiler im Betrieb und bitten Sie ggf. darum, bestimmte Diskussionen
gleich auf den öffentlichen Verteiler zu verlagern.</para>

<para>Es gibt andere, langfristige Bedenken beim öffnen vorher
geschlossener Projekte. <xref linkend="social-infrastructure"/> 
untersucht Techniken um bezahlte und unbezahlte Entwickler erfolgreich
zu mischen und <xref linkend="legal"/> behandelt die nötige rechtliche
Sorgfalt beim öffnen von privatem Code, mit bestimmten Komponenten,
die einer anderen Partei "gehört", bzw. von ihnen geschrieben 
wurde.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Bekanntmachung</title>

<para>Sobald das Projekt in einem vorzeigbarem Zustand ist&mdash;nicht 
perfekt, lediglich vorzeigbar&mdash; ist es bereit der Welt
bekanntgemacht zu werden. Tatsächlich geht das relativ einfach: Gehen
Sie auf <ulink url="http://freshmeat.net/"/>, klicken Sie in der oberen 
Navigationsleiste auf <guimenuitem>Submit</guimenuitem> und füllen Sie
das Formular aus um Ihr Projekt bekanntzumachen. Freshmeat ist der Ort 
auf dem alle schauen, für Ankündigungen über neue Projekte. Sie müssen 
dort nur ein paar Augen erwischen und ihre Nachricht wird sich von da
aus, über Mundpropaganda weiterverbreiten.</para>

<para>Wenn Sie E-Mail Verteiler oder Newsgroups kennen, auf denen eine
Ankündigung Ihres Projekts zu Thema passen würde und von Interesse
wäre, sollten Sie dort einen Eintrag machen, achten Sie aber darauf
genau <emphasis>einen</emphasis> Eintrag pro Forum zu machen, und 
verweisen Sie dabei auf Ihre eigenen Foren für weitere anschließende 
Diskussionen (indem Sie den <systemitem>Reply-to</systemitem>
Header setzen). Die Einträge sollten kurz und prägnant sein:</para>

<screen>
An: discuss@lists.example.org
Betreff: [ANN] Das Scanley Projekt für Volltext Indizierung 
Antwort-An: dev@scanley.org

Diese Nachricht ist ein einmaliger Eintrag über die Gründung des Scanly 
Projekts, eine Open Source Volltextindizierungs- und Suchmaschine, mit 
einer reichen API für Programmierer die Suchfunktionen für große Mengen
an Text implementieren wollen. Der Code von Scanley läuft, wird aktiv 
entwickelt und wir suchen sowohl nach Entwickler als auch Beteiligte 
die Testen wollen.

Webseite: http://www.scanley.org/

Funktionen:
   - Durchsucht Klartext, HTML, und XML
   - Suche nach Wörter oder Ausdrücken
   - (geplant) Unscharfe suche
   - (geplant) Inkrementelle Aktualisierung der Indizes
   - (geplant) Indizierung von Webseiten

Voraussetzungen:
   - Python 2.2 oder neuer 
   - Genügend Festplattenplatz für die Indizes (ca. 2x die Größe der 
     ursprünglichen Daten)

Weiteres finden Sie auf scanley.org.

Vielen Dank,
-H. Mustermann
</screen>

<para>(Siehe <xref linkend="publicity"/><phrase output="printed">
im Kapitel <xref linkend="communications"/></phrase> für Ratschläge
über die Bekanntmachung neuer Versionen und andere Ereignisse im
Projekt.)</para>

<para>Es gibt eine noch laufende Diskussion in der Open Source
Gemeinschaft, ob ein Projekt schon am Anfang laufenden Code haben muss,
oder ob es einem Projekt hilft, selbst in den frühen Phasen des 
Entwurfs offen zu sein. Ich dachte früher, dass es am aller wichtigsten
war mit laufendem Code anzufangen, dass man so erfolgreiche Projekte 
vom Spielzeug unterscheiden konnte und ernstzunehmende Entwickler nur 
etwas anfassen würden, was auch schon etwas handfestes machte.</para>

<para>Wie es sich herausstellte, war das nicht der Fall. Beim 
Subversion Projekt, fingen wir mit einem Entwurf an, ein Kern 
interessierter und miteinander vertrauter Entwickler, viel Fanfare und
<emphasis>keine einzige Zeile</emphasis> lauffähiger Code. Zu meiner
völligen Überraschung, schaffte es das Projekt von Anfang an aktive
Freiwillige anzulocken und bis wir tatsächlich etwas laufendes hatten,
waren bereits eine ziemliche Menge freiwilliger Entwickler beteiligt.
Subversion ist da nicht das einzige Beispiel; das Mozilla Projekt fing
auch ohne laufenden Code an und ist heute ein erfolgreicher und
beliebter Web Browser.</para>

<para>Angesichts solcher Beweise, muss ich von meiner ursprünglichen
Behauptung zurücktreten, dass laufender Code absolut notwendig ist um 
ein Projekt anzufangen. Trotzdem ist laufender Code immer noch eines 
der besten Grundlagen für Erfolg, und eine gute Grundregel wäre mit
der Bekanntgabe zu warten, bis Sie welchen haben. Es mag allerdings 
Umstände geben bei denen eine frühere Bekanntmachung Sinn macht. Ich 
denke, dass zumindest eine gut ausgearbeiteter Entwurf, oder irgend 
ein Grundgerüst für den Code notwendig ist&mdash;dieser kann natürlich
wegen öffentliche Rückmeldungen überarbeitet werden müssen, aber es
muss etwas handfestes und greifbares geben, etwas mehr als gute 
Absichten, wovon Leute ausgehen und weiterarbeiten können.</para>

<para>Wenn Sie die Ankündigung machen, sollten Sie jedoch nicht gleich 
darauf ein Schar Freiwilliger erwarten. Für gewöhnlich ist das Resultat
einer Bekanntmachung, dass Sie nebenbei ein paar Anfragen bekommen, es
melden sich ein paar auf dem Verteiler an, abgesehen davon geht alles 
so ziemlich wie bisher weiter. Mit der Zeit werden Sie aber eine 
stätige Zunahmen der Beiträge bemerken, sowohl von neuen Beteiligten, 
als auch von Benutzern. Die Ankündigung ist lediglich das Pflanzen eines 
Samenkorns. Es braucht Zeit, bis die Nachricht sich fortpflanzt. Wenn 
das Projekt konsequent diejenigen Belohnt, die sich Beteiligen, wird 
sich die Nachricht verbreiten, denn Menschen wollen miteinander 
teilen was sie gutes finden. Wenn alles gut läuft, wird die Dynamik der 
exponenziellen Kommunikationsnetze das Projekt langsam in eine komplexe 
Gemeinschaft verwandeln, indem Sie nicht unbedingt den jeden Namen 
kennen und nicht länger jede Unterhaltung mitverfolgen können. In den 
nächsten Kapiteln, geht es um die Arbeit in einer solchen
Umgebung.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
