<chapter id="getting-started">

<!--
<title>Getting Started</title>
-->
<title>Der Einstieg</title>

<simplesect>

<!--
<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>
-->
<para>Den klassischen Verlauf eines freien Software-Projektes 
beschreibt Eric Raymond in seinem nunmehr berühmten Text über Open Source,
<citetitle>The Cathedral and the Bazaar</citetitle>:</para>

    <blockquote>
<!--
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>
-->
      <para><emphasis>Jede gute Software entsteht aus einem persönlichen
        Bedürfnis eines Programmierers.</emphasis></para>

<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
-->
      <para>(von <emphasis role="bold">
        <ulink url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<!--
<para>Note that Raymond wasn't saying that open source projects happen
only when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; the relevance of this
to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.</para>
-->
<para>Raymond sagte wohlgemerkt nicht, dass Open-Source-Projekte nur aus
dem persönlichen Bedürfnis eines Programmierers entsteht, sondern dass
<emphasis>gute</emphasis> Software dann entsteht, wenn der Programmierer
ein persönliches Interesse daran hat, ein Problem zu lösen; was insofern
für freie Software relevant ist, da sich herausstellte, dass die
meisten Open-Source-Projekte von Programmierern begonnen wurden, die
eines ihrer eigenen Probleme lösen wollten.</para>

<!--
<para>This is still how most free software projects are started, but less so
now than in 1997, when Raymond wrote those words.  Today, we have the
phenomenon of organizations&mdash;including for-profit
corporations&mdash;starting large, centrally-managed open source
projects from scratch.  The lone programmer, banging out some code to
solve a local problem and then realizing the result has wider
applicability, is still the source of much new free software, but is
not the only story.</para>
-->
<para>Die Motivation für die meisten freien Software-Projekte ist auch
heute noch dieselbe, wenn auch in geringerem Maße als um 1997, zu der Zeit als
Raymond diese Worte schrieb. Heute beobachten wir das Phänomen, dass 
Organisationen &ndash; auch gewinnorientierte Unternehmen &ndash; große, zentral 
organisierte Open-Source-Projekte anfangen. Der einsame Programmierer
der ein bisschen Code produziert, um ein lokales Problem zu lösen und dann
feststellt, dass das Ergebnis eine breitere Anwendbarkeit besitzt, ist 
immer noch die Quelle für vieles an freier Software, jedoch nicht
mehr die einzige.</para>

<!--
<para>Raymond's point is still insightful, however.  The essential
condition is that the producers of the software have a direct interest
in its success, because they use it themselves.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the OpenAdapter project (<ulink
url="http://www.openadapter.org/"/>), which was started by investment
bank Dresdner Kleinwort Wasserstein as an open source framework for
integrating disparate financial information systems, can hardly be
said to scratch any individual programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institution and its partners, and therefore if
the project fails to relieve them, they will know.  This arrangement
produces good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>
-->
<para>Raymonds Sicht ist aber immer noch aufschlussreich.
Diejenigen die Software produzieren, müssen ein direktes Interesse an
ihrem Erfolg haben, weil sie auch Benutzer sind. Wenn die Software nicht
macht was es soll, wird die Person oder Organisation die sie produziert,
es bei der täglichen Arbeit merken. Ein gutes Beispiel ist das OpenAdapter
Projekt (<ulink url="http://www.openadapter.org/"/>) der 
Investmentbank Dresdner Kleinwort Wasserstein, das als Open-Source-Framework 
zur Integration unterschiedlicher finanzieller Informationssysteme 
begonnen wurde, es kann wohl kaum als Bedürfnis eines eines einzelnen 
Programmierers bezeichnet werden, sondern als institutionelles 
Bedürfnis. Dieses Bedürfnis entsteht aber direkt aus den Erfahrungen
der Institution und ihrer Partner, wenn die Software ihre Aufgabe nicht
erfüllt, wird es somit bemerkt. Aus diesem Arrangement entsteht gute
Software, da Rückmeldungen an der richtigen Stelle ankommen. Die 
Software muss nicht verkauft werden, also können sie sich auf
<emphasis>ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben
um die <emphasis>eigenen</emphasis> Probleme zu lösen, um diese Lösung dann mit 
allen zu teilen. Es ist so ähnlich, als wäre das Problem eine Krankheit
und die Software die entsprechende Medizin um eine Epidemie in den Griff
zu bekommen.</para>

<!--
<para>This chapter is about how to introduce a new free software
project to the world, but many of its recommendations would sound
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.</para>
-->
<para>In diesem Kapitel geht es um die Frage, wie man der Welt ein neues 
freies Software-Projekt vorstellt. Viele seiner Empfehlungen klingen sehr 
nach einer Gesundheitsorganisation, die Medizin verteilen will. Die Ziele 
sind sich sehr ähnlich: Man will klarstellen, was die Medizin macht, sie
in die Hände der richtigen Leute bringen und sicherstellen, dass 
diejenigen die es erhalten, damit umzugehen wissen. Bei freier
Software will man aber auch ein paar der Empfänger zu einer Beteiligung
an der fortwährenden Forschungsarbeit zur Verbesserung der Medizin
bewegen.</para>

<!--
<para>Free software distribution is a twofold task.  The software
needs to acquire users, and to acquire developers.  These two needs
are not necessarily in conflict, but they do add some complexity to a
project's initial presentation.  Some information is useful for both
audiences, some is useful only for one or the other.  Both kinds of
information should subscribe to the principle of scaled presentation;
that is, the degree of detail presented at each stage should
correspond directly to the amount of time and effort put in by the
reader.  More effort should always equal more reward.  When the two do
not correlate tightly, people may quickly lose faith and stop
investing effort.</para>
-->
<para>Beim Vertrieb freier Software gibt es zwei Ziele. Die Software
muss sowohl Nutzer als auch Entwickler anziehen. Diese beiden 
Anforderungen stehen zueinander nicht zwangsläufig im Widerspruch, aber sie 
machen die anfängliche Präsentation des Projekts etwas komplexer. 
Manche Informationen sind für beide Gruppen nützlich, manche nur für 
die eine oder die andere. Beide Arten der Information sollten das 
Prinzip der skalierenden Präsentation verfolgen; d.h. dass die Menge an
Informationen sich jederzeit mit der Zeit und Anstrengung decken sollte,
die vom Leser aufgebracht wird. Eine größere Anstrengung sollte auch 
immer eine größere Belohnung mit sich bringen. Wenn beides nicht eng
miteinander korreliert, werden die Leser schnell die Hoffnung aufgeben
und aufhören Zeit zu investieren.</para>

<!--
<para>The corollary to this is that <emphasis>appearances
matter</emphasis>.  Programmers, in particular, often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride.  It's no accident that so many programmers exhibit
an antipathy for marketing and public relations work, nor that
professional graphic designers are often horrified at what programmers
come up with on their own.</para>
-->
<para>Daraus folgt: <emphasis>das Erscheinungsbild ist 
wichtig</emphasis>. Programmierern fällt es besonders schwer, das zu
glauben. Ihre Liebe zum Inhalt gegenüber dem Äußeren gehört fast
schon zum Berufsethos. Es ist kein Zufall, dass so viele Programmierer
gegen Marketing und Public Relations eine Antipathie hegen, oder dass
professionelle Grafiker über so manches erschrocken sind, worauf 
Programmierer von sich aus kommen.</para>

<!--
<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  For example, the very first thing a visitor learns about a
project is what its web site looks like.  This information is absorbed
before any of the actual content on the site is
comprehended&mdash;before any of the text has been read or links
clicked on.  However unjust it may be, people cannot stop themselves
from forming an immediate first impression.  The site's appearance
signals whether care was taken in organizing the project's
presentation.  Humans have extremely sensitive antennae for detecting
the investment of care.  Most of us can tell in one glance whether a
web site was thrown together quickly or was given serious thought.
This is the first piece of information your project puts out, and the
impression it creates will carry over to the rest of the project by
association.</para>
-->
<para>Das ist schade, denn es gibt Situationen, in denen das Aussehen
auch <emphasis>wirklich</emphasis> dem Inhalt entspricht. Die 
Präsentation eines Projekts ist genau solch ein Fall. Die erste
Information, die ein Besucher über ein Projekt erhält, ist die Gestaltung
seiner Webseite. Diese Information wird erfasst, bevor irgend ein
tatsächlicher Inhalt der Seite verstanden wird &ndash; bevor ein 
Text gelesen wurde oder auf einen Link geklickt wurde. Egal wie
ungerecht es sein mag, Menschen können sich nicht anders helfen, als sich
sofort einen ersten Eindruck zu verschaffen. Im Erscheinungsbild der
Seite wird deutlich, ob man sich beim Aufbau der Präsentation des
Projekts Mühe gemacht hat. Menschen haben eine extrem sensible Antenne
dafür, wieviel Mühe in etwas investiert wurde. Die meisten können mit
einem Blick erkennen, ob eine Seite eilig zusammengebastelt wurde oder
ob man sich ernsthafte Gedanken gemacht hat. Das ist die erste 
Information die Ihr Projekt nach außen gibt, und der hierdurch 
vermittelte Eindruck überträgt sich auf das übrige Projekt.</para>

<!--
<para>Thus, while much of this chapter talks about the content your
project should start out with, remember that its look and feel matter
too.  Because the project web site has to work for two different types
of visitors&mdash;users and developers&mdash;special attention
must be paid to clarity and directedness.  Although this is not the
place for a general treatise on web design, one principle is important
enough to deserve mention, particularly when the site serves multiple
(if overlapping) audiences: people should have a rough idea where a
link goes before clicking on it.  For example, it should be obvious
<emphasis>from looking at the links</emphasis> to user documentation
that they lead to user documentation, and not to, say, developer
documentation.  Running a project is partly about supplying
information, but it's also about supplying comfort.  The mere presence
of certain standard offerings, in expected places, reassures users and
developers who are deciding whether they want to get involved.  It
says that this project has its act together, has anticipated the
questions people will ask, and has made an effort to answer them in a
way that requires minimal exertion on the part of the asker.  By
giving off this aura of preparedness, the project sends out a message:
"Your time will not be wasted if you get involved," which is exactly
what people need to hear.</para>
-->
<para>Auch wenn sich dieses Kapitel thematisch um inhaltliche Fragen dreht,
sollten sie daran denken, dass das Erscheinungsbild eine Rolle spielt.
Da die Webseite für zwei Arten von Besuchern geeignet sein muss
&ndash; Benutzer und Entwickler &ndash; muss besonders auf Klarheit und
Führung geachtet werden. Auch wenn hier nicht die richtige Stelle für
eine allgemeine Abhandlung über Web-Design ist, gibt es ein
erwähnenswertes Prinzip, insbesondere wenn die Seite mehrere 
(überlappende) Zielgruppen ansprechen soll: Besucher sollten eine grobe
Vorstellung haben, wo ein Link hinführt, bevor sie darauf klicken. Das
Ziel eines Links zur Benutzer-Dokumentation sollte <emphasis>allein vom 
Anblick her</emphasis> deutlich sein, und keine
Missverständnisse aufkommen lassen, ob es sich nicht etwa um die Dokumentation
für Entwickler handelt. Beim Betrieb eines Projekts geht es zu einem Teil
darum, Informationen bereitzustellen, aber auch darum, ein Gefühl der
Bequemlichkeit zu vermitteln. Allein schon die Verfügbarkeit bestimmter
grundsätzlicher Angebote an der richtigen Stelle gibt Benutzern und
Entwicklern eine Sicherheit bei ihrer Entscheidung, ob sie sich 
beteiligen wollen oder nicht. Es sagt ihnen, dieses Projekt hat seine
Siebensachen beisammen, Fragen erahnt, die gestellt werden, und sich die
Mühe gemacht diese so zu beantworten, dass Fragesteller möglichst wenig
Einsatz aufbringen müssen. Indem das Projekt eine Aura der Vorbereitetheit
ausstrahlt, sendet es die folgende Botschaft aus:
"Du verschwendest deine Zeit nicht, wenn du dich beteiligst", 
und das ist genau die Botschaft, die Menschen hören wollen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<!--
<title>But First, Look Around</title>
-->
<title>Schauen Sie sich zuerst um</title>

<!--
<para>Before starting an open source project, there is one important
caveat:</para>
-->
<para>Bevor Sie ein Open-Source-Projekt anfangen, gibt es noch eine 
wichtige Warnung:</para>

<!--
<para>Always look around to see if there's an existing project that
does what you want.  The chances are pretty good that whatever problem
you want solved now, someone else wanted solved before you.  If they
did solve it, and released their code under a free license, then
there's no reason for you to reinvent the wheel today.  There are
exceptions, of course: if you want to start a project as an
educational experience, pre-existing code won't help; or maybe the
project you have in mind is so specialized that you know there is zero
chance anyone else has done it.  But generally, there's no point not
looking, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on
<ulink url="http://freecode.com/"/> (an open source project news
site, about which more will be said later), on
<ulink url="http://www.sourceforge.net/"/>, and in the Free Software
Foundation's directory of free software at
<ulink url="http://directory.fsf.org/"/>.</para>
-->
<para>Schauen Sie sich vorher um, ob nicht schon ein Projekt existiert,
das Ihre Anforderungen erfüllt. Die Wahrscheinlichkeit ist hoch, dass
unabhängig von dem Problem, das Sie lösen wollen, Ihnen jemand zuvorgekommen 
ist. Wenn das der Fall ist und der entsprechende Code unter eine freie
Lizenz gestellt wurde, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Ausnahmen: Falls Sie ein Projekt um der Lernerfahrung 
willen beginnen wollen, wird Ihnen bereits existierender Code nicht 
weiterhelfen. Vielleicht wissen Sie bereits von vornherein, dass Ihr
Problem so spezifisch ist, dass es mit Sicherheit noch von keinem
gelöst wurde. Im allgemeinen gibt es aber keinen Grund sich nicht 
umzuschauen, und der Lohn kann beträchtlich sein. Sollten die üblichen 
Suchmaschinen keine brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über 
Open-Source-Projekte (zu dieser Seite, später mehr), bei 
<ulink url="http://www.sourceforge.net/"/> oder beim Verzeichnis 
freier Software der Free Software Foundation 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<!--
<para>Even if you don't find exactly what you were looking for, you
might find something so close that it makes more sense to join that
project and add functionality than to start from scratch
yourself.</para>
-->
<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas derart ähnliches finden, dass es sinnvoller ist,
sich an diesem Projekt zu beteiligen und es um die fehlenden Funktionen
zu erweitern, als komplett von vorne anzufangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<!--
<title>Starting From What You Have</title>
-->
<title>Mit dem Vorhandenen beginnen</title>

<!--
<para>You've looked around, found that nothing out there really fits
your needs, and decided to start a new project.</para>
-->
<para>Sie haben sich umgeschaut, herausgefunden dass nichts Ihre 
Anforderungen erfüllt und sich entschlossen, ein neues Projekt zu
starten.</para>

<!--
<para>What now?</para>
-->
<para>Was nun?</para>

<!--
<para>The hardest part about launching a free software project is
transforming a private vision into a public one.  You or your
organization may know perfectly well what you want, but expressing
that goal comprehensibly to the world is a fair amount of work.  It is
essential, however, that you take the time to do it.  You and the
other founders must decide what the project is really about&mdash;that
is, decide its limitations, what it <emphasis>won't</emphasis> do as
well as what it will&mdash;and write up a mission statement.  This
part is usually not too hard, though it can sometimes reveal unspoken
assumptions and even disagreements about the nature of the project,
which is fine: better to resolve those now than later.  The next step
is to package up the project for public consumption, and this is,
basically, pure drudgery.</para>
-->
<para>Das Schwierigste beim Start eines neuen freien Software-Projekts 
ist die Verwandlung einer persönlichen Vision in eine öffentliche. Sie
oder Ihre Organisation mögen sehr wohl wissen was Sie wollen. Dieses
Ziel so auszudrücken, dass die Welt es versteht, ist erfordert ein 
beträchtliches Maß an Arbeit. Allerdings ist es von so grundsätzlicher
Bedeutung, dass Sie sich die Zeit dazu nehmen sollten. Sie und die anderen
Gründer müssen entscheiden, worum es in dem Projekt wirklich geht &ndash;
so müssen Sie über seine Grenzen entscheiden, was es abdecken wird und was
<emphasis>nicht</emphasis> &ndash; und ein Missionsziel 
(engl. mission statement) verfassen. Dieser Teil ist für
gewöhnlich nicht allzu schwer, auch wenn es manchmal unerwähnt 
gebliebene Annahmen, sogar Meinungsverschiedenheiten über die Natur des
Projekts aufdecken kann, was sogar gut ist:
Es ist besser diese jetzt auszuräumen als später. Der
nächste Schritt ist das Projekt für die öffentliche Wahrnehmung
aufzubereiten, was im Grunde genommen eine Schinderei ist.</para>

<!--
<para>What makes it so laborious is that it consists mainly of
organizing and documenting things everyone already
knows&mdash;"everyone", that is, who's been involved in the project so
far.  Thus, for the people doing the work, there is no immediate
benefit.  They do not need a <filename>README</filename> file giving
an overview of the project, nor a design document or user manual.
They do not need a carefully arranged code tree conforming to the
informal but widespread standards of software source distributions.
Whatever way the source code is arranged is fine for them, because
they're already accustomed to it anyway, and if the code runs at all,
they know how to use it.  It doesn't even matter, for them, if the
fundamental architectural assumptions of the project remain
undocumented; they're already familiar with that too.</para>
-->
<para>Diese Arbeit ist deshalb so mühselig, weil man hauptsächlich 
Dinge organisiert und dokumentiert, die jeder bereits kennt &ndash; 
d.h "jeder" der bislang am Projekt beteiligt ist. Für diejenigen die
die Arbeit machen, gibt es deshalb keinen direkten Nutzen. Sie
brauchen weder die <filename>README</filename>-Datei für einen Überblick
über das Projekt, noch Entwurfsdokumente oder Benutzerhandbücher.
Sie brauchen keine sorgsam aufbereitete Code-Struktur die mit den
zwar informellen aber verbreiteten Normen zur Veröffentlichung
von Quellen konform ist. Wie auch immer der Quellcode strukturiert ist,
es ist ihnen recht; sie sind ja bereits daran gewöhnt, und solange der 
Code läuft, wissen sie wie man ihn benutzt. Es macht ihnen
nicht einmal etwas aus, wenn grundlegende Annahmen über die 
Architektur des Projekts undokumentiert bleiben; auch mit ihnen sind
sie ja bereits vertraut.</para>

<!--
<para>Newcomers, on the other hand, need these things.  Fortunately,
they don't need them all at once.  It's not necessary for you to
provide every possible resource before taking a project public.  In a
perfect world, perhaps, every new open source project would start out
life with a thorough design document, a complete user manual (with
special markings for features planned but not yet implemented),
beautifully and portably packaged code, capable of running on any
computing platform, and so on.  In reality, taking care of all these
loose ends would be prohibitively time-consuming, and anyway, it's
work that one can reasonably hope volunteers will help with once the
project is under way.</para>
-->
<para>Neulinge andererseits brauchen all diese Dinge.
Glücklicherweise jedoch nicht alle auf einmal. Sie müssen nicht jede
erdenklich Ressource gleich parat haben, bevor Sie mit einem Projekt an die
Öffentlichkeit gehen. In einer perfekten Welt wäre ein neues
Open-Source-Projekt von Beginn an ausgestattet mit einem ausführlichen 
Entwurfsdokument, einem vollständigen Benutzerhandbuch (inklusive der
Hinweise auf Funktionen, die zwar geplant, aber noch nicht implementiert 
sind), wunderschönem und portabel gegliedertem Code, der auf jeder
Plattform läuft, usw. In Wirklichkeit wäre es unvertretbar zeitaufwendig,
auf all diese Dinge zu achten; und überhaupt sind das Arbeiten, bei
denen man davon ausgehen kann, dass sich Freiwillige beteiligen,
sobald das Projekt läuft.</para>

<!--
<para>What <emphasis>is</emphasis> necessary, however, is that enough
investment be put into presentation that newcomers can get past the
initial obstacle of unfamiliarity.  Think of it as the first step in a
bootstrapping process, to bring the project to a kind of minimum
activation energy.  I've heard this threshold called the
<firstterm>hacktivation energy</firstterm>: the amount of energy a
newcomer must put in before she starts getting something back.  The
lower a project's hacktivation energy, the better.  Your first task is
bring the hacktivation energy down to a level that encourages people
to get involved.</para>
-->
<para><emphasis>Wirklich</emphasis> notwendig ist jedoch, so viel in die
Präsentation zu investieren, dass Neulinge die ersten Hürden des 
Unbekannten überwinden können. Stellen Sie sich das wie den ersten 
Schritt beim Hochfahren vor, um dem Projekt zu einer Art minimaler
Aktivierungsenergie zu verhelfen. Dieser Grenzbereich wird mitunter
<firstterm>Hacktivierungs-Energie</firstterm> genannt: Die 
Energie, die Neulinge investieren müssen, bevor sie etwas zurückbekommen.
Je geringer die Hacktivierungs-Energie ist, desto besser. Ihre erste 
Aufgabe ist es, die Hacktivierungs-Energie auf ein Niveau zu senken,
das Leute dazu ermutigt, sich zu beteiligen.</para>

<!--
<para>Each of the following subsections describes one important aspect
of starting a new project.  They are presented roughly in the order
that a new visitor would encounter them, though of course the order in
which you actually implement them might be different.  You can treat
them as a checklist.  When starting a project, just go down the list
and make sure you've got each item covered, or at least that you're
comfortable with the potential consequences if you've left one
out.</para>
-->
<para>Jeder der folgenden Unterabschnitte, beschreibt einen wichtigen
Aspekt beim Start eines neuen Projekts. Sie werden ungefähr in der
Reihenfolge präsentiert, in der neue Besucher sie wahrnehmen werden,
natürlich kann die tatsächliche Reihenfolge auch abweichen.
Betrachten Sie sie als Checkliste.
Wenn Sie ein Projekt starten, gehen Sie die Liste durch und stellen Sie
sicher, dass alle Punkte erledigt sind oder zumindest dass Sie mit den 
möglichen Folgen zurechtkommen, wenn Sie einen Punkt auslassen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<!--
<title>Choose a Good Name</title>
-->
<title>Wählen Sie einen guten Namen</title>

<!--
<para>Put yourself in the shoes of someone who's just heard about your
project, perhaps by having stumbled across it while searching for
software to solve some problem.  The first thing they'll encounter is
the project's name.</para>
-->
<para>Versetzen Sie sich in die Lage von jemandem, der gerade von Ihrem 
Projekt erfahren hat, vielleicht ganz zufällig, bei der Suche nach einer 
Software, um ein irgendein Problem zu lösen. Das erste, womit er in 
Berührung kommen wird, ist der Name Ihres Projekts.</para>

<!--
<para>A good name will not automatically make your project successful,
and a bad name will not doom it&mdash;well, a
<emphasis>really</emphasis> bad name probably could do that, but we
start from the assumption that no one here is actively trying to make
their project fail.  However, a bad name can slow down adoption of the
project, either because people don't take it seriously, or because
they simply have trouble remembering it.</para>
-->
<para>Ein guter Name wird Ihr Projekt nicht automatisch erfolgreich
machen, und ein schlechter Name wird nicht seinen Untergang besiegeln &ndash;
nun ja, ein <emphasis>wirklich</emphasis> schlechter Name könnte das 
vielleicht tatsächlich, aber wir gehen davon aus, dass niemand versuchen 
wird, sein Projekt aktiv zu sabotieren. Allerdings kann ein schlechter
Name die Aufmerksamkeit für das Projekts schmälern, entweder weil die
Leute ihn nicht ernst nehmen oder schlicht deshalb, weil Sie ihn sich
nicht merken können.</para>

<!--
<para>A good name:
-->
<para>Ein guter Name:

<itemizedlist>
<!--
  <listitem><para>Gives some idea what the project does, or at least
            is related in an obvious way, such that if one knows the
            name and knows what the project does, the name will come
            quickly to mind thereafter.</para>
  </listitem>
-->
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das Projekt
            tut oder steht zumindest in einer so offensichtlichen 
            Beziehung dazu, dass man weiß was das Projekt tut, wenn man 
            den Namen kennt, und es deshalb später leicht hat, sich an 
            den Namen zu erinnern.</para>
  </listitem>
<!--
  <listitem><para>Is easy to remember.  Here, there is no getting
            around the fact that English has become the default
            language of the Internet: "easy to remember" means "easy
            for someone who can read English to remember."  Names that
            are puns dependent on native-speaker pronounciation, for
            example, will be opaque to the many non-native English
            readers out there.  If the pun is particularly compelling
            and memorable, it may still be worth it; just keep in mind
            that many people seeing the name will not hear it in their
            head the way a native speaker would.</para>
  </listitem>
-->
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
            Tatsache herum, dass Englisch zur Standardsprache im 
            Internet geworden ist: "einfach zu behalten" bedeutet in
            diesem Fall "Einfach zu behalten für jemanden, der Englisch
            lesen kann". Wortspiele, die auf der einheimischen Aussprache 
            beruhen, werden vielen Menschen, deren Muttersprache nicht 
            Englisch ist, unverständlich bleiben. Ist das Wortspiel
            besonders verlockend und einprägsam, kann es das wert
            sein; denken Sie aber daran, dass viele, die den Namen sehen,
            nicht dasselbe heraushören werden wie ein englischer 
            Muttersprachler.</para>
  </listitem>
<!--
  <listitem><para>Is not the same as some other project's name, and
            does not infringe on any trademarks.  This is just good
            manners, as well as good legal sense.  You don't want to
            create identity confusion.  It's hard enough to keep track
            of everything that's available on the Net already, without
            different things having the same name.</para>

            <para>The resources mentioned earlier in
            <xref linkend="look-around"/> are useful in
            discovering whether another project already has the name
            you're thinking of.  Free trademark searches are
            available at <ulink url="http://www.nameprotect.org/"/>
            and <ulink url="http://www.uspto.gov/"/>.</para>
  </listitem>
-->
  <listitem><para>Gleicht nicht dem eines anderen Projekts und verletzt 
            auch kein Markenrecht. Das ist einerseits höflich und 
            andererseits auch rechtlich sinnvoll, denn Sie wollen keine 
            Verwirrung über Identitäten anstiften. Es ist schwierig 
            genug, im Blick zu behalten, was das Netz zu bieten hat, auch
            ohne unterschiedliche Dinge mit demselben Namen.</para>

            <para>Die zuvor in <xref linkend="look-around"/> erwähnten 
            Quellen können Ihnen dabei helfen herauszufinden, ob ein
            anderes Projekt bereits den Namen trägt, den Sie im Sinn 
            haben. Die kostenlose Suche nach Markenzeichen ist über
            <ulink url="http://www.nameprotect.org/"/> und
            <ulink url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
<!--
  <listitem><para>If possible, is available as a domain name in the
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, and
            <systemitem>.org</systemitem> top-level domains.  You
            should pick one, probably <systemitem>.org</systemitem>,
            to advertise as the official home site for the project;
            the other two should forward there and are simply to
            prevent third parties from creating identity confusion
            around the project's name.  Even if you intend to host the
            project at some other site (see
            <xref linkend="starting-with-canned-hosting"/>), you
            can still register project-specific domains and forward
            them to the hosting site.  It helps users a lot to have a
            simple URL to remember.</para>
    </listitem>
-->
  <listitem><para>Ist idealerweise als Domain-Name verfügbar in den
            Top-Level-Domeins
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem>.
            Sie sollten eine von ihnen auswählen, vielleicht 
            <systemitem>.org</systemitem>, um sie als offizielle Seite
            des Projekts zu bewerben; die anderen beiden sollten darauf
            verweisen und einfach nur dazu dienen, andere zu hindern, 
            Verwirrung bezüglich Ihres Projektnamens zu stiften.
            Selbst wenn Sie vorhaben, das Projekt auf einer anderen Seite
            zu betreiben (siehe 
            <xref linkend="starting-with-canned-hosting"/>), können Sie
            immer noch die Projekt-spezifische URL registrieren und 
            diese auf die Seiten des Betreibers weiterleiten. Es hilft 
            dem Nutzer ungemein, nur eine einfache URL im Kopf behalten
            zu müssen.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<!--
<title>Have a Clear Mission Statement</title>
-->
<title>Formulieren Sie ein klares Missionsziel</title>

<!--
<para>Once they've found the project's web site, the next thing people
will look for is a quick description, a mission statement, so they can
decide (within 30 seconds) whether or not they're interested in
learning more.  This should be prominently placed on the front page,
preferably right under the project's name.</para>
-->
<para>Sobald Besucher ihre Projektseite gefunden haben, werden sie nach
einer kurzen Beschreibung, dem Ziel des Projekts suchen, um (innerhalb
von 30 Sekunden) entscheiden zu können, ob sie interessiert daran sind,
mehr zu erfahren. Das Ziel sollte auf der Frontseite einen auffälligen
Platz einnehmen, vorzugsweise gleich unter dem Projektnamen.</para>

<!--
<para>The mission statement should be concrete, limiting, and above
all, short.  Here's an example of a good one, from <ulink
url="http://www.openoffice.org/"/>:</para>
-->
<para>Die Formulierung des Missionsziels sollte anschaulich, klar
umrissen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
<!--
  <para><emphasis>To create, as a community, the leading international
  office suite that will run on all major platforms and provide access
  to all functionality and data through open-component based APIs and
  an XML-based file format.</emphasis></para>
-->
  <para><emphasis>Gemeinschaftlich die führende internationale 
  Office-Lösung erschaffen, die auf allen wichtigen Plattformen läuft und 
  den Zugriff auf alle Funktionen und Daten durch offene Schnittstellen
  und ein XML-basiertes Dateiformat erlaubt.</emphasis></para>
  </blockquote>

<!--
<para>In just a few words, they've hit all the high points, largely by
drawing on the reader's prior knowledge.  By saying "<emphasis>as a
community</emphasis>", they signal that no one corporation will
dominate development; "<emphasis>international</emphasis>" means that
the software will allow people to work in multiple languages and
locales; "<emphasis>all major platforms</emphasis>" means it will be
portable to Unix, Macintosh, and Windows.  The rest signals that open
interfaces and easily understandable file formats are an important
part of the goal.  They don't come right out and say that they're
trying to be a free alternative to Microsoft Office, but most people
can probably read between the lines.  Although this mission statement
looks broad at first glance, in fact it is quite circumscribed: the
words "<emphasis>office suite</emphasis>" mean something very concrete
to those familiar with such software.  Again, the reader's presumed
prior knowledge (in this case probably from MS Office) is used to keep
the mission statement concise.</para>
-->
<para>In nur wenigen Worten haben sie alle wichtigen Punkte erfasst,
hauptsächlich indem sie sich auf das Vorwissen der Leser stützen.
Mit "<emphasis>Gemeinschaftlich</emphasis>", 
signalisieren sie, dass keine einzelne Firma die Entwicklung dominieren
wird; "<emphasis>international</emphasis>" bedeutet, dass die Software
es Menschen erlauben wird, in mehreren Sprachen zu arbeiten; 
"<emphasis>alle wichtigen Plattformen</emphasis>" heißt für Unix, 
Macintosh und Windows. Das Übrige signalisiert, dass offene 
Schnittstellen und leicht verständliche Dateiformate ein wichtiger Teil
ihres Ziels sind. Sie sagen nicht offen, dass sie eine freie Alternative
zu Microsoft Office sein wollen, aber die meisten Menschen können zwischen 
den Zeilen lesen. Auch wenn dieser Satz auf den ersten Blick weitgreifend
erscheint, ist es tatsächlich recht begrenzt: Der Begriff
"<emphasis>Office-Lösung</emphasis>" bedeutet etwas ganz bestimmtes für 
diejenigen, die mit solcher Software vertraut sind. Die mutmaßlichen
Vorkenntnisse der Leser (in diesem Fall wahrscheinlich mit MS Office) 
werden ausgenutzt, um das Missionsziel kompakt zu halten.</para>

<!--
<para>The nature of a mission statement depends partly on who is
writing it, not just on the software it describes.  For example, it
makes sense for OpenOffice.org to use the words "<emphasis>as a
community</emphasis>", because the project was started, and is still
largely sponsored, by Sun Microsystems.  By including those words, Sun
indicates its sensitivity to worries that it might try to dominate the
development process.  With this sort of thing, merely demonstrating
awareness of the <emphasis>potential</emphasis> for a problem goes a
long way toward avoiding the problem entirely.  On the other hand,
projects that aren't sponsored by a single corporation probably don't
need such language; after all, development by community is the norm,
so there would ordinarily be no reason to list it as part of the
mission.</para>
-->
<para>Die Gestaltung des Missionsziels hängt teilweise davon ab, wer es 
schreibt und nicht von der Software die es beschreibt. So ist es für
Open Office beispielsweise sinnstiftend, das Wort
"<emphasis>gemeinschaftlich</emphasis>" zu verwenden, denn das Projekt
wurde gestartet und noch immer großteils gesponsort von Sun Microsystems.
Mit dieser Wortwahl zeigt man sich sensibel gegenüber Befürchtungen, die
Entwicklung könne einmal seitens Sun dominiert werden. In einer solchen 
Angelegenheit kann schon allein der Hinweis auf die 
<emphasis>Möglichkeit</emphasis> eines Problems einen wesentlichen 
Schritt für seine Ausräumung darstellen. 

Andererseits können Projekte, die nicht durch eine einzige Firma 
unterstützt werden, auf solche Formulierungen verzichten; schließlich 
ist die Entwicklung durch eine Gemeinschaft das Übliche, es gibt also 
normalerweise keinen Grund, dies im Missionsziel aufzuführen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<!--
<title>State That the Project is Free</title>
-->
<title>Sagen Sie, dass das Projekt frei ist</title>

<!--
<para>Those who remain interested after reading the mission statement
will next want to see more details, perhaps some user or developer
documentation, and eventually will want to download something.  But
before any of that, they'll need to be sure it's open source.</para>
-->
<para>Wer die Missionziele gelesen hat und noch interessiert ist, wird
nun weitere Einzelheiten erfahren wollen, vielleicht durch die
Benutzer- oder Entwicklerdokumentation, schließlich wird er
etwas herunterladen wollen. Doch vor alledem will er sicher sein,
dass es sich um Open Source handelt.</para>

<!--
<para><emphasis>The front page must make it unambiguously clear that
the project is open source.</emphasis> This may seem obvious, but you
would be surprised how many projects forget to do it.  I have seen
free software project web sites where the front page not only did not
say which particular free license the software was distributed under,
but did not even state outright that the software was free at all.
Sometimes the crucial bit of information was relegated to the
Downloads page, or the Developers page, or some other place that
required one more mouse click to get to.  In extreme cases, the
license was not given anywhere on the web site at all&mdash;the only
way to find it was to download the software and look inside.</para>
-->
<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wären aber überrascht darüber, wie viele Projekte es 
vergessen. Ich habe schon Projekte gesehen, deren Hauptseite nicht nur 
versäumte zu sagen, unter welcher Lizenz ihre Software veröffentlicht
wurde, sondern nicht einmal erwähnte, dass es sich um freie Software 
handelt. Manchmal erschien die entscheidende Information erst auf der 
Download-Seite, der Entwickler-Seite oder irgend einer andere Stelle die
einen Klick mehr erforderte. Im Extremfall wurde die Lizenz überhaupt
nicht auf der Site angegeben &ndash; die einzige Möglichkeit sie 
herauszufinden war, die Software herunterzuladen und hineinzuschauen.</para>

<!--
<para>Don't make this mistake.  Such an omission can lose many
potential developers and users.  State up front, right below the
mission statement, that the project is "free software" or "open source
software", and give the exact license.  A quick guide to choosing a
license is given in
<xref linkend="license-quickstart"/><phrase output="printed">
later in this chapter</phrase>, and
licensing issues are discussed in detail in <xref
linkend="legal"/>.</para>
-->
<para>Vermeiden Sie diesen Fehler. Durch solch ein Versäumnis können 
Ihnen viele potentieller Entwickler und Nutzer verloren gehen. Sagen Sie 
gleich vorweg, direkt unterhalb des Missionsziels, dass das Projekt 
freie Software oder Open-Source-Software ist, und geben Sie die genaue
Lizenz an. Eine kurze Anleitung zur Wahl einer Lizenz bietet der Abschnitt 
<xref linkend="license-quickstart"/><phrase output="printed">später in 
diesem Kapitel</phrase>; Lizenzfragen werden ausführlich im Kapitel
<xref linkend="legal"/> behandelt.</para>

<!--
<para>At this point, our hypothetical visitor has
determined&mdash;probably in a minute or less&mdash;that she's
interested in spending, say, at least five more minutes investigating
this project.  The next sections describe what she should encounter in
that five minutes.</para>
-->
<para>Bis hierhin hat sich unser hypothetischer Besucher entschieden 
&ndash; wahrscheinlich innerhalb der ersten Minute oder schon vorher 
&ndash; ob er interessiert ist, sagen wir, zumindest weitere fünf
Minuten in das Projekt zu investieren. Der nächste Abschnitt beschreibt,
was er innerhalb dieser fünf Minuten vorfinden sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<!--
<title>Features and Requirements List</title>
-->
<title>Funktionen und Anforderungen</title>

<!--
<para>There should be a brief list of the features the software
supports (if something isn't completed yet, you can still list it, but
put "<emphasis>planned</emphasis>" or
"<emphasis>in&nbsp;progress</emphasis>" next to it), and the kind of
computing environment required to run the software.  Think of the
features/requirements list as what you would give to someone asking
for a quick summary of the software.  It is often just a logical
expansion of the mission statement.  For example, the mission
statement might say:</para>
-->
<para>Es sollte eine kurze Liste der Funktionen geben, die von der 
Software unterstützt werden (Wenn etwas noch nicht fertig ist, können 
Sie es trotzdem auflisten, schreiben Sie aber
"<emphasis>geplant</emphasis>" oder "<emphasis>in&nbsp;Arbeit</emphasis>"
daneben), und der Anforderungen, die die Software an die Hardware stellt. 
Stellen Sie sich die Liste der Funktionen/Anforderungen wie etwas vor, 
das Sie jemandem geben würden, der eine Kurzzusammenfassung zu dieser 
Software wünscht. Oft ist sie einfach nur eine logische Erweiterung der 
Missionsziele. Das Missionsziel könnte zum Beispiel folgendes
beinhalten:</para>

  <blockquote>
<!--
  <para><emphasis>To create a full-text indexer and search engine
  with a rich API, for use by programmers in providing search
  services for large collections of text files.</emphasis></para>
-->
  <para><emphasis>Erstellung einer Volltext-Indexierungs- und 
  -Suchmaschine mit einer umfangreichen Schnittstelle (rich API) für 
  Programmierer, die Suchdienste über große Mengen von Text anbieten
  wollen.</emphasis></para>
  </blockquote>

<!--
<para>The features and requirements list would give the details,
clarifying the mission statement's scope:</para>
-->
<para>Die Liste der Funktionen und Anforderungen würde Details 
bieten, um das Missionsziel zu verdeutlichen:</para>

  <blockquote>
<!--
    <para><emphasis>Features:</emphasis></para>
-->
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Searches plain text, HTML, and
                XML</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Word or phrase searching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Suche nach Wörtern oder 
                Ausdrücke</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Fuzzy matching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(geplant) Unscharfe Suche</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Incremental updating of
                indexes</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(geplant) Inkrementelle Aktualisierung
                der Indexe</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Indexing of remote web
                sites</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(geplant) Indexierung von Ressourcen im
                Netzwerk</emphasis></para>
      </listitem>
    </itemizedlist>
<!--
    <para><emphasis>Requirements:</emphasis></para>
-->
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Python 2.2 or higher</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Enough disk space to hold the indexes
                (approximately 2x original data size)</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Genug Festplattenspeicher für die Indexe
                (ungefähr. doppelte Menge der
                Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<!--
<para>With this information, readers can quickly get a feel for
whether this software has any hope of working for them, and they can
consider getting involved as developers too.</para>
-->
<para>Durch diese Informationen gewinnen Leser schnell ein Gefühl dafür,
ob ihnen diese Software etwas nützen könnte, und sie können gleichzeitig
überlegen, ob sie sich als Entwickler beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<!--
<title>Development Status</title>
-->
<title>Stand der Entwicklung</title>

<!--
<para>People always want to know how a project is doing.  For new
projects, they want to know the gap between the project's promise and
current reality.  For mature projects, they want to know how actively
it is maintained, how often it puts out new releases, how responsive
it is likely to be to bug reports, etc.</para>
-->
<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten wollen sie wissen wie weit seine Versprechen und sein 
derzeitiger Stand auseinanderliegen. Bei einem ausgereiften Projekt 
wollen sie wissen, wie aktiv es gepflegt wird, wie oft neue Versionen 
veröffentlicht werden, wie schnell es wahrscheinlich auf Bug-Meldungen
reagieren wird usw.</para>

<!--
<para>To answer these questions, you should provide a development
status page, listing the project's near-term goals and needs (for
example, it might be looking for developers with a particular kind of
expertise).  The page can also give a history of past releases, with
feature lists, so visitors can get an idea of how the project defines
"progress" and how quickly it makes progress according to that
definition.</para>
-->
<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung einrichten, auf der die kurzfristigen Ziele
und Anfragen des Projekts aufgelistet werden (es könnte z.B. auf der 
Suche nach Entwicklern mit bestimmten Fachkenntnissen sein). Die Seite
kann auch eine Übersicht vergangener Versionen haben, mit einer 
Auflistung der jeweiligen Funktionen, damit Besucher sich ein Bild 
machen können, was in diesem Projekt unter "Fortschritt" verstanden wird
und wie schnell es nach diesem Verständnis vorankommt.</para>

<!--
<para>Don't be afraid of looking unready, and don't give in to the
temptation to hype the development status.  Everyone knows that
software evolves by stages; there's no shame in saying "This is alpha
software with known bugs.  It runs, and works at least some of the
time, but use at your own risk."  Such language won't scare away the
kinds of developers you need at that stage.  As for users, one of the
worst things a project can do is attract users before the software is
ready for them.  A reputation for instability or bugginess is very
hard to shake, once acquired.  Conservativism pays off in the long
run; it's always better for the software to be
<emphasis>more</emphasis> stable than the user expected than less, and
pleasant surprises produce the best kind of word-of-mouth.</para>
-->
<para>Fürchten Sie sich nicht davor, einen unfertigen Eindruck zu 
vermitteln und widerstehen Sie der Versuchung, den Entwicklungsstand 
besser darzustellen als er wirklich ist. Jeder weiß, dass sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Es ist Alpha-Software
und sie hat bekannte Fehler. Sie läuft zwar und funktioniert 
zumindest teilweise, trotzdem gilt: Nutzung auf eigene Gefahr". Diese
Ausdrucksweise wird nicht die Art von Entwicklern verschrecken, die Sie zu
dieser Zeit brauchen. Was die Nutzer angeht: Einer der schlimmsten 
Fehler, die ein Projekt machen kann, ist Nutzer anzulocken, für die die
Software noch nicht bereit ist. Der Ruf, instabil oder fehlerträchtig zu
sein, ist schwer wieder loszuwerden, wenn er dem Projekt einmal anhaftet. 
Auf lange Sicht zahlt es sich aus, konservativ zu sein; es ist besser 
wenn die Software <emphasis>stabiler</emphasis> läuft als erwartet,
und angenehme Überraschungen sorgen für die beste Mundpropaganda.</para>

<sidebar id="alpha-and-beta">
<!--
  <title>Alpha and Beta</title>
-->
  <title>Alpha und Beta</title>
<!--
  <para>The term <firstterm>alpha</firstterm> usually means a first
  release, with which users can get real work done and which has all
  the intended functionality, but which also has known bugs.  The main
  purpose of alpha software is to generate feedback, so the developers
  know what to work on.  The next stage, <firstterm>beta</firstterm>,
  means the software has had all the serious bugs fixed, but has not
  yet been tested enough to certify for release.  The purpose of beta
  software is to either become the official release, assuming no bugs
  are found, or provide detailed feedback to the developers so they
  can reach the official release quickly.  The difference between
  alpha and beta is very much a matter of judgement.</para>
-->
  <para>Der Begriff <firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit der Benutzer echte Arbeit erledigen können, die
  alle geplante Funktionen hat, aber auch bekannte Fehler. Der vorrangige
  Sinn von Alpha-Software ist, Rückmeldungen zu erhalten, damit die 
  Entwickler wissen, woran sie arbeiten sollen. Die nächste Stufe 
  <firstterm>beta</firstterm> bedeutet, dass in der Software alle groben 
  Fehler behoben wurden, aber noch nicht genug getestet wurde, um als zur 
  Herausgabe geeignet zu gelten. Der Sinn von Beta-Software ist entweder
  zur offiziellen Version zu werden, wenn keine Fehler gefunden wurden, 
  oder detailierte Rückmeldungen an die Entwickler zu geben, um die zügige 
  Fertigstellung der Version zu unterstützen. Der Unterschied zwischen 
  alpha und beta ist zum größten Teil eine Sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<!--
<para>The software should be downloadable as source code in standard
formats.  When a project is first getting started, binary (executable)
packages are not necessary, unless the software has such complicated
build requirements or dependencies that merely getting it to run would
be a lot of work for most people.  (But if this is the case, the
project is going to have a hard time attracting developers
anyway!)</para>
-->
<para>Man sollte die Software als Quelltext in den üblichen Formaten 
herunterladen können. Wenn ein Projekt noch am Anfang ist, sind
binäre (ausführbare) Dateien nicht nötig, es sei denn der
Build-Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten Leute einen Menge Arbeit wäre, die Software
überhaupt zum Laufen zu bringen. (Wenn das aber der Fall ist, wird 
das Projekt sowieso Schwierigkeiten haben, Entwickler 
anzuziehen.</para>

<!--
<para>The distribution mechanism should be as convenient, standard,
and low-overhead as possible.  If you were trying to eradicate a
disease, you wouldn't distribute the medicine in such a way that it
requires a non-standard syringe size to administer.  Likewise,
software should conform to standard build and installation methods;
the more it deviates from the standards, the more potential users and
developers will give up and go away confused.</para>
-->
<para>Die veröffentlichten Dateien herunterzuladen, sollte so bequem, 
standardkonform und mühelos sein wie möglich. Um eine Krankheit 
auszurotten, würden Sie die Medizin nicht so verteilen, dass man zur 
Anwendung eine unüblich Spritzengröße bräuchte. Ebenso sollte Software 
die üblichen Build- und Installationsmethoden beachten, denn je mehr
sie von diesen Standards abweicht, desto mehr potenzielle Benutzer und
Entwickler werden aufgeben und sich verwirrt abwenden.</para>

<!--
<para>That sounds obvious, but many projects don't bother to
standardize their installation procedures until very late in the game,
telling themselves they can do it any time: <emphasis>"We'll sort all
that stuff out when the code is closer to being ready."</emphasis>
What they don't realize is that by putting off the boring work of
finishing the build and installation procedures, they are actually
making the code take longer to get ready&mdash;because they
discourage developers who might otherwise have contributed to the
code.  Most insidiously, they don't <emphasis>know</emphasis> they're
losing all those developers, because the process is an accumulation of
non-events: someone visits a web site, downloads the software, tries
to build it, fails, gives up and goes away.  Who will ever know it
happened, except the person themselves?  No one working on the project
will realize that someone's interest and good will have been silently
squandered.</para>
-->
<para>Das hört sich offensichtlich an, aber viele Projekte machen sich
diese Mühe sehr lange Zeit nicht in der Annahme, dass sie es jederzeit
tun könnten: <emphasis>"Wir erledigen den Kram sobald der Code näher
an der Fertigstellung ist.".</emphasis> Hierbei übersehen sie jedoch,
dass das Hinausschieben der langweiligen Arbeiten an Build- und
Installations-Vorgängen auch die Fertigstellung vom Code hinausschiebt
&ndash; denn sie entmutigen Entwickler, die ansonsten etwas 
zum Code beigetragen hätten. Das Heimtückische daran ist, 
dass nicht einmal jemand davon <emphasis>erfährt</emphasis>, dass
Entwickler verlorengegangenen sind, denn der Vorgang ist eine 
Ansammlung von Nicht-Ereignissen: Jemand geht auf die Webseite, lädt 
die Software herunter, versucht einen Build zu machen, scheitert, gibt auf 
und geht seiner Wege. Wer außer der Person selbst wird jemals davon 
erfahren? Keiner im Projekt wird je bemerken, wie Interesse und 
Wohlwollen von jemanden lautlos verschwendet wurde.</para>

<!--
<para>Boring work with a high payoff should always be done early, and
significantly lowering the project's barrier to entry through good
packaging brings a very high payoff.</para>
-->
<para>Langweilige Arbeit mit einem hohen Nutzen sollte immer frühzeitig
erledigt werden, und das Herabsetzen der Einstiegshürden für ein Projekt
durch zahlt sich mit vielfachem Gewinn aus.</para>

<!--
<para>When you release a downloadable package, it is vital that you
give a unique version number to the release, so that people can
compare any two releases and know which supersedes the other.  A
detailed discussion of version numbering can be found in <xref
linkend="release-numbering"/>, and the details of standardizing
build and installation procedures are covered in
<xref linkend="packaging"/><phrase output="printed">, both
in <xref linkend="development-cycle"/></phrase>.</para>
-->
<para>Wenn Sie ein Paket zum Herunterladen freigeben ist es wichtig, eine
eindeutige Versionsnummer zu vergeben, damit die Ausgaben unterschieden
werden können und sehen welche die aktuellere ist. Eine 
ausführliche Diskussion über Versionsnummern finden Sie in 
<xref linkend="release-numbering"/>, und Details zur Standardisierung
von Build- und Installations-Vorgängen werden im Abschnitt 
<xref linkend="packaging"/><phrase output="printed">, sowie in
<xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<!--
<title>Version Control and Bug Tracker Access</title>
-->
<title>Zugriff auf Versionsverwaltung und Bugtracker</title>

<!--
<para>Downloading source packages is fine for those who just want to
install and use the software, but it's not enough for those who want
to debug or add new features.  Nightly source snapshots can help, but
they're still not fine-grained enough for a thriving development
community.  People need real-time access to the latest sources, and
the way to give them that is to use a version control system.  The
presence of anonymously accessible version controlled sources is a
sign&mdash;to both users and developers&mdash;that this project is
making an effort to give people what they need to participate.  If you
can't offer version control right away, then put up a sign saying you
intend to set it up soon.  Version control infrastructure is discussed
in detail in <xref linkend="vc"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.</para>
-->
<para>Den Quellcode herunterzuladen, mag für diejenigen ausreichend sein, 
die lediglich die Software installieren und benutzen wollen, das genügt
jedoch nicht für diejenigen, die sie weiterentwickeln wollen. Nächtliche 
Quelltext-Schnappschüsse können helfen, sind aber nicht ausreichend
fein für eine lebendige Entwicklergemeinschaft. Diese Leute brauchen 
Echtzeit-Zugriff auf den neusten Quellcode; ihn bereitzustellen, wird erst
durch die Benutzung einer Versionsverwaltung möglich. Anonymer Zugriff auf
den Quellcode, der unter Versionsverwaltung steht, ist ein Zeichen 
&ndash; für Entwickler wie auch für Nutzer &ndash; dass das Projekt sich 
Mühe gibt, den Leuten das für eine Beteiligung Nötige zu geben. Wenn
Sie nicht sofort eine Versionsverwaltung bereitstellen können, sollten
Sie zumindest darauf hinweisen, dass Sie dies demnächst vorhaben. Das
Thema Infrastruktur der Versionsverwaltung wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<!--
<para>The same goes for the project's bug tracker.  The importance of
a bug tracking system lies not only in its usefulness to developers,
but in what it signifies for project observers.  For many people, an
accessible bug database is one of the strongest signs that a project
should be taken seriously.  Furthermore, the higher the number of bugs
in the database, the better the project looks.  This might seem
counterintuitive, but remember that the number of bugs recorded really
depends on three things: the absolute number of bugs present in the
software, the number of users using the software, and the convenience
with which those users can register new bugs.  Of these three factors,
the latter two are more significant than the first.  Any software of
sufficient size and complexity has an essentially arbitrary number of
bugs waiting to be discovered.  The real question is, how well will
the project do at recording and prioritizing those bugs?  A project
with a large and well-maintained bug database (meaning bugs are
responded to promptly, duplicate bugs are unified, etc.) therefore
makes a better impression than a project with no bug database, or a
nearly empty database.</para>
-->
<para>Gleiches gilt für den Bugtracker. Die Bedeutung des Bugtracker liegt
nicht allein in seinem Nutzen für die Entwickler, sondern er ist auch ein
Signal an Außenstehende. Für viele ist eine öffentliche Bug-Datenbank
eines der stärksten Anzeichen dafür, dass ein Projekt ernstgenommen werden
sollte. Desweiteren ist ein Projekt um so besser, je mehr Fehler darin 
protokolliert sind. Auch wenn es sich widersprüchlich anhört, sollte man
bedenken, dass die Anzahl der erfassten Fehler von drei Dingen abhängt: 
Die absolute Anzahl in der Software enthaltene Fehler, die Anzahl seiner 
Benutzer und wie bequem es für diese Benutzer ist, neue Fehler
einzutragen. Von diesen dreien sind die letzten beiden wesentlich. Jede
ausreichen große und komplexe Software, enthält eine im Grunde genommen
beliebige Menge an Fehlern, die nur darauf warten, entdeckt zu werden. 
Die eigentliche Frage ist, wie gut kann das Projekt diese Fehler erfassen
und priorisieren? Ein Projekt mit einer großen und gut gepflegten 
Fehler-Datenbank (ein Zeichen dafür, dass schnell auf Bugs reagiert wird, 
Duplikate markiert werden, usw.) macht deshalb einen besseren Eindruck 
als ein Projekt ohne oder mit einer fast leeren Fehler-Datenbank.</para>

<!--
<para>Of course, if your project is just getting started, then the bug
database will contain very few bugs, and there's not much you can do
about that.  But if the status page emphasizes the project's youth,
and if people looking at the bug database can see that most filings have
taken place recently, they can extrapolate from that the project
still has a healthy <emphasis>rate</emphasis> of filings, and they
will not be unduly alarmed by the low absolute number of bugs
recorded.</para>
-->
<para>Am Anfang des Projekts wird die Fehler-Datenbank natürlich nur sehr
wenige Meldungen enthalten und es gibt nicht viel, das Sie dagegen 
tun könnten. Wenn die Statusseite aber das junge Alter hervorhebt
und wenn Leute, die die Bug-Datenbank betrachten, sehen können, dass
die meisten Einträge vor kurzem gemacht wurden, können sie leicht 
schlussfolgern, dass das Projekt immer noch eine gesunde 
<emphasis>Rate</emphasis> an Einträgen hat und werden dementsprechend 
über die niedrige absolute Anzahl an Bug-Meldungen nicht wirklich
beunruhigt sein .</para>

<!--
<para>Note that bug trackers are often used to track not only software
bugs, but enhancement requests, documentation changes, pending tasks,
and more.  The details of running a bug tracker are covered in
<xref linkend="bug-tracker"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>, so I won't
go into them here.  The important thing from a presentation point of
view is just to <emphasis>have</emphasis> a bug tracker, and to make
sure that fact is visible from the front page of the project.</para>
-->
<para>Man sollte auch beachten, dass Bugtracker oft nicht nur zur 
Verfolgung von Bugs, sondern auch für Verbesserungen an der Software, 
Änderungen an der Dokumentation, ausstehende Aufgaben und mehr benutzt
werden. Weiteres zum Betrieb eines Bugtrackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> im Kapitel 
<xref linkend="technical-infrastructure"/></phrase> behandelt, also 
werde ich hier nicht näher darauf eingehen. Das Wichtige aus Sicht der 
Präsentation ist überhaupt einen Bugtracker zu
<emphasis>haben</emphasis> und sicherzustellen, dass dieser Umstand
bereits auf der Hauptseite deutlich wird.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<!--
<title>Communications Channels</title>
-->
<title>Kommunikationskanäle</title>

<!--
<para>Visitors usually want to know how to reach the human beings
involved with the project.  Provide the addresses of mailing lists,
chat rooms, and IRC channels, and any other forums where others
involved with the software can be reached.  Make it clear that you and
the other authors of the project are subscribed to these mailing
lists, so people see there's a way to give feedback that will reach
the developers.  Your presence on the lists does not imply a
committment to answer all questions or implement all feature requests.
In the long run, most users will probably never join the forums
anyway, but they will be comforted to know that they
<emphasis>could</emphasis> if they ever needed to.</para>
-->
<para>Besucher wollen oft wissen, wie sie am Projekt beteiligte 
Menschen erreichen können. Veröffentlichen Sie deshalb Adressen von 
Mailinglisten, Chat-Räumen, IRC-Kanälen und anderen Foren, auf denen 
Beteiligte erreicht werden können. Stellen Sie klar, 
dass Sie und die anderen Autoren des Projekts auf diesen Listen
eingetragen sind, um den Besuchern zu zeigen , dass sie Rückmeldungen 
an die Entwickler richten können. Eine Anmeldung auf den
Mailinglisten beinhaltet für Sie nicht die Verpflichtung, alle Fragen 
zu beantworten oder alle Wünsche nach neuen Funktionen zu verwirklichen.
Auf lange Sicht betrachtet, nutzt die Mehrheit diese Foren sowieso nie,
aber es wird sie ermutigen zu wissen, dass sie es 
<emphasis>könnten</emphasis>, sollte es einmal nötig sein.</para>

<!--
<para>In the early stages of a project, there's no need to have
separate user and developer forums.  It's much better to have everyone
involved with the software talking together, in one "room."  Among
early adopters, the distinction between developer and user is often
fuzzy; to the extent that the distinction can be made, the ratio of
developers to users is usually much higher in the early days of the
project than later on.  While you can't assume that every early
adopter is a programmer who wants to hack on the software, you can
assume that they are at least interested in following development
discussions and in getting a sense of the project's direction.</para>
-->
<para>Am Anfang eines Projekts hat es keinen Sinn, die Foren für Benutzer
und Entwickler getrennt zu halten. Es ist viel besser, wenn alle 
Projektbeteiligten miteinander reden: in einem "Raum". Unter den ersten
Interessenten eines Projekts ist die Unterscheidung zwischen Entwickler 
und Nutzer oft verwaschen. Sofern sie überhaupt gemacht werden kann, gibt 
es in den frühen Tagen wesentlich mehr Entwickler im Verhältnis zu 
Nutzern als es später der Fall ist. Obwohl Sie nicht annehmen können,
dass jeder, der sich früh für das Projekt interessiert, ein Programmierer
ist, der am Quelltext der Software arbeiten will, können Sie annehmen, 
dass sie zumindest daran interessiert sind, die Diskussionen um die 
Entwicklung mitzuverfolgen und ein Gefühl für die Richtung des Projekts
zu entwickeln.</para>
<!--
   
<para>As this chapter is only about getting a project started, it's
enough merely to say that these communications forums need to exist.
Later, in <xref linkend="growth"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>, we'll examine where
and how to set up such forums, the ways in which they might need
moderation or other management, and how to separate user forums from
developer forums, when the time comes, without creating an
unbridgeable gulf.</para>
-->
<para>Da es in diesem Kapitel nur darum geht wie man ein Projekt startet,
belassen wir es dabei zu sagen, dass diese Foren existieren sollten. 
Später, in <xref linkend="growth"/><phrase output="printed"> im Kapitel 
<xref linkend="communications"/></phrase>, werden wir untersuchen, wo 
und wie man diese Foren aufbaut, inwiefern Sie möglicherweise
Moderation erfordern und wie man Foren für Nutzer und Foren für 
Entwickler voneinander löst wenn es nötig wird, ohne eine
unüberwindliche Kluft aufzureißen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<!--
<title>Developer Guidelines</title>
-->
<title>Richtlinien für Entwickler</title>

<!--
<para>If someone is considering contributing to the project, she'll
look for developer guidelines.  Developer guidelines are not so much
technical as social: they explain how the developers interact with
each other and with the users, and ultimately how things get
done.</para>
-->
<para>Wenn jemand sich überlegt, etwas zu einem Projekt beizutragen, 
wird er sich nach Richtlinien für Entwickler umschauen. Diese sind 
weniger technischer, als viel mehr sozialer Natur: Sie erklären, wie
Entwickler miteinander und mit Benutzern umgehen, also letzlich
wie die Dinge laufen sollten.</para>

<!--
<para>This topic is covered in detail in
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>, but the basic
elements of developer guidelines are:
-->
<para>Dieses Thema wird ausführlich in
<xref linkend="written-rules"/><phrase output="printed"> im Kapitel
<xref linkend="social-infrastructure"/></phrase> behandelt, aber die 
wesentlichen Elemente der Richtlinien sind:

<itemizedlist>
<!--
  <listitem><para>pointers to forums for interaction with other
            developers</para> 
  </listitem>
-->
  <listitem><para>Hinweise auf Foren für die Zusammenarbeit mit
            anderen Entwicklern.</para> 
  </listitem>
<!--
  <listitem><para>instructions on how to report bugs and submit
            patches</para>
  </listitem>
-->
  <listitem><para>Anleitungen wie man Fehler meldet und Patches 
            einreicht.</para>
  </listitem>
<!--
  <listitem><para>some indication of <emphasis>how</emphasis>
            development is usually done&mdash;is the project a
            benevolent dictatorship, a democracy, or something
            else</para>
  </listitem>
-->
  <listitem><para>Einige Hinweise darauf <emphasis>wie</emphasis>
            die Entwicklung für gewöhnlich abläuft &ndash; ob das Projekt
            eine gütige Diktatur, eine Demokratie oder etwas anderes
            ist.</para>
  </listitem>
</itemizedlist>

<!--
No pejorative sense is intended by "dictatorship", by the way.  It's
perfectly okay to run a tyranny where one particular developer has
veto power over all changes.  Many successful projects work this way.
The important thing is that the project come right out and say so.  A
tyranny pretending to be a democracy will turn people off; a tyranny
that says it's a tyranny will do fine as long as the tyrant is
competent and trusted.</para>
-->
Übrigens soll "Diktatur" in keiner Weise herabsetzend wirken. Es ist
völlig in Ordnung eine Tyrannei zu betreiben, bei dem ein bestimmter 
Entwickler das letzte Wort über alle Änderungen haben kann: viele 
erfolgreiche Projekte arbeiten in dieser Weise. Das Wichtige dabei ist,
dass das Projekt dies von vornherein klarstellt. Eine Tyrannei, die 
vorgibt eine Demokratie zu sein, wird sich Menschen abspenstig machen; 
eine Tyrannei die klar sagt was sie ist, wird gut zurecht kommen, sofern
der Tyrann kompetent und vertrauenswürdig ist.</para>
<!--
  
<para>See <ulink url="http://subversion.apache.org/docs/community-guide/"/>
for an example of particularly thorough developer guidelines, or
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> for
broader guidelines that focus more on governance and the spirit of
participation and less on technical matters.</para>
-->
<para>Siehe 
<ulink url="http://subversion.apache.org/docs/community-guide/"/>
für ein Beispiel besonders gründlicher Richtlinien für Entwickler oder
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> für
allgemeinere Richtlinien, die sich mehr auf die Steuerung und Teilnahme
am Projekt, als auf technische Angelegenheiten konzentrieren.</para>

<!--
<para>The separate issue of providing a programmer's introduction to
the software is discussed in <xref
linkend="developer-documentation"/><phrase output="printed">
later in this chapter</phrase>.</para>
-->
<para>Das etwas andere Thema, die Bereitstellung einer Projekt-Einführung
für Programmierer, wird im Abschnitt
<xref linkend="developer-documentation"/><phrase output="printed">
später in diesem Kapitel behandelt</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<!--
<title>Documentation</title>
-->
<title>Dokumentation</title>

<!--
<para>Documentation is essential.  There needs to be
<emphasis>something</emphasis> for people to read, even if it's
rudimentary and incomplete.  This falls squarely into the "drudgery"
category referred to earlier, and is often the first area where a new
open source project falls down.  Coming up with a mission statement
and feature list, choosing a license, summarizing development
status&mdash;these are all relatively small tasks, which can be
definitively completed and usually need not be returned to once done.
Documentation, on the other hand, is never really finished, which may
be one reason people sometimes delay starting it at all.</para>
-->
<para>Dokumentation ist unerlässlich. Es muss <emphasis>irgend
etwas</emphasis> zum Lesen geben, selbst wenn es nur rudimentär und 
unvollständig ist. Die Dokumentation ist ganz klar ein Teil der vorhin
erwähnten "Plackerei" und sie ist oft das erste, das in einem neuen 
Open-Source-Projekt zu kurz kommt. Die Missionsziele und eine Liste von 
Funktionen zu schreiben, die Wahl einer Lizenz, den Stand der Entwicklung
zusammenzufassen &ndash; das sind alles relativ kleine Aufgaben, die mit 
einem Schlag erledigt werden können; und wenn sie erledigt sind, muss man
sich normalerweise nicht weiter damit beschäftigen. Die Dokumentation
hingegen ist nie wirklich fertig, was vielleicht ein Grund dafür ist, 
dass man es manchmal hinauszögert, sie überhaupt in Angriff zu 
nehmen.</para>

<!--
<para>The most insidious thing is that documentation's utility to
those writing it is the reverse of its utility to those who will read
it.  The most important documentation for initial users is the basics:
how to quickly set up the software, an overview of how it works,
perhaps some guides to doing common tasks.  Yet these are exactly the
things the <emphasis>writers</emphasis> of the documentation know all
too well&mdash;so well that it can be difficult for them to see
things from the reader's point of view, and to laboriously spell out
the steps that (to the writers) seem so obvious as to be unworthy of
mention.</para>
-->
<para>Das heimtückischste daran ist, dass die Autoren der Dokumentation
keinen direkten Nutzen aus ihr ziehen, während sie für neue Nutzer
unerlässlich ist. Die wichtigste Dokumentation für neue Benutzer sind die
Grundlagen: Wie richte ich die Software zügig ein, eine Übersicht über
ihre Funktionsweise, vielleicht auch Anleitungen für häufige Aufgaben.
All dies ist den <emphasis>Autoren</emphasis> nur allzu gut
bekannt &ndash; so bekannt, dass es für sie schwierig sein kann, sich in 
die Lage der Leser zu versetzen, und mühsam die offensichtlichen
Einzelschritte zu buchstabieren, die aus ihrem Blickwinkel kaum der
Erwähnung wert scheinen.</para>

<!--
<para>There's no magic solution to this problem.  Someone just needs
to sit down and write the stuff, and then run it by typical new users
to test its quality.  Use a simple, easy-to-edit format such as HTML,
plain text, Texinfo, or some variant of XML&mdash;something that's
convenient for lightweight, quick improvements on the spur of the
moment.  This is not only to remove any overhead that might impede the
original writers from making incremental improvements, but also for
those who join the project later and want to work on the
documentation.</para>
-->
<para>Es gibt keine magische Lösung für dieses Problem. Es muss sich nur
jemand die Zeit nehmen, alles aufzuschreiben und die Brauchbarkeit der 
Dokumentation dann an neuen Nutzern zu testen. Benutzen Sie ein
einfaches, leicht zu bearbeitendes Format wie HTML, Klartext oder eine
XML-Variante &ndash; etwas geeignetes für kleine und spontane
Verbesserungen. Das reduziert nicht nur den Aufwand für die ersten
Autoren, die Dokumentation schrittweise zu verbessern, sondern auch 
allen, die später zum Projekt hinzukommen.</para>

<!--
<para>One way to ensure basic initial documentation gets done is to
limit its scope in advance.  That way, writing it at least won't feel
like an open-ended task.  A good rule of thumb is that it should meet
the following minimal criteria:</para>
-->
<para>Eine Möglichkeit, eine erste grundlegende Dokumentation abzusichern
ist es, ihren Umfang von vornherein einzuschränken. So erscheint die
Aufgabe zumindest nicht bodenlos. Als Richtlinie könnte gelten, dass
folgende minimale Bedingungen erfüllt werden:</para>

<itemizedlist>
<!--
  <listitem><para>Tell the reader clearly how much technical
            expertise they're expected to have.</para>
  </listitem>
-->
  <listitem><para>Sagen Sie dem Leser klar, welche technischen
            Kenntnisse erwartet werden.</para>
  </listitem>
<!--
  <listitem><para>Describe clearly and thoroughly how to set up
            the software, and somewhere near the beginning of the
            documentation, tell the user how to run some sort of
            diagnostic test or simple command to confirm that
            they've set things up correctly.  Startup
            documentation is in some ways more important than
            actual usage documentation.  The more effort someone has
            invested in installing and getting started with the
            software, the more persistent she'll be in figuring out
            advanced functionality that's not well-documented.
            When people abandon, they abandon early; therefore,
            it's the earliest stages, like installation, that need
            the most support.</para>
  </listitem>
-->
  <listitem><para>Beschreiben sie klar und deutlich, wie man die
            Software einrichtet, und nennen Sie dem Benutzer irgendwo am
            Anfang der Dokumentation, ein Merkmal oder einen Befehl, mit
            dem man prüfen kann, ob sie richtig eingerichtet wurde. Die
            erste Dokumentation ist in mancherlei Hinsicht wichtiger als
            eine echte Bedienungsanleitung. Je mehr Mühe jemand in die
            Installation und Einrichtung der Software investiert hat,
            desto beharrlicher wird er darin sein, fortgeschrittene, 
            unzureichend dokumentierte Funktionen zu erfassen. Wenn Leute 
            aufgeben, passiert es meistens gleich am Anfang; deshalb sind
            es die frühsten Phasen wie die Installation, bei der man die
            meiste Unterstützung braucht.</para>
  </listitem>
<!--
  <listitem><para>Give one tutorial-style example of how to do a
            common task.  Obviously, many examples for many tasks
            would be even better, but if time is limited, pick one
            task and walk through it thoroughly.  Once someone
            sees that the software <emphasis>can</emphasis> be
            used for one thing, they'll start to explore what else
            it can do on their own&mdash;and, if you're lucky,
            start filling in the documentation themselves.  Which
            brings us to the next point...</para>
  </listitem>
-->
  <listitem><para>Geben Sie Tutorial-artige Beispiele für typische
            Aufgaben. Natürlich sind viele Beispiele für viele
            Aufgaben noch besser, aber wenn die Zeit knapp ist, wählen
            Sie einen Punkt aus und schreiben Sie dazu eine ausführliche
            Anleitung. Sobald jemand sieht, dass die Software für eine
            Sache benutzt werden <emphasis>kann</emphasis>, wird er
            beginnen alleine herauszufinden, wofür sie noch zu gebrauchen
            ist &ndash; und wenn Sie Glück haben, dazu übergehen, die 
            Dokumentation selbst zu erweitern. Was uns zum nächsten Punkt 
            bringt...</para>
  </listitem>
<!--
  <listitem><para>Label the areas where the documentation is known
            to be incomplete.  By showing the readers that you are
            aware of its deficiencies, you align yourself with
            their point of view.  Your empathy reassures them that
            they don't face a struggle to convince the project of
            what's important.  These labels needn't represent
            promises to fill in the gaps by any particular date
           &mdash;it's equally legitimate to treat them as open
            requests for volunteer help.</para>
  </listitem>
-->
  <listitem><para>Kennzeichnen Sie unvollständige Bereiche der 
            Dokumentation als solche. Indem Sie dem Leser zeigen, dass 
            Sie sich über die Defizite im Klaren sind, stellen Sie sich 
            auf seine Sicht ein. Durch Einfühlungsvermögen geben Sie zu
            ihm verstehen, dass das Projekt nicht erst überzeugt werden
            muss, was wichtig ist. Solche Kennzeichen entsprechen keiner
            Verpflichtung, die Lücken bis zu einem bestimmten Datum
            auszufüllen &ndash; sie können auch als offenen Anfragen um
            Hilfe von Freiwilligen betrachtet werden.</para>
  </listitem>
</itemizedlist>

<!--
<para>The last point is of wider importance, actually, and can be
applied to the entire project, not just the documentation.  An
accurate accounting of known deficiencies is the norm in the open
source world.  You don't have to exaggerate the project's
shortcomings, just identify them scrupulously and dispassionately when
the context calls for it (whether in the documentation, in the bug
tracking database, or on a mailing list discussion).  No one will
treat this as defeatism on the part of the project, nor as a
commitment to solve the problems by a certain date, unless the project
makes such a commitment explicitly.  Since anyone who uses the
software will discover the deficiencies for themselves, it's much
better for them to be psychologically prepared&mdash;then the
project will look like it has a solid knowledge of how it's
doing.</para>
-->
<para>Der letzt Punkt hat tatsächlich umfassendere Bedeutung und kann auf 
das ganze Projekt angewendet werden, nicht nur auf die Dokumentation. Eine 
genaue Buchführung über bekannte Defizite ist in der Open-Source-Welt die 
Norm. Sie müssen die Mängel des Projekts nicht hochspielen, sondern
einfach gewissenhaft und leidenschaftslos aufzählen, wo die Veranlassung
gegeben ist (Das kann in der Dokumentation, im Bugtracker oder in einer 
Diskussion auf einer Mailingliste geschehen). Keiner wird das als vom
Projekt ausgehende Miesmacherei ansehen, oder als Verpflichtung die 
Probleme bis zu einem bestimmten Datum zu lösen, es sei denn, das Projekt
geht ausdrücklich eine solche Verpflichtung ein. Da jeder Nutzer diese 
Mängel selbst finden wird, ist es besser, sie psychologisch darauf 
vorbereiten &ndash; das gibt den Eindruck, dass im Projekt ein 
Bewusstsein über seinen Zustand besteht.</para>

<sidebar id="starting-a-faq">
<!--
  <title>Maintaining a FAQ</title>
-->
  <title>Die Pflege einer FAQ-Liste</title>

<!--
  <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  document) can be one of the best investments a project makes in
  terms of educational payoff.  FAQs are highly tuned to the questions
  users and developers actually ask&mdash;as opposed to the questions
  you might have <emphasis>expected</emphasis> them to ask&mdash;and
  therefore, a well-maintained FAQ tends to give those who consult it
  exactly what they're looking for.  The FAQ is often the first place
  users look when they encounter a problem, often even in preference
  to the official manual, and it's probably the document in your
  project most likely to be linked to from other sites.</para>
-->
  <para>Eine <firstterm>FAQ</firstterm> ("Frequently Asked 
  Questions"<footnote><para>Häufig gestellte Fragen</para></footnote>) 
  kann eine der besten Investitionen des Projekts hinsichtlich ihres
  Informationsgehalts sein. Eine FAQ ist auf 
  Fragen abgestimmt, die von Benutzern und 
  Entwickler wirklich gestellt werden &ndash; nicht auf Fragen die Sie
  vielleicht <emphasis>erwarten</emphasis> würden &ndash; und
  deshalb neigt eine gut gepflegte FAQ dazu, denjenigen die sie zu Rate
  ziehen, genau das zu geben, wonach sie suchen. Die FAQ ist oft die 
  erste Stelle, die Benutzer durchsuchen, wenn sie auf ein Problem 
  stoßen, sie ziehen es oft sogar dem offiziellen Handbuch vor und es 
  ist wahrscheinlich das Dokument in ihrem Projekt, worauf andere 
  Seiten am ehesten verweisen.</para>

<!--
  <para>Unfortunately, you cannot make the FAQ at the start of the
  project.  Good FAQs are not written, they are grown.  They are by
  definition reactive documents, evolving over time in response to
  people's day-to-day usage of the software.  Since it's impossible to
  correctly anticipate the questions people will ask, it is impossible
  to sit down and write a useful FAQ from scratch.</para>
-->
  <para>Leider können Sie die FAQ nicht am Anfang eines Projekts
  schreiben. Eine gute FAQ schreibt man nicht, man lässt sie wachsen.
  Sie sind schon per Definition auf Rückmeldungen angewiesen. FAQs 
  entwickeln sich erst mit der Zeit, durch die täglichen Nutzung der 
  Software. Da es unmöglich ist, die Fragen der Benutzer zu erahnen,
  ist es unmöglich sich hinzusetzen und von Grund auf eine nützliche
  FAQ zu schreiben.</para>

<!--
  <para>Therefore, don't waste your time trying to.  You may, however,
  find it useful to set up a mostly blank FAQ template, so there will
  be an obvious place for people to contribute questions and answers
  after the project is under way.  At this stage, the most important
  property is not completeness, but convenience: if the FAQ is easy to
  add to, people will add to it.  (Proper FAQ maintenance is a
  non-trivial and intriguing problem, and is discussed more in <xref
  linkend="faq-manager"/><phrase output="printed"> in
  <xref linkend="managing-volunteers"/></phrase>.)</para>
-->
  <para>Verschwenden Sie also nicht Ihre Zeit damit, es zu versuchen.
  Sie können jedoch eine größtenteils leere FAQ einrichten, als Vorlage
  und offensichtlichen Ort, an dem Leute Fragen und Antworten eintragen
  können, wenn das Projekt erst einmal läuft. Zunächst ist wichtigste 
  Eigenschaft einer FAQ aber nicht ihre Vollständigkeit, sondern ihre
  Einfachheit: Wenn es einfach ist, neue Einträge zu anzufügen, wird dies
  auch getan werden. (Die vernünftige Pflege einer FAQ ist eine nicht
  ganz triviale, aber faszinierende Angelegenheit, die in 
  <xref linkend="faq-manager"/><phrase output="printed"> im Kapitel
  <xref linkend="managing-volunteers"/></phrase> weiter behandelt 
  wird.)</para>
</sidebar>

<sect3 id="documentation-availability">
<!--
<title>Availability of documentation</title>
-->
<title>Erreichbarkeit der Dokumentation</title>

<!--
<para>Documentation should be available from two places: online
(directly from the web site), <emphasis>and</emphasis> in the
downloadable distribution of the software (see
<xref linkend="packaging"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>).  It needs to be
online, in browsable form, because people often read documentation
<emphasis>before</emphasis> downloading software for the first time,
as a way of helping them decide whether to download at all.  But it
should also accompany the software, on the principle that downloading
should supply (i.e., make locally accessible) everything one needs to
use the package.</para>
-->
<para>Die Dokumentation sollte an zwei Stellen erreichbar sein: Online
(direkt auf der Website) <emphasis>und</emphasis> in der zum Download
verfügbaren Ausgabe der Software (siehe 
<xref linkend="packaging"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>). Sie sollte online in 
durchsuchbarer Form vorliegen, weil Interessierte die Dokumentation oft 
lesen, <emphasis>bevor</emphasis> sie die Software zum ersten Mal 
herunterladen, um besser entscheiden zu können, ob sie dies überhaupt
tun sollen. Prinzipiell, sollte die Dokumentation aber auch der Software
beiliegen, denn ein veröffentlichtes Paket sollte alles enthalten
(d.h. lokal verfügbar machen), was man braucht um die Software zu
benutzen.</para>

<!--
<para>For online documentation, make sure that there is a link that
brings up the <emphasis>entire</emphasis> documentation in one HTML
page (put a note like "monolithic" or "all-in-one" or "single large
page" next to the link, so people know that it might take a while to
load).  This is useful because people often want to search for a
specific word or phrase across the entire documentation.  Generally,
they already know what they're looking for; they just can't remember
what section it's in.  For such people, nothing is more frustrating
than encountering one HTML page for the table of contents, then a
different page for the introduction, then a different page for
installation instructions, etc.  When the pages are broken up like
that, their browser's search function is useless.  The separate-page
style is useful for those who already know what section they need, or
who want to read the entire documentation from front to back in
sequence.  But this is <emphasis>not</emphasis> the most common way
documentation is accessed.  Far more often, someone who is basically
familiar with the software is coming back to search for a specific
word or phrase.  To fail to provide them with a single, searchable
document would only make their lives harder.</para>
-->
<para>Im Falle der Online-Dokumentation sollten Sie für einen Link sorgen,
der auf <emphasis>vollständige</emphasis> Dokumentation auf einer einzigen 
HTML-Seite verweist (schreiben Sie einen Hinweis wie "monolitisch" oder
"umfangreiche Einzelseite" daneben, damit die Leser nicht überrascht sind
wenn es beim Laden etwas Zeit braucht). Das ist nützlich, da Leute oft die 
ganze Dokumentation nach einem bestimmten Wort oder eine Wendung absuchen 
wollen. Im Allgemeinen wissen sie schon, wonach sie suchen, können sich 
nur nicht an welcher Stelle es stand. In dieser Situation gibt es nichts
frustrierenderes, als je eine HTML-Seite für Inhaltsangabe, eine für die
Einleitung, eine weitere für die Installationsanleitung, usw zu haben. 
Wenn die Seiten so aufgeteilt sind, machen sie die Suchfunktion des 
Browsers wertlos. Eine in mehrere Seiten aufgebrochene Dokumentation ist
gut, wenn man weiß, welchen Abschnitt man braucht oder die ganze 
Dokumentation von vorne nach hinten durchlesen möchte. Das ist aber 
<emphasis>nicht</emphasis> die häufigste Art auf die Dokumentation 
zuzugreifen. Viel häufiger kennt sich jemand im Grunde genommen mit
der Software aus und kehrt zurück, um nach einem bestimmten Wort oder
Ausdruck zu suchen. Keine monolitische Datei bereitzustellen, würde in 
solchen Fällen das Leben unnötig erschweren.</para>

</sect3>

<sect3 id="developer-documentation">
<!--
<title>Developer documentation</title>
-->
<title>Entwickler-Dokumentation</title>

<!--
<para>Developer documentation is written to help programmers
understand the code, so they can repair and extend it.  This is
somewhat different from the <emphasis>developer guidelines</emphasis>
discussed earlier, which are more social than technical.  Developer
guidelines tell programmers how to get along with each other;
developer documentation tells them how to get along with the code
itself.  The two are often packaged together in one document for
convenience (as with the <ulink
url="http://subversion.apache.org/docs/community-guide/"/> example given
earlier), but they don't have to be.</para>
-->
<para>Die Entwickler-Dokumentation wird geschrieben, damit Programmierer 
den Code verstehen, um ihn reparieren und erweitern zu können. Sie
unterscheidet sich ein wenig zu den vorhin erwähnten 
<emphasis>Richtlinien für Entwickler</emphasis>, die eher sozialer als
technischer Natur sind. Entwickler-Richtlinien sagen den Programmierern,
wie sie miteinander zurecht kommen; die Entwickler-Dokumentation 
hingegen sagt ihnen, wie sie mit dem Code zurechtkommen. Beide werden 
oft der Bequemlichkeit halber gemeinsam in einem Dokument angeboten
(wie im oben erwähnten Beispiel
<ulink url="http://subversion.apache.org/docs/community-guide/"/>), 
müssen dies jedoch nicht.</para>

<!--
<para>Although developer documentation can be very helpful, there's no
reason to delay a release to do it.  As long as the original authors
are available (and willing) to answer questions about the code, that's
enough to start with.  In fact, having to answer the same questions
over and over is a common motivation for writing documentation.  But
even before it's written, determined contributors will still manage to
find their way around the code.  The force that drives people to spend
time learning a code base is that the code does something useful for
them.  If people have faith in that, they will take the time to figure
things out; if they don't have that faith, no amount of developer
documentation will get or keep them.</para>
-->
<para>Obwohl die Entwickler-Dokumentation sehr hilfreich sein kann,
gibt es keinen Grund, um ihretwillen eine Freigabe zu verzögern. So 
lange die ursprünglichen Autoren verfügbar (und bereit) sind, Fragen zum
Code zu beantworten, genügt das für den Anfang. Tatsächlich ist eine 
häufige Motivation zum Schreiben der Dokumentation, dass man wieder und 
wieder die immer gleichen Fragen beantworten muss. Aber selbst bevor sie 
geschrieben ist, wird es entschlossene Freiwillige gelingen, sich einen
Weg durch den Code zu bahnen. Was Menschen dazu treibt, ihre Zeit mit
dem Erarbeiten einer Codebasis zu verbringen, ist das der Code aus
ihrer Sicht etwas Nützliches tut. Solange sie sich dessen gewiss sind,
nehmen sich die Zeit, Probleme zu lösen; ohne diese Zuversicht wird sie
keine auch noch so gute Dokumentation anlocken oder halten
können.</para>

<!--
<para>So if you have time to write documentation for only one
audience, write it for users.  All user documentation is, in effect,
developer documentation as well; any programmer who's going to work on
a piece of software will need to be familiar with how to use it.
Later, when you see programmers asking the same questions over and
over, take the time to write up some separate documents just for
them.</para>
-->
<para>Wenn Sie also nur die Zeit zum Schreiben einer Dokumentation haben,
so schreiben Sie eine für Benutzer. Jede Dokumentation für Benutzer ist
auch für die Entwickler effektiv; jeder Programmierer, der an einer 
Software arbeitet, muss auch damit vertraut sein, wie man sie benutzt.
Wenn Sie später sehen, wie Programmierer andauernd die gleichen Fragen 
stellen, nehmen Sie sich die Zeit, eine paar separate Dokumente eigens
für sie zu schreiben.</para>

<!--
<para>Some projects use wikis for their initial documentation, or even
as their primary documentation.  In my experience, this really only
works if the wiki is actively edited by a few people who agree on how
the documentation is to be organized and what sort of "voice" it
should have.  See
<xref linkend="wikis"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for
more.</para>
-->
<para>Manche Projekte nutzen Wikis für die allererste Dokumentation, oder 
sogar für die Hauptdokumentation. Nach meiner Erfahrung funktioniert das 
nur dann, wenn das Wiki aktiv von einer Handvoll Leuten bearbeitet wird, 
die hinsichtlich der Organisation und des Tonfalls der Dokumentation
einig sind. Mehr dazu steht in 
<xref linkend="wikis"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase>.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<!--
<title>Example Output and Screenshots</title>
-->
<title>Beispiel-Ausgaben und Screenshots</title>

<!--
<para>If the project involves a graphical user interface, or if it
produces graphical or otherwise distinctive output, put some samples
up on the project web site.  In the case of interface, this means
screenshots; for output, it might be screenshots or just files.  Both
cater to people's need for instant gratification: a single screenshot
can be more convincing than paragraphs of descriptive text and mailing
list chatter, because a screenshot is inarguable proof that the
software <emphasis>works</emphasis>.  It may be buggy, it may be hard
to install, it may be incompletely documented, but that screenshot is
still proof that if one puts in enough effort, one can get it to
run.</para>
-->
<para>Ein Projekt mit graphischer Benutzeroberfläche oder graphischen
oder anderen markanten Ausgaben sollte Beispiele auf der Website des 
Projekts anbieten. Im Fall einer Benutzeroberfläche wären es Screenshots;
für Ausgaben können es Screenshots oder vielleicht nur Dateien sein.
Beide befriedigen das Bedürfnis des Menschen nach direkter Belohnung:
Ein einziges Bild kann überzeugender sein, als ganze Abstätze von
Beschreibungen oder Geplapper auf Mailinglisten, denn ein Bild 
ist ein unverkennbarer Beweis dafür, dass die Software 
<emphasis>funktioniert</emphasis>. Sie mag ihre Fehler haben, schwer 
zu installieren und unvollständig dokumentiert sein, aber ein Bild ist
immerhin ein Beweis, dass man sie zum Laufen bringen kann,
wenn man sich nur genug Mühe gibt.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
<!--
  <para>Since screenshots can be daunting until you've actually made a
  few, here are basic instructions for making them.  Using the Gimp
  (<ulink url="http://www.gimp.org/"/>), open
  <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
  choose <guimenuitem>Single&nbsp;Window</guimenuitem> or
  <guimenuitem>Whole&nbsp;Screen</guimenuitem>, then click
  <guimenuitem>OK</guimenuitem>.  Now your next mouse click will
  capture the window or screen clicked on as an image in the Gimp.
  Crop and resize the image as necessary, using the instructions at 
  <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
-->
  <para>Screenshots können einschüchtern, wenn man noch nie welche 
  gemacht hat, deshalb hier ein kleine Anleitung. Mit "The Gimp"
  (<ulink url="http://www.gimp.org/"/>), öffnen Sie 
  <guimenu>Datei</guimenu>-&gt;<guimenu>Erstellen</guimenu>-&gt;
  <guimenu>Bildschirmfoto...</guimenu>, und wählen Sie
  <guimenuitem>Ein&nbsp;einzelnes&nbsp;Fenster&nbsp;aufnehmen</guimenuitem>
  oder 
  <guimenuitem>Den&nbsp;ganzen&nbsp;Bildschirm&nbsp;aufnehmen</guimenuitem>, 
  klicken Sie dann
  auf <guimenuitem>Aufnehmen</guimenuitem>. Ziehen Sie nun den 
  Kreuz-Cursor auf das gewünschte Fenster (dieser Schritt entfällt bei
  ganzem Bildschirm) um das Bild in The Gimp aufzunehmen. 
  Ändern und schneiden Sie anschließend das Bild bei Bedarf 
  nach den Anweisungen auf <ulink 
  url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<!--
<para>There are many other things you could put on the project web
site, if you have the time, or if for one reason or another they are
especially appropriate: a news page, a project history page, a related
links page, a site-search feature, a donations link, etc.  None of
these are necessities at startup time, but keep them in mind for the
future.</para>
-->
<para>Sie können der Website des Projekts noch vieles mehr hinzufügen,
wenn die Zeit dazu reicht, oder wenn es aus irgend einem Grund besonders
passend erscheint: Eine Seite mit Neuigkeiten, eine Seite mit der 
Historie des Projekts, eine Seite mit verwandten Links, eine 
Suchfunktion, ein Link für Spenden, usw. Nichts davon ist am Anfang 
notwendig, aber man sollte es für später im Hinterkopf behalten.</para>

<sect2 id="starting-with-canned-hosting">
<!--
<title>Canned Hosting</title>
-->
<title>Hosting-Pakete</title>

<!--
<para>There are a few sites that provide free hosting and
infrastructure for open source projects: a web area, version control,
a bug tracker, a download area, chat forums, regular backups, etc.
The details vary from site to site, but the same basic services are
offered at all of them.  By using one of these sites, you get a lot
for free; what you give up, obviously, is fine-grained control over
the user experience.  The hosting service decides what software the
site runs, and may control or at least influence the look and feel of
the project's web pages.</para>
-->
<para>Es gibt ein paar Sites die kostenlos die Infrastruktur für 
Open-Source-Projekte bereitstellen: einen Web-Bereich, Versionsverwaltung, 
einen Bugtracker, einen Download-Bereich, Foren, regelmäßiges Backup
usw. Die Details unterscheiden sich zwar von Site zu Site, aber das
Wesentliche wird bei allen angeboten. Durch die Nutzung dieser Sites
erhalten Sie vieles umsonst, müssen dafür aber die Kontrolle über die
Benutzerführung teilweise aufgeben. Der Hosting-Dienst entscheidet 
darüber, welche Software die Site benutzt, und kann so Look and Feel
der Projektseiten bestimmen oder zumindest beeinflussen.</para>

<!--
<para>See
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for a more
detailed discussion of the advantages and disadvantages of canned
hosting, and a list of sites that offer it.</para>
-->
<para>Siehe
<xref linkend="canned-hosting"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für eine 
detailliertere Diskussion über Vor- und Nachteile von Hosting-Paketen
und eine Liste von Sites die sie anbieten.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<!--
<title>Choosing a License and Applying It</title>
-->
<title>Die Wahl einer Lizenz</title>

<!--
<para>This section is intended to be a very quick, very rough guide to
choosing a license.  Read <xref linkend="legal"/> to understand
the detailed legal implications of the different licenses, and how the
license you choose can affect people's ability to mix your software
with other free software.</para>
-->
<para>Dieser Abschnitt soll eine schnelle und sehr grobe Anleitung zur
Wahl einer Lizenz bieten. Lesen Sie <xref linkend="legal"/> um die 
rechtlichen Folgen der verschieden Lizenzen im Detail besser zu verstehen 
und zu erkennen, inwiefern sich Ihre Lizenz-Entscheidung auf die 
Möglichkeit auswirkt, Ihre Software mit anderer freier Software zu
kombinieren.</para>

<!--
<para>There are a great many free software licenses to choose from.
Most of them we needn't consider here, as they were written to satisfy
the particular legal needs of some corporation or person, and wouldn't
be appropriate for your project.  We will restrict ourselves to just
the most commonly used licenses; in most cases, you will want to
choose one of them.</para>
-->
<para>Sie können aus einer Menge von Lizenzen für freie Software wählen. 
Die meisten müssen wir hier nicht beachten, da sie für die speziellen
rechtlichen Bedürfnisse einer bestimmten Firma oder Person geschrieben
wurden und für Ihr Projekt nicht angemessen wären. Wir beschränken uns
auf die üblichsten Lizenzen; in den meisten Fällen werden Sie sich für
eine von ihnen entscheiden wollen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<!--
<title>The "Do Anything" Licenses</title>
-->
<title>"Alles ist erlaubt"-Lizenzen</title>

<!--
<para>If you're comfortable with your project's code potentially being
used in proprietary programs, then use
an <firstterm>MIT/X-style</firstterm> license.  It is the simplest of
several minimal licenses that do little more than assert nominal
copyright (without actually restricting copying) and specify that the
code comes with no warranty.  See
<xref linkend="license-choosing-mit-x"/> for details.</para>
-->
<para>Wenn Sie kein Problem damit haben, dass der Code Ihres Projekts
in proprietären Anwendungen benutzt wird, können Sie eine 
<firstterm>MIT/X</firstterm>-artige Lizenz nutzen. Es ist die einfachste 
der verschiedenen Minimal-Lizenzen, die wenig mehr leisten als die 
Vervielfältigungsrechte abzusichern (ohne dabei wirklich die 
Vervielfältigung einzuschränken) und zu erklären, dass keiner für den
Code haftet. Weiteres darüber finden Sie in 
<xref linkend="license-choosing-mit-x"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<!--
<title>The GPL</title>
-->
<title>Die GPL</title>

<!--
<para>If you don't want your code to be used in proprietary programs,
use the GNU General Public License
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is
probably the most widely recognized free software license in the world
today.  This is in itself a big advantage, since many potential users
and contributors will already be familiar with it, and therefore won't
have to spend extra time to read and understand your license.  See
<xref linkend="license-choosing-gpl"/><phrase output="printed">
in <xref linkend="legal"/></phrase> for details.</para>
-->
<para>Wenn Sie nicht wollen, dass Ihr Code in proprietären Anwendungen
verwendet wird, benutzen Sie die GNU General Public 
License<footnote><para>Allgemeine Öffentliche Lizenz</para></footnote>
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>). Die GPL ist 
heute die wahrscheinlich bekannteste Lizenz für freie Software der 
Welt. Das ist an und für sich schon ein großer Vorteil, da viele 
potentielle Benutzer und Teilnehmer bereits mit ihr vertraut sein 
werden und deshalb keine zusätzliche Zeit aufbringen müssen, um Ihre 
Lizenz zu lesen und zu verstehen. Für weiter Details siehe
<xref linkend="license-choosing-gpl"/><phrase output="printed">
in <xref linkend="legal"/></phrase>.</para>

<sidebar>
<!--
<para>If users interact with your code primarily over a
network&mdash;that is, the software is usually part of a hosted
service&mdash;then consider using the <firstterm>GNU Affero
GPL</firstterm> instead.  See
<xref linkend="gnu-affero-gpl"/><phrase output="printed"> in
<xref linkend="legal"/></phrase> for more.</para>
-->
<para>Wenn die Benutzer auf Ihren Code vorwiegend über ein Netzwerk
zugreifen &ndash; d.h. wenn die Software typischerweise Teil eines
Hostingdienstes ist &ndash; dann sollten Sie alternativ die Wahl der
<firstterm>GNU Affero GPL</firstterm> in Betracht ziehen. Siehe
<xref linkend="gnu-affero-gpl"/><phrase output="printed"> in
<xref linkend="legal"/></phrase> für weitere Informationen.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<!--
<title>How to Apply a License to Your Software</title>
-->
<title>Anwendung einer Lizenz</title>

<!--
<para>Once you've chosen a license, you should state it on the
project's front page.  You don't need to include the actual text of
the license there; just give the name of the license, and make it link
to the full license text on another page.</para>
-->
<para>Wenn Sie sich für eine Lizenz entschieden haben, sollten Sie diese
auf Ihrer Hauptseite benennen. Sie brauchen nicht den kompletten Text der
Lizenz dort anzugeben; der Name und ein Verweis auf den vollständigen
Text reichen vollkommen aus.</para>

<!--
<para>This tells the public what license you
<emphasis>intend</emphasis> the software to be released under, but
it's not sufficient for legal purposes.  For that, the software itself
must contain the license.  The standard way to do this is to put the
full license text in a file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>), and then put a short notice at the top
of each source file, naming the copyright date, holder, and license,
and saying where to find the full text of the license.</para>
-->
<para>Damit erklären Sie der Öffentlichkeit, mit welcher Lizenz Sie 
<emphasis>vorhaben</emphasis> die Software zu veröffentlichen, 
rechtliche gesehen reicht dass aber nicht. Dafür muss die Software
selbst die Lizenz enthalten. Meistens wird das gemacht, indem der
komplette Text der Lizenz in einer Datei namens 
<filename>COPYING</filename> (oder <filename>LICENSE</filename>)
abgelegt wird; dann fügen sie jeder Quellcode-Datei am Beginn eine knappe
Notiz bei, in der Sie Copyright-Datum, -Inhaber und Lizenz benennen
und angeben, wo der vollständige Text der Lizenz zu finden ist.</para>

<!--
<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>
-->
<para>Davon gibt es viele Variationen, also werden wir uns hier nur
ein Beispiel anschauen. Die GNU GPL sagt, dass man einen Hinweis wie
diesen an den Anfang jeder Datei des Quellcodes setzen sollte.</para>

<!--
<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;
</screen>
-->
<screen> 
Copyright (C) [Jahr]  [Name des Autors]

Dieses Programm ist freie Software. Sie können es unter den 
Bedingungen der GNU General Public License, wie von der Free Software
Foundation veröffentlicht, weitergeben und/oder modifizieren, entweder
gemäß Version 2 der Lizenz oder (nach Ihrer Option) jeder späteren 
Version.

Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, dass es
Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne
die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR 
EINEN BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public
License.

Sie sollten ein Exemplar der GNU General Public License zusammen mit
diesem Programm erhalten haben. Falls nicht, schreiben Sie an die Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110, USA.<footnote><para>Diese Übersetzung von Katja Lachmann im 
Auftrag der S.u.S.E. GmbH – <ulink url="http://www.suse.de"/> und 
überarbeitet von <ulink url="http://www.peter.gerwinski.de/">Peter 
Gerwinski</ulink>, G-N-U GmbH – <ulink url="http://www.g-n-u.de"/>, 
wird hier zum besseren Verständnis verwendet. In Ihrer
Anwendung sollten Sie jedoch die Englische Originalfassung benutzen, die
Sie hier <ulink url="http://www.gnu.org/licenses/gpl.html#SEC4"/> 
finden, da diese Übersetzung nicht offiziell oder im rechtlichen Sinne 
anerkannt ist. Die vollständige Übersetzung der GPL finden Sie hier
<ulink url="http://www.gnu.de/documents/gpl.de.html"/></para></footnote> 
</screen>
<!--
<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename>, but that's where it's usually put.  (You
could change the above notice to state that directly.)  This template
also gives a geographical address from which to request a copy of the
license.  Another common method is to give a link to a web page
containing the license.  Just use your judgement and point to wherever
you feel the most permanent copy of the license is maintained, which
might simply be somewhere on your project's web site.  In general, the
notice you put in each source file does not have to look exactly like
the one above, as long as it starts with the same notice of copyright
holder and date, states the name of the license, and makes it clear
where to view the full license.</para>
-->
<para>Es wird nicht explizit erwähnt, dass der vollständige Text der
Lizenz in der Datei <filename>COPYING</filename> steht, es ist aber
meistens der Fall. (Sie könnten den obigen Hinweis abändern um die 
Quelle direkt anzugeben.) Diese Vorlage gibt Ihnen auch eine 
Post-Adresse über die Sie sich eine Kopie der Lizenz zusenden lassen
können. Noch häufiger wird auf die Lizenz per URL einer Webseite 
verwiesen, die den kompletten Text der Lizenz enthält. Die Entscheidung, 
wo die beständigste Kopie dieser Lizenz gepflegt wird, sei Ihnen
überlassen, vielleicht ist es auch einfach die Webseite Ihres Projekts.
Im Allgemeinen muss der Hinweis am Anfang jeder Datei nicht genau so
aussehen wie der obige, sofern er mit dem Hinweis auf Inhaber des 
Copyrights, Datum und Lizenz ausgestattet ist und dem Hinweis, wo der
komplette Lizenztext zu finden ist.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<!--
<title>Setting the Tone</title>
-->
<title>Den Ton angeben</title>

<!--
<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  If the
project is being opened up after years of closed, in-house
development, its development processes will change, and you will have
to prepare the existing developers for that change.</para>
-->
<para>Bis jetzt haben wir Aufgaben behandelt die einmal beim
Aufbau des Projekts zu erledigen sind: Eine Lizenz wählen, die 
Website einrichten usw. Die wichtigsten Aspekte beim Start  
eines Projekts sind aber dynamisch. Es ist einfach, eine Adresse für
eine Mailingliste zu wählen; aber dafür zu sorgen, dass dort die
Kommunikation beim Thema und produktiv bleibt, ist eine ganz andere 
Sache. Wenn das Projekt nach Jahren der geschlossenen Entwicklung 
geöffnet wird, verändert sich der Entwicklungsprozess, und Sie werden die 
bestehenden Entwickler auf diesen Wandel vorbereiten müssen.</para>

<!--
<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>
-->
<para>Die ersten Schritte sind die schwersten, da es für zukünftiges
Verhalten noch keine Beispiele oder Erwartungen gibt, nach denen man 
sich richten könnte. Beständigkeit in einem Projekt entsteht nicht durch
formale Richtlinien, sondern durch eine von allen geteilte, schwer 
greifbare, kollektive Weisheit, die sich mit der Zeit entwickelt. Oft 
gibt es auch geschriebene Regeln, die aber im wesentlichen eine 
Zusammenfassung der sich fortwährend weiterentwickelnden Vereinbarungen
sind, an denen sich das Projekt wirklich orientiert. Die schriftlichen 
Richtlinien legen die Kultur des Projekts nicht fest, sondern beschreiben
sie eher, und selbst das nur näherungsweise.</para>

<!--
<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive the centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>
-->
<para>Dafür gibt es ein paar Gründe. Wachstum und hohe Fluktuation sind 
keineswegs so schädlich für die Herausbildung sozialer Normen, 
wie man vielleicht denken würde. So lange Veränderungen nicht
<emphasis>zu</emphasis> schnell ablaufen, haben auch Neulinge Zeit,
Abläufe zu lernen, später werden sie diese Regeln selbst anzuwenden und 
durchsetzen. Bedenken Sie, wie Kinderlieder Jahrhunderte überdauern. Es
gibt heute Kinder die ungefähr die gleichen Lieder singen wie Kinder
vor hunderten von Jahren, auch wenn keines von ihnen heute noch am
Leben ist. Jüngere Kinder hören die Lieder, wie sie von den älteren
gesungen werden und wenn sie wiederum älter sind, singen sie vor den
anderen jüngeren Kindern. Dabei geben sie die Lieder natürlich nicht
bewusst weiter, aber die Lieder überleben trotzdem, weil sie 
regelmäßig und weitergegeben werden. Die Lebenszeit freier 
Software-Projekte wird vielleicht nicht in Jahrhunderten gemessen
(zumindest bis noch nicht), aber die Dynamik der Übertragung ist 
ziemlich dieselbe. Die Fluktuation ist allerdings viel höher und 
muss bei der Weitergabe durch eine aktivere und bewusstere 
Anstrengungen ausgeglichen werden.</para>

<!--
<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; for once
established, they will be largely self-perpetuating.</para>
-->
<para>Diese Anstrengung wird dadurch unterstützt, dass Neuankömmlige 
für gewöhnlich soziale Normen erwarten und auch suchen. 
Das liegt einfach in der Natur des Menschen. In einer Gruppe,
die durch ein gemeinsames Bestreben vereint ist, sucht man
instinktiv nach Verhaltensmustern, um sich als Mitglied dieser Gruppe
darzustellen. Sie sollten früh Beispiele setzen, um das Verhalten
der Mitglieder so zu beeinflussen, dass es für das Projekt nützlich
ist; einmal etabliert, werden sie überwiegend von selbst
weiterbestehen.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<!--
<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.tigris.org/"/>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>
-->
<para>Es folgen ein paar Beispiele, um gute Präzedenzfälle zu setzen.
Es ist keine ausführliche Liste, sondern lediglich eine Veranschaulichung
der Idee, dass es hilfreich ist, die Stimmung für die Zusammenarbeit 
im Projekt bereits frühzeitig zu prägen. Rein physikalisch mögen die
einzelnen Entwickler jeder für sich in einem Raum arbeiten,
Sie können jedoch eine Menge dafür tun, ihnen das 
<emphasis>Gefühl</emphasis> zu geben, sie würden alle in einem gemeinsamen
Raum arbeiten. Je mehr sie sich so fühlen, desto mehr Zeit werden sie 
für das Projekt aufwenden wollen. Ich habe diese Beispiele gewählt, da
sie in dem Subversion-Projekt aufkamen, 
(<ulink url="http://subversion.tigris.org/"/>), das ich seit seiner 
Gründung tätig und beobachtend begleite. Sie gelten aber nicht 
allein für Subversion; diese Situationen werden in den meisten 
Open-Source-Projekten aufkommen, und sie sollten als Gelegenheit 
betrachtet werden, die Dinge auf dem richtigen Fuß zu erwischen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<!--
<title>Avoid Private Discussions</title>
-->
<title>Private Diskussionen vermeiden</title>

<!--
<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>
-->
<para>Selbst nachdem Sie ein Projekt an die Öffentlichkeit gebracht
haben, werden Sie und die anderen Gründungsmitglieder manchmal damit
konfrontiert werden, schwierige Fragen innerhalb eines kleineren
Kreises durch private Kommunikation lösen zu müssen. Das gilt besonders
am Anfang des Projekts, wo viele wichtige Entscheidungen zu treffen 
sind und es meist nur wenige Freiwillige gibt, die qualifiziert wären, 
sie zu treffen. All die offensichtlichen Nachteile öffentlicher 
Diskussionen auf Mailinglisten werden greifbar vor Ihnen liegen: 
Die bei E-Mail-Diskussionen unvermeidbare Verzögerung, die für einen
Konsens erforderliche Zeit, die Mühe sich mit naiven Freiwilligen
auseinandersetzen zu müssen die meinen, alles zu verstehen (solche gibt
es in jedem Projekt; manchmal bringen sie im nächsten Jahr die besten 
Beiträge, manchmal bleiben sie ewig naiv), die Person die nicht 
versteht, warum Sie nur das Problem X lösen wollen, wenn es 
offensichtlich eine Untermenge des größeren Problems Y ist, usw. Die 
Verlockung, diese Unterhaltungen hinter verschlossenen Türen zu führen 
und sie als vollendete Tatsache zu präsentieren oder zumindest als 
nachdrückliche Empfehlung einer vereinigten und einflussreichen 
Wählergruppe, ist tatsächlich groß.</para>

<!--
<para>Don't do it.</para>
-->
<para>Tun Sie's nicht.</para>

<!--
<para>As slow and cumbersome as public discussions can be, they're
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious volunteer would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:
-->
<para>So langsam und mühselig öffentliche Diskussionen auch sein mögen,
sie sind auf lange Sicht trotzdem vorzuziehen. Wichtige Entscheidungen
privat zu treffen, ist Gift für Freiwillige. Kein Freiwilliger der seine
Sache ernst meint, würde es lange in einer Umgebung aushalten, in dem
alle wichtigen Entscheidungen von einer geheimen Versammlung getroffen
werden. Desweiteren hat die öffentliche Diskussion den Vorteil, dass
ihre positiven Nebenwirkungen viel länger fortbestehen als die
kurzlebige technische Frage um die es geht:

<itemizedlist>
  <listitem>
<!--
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be tracking
        silently, gleaning information about the software.</para>
-->
  <para>Die Diskussion wird dabei helfen, neue Entwickler auszubilden
        und zu unterrichten. Sie können nie wissen, wie viele Augen die
		Diskussion beobachten; selbst wenn die Meisten sich nicht 
		beteiligen, kann es sein, dass viele sie im Stillen mitverfolgen,
		um Informationen über das Projekt zu sammeln.</para>
  </listitem>
  <listitem>
<!--
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
-->
  <para>Bei der Diskussion werden <emphasis>Sie</emphasis> die Kunst
		erlernen, technische Angelegenheiten für Leute zu erklären die 
        mit der Software nicht so vertraut sind wie Sie. Das ist eine 
        Fähigkeit, die Übung erfordert und nicht durch die Unterhaltung
		mit Ebenbürtigen erlangt werden kann.</para>
  </listitem>
  <listitem>
<!--
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
-->
  <para>Die Diskussion und ihre Ergebnisse werden auf ewig in den 
  		öffentlichen Archiven verfügbar sein und es zukünftigen 
		Diskussionen ermöglichen, Wiederholungen zu vermeiden. Siehe
        <xref linkend="using-archives"/><phrase output="printed"> im 
        Kapitel<xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<!--
<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than one would intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>
-->
<para>Schließlich besteht die Möglichkeit, dass jemand auf der 
Mailingliste einen echten Beitrag zu der Diskussion leisten könnte, indem
er eine Idee aufbringt, an die Sie nie gedacht hätten. Es ist schwer zu 
sagen, wie wahrscheinlich das ist; es hängt schlicht von der Komplexität
des Problems und dem erforderlichen Grad der Spezialisierung ab.
Wenn ich aber ein Beispiel anführen darf, wage ich zu behaupten, dass 
es viel wahrscheinlicher ist, als man es intuitiv erwarten würde. Im
Subversion-Projekt glaubten wir (die Gründer), mit einer tiefen und
komplexen Problematik konfrontiert zu sein, über die wir uns
seit ein paar Monaten viele Gedanken gemacht hatten; und offen gesagt
zweifelten wir daran, dass irgendjemand auf der kürzlich eingerichteten
Mailingliste etwas Wertvolles zu der Diskussion beizutragen hätte.
Wir nahmen also den einfachen Weg und begannen, unsere technischen
Ideen in privaten E-Mails untereinander auszutauschen, bis ein 
Beobachter des Projekts<footnote><para>Wir haben zwar noch nicht das
Thema der Namensnennung und Anerkennung angesprochen, aber um auch zu
praktizieren, was ich später predigen werde: Der Name des Beobachters
war Brian Behlendorf; und er war es, der darauf hingedeutet hat, wie
wichtig es ist, alle Diskussionen öffentlich zu halten, es sei denn es
gibt einen bestimmten Grund für Geheimhaltung.</para></footnote> davon
Wind bekam und uns bat, die Diskussion auf die öffentliche Mailingliste
zu verlegen. Wir verdrehten zwar ganz schön die Augen, taten es aber
&ndash; und waren ganz erstaunt über die Anzahl aufschlussreicher
Kommentare und Vorschläge, die sich recht schnell ergaben. In vielen
Fällen boten Leute Ideen an, die uns nie in den Sinn gekommen wären. Es
stellte sich heraus, dass ein paar <emphasis>sehr</emphasis> kluge Köpfe
auf dieser Liste waren; sie hatten nur auf den richtigen Köder 
gewartet. Es ist wahr, dass die resultierenden Diskussionen länger 
dauerten, als wenn wir sie privat gehalten hätten, allerdings waren sie
um vieles produktiver, was die zusätzliche Zeit in jedem Fall wert
war.</para>

<!--
<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>
-->
<para>Ohne in allzu verallgemeinernde Aussagen, wie "Die Gruppe ist
immer schlauer als der Einzelne" abzugleiten (wir kennen alle genügend
Gruppen, die daran zweifeln lassen), muss man doch anerkennen, dass es 
bestimmte Aktivitäten gibt, für die Gruppen besonders geeignet sind. 
Ausführliche Gutachten sind eine; schnell auf viele Ideen zu kommen
eine weitere. Die Qualität dieser Ideen hängt natürlich davon ab,
wie hochwertig die Gedanken waren, die man hineingesteckt hat. Sie
werden aber nie erfahren, was für geistreiche Denker da draußen sind,
solange Sie ihnen keine echten Herausforderungen bieten.</para>

<!--
<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>
-->
<para>Es gibt natürlich auch Diskussionen, die man im Privaten führen
muss; im Verlauf des Buches werden wir Beispiele dafür sehen. Das leitende 
Prinzip sollte aber sein: <emphasis>Solange es keinen Grund gibt, etwas
privat zu regeln, sollte es öffentlich geschehen.</emphasis></para>

<!--
<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion, and there's
no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>
-->
<para>Dies in Gang zu setzen, erfordert Ihre Einflussnahme. Es 
reicht nicht lediglich sicherzustellen, dass Ihre eigenen Nachrichten
an die öffentliche Mailingliste gehen; Sie müssen auch andere dazu 
bewegen, ihre unnötig privaten Unterhaltungen öffentlich zu halten. Wenn
jemand versucht, eine private Diskussion anzufangen, und es keinen Grund
gibt, sie privat zu halten, sollten Sie sich verpflichtet fühlen, sofort
eine angemessene übergeordnete Diskussion zu eröffnen. Sie sollten nicht 
einmal direkt auf das Thema eingehen, bevor Sie nicht entweder die 
Diskussion erfolgreich an einem öffentlichen Ort gelenkt haben oder 
deutlich erkannt haben, dass sie tatsächlich besser privat gehalten werden 
sollte. Wenn Sie sich konsequent so verhalten, werden die Beteiligten es
ziemlich schnell mitbekommen und gleich die öffentlichen Foren 
benutzen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<!--
<title>Nip Rudeness in the Bud</title>
-->
<title>Unhöflichkeit im Keim ersticken</title>

<!--
<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack <emphasis>first</emphasis>, as a
separate issue unto itself, and only afterward move on to the
technical content.</para>
-->
<para>Sie sollten von Anfang an, gleich nachdem Ihr Projekte an die 
Öffentlichen geht, null Toleranz gegenüber unhöflichem oder 
beleidigendem Verhalten in seinen Foren zeigen. Null Toleranz heißt 
nicht unbedingt, diese technisch durchzusetzen. Sie sollten diese Leute 
nicht aus der Liste entfernen, wenn sie einen anderen Teilnehmer 
"flamen", oder ihnen wegen abfälligen Bemerkungen den Commit-Zugriff
entziehen. (Theoretisch müssten Sie eventuell auf solche Mittel 
zurückgreifen, aber erst nachdem alle anderen erschöpft sind &ndash; was 
am Anfang eines Projekts per Definition noch nicht der Fall ist.) Null 
Toleranz bedeutet, schlechtes Benehmen niemals einfach unbemerkt
geschehen zu lassen. Wenn jemand zum Beispiel eine technische
Bemerkung zusammen mit einem <foreignphrase>argumentum ad 
hominem</foreignphrase> gegen einem anderen Entwickler koppelt, ist es
zwingend notwendig, dass Ihre Reaktion als <emphasis>erstes</emphasis>
den persönlichen Angriff anspricht, als separate Angelegenheit, und erst 
dann auf den technischen Inhalt eingeht.</para>

<!--
<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>
-->
<para>Leider ist es sehr leicht und allzu üblich, dass konstruktive
Diskussionen in destruktive "flame wars" ausarten. Menschen werden
Dinge sagen, die sie nie von Angesicht zu Angesicht sagen würden. Die
Themen dieser Diskussionen verstärken nur diesen Effekt: Bei
technischen Angelegenheiten glauben Menschen oftmals, dass es nur eine
richtige Antwort zu den meisten Fragen gibt und dass eine
Abweichung von ihrer Antwort nur durch Ignoranz oder
Dummheit des Anderen erklärt werden kann. Den Vorschlag einer Person als
dämlich zu bezeichnen, ist oft nur einen winzigen Schritt davon entfernt, 
die Person selbst als dämlich zu bezeichnen. Tatsächlich ist es oft schwer 
zu unterscheiden, wo die technische Diskussion aufhört und die persönliche
Beleidigung anfängt, was auch ein Grund ist warum drastische Maßnahmen 
oder Bestrafungen nicht angebracht sind. Sie sollten stattdessen, sobald
Ihnen derartiges auffällt, eine Nachricht schreiben, die nachdrücklich 
darauf hinweist wie wichtig es ist, die Unterhaltung in einem freundlichen 
Ton zu führen, ohne dabei jemanden zu beschuldigen, absichtlich giftig 
gewesen zu sein. Leider hören sich diese "Netter-Polizist"-Nachrichten 
meist an wie die Predigt einer Vorschullehrerin, die ihre Klasse 
über gutes Benehmen belehrt:</para>

    <blockquote>
<!--
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>
-->
      <para><emphasis>Lasst uns bitte zuerst mit den u.U. ad hominem
      Bemerkungen aufhören; J's Entwurf der Sicherheitsschicht als "naiv 
	  und dumm gegenüber allen Grundprinzipien der Informationssicherheit" 
	  zu bezeichnen. Ob das so stimmt 
      oder nicht, es ist in jedem Fall nicht die Art, eine Diskussion zu 
      führen. J hat seinen Entwurf in guter Absicht vorgeschlagen. 
      Wenn er Fehler aufweist, weist darauf hin und wir werden sie 
      beheben oder einen neuen Entwurf suchen. Ich bin mir sicher, dass
      M niemanden persönlich beleidigen wollte, aber er hat sich
      unglücklich ausgedrückt, und wir wollen versuchen, hier 
	  konstruktiv zu bleiben.</emphasis></para>

<!--
      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
-->
      <para><emphasis>Und jetzt zu dem Entwurf. Ich denke M hatte recht 
      als er sagte, ...</emphasis></para>
    </blockquote>

<!--
<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>
-->
<para>So gestelzt sich solche Antworten auch anhören, sie haben doch
eine messbare Wirkung. Wenn Sie immer wieder auf solches Verhalten 
hindeuten, aber keine Entschuldigung von der angreifenden Partei 
fordern, lassen Sie ihr die Möglichkeit, sich abzuregen und ihre 
bessere Seite zu zeigen, indem sie sich beim nächsten mal anständiger 
benimmt &ndash; und das wird sie. Eines der Geheimnisse, erfolgreich 
gegen solches Verhalten vorzugehen, ist niemals die untergeordnete 
Diskussion zum Hauptthema werden zu lassen. Es sollte immer nur
nebenbei erwähnt werden, ein kurzes Vorwort zu der eigentlichen Antwort. 
Weisen Sie im Vorbeigehen darauf hin, dass "wir hier so nicht arbeiten", 
aber gehen Sie dann weiter zum echten Inhalt, damit die Beteiligten immer 
etwas zum Thema haben, worauf sie antworten können. Wenn protestiert,
dass er unrechtmäßig zurechtgewiesen wurde, sollten Sie sich nicht
in einem Streit verzetteln. Antworten Sie entweder gar nicht (wenn 
Sie denken, dass die Person nur Dampf ablassen will und nicht wirklich 
eine Antwort erwartet), oder entschuldigen Sie sich für die übertriebene
Reaktion und schreiben Sie, dass es schwer ist, Nuancen aus einer E-Mail
herauszulesen. Gehen Sie danach aber wieder zum eigentlichen Thema
über. Bestehen Sie niemals auf einer Antwort, privat oder öffentlich, 
von jemandem, der sich unangemessen verhalten hat. Wenn er sich von
sich aus entschuldigt, ist das großartig, aber es von ihm zu verlangen,
würde nur Verbitterung heraufbeschwören.</para>

<!--
<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>
-->
<para>Das übergeordnete Ziel ist, dass gute Umgangsformen zu einem
wesentlichen Merkmal in der Kerngruppe werden. Das hilft dem Projekt, da
Entwickler durch "flame wars" vertrieben werden können (sogar von 
Projekten die sie mögen und unterstützen). Es kann passieren, dass Sie
ihre Vertreibung nicht einmal mitbekommen; Mancher könnte sich die Liste
anschauen, erkennen dass er ein dickeres Fell bräuchte, um an diesem 
Projekt teilzunehmen, und verzichtet daraufhin besser gleich ganz auf die
Teilnahme. Foren freundlich zu halten, ist auf
lange Sicht eine Überlebenstaktik und das ist einfacher, 
wenn das Projekt noch klein ist. Ist es erst zu einem Teil der Kultur 
geworden, werden Sie nicht mehr der einzige sein, der sich darum bemüht. 
Jeder wird daran mitwirken.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<!--
<title>Practice Conspicuous Code Review</title>
-->
<title>Code Review</title>

<!--
<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>
-->
<para>Eine der besten Möglichkeiten, eine produktive 
Entwicklergemeinschaft zu fördern ist es, Leute zu überreden, sich
gegenseitig Ihren Code anzuschauen. Das effektiv zu gewährleisten, 
erfordert ein wenig technische Infrastruktur &ndash; insbesondere sollten 
Commit-E-Mails angeschaltet werden; siehe 
<xref linkend="commit-emails"/> für Details hierzu. Commit-E-Mails 
sorgen dafür, dass jede Änderung am Quellcode eine E-Mail zur Folge hat
mit dem zugehörigen Kommentar des Autors und den Diffs (siehe
<xref linkend="vc-vocabulary-diff"/> im Kapitel 
<xref linkend="vc-vocabulary"/>). <firstterm>Code Review</firstterm> 
heißt, diese Commit-E-Mails beim Eintreffen auch durchzulesen und nach 
Fehlern und möglichen Verbesserungen zu suchen. <footnote><para>So 
wird Review zumindest in Open-Source-Projekten praktiziert. Für
zentralisierte Projekte kann "Code Review" auch bedeuten, dass mehrere
Personen gemeinsam den ausgedruckten Code durchgehen und nach 
bestimmten Problemen und Mustern suchen.</para></footnote></para>

<!--
<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>
-->
<para>Code Review dient mehreren Zwecken gleichermaßen. Er ist das
offensichtlichste Beispiel für "Peer Review" in der Open-Source-Welt
und hilft unmittelbar, die Qualität der Software zu erhalten. Jeder
Fehler, der in einer Software ausgeliefert wird, kam durch einen Commit
zustande der übersehen wurde; es werden umso weniger Fehler in einer
veröffentlichten Version sein, je mehr Augen auf jeden Commit
gerichtet sind. Code Review dient aber auch einem indirekten Zweck: Es 
bestätigt Menschen, dass ihre Arbeit Bedeutung hat, man würde sich 
schließlich nicht die Zeit nehmen über einen Commit zu schauen, wenn es 
einen nicht interessieren würde, welche Auswirkungen er hat. Menschen 
leisten dann die beste Arbeit wenn sie wissen, dass andere sich 
die Zeit nehmen, diese zu prüfen.</para>

<!--
<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>
-->
<para>Jeder Review sollte öffentlich durchgeführt werden. Selbst wenn
ich im selben Raum mit anderen Entwicklern bin und einer
von uns einen Commit macht, achten wir darauf, den Review nicht verbal
im Raum zu führen, sondern ihn über die Entwickler-Liste zu schicken. 
Jeder profitiert davon, wenn der Review sichtbar ist. Leute folgen den
Erläuterungen und finden darin manchmal Mängel und selbst wenn nicht,
erinnert es sie zumindest daran, dass Code Review eine zu erwartende
regelmäßige Aktivität ist, wie Geschirrspülen oder Rasenmähen.</para>

<!--
<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>
-->
<para>Im Subversion-Projekt hatten wir am Anfang nicht diese
Gewohnheit. Es gab keine Garantie, dass jeder Commit überprüft wurde, 
wir schauten zwar manchmal über bestimmte Änderungen, wenn ein
bestimmter Bereich im Quellcode besonders interessant schien. Es
schlichen sich Fehler ein, die man eigentlich hätte sehen sollen und
müssen. Ein Entwickler namens Greg Stein, der aus seiner vorherigen
Arbeit den Wert von Code Review kannte, entschied sich, ein Beispiel zu
setzen, indem er sich jede Zeile von <emphasis>jedem einzelnen
Commit</emphasis> anschaute. Auf jedem Commit, den irgendjemand machte,
folgte bald eine E-Mail von Greg an den Entwickler-Liste, indem er
den Commit sezierte, mögliche Probleme analysierte und ab und zu, für
besonders cleveren Code, ein Lob aussprach. Sofort begann er, Fehler
und problematische Programmierpraktiken zu entdecken, die ansonsten
durchgerutscht wären, ohne je bemerkt zu werden. Er beschwerte sich
wohlgemerkt nie, dass er der einzige sei, der Code Review betrieb, auch
wenn es keinen unwesentlichen Teil seiner Zeit in Anspruch nahm, er
lobte bei jeder Gelegenheit die Vorteile von Code Review. Ziemlich bald
fingen andere an, ich eingeschlossen, regelmäßig Commits zu überprüfen.
Was war unsere Motivation? Greg hatte uns nicht bewusst durch Beschämung
dazu gebracht. Er hatte bewiesen, dass Code Review eine wertvolle
Investition von Zeit ist und dass man durchaus auch zum Projekt
beitragen kann, wenn man die Änderungen anderer durchsieht, anstatt selbst
neuen Code zu schreiben. Nachdem er das demonstriert hatte, wurde
es zum erwarteten Verhalten. Das ging sogar soweit, dass man sich, wenn 
auf einen Commit keine Reaktion folgte, als Committer Sorgen machte und
sogar auf der Liste nachfragte, ob denn niemand die Zeit gefunden
hätte, es sich anzuschauen. Später bekam Greg eine Arbeit, die ihm nicht
so viel Zeit für Subversion ließ, und er musste mit dem regelmäßigen
Code Review aufhören. Aber inzwischen war die Angewohnheit unter uns 
anderen bereits so weit verbreitet, als sei es nie anders gewesen.</para>

<!--
<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>
-->
<para>Beginnen Sie mit Code Reviews vom allerersten Commit an. Probleme 
die man am einfachsten bei der Durchsicht von Diffs erkennt, sind 
Sicherheitslücken, Speicherlecks, ungenügende Kommentare oder 
Dokumentation von Schnittstellen, Eins-daneben-Fehler, 
Aufrufer-Aufgerufener-Divergenzen 
und andere Probleme, deren Entdeckung keinen großen 
Kontext erfordern. Selbst Angelegenheiten größeren Umfangs, 
wie z.B. häufig auftauchende Muster, nicht an einer gemeinsamen
Stelle zu abstrahieren, werden leichter erkennbar, wenn man Code 
Review regelmäßig betreibt, weil man sich an vergangene Diffs 
erinnert.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<!--
<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>
-->
<para>Machen Sie sich keine Sorgen, dass Sie nichts finden, worüber es 
etwas zu sagen gäbe, oder dass Sie nicht genug über alle Bereiche im
Code wissen. Es gibt meistens irgendetwas über so ziemlich jeden Commit 
zu sagen; selbst wenn Sie nichts Bedenkliches finden, kann es sein, dass 
Sie etwas Lobenswertes finden. Wichtig ist, jedem der Committer 
klar zu machen, dass ihre Arbeit gesehen und verstanden wird. Natürlich 
befreit Code Review die Programmierer nicht von der Verantwortung, ihre 
Änderungen vor dem Commit zu überprüfen und zu testen; niemand sollte 
sich auf Code Review verlassen, um Fehler zu finden, die er eigentlich
selbst hätte finden sollen.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<!--
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>
-->
<title>Der Übergang ehemals geschlossener Projekte zu Open Source</title>

<!--
<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>
-->
<para>Wenn Sie ein bestehendes Projekt mit aktiven Entwicklern,
die eine Umgebung mit geschlossenem Code gewohnt sind, sorgen Sie dafür,
dass Klarheit über den Umfang der Änderungen besteht, die auf die 
Entwickler zukommen &ndash; und versuchen Sie sich so gut wie möglich 
in ihre Lage zu versetzen.</para>

<!--
<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>
-->
<para>Versuchen Sie sich die Situation aus ihrer Sicht vorzustellen: 
vorher wurden Entscheidungen über Code und Architektur in einer Gruppe 
von Programmierern getroffen, die sich alle mehr oder weniger gleich 
gut mit der Software auskannten, die alle den gleichen Druck von oben
zu spüren bekamen und die sich alle gegenseitig in ihren Stärken und 
Schwächen kannten. Jetzt verlangen Sie von ihnen, ihren Code 
freizugeben, nur damit irgendwelche Fremden ihn auseinandernehmen,
untersuchen und sich eine Meinungen über ihn bilden, allein anhand des
Quellcodes den sie sehen, ohne zu wissen, welcher geschäftlicher Druck
Sie zu bestimmten Entscheidungen gezwungen hat. Diese Fremden werden
viele Fragen stellen, Fragen die vorhandene Entwickler aufrütteln 
werden, wenn Sie feststellen müssen, dass die Dokumentation, an der sie
so hart gearbeitet haben, <emphasis>immer noch</emphasis> lückenhaft
ist (das ist unvermeidbar). Um dem ganzen noch ein Sahnehäubchen 
aufzusetzen: die Neulinge sind unbekannte, gesichtslose Wesen. Wenn einer
Ihrer Entwickler sich seiner Fähigkeiten als Programmierer unsicher
ist, stellen Sie sich vor, wie es ihn erst verbittern wird, wenn die
Neulinge auf Mängel in seinem Code hinweisen, noch dazu vor
seinen Kollegen. Wenn Sie kein Team von perfekten Programmierern
haben, ist sowas unvermeidlich &ndash; tatsächlich wird es am Anfang
wahrscheinlich allen passieren. Nicht weil sie schlechte 
Programmierer sind; sondern weil jedes Projekt oberhalb einer bestimmten
Größe zwangsläufig Fehler beinhaltet, und die Überprüfung durch eine
Gemeinschaft manche dieser Fehler aufdecken wird (siehe 
<xref linkend="code-review"/> <phrase output="printed"> früher in
diesem Kapitel</phrase>). Gleichzeitig werden die neuen Freiwilligen 
selber nicht so sehr dieser Prüfung unterliegen, da sie selber noch 
keinen Code beisteuern können, bis sie mehr mit dem Projekt vertraut 
sind. Für Ihre Entwickler kann das erscheinen, als ob die ganze Kritik 
immer nur auf sie gerichtet ist und nie nach außen geht. Es besteht 
deshalb die Gefahr, dass sich unter den alten Hasen eine  
Belagerungsmentalität einstellt.</para>

<!--
<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>
-->
<para>Am besten kann man das verhindern, indem man alle vorwarnt, was 
auf Sie zukommt, es ihnen erklärt, ihnen sagt, dass ein anfängliches
Unbehagen völlig normal ist, und ihnen versichert, dass es mit der Zeit
besser wird. Manche dieser Warnungen sollten privat geschehen, bevor das 
Projekt geöffnet wird. Es könnte aber auch hilfreich sein, die Leute 
auf der Mailingliste zu erinnern, dass es für das Projekt eine neue 
Art der Entwicklung ist und dass die Anpassung eine gewisse Zeit
brauchen wird. Das beste was Sie machen können, ist als gutes Beispiel
voranzugehen. Wenn Sie sehen, dass Ihre Entwickler nicht genügend 
Fragen der neuen Freiwilligen beantworten, nützt es nichts, ihnen zu 
sagen, dass sie mehr antworten sollten. Es mag sein, dass sie kein gutes 
Gefühl dafür haben, wann eine Reaktion gerechtfertigt ist, oder es kann 
sein, dass sie nicht wissen, welche Priorität die eigentliche Arbeit am
Code gegenüber der neuen Bürde einnimmt, mit Außenstehende zu 
kommunizieren. Man kann sie am ehesten dazu überreden, sich zu beteiligen, 
indem man sich selbst beteiligt. Beobachten Sie die öffentliche 
Mailingliste und beantworten Sie ein paar Fragen. Wenn Sie nicht genügend
Erfahrung haben, um die Fragen zu beantworten, sollten Sie es für alle
sichtbar an einem anderen Entwickler weitergeben, der die nötige
Erfahrung hat &ndash; und achten Sie darauf, dass er eine Antwort oder
zumindest eine Reaktion gibt. Natürlich wird es für die älteren 
Entwickler verlockend sein, in private Diskussionen zu verfallen,
schließlich sind sie daran gewohnt. Beobachten Sie deshalb auch die 
interne Mailingliste und bitten Sie ggf. darum, bestimmte Diskussionen
besser gleich auf die öffentliche Liste zu verlegen.</para>

<!--
<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="money"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>
-->
<para>Es gibt andere, langfristigere Bedenken beim Öffnen vormals
geschlossener Projekte. <xref linkend="social-infrastructure"/> 
untersucht Techniken um bezahlte und unbezahlte Entwickler erfolgreich
zu mischen und <xref linkend="legal"/> behandelt die nötige rechtliche
Sorgfalt beim Öffnen von privatem Code, mit bestimmten Komponenten,
die einer anderen Partei "gehört", bzw. von ihnen geschrieben 
wurde.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<!--
<title>Announcing</title>
-->
<title>Bekanntgabe</title>

<!--
<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freecode.com/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freecode (known as
Freshmeat.net until it was renamed in Oct 2011) is the place everyone
watches for new project announcements.  You only have to catch a few
eyes there for news of your project to spread by word of mouth.</para>
-->
<para>Sobald das Projekt in einem vorzeigbarem Zustand ist &ndash; nicht 
perfekt, lediglich vorzeigbar &ndash; ist es bereit, der Welt
bekannt gemacht zu werden. Tatsächlich geht das relativ einfach: Gehen
Sie auf <ulink url="http://freshmeat.net/"/>, klicken Sie in der oberen 
Navigationsleiste auf <guimenuitem>Submit</guimenuitem> und füllen Sie
das Formular aus, um Ihr Projekt bekanntzumachen. Freshmeat ist der Ort, 
auf dem alle nach Ankündigungen neuer Projekte Ausschau halten. Sie müssen 
dort nur ein paar Augen erwischen und ihre Nachricht wird sich von da
an über Mundpropaganda weiterverbreiten.</para>

<!--
<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>
-->
<para>Wenn Sie Mailinglisten oder Newsgroups kennen, auf denen eine
Ankündigung Ihres Projekts thematisch passen würde und von Interesse
wäre, sollten Sie dort einen Eintrag machen, achten Sie aber darauf,
genau <emphasis>einen</emphasis> Eintrag pro Forum zu machen, und 
verweisen Sie dabei auf Ihre eigenen Foren für weitere anschließende 
Diskussionen (indem Sie den <systemitem>Reply-to</systemitem>
Header setzen). Die Einträge sollten kurz und prägnant sein:</para>

<!--
<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>
-->
<screen>
An: discuss@lists.example.org
Betreff: [ANN] Das Scanley-Projekt für Volltext-Indizierung 
Antwort-An: dev@scanley.org

Diese Nachricht ist die einmalige Bekanntgabe über die Gründung des 
Scanly-Projekts, eine Open-Source-Volltextindizierungs- und Suchmaschine, 
mit einer reichen API für Programmierer, die Suchfunktionen für große 
Mengen an Text implementieren wollen. Der Code von Scanley läuft, wird 
aktiv entwickelt, und wir suchen sowohl nach Entwickler als auch Nutzern 
die testen wollen.

Webseite: http://www.scanley.org/

Funktionen:
   - Durchsucht Klartext, HTML, und XML
   - Suche nach Wörter oder Ausdrücken
   - (geplant) Unscharfe Suche
   - (geplant) Inkrementelle Aktualisierung der Indizes
   - (geplant) Indizierung von Webseiten

Voraussetzungen:
   - Python 2.2 oder neuer 
   - Genügend Festplattenplatz für die Indizes (ca. 2x die Größe der 
     ursprünglichen Daten)

Weiteres finden Sie auf scanley.org.

Vielen Dank,
-H. Mustermann
</screen>
<!--
<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>
-->
<para>(Siehe <xref linkend="publicity"/><phrase output="printed">
im Kapitel <xref linkend="communications"/></phrase> für Ratschläge
über die Bekanntmachung neuer Versionen und anderer Ereignisse im
Projekt.)</para>

<!--
<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>
-->
<para>Es gibt eine anhaltende Diskussion in der 
Open-Source-Gemeinschaft darüber, 
ob ein Projekt schon am Anfang laufenden Code haben muss,
oder ob es einem Projekt hilft, selbst in den frühen Phasen des 
Entwurfs offen zu sein. Ich dachte früher, dass es am allerwichtigsten
sei, mit laufendem Code anzufangen, dass man so erfolgreiche Projekte 
vom Spielzeug unterscheiden könnte, und ernstzunehmende Entwickler nur 
etwas anfassen würden, was auch schon etwas Handfestes machte.</para>

<!--
<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>
-->
<para>Wie es sich herausstellte, war das nicht der Fall. Beim 
Subversion-Projekt, fingen wir mit einem Entwurf an, ein Kern 
interessierter und miteinander vertrauter Entwickler, viel Fanfare und
<emphasis>keine einzige Zeile</emphasis> lauffähigen Codes. Zu meiner
völligen Überraschung, schaffte es das Projekt von Anfang an, aktive
Freiwillige anzulocken und bis wir tatsächlich etwas Laufendes hatten,
waren bereits eine ziemliche Menge freiwilliger Entwickler beteiligt.
Subversion ist nicht das einzige Beispiel; das Mozilla-Projekt fing
auch ohne laufenden Code an und bietet heute einen erfolgreichen und
beliebten Web-Browser.</para>

<!--
<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>
-->
<para>Angesichts solcher Beweise muss ich von meiner ursprünglichen
Behauptung zurücktreten, dass laufender Code absolut notwendig ist, um 
ein Projekt anzufangen. Trotzdem ist laufender Code immer noch eines 
der besten Grundlagen für Erfolg, und eine gute Grundregel wäre es, mit
der Bekanntgabe zu warten, bis Sie solchen haben. Es mag allerdings 
Umstände geben, unter denen eine frühere Bekanntmachung Sinn macht. Ich 
denke, dass zumindest ein gut ausgearbeiteter Entwurf oder irgend 
ein Grundgerüst für den Code notwendig ist &ndash; dieser kann natürlich
wegen öffentlichen Rückmeldungen überarbeitet werden müssen, aber es
muss etwas Handfestes und Greifbares geben, etwas mehr als gute 
Absichten, von dem aus Leute ausgehen und weiterarbeiten können.</para>

<!--
<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>
-->
<para>Wenn Sie die Ankündigung machen, sollten Sie jedoch nicht gleich 
darauf ein Schar Freiwilliger erwarten. Für gewöhnlich ist das Resultat
einer Bekanntmachung, dass Sie nebenbei ein paar Anfragen bekommen, es
melden sich ein paar Leute auf der Mailingliste an, abgesehen davon geht
so ziemlich alles weiter wie bisher. Mit der Zeit werden Sie aber eine 
stete Zunahme von Beiträgen neuen Mitarbeiter und Benutzer bemerken. 
Die Ankündigung ist lediglich das Pflanzen eines Samenkorns. 
Es braucht Zeit, bis die Nachricht sich fortpflanzt. Wenn 
das Projekt beständig diejenigen honoriert, die sich beteiligen, wird 
sich die Nachricht verbreiten, denn Menschen teilen einander mit, wenn
sie etwas Gutes entdecken. Wenn alles gut läuft, wird die Dynamik der 
exponenziellen Kommunikationsnetze das Projekt langsam in eine komplexe 
Gemeinschaft verwandeln, in der Sie nicht unbedingt jeden Namen 
kennen und nicht länger jede Unterhaltung mitverfolgen können. Die 
nächsten Kapiteln handeln vom Arbeiten in einer solchen Umgebung.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

