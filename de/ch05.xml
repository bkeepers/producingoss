<chapter id="money">

<title>Geld</title>

<simplesect>

<para>Dieses Kapitel untersucht, wie man Finanzierungsmittel in einer
freien Software Umgebung einbringt. Es ist nicht nur an Entwickler
die bezahlt werden um an freie Software Projekte zu arbeiten gerichtet,
sondern auch an ihre Manager, die die soziale Dynamik der 
Entwicklungsumgebung verstehen müssen. In den folgenden Abschnitten,
wird angenommen, dass Sie ein bezahlter Entwickler oder jemand der 
solche Entwickler leitet. Die Ratschläge werden für beide oft die
gleichen sein; falls nicht, wird die angesprochene Gruppe aus dem
Kontext klar sein.</para>

<para>Finanzierung von freier Software Entwicklung durch Unternehmen
ist kein neues Phänomen. Eine Menge Entwicklung wurde schon immer
informell subventioniert. Wenn ein Systemadministrator eine Programm
zur Netzwerkanalyse schreibt um ihr bei ihrer Arbeit zu helfen, dann
stellt sie es online und werden von anderen Administratoren Bugfixes
und Funktionen beigesteuert, hat sich daraus ein neues Konsortium
gebildet. Die Finanzierung stammt aus den Gehältern der 
Administratoren, und seine Bürofläche und Netzwerk Bandbreite werden,
wenn auch ohne ihr wissen, von den Organisationen für denen sie 
arbeiten gespendet. Diese Organisationen profitieren natürlich von der
Investition, obwohl sie aus institutioneller Sicht erst einmal nichts
davon wissen.</para>

<para>Der Unterschied heute ist, dass viele dieser Anstrengungen
formalisiert werden. Firmen sind sich der Vorteile von Open Source
Software bewusst geworden und fangen an sich direkter an ihrer
Entwicklung zu beteiligen. Entwickler sind erwarten mittlerweile, dass
wirklich wichtige Projekte zumindest Spenden anlocken werden, wenn 
nicht sogar längerfristige Sponsoren. Auch wenn durch Geld sich nicht
sonderlich viel an der Dynamik der Entwicklung freier Software geändert
hat, ist der Maßstab der Abläufe doch ein größerer geworden, sowohl
hinsichtlich der Anzahl der Entwickler, als auch der Zeit pro 
Entwickler. Es hat auch Auswirkungen darauf gehabt, wie Projekte
organisiert sind, und wie die beteiligten Parteien mit einander
umgehen. Die Angelegenheiten drehen sich nicht nur darum wie das
Geld ausgegeben wird, oder die Rendite gemessen wird. Es geht dabei
auch um Verwaltung und Ablauf: Wie kann die hierarchische 
Befehlsstruktur von Firmen und die halb dezentralisierte von
Gemeinschaften von freiwilligen der freien Software Projekte, gemeinsam
und produktiv mit einander arbeiten? Werden sie sich überhaupt darauf
einigen können, was "Produktivität" bedeutet?</para>

<para>Finanzielle Rückendeckung wird allgemein von Open Source 
Gemeinschaften gerne angenommen. Es kann die Verwundbarkeit zu den
Auswirkungen von Chaos verringern, welche so viele Projekte weg fegen
vor sie wirklich vom Boden abheben, und es kann Leute dazu eher bereit
machen der Software eine Chance zu geben&mdash;sie haben das Gefühl,
dass sie ihre Zeit in etwas investieren, was auch noch in 6 Monate da
sein wird. Schließlich ist Glaubwürdigkeit zu einem gewissen Grad
ansteckend. Wenn sagen wir IBM ein Projekt unterstützt, kann man davon
ausgehen, dass ein scheitern des Projekts nicht zugelassen wird, und
ihre sich daraus ergebende Bereitschaft selber Mühe aufzubringen kann
das zu eine sich selbst erfüllende Prophezeiung machen.</para>

<para>Finanzierung bringt jedoch auch die Empfindung von Kontrolle. Wenn
es nicht sorgfältig gehandhabt wird, kann Geld ein Projekt in 
verschiedene Gruppen von Entwicklern geteilt werden. Wenn die 
unbezahlten Entwickler das Gefühl bekommen, dass Design Entscheidungen
oder Funktionserweiterungen einfach für den Höchstbietenden verfügbar
sind, werden sie zu einem anderen Projekt gehen, welches eher danach
aussieht, als ob Leistung ausschlaggebend ist und weniger nach 
unbezahlte Arbeit zum Vorteil von jemand anderem. Es mag sein, dass
sie sich nie sonderlich auf den Email Verteilern beschweren. Statt
dessen wird es einfach weniger zu hören geben, aus externen Quellen,
während die Freiwilligen allmählich aufhören zu versuchen ernst 
genommen zu werden. Das Surren der kleineren Aktivitäten in Form von
Bug Reports und gelegentlichen kleinen Fixes wird weitergehen. Es
wird aber keine größeren Beiträge oder Beteiligung an Design 
Diskussionen von Außerhalb geben. Leute werden spüren, was man von
ihnen erwartet (oder nicht), und diesen Erwartungen entsprechend 
gerecht werden.</para>

<para>Obwohl Geld sorgfältig benutzt werden muss, bedeutet das nicht,
dass dadurch kein Einfluss erkauft werden kann. Das kann es ganz 
sicher. Der Trick ist, dass es den Einfluss nicht direkt erkaufen kann.
Bei einer einfachen Kommerziellen Geschäft, tauschen Sie Geld gegen das
was Sie haben wollen. Wenn Sie eine zusätzliche Funktion benötigen, 
unterschreiben Sie einen Vertrag, zahlen dafür und es wird umgesetzt. 
In einem Open Source Projekt, ist das nicht so einfach. Es mag sein,
dass Sie mit ein paar Entwickler einen Vertrag abschließen, aber sie
würden sich&mdash;und Sie&mdash; täuschen, wenn sie garantieren würden,
dass die Arbeit für die Sie bezahlen, von der Entwicklergemeinschaft
aufgenommen wird, einfach nur weil Sie dafür bezahlt haben. Die Arbeit
kann nur im Rahmen seiner Leistung angenommen werden und wie gut es in
die Vorstellung passt, welche die Gemeinschaft für die Zukunft der
Software hat. Sie mögen dabei ein Wort mitzusprechen haben, Sie werden
allerdings nicht der einzige sein.</para>

<para>Geld kann also keinen Einfluss Kaufen, kann aber Sachen die
zu Einfluss <emphasis>führen</emphasis> kaufen. Das offensichtlichste
Beispiel sind Programmierer. Wenn gute Programmierer eingestellt werden,
und sie lange genug bleiben um Erfahrung mit der Software 
Glaubwürdigkeit in der Gemeinschaft, können Sie das Projekt 
gleichermaßen beeinflussen wie jedes andere Mitglied. Sie werden bei
Wahlen eine Stimme, oder wenn es viele von ihnen gibt einen
Stimmblock haben. Wenn Sie in dem Projekt respektiert werden, werden
sie Einfluss über ihre Stimmen hinaus haben. Es ist auch keine
Notwendigkeit die Motive der bezahlten Entwickler zu verschleiern.
Schließlich will jeder der eine Änderung macht es aus irgend einem
Grund. Die Motive Ihrer Firma sind in keiner weise weniger berechtigt
als die von irgendjemand anderem. Es ist nur, dass das Gewicht, welches
den Zielen der Firma zugesprochen wird, durch den Status ihrer 
Stellvertreter im Projekt bestimmt wird, nicht von ihrer Größe, ihrem
Budget oder Geschäftsplan.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-involvement">
<title>Arten der Beteiligung</title>

<para>Es gibt viele verschiedene Gründe aus denen Open Source Projekte
Finanziert werden. Die Punkte auf dieser Liste schließen sich nicht 
gegenseitig aus; oftmals wird die Finanzielle Rückendeckung das Resultat
mehrere oder alle dieser Motivationen sein:</para>

<variablelist>

   <varlistentry><term>Die Last teilen</term>
     <listitem>
     <para>Separate Organisationen mit überlappenden Softwarebedarf
	finden, dass sie Anstrengungen doppelt leisen, entweder schreiben
	sie redundant den gleichen Code in der selben Firma, oder sie
	kaufen ähnliche Produkte von proprietären Anbietern. Wenn sie
	bemerken, was vor sich geht, werden sie vielleicht ihre 
	Ressourcen zusammenlegen und ein Open Source Projekt gründen 
	(oder beitreten) welches an ihren Bedarf angepasst ist. Die
	Vorteile sind offensichtlich: Die Kosten der Entwicklung sind
	verteilt, die Vorteile kommen aber allen zugute. Obwohl dieses
	Scenario die intuitivste für gemeinnützige Organisationen 
	scheint, kann es auch für profit orientierte Konkurrenten Sinn
	machen.</para>
     <para>Beispiele: <ulink url="http://www.openadapter.org/"/>,
     <ulink url="http://www.koha.org/"/></para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Verbesserung von Dienstleistungen</term>
     <listitem>
     <para>Wenn eine Firma Dienstleistungen verkauft welche von 
	bestimmten Open Source Anwendungen abhängen oder attraktiver
	gemacht werden, ist es natürlich im Interesse der Firma sicher
	zu stellen, dass diese Anwendungen auch aktiv gewartet werden.
	</para>
     <para>Beispiel: Die Unterstützung von <ulink 
	url="http://subversion.tigris.org/"/> durch <ulink
	url="http://www.collab.net/">CollabNet</ulink> (Rechtshinweis:
	das ist meine tägliche Arbeit, es ist aber auch ein perfektes
	Beispiel für dieses Modell).</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Unterstützung von Hardware Verkäufen</term>
     <listitem>
     <para>Der Wert von Computern und Computerteile hängt direkt 
	zusammen, mit der Menge an Software die für sie verfügbar ist.
	Verkäufer von Hardware&mdash; nicht nur Verkäufer von 	
	kompletten Maschinen, sondern auch die Hersteller von 
	Peripheriegeräte und Mikrochips&mdash; haben herausgefunden,
	dass freie Software von hoher Qualität für ihre Hardware
	verfügbar zu haben den Kunden wichtig ist.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Untergrabung der Konkurrenz</term>
     <listitem>
     <para>Manche Firmen unterstützen ein bestimmtes Open Source 
	Projekt um ein Produkt der Konkurrenz zu untergraben, welches
	unter Umständen auch selber Open Source sein kann. Den 
	Marktanteil des Konkurrenten wegzufressen ist selten der 
	einzige Grund ein Open Source Projekt zu unterstützen, kann
	aber mit eine Rolle spielen.</para>
     <para>Beispiel: <ulink url="http://www.openoffice.org/"/> (nein,
	das ist nicht der einzige Grund, dass die Software existiert,
	ist aber zumindest teilweise eine Reaktion auf Microsoft 
	Office).</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Vermarktung</term>
     <listitem>
     <para>Ihre Firma mit einer bekannten Open Source Anwendung zu assoziieren
	kann einfach gutes Markenpflege sein.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Doppelte-Lizenzierung</term>
     <listitem>
     <para><firstterm>Doppelte-Lizenzierung</firstterm> bedeutet, 
	Software unter einer traditionellen Lizenz anzubieten und unter
	proprietären für Kunden die es als teil ihrer proprietären
	Anwendung zu verkaufen, und gleichzeitig unter einer freien für
	diejenigen, die bereit sind es unter den Open Source 
	Bedingungen zu benutzen (siehe <xref
	linkend="dual-licensing"/><phrase output="printed"> im Kapitel
	<xref linkend="legal"/></phrase>). Wenn die Open Source
	Entwicklergemeinschaft aktiv ist, bekommt die Software die
	Vorteile von breitem Debugging und Entwicklung, die Firma 
	bekommt dennoch Nutzungsgebühren um ihrer Vollzeitentwickler
	zu unterstützen.</para> 
     <para>Zwei bekannte Beispiele sind <ulink
	url="http://www.mysql.com/">MySQL</ulink>, die Macher der
	gleichnamigen Datenbank Software, und <ulink
	url="http://www.sleepycat.com/">Sleepycat</ulink>, welches
	Distributionen und Support für die Berkeley Datenbank anbietet.
	Es ist kein Zufall, dass sie beide Datenbank Firmen sind. 
	Datenbank Software neigt dazu, in anderen Anwendungen 
	integriert zu werden als direkt an Kunden vermarktet zu werden,
	also ist es sehr gut für das Modell der dualen Lizenzierung
	geeignet.</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Spenden</term>
     <listitem>
     <para>Ein häufig benutztes Projekt kann manchmal wesentliche
	Beiträge, sowohl von Individuen als auch Organisationen 
	bekommen, allein indem sie Knopf für spenden online haben, oder
	indem sie manchmal Waren mit ihrer Marke wie Tassen, T-shirts
	Mousepads, usw. verkaufen. Hierbei sollte man vorsichtig sein:
	Wenn ihr Projekt Spenden annimmt, sollten Sie planen wie das 
	Geld benutzt werden soll, <emphasis>bevor</emphasis> es
	anfängt hereinzukommen, und schreiben Sie es auf die Webseite
	des Projekts. Diskussionen darüber wie Geld aufgeteilt wird,
	neigen dazu einfacher abzulaufen, wenn sie gehalten werden,
	vor welches wirklich da ist; wenn es wesentliche Streitigkeiten
	darüber gibt, ist es trotzdem besser es herauszufinden, während
	es noch akademisch ist.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para>Das Geschäftsmodel eines Geldgebers ist nicht der einzige Factor
mit dem es zu einer Open Source Gemeinschaft in Beziehung steht. Die
historische Beziehung zwischen den beiden ist auch wesentlich: Hat die
Firma das Projekt gegründet, oder tritt es der bereits existierenden
Entwicklung bei? In beiden Fällen, muss der Geldgeber Glaubwürdigkeit
verdienen, aber, nicht überraschenderweise, muss es sich diese bei 
letzterem Fall etwas mehr verdienen. Die Organisation muss klare Ziele
im Bezug auf das Projekt haben. Versucht sie eine Führungsposition zu
halten, oder einfach eine Stimme in der Gemeinschaft zu sein, zu führen
aber nicht unbedingt die Richtung des Projekts zu bestimmen? Oder will
es einfach nur ein paar commiter parat haben, um Bugs seiner Kunden
beheben zu können und Änderungen ohne große Umstände in die öffentliche
Distribution einbinden zu können?</para>

<para>Behalten Sie diese Fragen im Hinterkopf, während Sie die 
nachfolgenden Richtlinien lesen. Sie sollen auf jedweder 
organisatorische Beteiligung an einem freien Software Projekt 
anwendbar, jedes Projekt ist aber eine menschliche Umgebung, und 
deshalb sind keine zwei genau gleich. Zu einen gewissen Grad werden
Sie immer nach dem Gehör spielen müssen, wenn Sie diese Prinzipien
befolgen, dann wird sich aber die Wahrscheinlichkeit erhöhen, dass
die Sachen sich so entwickeln, wie Sie es sich vorstellen.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<title>Stellen Sie auf lange Sicht ein</title>

<para>Wenn Sie Programmierer in einem Open Source Projekt verwalten,
behalten Sie sie lange genug bei dem Projekt, dass Sie sich sowohl 
technische als auch politische Kompetenzen aneignen können&mdash;
mindestens ein paar Jahre. Natürlich profitiert kein Projekt, ob
Open Source oder nicht vom all zu häufigem Austausch der Programmierer.
Die Notwendigkeit für Neuankömmlinge sich jedes mal neu einarbeiten zu
müssen, wäre in jedem Projekt abschreckend. Die Strafe ist aber in
Open Source Projekten noch größer, da ausscheidende Entwickler nicht
nur ihre Kenntnisse vom Code mitnehmen, sondern auch ihren Stand in
der Gemeinschaft und die menschliche Beziehungen die sie dort
aufgebaut haben.</para>

<para>Die Glaubwürdigkeit, die ein Entwickler angesammelt hat, kann
nicht übertragen werden. Das offensichtlichste Beispiel, wäre wohl,
dass ein neuer Entwickler nicht die Commit Berechtigung von einem
abgehenden Entwickler erben (siehe <xref 
linkend="money-vs-love"/> später in diesem Kapitel), also wenn der neue
Entwickler noch keine Commit Berechtigung hat, wird er erst einmal
Patches abgeben müssen, bis er sie hat. Commit Berechtigung ist aber
nur die messbarste Erscheinungsform vom verlorenen Einfluss. Ein
langjähriger Entwickler kennt auch alle alten Argumente die wieder
und wieder in Diskussionen auf den Email Verteilern zerlegt wurden. Ein
neuer Entwickler, der keine Erinnerung solcher Unterhaltungen hat,
könnte versuchen diese Themen erneut zur Sprache zu bringen, was zum
Verlust der Glaubwürdigkeit Ihrer Organization führt; die anderen
werden sich vielleicht wundern "Können die sich den Garnichts
behalten"? Ein neuer Entwickler wird auch kein politisches Gespür für
die Persönlichkeiten im Projekt haben, und werden nicht in der Lage
sein die Richtung der Entwicklung so schnell oder glatt beeinflussen zu
können, wie jemand der schon lange dabei ist.</para>

<para>Trainieren Sie Anfänger durch ein Programm mit beaufsichtigter
Beteiligung. Einbringung. Der neue Entwickler sollte vom ersten Tag an
in sehr direktem Kontakt mit der öffentlichen Entwicklergemeinschaft 
sein, angefangen mit Bug fixes und Aufräumarbeiten, damit er den 
Codebase lernen kann und sich einen Ruf in der Gemeinschaft erarbeiten
kann, jedoch keine langwierige und verstrickte Design Diskussionen
zünden sollte. Alldieweil, sollte ein oder mehrere erfahrene
Entwickler für Fragen zur Verfügung stehen, und sollte jede Nachricht
lesen, die der Anfänger an den Entwickler Verteiler schickt, selbst bei 
den Threads, denen die Erfahrenen Entwickler sonst keine Beachtung 
schenken würden. Das wird die Gruppe dabei helfen mögliche Steine zu
erkennen, vor der Anfänger an ihnen aufläuft. Private Anregung und
Hinweise im Hintergrund können auch eine große Hilfe sein, besonders
wenn der Anfänger nicht daran gewohnt ist, dass sein Code massiv parallel
überprüft wird.</para>

<para>Wenn CollabNet einen neuen Entwickler Einstellt, um an Subversion, 
zu arbeiten, setzen wir uns zusammen hin und wählen ein paar offene Bugs
für die neue Person aus, um sich erst einmal die Krallen zu schärfen.
Wir diskutieren den technischen Rahmen der Lösungen, und weisen dann 
zumindest einem erfahrenen Entwickler zu, der (öffentlich) den Patch
überprüft welches der neue Entwickler (auch öffentlich) einreicht. 
Normalerweise schauen wir uns den Patch nicht einmal an, vor es auf dem
Haupt Entwicklungsverteiler zu sehen ist, obwohl wir es könnten, wenn
es dazu einen Grund gäbe. Das wichtige ist, dass der neue Entwickler
durch den Ablauf der öffentlichen Überprüfung geht, den Codebase lernt
und sich gleichzeitig daran gewöhnt von völlig Fremden Kritik zu 
erhalten. Wir versuchen es aber so abzustimmen, dass unsere Bewertung 
gleich nachdem der Patch eingereicht wurde kommt. Dadurch ist die erste
Bewertung die der Verteiler sieht unsere, was dazu beitragen kann, die
Tonlage für Bewertungen von anderen zu setzen. Es trägt auch zu der 
Idee bei, dass diese neue Person ernst genommen werden soll: Wenn 
andere sehen, dass wir uns die Zeit nehmen ihm ausführliche Bewertungen,
mit gründlichen Erklärungen und Verweise auf die Archive wenn 
angemessen, werden sie es zu schätzen wissen, dass eine Form von 
Training vor sich geht, und dass es wahrscheinlich auf eine 
längerfristige Investition hinweist. Das kann sie positiver für den
Entwickler stimmen, zumindest soweit, dass sie sich ein wenig mehr Zeit
nehmen, um Fragen zu beantworten und Patches zu bewerten.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<title>Treten Sie als Viele auf, nicht als einer</title>

<para>Ihre Entwickler sollten anstreben in den öffentlichen Foren als
einzelne Beteiligte aufzutreten, und nicht als ein monolitisches Wesen
der Firma. Das ist nicht weil es irgend eine negative Behaftung 
welches monolitische Wesen einer Firma innewohnt(naja, vielleicht
schon, aber darum geht es nicht in diesem Buch). Sondern da
Einzelpersonen, die einzige Sorte Personen sind für die Open Source
Projekte strukturell gewappnet sind. Ein Einzelner Beteiligter kann
Diskussionen haben, Patches einreichen, sich Glaubwürdigkeit aneignen,
Wählen und so weiter. Eine Firma kann das nicht.</para>

<para>Desweiteren, verhindert man, indem man sich auf eine
dezentralisierte Art verhält, dass sich eine zentralisierte Opposition
bildet. Lassen Sie ihre Entwickler sich unter einander auf den Email
Verteilern streiten. Ermutigen Sie sie dazu gegenseitig so oft und so
öffentlich wie möglich wie bei jedem anderen, ihren Code zu überprüfen
und zu bewerten. Raten Sie sie davon ab immer als ein Block 
abzustimmen, denn wenn sie das machen, werden andere das Gefühl 
bekommen, dass es allein aus Prinzip, eine organisierte Anstrengung
geben sollte, um sie in Schach zu halten.</para>

<para>Es gibt einen Unterschied dazwischen wirklich dezentralisiert zu
sein und einfach das Ziel zu haben, so zu erscheinen. In bestimmten
Fällen kann es durchaus nützlich sein, dass ihre Entwickler sich an
einem Strang ziehen, und sie sollten vorbereitet sein hinter dem
Vorhang zu koordinieren, wenn nötig. Wenn zum Beispiel ein Vorschlag
gemacht wird, kann es durch frühzeitige Zustimmung durch andere 
Entwickler auf die Sprünge geholfen werden, indem es den Eindruck gibt,
dass der Vorschlag an Konsens gewinnt. Andere werden das Gefühl haben,
dass der Vorschlag eine gewisses Momentum hat, und dass wenn Sie 
Einspruch einlegen würden, sie diesen aufhalten würden. Deshalb werden
Leute nur dann Einsprechen, wenn sie dazu einen guten Grund haben. Es
gibt nichts verwerfliches daran, auf diese Art Zustimmung zu 
koordinieren, solange Einsprüche ernst genommen werden. Wie sich diese
private Übereinkunft öffentlich offenbart ist nicht weniger aufrichtig,
nur weil sie vorher koordiniert wurde, und auch nicht schädlich, so 
lange sie nicht dazu benutzt werden um Gegenargumente frühzeitig und
abträglich ausgelöscht werden. Ihr Sinn ist lediglich die Art Personen
zu hindern, die einfach nur Einwände machen, um in Form zu bleiben; 
siehe <xref linkend="bikeshed"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase> für weiteres über diese.
</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<title>Seien Sie Offen Über Ihre Motivation</title>

<para>Seien Sie so Offen über die Motivation wie Sie es können, ohne
Ihre Geschäftsgeheimnisse zu kompromittieren. Wenn Sie wollen, dass
das Projekt eine bestimmte Funktion bekommt, sagen wir, weil Ihre
Kunden danach schreien, sagen Sie es geradeheraus auf den Email 
Verteilern. Wenn die Kunden anonym bleiben wollen, was manchmal der
Fall ist, fragen Sie wenigstens danach ob Sie als ungenannte Beispiele
benutzt werden können. Je mehr die öffentlicher Entwicklergemeinschaft
darüber weiß, <emphasis>warum</emphasis> Sie etwas wollen, desto wohler
werden Sie sich mit dem fühlen, was Sie vorschlagen.</para>

<para>Das läuft dem Instinkt entgegen&mdash;so einfach anzueignen,
so schwer wieder los zu werden&mdash;dass Wissen Macht ist, und
dass je mehr andere über Ihre Ziele wissen, desto mehr Kontrolle haben
sie über Sie. Aber der Instinkt wäre an dieser Stelle falsch. Indem
man öffentlich die Funktion empfiehlt (oder Bugfix, oder was immer es
auch ist), haben Sie ja schon Ihre Karten auf den Tisch gelegt. Die
einzige Frage ist, ob Sie die Gemeinschaft dazu bringen können ihr
Ziel mit Ihnen zu teilen. Wenn Sie einfach sagen, dass Sie die 
Funktion haben wollen, aber keine konkreten Beispiele nennen können,
warum Sie es wollen, ist Ihre Standpunkt schwach, und Leute werden
anfangen eine versteckte Agenda zu vermuten. Wenn Sie aber nur ein paar
echte Szenarien nennen können, die zeigen warum die vorgeschlagene
Funktion wichtig ist, kann das sich dramatisch auf die Debatte
auswirken.</para>

<para>Damit Sie erkennen warum das so ist, sollten Sie die alternative
bedenken. All zu oft sind Debatten über neue Funktionen oder Richtungen
langwierig und ermüdend. Die Argumente die Leute vorbringen reduzieren
sich meistens auf "Ich persönlich will X", oder das immerzu beliebte
"Meiner langjährigen Erfahrung als Software Architekt hat gezeigt, dass
X für Nutzer äußerst wichtig ist / eine nutzlose Krause welches keinen
zufrieden stellen wird". Wie man voraussehen kann, werden solche
Debatten durch die Abwesenheit von Daten echter Nutzung, weder verkürzt
noch verlängert, sondern erlaubt es ihnen immer weiter von irgend einem
Praxiswerten Ankerplatz wegzutreiben. Ohne irgend eine ausgleichende
Kraft, ist das Endergebnis so wahrscheinlich wie nicht, davon 
bestimmt, wer sich am besten ausgedrückt hat, oder am hartnäckigsten,
oder wer den höchsten Rang hatte.</para>

<para>Als eine Organization mit reichlich Kundendaten, haben Sie die
Möglichkeit genau solch eine ausgleichende Kraft bereit zu stellen. Sie
können ein können ein Kanal sein, für Informationen, die sonst keine 
Möglichkeit gehabt hätten an die Gemeinschaft zu gelangen. Die Tatsache,
dass Informationen Ihre Wünsche unterstützen, ist nicht wofür Sie sich
schämen müssten. Die meisten Entwickler haben individuell keine breite
Erfahrung damit, wie Ihre Software genutzt wird. Jeder Entwickler 
benutzt die Software auf seine eigene idiosynkratische Art; was andere
Nutzungsweisen angeht, verlässt er sich auf seine Intuition und 
Vermutungen, und tief im inneren, weiß er das auch. Indem Sie 
glaubwürdige Daten über eine wesentliche Anzahl an Nutzern bereitstellt,
geben Sie der öffentlichen Entwicklergemeinschaft etwas ähnlich zu 
Sauerstoff. So lange Sie es richtig auslegen, werden Sie es mit
Begeisterung annehmen, und es wird die Sache in die Richtung 
beschleunigen, in der Sie es haben wollen.</para>

<para>Der Schlüssel ist natürlich, es richtig zu präsentieren. Es wird
niemals ausreichen, darauf zu bestehen, dass nur weil Sie mit eine
Menge Nutzern zu tun haben, und weil diese eine gegebene Funktion
brauchen (oder denken, dass sie es brauchen), Ihre Lösung implementiert
werden sollte. Statt dessen, sollte Sie Ihre ersten Nachrichten eher auf
das Problem ausrichten, als auf eine bestimmte Lösung. Beschreiben Sie
sehr ausführlich, die Erfahrungen die Ihre Kunden begegnen, bieten Sie
die Ihnen größtmögliche Auswertung, sowie möglichst viele angemessene 
Lösungen, die Ihnen in den Sinn kommen. Wenn Leute anfangen darüber zu
spekulieren, wie effektiv die verschiedenen Lösungen sind, können Sie
damit weitermachen, sich auf Ihre Daten zu beziehen, um die Antworten
zu unterstützen oder zu entkräften. Sie werden vielleicht die ganze
Zeit über eine bestimmte Lösung im Kopf haben, aber greifen Sie es 
nicht am Anfang gesondert heraus. Das ist keine Täuschung, sondern
das übliche Verhalten, eines ehrlichen Vermittlers. Schließlich ist
ihr wahres Ziel das Problem zu lösen; Eine Lösung bedeutet lediglich
Mittel zum Zweck. Wenn die Lösung die Sie bevorzugen wirklich die
Überlegene ist, werden andere Entwickler das letztendlich alleine
erkennen&mdash;und dann werden sie sich von alleine dahinter stellen,
was viel besser ist, als wenn Sie sie durch Einschüchterung dazu
bringen müssen es zu implementieren. (Es gibt auch die Möglichkeit,
dass sie an eine bessere Lösung denken).</para>

<para>Das soll nicht heißen, dass Sie sich niemals zugunsten einer
Bestimmten Lösung äußern können. Sie müssen aber Geduld haben damit die
Analyse die Sie bereits intern gemacht haben, auf den öffentlichen
Verteilern wiederholt wird. Schreiben Sie nicht sowas wie "Ja, wir 
haben alles hier schon gehabt, aber das Funktioniert aus Gründen A, B
und C. Wenn man der Sache auf den Grund geht, dann ist die einzige
Weg es zu lösen ..." Das Problem ist nicht so sehr, dass es sich
arrogant anhört, als vielmehr, dass es den Eindruck erweckt, dass Sie
<emphasis>bereits</emphasis> eine unbestimmte Menge (aber, man wird
vermuten eine große) analytischer Ressourcen dem Problem, hinter
verschlossenen Türen, gewidmet haben. Es lässt die Sache so erscheinen,
als ob Anstrengungen unterwegs gewesen sind, und Entscheidungen 
vielleicht getroffen wurden, in welche die Öffentlichkeit nicht 
eingeweiht ist, und das, ist ein Rezept für Verbitterung.</para>

<para><emphasis>Sie</emphasis> wissen natürlich, wieviel Mühe Sie dem
Problem intern gewidmet haben, und dieses Wissen ist in gewisser 
Hinsicht ein Nachteil. Es stellt Ihre Entwickler in eine etwas 
unterschiedlichen mentalen Raum als alle anderen auf den Email
Verteilern, wodurch ihre Fähigkeit eingeschränkt wird, die Dinge aus 
der Sicht derjenigen die noch nicht über das Problem nachgedacht haben
zu sehen. Je früher Sie alle anderen dazu bringen können die Sachen
auf die selbe art zu betrachten wie Sie, desto geringer wird dieser
Abstand verursachende Effekt sein. Diese Logik lässt sich nicht nur
auf einzelne technische Situationen anwenden, sondern auf das breitere
Mandat Ihre Ziele so klar wie Sie können darzulegen. Das Unbekannte
ist immer destabilisierender als das Bekannte. Wenn Menschen verstehen,
warum Sie etwas wollen, werden sie sich dabei wohl fühlen mit Ihnen zu
reden, selbst wenn sie andere Meinung sind als Sie. Wenn sie nicht
herausbekommen was Sie bewegt, werden sie das Schlimmste annehmen,
zumindest für einen Teil der Zeit.</para>

<para>Sie werden natürlich nicht alles veröffentlichen können, und man
wird es nicht von Ihnen erwarten. Alle Organisationen haben
Geheimnisse; vielleicht haben Profit orientierte mehr davon, aber
gemeinnützige haben sie auch. Wenn Sie einen bestimmten Kurs verfechten
müssen, aber nichts über Ihre Gründe offenbaren können, dann bieten Sie
einfach die besten Argumente an, die Sie mit dieser Behinderung dafür
haben und finden Sie sich mit der Tatsache ab, dass Sie vielleicht
nicht den gewünschten Grad an Einfluss bei der Diskussion haben. Das
ist einer der Kompromisse die Sie eingehen, damit die
Entwicklergemeinschaft nicht auf Ihrer Gehaltsliste steht.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<title>Geld Kann Dir Keine Liebe Kaufen</title>

<para>Wenn Sie in einem Projekt ein bezahlter Entwickler sind, dann
legen Sie frühzeitig die Richtlinien fest, was das Geld kaufen kann,
und was nicht. Das bedeutet nicht, dass Sie es zwei mal am Tag an die
Email Verteiler schicken müssen und Ihre noble und unbestechliche
Natur ständig zu wiederholen. Es bedeutet lediglich, dass Sie auf der
Hut für Gelegenheiten sein sollten um Spannungen zu entschärfen, welche
durch Geld entstehen <emphasis>könnten</emphasis>. Sie müssen nicht
mit der Annahme loslegen, dass Spannungen da sind; Sie müssen 
allerdings Zeigen, dass es Ihnen bewusst ist, dass sie das Potential
haben aufzutauchen.</para>

<para>Ein perfektes Beispiel hierfür, ist in dem Subversion Projekt
aufgekommen. Subversion wurde im Jahr 2000 von <ulink
url="http://www.collab.net/">CollabNet</ulink> angefangen, welches seit
beginn der hauptsächliche Geldgeber des Projekts gewesen ist, indem es
die Gehälter mehrerer Entwickler zahlt (Haftungsausschluss: von dem ich
einer bin). Bald nach Anfang des Projekts, stellten wir einen weiteren
Entwickler ein, Mike Pilato, um dem Projekt beizutreten. Bis dahin, 
hatte die Programmierung bereits angefangen. Obwohl Subversion 
sicherlich noch in seiner Anfangsphase war, hatte es bereits eine
Entwicklergemeinschaft, mit einem Satz einfacher Grundregeln.</para>

<para>Die Ankunft von Mike warf eine interessante Frage auf. Subversion
hatte bereits eine Verfahren, nach dem ein neuer Entwickler commit 
Zugriff bekommt. Zuerst reicht er ein paar Patches auf dem Entwickler
Verteiler ein. Nachdem genügend Patches eingetroffen sind, damit die
anderen Committer sehen können, dass der neue Mitwirkende weiß was er
macht, schlägt jemand vor, dass er einfach direkt committed (dieser
Vorschlag ist privat, wie in <xref linkend="committers"/> beschrieben).
Angenommen die Committer stimmen überein, wird einer von ihnen dem
neuen Entwickler eine Mail schreiben und ihm direkten commit Zugriff
auf die Repository des Projekts anbieten.</para>

<para>CollabNet hatte Mike ausdrücklich eingestellt, um an Subversion
zu arbeiten. Von denen, die ihn kannten, gab es keine Zweifel über
seine Programmierfähigkeiten oder seine Bereitschaft an dem Projekt zu
arbeiten. Desweiteren, hatten die freiwilligen Entwickler eine sehr
gute Beziehung mit den Mitarbeitern von CollabNet, und hätte 
wahrscheinlich nichts dagegen gehabt, wenn wir Mike vom Tag seiner 
Einstellung an, einfach commit Zugriff gegeben hätten. Wir wussten 
aber, dass wir einen Präzedenzfall setzen würden. Wenn wir Mike mit
einem Gebot commit Zugriff gegeben hätten, würden wir sagen, dass
CollabNet das recht hat die Richtlinien des Projekts, einfach nur weil
es der Haupt Geldgeber war, zu ignorieren. Obwohl der Schaden hiervon
nicht unbedingt gleich ersichtlich wäre, würde es langsam dazu führen,
dass die nicht bezahlten Entwickler sich ihrer Rechte beraubt fühlen.
Andere müssen ihren Commit Zugriff verdienen&mdash;Collabnet kauft es
einfach.</para>

<para>Mike willigte also ein seine Arbeit bei CollabNet wie jeder 
andere freiwillige Entwickler anzufangen, ohne commit Zugriff. Er
schickte Patches an die öffentlichen Entwickler Verteiler, wo sie
von allen überprüft und beurteilt werden konnten, und wurden. Wir 
sagten auch auf dem Verteiler, dass wir die Sache explizit so 
handhaben, um Missverständnisse zu vermeiden. Nach ein paar Wochen
solider Aktivität durch Mike, schlug jemand (ich kann mich nicht mehr
daran erinnern ob es ein CollabNet Entwickler war oder nicht) vor ihm
commit Zugriff zu gewähren, und er wurde angenommen, wie wir es alle
schon vorausgeahnt hatten.</para>

<!--

Die relevanten Zeitangaben für Mike Pilato sind:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

gefolgt von:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Behebt Ungereimtheiten bei Pfaden auf Windows. Oder allgemeiner,
	benutzt den "style" Paramenter welche den Funktionen der Pfad 
	Bibliothek übergeben wird um das richtige Pfad Trennzeichen (zur
	Zeit '/' oder '\') zu wählen.  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->

<para>Durch diese Art von Kontinuität, erhällt man eine 
Glaubwürdigkeit, die einem Geld nicht kaufen kann. Und Glaubwürdigkeit,
ist eine wertvolle Währung die für technische Diskussionen: Es macht
immun davor, seine Mitive im nachhinein hinterfragt zu bekommen. In der
Hitze einer Debatte, werden Leute vielleicht anfangen nach nicht
technische Möglichkeiten suchen, eine Gefecht zu gewinnen. Der Haupt-
Geldgeber, gibt aufgrund seiner tiefen Beteiligung und offensichtlichen
Sorgen um die Richtung die das Projekt nimmt, eine breiteres Ziel ab
als die Meisten. Indem er gewissenhaft alle Richtlinien des Projekts
von anfang an wahrnimmt, stellt der Finanzier sich auf die gleiche
Höhe wie alle anderen.</para>

<para>(Siehe auch das Blog von Danese Cooper bei
<ulink url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"/>
für eine ähnliche Geschichte um commit Zugriff. Cooper war damals die
"Open Source Diva" von Sun Microsystem's&mdash;Ich glaube das war ihre
offizieller Anrede&mdash;und wie die Entwicklergemeinschaft von Tomcat,
Sun dazu brachte, seine eigene Entwickler an die selben Richtlinien
für commit Zugriff zu halten, wie die Entwickler auserhalb von Sun.)
</para>

<para>Die Notwendigkeit, das Geldgeber nach den selben Regeln spielen,
wie alle anderen bedeutet, dass das Modell der gütigen Diktatur (siehe
<xref linkend="benevolant-dictator"/><phrase output="printed"> 
im Kapitel <xref linkend="social-infrastructure"/></phrase>) etwas 
schwieriger, bei der anwesenheit von Geld durchzuführen ist, 
insbesondere, wenn der Diktator für den Geldgeber arbeitet. Da eine
Diktatur wenig Regeln hat, ist es schwierig für einen Geldgeber zu
beweisen, dass er die Normen der Gemeinschaft befolgt, selbst wenn er
das der Fall ist. Es ist sicherlich nicht unmöglich, es erfordert aber
einen Projektleiter, der in der Lage ist die Dinge sowohl aus der Sicht
der Entwickler von außen, sowie derer die für den Geldgeber arbeiten,
zu sehen, und sich entsprechen zu verhalten. Selbst dann, ist es
wahrscheinlich eine gute Idee einen Vorschlag für eine nicht
diktatorisches Modell bereit zu haben, welches man bei anzeichen von
breiter Unzufriedenheit inerhalb der Gemeinschaft, hervorbringen kann.
</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<title>Auftragsarbeit</title>

<para>Auftragsarbeit muss in freien Software Projekten vorsichtig 
gehandhabt werden. Idealerweise, wollen Sie das die Arbeit des
Auftragnehmers von der Gemeinschaft angenommen wird und in die
veröffentlichte Version aufgenommen wird. Theoretisch würde es keinen
Unterschied machen, wer der Auftragnehmer ist, solange seine Arbeit
gut ist und die Richtlinien des Projekts einhällt. Theorie und Praxis
kann manchmal auch zusammepassen: Ein komplett Fremder der mit einem
guten Patch auftaucht, <emphasis>wird</emphasis> es im allgemeinen 
schaffen, es in die Software zu bekommen. Das Schierige ist, dass es
sehr schwer ist, einen guten Patch für eine nicht triviale Erweiterung
oder Funktion zu produzieren, während man ein komplett Fremder ist; man
muss es zuerst mit dem übrigen Projekts diskutieren. Die Dauer dieser
Diskussion, kann man nicht genau vorrausehen. Wenn der Auftragnehmer
nach Arbeitszeit bezahlt wird, werden Sie vieleicht mehr Bezahlen, als
Sie erwartet haben; wenn er Pauschal bezahlt wird, kann es passieren,
dass er länger arbeitet, als er es sich leisten kann.</para>

<para>Es gibt zwei Möglichkeiten das zu Umgehen. Die bevorzugte ist,
eine fundierte Vermutung über die Dauer der Diskussion zu machen,
welches auf vergangene Erfahrung beruht, und einen Puffer für Fehler,
auf dem der Vertrag basiert. Es hilft auch das Problem in soviele 
kleine Teile wie möglich zu spalten, um die Vorhersehbarkeit der
einzelnen Brocken zu erhöhen. Die andere ist den Auftrag auf den Patch
selber zu beschränken, und seine Aufnahe als eine separate 
Angelegenheit zu behandeln. Dann wird es viel einfacher den Vertrag zu
schreiben, aber ihnen hängt dann der Klotz am Bein, den Patch so lange
zu pflegen, wie Sie auf die Software angewiesen sind, oder zumindest
so lange bis Sie es schaffen eine gleichwertige Funktionalität in den
Hauptast zu bekommen. Natürlich kann der Vertrag, selbst bei nach der
bevorzugten Art, nicht darauf bestehen, dass der Patch im Code
aufgenommen wird, weil das den Verkauf von etwas bedeutetn würden, was
nicht zum Verkauf steht. (Was passiert wenn der Rest des Projekts sich
entscheidet, die Funktion nicht zu unterstützen)? Der Vertrag kann
allerdings eine bestimmte angemessen und glaubhafte Anstrengung
beinhalten, die Änderung von der Gemeinschaft angenommen zu bekommen,
und dass es in die Repository commited wird, wenn es von der
Gemeinschaft angenommen wird. Wenn das Projekt Normen ausgelegt hat,
was Änderungen am Code betrifft, kann der Vertrag auf diese Verwiesen
und festlegen, dass die Arbeit, sich nach denen richten muss. In der
Praxis, funktioniert das meisten wie alle es sich erhoffen.</para>

<para>Die beste Taktik für erfolgreiche Auftragsarbeit ist es, einen
der Entwickler des Projekts als Auftragnehmer&mdash; vorzugsweise einer
der committed&mdash; anzustellen. Das mag sich nach dem erkaufen von
Einfluss anhören, und nun ja das ist es. Es ist aber nicht so korrupt,
wie es sich anhört. Der Einfluss den ein Entwickler innerhalb eines
Projekts hat, hängt vorrangig von der Qualität des Codes den er 
schreibt, und seinen Umgang mit den anderen Entwicklern ab. Die
Tatsache, dass er ein Vertrag hat, um bestimmte Sachen erledigt zu 
bekommen, hebt seinen Status in keiner weise und es senkt ihn auch 
nicht, auch wenn Leute ihn vielleicht etwas vorsichtiger hinterfragen
werden. Die meisten Entwickler würden ihre längerfristige Position in
einem Projekt nicht riskieren indem sie eine weitestgehend unbeliebte
Funktion unterstützen. Tatsächlich, sollte ein Teil von dem was Sie
bekommen, wenn Sie einen solchen Entwickler einstellen, Ratschläge
darüber sein, welche Art von Änderung wahrscheinlich von der 
Gemmeinschaft angenommen werden. Sie erhalten auch eine gewisse
Umstellung der Prioritäten des Projekts. Da die Priorizierung lediglich
davon abhängt, wer Zeit hat um an etwas zu arbeiten, sorgen Sie, indem
Sie für die Zeit von jemandem bezahlen, dafür, dass ihre Arbeit, eine
etwas höhere Priorität bekommt. Das ist eine wohl verstandene Tatsache
des Lebens unter erfahrenen Open Source Entwicklern, und zumindest
manche werden der Arbeit eines Auftragnehmers Aufmerksamkeit widmen,
einfach nur weil es danach aussieht, als würde es <emphasis>fertig
werden</emphasis>, also wollen sie dabei helfen, dass es richtig
gemacht wird. Sie werden vielleicht selber nichts von dem Code 
schreiben, werden aber den Enwurf diskutieren und den Code überprüfen
und bewerten, was alles sehr nützlich sein kann. Aus all diesen 
Gründen, sollte der Auftragnehmer am ehesten aus den Reihen der 
bereits am Projekt beteiligten gezogen werden.</para>

<para>Dadurch stellen sich zwei Fragen: Sollten Verträge jemals privat
sein? Und wenn sie es nicht sind, sollten Sie sich darüber sorgen 
machen, Spannungen in der Gemeinschaft zu verursachen indem Sie mit
manchen der Entwickler Verträge geschlossen haben, und nicht mit 
andere?</para>

<para>Es ist am besten, wenn Sie im Bezugauf Vertrüge offen sind,
wenn Sie es können. Ansonsten, kann sich das Verhalten des 
Beauftragten anderen in der Gemeinschaft komisch vorkommen&mdash;
vielleicht geben Sie auf ein mal Funktione eine unerklärlich hohe
Priorität, für die sie in der Vergangenheit, nie Interesse gezeigt
haben. Wenn Leute danach fragen, warum er sie jetzt haben will, wie
soll er überzeugend antworten, wenn er nicht über die Tatsache reden
kann, dass er beauftragt wurde sie zu schreiben?</para>

<para>Gleichzeitig sollten weder Sie noch der Auftragnehmer, so tun
als ob andere ihre Vereinbarung als etwas besonderes behandeln sollten.
All zu oft, habe ich Auftragnehmer erlebt, die auf dem Email Verteiler
mit der Einstellung hereinplatzen, dass ihre Nachrichten ernster 
genommen werden sollten, einfach nur, weil sie bezahlt werden. Diese
Art von Einstellung hat zur Folge, dass der Vertragnehmer de Vertrag
an un für sich als das Wichtige erachtet&mdash; im Gegensatz zu dem aus
dem Vertrag <emphasis>resultierenden</emphasis> Code. Aus Sicht der
anderen Entwickler ist nur der Code das Wesentliche. Technische 
Probleme sollten immer im Mittelpunkt stehen, nicht die Details 
darüber, wer von wem bezahlt wird. Einer der Entwickler in der 
Subversion Gemeinschaft geht mit Vertragsarbeit auf eine besonders
elegante Art um. Während er seine Code Änderungen im IRC bespricht,
wird er nebenbei anmerken (oftmals in einer privaten Nachricht, also
<firstterm>privmsg</firstterm> im IRC, an einer der anderen 
Entwickler), dass er für seine Arbeit an diesem bestimmten Bug oder 
Funktion bezahlt wird. Er gibt aber durchweg den Eindruck, dass er an
dieser Änderunge auch so arbeiten wollte, und dass er darüber glücklich
ist, dass das Geld es ihm ermöglicht. Er mag die Identität des Kunden
offen legen, oder auch nicht, in jedem Fall aber verweilt er nicht bei
dem Vertrag. Seine Anmerkungen darüber sind lediglich eine Zierde für
eine ansonsten technische Diskussion darüber, wie man etwas erledigt
bekommt.</para>

<para>Dieses Beispiel zeigt einen weiteren Grund warum es gut ist, über
Verträge offen zu sein. Es mag mehrere Organisationen geben, die bei
einem gegebenen Open Source Projekt Verträge beisteuern, und wenn jeder
weiß, was der andere versucht zu machen, können sie vielleicht ihre 
Resourcen bündeln. Im obigen Fall, ist er größte Finanzier (CollabNet)
nicht in irgend einer weise mit dieser Stückarbeit beteiligt, aber mit
dem Wissen, dass jemand anderes bestimmte Bug Fixes fördert wird es
CollabNet ermöglicht, seine Resourcen auf andere Bugs zu richten, was
zu einer größeren Effiziens für das Projekt im gesamten führt.</para>

<para>Will other developers resent that some are paid for working on
the project?  In general, no, particularly when those who are paid are
established, well-respected members of the community anyway.  No one
expects contract work to be distributed equally among all the
committers.  People understand the importance of long-term
relationships: the uncertainties involved in contracting are such that
once you find someone you can work reliably with, you would be
reluctant to switch to a different person just for the sake of
evenhandedness.  Think of it this way: the first time you hire, there
will be no complaints, because clearly you had to pick
<emphasis>someone</emphasis>&mdash;it's not your fault you can't hire
everyone.  Later, when you hire the same person a second time, that's
just common sense: you already know him, the last time was
successful, so why take unnecessary risks?  Thus, it's perfectly
natural to have one or two go-to people in the community, instead of
spreading the work around evenly.</para>

<sect2 id="community-review-acceptance">
<title>Review and Acceptance of Changes</title>

<para>The community is still important to the success of contract
work.  Their involvement in the design and review process for sizeable
changes cannot be an afterthought.  It must be considered part of the
work, and fully embraced by the contractor.  Don't think of community
scrutiny as an obstacle to be overcome&mdash;think of it as a free
design board and QA department.  It is a benefit to be aggressively
pursued, not merely endured.</para>

<sect3 id="cvs-pserver">
<title>Case study: the CVS password-authentication protocol</title>

<para>In 1995, I was one half of a partnership that provided support
and enhancements for CVS (the Concurrent Versions System; see <ulink
url="http://www.cvshome.org/"/>).  My partner Jim and I were,
informally, the maintainers of CVS by that point.  But we'd never
thought carefully about how we ought to relate to the existing, mostly
volunteer CVS development community.  We just assumed that they'd send
in patches, and we'd apply them, and that was pretty much how it
worked.</para>

<para>Back then, networked CVS could be done only over a remote login
program such as <literal>rsh</literal>.  Using the same password for
CVS access as for login access was an obvious security risk, and many
organizations were put off by it.  A major investment bank hired us to
add a new authentication mechanism, so they could safely use networked
CVS with their remote offices.</para>

<para>Jim and I took the contract and sat down to design the new
authentication system.  What we came up with was pretty simple (the
United States had export controls on cryptographic code at the time,
so the customer understood that we couldn't implement strong
authentication), but as we were not experienced in designing such
protocols, we still made a few gaffes that would have been obvious to
an expert.  These mistakes would easily have been caught had we taken
the time to write up a proposal and run it by the other developers for
review.  But we never did so, because it didn't occur to us to think
of the development list as a resource to be used.  We knew that people
were probably going to accept whatever we committed, and&mdash;because
we didn't know what we didn't know&mdash;we didn't bother to do the
work in a visible way, e.g., posting patches frequently, making small,
easily digestible commits to a special branch, etc.  The resulting
authentication protocol was not very good, and of course, once it
became established, it was difficult to improve, because of
compatibility concerns.</para>

<para>The root of the problem was not lack of experience; we could
easily have learned what we needed to know.  The problem was our
attitude toward the volunteer development community.  We regarded
acceptance of the changes as a hurdle to leap, rather than as a
process by which the quality of the changes could be improved.  Since
we were confident that almost anything we did would be accepted (as it
was), we made little effort to get others involved.</para>

</sect3>

<para>Obviously, when you're choosing a contractor, you want someone
with the right technical skills and experience for the job.  But it's
also important to choose someone with a track record of constructive
interaction with the other developers in the community.  That way
you're getting more than just a single person; you're getting an agent
who will be able to draw on a network of expertise to make sure the
work is done in a robust and maintainable way.</para>

</sect2>

<!-- 
<para><remark>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with volunteer developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark></para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<title>Funding Non-Programming Activities</title>

<para>Programming is only part of the work that goes on in an open
source project.  From the point of view of the project's volunteers,
it's the most visible and glamorous part.  This unfortunately means
that other activities, such as documentation, formal testing, etc., can
sometimes be neglected, at least compared to the amount of attention
they often receive in proprietary software.  Corporate organizations
are sometimes able to make up for this, by devoting some of their
internal software development infrastructure to open source
projects.</para>

<para>The key to doing this successfully is to translate between the
company's internal processes and those of the public development
community.  Such translation is not effortless: often the two are not
a close match, and the differences can only be bridged via human
intervention.  For example, the company may use a different bug
tracker than the public project.  Even if they use the same tracking
software, the data stored in it will be very different, because the
bug-tracking needs of a company are very different from those of a
free software community.  A piece of information that starts in one
tracker may need to be reflected in the other, with confidential
portions removed or, in the other direction, added.</para>

<para>The sections that follow are about how to build and maintain
such bridges.  The end result should be that the open source project
runs more smoothly, the community recognizes the company's investment
of resources, and yet does not feel that the company is
inappropriately steering things toward its own goals.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-qa">
<title>Quality Assurance (i.e., Professional Testing)</title>

<para>In proprietary software development, it is normal to have teams
of people dedicated solely to quality assurance: bug hunting,
performance and scalability testing, interface and documentation
checking, etc.  As a rule, these activities are not pursued as
vigorously by the volunteer community on a free software project.
This is partly because it's hard to get volunteer labor for
unglamorous work like testing, partly because people tend to assume
that having a large user community gives the project good testing
coverage, and, in the case of performance and scalability testing,
partly because volunteers often don't have access to the necessary
hardware resources anyway.</para>

<para>The assumption that having many users is equivalent to having
many testers is not entirely baseless.  Certainly there's little point
assigning testers for basic functionality in common environments: bugs
there will quickly be found by users in the natural course of things.
But because users are just trying to get work done, they do not
consciously set out to explore uncharted edge cases in the program's
functionality, and are likely to leave certain classes of bugs
unfound.  Furthermore, when they discover a bug with an easy
workaround, they often silently implement the workaround without
bothering to report the bug.  Most insidiously, the usage patterns of
your customers (the people who drive <emphasis>your</emphasis>
interest in the software) may differ in statistically significant ways
from the usage patterns of the Average User In The Street.</para>

<para>A professional testing team can uncover these sorts of bugs, and
can do so as easily with free software as with proprietary software.
The challenge is to convey the testing team's results back to the
public in a useful form.  In-house testing departments usually have
their own way of reporting test results, involving company-specific
jargon, or specialized knowledge about particular customers and their
data sets.  Such reports would be inappropriate for the public bug
tracker, both because of their form and because of confidentiality
concerns.  Even if your company's internal bug tracking software
were the same as that used by the public project, management might
need to make company-specific comments and metadata changes to the
issues (for example, to raise an issue's internal priority, or
schedule its resolution for a particular customer).  Usually such
notes are confidential&mdash;sometimes they're not even shown to the
customer.  But even when they're not confidential, they're of no
concern to the public project, and therefore the public should not be
distracted with them.</para>

<para>Yet the core bug report itself <emphasis>is</emphasis> important
to the public.  In fact, a bug report from your testing department is
in some ways more valuable than one received from users at large,
since the testing department probes for things that other users won't.
Given that you're unlikely to get that particular bug report from any
other source, you definitely want to preserve it and make it
available to the public project.</para>

<para>To do this, either the QA department can file issues directly in
the public issue tracker, if they're comfortable with that, or an
intermediary (usually one of the developers) can "translate" the
testing department's internal reports into new issues in the public
tracker.  Translation simply means describing the bug in a way that
makes no reference to customer-specific information (the reproduction
recipe may use customer data, assuming the customer approves it, of
course).</para>

<para>It is somewhat preferable to have the QA department filing
issues in the public tracker directly.  That gives the public a more
direct appreciation of your company's involvement with the project:
useful bug reports add to your organization's credibility just as any
technical contribution would.  It also gives developers a direct line
of communication to the testing team.  For example, if the internal QA
team is monitoring the public issue tracker, a developer can commit a
fix for a scalability bug (which the developer may not have the
resources to test herself), and then add a note to the issue asking
the QA team to see if the fix had the desired effect.  Expect a bit of
resistance from some of the developers; programmers have a tendency to
regard QA as, at best, a necessary evil.  The QA team can easily
overcome this by finding significant bugs and filing comprehensible
reports; on the other hand, if their reports are not at least as good
as those coming from the regular user community, then there's no point
having them interact directly with the development team.</para>

<para>Either way, once a public issue exists, the original internal
issue should simply reference the public issue for technical content.
Management and paid developers may continue to annotate the internal
issue with company-specific comments as necessary, but use the public
issue for information that should be available to everyone.</para>

<para>You should go into this process expecting extra overhead.
Maintaining two issues for one bug is, naturally, more work than
maintaining one issue.  The benefit is that many more coders will see
the report and be able to contribute to a solution.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-legal">
<title>Legal Advice and Protection</title>

<para>Corporations, for-profit or nonprofit, are almost the only
entities that ever pay attention to complex legal issues in free
software.  Individual developers often understand the nuances of
various open source licenses, but they generally do not have the time
or resources to follow copyright, trademark, and patent law in detail.
If your company has a legal department, it can help a project by
vetting the copyright status of the code, and helping developers
understand possible patent and trademark issues.  The exact forms this
help could take are discussed in <xref linkend="legal"/>.  The
main thing is to make sure that communications between the legal
department and the development community, if they happen at all,
happen with a mutual appreciation of the very different universes the
parties are coming from.  On occasion, these two groups talk past each
other, each side assuming domain-specific knowledge that the other
does not have.  A good strategy is to have a liaison (usually a
developer, or else a lawyer with technical expertise) stand in the
middle and translate for as long as needed.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-documentation-usability">
<title>Documentation and Usability</title>

<para>Documentation and usability are both famous weak spots in open
source projects, although I think, at least in the case of
documentation, that the difference between free and proprietary
software is frequently exaggerated.  Nevertheless, it is empirically
true that much open source software lacks first-class documentation
and usability research.</para>

<para>If your organization wants to help fill these gaps for a
project, probably the best thing it can do is hire people who
are <emphasis>not</emphasis> regular developers on the project, but
who will be able to interact productively with the developers.
Not hiring regular developers is good for two reasons: one, that way
you don't take development time away from the project; two, those
closest to the software are usually the wrong people to write
documentation or investigate usability anyway, because they have
trouble seeing the software from an outsider's point of view.</para>

<para>However, it will still be necessary for whoever works on these
problems to communicate with the developers.  Find people who are
technical enough to talk to the coding team, but not so expert in the
software that they can't empathize with regular users anymore.</para>

<para>A medium-level user is probably the right person to write good
documentation.  In fact, after the first edition of this book was
published, I received the following email from an open source
developer named Dirk Reiners:</para>

<screen>
One comment on Money::Documentation and Usability: when we had some 
money to spend and decided that a beginner's tutorial was the most 
critical piece that we needed we hired a medium-level user to write it. 
He had gone through the induction to the system recently enough to 
remember the problems, but he had gotten past them so he knew how to 
describe them. That allowed him to write something that needed only 
minor fixes by the core developers for the things that he hadn't gotten 
right, but still covering the 'obvious' stuff devs would have missed.

His case was even better, as it had been his job to introduce a bunch of 
other people (students) to the system, so he combined the experience of 
many people, which is something that was just a lucky occurrence and is 
probably hard to get in most cases.
</screen>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-hosting">
<title>Providing Hosting/Bandwidth</title>

<para>For a project that's not using one of the free canned hosting
sites (see
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), providing a
server and network connection&mdash;and most importantly, system
administration help&mdash;can be of significant assistance.  Even if
this is all your organization does for the project, it can be a
moderately effective way to obtain good public relations karma, though
it will not bring any influence over the direction of the
project.</para>

<para>You can probably expect a banner ad or an acknowledgment on the
project's home page, thanking your company for providing hosting.  If
you set up the hosting so that the project's web address is under your
company's domain name, then you will get some additional association
just through the URL.  This will cause most users to think of the
software as having <emphasis>something</emphasis> to do with your
company, even if you don't contribute to development at all.  The
problem is, the developers are aware of this associative tendency too,
and may not be very comfortable with having the project in your domain
unless you're contributing more resources than just bandwidth.  After
all, there are a lot of places to host these days.  The community may
eventually feel that the implied misallocation of credit is not worth
the convenience brought by hosting, and take the project elsewhere.
So if you want to provide hosting, do so&mdash;but either plan to get
even more involved soon, or be circumspect about how much involvement
you claim.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<title>Marketing</title>

<para>Although most open source developers would probably hate to
admit it, marketing works.  A good marketing campaign
<emphasis>can</emphasis> create buzz around an open source product,
even to the point where hardheaded coders find themselves having
vaguely positive thoughts about the software for reasons they can't
quite put their finger on.  It is not my place here to dissect the
arms-race dynamics of marketing in general.  Any corporation involved
in free software will eventually find itself considering how to market
themselves, the software, or their relationship to the
software.  The advice below is about how to avoid common pitfalls in
such an effort; see also
<xref linkend="publicity"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<title>Remember That You Are Being Watched</title>

<para>For the sake of keeping the volunteer developer community on
your side, it is <emphasis>very</emphasis> important not to say
anything that isn't demonstrably true.  Audit all claims carefully
before making them, and give the public the means to check your claims
on their own.  Independent fact checking is a major part of open
source, and it applies to more than just the code.</para>

<para>Naturally no one would advise companies to make unverifiable
claims anyway.  But with open source activities, there is an unusually
high quantity of people with the expertise to verify
claims&mdash;people who are also likely to have high-bandwidth
Internet access and the right social contacts to publicize their
findings in a damaging way, should they choose to.  When Global
Megacorp Chemical Industries pollutes a stream, that's verifiable, but
only by trained scientists, who can then be refuted by Global
Megacorp's scientists, leaving the public scratching their heads and
wondering what to think.  On the other hand, your behavior in the open
source world is not only visible and recorded; it is also easy for many
people to check it independently, come to their own conclusions, and
spread those conclusions by word of mouth.  These communications
networks are already in place; they are the essence of how open source
operates, and they can be used to transmit any sort of information.
Refutation is usually difficult, if not impossible, especially when
what people are saying is true.</para>

<para>For example, it's okay to refer to your organization as having
"founded project X" if you really did.  But don't refer to yourself as
the "makers of X" if most of the code was written by outsiders.
Conversely, don't claim to have a deeply involved volunteer developer
community if anyone can look at your repository and see that there are
few or no code changes coming from outside your organization.</para>

<para>Not too long ago, I saw an announcement by a very well-known
computer company, stating that they were releasing an important
software package under an open source license.  When the initial
announcement came out, I took a look at their now-public version
control repository and saw that it contained only three revisions.  In
other words, they had done an initial import of the source code, but
hardly anything had happened since then.  That in itself was not
worrying&mdash;they'd just made the announcement, after all.  There
was no reason to expect a lot of development activity right
away.</para>

<para>Some time later, they made another announcement.  Here is what
it said, with the name and release number replaced by pseudonyms:</para>

  <blockquote>
    <para><emphasis>We are pleased to announce that following
    rigorous testing by the Singer Community, Singer&nbsp;5 for Linux
    and Windows are now ready for production use.</emphasis></para>
  </blockquote>

<para>Curious to know what the community had uncovered in "rigorous
testing," I went back to the repository to look at its recent change
history.  The project was still on revision 3.  Apparently, they
hadn't found a <emphasis>single</emphasis> bug worth fixing before the
release!  Thinking that the results of the community testing must have
been recorded elsewhere, I next examined the bug tracker.  There were
exactly six open issues, four of which had been open for several months
already.</para>

<para>This beggars belief, of course.  When testers pound on a large
and complex piece of software for any length of time, they will find
bugs.  Even if the fixes for those bugs don't make it into the
upcoming release, one would still expect some version control activity
as a result of the testing process, or at least some new issues.  Yet
to all appearances, nothing had happened between the announcement of
the open source license and the first open source release.</para>

<para>The point is not that the company was lying about the community
testing.  I have no idea if they were or not.  But they were oblivious
to how much it <emphasis>looked</emphasis> like they were lying.
Since neither the version control repository nor the issue tracker
gave any indication that the alleged rigorous testing had occurred,
the company should either not have made the claim in the first place,
or provided a clear link to some tangible result of that testing ("We
found 278 bugs; click here for details").  The latter would have
allowed anyone to get a handle on the level of community activity very
quickly.  As it was, it only took me a few minutes to determine that
whatever this community testing was, it had not left traces in any of
the usual places.  That's not a lot of effort, and I'm sure I'm not
the only one who took the trouble.</para>

<para>Transparency and verifiability are also an important part of
accurate crediting, of course.  See
<xref linkend="credit"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on this.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<title>Don't Bash Competing Open Source Products</title>

<para>Refrain from giving negative opinions about competing open
source software.  It's perfectly okay to give negative
<emphasis>facts</emphasis>&mdash;that is, easily confirmable
assertions of the sort often seen in good comparison charts.  But
negative characterizations of a less rigorous nature are best avoided,
for two reasons.  First, they are liable to start flame wars that
detract from productive discussion.  Second, and more importantly,
some of the volunteer developers in <emphasis>your</emphasis> project
may turn out to work on the competing project as well.  This is more
likely than it at first might seem: the projects are already in the
same domain (that's why they're in competition), and developers with
expertise in that domain may make contributions wherever their
expertise is applicable.  Even when there is no direct developer
overlap, it is likely that developers on your project are at least
acquainted with developers on related projects.  Their ability to
maintain constructive personal ties could be hampered by
overly negative marketing messages.</para>

<para>Bashing competing closed-source products seems to be more widely
accepted in the open source world, especially when those products are
made by Microsoft.  Personally, I deplore this tendency (though again,
there's nothing wrong with straightforward factual comparisons), not
merely because it's rude, but also because it's dangerous for a
project to start believing its own hype and thereby ignore the ways in
which the competition may actually be superior.  In general, watch out
for the effect that marketing statements can have on your own
development community.  People may be so excited at being backed by
marketing dollars that they lose objectivity about their software's
true strengths and weaknesses.  It is normal, and even expected, for a
company's developers to exhibit a certain detachment toward marketing
statements, even in public forums.  Clearly, they should not come out
and contradict the marketing message directly (unless it's actually
wrong, though one hopes that sort of thing would have been caught
earlier).  But they may poke fun at it from time to time, as a way of
bringing the rest of the development community back down to
earth.</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
