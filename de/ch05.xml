<chapter id="money">
<!--
<title>Money</title>
-->
<title>Geld</title>

<simplesect>
<!--
<para>This chapter examines how to bring funding into a free software
environment.  It is aimed not only at developers who are paid to work
on free software projects, but also at their managers, who need to
understand the social dynamics of the development environment.  In the
sections that follow, the addressee ("you") is presumed to be either a
paid developer, or one who manages such developers.  The advice will
often be the same for both; when it's not, the intended audience will
be made clear from context.</para>
-->
<para>In diesem Kapitel untersuchen wir die Finanzierung freier 
Software. Es richtet sich nicht nur an die Entwickler, die für ihre Arbeit 
an freien Software-Projekte bezahlt werden wollen, sondern auch an 
Projektleiter, die ein Verständnis über die soziale Dynamik der 
Entwicklungsumgebung haben müssen. In den folgenden Abschnitten gehe 
ich davon aus, dass Sie entweder ein bezahlter Entwickler, oder ein 
Leiter solcher Entwickler sind. Die Ratschläge werden für beide oft die 
gleichen sein; wenn nicht, wird die angesprochene Gruppe aus dem Kontext 
klar ersichtlich sein.</para>

<!--
<para>Corporate funding of free software development is not a new
phenomenon.  A lot of development has always been informally
subsidized.  When a system administrator writes a network analysis
tool to help her do her job, then posts it online and gets bug fixes
and feature contributions from other system administrators, what's
happened is that an unofficial consortium has been formed.  The
consortium's funding comes from the sysadmins' salaries, and its
office space and network bandwidth are donated, albeit unknowingly, by
the organizations they work for.  Those organizations benefit from the
investment, of course, although they may not be institutionally aware
of it at first.</para>
-->
<para>Unternehmen finanzieren die Entwicklung freier Software schon seit
langem. Viele Entwicklung wurden schon immer informell subventioniert. 
Wenn ein Systemadministrator ein Programm zur Netzwerkanalyse schreibt,
um seine Arbeit zu erleichtern, stellt er es online und erhält Beiträge
von anderen Administratoren, in Form von Bugfixes und neuen Funktionen,
sodass sich sich ein neues Konsortium bildet. Die Finanzierung stammt 
aus den Gehältern der Administratoren, seine Bürofläche und 
Infrastruktur werden, wenn auch ohne ihr Wissen, von dem jeweiligen
Arbeitgeber gespendet. Diese Organisationen profitieren natürlich von 
der Investition, auch wenn sie zunächst, aus institutioneller Sicht, 
nichts davon wissen.</para>

<!--
<para>The difference today is that many of these efforts are being
formalized.  Corporations have become conscious of the benefits of
open source software, and started involving themselves more directly
in its development.  Developers too have come to expect that really
important projects will attract at least donations, and possibly even
long-term sponsors.  While the presence of money has not changed the
basic dynamics of free software development, it has greatly changed
the scale at which things happen, both in terms of the number of
developers and time-per-developer.  It has also had effects on how
projects are organized, and on how the parties involved in them
interact.  The issues are not merely about how the money is spent, or
how return on investment is measured.  They are also about management
and process: how can the hierarchical command structures of
corporations and the semi-decentralized volunteer communities of free
software projects work productively with each other?  Will they even
agree on what "productively" means?</para>
-->
<para>Der Unterschied heute ist, dass viele dieser Anstrengungen
formalisiert werden. Firmen sind sich der Vorteile von 
Open-Source-Software bewusst geworden und fangen an sich direkter an ihrer
Entwicklung zu beteiligen. Entwickler erwarten mittlerweile, dass
wirklich wichtige Projekte zumindest Spenden, oder sogar längerfristige
Sponsoren anlocken. Geld hat zwar nicht sonderlich viel an der Dynamik
der Entwicklung freier Software geändert, der Maßstab der Abläufe ist
aber doch größer geworden, sowohl hinsichtlich der Anzahl der 
Entwickler, als auch der Zeit pro Entwickler. Es hat auch die 
Organisation der Projekte beeinflusst und wie die beteiligten Parteien
miteinander umgehen. Es geht nicht nur darum, wie das Geld ausgegeben
wird oder wie Rendite gemessen wird, sondern auch um Verwaltung und 
Ablauf: Wie kann die hierarchische Befehlsstruktur einer Firma, mit
einer halb dezentralisierten Gemeinschaften von Freiwilligen im Einklang
gebracht werden? Werden die Entwickler dieser beiden Gruppen sich 
überhaupt darauf einigen können, was "Produktivität" bedeutet?</para>

<!--
<para>Financial backing is, in general, welcomed by open source
development communities.  It can reduce a project's vulnerability to the
Forces of Chaos, which sweep away so many projects before they really
get off the ground, and therefore it can make people more willing to
give the software a chance&mdash;they feel they're investing their
time into something that will still be around six months from now.
After all, credibility is contagious, to a point.  When, say, IBM
backs an open source project, people pretty much assume the project
won't be allowed to fail, and their resultant willingness to devote
effort to it can make that a self-fulfilling prophecy.</para>
-->
<para>Finanzielle Rückendeckung wird allgemein von 
Open-Source-Gemeinschaften 
gerne angenommen. Sie kann vor den Folgen vom Chaos 
schützen, die so viele Projekte wegfegen, bevor sie es wirklich
schaffen, vom Boden abzuheben. Leute sind eher bereit, der Software
eine Chance zu geben, wenn sie das Gefühl haben, ihre Zeit in etwas zu
investieren, was auch noch in 6 Monaten da sein wird. Schließlich ist
Glaubwürdigkeit zu einem gewissen Grad ansteckend. Wenn sagen wir IBM
ein Projekt unterstützt, kann man davon ausgehen, dass ein Scheitern
des Projekts nicht zugelassen wird, und ihre sich daraus ergebende
Bereitschaft selbst Mühe aufzubringen kann zu einer zu einer selbst
erfüllende Prophezeiung werden.</para>

<!--
<para>However, funding also brings a perception of control.  If not
handled carefully, money can divide a project into in-group and
out-group developers.  If the unpaid volunteers get the feeling that
design decisions or feature additions are simply available to the
highest bidder, they'll head off to a project that seems more like a
meritocracy and less like unpaid labor for someone else's benefit.
They may never complain overtly on the mailing lists.  Instead, there
will simply be less and less noise from external sources, as the
volunteers gradually stop trying to be taken seriously.  The buzz of
small-scale activity will continue, in the form of bug reports and
occasional small fixes.  But there won't be any large code
contributions or outside participation in design discussions.  People
sense what's expected of them, and live up (or down) to those
expectations.</para>
-->
<para>Finanzierung bringt jedoch auch ein Gefühl von Kontrolle. Ohne
sorgfältige Handhabung kann Geld die Entwicklergemeinschaft in
Lager spalten. Wenn die unbezahlten Entwickler das Gefühl bekommen,
dass Entscheidungen über die Architektur oder neuen Funktionen, einfach 
eine Frage des Geldes sind, werden sie zu einem anderen Projekt
wechseln, indem sie eher das Gefühl haben, dass Leistung das 
Ausschlaggebende ist. Unbezahlte Arbeit für Funktionen, die alleine im
Interesse einer Firma sind, wird kein freiwilliger Entwickler machen.
Sie werden sich vielleicht nicht auf der Mailingliste beschweren,
mit der Zeit, wird es aber immer weniger von außen zu hören geben, 
während Freiwillige sich immer weniger bemühen ernst genommen zu 
werden. Das Surren der kleineren Aktivitäten, in Form von Bug-Reports 
und gelegentlichen kleinen Fixes wird weitergehen. Es wird aber von
außen keine größeren Beiträge oder Beteiligung an wichtigen Diskussionen
geben. Leute spüren, was man von ihnen erwartet (bzw. nicht erwartet),
und werden diesen Erwartungen gerecht werden.</para>

<!--
<para>Although money needs to be used carefully, that doesn't mean it
can't buy influence.  It most certainly can.  The trick is that it
can't buy influence directly.  In a straightforward commercial
transaction, you trade money for what you want.  If you need a feature
added, you sign a contract, pay for it, and it gets done.  In an open
source project, it's not so simple.  You may sign a contract with some
developers, but they'd be fooling themselves&mdash;and you&mdash;if
they guaranteed that the work you paid for would be accepted by the
development community simply because you paid for it.  The work can
only be accepted on its own merits and on how it fits into the
community's vision for the software.  You may have some say in that
vision, but you won't be the only voice.</para>
-->
<para>Geld muss zwar vorsichtig benutzt werden, Einfluss ist aber
deswegen noch lange nicht käuflich. Der Haken ist, dass man ihn nicht 
direkt erkaufen kann. Bei einem einfachen kommerziellen Geschäft, 
tauschen Sie Geld gegen ein Gut. Wenn Sie eine zusätzliche Funktion
benötigen, unterschreiben Sie einen Vertrag, zahlen dafür und es wird
umgesetzt. In einem Open-Source-Projekt geht das nicht so einfach. Sie
werden vielleicht mit ein paar Entwickler Verträge abschließen, aber
diese würden sich &ndash; und Sie &ndash; täuschen, wenn sie garantieren, 
dass die von Ihnen finanzierte Arbeit von der Entwicklergemeinschaft
angenommen wird. Nur weil Sie dafür bezahlen, mag die Funktion noch
lange nicht zu der Vorstellung über die Zukunft der Software der 
Gemeinschaft passen. Die Arbeit kann nur im Rahmen seiner Leistung
und wie gut sie sich in die Vision der Community für die Software 
einfügt angenommen werden. Sie werden dabei möglicherweise etwas zu 
der Vision zu sagen haben, Sie werden aber nicht die einzige sein.</para>

<!--
<para>So money can't purchase influence, but it can purchase things
that <emphasis>lead to</emphasis> influence.  The most obvious example
is programmers.  If good programmers are hired, and they stick around
long enough to get experience with the software and credibility in the
community, then they can influence the project by the same means as
any other member.  They will have a vote, or if there are many of
them, they will have a voting bloc.  If they are respected in the
project, they will have influence beyond just their votes.  There is
no need for paid developers to disguise their motives, either.  After
all, everyone who wants a change made to the software wants it for a
reason.  Your company's reasons are no less legitimate than anyone
else's.  It's just that the weight given to your company's goals will
be determined by its representatives' status in the project, not by
the company's size, budget, or business plan.</para>
-->
<para>Einfluss ist also nicht käuflich, Sachen die zu Einfluss
<emphasis>führen</emphasis> sind es aber sehr wohl. Das offensichtlichste
Beispiel sind Programmierer. Wenn gute Programmierer eingestellt werden,
und sie lange genug bleiben um Erfahrung mit der Software und
Glaubwürdigkeit in der Gemeinschaft zu sammeln, können Sie das Projekt 
gleichermaßen beeinflussen wie jedes andere Mitglied. Sie haben bei
Wahlen eine Stimme, mehreren Entwickler geben Ihnen sogar ein Stimmblock.
Wenn Sie in dem Projekt respektiert werden, bekommen sie Einfluss über 
ihre Stimmen hinaus. Bezahlte Entwickler müssen auch nicht ihre Motive 
versuchen zu verschleiern. Schließlich will jeder der eine Änderung macht
es aus irgend einem Grund. Die Motive Ihrer Firma sind in keiner Weise 
weniger berechtigt, als die von irgendjemand anderem. Das Stimmgewicht
ihrer Firma hängt jedoch von dem Status ihrer Stellvertreter im Projekt
ab, nicht von ihrer Größe, ihrem Budget oder Geschäftsplan.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-involvement">
<!--

-->
<title>Arten der Beteiligung</title>

<!--
<para>There are many different reasons open source projects get
funded.  The items in this list aren't mutually exclusive; often a
project's financial backing will result from several, or even all, of
these motivations:</para>
-->
<para>Es gibt viele verschiedene Gründe Open-Source-Projekte zu 
Finanzieren. Die Punkte auf dieser Liste schließen sich nicht gegenseitig
aus; oftmals wird die Finanzielle Rückendeckung das Resultat mehrerer oder
all dieser Motivationen sein:</para>

<variablelist>

   <varlistentry>
     <!--
     <term>Sharing the burden</term>
     -->
     <term>Geteilte Last</term>
     <listitem>
     <!--
     <para>Separate organizations with related software needs often
     find themselves duplicating effort, either by redundantly writing
     similar code in-house, or by purchasing similar products from
     proprietary vendors.  When they realize what's going on, the
     organizations may pool their resources and create (or join) an
     open source project tailored to their needs.  The advantages are
     obvious: the costs of development are divided, but the benefits
     accrue to all.  Although this scenario seems most intuitive for
     nonprofits, it can make strategic sense even for for-profit
     competitors.</para>
     <para>Examples: <ulink url="http://www.openadapter.org/"
     >openadapter.org</ulink>,
     <ulink url="http://www.koha.org/" >koha.org</ulink></para>
     -->
     <para>Separate Organisationen mit überlappenden Softwarebedarf
     merken, dass sie die gleiche Arbeit machen, entweder schreiben sie
     redundant den gleichen Code in der selben Firma, oder sie kaufen
     ähnliche Produkte von proprietären Anbietern. Wenn sie bemerken, was
     vor sich geht, werden sie vielleicht ihre Ressourcen zusammenlegen
     und ein Open-Source-Projekt gründen (oder beitreten) welches an 
     ihren Bedarf angepasst ist. Die Vorteile sind offensichtlich: Die 
     Kosten der Entwicklung werden geteilt, die Vorteile kommen aber 
     allen gleichermaßen zugute. Obwohl dieses Szenario die intuitivste
     für gemeinnützige Organisationen scheint, kann es auch für 
     profitorientierte Konkurrenten Sinn machen.</para>
     <para>Beispiele: <ulink url="http://www.openadapter.org/"/>,
     <ulink url="http://www.koha.org/"/></para>
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Augmenting services</term>
     -->
     <term>Verbesserung von Dienstleistungen</term>
     <listitem>
     <!--
     <para>When a company sells services which depend on, or are made
     more attractive by, particular open source programs, it is
     naturally in that company's interests to ensure those programs
     are actively maintained.</para>
     <para>Example: <ulink
     url="http://www.collab.net/">CollabNet's</ulink> support of
     <ulink url="http://subversion.apache.org/">Subversion</ulink>
     (disclaimer: I worked for CollabNet on that project, but it's
     also a perfect example of this model).</para>
     </listitem>
     -->
     <para>Wenn eine Firma Dienstleistungen zu bestimmten 
     Open-Source-Anwendungen 
     verkauft oder diese durch Open-Source-Software attraktiver gemacht
     werden, liegt es natürlich im Interesse der Firma sicherzustellen, 
     dass diese Anwendungen auch gepflegt werden.</para>
     <para>Beispiel: Die Unterstützung von 
     <ulink url="http://subversion.tigris.org/"/> durch
     <ulink url="http://www.collab.net/">CollabNet</ulink> 
     (Haftungsauschluss: Das ist meine tägliche Arbeit, es ist aber auch
     ein perfektes Beispiel für dieses Modell).</para>
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Supporting hardware sales</term>
     -->
     <term>Unterstützung des Hardware-Absatzes</term>
     <listitem>
     <!--
     <para>The value of computers and computer components is directly
     related to the amount of software available for them.  Hardware
     vendors&mdash;not just whole-machine vendors, but also makers
     of peripheral devices and microchips&mdash;have found that
     having high-quality free software to run on their hardware is
     important to customers.</para>
     -->
     <para>Der Wert von Computern und Hardware ist direkt von der dafür
     zur Verfügung stehenden Software abhängig. Hardware-Verkäufer &ndash;
     nicht nur Verkäufer kompletter Maschinen, sondern auch die 
     Hersteller von Peripheriegeräten und Mikrochips &ndash; haben
     herausgefunden, dass es ihren Kunden wichtig ist, hochwertige freie 
     Software für ihre Hardware zu haben.</para>
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Undermining a competitor</term>
     -->
     <term>Untergrabung der Konkurrenz</term>
     <listitem>
     <!--
     <para>Sometimes companies support a particular open source
     project as a means of undermining a competitor's product, which
     may or may not be open source itself.  Eating away at a
     competitor's market share is usually not the sole reason for
     getting involved with an open source project, but it can be a
     factor.</para>
     <para>Example: <ulink url="http://www.openoffice.org/"
     >openoffice.org</ulink> (this is a historical example now, since
     Sun Microsystems, which started the OpenOffice project, has been
     bought by Oracle, and as a result most of the developer momentum
     has moved from OpenOffice to its offspring LibreOffice.  Although
     undermining a competitor wasn't the only reason Sun started
     OpenOffice, it was at least partly a response to Microsoft
     Office, and LibreOffice today continues to be a strong competitor
     to MS Office).</para>
     -->
     <para>Manche Firmen unterstützen ein bestimmtes Open-Source-Projekt
     um ein Produkt der Konkurrenz zu untergraben, welches unter
     Umständen auch selber Open-Source sein kann. Den Marktanteil des
     Konkurrenten wegzufressen ist selten der einzige Grund ein
     Open-Source-Projekt zu unterstützen, kann aber eine Rolle
     spielen.</para>
     <para>Beispiel: <ulink url="http://www.openoffice.org/"/> (nein, das
     ist nicht der einzige Grund für die Existenz der Software, es ist 
     aber zumindest teilweise eine Reaktion auf Microsoft Office).</para> 
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Marketing</term>
     -->
     <term>Marketing</term>
     <listitem>
     <!--
     <para>Having your company associated with a popular open source
     application can be simply good brand management.</para>
     -->
     <para>Ihre Firma mit einer bekannten Open-Source-Anwendung zu 
     assoziieren kann einfach gute Markenpflege sein.</para>
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Dual-licensing</term>
     -->
     <term>Doppelte Lizenzierung</term>
     <listitem>
     <!--
    <para><firstterm>Dual-licensing</firstterm> is the practice of
           offering software under a traditional proprietary license
           for customers who want to resell it as part of a
           proprietary application of their own, and simultaneously
           under a free license for those willing to use it under open
           source terms (see
           <xref
           linkend="dual-licensing"/><phrase output="printed"> in
           <xref linkend="legal"/></phrase>).
           If the open source developer community is active, the
           software gets the benefits of wide-area debugging and
           development, yet the company still gets a royalty stream to
           support some full-time programmers.</para> 
     <para>Two well-known examples are <ulink
           url="http://www.mysql.com/">MySQL</ulink>, makers of the
           database software of the same name, and <ulink
           url="http://www.sleepycat.com/">Sleepycat</ulink>, which
           offers distributions and support for the Berkeley Database.
           It's no coincidence that they're both database companies.
           Database software tends to be integrated into applications
           rather than marketed directly to users, so it's very
           well-suited to the dual-licensing model.</para> 
     -->
     <para><firstterm>Doppelte Lizenzierung</firstterm> bedeutet, 
     Software unter einer traditionellen proprietären Lizenz für Kunden 
     anzubieten, die es als Teil ihrer proprietären Anwendung verkaufen
     wollen. Gleichzeitig veröffentlicht man es unter einer freien Lizenz
     für diejenigen, die bereit sind, es unter den Open-Source-Bedingungen
     zu benutzen (siehe 
     <xref linkend="dual-licensing"/><phrase output="printed"> im Kapitel
     <xref linkend="legal"/></phrase>). Wenn die 
     Open-Source-Entwicklergemeinschaft
     aktiv ist, bekommt die Software die Vorteile
     vieler Anwender um die Entwicklung zu testen, die Firma bekommt 
     dennoch Nutzungsgebühren um ihre Vollzeitentwickler zu 
     unterstützen.</para>
     <para>Zwei bekannte Beispiele sind 
     <ulink url="http://www.mysql.com/">MySQL</ulink>, die Hersteller der
     gleichnamigen Datenbank-Software, und 
     <ulink url="http://www.sleepycat.com/">Sleepycat</ulink>, welche
     Distributionen und Support für die Berkeley-Datenbank anbietet. 
     Beide sind nicht zufällig Datenbank-Firmen. Datenbank-Software 
     neigt dazu eher in anderen Anwendungen integriert zu werden als
     direkt an Kunden vermarktet zu werden, also ist es sehr gut für das
     Modell der doppelten Lizenzierung geeignet.</para> 
     </listitem>
   </varlistentry>

   <varlistentry>
     <!--
     <term>Donations</term>
     -->
     <term>Spenden</term>
     <listitem>
     <!--
     <para>A widely-used project can sometimes get significant
           contributions, from both individuals and organizations,
           just by having an online donation button, or sometimes by
           selling branded merchandise such as coffee mugs, T-shirts,
           mousepads, etc.  A word of caution: if your project accepts
           donations, plan out how the money will be used
           <emphasis>before</emphasis> it comes in, and state the
           plans on the project's web site.  Discussions about how to
           allocate money tend to go a lot more smoothly when held
           before there's actual money to spend; and anyway, if there
           are significant disagreements, it's better to find that out
           while it's still academic.</para>
     -->
     <para>Ein erfolgreiches Projekt kann manchmal wesentliche Beiträge,
     sowohl von Einzelpersonen als auch von Organisationen bekommen, 
     allein durch einen Spendenknopf, oder den Verkauf von Waren mit 
     ihre Marke wie Tassen, T-Shirts, Mousepads, usw. Hierbei sollte man
     vorsichtig sein: Wenn ihr Projekt Spenden annimmt, sollten Sie 
     planen wie das Geld benutzt werden soll, <emphasis>bevor</emphasis>
     es auftaucht, und schreiben Sie ihre Pläne auf die Webseite des 
     Projekts. Diskussionen über die Aufteilung von Geld verlaufen 
     meistens friedlicher wenn es noch keins gibt; sollte es doch
     bedeutende Streitigkeiten über die Verwendung geben, ist es trotzdem
     besser es in einer eher akademischen Diskussion 
     herauszufinden.</para>
     </listitem>
   </varlistentry>

</variablelist>

<!--
<para>A funder's business model is not the only factor in how it
relates to an open source community.  The historical relationship
between the two also matters: did the company start the project, or is
it joining an existing development effort?  In both cases, the funder
will have to earn credibility, but, not surprisingly, there's a bit
more earning to be done in the latter case.  The organization needs to
have clear goals with respect to the project.  Is the company trying
to keep a position of leadership, or simply trying to be one voice in
the community, to guide but not necessarily govern the project's
direction?  Or does it just want to have a couple of committers
around, able to fix customers' bugs and get the changes into the
public distribution without any fuss?</para>
-->
<para>Das Geschäftsmodell eines Geldgebers ist nicht sein einziger 
Einfluss auf eine Open-Source-Gemeinschaft. Seine historische Beziehung
spielt auch eine wesentliche Rolle: Hat die Firma das Projekt gegründet,
oder tritt es einer bereits laufenden Entwicklung bei? So oder so muss
sich der Geldgeber Glaubwürdigkeit verdienen, es ist deswegen auch nicht
verwunderlich, dass letzteres etwas mehr Mühe erfordert. Die 
Organisation muss klare Ziele im Bezug auf das Projekt haben. Versucht 
sie eine Führungsposition zu behalten, oder will sie einfach eine Stimme
in der Gemeinschaft, um diese zu führen aber nicht unbedingt die Richtung
des Projekts vorzugeben? Vielleicht will die Firma auch einfach nur ein
paar Entwickler parat haben, um Fehler für ihre Kunden beheben und 
Änderungen ohne große Umstände in die öffentliche Distribution einbinden
zu können?</para>

<!--
<para>Keep these questions in mind as you read the guidelines that
follow.  They are meant to apply to any sort of organizational
involvement in a free software project, but every project is a human
environment, and therefore no two are exactly alike.  To some degree,
you will always have to play by ear, but following these principles
will increase the likelihood of things turning out the way you
want.</para>
-->
<para>Behalten Sie diese Fragen beim lesen der nachfolgenden Richtlinien
im Hinterkopf. Sie sollen für jede organisatorische Beteiligung an einem
freien Software-Projekt gelten, da Sie es aber mit Menschen zu tun haben
ist jedes Projekt einzigartig. Zu einen gewissen Grad werden Sie immer
nach Gehör spielen müssen, die Entwicklung wird aber eher nach ihren
Vorstellungen verlaufen, wenn Sie diese Prinzipien befolgen.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<!--
<title>Hire for the Long Term</title>
-->
<title>Langzeit-Entwickler</title>

<!--
<para>If you're managing programmers on an open source project, keep
them there long enough that they acquire both technical and political
expertise&mdash;a couple of years, at a minimum.  Of course, no
project, whether open or closed-source, benefits from swapping
programmers in and out too often.  The need for a newcomer to learn
the ropes each time would be a deterrent in any environment.  But the
penalty is even stronger in open source projects, because outgoing
developers take with them not only their knowledge of the code, but
also their status in the community and the human relationships they
have made there.</para>
-->
<para>Behalten Sie Ihre Open-Source-Programmierer lange genug bei einem
Projekt, um sich sowohl technische als auch politische Kompetenzen
aneignen können &ndash; mindestens einige Jahre. Natürlich profitiert 
kein Projekt, ob Open-Source oder nicht vom häufigen Wechsel unter den
Programmierern. Sich jedes mal neu einarbeiten zu müssen wäre in jeder
Umgebung für Neulinge schwierig. Für Open-Source-Projekte ist die 
Strafe aber noch größer, da Entwickler, die ein Projekt verlassen nicht
nur ihre Kenntnisse über den Code mitnehmen, sondern auch ihre Position
in der Gemeinschaft sowie die dort aufgebauten menschlichen 
Beziehungen.</para>

<!--
<para>The credibility a developer has accumulated cannot be
transferred.  To pick the most obvious example, an incoming developer
can't inherit commit access from an outgoing one (see
<xref linkend="money-vs-love"/> later in this chapter), so if the
new developer doesn't already have commit access, he will have to
submit patches until he does.  But commit access is only the most
measurable manifestation of lost influence.  A long-time developer
also knows all the old arguments that have been hashed and rehashed on
the discussion lists.  A new developer, having no memory of those
conversations, may try to raise the topics again, leading to a loss of
credibility for your organization; the others might wonder "Can't
they remember anything?"  A new developer will also have no political
feel for the project's personalities, and will not be able to
influence development directions as quickly or as smoothly as one
who's been around a long time.</para>
-->
<para>Die von einem Entwickler angeeignete Glaubwürdigkeit kann nicht
übertragen werden. Das offensichtlichste Beispiel wäre wohl, dass 
Commit-Zugriff nicht von einem Entwickler zum Anderen vererbt werden 
kann (siehe <xref linkend="money-vs-love"/> später in diesem Kapitel),
wenn ein neuer Entwickler also noch keinen Commit-Zugriff hat, wird er
bis dahin Patches einreichen müssen. Commit-Zugriff ist aber nur die
messbarste Erscheinung für den verlorenen Einfluss. Ein langjähriger
Entwickler kennt auch alle alten Streitigkeiten die immer wieder in 
Diskussionen in den Foren aufgeflammt sind. Ein neuer Entwickler ohne
Erinnerung an solche Unterhaltungen, könnte versuchen diese Themen 
erneut anzusprechen, was zum Verlust der Glaubwürdigkeit Ihrer 
Organization führt; die anderen werden sich vielleicht wundern "ob
die sich denn garn ichts behalten können"? Neue Entwickler werden auch
kein politisches Gespür für die Persönlichkeiten im Projekt haben und
werden nicht in der Lage sein die Richtung der Entwicklung so schnell
oder reibungslos zu beeinflussen, wie ein alter Hase.</para>

<!--
<para>Train newcomers through a program of supervised engagement.  The
new developer should be in direct contact with the public development
community from the very first day, starting off with bug fixes and
cleanup tasks, so he can learn the code base and acquire a reputation
in the community, yet not spark any long and involved design
discussions.  All the while, one or more experienced developers should
be available for questioning, and should be reading every post the
newcomer makes to the development lists, even if they're in threads
that the experienced developers normally wouldn't pay attention to.
This will help the group spot potential rocks before the newcomer runs
aground.  Private, behind-the-scenes encouragement and pointers can
also help a lot, especially if the newcomer is not accustomed to
massively parallel peer review of his code.</para>
-->
<para>Lassen Sie Anfänger sich zur Einweisung, unter Beaufsichtigung, an
dem Projekt beteiligen. Der neue Entwickler sollte vom ersten Tag sehr
eng mit der öffentlichen Entwicklergemeinschaft arbeiten, angefangen mit
Bugfixes und Aufräumarbeiten, um die Codebasis kennenzulernen und sich
einen Ruf in der Gemeinschaft zu erarbeiten, er sollte jedoch keine
langwierige und verstrickte Diskussionen über Codestruktur zünden.
Währenddessen sollten ein Paar erfahrene Entwickler für Fragen zur
bereitstehen, die jede Nachricht des Anfängers an die Verteiler, lesen
sollten, sogar bei Threads denen sie sonst keine Beachtung schenken würden.
Das wird der Gruppe helfen mögliche Steine auf dem Weg zu erkennen, bevor
der Anfänger drüber stolpert. Private Anregung und Hinweise im
Hintergrund können auch eine große Hilfe sein, besonders wenn der 
Anfänger es nicht gewohnt ist, dass sein Code der Kritik durch die
Gemeinschaft unterworfen ist.</para>

<!--
<para>When CollabNet hires a new developer to work on Subversion, we
sit down together and pick some open bugs for the new person to cut
his teeth on.  We'll discuss the technical outlines of the solutions,
and then assign at least one experienced developer to (publicly)
review the patch that the new developer will (also publicly) post.  We
typically don't even look at the patch before the main development
list sees it, although we could if there were some reason to.  The
important thing is that the new developer go through the process of
public review, learning the code base while simultaneously becoming
accustomed to receiving critiques from complete strangers.  But we
try to coordinate the timing so that our own review comes immediately
after the posting of the patch.  That way the first review the list
sees is ours, which can help set the tone for the others' reviews.  It
also contributes to the idea that this new person is to be taken
seriously: if others see that we're putting in the time to give
detailed reviews, with thorough explanations and references into the
archives where appropriate, they'll appreciate that a form of training
is going on, and that it probably signifies a long-term investment.
This can make them more positively disposed toward that developer, at
least to the degree of spending a little extra time answering
questions and reviewing patches.</para>
-->
<para>Wenn CollabNet einen neuen Entwickler einstellt, um an Subversion 
zu arbeiten, setzen wir uns zusammen und wählen ein paar offen stehende
Fehler für die neue Person, um sich erst einmal die Krallen zu schärfen.
Wir diskutieren den technischen Rahmen der Lösungen und weisen dann 
mindestens einen erfahrenen Entwickler an (öffentlich) den vom Neuling
eingereichten Patch, kritisch unter die Lupe zu nehmen (alles für die
Öffentlichkeit sichtbar). Normalerweise schauen wir uns den Patch nicht
einmal an, bevor er auf dem zentralen Verteiler für Entwickler zu sehen
ist, auch wenn wir es könnten, gäbe es dazu einen Grund. Das wichtige
für den neuen Entwickler ist die öffentliche Überprüfung durchzulaufen,
dabei den Codebase kennenzulernen und sich an Kritik von völlig Fremden
zu gewöhnen. Wir versuchen es aber so abzustimmen, dass unsere 
Bewertung möglichst bald nach dem Patch kommt. Dadurch ist unsere 
Bewertung die erste auf dem Verteiler, was helfen kann, den Ton der 
nachfolgenden Bewertungen zu setzen. Es trägt auch zu der Idee bei, dass
diese neue Person ernst genommen werden soll: Wenn andere sehen wie
wir uns Zeit nehmen ausführliche Bewertungen zu schreiben, mit 
gründlichen Erklärungen und, wenn angemessen, Verweise auf die Archive, 
werden sie es als Schulungsform erkennen, was wahrscheinlich eine 
längerfristige Investition andeutet. Das kann sie positiver gegenüber 
dem Entwickler stimmen, zumindest soweit, dass sie sich ein wenig mehr 
Zeit nehmen, um Fragen zu beantworten und Patches zu bewerten.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<!--
<title>Appear as Many, Not as One</title>
-->
<title>Treten Sie als viele in Erscheinung</title>

<!--
<para>Your developers should strive to appear in the project's public
forums as individual participants, rather than as a monolithic
corporate presence.  This is not because there is some negative
connotation inherent in monolithic corporate presences (well, perhaps
there is, but that's not what this book is about).  Rather, it's
because individuals are the only sort of entity open source projects
are structurally equipped to deal with.  An individual contributor can
have discussions, submit patches, acquire credibility, vote, and so
forth.  A company cannot.</para>
-->
<para>Ihre Entwickler sollten anstreben in den öffentlichen Foren als
einzelne Beteiligte aufzutreten und nicht als monolithisches
Firmenwesen. Das liegt nicht an irgend einer negativen Behaftung von 
monolithischen Unternehmen (naja, vielleicht schon ein bisschen, 
aber darum geht es nicht in diesem Buch). Einzelpersonen sind 
schlicht das einzige wofür Open-Source-Projekte strukturell gewappnet 
sind. Ein einzelner Beteiligter kann sich an Diskussionen beteiligen, 
Patches einreichen, sich Glaubwürdigkeit verschaffen, an Abstimmungen 
teilnehmen usw. Eine Firma kann das nicht.</para>

<!--
<para>Furthermore, by behaving in a decentralized manner, you avoid
stimulating centralization of opposition.  Let your developers
disagree with each other on the mailing lists.  Encourage them to
review each other's code as often, and as publicly, as they would
anyone else's.  Discourage them from always voting as a bloc, because
if they do, others may start to feel that, just on general principles,
there should be an organized effort to keep them in check.</para>
-->
<para>Desweiteren verhindert man durch dezentralisiertes Verhalten die
Bildung einer zentralisierten Opposition. Lassen Sie Ihre Entwickler
sich auf der Mailingliste untereinander streiten. Ermutigen Sie
häufige und öffentliche gegenseitig Überprüfung und Bewertung des Codes.
Raten Sie davon ab, immer als Block abzustimmen, denn wenn sie das 
machen, werden andere das Gefühl bekommen allein aus Prinzip, einen
Gegenpol organisieren zu müssen, um sie in Schach zu halten.</para>

<!--
<para>There's a difference between actually being decentralized and
simply striving to appear that way.  Under certain circumstances,
having your developers behave in concert can be quite useful, and they
should be prepared to coordinate behind the scenes when necessary.
For example, when making a proposal, having several people chime in
with agreement early on can help it along, by giving the impression of
a growing consensus.  Others will feel that the proposal has momentum,
and that if they were to object, they'd be stopping that momentum.
Thus, people will object only if they have a good reason to do so.
There's nothing wrong with orchestrating agreement like this, as long
as objections are still taken seriously.  The public manifestations of
a private agreement are no less sincere for having been coordinated
beforehand, and are not harmful as long as they are not used to
prejudicially snuff out opposing arguments.  Their purpose is merely
to inhibit the sort of people who like to object just to stay in
shape; see <xref linkend="bikeshed"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for more about
them.</para>
-->
<para>Es gibt einen Unterschied zwischen einer wirklich 
dezentralisierten Organisation und einfach als solches erscheinen zu 
wollen. In bestimmten Fällen kann es durchaus nützlich sein, ihre
Entwickler an einem Strang ziehen zu lassen und sie sollten vorbereitet
sein falls nötig, im Hintergrund zu koordinieren. Wenn beispielsweise
ein Vorschlag gemacht wird, kann ihm durch frühzeitige Zustimmung 
anderer Entwickler auf die Sprünge geholfen werden, indem sie den 
Eindruck von zunehmenden Konsens vortäuschen. Andere spüren ein 
gewisses Momentum für den Vorschlag, der durch einen Einspruch 
ihrerseits aufgehalten würde. Deshalb werden Leute nur dann Einsprechen,
wenn sie dazu einen guten Grund haben. Es gibt im Übrigen nichts
verwerfliches daran, Zustimmung auf diese Art zu koordinieren, solange
Einsprüche weiterhin ernst genommen werden. Wie sich diese private
Übereinkunft öffentlich offenbart ist nicht unaufrichtig oder für das
Projekt schädlich, nur weil sie vorher koordiniert wurde, so lange sie
nicht dazu benutzt wird um Gegenargumente frühzeitig und abträglich
auszustechen. Der Hintergrund ist lediglich bestimmte Personen 
aufzuhalten, die einfach nur Einwände machen um Fit zu bleiben; siehe
<xref linkend="bikeshed"/><phrase output="printed"> im Kapitel 
<xref linkend="communications"/></phrase> für weiteres.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<!--
<title>Be Open About Your Motivations</title>
-->
<title>Seien Sie offen bezüglich Ihrer Absichten</title>

<!--
<para>Be as open about your organization's goals as you can without
compromising business secrets.  If you want the project to acquire a
certain feature because, say, your customers have been clamoring for
it, just say so outright on the mailing lists.  If the customers wish
to remain anonymous, as is sometimes the case, then at least ask them
if they can be used as unnamed examples.  The more the public
development community knows about <emphasis>why</emphasis> you want
what you want, the more comfortable they'll be with whatever you're
proposing.</para>
-->
<para>Seien Sie so offen hinsichtlich Ihrer Motive wie Sie es können, 
ohne hierbei Geschäftsgeheimnisse offenzulegen. Wenn Sie in Ihrem
Projekt eine bestimmte Funktion haben wollen, sagen wir, weil Ihre 
Kunden danach schreien, sprechen Sie auf den Mailinglisten offen 
darüber. Wenn die Kunden anonym bleiben wollen, was manchmal vorkommt,
fragen Sie wenigstens, ob Sie sie als anonyme Beispiele anführen dürfen.
Je mehr die öffentliche Entwicklergemeinschaft darüber weiß,
<emphasis>warum</emphasis> Sie etwas wollen, desto eher werden sie Ihre
Vorschlage akzeptieren.</para>

<!--
<para>This runs counter to the instinct&mdash;so easy to acquire, so
hard to shake off&mdash;that knowledge is power, and that the more
others know about your goals, the more control they have over you.
But that instinct would be wrong here.  By publicly advocating the
feature (or bugfix, or whatever it is), you have
<emphasis>already</emphasis> laid your cards on the table.  The only
question now is whether you will succeed in guiding the community to
share your goal.  If you merely state that you want it, but can't
provide concrete examples of why, your argument is weak, and people
will start to suspect a hidden agenda.  But if you give just a few
real-world scenarios showing why the proposed feature is important,
that can have a dramatic effect on the debate.</para>
-->
<para>Das widerspricht dem Instinkt &ndash; einfach anzueignen, aber 
schwer loszuwerden &ndash;, dass Wissen gleich Macht ist und Ihre Ziele 
anderen gegenüber bekannt zu geben, diesen mehr Kontrolle über Sie gibt.
Der Instinkt wäre
hier aber falsch. Indem Sie sich öffentlich für eine Funktion (oder ein
Bugfix, oder was auch immer) aussprechen, haben Sie ja schon Ihre 
Karten auf den Tisch gelegt. Die einzige Frage ist, ob Sie die 
Gemeinschaft überzeugen können Ihr Ziel mit Ihnen zu teilen. Wenn Sie 
einfach sagen, dass Sie die Funktion haben wollen, aber keine konkreten
Gründe dafür nennen wollen, stehen Sie auf schwachem Boden und Leute
werden anfangen verborgene Absichten zu vermuten. Aber auch nur ein paar
echte Szenarien zu nennen, die aufzeigen warum die vorgeschlagene 
Funktion wichtig ist, kann sich dramatisch auf die Debatte 
auswirken.</para>

<!--
<para>To see why this is so, consider the alternative.  Too
frequently, debates about new features or new directions are long and
tiresome.  The arguments people advance often reduce to "I personally
want X," or the ever-popular "In my years of experience as a software
designer, X is extremely important to users / a useless frill that
will please no one."  Predictably, the absence of real-world usage
data neither shortens nor tempers such debates, but instead allows
them to drift farther and farther from any mooring in actual user
experience.  Without some countervailing force, the end result is as
likely as not to be determined by whoever was the most articulate, or
the most persistent, or the most senior.</para>
-->
<para>Um den Grund dafür zu erkennen, sollten Sie die Alternative
bedenken. All zu oft sind Debatten über neue Funktionen oder Richtungen
langwierig und ermüdend. Die Argumente die angebracht werden reduzieren
sich meistens auf "Ich persönlich will X", oder das immer wieder beliebte
"Meine langjährigen Erfahrung als Software-Entwickler hat gezeigt, dass
X für Nutzer äußerst wichtig ist / eine nutzlose Krause ist, die keinen
zufrieden stellen wird". Solche Debatten werden dementsprechend durch 
Mangel an Daten über echte Nutzung weder verkürzt noch verlängert, 
sondern treiben immer weiter von der Praxis ab. Ohne irgend eine 
ausgleichende Kraft, wird das Endergebnis eher von dem Wortgewandtesten,
dem Hartnäckigsten oder dem Ranghöchsten bestimmt.</para>

<!--
<para>As an organization with plentiful customer data available, you
have the opportunity to provide just such a countervailing force.  You
can be a conduit for information that might otherwise have no means of
reaching the development community.  The fact that the information
supports your desires is nothing to be embarrassed about.  Most
developers don't individually have very broad experience with how the
software they write is used.  Each developer uses the software in
her own idiosyncratic way; as far as other usage patterns go, she's
relying on intuition and guesswork, and deep down, she knows
this.  By providing credible data about a significant number of users,
you are giving the public development community something akin to
oxygen.  As long as you present it right, they will welcome it
enthusiastically, and it will propel things in the direction you want
to go.</para>
-->
<para>Ihre Position als Organization mit reichlich Kundendaten, 
ermöglicht Ihnen genau solch eine ausgleichende Kraft bereitzustellen.
Sie können ein Kanal für Informationen sein, die sonst keine Möglichkeit 
hätten zu der Gemeinschaft zu gelangen. Sie müssen sich nicht dafür 
schämen, dass diese Informationen Ihre Wünsche untermauern. Die meisten
Entwickler haben für sich keine breite Erfahrung über die Nutzung Ihrer
Software. Jeder Entwickler benutzt die Software auf seine eigene Art; 
über das Nutzungsverhalten anderer spekuliert er lediglich und verlässt
sich auf seine Intuition. Tief im Inneren ist ihm das auch bewusst. Durch
glaubwürdige Daten einer nicht unwesentlichen Anzahl an Nutzern geben
Sie der Entwicklergemeinschaft etwas wie Sauerstoff. So lange Sie es
richtig auslegen, wird sie es mit Begeisterung annehmen und der Wind
wird zu Ihrem Gunsten wehen.</para>

<!--
<para>The key, of course, is presenting it right.  It will never do to
insist that simply because you deal with a large number of users, and
because they need (or think they need) a given feature, therefore
your solution ought to be implemented.  Instead, you should focus your
initial posts on the problem, rather than on one particular solution.
Describe in great detail the experiences your customers are
encountering, offer as much analysis as you have available, and as
many reasonable solutions as you can think of.  When people start
speculating about the effectiveness of various solutions, you can
continue to draw on your data to support or refute what they say.  You
may have one particular solution in mind all along, but don't single
it out for special consideration at first.  This is not deception, it
is simply standard "honest broker" behavior.  After all, your true
goal is to solve the problem; a solution is merely a means to that
end.  If the solution you prefer really is superior, other developers
will recognize that on their own eventually&mdash;and then they will
get behind it of their own free will, which is much better than you
browbeating them into implementing it.  (There is also the possibility
that they will think of a better solution.)</para>
-->
<para>Der Schlüssel ist natürlich, es richtig zu präsentieren. Es reicht
auf keinen Fall aus, nur weil Sie mit einer Menge Nutzern zu tun haben
und weil diese eine gegebene Funktion brauchen (oder meinen zu 
brauchen), darauf zu bestehen Ihre Lösung zu implementieren. Statt 
dessen sollten sich Ihre ersten Nachrichten eher auf das gegebene 
Problem konzentrieren, als auf eine bestimmte Lösung. Beschreiben Sie 
sehr ausführlich die Erfahrungen Ihrer Kunden, bieten Sie die Ihnen 
bestmögliche Auswertung, sowie möglichst viele Lösungsansätze. Wenn
Leute anfangen zu spekulieren, wie effektiv die verschiedenen Lösungen
sind, können Sie mit Ihren Daten die verschiedenen Antworten 
untermauern oder entkräften. Sie werden vielleicht die ganze Zeit
eine bestimmte Lösung im Hinterkopf haben, heben Sie es am Anfang aber
nicht hervor. Das ist keine Täuschung, sondern das übliche Verhalten
eines ehrlichen Vermittlers. Schließlich ist Ihr wahres Ziel die Lösung
des Problems; eine Lösung ist lediglich das Mittel zum Zweck. Wenn Ihre
bevorzugte Lösung wirklich die überlegene ist, werden andere Entwickler
das irgendwann auch erkennen &ndash; und Sie von sich aus unterstützen,
was viel besser ist, als die Implementierung durch Einschüchterung zu
erzwingen. (Es besteht natürlich auch die Möglichkeit, dass jemand
anderem eine bessere Lösung einfällt als Ihnen).</para>

<!--
<para>This is not to say that you can't ever come out in favor of a
specific solution.  But you must have the patience to see the analysis
you've already done internally repeated on the public development
lists.  Don't post saying "Yes, we've been over all that here, but it
doesn't work for reasons A, B, and C.  When you get right down to it,
the only way to solve this is..."  The problem is not so much that it
sounds arrogant as that it gives the impression that you have
<emphasis>already</emphasis> devoted some unknown (but, people will
presume, large) amount of analytical resources to the problem, behind
closed doors.  It makes it seem as though efforts have been going on,
and perhaps decisions made, that the public is not privy to, and that
is a recipe for resentment.</para>
-->
<para>Das soll nicht heißen, dass Sie sich niemals zugunsten einer
bestimmten Lösung äußern können. Sie müssen aber Geduld haben, damit die
Analyse, die Sie bereits intern gemacht haben, auf dem öffentlichen
Verteilern wiederholt wird. Schreiben Sie nicht etwas wie "Ja, wir 
haben das alles hier schon gehabt, aber das funktioniert so nicht und
zwar aus diesen Gründen... Wenn man der Sache auf den Grund geht, dann 
ist die einzige Lösung..." Das Problem ist weniger der arrogante Ton, 
als vielmehr der Eindruck, dass Sie <emphasis>bereits</emphasis> eine 
unbestimmte (aber vermutlich große) Menge analytischer Ressourcen dem 
Problem hinter verschlossenen Türen gewidmet haben. Es lässt die Sache
so erscheinen, als ob Anstrengungen unterwegs gewesen sind, und 
Entscheidungen vielleicht getroffen wurden, ohne die Einweihung der 
Öffentlichkeit, und das führt unweigerlich zu Verbitterung.</para>

<!--
<para>Naturally, <emphasis>you</emphasis> know how much effort you've
devoted to the problem internally, and that knowledge is, in a way, a
disadvantage.  It puts your developers in a slightly different mental
space than everyone else on the mailing lists, reducing their ability
to see things from the point of view of those who haven't yet thought
about the problem as much.  The earlier you can get everyone else
thinking about things in the same terms as you do, the smaller this
distancing effect will be.  This logic applies not only to individual
technical situations, but to the broader mandate of making your goals
as clear as you can.  The unknown is always more destabilizing than
the known.  If people understand why you want what you want, they'll
feel comfortable talking to you even when they disagree.  If they
can't figure out what makes you tick, they'll assume the worst, at
least some of the time.</para>
-->
<para><emphasis>Sie</emphasis> wissen natürlich, wieviel Mühe Sie dem
Problem intern gewidmet haben, und dieses Wissen ist in gewisser 
Hinsicht ein Nachteil. Ihre Entwickler haben dadurch eine etwas andere
Einstellung als alle anderen auf den Mailinglisten, wodurch ihre 
Fähigkeit eingeschränkt wird, die Dinge aus der Sicht derjenigen zu
sehen, die noch nicht über das Problem nachgedacht haben. Je früher Sie
alle anderen dazu bringen können ihre Sicht einzunehmen, desto geringer
werden die resultierende Auswirkungen sein. Diese Logik gilt nicht nur
für einzelne technische Situationen, sondern auch für das breitere
Mandat Ihre Ziele so klar wie möglich darzulegen. Das Unbekannte
verursacht immer mehr Unruhe als das Bekannte. Wenn Menschen verstehen
warum Sie etwas wollen, werden sie sich dabei wohl fühlen mit Ihnen zu
reden, selbst wenn sie anderer Meinung sind als Sie. Wenn sie nicht
herausbekommen was Sie bewegt, werden sie zumindest Zeitweise vom
Schlimmsten ausgehen.</para>

<!--
<para>You won't be able to publicize everything, of course, and people
won't expect you to.  All organizations have secrets; perhaps
for-profits have more of them, but nonprofits have them too.  If you
must advocate a certain course, but can't reveal anything about why,
then simply offer the best arguments you can under that handicap, and
accept the fact that you may not have as much influence as you want in
the discussion.  This is one of the compromises you make in order to
have a development community not on your payroll.</para>
-->
<para>Sie werden natürlich nicht alles veröffentlichen können, und man
wird es nicht von Ihnen erwarten. Alle Organisationen haben Geheimnisse;
vielleicht haben Profitorientierte Organisationen mehr davon, 
aber gemeinnützige haben sie auch. Wenn Sie einen bestimmten Kurs 
verfechten müssen, aber nichts über Ihre Gründe offenbaren können, 
dann bieten Sie einfach die Ihnen mit dieser Behinderung bestmöglichen 
Argumente. Finden Sie sich mit der Tatsache ab, dass Sie vielleicht 
nicht den gewünschten Grad an Einfluss bei der Diskussion haben. 
Das ist einer der Kompromisse die Sie eingehen, wenn die 
Entwicklergemeinschaft nicht auf Ihrer Gehaltsliste steht.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<!--
<title>Money Can't Buy You Love</title>
-->
<title>Liebe kann nicht mit Geld erkauft werden</title>

<!--
<para>If you're a paid developer on a project, then set guidelines
early on about what the money can and cannot buy.  This does not mean
you need to post twice a day to the mailing lists reiterating your
noble and incorruptible nature.  It merely means that you should be on
the lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>
-->
<para>Wenn Sie ein bezahlter Entwickler in einem Projekt sind, dann
legen Sie frühzeitig die Richtlinien fest, was für Geld käuflich ist,
und was nicht. Das bedeutet nicht, dass Sie es zweimal täglich in den
Foren wiederholen müssen, um Ihre noble und unbestechliche Natur zu
verdeutlichen. Es bedeutet lediglich, dass Sie auf Gelegenheiten achten
sollten, um Spannungen zu entschärfen, die durch Geld entstehen 
<emphasis>könnten</emphasis>. Sie müssen nicht von vorhandenen
Spannungen ausgehen; Sie müssen allerdings zeigen, dass es das
Potential dazu gibt.</para>

<!--
<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Soon after the
project began, we hired another developer, Mike Pilato, to join the
effort.  By then, coding had already started.  Although Subversion was
still very much in the early stages, it already had a development
community with a set of basic ground rules.</para>

-->
<para>Ein perfektes Beispiel hierfür hat das Subversion-Projekt
zu bieten. Subversion wurde im Jahr 2000 von 
<ulink url="http://www.collab.net/">CollabNet</ulink> gestartet, das
von Anfang an als Arbeitgeber für mehrere Entwickler und der größte 
Geldgeber für das Projekt gewesen ist (Anmerkung: Ich bin einer davon).
Bald nach Beginn des Projekts stellten wir einen weiteren Entwickler 
ein, Mike Pilato, um dem Projekt beizutreten. Wir hatten schon mit
dem Programmieren angefangen und obwohl Subversion sicherlich noch in
seiner Anfangsphase war, hatte es bereits eine Entwicklergemeinschaft
mit wenigen einfachen Grundregeln.</para>

<!--
<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (that proposal is private, as described in <xref
linkend="committers"/>).  Assuming the committers agree, one of
them mails the new developer and offers him direct commit access to
the project's repository.</para>
-->
<para>Die Ankunft von Mike warf eine interessante Frage auf. Subversion
hatte bereits ein Verfahren, nach dem neue Entwickler Commit-Zugriff
bekamen. Zuerst reicht man ein paar Patches auf der Entwickler-Liste
ein. Nachdem genügend Patches eingetroffen sind, damit anderen Committer
sehen können, dass der neue Mitwirkende weiß was er macht, schlägt 
jemand vor, ihm den direkten Zugriff zu gewähren (dieser Vorschlag
findet im Privaten statt, wie in <xref linkend="committers"/> 
beschrieben). Angenommen die Committer stimmen überein, schreibt einer
von ihnen dem neuen Entwickler eine Mail in der er den direkten 
Commit-Zugriff auf das Projektarchiv des Projekts anbietet.</para>

<!--
<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
volunteer developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we granted Mike commit access by fiat, we'd be saying
that CollabNet had the right to ignore project guidelines, simply
because it was the primary funder.  While the damage from this would
not necessarily be immediately apparent, it would gradually result in
the non-salaried developers feeling disenfranchised.  Other people
have to earn their commit access&mdash;CollabNet just buys
it.</para>
-->
<para>CollabNet hatte Mike ausdrücklich eingestellt, um an Subversion zu
arbeiten. Bei denen die ihn kannten, zweifelte keiner an seinen
Fähigkeiten als Programmierer oder seiner Bereitschaft, an dem Projekt zu
arbeiten. Desweiteren hatten die freiwilligen Entwickler eine sehr gute
Beziehung zu den Mitarbeitern von CollabNet und hätten wahrscheinlich
keine Einwände, Mike einfach gleich am ersten Arbeitstag Commit-Zugriff
zu geben. Wir wussten aber, dass dies einen Präzedenzfall sein würde.
Wenn wir Mike von oben herab Zugriff auf das Projektarchiv gegeben hätten,
käme das der Aussage gleich, dass CollabNet das Recht hätte, die Richtlinien
des Projekts zu ignorieren, einfach nur weil es der größte Geldgeber 
war. Obwohl dieser Schaden nicht unbedingt gleich ersichtlich gewesen wäre,
hätte es langsam dazu geführt, dass unbezahlte Entwickler sich ihrer
Rechte beraubt fühlen: Andere müssen sich ihren Commit-Zugriff erarbeiten
&ndash; CollabNet kann ihn sich kaufen.</para>

<!--
<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the public mailing list, where they could be, and were, reviewed by
everyone.  We also said on the list that we were doing things this way
deliberately, so there could be no missing the point.  After a couple
of weeks of solid activity by Mike, someone (I can't remember if it
was a CollabNet developer or not) proposed him for commit access, and
he was accepted, as we knew he would be.</para>
-->
<para>Mike willigte also ein seine Arbeit bei CollabNet wie jeder andere
freiwillige Entwickler anzufangen, ohne Commit-Zugriff. Er schickte 
Patches an die öffentlichen Foren, wo sie von allen überprüft und
kritisch beurteilt werden konnten und wurden. Wir erklärten auch
öffentlich unser explizites Vorgehen, um Missverständnisse zu 
vermeiden. Nach ein paar Wochen solider Aktivität von Mike, schlug 
jemand (ich kann mich nicht mehr erinnern ob es ein Entwickler von 
CollabNet war oder nicht) vor, ihm Commit-Zugriff zu gewähren und wurde
wie von allen erwartet angenommen.</para>

<!--

Die relevanten Zeitangaben für Mike Pilato sind:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

gefolgt von:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Behebt Ungereimtheiten bei Pfaden auf Windows. Oder allgemeiner,
	benutzt den "style" Paramenter welche den Funktionen der Pfad 
	Bibliothek übergeben wird um das richtige Pfad Trennzeichen (zur
	Zeit '/' oder '\') zu wählen.  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->


<!--
<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having one's motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes itself the same size as everyone else.</para>
-->
<para>Diese konsequente Durchsetzung verschafft einem Glaubwürdigkeit,
die man mit Geld nicht kaufen kann. Und Glaubwürdigkeit ist eine 
wertvolle Währung bei technischen Diskussionen: Es schützt einem vor
spätere Angriffe auf seine Motive. Bei einer hitzigen Debatte, greifen
Leute manchmal auf Angriffe ohne technischische Bedeutung zurück, um die
Schlacht für sich zu entscheiden. Der Haupt-Geldgeber bietet durch seine
tiefe Beteiligung und offensichtliche Sorgen über die Richtung die das
Projekt nimmt eine breiteres Ziel als die Meisten. Indem er
gewissenhaft alle Richtlinien des Projekts von Anfang an wahrnimmt,
stellt der Finanzier sich auf derselben Ebene wie alle anderen.</para>

<!--
<para>(See also Danese Cooper's blog post, preserved in the Internet
Archive's Wayback Machine at
<ulink url="http://web.archive.org/web/20050227033105/http://blogs.sun.com/roller/page/DaneseCooper/20040916"
       >web.archive.org/web/20050227033105/http://blogs.sun.com/roller/page/DaneseCooper/20040916</ulink>,
for a similar story about commit access.  Cooper was then Sun
Microsystem's "Open Source Diva"&mdash;I believe that was her official
title&mdash;and in the blog entry, she describes how the Tomcat
development community got Sun to hold its own developers to the same
commit-access standards as the non-Sun developers.)</para>
-->
<para>(Siehe auch den Blog von Danese Cooper bei
<ulink url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"/>
für eine ähnliche Geschichte um Commit-Zugriff. Cooper war damals die
"Open-Source-Diva" von Sun Microsystem's &ndash; ich glaube das war ihr
offizieller Titel &ndash; und sie beschreibt in ihrem Blog, wie die 
Entwicklergemeinschaft von Tomcat Sun dazu brachte, die gleichen Richtlinien 
für Commit-Zugriff für seine eigenen Entwickler zu befolgen, wie
für die Entwickler außerhalb von Sun.)</para>

<!--
<para>The need for the funders to play by the same rules as everyone
else means that the Benevolent Dictatorship governance model (see
<xref linkend="benevolent-dictator"/><phrase output="printed">
in <xref linkend="social-infrastructure"/></phrase>) is slightly
harder to pull
off in the presence of funding, particularly if the dictator works for
the primary funder.  Since a dictatorship has few rules, it is hard
for the funder to prove that it's abiding by community standards, even
when it is.  It's certainly not impossible; it just requires a project
leader who is able to see things from the point of view of the outside
developers, as well as that of the funder, and act accordingly.  Even
then, it's probably a good idea to have a proposal for non-dictatorial
governance sitting in your back pocket, ready to be brought out the
moment there are any indications of widespread dissatisfaction in the
community.</para>
-->
<para>Weil Geldgeber nach den selben Regeln spielen müssen, wie alle
anderen, lässt sich das Modell der gütigen Diktatur (siehe
<xref linkend="benevolent-dictator"/><phrase output="printed"> im
Kapitel <xref linkend="social-infrastructure"/></phrase>) nur schwer
anwenden, wenn Geld im Spiel ist, insbesondere wenn der Diktator für 
den Geldgeber arbeitet. Da eine Diktatur wenig Regeln hat, ist es 
schwierig für einen Geldgeber zu beweisen, dass er die Normen der
Gemeinschaft befolgt, selbst wenn das der Fall ist. Es ist sicherlich 
nicht unmöglich, es erfordert aber einen Projektleiter, der in der Lage
ist, die Dinge sowohl aus der Sicht der externen Entwickler als auch
derer die für den Geldgeber arbeiten, zu sehen und sich entsprechend zu 
verhalten. Selbst dann, ist es wahrscheinlich eine gute Idee ein nicht
diktatorisches Modell bereit zu halten, welches man bei Anzeichen von
breiter Unzufriedenheit in der Gemeinschaft vorschlagen kann.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<!--
<title>Contracting</title>
-->
<title>Auftragsarbeit</title>

<!--
<para>Contracted work needs to be handled carefully in free software
projects.  Ideally, you want a contractor's work to be accepted by the
community and folded into the public distribution.  In theory, it
wouldn't matter who the contractor is, as long as his work is good and
meets the project's guidelines.  Theory and practice can sometimes
match, too: a complete stranger who shows up with a good patch
<emphasis>will</emphasis> generally be able to get it into the
software.  The trouble is, it's very hard to produce a good patch for
a non-trivial enhancement or new feature while truly being a complete
stranger; one must first discuss it with the rest of the project.  The
duration of that discussion cannot be precisely predicted.  If the
contractor is paid by the hour, you may end up paying more than you
expected; if he is paid a flat sum, he may end up doing more work
than he can afford.</para>
-->
<para>Mit Auftragsarbeit muss in freien Software-Projekten vorsichtig 
umgehen. Im Idealfall wollen Sie, dass die Arbeit des Auftragnehmers von
der Gemeinschaft angenommen wird und in die veröffentlichte Version
aufgenommen wird. Theoretisch würde es keinen Unterschied machen, wer
der Auftragnehmer ist, solange er gute Arbeit macht und die Richtlinien
des Projekts beachtet. Theorie und Praxis kann manchmal auch
zusammenpassen: Ein komplett Fremder der mit einem guten Patch 
auftaucht, <emphasis>wird</emphasis> es im Allgemeinen schaffen, diese
in die Software zu bekommen. Das Schwierige ist, dass es als komplett
Fremder sehr schwer ist, einen guten Patch für eine nicht triviale 
Erweiterung oder Funktion zu produzieren; man muss es zuerst mit dem 
übrigen Teilnehmern diskutieren. Die Dauer dieser Diskussion, kann man
nicht genau voraussehen. Wenn der Auftragnehmer nach Arbeitszeit bezahlt
wird, werden Sie vielleicht mehr Bezahlen, als Sie erwartet haben; wenn
er Pauschal bezahlt wird, kann es passieren, dass er länger arbeitet,
als er es sich leisten kann.</para>

<!--
<para>There are two ways around this.  The preferred way is to make an
educated guess about the length of the discussion process, based on
past experience, add in some padding for error, and base the contract
on that.  It also helps to divide the problem into as many small,
independent chunks as possible, to increase the predictability of each
chunk.  The other way is to contract solely for delivery of a patch,
and treat the patch's acceptance into the public project as a separate
matter.  Then it becomes much easier to write the contract, but you're
stuck with the burden of maintaining a private patch for as long as
you depend on the software, or at least for as long as it takes you to
get that patch or equivalent functionality into the mainline.  Of
course, even with the preferred way, the contract itself cannot
require that the patch be accepted into the code, because that would
involve selling something that's not for sale.  (What if the rest of
the project unexpectedly decides not to support the feature?)
However, the contract can require a <foreignphrase>bona
fide</foreignphrase> effort to get the change accepted by the
community, and that it be committed to the repository if the community
agrees with it.  For example, if the project has written standards
regarding code changes, the contract can reference those standards and
specify that the work must meet them.  In practice, this usually works
out the way everyone hopes.</para>
-->
<para>Es gibt zwei Möglichkeiten das Problem zu umgehen. Man sollte
vorzugsweise eine fundierte Vermutung über die Dauer der Diskussion
machen, beruhend auf der vergangenen Erfahrung mit einem Puffer für Fehler,
was dem Vertrag zugrunde liegt. Es hilft auch das Problem in möglichst
viele Einzelteile zu spalten, um die einzelnen Brocken eher einschätzen
zu können. Der andere Weg ist den Auftrag auf den eigentlichen Patch zu
beschränken, unabhängig von seiner Aufnahme im Projekt. Es ist dadurch
viel einfacher den Vertrag zu schreiben, hat aber den Nachteil, dass
Ihnen dann der Klotz am Bein hängt, den Patch so lange zu pflegen, wie
Sie auf die Software angewiesen sind, oder zumindest so lange bis Sie es
schaffen eine gleichwertige Funktion in den Hauptzweig zu bekommen. 
Natürlich kann man selbst beim ersten Vorgehen nicht im
Vertrag darauf bestehen, etwas über die Aufnahme im Projekt 
festzulegen, weil das den Verkauf von etwas bedeuten würden, was nicht zum 
Verkauf steht. (Was 
passiert wenn die Übrigen im Projekt sich entscheiden, die Funktion 
nicht zu unterstützen)? Der Vertrag kann allerdings eine gewisse 
angemessen und glaubwürdige Anstrengung beinhalten, um die Änderung von
der Gemeinschaft angenommen zu bekommen, und sie danach im
Projektarchiv einzuspielen. Wenn das Projekt Normen über Änderungen am Code
festgelegt hat, kann der Vertrag auf diese verweisen und festlegen, das
die Arbeit sich danach richten muss. In der Praxis verläuft das 
meistens positiv für alle Parteien.</para>

<!--
<para>The best tactic for successful contracting is to hire one of the
project's developers&mdash;preferably a committer&mdash;as the
contractor.  This may seem like a form of purchasing influence, and,
well, it is.  But it's not as corrupt as it might seem.  A developer's
influence in the project is due mainly to the quality of his code and
to his interactions with other developers.  The fact that he has a
contract to get certain things done doesn't raise his status in any
way, and doesn't lower it either, though it may make people scrutinize
him more carefully.  Most developers would not risk their long-term
position in the project by backing an inappropriate or widely disliked
new feature.  In fact, part of what you get, or should get, when you
hire such a contractor is advice about what sorts of changes are
likely to be accepted by the community.  You also get a slight shift
in the project's priorities.  Because prioritization is just a matter
of who has time to work on what, when you pay for someone's time, you
cause their work to move up in the priority queue a bit.  This is a
well-understood fact of life among experienced open source developers,
and at least some of them will devote attention to the contractor's
work simply because it looks like it's going to <emphasis>get
done</emphasis>, so they want to help it get done right.  Perhaps they
won't write any of the code, but they'll still discuss the design and
review the code, both of which can be very useful.  For all these
reasons, the contractor is best drawn from the ranks of those already
involved with the project.</para>
-->
<para>Die beste Taktik für erfolgreiche Auftragsarbeit ist, einen der
Entwickler des Projekts &ndash; vorzugsweise einen etablierten Beteiligten
&ndash; als Auftragnehmer anzustellen. Das mag sich nach erkauftem
Einfluss anhören, und nun ja, dass ist es auch. Es ist aber nicht so
korrupt, wie es sich anhört. Der Einfluss den ein Entwickler innerhalb
eines Projekts hat, hängt vorrangig von der Qualität seiner Arbeit,
sowie seinen Umgang mit anderen Entwicklern ab. Die Tatsache, dass er
ein Vertrag hat, um bestimmte Sachen erledigt zu bekommen, hebt seinen
Status in keiner Weise und es senkt ihn auch nicht, auch wenn Leute ihn
vielleicht etwas vorsichtiger hinterfragen werden. Die meisten
Entwickler würden ihre längerfristige Position in einem Projekt nicht
riskieren um eine weitestgehend unbeliebte Funktion zu unterstützen.
Tatsächlich sollte ein Teil von dem was Sie erhalten, wenn Sie einen 
solchen Entwickler einstellen, Ratschläge darüber sein, welche
Änderungen wahrscheinlich von der Gemeinschaft angenommen werden. Sie
bekommen auch eine gewisse Umstellung der Prioritäten im Projekt. Da die
Prioritäten lediglich davon abhängen, wer Zeit hat an etwas zu arbeiten,
sorgen Sie durch Entlohnung bestimmter Arbeiten dafür, dass diese eine
etwas höhere Priorität bekommen. Unter erfahrenen Open-Source-Entwicklern
ist diese Tatsache wohlbekannt, und zumindest manche werden der Arbeit
eines Auftragnehmers Aufmerksamkeit widmen, einfach nur weil es den 
Anschein hat <emphasis>fertig zu werden</emphasis>, also wollen sie 
dabei helfen, dass es richtig gemacht wird. Sie schreiben dabei zwar
vielleicht keinen Code, werden aber Entwürfe diskutieren und Kritik am
Code üben, was alles sehr nützlich sein kann. Aus all diesen Gründen,
sollte der Auftragnehmer am ehesten aus den Reihen der bereits am
Projekt Beteiligten gezogen werden.</para>

<!--
<para>This immediately raises two questions: Should contracts ever be
private?  And when they're not, should you worry about creating
tensions in the community by the fact that you've contracted with some
developers and not others?</para>
-->
<para>Dadurch stellen sich zwei Fragen: Sollten Verträge jemals privat
sein? Und wenn sie es nicht sind, sollten Sie sich darüber sorgen 
machen, Spannungen in der Gemeinschaft zu verursachen indem Sie mit
manchen der Entwickler Verträge geschlossen haben, und nicht mit 
anderen?</para>

<!--
<para>It's best to be open about contracts, when you can.  Otherwise,
the contractor's behavior may seem strange to others in the
community&mdash;perhaps he's suddenly giving inexplicably high
priority to features he's never shown interest in the past.  When
people ask him why he wants them now, how can he answer convincingly
if he can't talk about the fact that he's been contracted to write
them?</para>
-->
<para>Verträge sollten wo möglich offen sein. Sonst kann das 
Verhalten des Beauftragten anderen in der Gemeinschaft komisch 
vorkommen &ndash; vielleicht gibt er bestimmten Funktionen plötzlich 
eine unerklärlich hohe Priorität, die ihn früher aber nicht 
interessierten. Wenn Leute ihn darauf ansprechen, wie soll er überzeugend
antworten, wenn er nicht darüber reden kann, dass er beauftragt wurde, 
sie zu schreiben?</para>

<!--
<para>At the same time, neither you nor the contractor should act as
though others should treat your arrangement as a big deal.  Too often
I've seen contractors waltz onto a development list with the attitude
that their posts should be taken more seriously simply because they're
being paid.  That kind of attitude signals to the rest of the project
that the contractor regards the fact of the contract&mdash;as opposed
to the code <emphasis>resulting</emphasis> from the contract&mdash;to
be the important thing.  But from the other developers' point of view,
only the code matters.  At all times, the focus of attention should be
kept on technical issues, not on the details of who is paying whom.
For example, one of the developers in the Subversion community handles
contracting in a particularly graceful way.  While discussing his code
changes in IRC, he'll mention as an aside (often in a private remark,
an IRC <firstterm>privmsg</firstterm>, to one of the other committers)
that he's being paid for his work on this particular bug or feature.
But he also consistently gives the impression that he'd want to be
working on that change anyway, and that he's happy the money is making
it possible for him to do that.  He may or may not reveal his
customer's identity, but in any case he doesn't dwell on the contract.
His remarks about it are just an ornament to an otherwise technical
discussion about how to get something done.</para>
-->
<para>Gleichzeitig sollten weder Sie noch der Auftragnehmer so tun als
ob andere ihre Vereinbarung als etwas besonderes behandeln sollten. All
zu oft habe ich Auftragnehmer erlebt, die auf der Mailingliste mit
der Einstellung auftreten, dass ihre Nachrichten ernster genommen werden
sollten, einfach nur weil sie bezahlt werden. Diese Einstellung zeigt
den anderen Teilnehmern, dass der Auftragnehmer den Vertrag an sich als
das Wesentliche erachtet &ndash; im Gegensatz zu dem aus dem Vertrag
<emphasis>resultierenden</emphasis> Code. Aus Sicht der anderen 
Entwickler ist der Code das einzig Wichtige. Technische Probleme sollten
immer im Mittelpunkt stehen, nicht die Details darüber, wer von wem
bezahlt wird. Einer der Entwickler in der Subversion-Gemeinschaft geht
mit Auftragsarbeit besonders elegant um. Während er seine Änderungen am
Code im IRC bespricht, macht er nebenbei Anmerkungen (oftmals in einer 
privaten Nachricht, also <firstterm>privmsg</firstterm> im IRC, an
andere Entwickler), dass er für die Arbeit an diesem bestimmten Fehler
oder Funktion bezahlt wird. Er gibt aber durchweg den Eindruck, dass er
an dieser Änderung auch so arbeiten wolle, und dass er froh ist, dass 
das Geld es ihm ermöglicht. Ob er sagt für wen er arbeitet oder nicht,
den Vertrag macht er nie zum eigentlichen Thema. Seine Anmerkungen 
darüber sind lediglich eine Zierde einer ansonsten technische Diskussion
über die Lösung eines Problems.</para>

<!--
<para>That example shows another reason why it's good to be open about
contracts.  There may be multiple organizations sponsoring contracts
on a given open source project, and if each knows what the others are
trying to do, they may be able to pool their resources.  In the above
case, the project's largest funder (CollabNet) is not involved in any
way with these piecework contracts, but knowing that someone else is
sponsoring certain bug fixes allows CollabNet to redirect its
resources to other bugs, resulting in greater efficiency for the
project as a whole.</para>
-->
<para>Dieses Beispiel zeigt einen weiteren Grund offen über Verträge zu
reden: es mag mehrere Organisationen geben, die bei einem 
Open-Source-Projekt
Verträge beisteuern, und wenn jeder über die Arbeit des anderen
bescheid weiß, können sie vielleicht ihre Ressourcen bündeln. Im obigen
Fall, ist der größte Finanzier (CollabNet) in keinster Weise an diesen
Einzelverträgen beteiligt. Aber mit dem Wissen, dass jemand anderes 
bestimmte Bugfixes fördert, wird CollabNet ermöglicht sich auf andere
Fehler zu konzentrieren, und insgesamt die Effizienz im Projekt zu
erhöhen.</para>

<!--
<para>Will other developers resent that some are paid for working on
the project?  In general, no, particularly when those who are paid are
established, well-respected members of the community anyway.  No one
expects contract work to be distributed equally among all the
committers.  People understand the importance of long-term
relationships: the uncertainties involved in contracting are such that
once you find someone you can work reliably with, you would be
reluctant to switch to a different person just for the sake of
evenhandedness.  Think of it this way: the first time you hire, there
will be no complaints, because clearly you had to pick
<emphasis>someone</emphasis>&mdash;it's not your fault you can't hire
everyone.  Later, when you hire the same person a second time, that's
just common sense: you already know him, the last time was
successful, so why take unnecessary risks?  Thus, it's perfectly
natural to have one or two go-to people in the community, instead of
spreading the work around evenly.</para>
-->
<para>Nehmen es andere Entwickler es den beauftragten Mitgliedern übel,
dass sie für die Arbeit am Projekt bezahlt werden? Im allgemeinen nein,
insbesondere wenn diejenigen, die bezahlt werden sowieso anerkannte,
geachtete Mitglieder der Gemeinschaft sind. Keiner erwartet, dass
Auftragsarbeit gleichmäßig auf die Beteiligten aufgeteilt wird. Leute
verstehen wie wichtig dauerhafte Beziehungen sind: Die Ungewissheiten
bei Auftragsarbeit sind derart, dass wenn man einen zuverlässigen
Geschäftspartner gefunden hat, man nur widerwillig zu jemand anderen 
wechselt, nur der Gerechtigkeit halber. Sie können es sich so 
vorstellen: Wenn Sie das erste mal jemand wählen wird es bestimmt keine
Beschwerden geben, denn schließlich mussten Sie ja 
<emphasis>irgendjemand</emphasis> wählen &ndash; Sie können schließlich
nicht alle beauftragen. Wenn Sie später dieselbe Person ein zweites mal
beauftragen, ist das nur vernünftig: Sie kennen ihn schon, der letzte
Auftrag verlief erfolgreich, warum sollten Sie ein unnötiges Risiko
eingehen? Es ist deshalb ganz natürlich ein-zwei Leute in der
Gemeinschaft zu haben an die man sich wenden kann, anstatt die Arbeit
gleichmäßig aufzuteilen.</para>

<sect2 id="community-review-acceptance">
<!--
<title>Review and Acceptance of Changes</title>
-->
<title>Kritik und Annahme von Änderungen</title>

<!--
<para>The community is still important to the success of contract
work.  Their involvement in the design and review process for sizeable
changes cannot be an afterthought.  It must be considered part of the
work, and fully embraced by the contractor.  Don't think of community
scrutiny as an obstacle to be overcome&mdash;think of it as a free
design board and QA department.  It is a benefit to be aggressively
pursued, not merely endured.</para>
-->
<para>Die Gemeinschaft ist trotzdem wichtig für den Erfolg der 
Auftragsarbeit. Ihre Beteiligung beim Entwurf und der Beurteilung der
Änderung darf nicht beiläufig geschehen. Sie müssen es als Teil der
Arbeit auffassen und vollständig im Auftrag einbeziehen. Betrachten
Sie die Kritik der Gemeinschaft nicht als ein Hindernis, das es zu
überwinden gilt &ndash; sondern als kostenlose Platform für Entwürfe,
Fragen und Antworten. Es ist ein Vorteil, den Sie entschlossen nutzen
sollten, anstatt ihn lediglich hinzunehmen.</para>

<sect3 id="cvs-pserver">
<!--
<title>Case study: the CVS password-authentication protocol</title>
-->
<title>Fallbeispiel: Das CVS-Protokoll zur Passwort-Authentifizierung</title>

<!--
<para>In 1995, I was one half of a partnership that provided support
and enhancements for CVS (the Concurrent Versions System; see <ulink
url="http://cvs.nongnu.org/" >cvs.nongnu.org</ulink>).  My partner Jim
and I were, informally, the maintainers of CVS by that point.  But
we'd never thought carefully about how we ought to relate to the
existing, mostly volunteer CVS development community.  We just assumed
that they'd send in patches, and we'd apply them, and that was pretty
much how it worked.</para>
-->
<para>1995 war ich an einer Partnerschaft für technische
Unterstützung und Erweiterungen an CVS (das Concurrent Versions System;
siehe <ulink url="http://www.cvshome.org/"/>) beteiligt. Mein Partner Jim und ich
waren damals informell für die Instandhaltung von CVS zuständig. Wir
hatten aber nie sorgfältig darüber nachgedacht, wie wir mit der 
vorhandenen, größtenteils freiwilligen Entwicklergemeinschaft von CVS
umgehen sollten. Unsere Erwartung war einfach Patches zu bekommen, die
wir anwenden würden, und so war auch weitestgehend der Ablauf.</para>

<!--
<para>Back then, networked CVS could be done only over a remote login
program such as <literal>rsh</literal>.  Using the same password for
CVS access as for login access was an obvious security risk, and many
organizations were put off by it.  A major investment bank hired us to
add a new authentication mechanism, so they could safely use networked
CVS with their remote offices.</para>
-->
<para>Damals konnte man CVS im Netzwerk nur über ein Fernzugriff 
Programm wie <literal>rsh</literal> betreiben. Man brauchte dasselbe
Passwort für CVS wie für den Fernzugriff, was ein offensichtliches
Sicherheitsrisiko darstellte und viele Organisationen abschreckte. Eine
bedeutende Anlagebank beauftragte uns einen neuen
Authentifizierungsmechanismus zu implementieren, damit sie ihr 
vernetztes CVS sicher mit ihren Außenstellen benutzen konnten.</para>

<!--
<para>Jim and I took the contract and sat down to design the new
authentication system.  What we came up with was pretty simple (the
United States had export controls on cryptographic code at the time,
so the customer understood that we couldn't implement strong
authentication), but as we were not experienced in designing such
protocols, we still made a few gaffes that would have been obvious to
an expert.  These mistakes would easily have been caught had we taken
the time to write up a proposal and run it by the other developers for
review.  But we never did so, because it didn't occur to us to think
of the development list as a resource to be used.  We knew that people
were probably going to accept whatever we committed, and&mdash;because
we didn't know what we didn't know&mdash;we didn't bother to do the
work in a visible way, e.g., posting patches frequently, making small,
easily digestible commits to a special branch, etc.  The resulting
authentication protocol was not very good, and of course, once it
became established, it was difficult to improve, because of
compatibility concerns.</para>
-->
<para>Jim und ich nahmen den Vertrag an und fingen an ein Entwurf 
für das neue Authentifizierungssystem auszuarbeiten. Unser Entwurf war 
relativ einfach (die Vereinigten Staaten hatten damals Einschränkungen 
auf den Export von Kryptographischem Code, also hatte der Kunde Verständnis
dafür, dass wir keine Starke Authentifizierung implementieren konnten).
Da wir aber keine Erfahrung mit derartigen Protokollen hatten, machten
wir dennoch einige grobe Fehler, die einem Experten sofort aufgefallen
wären. Diese Ausrutscher wären mit Leichtigkeit erkannt worden, hätten
wir uns die Zeit genommen hätten einen Vorschlag zu verfassen und den 
anderen Entwickler zur Überprüfung vorgestellt hätten. Uns kam es 
nie in den Sinn, die Entwickler auf dem Verteiler als Ressource zu 
betrachten und machten alleine weiter. Wir wussten, dass unsere Arbeit, 
egal wie sie aussah, wahrscheinlich angenommen werden würde, 
und &ndash; da wir nicht wussten was wir nicht wussten &ndash; machten 
wir uns nicht die Mühe, unsere Arbeit für alle sichtbar offenzulegen, 
d.h. häufig Patches abzuschicken, kleine, leicht verdauliche Änderungen 
an einem bestimmten Branch, usw. Das entstandene 
Authentifizierungsprotokoll war nicht sonderlich gut, und nach seiner 
Etablierung ließ es sich es natürlich aufgrund von Sorgen um die 
Kompatibilität nur sehr schwer verbessern.</para>

<!--
<para>The root of the problem was not lack of experience; we could
easily have learned what we needed to know.  The problem was our
attitude toward the volunteer development community.  We regarded
acceptance of the changes as a hurdle to leap, rather than as a
process by which the quality of the changes could be improved.  Since
we were confident that almost anything we did would be accepted (as it
was), we made little effort to get others involved.</para>
-->
<para>Im Kern lag das Problem nicht an unserem Mangel an Erfahrung; wir
hätten das Nötige mit Leichtigkeit lernen können. Das Problem lag an 
unserer Einstellung zur Entwicklergemeinschaft. Wir betrachteten die
Annahme der Änderungen als eine Hürde die es zu überwinden galt, nicht
als Ablauf um die Qualität der Änderungen zu verbessern. Wir waren
zuversichtlich, dass jedwede Arbeit von uns angenommen würde (was auch
geschah), und machten uns deshalb wenig Mühe um äußere 
Beteiligung.</para>

</sect3>

<!--
<para>Obviously, when you're choosing a contractor, you want someone
with the right technical skills and experience for the job.  But it's
also important to choose someone with a track record of constructive
interaction with the other developers in the community.  That way
you're getting more than just a single person; you're getting an agent
who will be able to draw on a network of expertise to make sure the
work is done in a robust and maintainable way.</para>
-->
<para>Es ist offensichtlich, dass Sie bei der Suche nach einem Auftragnehmer
auf die richtigen technischen Fähigkeiten und Erfahrung achten. Es ist
aber auch wichtig jemanden zu wählen, der nachweislich mit den anderen
Entwicklern in der Gemeinschaft eine konstruktive Zusammenarbeit pflegt.
Sie bekommen dadurch mehr als nur eine Person; Sie bekommen einen 
Agenten, der in der Lage sein wird aus einem Netzwerk von Fachwissen zu
schöpfen um robuste und wartbare Arbeit sicherzustellen.</para>

</sect2>

<!--
<para><remark>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with volunteer developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark></para>
-->
<!-- 
<para><remark>Auftragnehmer als ein Weg um Dienstleistungen und 
Unterstützung zu erweitern. Geschäftszweige, die zutiefst an der
Entwicklung einer Open-Source-Anwendung beteiligt sind, und auch
Dienstleistungen für technischen Support und Anpassungen anbieten,
befinden sich in einer Zwickmühle was ihre Ressourcen angeht. Je mehr
ihr Geschäft wächst, desto größer wird die Spannung unter der sie
stehen, zwischen der weiteren Beteiligung an der Open-Source-Seite
während sie die selben Entwickler für Arbeit innerhalb des Betriebs
benutzen. Freiwillige Entwickler zu beauftragen, ist ein Weg aus
dieser Klemme, muss aber vorsichtig (und so offen wie möglich) 
verwaltet werden.</remark></para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<!--
<title>Funding Non-Programming Activities</title>
-->
<title>Tätigkeiten neben dem Programmieren finanzieren</title>

<!--
<para>Programming is only part of the work that goes on in an open
source project.  From the point of view of the project's volunteers,
it's the most visible and glamorous part.  This unfortunately means
that other activities, such as documentation, formal testing, etc., can
sometimes be neglected, at least compared to the amount of attention
they often receive in proprietary software.  Corporate organizations
are sometimes able to make up for this, by devoting some of their
internal software development infrastructure to open source
projects.</para>
-->
<para>Programmieren ist nur ein Teil der Arbeit in einem 
Open-Source-Projekt, für Freiwillige im Projekt ist es der sichtbarste 
und glorreichste Teil. Leider können dadurch andere Tätigkeiten, 
wie die Dokumentation, formale Tests, usw. manchmal vernachlässigt 
werden, zumindest im Vergleich zu der Aufmerksamkeit die 
sie bei proprietärer
Software oftmals erhalten. Unternehmen können das manchmal 
auszugleichen, indem Sie einen Teil ihrer internen Infrastruktur für
die Software-Entwicklung den Open-Source-Projekten widmen.</para>

<!--
<para>The key to doing this successfully is to translate between the
company's internal processes and those of the public development
community.  Such translation is not effortless: often the two are not
a close match, and the differences can only be bridged via human
intervention.  For example, the company may use a different bug
tracker than the public project.  Even if they use the same tracking
software, the data stored in it will be very different, because the
bug-tracking needs of a company are very different from those of a
free software community.  A piece of information that starts in one
tracker may need to be reflected in the other, with confidential
portions removed or, in the other direction, added.</para>
-->
<para>Das Wesentliche für den Erfolg dieser Arbeit ist die Übersetzung
zwischen den Abläufen in der Firma und denen in der Gemeinschaft. Sie
ist nicht Mühelos: Oft passen beide nicht gut zusammen, und die 
Unterschiede können nur durch menschliche Eingriffe überwunden werden.
Die Firma kann beispielsweise einen anderen Bugtracker verwenden, als
das öffentliche Projekt. Selbst wenn beide die gleiche Software 
benutzen, werden die darin gespeicherten Daten sehr unterschiedlich
sein, da die Anforderungen einer Firma am Bugtracking ganz andere
sind, als die einer freien Software-Gemeinschaft. Eine Information die
in einem Bugtracker anfängt, muss vielleicht auf den anderen übertragen
werden, wobei vertrauliche Teile entfernt, oder in umgekehrter Richtung
hinzugefügt werden müssen.</para>

<!--
<para>The sections that follow are about how to build and maintain
such bridges.  The end result should be that the open source project
runs more smoothly, the community recognizes the company's investment
of resources, and yet does not feel that the company is
inappropriately steering things toward its own goals.</para>
-->
<para>Die folgenden Abschnitte drehen sich um den Aufbau und die
Instandhaltung solcher Brücken. Das Endergebnis sollte ein
reibungsloser Betrieb im Open-Source-Projekt sein, die Investitionen
der Firma sollten von der Gemeinschaft anerkannt werden, ohne dass
das Gefühl entsteht unangemessen durch die Firma beeinflusst 
zu werden.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-qa">
<!--
<title>Quality Assurance (i.e., Professional Testing)</title>
-->
<title>Qualitätssicherung</title>

<!--
<para>In proprietary software development, it is normal to have teams
of people dedicated solely to quality assurance: bug hunting,
performance and scalability testing, interface and documentation
checking, etc.  As a rule, these activities are not pursued as
vigorously by the volunteer community on a free software project.
This is partly because it's hard to get volunteer labor for
unglamorous work like testing, partly because people tend to assume
that having a large user community gives the project good testing
coverage, and, in the case of performance and scalability testing,
partly because volunteers often don't have access to the necessary
hardware resources anyway.</para>
-->
<para>Bei der Entwicklung proprietärer Softwareist es üblich dass sich
eine gesonderte Abteilung der Qualitätssicherung widmet: Nach
Fehlern sucht, die Performance und Skalierbarkeit evaluiert,
Schnittstellen, Dokumentation usw. überprüft. Diese Aktivitäten werden
üblicherweise nicht so energisch von freiwilligen in einem freien
Software-Projekt verfolgt. Das liegt teilweise an der Schwierigkeit 
Freiwillige für unrühmliche Tätigkeiten wie das Testen zu finden und
zum Anderen daran dass man annimmt, dass eine große Nutzergemeinschaft 
auch eine gute Test-Abdeckung mit sich bringt. Performance und 
Skalierbarkeit sind sogar ein Gebiet wofür Freiwilligen oftmals 
sowieso nicht die nötige Hardware zur Verfügung steht.</para>

<!--
<para>The assumption that having many users is equivalent to having
many testers is not entirely baseless.  Certainly there's little point
assigning testers for basic functionality in common environments: bugs
there will quickly be found by users in the natural course of things.
But because users are just trying to get work done, they do not
consciously set out to explore uncharted edge cases in the program's
functionality, and are likely to leave certain classes of bugs
unfound.  Furthermore, when they discover a bug with an easy
workaround, they often silently implement the workaround without
bothering to report the bug.  Most insidiously, the usage patterns of
your customers (the people who drive <emphasis>your</emphasis>
interest in the software) may differ in statistically significant ways
from the usage patterns of the Average User In The Street.</para>
-->
<para>Die Annahme, dass viele Nutzer auch viele Tester sind, ist nicht
ganz ohne Grundlage. Es macht sicherlich wenig Sinn Personen 
einzustellen, die die Grundfunktionen der Software 
auf den üblichen Zielumgebungen  überprüfen: Die dortigen Fehler 
werden ohnehin beim normalen Betrieb schnell von gewöhnlichen Nutzern 
gefunden. Da Nutzer aber lediglich versuchen ihre Arbeit zu erledigen, 
begegeben Sie sich nicht bewusst auf
die Suche nach ungewöhnliche Grenzfällen in der Funktionalität der 
Software und werden wahrscheinlich bestimmte Fehler 
unentdeckt lassen. Bei einem Fehler der sich leicht umgehen lässt 
werden Sie sogar eher im Stillen diese Abhilfe implementieren ohne sich
die Mühe zu machen den Fehler zu melden. Am heimtückischsten kann der
Umgang Ihrer Kunden (die Quelle von <emphasis>Ihrem</emphasis> 
Interesse) mit der Software sein, die statistisch ganz anders 
aussehen kann als das Verhalten eines beliebig anderen Nutzers.</para>

<!--
<para>A professional testing team can uncover these sorts of bugs, and
can do so as easily with free software as with proprietary software.
The challenge is to convey the testing team's results back to the
public in a useful form.  In-house testing departments usually have
their own way of reporting test results, involving company-specific
jargon, or specialized knowledge about particular customers and their
data sets.  Such reports would be inappropriate for the public bug
tracker, both because of their form and because of confidentiality
concerns.  Even if your company's internal bug tracking software
were the same as that used by the public project, management might
need to make company-specific comments and metadata changes to the
issues (for example, to raise an issue's internal priority, or
schedule its resolution for a particular customer).  Usually such
notes are confidential&mdash;sometimes they're not even shown to the
customer.  But even when they're not confidential, they're of no
concern to the public project, and therefore the public should not be
distracted with them.</para>
-->
<para>Eine professionelle Testgruppe kann solche Fehler genau so gut in
freier, wie in proprietärer Software aufdecken. Die Herausforderung ist,
die Ergebnisse der Tester der Öffentlichkeit in einer nützlichen Form
mitzuteilen. Die Test-Abteilungen haben im Betrieb meistens ihre eigene
Art Ergebnisse zu melden, mit firmenspezifischem Jargon, oder speziellem
Fachwissen über bestimmte Kunden und ihre Datensätze. Solche Berichte
wären auf einen öffentlichen Bugtracker unangemessen, sowohl wegen
ihrer Form als auch aus Datenschutz Gründen. Selbst wenn die interne 
Bugtracking-Software Ihrer Firma die gleiche wäre wie im öffentlichen
Projekt, kann es sein, dass die Betriebsverwaltung firmenspezifische
Kommentare sowie Änderungen an den Metadaten der Vorfälle machen muss 
(zum Beispiel um die interne Priorität eines Vorfalls anzuheben, oder
seine Lösung für einen bestimmten Kunden anzusetzen). Für gewöhnlich 
sind solche Anmerkungen vertraulich &ndash; manchmal werden sie nicht
einmal dem Kunden gezeigt. Aber selbst wenn diese Daten nicht vertraulich 
sind, sind diese für das öffentliche Projekt uninteressant und 
deshalb sollte die Öffentlichkeit nicht von ihnen abgelenkt werden.</para>

<!--
<para>Yet the core bug report itself <emphasis>is</emphasis> important
to the public.  In fact, a bug report from your testing department is
in some ways more valuable than one received from users at large,
since the testing department probes for things that other users won't.
Given that you're unlikely to get that particular bug report from any
other source, you definitely want to preserve it and make it
available to the public project.</para>
-->
<para>Die Meldung des <emphasis>eigentlichen</emphasis> Fehlers ist 
für die Öffentlichkeit dennoch wichtig. Tatsächlich ist eine Bug-Meldung
von Ihrer Test-Abteilung in mancherlei Hinsicht wertvoller als die der
üblichen Benutzer, da die Test-Abteilung nach Sachen Ausschau hält, die
andere Nutzer nicht interessieren. Angesichts der Tatsache, dass Sie
diese Fehler aus keiner anderen Quelle erfahren werden, sollten sie 
die Fehler unbedingt aufbewahren, und es dem öffentlichen Projekt 
zur Verfügung stellen.</para>

<!--
<para>To do this, either the QA department can file issues directly in
the public issue tracker, if they're comfortable with that, or an
intermediary (usually one of the developers) can "translate" the
testing department's internal reports into new issues in the public
tracker.  Translation simply means describing the bug in a way that
makes no reference to customer-specific information (the reproduction
recipe may use customer data, assuming the customer approves it, of
course).</para>
-->
<para>Entweder kann die Abteilung zur 
Qualitätssicherung die Meldungen direkt in den öffentlichen Bugtracker
eintragen, wenn sie sich dabei wohl fühlen, oder ein Vermittler 
(gewöhnlich einer der Entwickler) kann die internen Meldungen der 
Test-Abteilung
zu dem Öffentlichen Tracker "übersetzen". Übersetzen bedeutet
in diesem Zusammenhang den Bug so zu beschreiben, dass es keine Bezüge
auf kundenspezifische Informationen hat (sofern der Kunde dem zustimmt,
kann die Anleitung um den Fehler zu reproduzieren natürlich auch 
Kundendaten beinhalten).</para>

<!--
<para>It is somewhat preferable to have the QA department filing
issues in the public tracker directly.  That gives the public a more
direct appreciation of your company's involvement with the project:
useful bug reports add to your organization's credibility just as any
technical contribution would.  It also gives developers a direct line
of communication to the testing team.  For example, if the internal QA
team is monitoring the public issue tracker, a developer can commit a
fix for a scalability bug (which the developer may not have the
resources to test herself), and then add a note to the issue asking
the QA team to see if the fix had the desired effect.  Expect a bit of
resistance from some of the developers; programmers have a tendency to
regard QA as, at best, a necessary evil.  The QA team can easily
overcome this by finding significant bugs and filing comprehensible
reports; on the other hand, if their reports are not at least as good
as those coming from the regular user community, then there's no point
having them interact directly with the development team.</para>
-->
<para>Der Eintrag in den Tracker sollte vorzugsweise von der Abteilung
zur Qualitätssicherung gemacht werden. So kann die Öffentlichkeit die
Beteiligung Ihrer Firma besser sehen und würdigen: Nützliche
Bug-Meldungen tragen ebenso zum guten Ruf Ihrer Organization bei wie
jeder andere technische Beitrag. Es gibt freiwilligen Entwickler auch
einen direkten Draht um mit der Test-Abteilung zu kommunizieren. Wenn
diese Abteilung den Bugtracker beobachtet, kann ein Entwickler eine
Änderung machen um z.B. einen Skalierbarkeits-Bug zu beheben (der
Entwickler selber kann die Korrektur nicht überprüfen, da er nicht die
nötigen Ressourcen hat), und anschließend dem Ticket eine Anmerkung
anhängen, mit der Bitte an die Qualitätssicherung, zu überprüfen, ob es
die gewünschte Wirkung hatte. Stellen Sie sich auf den Widerstand
einiger Entwickler ein; Programmierer haben die Angewohnheit 
Qualitätssicherung allerhöchstens als ein notwendiges Übel zu
erachten. Die Test-Abteilung kann das leicht überwinden, indem sie
schwerwiegende Fehler findet und nachvollziehbare Tickets schreibt;
wenn ihre Tickets andererseits nicht mindestens so gut sind, wie die
von der übrigen Gemeinschaft, hat es keinen Sinn, dass sie direkt mit
den Entwicklern zusammenwirken.</para>

<!--
<para>Either way, once a public issue exists, the original internal
issue should simply reference the public issue for technical content.
Management and paid developers may continue to annotate the internal
issue with company-specific comments as necessary, but use the public
issue for information that should be available to everyone.</para>
-->
<para>So oder so, sollte sobald es ein öffentliches Ticket gibt sollte
das interne Ticket im Bezug auf technische Inhalte nur noch auf das 
öffentliche Verweisen. Der Betrieb kann weiterhin Anmerkungen 
firmenspezifischer Angelegenheiten bei Bedarf beifügen, sollte aber
Informationen, die allen zur Verfügung stehen sollten, in das öffentliche
Ticket schreiben.</para>

<!--
<para>You should go into this process expecting extra overhead.
Maintaining two issues for one bug is, naturally, more work than
maintaining one issue.  The benefit is that many more coders will see
the report and be able to contribute to a solution.</para>
-->
<para>Sie sollten sich bei diesem Verfahren auf einen höheren Aufwand
einstellen. Die Pflege von zwei Tickets für einen Bug bedeutet
natürlich mehr Arbeit als eins. Der Vorteil ist, dass viel mehr
Programmierer das Ticket sehen werden und ihre Lösungen beitragen 
können.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-legal">
<!--
<title>Legal Advice and Protection</title>
-->
<title>Rechtliche Beratung und Schutz</title>

<!--
<para>Corporations, for-profit or nonprofit, are almost the only
entities that ever pay attention to complex legal issues in free
software.  Individual developers often understand the nuances of
various open source licenses, but they generally do not have the time
or resources to follow copyright, trademark, and patent law in detail.
If your company has a legal department, it can help a project by
vetting the copyright status of the code, and helping developers
understand possible patent and trademark issues.  The exact forms this
help could take are discussed in <xref linkend="legal"/>.  The
main thing is to make sure that communications between the legal
department and the development community, if they happen at all,
happen with a mutual appreciation of the very different universes the
parties are coming from.  On occasion, these two groups talk past each
other, each side assuming domain-specific knowledge that the other
does not have.  A good strategy is to have a liaison (usually a
developer, or else a lawyer with technical expertise) stand in the
middle and translate for as long as needed.</para>
-->
<para>Gesellschaften, ob profitorientiert oder nicht, sind fast die 
einzigen, die bei einem freien Software-Projekt für komplexe
rechtliche Angelegenheiten irgendwelche Aufmerksamkeit aufbringen.
Einzelne Entwickler verstehen oft die Nuancen verschiedener 
Open-Source-Lizenzen, haben im allgemeinen aber weder Zeit noch 
Ressourcen um Urheber-, Marken- und Patentrecht im Detail zu verfolgen.
Wenn Ihre Firma eine Rechtsabteilung hat, kann sie einem Projekt
helfen, indem sie den urheberrechtlichen Stand des Quellcodes überprüft
und den Entwicklern hilft, mögliche Patent und markenrechtliche
Angelegenheiten zu verstehen. Die genauen Ausprägungen, die diese Hilfe
annehmen kann, wird in <xref linkend="legal"/> diskutiert. Die
Hauptsache ist bei einer Kommunikation zwischen der Rechtsabteilung
und der Entwicklergemeinschaft sicherzustellen, dass sie die äußerst
unterschiedlichen Welten, aus denen beide Parteien kommen gegenseitig
anerkennen. Gelegentlich können diese beiden Gruppen aneinander 
vorbeireden, wenn sie von fachspezifischem Wissen ausgehen, welches die
anderen Partei nicht hat. Es ist eine gute Strategie, eine
Verbindungsperson zu haben (meistens ein Entwickler, oder ein Anwalt
mit technische Fachkenntnisse) die so lange wie nötig zwischen beiden
Seiten steht und übersetzt.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-documentation-usability">
<!--
<title>Documentation and Usability</title>
-->
<title>Dokumentation und Benutzerfreundlichkeit</title>

<!--
<para>Documentation and usability are both famous weak spots in open
source projects, although I think, at least in the case of
documentation, that the difference between free and proprietary
software is frequently exaggerated.  Nevertheless, it is empirically
true that much open source software lacks first-class documentation
and usability research.</para>
-->
<para>Die Dokumentation und Benutzerfreundlichkeit sind beides 
wohlbekannte Schwachstellen in Open-Source-Projekten, obwohl ich denke,
dass der Unterschied zu proprietärer Software in Bezug auf die 
Dokumentation oftmals hochgespielt wird. Die Erfahrung zeigt trotzdem,
dass es Open-Source-Software meistens an einer erstklassigen
Dokumentation, sowie Untersuchungen bezüglich ihrer 
Benutzerfreundlichkeit mangelt.</para>

<!--
<para>If your organization wants to help fill these gaps for a
project, probably the best thing it can do is hire people who
are <emphasis>not</emphasis> regular developers on the project, but
who will be able to interact productively with the developers.
Not hiring regular developers is good for two reasons: one, that way
you don't take development time away from the project; two, those
closest to the software are usually the wrong people to write
documentation or investigate usability anyway, because they have
trouble seeing the software from an outsider's point of view.</para>
-->
<para>Wenn Ihre Firma helfen will, diese Lücken für ein Projekt
zu füllen, dann sollten Sie wahrscheinlich am ehesten Leute einstellen,
die üblicherweise <emphasis>nicht</emphasis> am Projekt mitentwickeln,
aber dennoch in der Lage sein werden mit den Entwicklern produktiv
zusammenzuarbeiten. Leute einzustellen die keine gewöhnlichen 
Entwickler sind, ist aus zwei Gründen gut: Erstens entziehen Sie dem
Projekt dadurch keine Entwicklerzeit; zweitens sollten diejenigen 
die der Software am nächsten sind im Allgemeinen sowieso nicht die
Dokumentation schreiben oder die Benutzerfreundlichkeit untersuchen,
da sie Schwierigkeiten haben die Software aus der Sicht eines
Außenstehenden zu betrachten.</para>

<!--
<para>However, it will still be necessary for whoever works on these
problems to communicate with the developers.  Find people who are
technical enough to talk to the coding team, but not so expert in the
software that they can't empathize with regular users anymore.</para>
-->
<para>Eine Kommunikation zwischen diesen beiden Parteien wird 
allerdings trotzdem immer nötig sein. Finden Sie Leute, die genügend
technische Kenntnisse haben, um mit den Entwicklern zu kommunizieren,
aber nicht so weit Experten mit der Software sind, dass sie kein
Einfühlungsvermögen für gewöhnliche Benutzer haben.</para>

<!--
<para>A medium-level user is probably the right person to write good
documentation.  In fact, after the first edition of this book was
published, I received the following email from an open source
developer named Dirk Reiners:</para>
-->
<para>Ein halbwegs erfahrener Benutzer ist wahrscheinlich die richtige
Person um eine gute Dokumentation zu schreiben. Ich bekam nach der 
ersten Veröffentlichung dieses Buchs sogar eine E-Mail von einem
Open-Source-Entwickler namens Dirk Reiners:</para>

<!--
<screen>
One comment on Money::Documentation and Usability: when we had some 
money to spend and decided that a beginner's tutorial was the most 
critical piece that we needed we hired a medium-level user to write it. 
He had gone through the induction to the system recently enough to 
remember the problems, but he had gotten past them so he knew how to 
describe them. That allowed him to write something that needed only 
minor fixes by the core developers for the things that he hadn't gotten 
right, but still covering the 'obvious' stuff devs would have missed.

His case was even better, as it had been his job to introduce a bunch of 
other people (students) to the system, so he combined the experience of 
many people, which is something that was just a lucky occurrence and is 
probably hard to get in most cases.
</screen>
-->
<screen>
Eine Anmerkung im Bezug auf Geld::Dokumentation und 
Benutzerfreundlichkeit: Als wir etwas Geld übrig hatten und uns 
entschieden, dass eine Einleitung für Anfänger das wichtigste war, 
stellten wir einen halbwegs erfahrenen Benutzer ein. Er war erst
kürzlich in das System eingewiesen worden, sodass er sich an seine 
Probleme erinnern konnte, er hatte es aber daran vorbei geschafft und
konnte sie dementsprechend beschreiben. Er konnte dadurch etwas 
schreiben, dass von den Hauptentwicklern nur wenige Korrekturen 
bedurfte, bei Dingen die er nicht richtig aufgefasst hatte. Trotzdem
konnte er das 'Offensichtliche' abdeckten, dass die Entwicklern
übersehen hätten.

In seinem Fall war es sogar noch besser, da es seine Aufgabe gewesen 
war einen Haufen anderer Personen (Studenten) in das System einzuführen, 
also kombinierte er die Erfahrung vieler Personen, was etwas ist, dass 
einfach nur ein glücklicher Zufall war und wahrscheinlich schwer in den
meisten Fällen zu erreichen ist.</screen>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-hosting">
<!--
<title>Providing Hosting/Bandwidth</title>
-->
<title>Bereitstellung von Hosting/Bandbreite</title>

<!--
<para>For a project that's not using one of the free canned hosting
sites (see
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), providing a
server and network connection&mdash;and most importantly, system
administration help&mdash;can be of significant assistance.  Even if
this is all your organization does for the project, it can be a
moderately effective way to obtain good public relations karma, though
it will not bring any influence over the direction of the
project.</para>
-->
<para>Bei einem Projekt, welches nicht einer der freien
Hosting-Pakete benutzt (siehe <xref linkend="canned-hosting"/>
<phrase output="printed"> im Kapitel <xref 
linkend="technical-infrastructure"/></phrase>), kann die Bereitstellung
von Server und Netzwerkverbindung &ndash; und besonders die Hilfe bei 
der System-Administration &ndash; eine wesentliche Unterstützung sein.
Selbst wenn das alles ist was Ihre Firma für das Projekt macht,
kann es eine halbwegs effektive Art sein Karma in der Öffentlichkeit zu
sammeln, auch wenn es Ihnen keinen Einfluss auf die Richtung des 
Projekts bringen wird.</para>

<!--
<para>You can probably expect a banner ad or an acknowledgment on the
project's home page, thanking your company for providing hosting.  If
you set up the hosting so that the project's web address is under your
company's domain name, then you will get some additional association
just through the URL.  This will cause most users to think of the
software as having <emphasis>something</emphasis> to do with your
company, even if you don't contribute to development at all.  The
problem is, the developers are aware of this associative tendency too,
and may not be very comfortable with having the project in your domain
unless you're contributing more resources than just bandwidth.  After
all, there are a lot of places to host these days.  The community may
eventually feel that the implied misallocation of credit is not worth
the convenience brought by hosting, and take the project elsewhere.
So if you want to provide hosting, do so&mdash;but either plan to get
even more involved soon, or be circumspect about how much involvement
you claim.</para>
-->
<para>Sie können wahrscheinlich einen Banner oder eine Anerkennung auf
der Projekt-Seite erwarten, auf dem man Ihrer Firma für das Hosting dankt.
Wenn Sie das Hosting so einrichten, dass die Webseite des Projekts auf
Ihrer Domain ist, werden Sie alleine schon durch die URL eine etwas
größere Assoziierung bekommen. Das wird die meisten Benutzer dazu
bringen, zu denken, dass das Projekt <emphasis>irgendetwas</emphasis>
mit Ihrer Firma zu tun hat, selbst wenn Sie gar nicht zu der Entwicklung
beitragen. Das Problem ist, dass die Entwickler sich dieser Assoziation
auch bewusst sind, und werden sich nicht sonderlich wohl dabei fühlen,
das Projekt unter Ihrer Domain zu hosten, wenn Sie nicht mehr Ressourcen
als lediglich Bandbreite zu dem Projekt beitragen. Schließlich gibt es
heutzutage viele Orte für Hosting. Die Gemeinschaft mag irgendwann
der Meinung sein, dass die angedeutete falsche Anerkennung nicht dem
Komfort vom Hosting wert ist und das Projekt anderswo unterbringen.
Wenn Sie also Hosting anbieten wollen, machen Sie es &ndash; planen Sie
aber entweder sich eingehender zu beteiligen oder seien sie umsichtig
darüber wieviel Beteiligung sie sich Zusprechen.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<!--

-->
<title>Marketing</title>

<!--

-->
<para>Auch wenn die meisten Open-Source-Entwickler es nur ungern 
zugeben würden, funktioniert Marketing. Eine gute Marketingkampagne
<emphasis>kann</emphasis> Aufmerksamkeit um ein Open-Source-Projekt
entstehen lassen, selbst zu dem Grad, dass starrköpfige Entwickler
unklare positive Gedanken über die Software haben, aus Gründen, die sie
sich nicht ganz erklären können. Es ist nicht an mir die Dynamik des
Wettrüstens beim Marketing um Allgemeinen zu untersuchen. Jede 
Gesellschaft die mit freier Software zu tun hat, wird irgendwann sich
dabei vorfinden zu bedenken, wie sie sich, die Software, oder ihre
Beziehung zu der Software vermarkten sollen. Die folgenden Ratschläge
handeln darüber, wie Sie bei solch einer Bemühung häufige Stolpersteine
vermeiden können; siehe auch <xref 
linkend="publicity"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase>.</para>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<!--
<title>Marketing</title>
-->

<!--
<para>Although most open source developers would probably hate to
admit it, marketing works.  A good marketing campaign
<emphasis>can</emphasis> create buzz around an open source product,
even to the point where hardheaded coders find themselves having
vaguely positive thoughts about the software for reasons they can't
quite put their finger on.  It is not my place here to dissect the
arms-race dynamics of marketing in general.  Any corporation involved
in free software will eventually find itself considering how to market
themselves, the software, or their relationship to the
software.  The advice below is about how to avoid common pitfalls in
such an effort; see also
<xref linkend="publicity"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>.</para>
-->

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<!--
<title>Remember That You Are Being Watched</title>
-->
<title>Denken Sie daran, dass Sie beobachtet werden</title>

<!--
<para>For the sake of keeping the volunteer developer community on
your side, it is <emphasis>very</emphasis> important not to say
anything that isn't demonstrably true.  Audit all claims carefully
before making them, and give the public the means to check your claims
on their own.  Independent fact checking is a major part of open
source, and it applies to more than just the code.</para>
-->
<para>Um die Entwicklergemeinschaft auf Ihre Seite zu behalten, ist es
<emphasis>sehr</emphasis> wichtig nichts zu sagen, was nicht nachweislich
wahr ist. Überprüfen Sie vorsichtig alle Behauptungen, bevor Sie diese in
den Raum stellen, und geben Sie der Öffentlichkeit einen Weg Ihre
Behauptungen zu überprüfen. Unabhängige Überprüfung von Tatsachen ist
ein bedeutender Teil von Open Source, und es gilt für mehr als nur den
Code.</para>

<!--
<para>Naturally no one would advise companies to make unverifiable
claims anyway.  But with open source activities, there is an unusually
high quantity of people with the expertise to verify
claims&mdash;people who are also likely to have high-bandwidth
Internet access and the right social contacts to publicize their
findings in a damaging way, should they choose to.  When Global
Megacorp Chemical Industries pollutes a stream, that's verifiable, but
only by trained scientists, who can then be refuted by Global
Megacorp's scientists, leaving the public scratching their heads and
wondering what to think.  On the other hand, your behavior in the open
source world is not only visible and recorded; it is also easy for many
people to check it independently, come to their own conclusions, and
spread those conclusions by word of mouth.  These communications
networks are already in place; they are the essence of how open source
operates, and they can be used to transmit any sort of information.
Refutation is usually difficult, if not impossible, especially when
what people are saying is true.</para>
-->
<para>Natürlich würde eh niemand Firmen raten, nicht überprüfbare
Behauptungen aufzustellen. Bei Open-Source-Aktivitäten gibt es für
gewöhnlich eine hohe Anzahl an Personen mit dem nötigen Wissen um
Behauptungen zu verifizieren &ndash; Personen die wahrscheinlich auch
einen breitbandigen Internetzugang haben und die richtigen sozialen
Kontakte um Ihre Ergebnisse auf eine schädliche Art zu verbreiten,
wenn Sie es wollen. Wenn Global Megacorp Chemical Industries einen
Fluss verunreinigt, kann das nachgewiesen werden, aber nur von
ausgebildeten Wissenschaftlern, die wiederum von den Wissenschaftlern
von Global Megacorp angefochten werden können, wodurch die 
Öffentlichkeit verwirrt wird und sich nicht sicher ist, was sie denken
soll. Im Gegensatz dazu ist Ihr Verhalten in der Open-Source-Welt
nicht nur sichtbar und aufgezeichnet; es ist auch ein Leichtes für
viele Leute es unabhängig voneinander zu überprüfen, ihre eigene
Schlussfolgerungen zu ziehen und diese mittels Mundpropaganda zu
verbreiten. Diese Kommunikationsnetzwerke sind bereits gelegt; sie sind
das Wesentliche wodurch Open Source funktioniert, und sie können 
benutzt werden, um jede Information zu übertragen. Widerlegung ist
für gewöhnlich schwer, wenn nicht sogar unmöglich, insbesondere wenn
das was die Leute sagen war ist.</para>

<!--
<para>For example, it's okay to refer to your organization as having
"founded project X" if you really did.  But don't refer to yourself as
the "makers of X" if most of the code was written by outsiders.
Conversely, don't claim to have a deeply involved volunteer developer
community if anyone can look at your repository and see that there are
few or no code changes coming from outside your organization.</para>
-->
<para>Es ist zum Beispiel in Ordnung von Ihrer Organization zu sagen,
dass Sie "Projekt X gegründet" hat wenn das tatsächlich der Fall ist.
Bezeichnen Sie sich aber nicht als die "Hersteller von X" wenn der
meiste Code von Fremden geschrieben wurde. Umgekehrt sollten Sie nicht
behaupten, dass Sie eine zutiefst beteiligte Gemeinschaft freiwilliger
Entwickler haben, wenn jeder in Ihr Projektarchiv hineinschauen und sehen
kann, dass es wenige oder gar keine Änderungen gibt, die von außerhalb
Ihrer Gesellschaft kommen.</para>

<!--
<para>Not too long ago, I saw an announcement by a very well-known
computer company, stating that they were releasing an important
software package under an open source license.  When the initial
announcement came out, I took a look at their now-public version
control repository and saw that it contained only three revisions.  In
other words, they had done an initial import of the source code, but
hardly anything had happened since then.  That in itself was not
worrying&mdash;they'd just made the announcement, after all.  There
was no reason to expect a lot of development activity right
away.</para>

-->
<para>Vor nicht all zu langer Zeit sah ich eine Meldung von einer sehr
bekannten Computer-Firma, welche behauptete, dass Sie ein wichtiges
Software-Paket unter einer Open-Source-Lizenz veröffentlichten. Als
die ursprüngliche Ankündigung herausgegeben wurde, sah ich mir ihr
nunmehr öffentliches Projektarchiv an und erkannte, dass es nur drei Revisionen
beinhaltete. Mit anderen Worten, hatte sie den ersten Import des
Quellcodes gemacht, seit dem war aber fast nichts geschehen. Das 
alleine für sich war nicht beunruhigend &ndash; schließlich hatten sie
eben erst die Ankündigung gemacht. Es gab keinen Grund gleich vorne
weg eine Menge Aktivität zu erwarten.</para>

<!--
<para>Some time later, they made another announcement.  Here is what
it said, with the name and release number replaced by pseudonyms:</para>
-->
<para>Etwas später machten Sie eine weitere Meldung. Dabei behaupteten 
sie folgendes (wobei der Name und die Versionsnummer durch Pseudonyme 
ausgetauscht wurden):</para>


  <!--
  <blockquote>
    <para><emphasis>We are pleased to announce that following
    rigorous testing by the Singer Community, Singer&nbsp;5 for Linux
    and Windows are now ready for production use.</emphasis></para>
  </blockquote>
  -->
  <blockquote>
    <para><emphasis>Wir freuen uns bekannt zu geben, dass nach 
	rigorosen Tests durch die Singer-Gemeinschaft, Singer&nbsp;5 für
	Linux und Windows für den Einsatz in produktiven Umgebungen bereit
	ist.</emphasis></para>
  </blockquote>

<!--
<para>Curious to know what the community had uncovered in "rigorous
testing," I went back to the repository to look at its recent change
history.  The project was still on revision 3.  Apparently, they
hadn't found a <emphasis>single</emphasis> bug worth fixing before the
release!  Thinking that the results of the community testing must have
been recorded elsewhere, I next examined the bug tracker.  There were
exactly six open issues, four of which had been open for several months
already.</para>
-->
<para>Neugierig was die Community bei ihren "rigorosen Tests" aufgedeckt
hatte, ging ich danach zurück zum Projektarchiv um seine Historie
kürzlicher Änderung an zu sehen. Das Projekt war immer noch bei der
Revision 3. Scheinbar hatten sie <emphasis>keinen einzigen</emphasis>
Bug gefunden der es vor dem Release wert gewesen wäre behoben zu werden!
In der Annahme, dass die Ergebnisse der Tests durch die Gemeinschaft
anderswo aufgezeichnet worden sein müssen, untersuchte ich als nächstes
den Bugtracker. Es gab genau sechs offene Meldungen, von denen vier
bereits seit mehreren Monaten offen gewesen waren.</para>

<!--
<para>This beggars belief, of course.  When testers pound on a large
and complex piece of software for any length of time, they will find
bugs.  Even if the fixes for those bugs don't make it into the
upcoming release, one would still expect some version control activity
as a result of the testing process, or at least some new issues.  Yet
to all appearances, nothing had happened between the announcement of
the open source license and the first open source release.</para>
-->
<para>Das ist so natürlich kaum glaubwürdig. Wenn Tester auf einem
großen und komplexen Stück Software für einige Zeit einhämmern, 
werden sie Fehler finden. Selbst wenn die
Fixes für diese Bugs es nicht in die nächste Version schaffen, sollte
man annehmen, dass durch das Testen irgendwelche Aktivität auf dem 
Versionsverwaltungssystem resultieren würde oder zumindest ein paar
neue Bug-Meldungen. Allem Anschein nach war jedoch nichts seit der
Ankündigung der Open-Source-Lizenzierung und der ersten 
Open-Source-Version passiert.</para>

<!--
<para>The point is not that the company was lying about the community
testing.  I have no idea if they were or not.  But they were oblivious
to how much it <emphasis>looked</emphasis> like they were lying.
Since neither the version control repository nor the issue tracker
gave any indication that the alleged rigorous testing had occurred,
the company should either not have made the claim in the first place,
or provided a clear link to some tangible result of that testing ("We
found 278 bugs; click here for details").  The latter would have
allowed anyone to get a handle on the level of community activity very
quickly.  As it was, it only took me a few minutes to determine that
whatever this community testing was, it had not left traces in any of
the usual places.  That's not a lot of effort, and I'm sure I'm not
the only one who took the trouble.</para>
-->
<para>Die Sache ist nicht, dass die Firma über die Tests durch die
Gemeinschaft gelogen hatte. Ich habe keine Ahnung ob dies der Fall war
oder nicht. Sie waren aber völlig nachlässig darüber, wie sehr es
danach <emphasis>aussah</emphasis> als ob sie am Lügen waren. Da weder
das Versionsverwaltungssystem noch der Bugtracker irgend eine 
Andeutung über die angeblichen rigorosen Tests beinhaltete, 
hätte die Firma entweder von vorn herein die Behauptung nicht machen 
sollen oder einen klaren Verweis auf irgendein greifbares Ergebnis 
dieser Tests ("Wir haben 278 Bugs gefunden; klicken Sie hier für 
weitere Details") geben sollen.
Letzteres hätte jedem die Möglichkeit gegeben, sich sehr schnell ein 
Bild über die Aktivität der Gemeinschaft zu machen. So wie es war,
brauchte ich nur ein paar Minuten um heraus zu finden, dass was auch
immer diese Gemeinschaft am testen war, es hatte keine Spuren an den
üblichen Stellen zurück gelassen. Das ist keine große Mühe, und ich
bin mir sicher, dass ich nicht der einzige war der sich diese gemacht
hat.</para>

<!--
<para>Transparency and verifiability are also an important part of
accurate crediting, of course.  See
<xref linkend="credit"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on this.</para>
-->
<para>Transparenz und Überprüfbarkeit sind natürlich auch ein wichtiger
Teil der rechten Würdigung. Siehe <xref linkend="credit"/>
<phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> für weiteres 
hierüber.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<!--
<title>Don't Bash Competing Open Source Products</title>
-->
<title>Machen Sie konkurrierende Open-Source-Produkte nicht schlecht</title>

<!--
<para>Refrain from giving negative opinions about competing open
source software.  It's perfectly okay to give negative
<emphasis>facts</emphasis>&mdash;that is, easily confirmable
assertions of the sort often seen in good comparison charts.  But
negative characterizations of a less rigorous nature are best avoided,
for two reasons.  First, they are liable to start flame wars that
detract from productive discussion.  Second, and more importantly,
some of the volunteer developers in <emphasis>your</emphasis> project
may turn out to work on the competing project as well.  This is more
likely than it at first might seem: the projects are already in the
same domain (that's why they're in competition), and developers with
expertise in that domain may make contributions wherever their
expertise is applicable.  Even when there is no direct developer
overlap, it is likely that developers on your project are at least
acquainted with developers on related projects.  Their ability to
maintain constructive personal ties could be hampered by
overly negative marketing messages.</para>
-->
<para>Unterlassen Sie es, negative Ansichten über konkurrierende 
Open-Source-Software zu verkünden. Es ist völlig in Ordnung, negative
<emphasis>Tatsachen</emphasis> zu benennen &ndash; also leicht überprüfbare 
Behauptungen von der Art, wie man sie oft in Vergleichstabellen
sieht. Negative Beschreibungen, von weniger rigoroser Natur sollte
man aus zwei Gründen lieber vermeiden. Erstens machen Sie sich damit
schuldig Flamewars anzufangen, welche von produktiven Diskussionen
ablenken. Zweitens und noch wichtiger, kann es sich herausstellen, dass
einige der freiwilligen Entwickler in <emphasis>Ihrem</emphasis> 
Project, auch an dem konkurrierenden Projekt arbeiten. Das ist
wahrscheinlicher als es zunächst den Anschein haben mag: Die Projekte
sind bereits in dem selben Anwendungs und Geschäftsbereich 
(deshalb stehen sie zu einander in Konkurrenz). So kann es passieren, 
dass die Entwickler die Fachwissen auf diesem Gebiet haben überall dort 
Beiträge leisten wo es anwendbar ist.
Selbst wenn es keine direkte Überlappung bei den Entwicklern gibt, ist
es wahrscheinlich, dass Entwickler in Ihrem Projekt zumindest mit denen
aus verwandten Projekten vertraut sind. Ihre Möglichkeiten konstruktive
persönliche Bekanntschaften zu pflegen könnten durch übermäßig 
negative Marketing-Botschaften eingeschränkt werden.</para>

<!--
<para>Bashing competing closed-source products seems to be more widely
accepted in the open source world, especially when those products are
made by Microsoft.  Personally, I deplore this tendency (though again,
there's nothing wrong with straightforward factual comparisons), not
merely because it's rude, but also because it's dangerous for a
project to start believing its own hype and thereby ignore the ways in
which the competition may actually be superior.  In general, watch out
for the effect that marketing statements can have on your own
development community.  People may be so excited at being backed by
marketing dollars that they lose objectivity about their software's
true strengths and weaknesses.  It is normal, and even expected, for a
company's developers to exhibit a certain detachment toward marketing
statements, even in public forums.  Clearly, they should not come out
and contradict the marketing message directly (unless it's actually
wrong, though one hopes that sort of thing would have been caught
earlier).  But they may poke fun at it from time to time, as a way of
bringing the rest of the development community back down to
earth.</para>
-->
<para>Auf konkurrierenden proprietären Produkten herumzuhacken scheint
eher in der Open-Source-Welt akzeptiert zu sein, insbesondere wenn 
diese Produkte von Microsoft stammen. Ich persönlich verabscheue diese
Neigung (obwohl es auch in diesem Fall nichts gegen sachliche Vergleiche 
auszusetzen gibt), nicht nur weil es unhöflich
ist, sondern weil es gefährlich für ein Projekt ist, anzufangen ihren
eigenen Hype zu glauben und dadurch zu ignorieren, inwiefern die
Konkurrenz vielleicht tatsächlich überlegen sein mag. Im allgemeinen
sollten Sie darauf aufpassen, welche Auswirkungen Marketing-Botschaften
auf Ihre eigene Entwicklergemeinschaft haben mag. Manche mögen derart
aufgeregt darüber sein, durch Marketing Rückenwind zu bekommen, 
dass sie ihre Objektivität über die wahren Stärken und Schwächen ihrer
Software verlieren. Es ist normal, und sogar zu erwarten, dass die
Entwickler einer Firma zu einem gewissen Grad Unberührtheit von
Marketing-Behauptungen ausdrücken, selbst in den öffentlichen Foren.
Sie sollten ganz klar diesen Marketing-Botschaften nicht direkt
widersprechen (es sei denn sie sind tatsächlich falsch, obwohl man
hoffen mag, dass soetwas vorher abgefangen werden sollte). Von Zeit zu
Zeit kann es aber passieren, dass sie sich darüber lustig machen, um
die restliche Entwicklergemeinschaft wieder auf den Teppich zu bringen.
</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
