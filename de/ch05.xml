<chapter id="money">

<title>Geld</title>

<simplesect>

<para>Dieses Kapitel untersucht die Finanzierung inerhalb der Umgebung
freie Software. Es ist nicht nur an Entwickler die für ihre Arbeit an
freie Software Projekte bezahlt werden gerichtet, sondern auch an ihre
Projektleiter, welche die soziale Dynamik der Entwicklungsumgebung 
verstehen müssen. In den folgenden Abschnitten wird angenommen, dass Sie
ein bezahlter Entwickler sind oder jemand der solche Entwickler leitet.
Die Ratschläge werden für beide oft die gleichen sein; falls nicht, wird
die angesprochene Gruppe aus dem Kontext erkennbar sein.</para>

<para>Finanzierung der Entwicklung freier Software durch Unternehmen
ist kein neues Phänomen. Eine Menge Entwicklung wurde schon immer
informell subventioniert. Wenn ein Systemadministrator eine Programm
zur Netzwerkanalyse schreibt um ihn bei seiner Arbeit zu helfen, dann
stellt er es online und erhällt Beiträge von anderen Administratoren in
Form von Bugfixes und neue Funktionen, sodass sich sich ein neues 
Konsortium bildet. Die Finanzierung stammt aus den Gehältern der 
Administratoren und seine Bürofläche und Infrastruktur werden, wenn auch
ohne ihr wissen von den Organisationen gespendet, für die sie arbeiten.
Diese Organisationen profitieren natürlich von der Investition, obwohl
sie aus institutioneller Sicht erst einmal nichts davon wissen.</para>

<para>Der Unterschied heute ist, dass viele dieser Anstrengungen
formalisiert werden. Firmen sind sich der Vorteile von Open Source
Software bewusst geworden und fangen an sich direkter an ihrer
Entwicklung zu beteiligen. Entwickler erwarten mittlerweile, dass
wirklich wichtige Projekte zumindest Spenden anlocken, wenn nicht sogar
längerfristige Sponsoren. Auch wenn sich durch Geld nicht sonderlich
viel an der Dynamik der Entwicklung freier Software geändert hat, ist
der Maßstab der Abläufe doch größer geworden, sowohl hinsichtlich der
Anzahl der Entwickler, als auch der Zeit pro Entwickler. Es hat auch
die Organisation der Projekte beeinflusst und wie die beteiligten
Parteien miteinander umgehen. Die Angelegenheiten drehen sich nicht nur
darum wie das Geld ausgegeben wird oder die Rendite gemessen wird. Es 
geht dabei auch um die Verwaltung und den Ablauf: Wie kann die 
hierarchische Befehlsstruktur einer Firma und die halb dezentralisierte
der Gemeinschaften von freiwilligen freier Software Projekte, gemeinsam
und produktiv miteinander arbeiten? Werden sie sich überhaupt darauf
einigen können, was "Produktivität" bedeutet?</para>

<para>Finanzielle Rückendeckung wird allgemein von Open Source
Gemeinschaften gerne angenommen. Es kann die Verwundbarkeit für die
Auswirkungen von Chaos verringern, welche so viele Projekte wegfegen,
bevor sie wirklich vom Boden abheben und Leute sind dadurch eher bereit
der Software eine Chance zu geben&mdash;sie bekommen das Gefühl ihre
Zeit in etwas zu investieren, was auch noch in 6 Monate da sein wird.
Schließlich ist Glaubwürdigkeit zu einem gewissen Grad ansteckend. Wenn
sagen wir IBM ein Projekt unterstützt, kann man davon ausgehen, dass
ein Scheitern des Projekts nicht zugelassen wird, und ihre sich daraus
ergebende Bereitschaft selber Mühe aufzubringen kann zu einer zu einer
selbst erfüllende Prophezeiung werden.</para>

<para>Finanzierung verursacht jedoch auch das Gefühl von Kontrolle.
Ohne sorgfältige Handhabung, kann Geld die Entwickler eines Projekts in
mehrere Gruppen spalten. Wenn die unbezahlten Entwickler das Gefühl
bekommen, dass Entscheidungen über die Architechtur oder
Funktionserweiterungen einfach für den Höchstbietenden verfügbar sind,
werden sie zu einem anderen Projekt wechseln, indem sie eher das Gefühl
haben, dass Leistung das Ausschlaggebende ist und nicht meinen ohne
bezahlung die Arbeit zum Vorteil anderer zu erledigen. Sie werden sich
nicht unbedingt sonderlich auf den E-Mail Verteilern beschweren. Statt
dessen wird es einfach weniger von Außen hören geben, während 
Freiwillige sich immer weniger bemühen ernst genommen zu werden. Das
Surren der kleineren Aktivitäten in Form von Bug Reports und 
gelegentlichen kleinen Fixes wird weitergehen. Es wird aber von Außen
keine größeren Beiträge oder Beteiligung an Diskussionen über den 
Codeaufbau geben. Leute werden spüren, was man von ihnen erwartet (bzw. 
nicht erwartet), und diesen Erwartungen entsprechend gerecht 
werden.</para>

<para>Obwohl Geld vorsichtig benutzt werden muss, bedeutet das nicht,
dass man sich Einfluss nicht erkaufen kann. Das ist ganz sicher möglich.
Der Haken ist, dass der Einfluss nicht direkt erkauft werden kann. Bei 
einem einfachen Kommerziellen Geschäft, tauschen Sie Geld gegen ein Gut.
Wenn Sie eine zusätzliche Funktion benötigen, unterschreiben Sie einen
Vertrag, zahlen dafür und es wird umgesetzt. In einem Open-Source 
Projekt, geht das nicht so einfach. Sie werden vielleicht mit ein paar 
Entwickler Verträge abschließen, aber diese würden sich&mdash;und 
Sie&mdash; täuschen, wenn sie die Aufnahme der von Ihnen finanzierte
Arbeit durch die Entwicklergemeinschaft garantieren würden, alleine aus
dem Grund, dass Sie dafür bezahlen. Die Arbeit kann nur im Rahmen seiner
Leistung angenommen werden und wie gut es sich einfügt, in die 
Vorstellungen der der Gemeinschaft über die Zukunft der Software. Sie 
werden dabei möglicherweise etwas zu sagen haben, Sie werden aber nicht
die einzige sein.</para>

<para>Einfluss ist also nicht käuflich, Sachen die zu Einfluss
<emphasis>führen</emphasis> sind es aber sehr wohl. Das offensichtlichste
Beispiel sind Programmierer. Wenn gute Programmierer eingestellt werden,
und sie lange genug bleiben um sich Erfahrung mit der Software und
Glaubwürdigkeit in der Gemeinschaft anzueignen, können Sie das Projekt 
gleichermaßen beeinflussen wie jedes andere Mitglied. Sie haben bei
Wahlen eine Stimme, oder bei mehreren Entwicklern sogar ein Stimmblock.
Wenn Sie in dem Projekt respektiert werden, bekommen sie Einfluss über 
ihre Stimmen hinaus. Bezahlte Entwickler müssen auch nicht ihre Motive 
versuchen zu verschleiern. Schließlich will jeder der eine Änderung macht
es aus irgend einem Grund. Die Motive Ihrer Firma sind in keiner weise 
weniger berechtigt als die von irgendjemand anderem. Das ihrer Firma
zugesproche Stimmgewicht, ist allerdings abhängig von dem Status ihrer 
Stellvertreter im Projekt, nicht von ihrer Größe, ihrem Budget oder 
Geschäftsplan.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-involvement">
<title>Arten der Beteiligung</title>

<para>Es gibt viele verschiedene Gründe Open-Source Projekte zu 
Finanzieren. Die Punkte auf dieser Liste schließen sich nicht gegenseitig
aus; oftmals wird die Finanzielle Rückendeckung das Resultat mehrere oder
alle dieser Motivationen sein:</para>

<variablelist>

   <varlistentry><term>Geteilte Last</term>
     <listitem>
     <para>Separate Organisationen mit überlappenden Softwarebedarf
     merken, dass sie die gleiche Arbeit machen, entweder schreiben sie
     redundant den gleichen Code in der selben Firma, oder sie kaufen
     ähnliche Produkte von proprietären Anbietern. Wenn sie bemerken, was
     vor sich geht, werden sie vielleicht ihre Ressourcen zusammenlegen
     und ein Open-Source Projekt gründen (oder beitreten) welches an 
     ihren Bedarf angepasst ist. Die Vorteile sind offensichtlich: Die 
     Kosten der Entwicklung werden geteilt, die Vorteile kommen aber 
     allen gleichermaßen zugute. Obwohl dieses Scenario die intuitivste
     für gemeinnützige Organisationen scheint, kann es auch für profit
     orientierte Konkurrenten Sinn machen.</para>
     <para>Beispiele: <ulink url="http://www.openadapter.org/"/>,
     <ulink url="http://www.koha.org/"/></para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Verbesserung von Dienstleistungen</term>
     <listitem>
     <para>Wenn eine Firma Dienstleistungen zu bestimmten Open-Source 
     Anwendungen verkauft oder durch die Software attraktiver gemacht
     werden, liegt es natürlich im Interesse der Firma sicherzustellen, 
     dass diese Anwendungen auch gepflegt werden.</para>
     <para>Beispiel: Die Unterstützung von 
     <ulink url="http://subversion.tigris.org/"/> durch
     <ulink url="http://www.collab.net/">CollabNet</ulink> 
     (Haftungsauschluss: Das ist meine tägliche Arbeit, es ist aber auch
     ein perfektes Beispiel für dieses Modell).</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Unterstützung vom Hardware Absatz</term>
     <listitem>
     <para>Der Wert von Computern und Hardware ist direkt von der dafür
     zur Verfügung stehenden Software abhängig. Hardware Verkäufer&mdash;
     nicht nur Verkäufer kompletter Maschinen, sondern auch die 
     Hersteller von Peripheriegeräte und Mikrochips&mdash;haben
     herausgefunden, dass es ihren Kunden wichtig ist hochwertige freie 
     Software für ihre Hardware zu haben.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Untergrabung der Konkurrenz</term>
     <listitem>
     <para>Manche Firmen unterstützen ein bestimmtes Open-Source Projekt
     um ein Produkt der Konkurrenz zu untergraben, welches unter
     Umständen auch selber Open-Source sein kann. Den Marktanteil des
     Konkurrenten wegzufressen ist selten der einzige Grund ein
     Open-Source Projekt zu unterstützen, kann aber eine Rolle
     spielen.</para>
     <para>Beispiel: <ulink url="http://www.openoffice.org/"/> (nein, das
     ist nicht der einzige Grund für die Existenz der Software, es ist 
     aber zumindest teilweise eine Reaktion auf Microsoft Office).</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Marketing</term>
     <listitem>
     <para>Ihre Firma mit einer bekannten Open-Source Anwendung zu 
     assoziieren kann einfach gute Markenpflege sein.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Doppelte Lizenzierung</term>
     <listitem>
     <para><firstterm>Doppelte Lizenzierung</firstterm> bedeutet, 
     Software unter einer traditionellen proprietären Lizenz für Kunden 
     anzubieten die es als Teil ihrer proprietären Anwendung verkaufen
     wollen. Gleichzeitig veröffentlicht man es unter einer freien für
     diejenigen, die bereit sind es unter den Open-Source Bedingungen zu
     benutzen (siehe 
     <xref linkend="dual-licensing"/><phrase output="printed"> im Kapitel
     <xref linkend="legal"/></phrase>). Wenn die Open-Source
     Entwicklergemeinschaft aktiv ist, bekommt die Software die Vorteile
     vieler Anwender um die Entwicklung zu testen, die Firma bekommt 
     dennoch Nutzungsgebühren um ihrer Vollzeitentwickler zu 
     unterstützen.</para>
     <para>Zwei bekannte Beispiele sind 
     <ulink url="http://www.mysql.com/">MySQL</ulink>, die Hersteller der
     gleichnamigen Datenbank Software, und 
     <ulink url="http://www.sleepycat.com/">Sleepycat</ulink>, welches
     Distributionen und Support für die Berkeley Datenbank anbietet. 
     Beide sind nicht zufälltig Datenbank Firmen. Datenbank Software 
     neigt dazu eher in anderen Anwendungen integriert zu werden als
     direkt an Kunden vermarktet zu werden, also ist es sehr gut für das
     Modell der doppelten Lizenzierung geeignet.</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Spenden</term>
     <listitem>
     <para>Ein erfolgreiches Projekt kann manchmal wesentliche Beiträge,
     sowohl von Einzelpersonen als auch von Organisationen bekommen, 
     allein durch einen Spendenknopf, oder den Verkauf von Waren mit 
     ihre Marke wie Tassen, T-shirts Mousepads, usw. Hierbei sollte man
     vorsichtig sein: Wenn ihr Projekt Spenden annimmt, sollten Sie 
     planen wie das Geld benutzt werden soll, <emphasis>bevor</emphasis>
     es auftaucht, und schreiben Sie ihre Pläne auf die Webseite des 
     Projekts. Diskussionen über die Aufteilung von Geld verlaufen 
     meistens friedlicher wenn es noch keins gibt; sollte es doch
     bedeutende Streitigkeiten über die Verwendung geben, ist es trotzdem
     besser es in einer eher akademischen Diskussion 
     herauszufinden.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para>Das Geschäftsmodel eines Geldgebers ist nicht der einzige Einfluss
auf eine Open-Source Gemeinschaft. Die historische Beziehung zwischen 
den beiden spielt auch eine wichtige Rolle: Hat die Firma das Projekt 
gegründet, oder tritt es einer bereits laufenden Entwicklung bei? So oder
so muss sich der Geldgeber Glaubwürdigkeit verdienen, es ist deswegen 
auch nicht überraschend, dass letzteres etwas mehr Mühe erfordert. 
Die Organisation muss klare Ziele im Bezug auf das Projekt haben. 
Versucht sie eine Führungsposition zu behalten, oder will sie einfach 
eine Stimme in der Gemeinschaft, um sie zu führen aber nicht unbedingt
die Richtung des Projekts vorzugeben? Vielleicht will die Firma auch
einfach nur ein paar Entwickler parat haben, um Fehler für seine Kunden 
zu beheben und Änderungen ohne große Umstände in die öffentliche 
Distribution einbinden zu können?</para>

<para>Behalten Sie diese Fragen beim lesen der nachfolgenden Richtlinien
im Hinterkopf. Sie sollen für jede organisatorische Beteiligung an einem
freien Software Projekt gelten, da Sie es aber mit Menschen zu tun haben
ist jedes Projekt einzigartig. Zu einen gewissen Grad werden Sie immer
nach Gehör spielen müssen, die Entwicklung wird aber eher nach ihren
Vorstellungen verlaufen, wenn Sie diese Prinzipien befolgen.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<title>Dauerhafte Entwickler</title>

<para>Behalten Sie Ihre Open-Source Programmierer lange genug bei einem
Projekt, dass sie sowohl technische als auch politische Kompetenzen
aneignen können&mdash;mindestens ein paar Jahre. Natürlich profitiert 
kein Projekt, ob Open-Source oder nicht von häufig wechselnde 
Programmier. Sich jedes mal neu einarbeiten zu müssen wäre in jeder
Umgebung für Neulinge abschreckend. Für Open-Source Projekte ist die 
Strafe aber noch größer, da Entwickler die ein Projekt verlassen nicht
nur ihre Kenntnisse über den Code mitnehmen, sondern auch ihre Position
in der Gemeinschaft sowie die dort aufgebauten menschlichen 
Beziehungen.</para>

<para>Die von einem Entwickler angesammelte Glaubwürdigkeit, kann nicht
übertragen werden. Das offensichtlichste Beispiel wäre wohl, dass der
Commit-Zugriff nicht von einem Entwickler zum Anderen vererbt werden kann
(siehe <xref linkend="money-vs-love"/> später in diesem Kapitel), wenn 
ein neue Entwickler also noch keinen Commit-Zugriff hat, wird er so lange
Patches einreichen müssen. Commit-Zugriff ist aber nur die messbarste
Erscheinungs für den verlorenen Einfluss. Ein langjähriger Entwickler
kennt auch alle alten Argumente die wieder und wieder in Diskussionen auf
den E-Mail Verteilern zerlegt wurden. Ein neuer Entwickler ohne eine
Erinnerung an solche Unterhaltungen, könnte versuchen diese Themen erneut
zur Sprache zu bringen, was zum Verlust der Glaubwürdigkeit Ihrer 
Organization führt; die anderen werden sich vielleicht wundern "Können 
die sich den Garnichts behalten"? Neue Entwickler werden auch kein 
politisches Gespür für die Persönlichkeiten im Projekt haben und werden
nicht in der Lage sein die Richtung der Entwicklung so schnell oder 
reibungslos zu beeinflussen, wie ein alter Hase.</para>

<para>Lassen Sie Anfänger sich zur Einweisung, unter Beaufsichtigung, an
dem Projekt beteiligen. Der neue Entwickler sollte vom ersten Tag sehr
sehr eng mit der öffentlichen Entwicklergemeinschaft arbeiten, angefangen
mit Bugfixes und Aufräumarbeiten, um den Codebase kennenzulernen und sich
einen Ruf in der Gemeinschaft zu erarbeiten, er sollte jedoch keine 
langwierige und verstrickte Diskussionen über Codestruktur zünden. 
Währendessen sollten ein Paar erfahrene Entwickler für Fragen zur 
Verfügung stehen, die jede Nachricht des Anfängers an die Verteiler lesen
sollten, sogar bei Threads die sie sonst keine Beachtung schenken würden.
Das wird die Gruppe helfen mögliche Steine auf dem Weg zu erkennen, bevor
der Anfänger drüber stolpert. Private Anregung und Hinweise im 
Hintergrund können auch eine große Hilfe sein, besonders wenn der 
Anfänger es nicht gewohnt ist, dass sein Code der Kritik durch die
Gemeinschaft unterworfen ist.</para>

<para>Wenn CollabNet einen neuen Entwickler Einstellt, um an Subversion 
zu arbeiten, setzen wir uns zusammen und wählen ein paar offenestehende
Fehler für die neue Person, um sich erst einmal die Krallen zu schärfen.
Wir diskutieren den technischen Rahmen der Lösungen und weisen dann 
mindestens einen erfahrenen Entwickler an (öffentlich) den Patch,
kritisch unter die Lupe zu nehmen, der vom neuen Entwickler (auch 
öffentlich) eingereicht wird. Normalerweise schauen wir uns den Patch 
nicht einmal an, vor es auf dem Zentralen Verteiler für Entwickler zu 
sehen ist, auch wenn wir es könnten, gäbe es einen Grund. Das wichtige 
ist den neuen Entwickler durch den Ablauf der öffentlichen Überprüfung
zu schicken, dabei den Codebase kennenlernt und sich daran gewöhnt von 
völlig Fremden Kritik zu erhalten. Wir versuchen es aber so abzustimmen,
dass unsere Bewertung möglichst bald nach dem Patch kommt. Dadurch ist 
die erste Bewertung auf dem Verteiler von uns, was helfen kann, den Ton
der nachfolgenden Bewertungen zu setzen. Es trägt auch zu der Idee bei, 
dass diese neue Person ernst genommen werden soll: Wenn andere sehen wie
wir uns die Zeit nehmen ausführliche Bewertungen zu schreiben, mit 
gründlichen Erklärungen und wenn angemessen Verweise auf die Archive, 
werden sie es als eine gewisse Form der Schulung erkennen, was 
wahrscheinlich eine längerfristige Investition andeutet. Das kann sie 
positiver gegenüber den Entwickler stimmen, zumindest soweit, dass sie 
sich ein wenig mehr Zeit nehmen, um Fragen zu beantworten und Patches zu
bewerten.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<title>Treten Sie als Viele auf</title>

<para>Ihre Entwickler sollten anstreben in den öffentlichen Foren als
einzelne Beteiligte aufzutreten und nicht als das monolitische Wesen
einer Firma. Das liegt nicht an irgend eine negative Behaftung eines
monolitische Firmenwesens (naja, vielleicht schon ein bisschien, aber 
darum geht es nicht in diesem Buch). Einzelpersonen sind einfach das 
einzige wofür Open-Source Projekte strukturell gewappnet sind. Ein 
Einzelner Beteiligter kann sich an Diskussionen beteiligen, Patches 
einreichen, sich Glaubwürdigkeit verschaffen, an Abstimmungen teilnehmen
usw. Eine Firma kann das nicht.</para>

<para>Desweiteren, verhindert man durch ein dezentralisiertes Verhalten
die Bildung einer zentralisierten Opposition. Lassen Sie ihre Entwickler
sich auf den E-Mail Verteilern untereinander streiten. Ermutigen Sie 
häufige und öffentliche gegenseitig Überprüfung und Bewertung vom Code.
Raten Sie davon ab immer als ein Block abzustimmen, denn wenn sie das 
machen, werden andere das Gefühl bekommen allein aus Prinzip, einen
Gegenpol organisieren zu müssen, um sie in Schach zu halten.</para>

<para>Es gibt einen Unterschied zwischen einer wirklich dezentralisierten
organisation und einfach als solches erscheinen zu wollen. In bestimmten
Fällen kann es durchaus nützlich sein ihre Entwickler an einem Strang 
ziehen zu lassen und sie sollten vorbereitet sein falls nötig, im
Hintergrund zu koordinieren. Wenn beispielsweise ein Vorschlag gemacht 
wird, kann er durch frühzeitige Zustimmung anderer Entwickler auf die 
Sprünge geholfen werden, indem es den Eindruck von zunehmenden Konsens
vortäuscht. Andere spüren ein gewisses Momentum für den Vorschlag, der
durch einen Einspruch ihrerseits aufgehalten würde. Deshalb werden Leute
nur dann Einsprechen, wenn sie dazu einen guten Grund haben. Es gibt im
Übrigen nichts verwerfliches daran, Zustimmung auf diese Art zu 
koordinieren, solange Einsprüche weiterhin ernst genommen werden. Wie 
sich diese private Übereinkunft öffentlich offenbart ist nicht weniger 
aufrichtig oder für das Projek schädlich, nur weil sie vorher koordiniert
wurde, so lange sie nicht dazu benutzt wird um Gegenargumente frühzeitig 
und abträglich auszustechen. Der Sinn ist lediglich die bestimmte 
Personen aufzuhalten, die einfach nur Einwände machen um in Form zu 
bleiben; siehe <xref linkend="bikeshed"/><phrase output="printed"> im 
Kapitel <xref linkend="communications"/></phrase> für weiteres.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<title>Seien Sie offen über Ihre Absichten</title>

<para>Seien Sie so Offen über die Motivation wie Sie es können, ohne
Ihre Geschäftsgeheimnisse zu kompromittieren. Wenn Sie wollen in ihrem
Projekt eine bestimmte Funktion haben wollen, sagen wir, weil Ihre Kunden
danach schreien, seien Sie auf den E-Mail Verteilern offen darüber. Wenn
die Kunden anonym bleiben wollen, was manchmal vorkommt, fragen Sie 
wenigstens ob Sie als ungenannte Beispiele benutzt werden können. Je mehr
die öffentlicher Entwicklergemeinschaft weiß <emphasis>warum</emphasis> 
Sie etwas wollen, desto wohler werden Sie sich bei ihren Vorschlagen
fühlen.</para>

<para>Das widerspricht dem Instinkt&mdash;einfach anzueignen, schwer
loszuwerden&mdash;dass Wissen Macht ist und die Ziele andere zu kennen
mehr Kontrolle über sie bedeutet. Der Instinkt wäre hier aber falsch.
Indem man öffentlich die Funktion (oder Bugfix, oder was immer ansteht) 
empfiehlt, haben Sie ja schon Ihre Karten auf den Tisch gelegt. Die
einzige Frage ist, ob Sie die Gemeinschaft dazu bringen können ihr Ziel
mit Ihnen zu teilen. Wenn Sie einfach sagen, dass Sie die Funktion haben
wollen, aber keine konkreten Gründe dafür nennen wollen, stehen Sie auf
schwachem Boden und Leute werden anfangen verborgene Absichten zu 
vermuten. Aber auch nur ein paar echte Szenarien zu nennen, die zeigen
warum die vorgeschlagene Funktion wichtig ist, kann sich dramatisch auf 
die Debatte auswirken.</para>

<para>Um den Grund dafür zu erkennen, sollten Sie die alternative
bedenken. All zu oft sind Debatten über neue Funktionen oder Richtungen
langwierig und ermüdend. Die Argumente die angebracht werden reduzieren
sich meistens auf "Ich persönlich will X", oder das immer wieder beliebte
"Meine langjährigen Erfahrung als Software Entwickler hat gezeigt, dass
X für Nutzer äußerst wichtig ist / eine nutzlose Krause ist, die keinen
zufrieden stellen wird". Solche Debatten werden dementsprechen durch 
Mangel an Daten über echter Nutzung, weder verkürzt noch verlängert, 
sondern treiben immer weiter von der Praxis ab. Ohne irgend eine 
ausgleichende Kraft, wird das Endergebnis möglicherweise eher von dem 
Wortgewandtesten, den Hartnäckigsten oder dem Ranghöchsten
bestimmt.</para>

<para>Ihre Position als Organization mit reichlich Kundendaten, 
ermöglicht Ihnen genau solch eine ausgleichende Kraft bereit zu stellen.
Sie können ein Kanal für Informationen sein, die sonst keine Möglichkeit 
hätten zu der Gemeinschaft zu gelangen. Sie müssen sich nicht für die
Tatsache schämen, dass diese Informationen Ihre Wünsche untermauern. Die
meisten Entwickler haben für sich keine breite Erfahrung über die Nutzung
Ihrer Software. Jeder Entwickler benutzt die Software auf seine eigene 
spezifische Art; über das Nutzungsverhalten anderer spekuliert er 
lediglich und verlässt sich auf seine Intuition. Tief im inneren ist ihm
das auch bewust. Durch glaubwürdige Daten einer nicht zu 
vernachlässigenden Anzahl an Nutzern, geben Sie der 
Entwicklergemeinschaft etwas wie Sauerstoff. So lange Sie es richtig 
auslegen, wird sie es mit Begeisterung annehmen und der Wind wird in eine
für Sie günstige Richtung wehen.</para>

<para>Wesentlich ist natürlich, es richtig zu präsentieren. Es reicht auf
keinen Fall aus, nur weil Sie mit eine Menge Nutzern zu tun haben und 
weil diese eine gegebene Funktion brauchen (oder meinen zu brauchen), 
darauf zu bestehen Ihre Lösung zu implementieren. Statt dessen, sollten 
sich Ihre ersten Nachrichten eher auf das Problem konzentrieren, als auf 
eine bestimmte Lösung. Beschreiben Sie sehr ausführlich, die Erfahrungen 
die Ihre Kunden, bieten Sie die Ihnen bestmögliche Auswertung, sowie 
möglichst viele angemessene Lösungen, die Ihnen in den Sinn kommen. Wenn
Leute anfangen zu spekulieren, wie effektiv die verschiedenen Lösungen
sind, können Sie mit Bezug auf Ihre Daten weitermachen, um die Antworten
zu unterstützen oder zu entkräften. Sie werden vielleicht die ganze Zeit
über eine bestimmte Lösung im Kopf haben, heben Sie es am Anfang aber 
nicht hervor. Das ist keine Täuschung, sondern das übliche Verhalten,
eines ehrlichen Vermittlers. Schließlich ist ihr wahres Ziel die Lösung
des Problems; Eine Lösung ist lediglich Mittel zum Zweck. Wenn Ihre 
bevorzugte Lösung wirklich die Überlegene ist, werden andere Entwickler
das irgendwann auch erkennen&mdash;und sie von sich aus unterstützen,
und das ist viel besser, als die Implementierung durch Einschüchterung
zu erzwingen. (Es besteht natürlich auch die Möglichkeit, dass jemand 
eine bessere Lösung als ihre einfällt).</para>

<para>Das soll nicht heißen, dass Sie sich niemals zugunsten einer
Bestimmten Lösung äußern können. Sie müssen aber Geduld haben damit die
Analyse die Sie bereits intern gemacht haben, auf den öffentlichen
Verteilern wiederholt wird. Schreiben Sie nicht sowas wie "Ja, wir 
haben alles hier schon gehabt, aber das Funktioniert aus Gründen A, B
und C. Wenn man der Sache auf den Grund geht, dann ist die einzige
Weg es zu lösen ..." Das Problem ist nicht so sehr, dass es sich
arrogant anhört, als vielmehr, dass es den Eindruck erweckt, dass Sie
<emphasis>bereits</emphasis> eine unbestimmte Menge (aber, man wird
vermuten eine große) analytischer Ressourcen dem Problem, hinter
verschlossenen Türen, gewidmet haben. Es lässt die Sache so erscheinen,
als ob Anstrengungen unterwegs gewesen sind, und Entscheidungen 
vielleicht getroffen wurden, in welche die Öffentlichkeit nicht 
eingeweiht ist, und das, ist ein Rezept für Verbitterung.</para>

<para><emphasis>Sie</emphasis> wissen natürlich, wieviel Mühe Sie dem
Problem intern gewidmet haben, und dieses Wissen ist in gewisser 
Hinsicht ein Nachteil. Es stellt Ihre Entwickler in eine etwas 
unterschiedlichen mentalen Raum als alle anderen auf den Email
Verteilern, wodurch ihre Fähigkeit eingeschränkt wird, die Dinge aus 
der Sicht derjenigen die noch nicht über das Problem nachgedacht haben
zu sehen. Je früher Sie alle anderen dazu bringen können die Sachen
auf die selbe art zu betrachten wie Sie, desto geringer wird dieser
Abstand verursachende Effekt sein. Diese Logik lässt sich nicht nur
auf einzelne technische Situationen anwenden, sondern auf das breitere
Mandat Ihre Ziele so klar wie Sie können darzulegen. Das Unbekannte
ist immer destabilisierender als das Bekannte. Wenn Menschen verstehen,
warum Sie etwas wollen, werden sie sich dabei wohl fühlen mit Ihnen zu
reden, selbst wenn sie andere Meinung sind als Sie. Wenn sie nicht
herausbekommen was Sie bewegt, werden sie das Schlimmste annehmen,
zumindest für einen Teil der Zeit.</para>

<para>Sie werden natürlich nicht alles veröffentlichen können, und man
wird es nicht von Ihnen erwarten. Alle Organisationen haben
Geheimnisse; vielleicht haben Profit orientierte mehr davon, aber
gemeinnützige haben sie auch. Wenn Sie einen bestimmten Kurs verfechten
müssen, aber nichts über Ihre Gründe offenbaren können, dann bieten Sie
einfach die besten Argumente an, die Sie mit dieser Behinderung dafür
haben und finden Sie sich mit der Tatsache ab, dass Sie vielleicht
nicht den gewünschten Grad an Einfluss bei der Diskussion haben. Das
ist einer der Kompromisse die Sie eingehen, damit die
Entwicklergemeinschaft nicht auf Ihrer Gehaltsliste steht.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<title>Geld Kann Dir Keine Liebe Kaufen</title>

<para>Wenn Sie in einem Projekt ein bezahlter Entwickler sind, dann
legen Sie frühzeitig die Richtlinien fest, was das Geld kaufen kann,
und was nicht. Das bedeutet nicht, dass Sie es zwei mal am Tag an die
Email Verteiler schicken müssen und Ihre noble und unbestechliche
Natur ständig zu wiederholen. Es bedeutet lediglich, dass Sie auf der
Hut für Gelegenheiten sein sollten um Spannungen zu entschärfen, welche
durch Geld entstehen <emphasis>könnten</emphasis>. Sie müssen nicht
mit der Annahme loslegen, dass Spannungen da sind; Sie müssen 
allerdings Zeigen, dass es Ihnen bewusst ist, dass sie das Potential
haben aufzutauchen.</para>

<para>Ein perfektes Beispiel hierfür, ist in dem Subversion Projekt
aufgekommen. Subversion wurde im Jahr 2000 von <ulink
url="http://www.collab.net/">CollabNet</ulink> angefangen, welches seit
beginn der hauptsächliche Geldgeber des Projekts gewesen ist, indem es
die Gehälter mehrerer Entwickler zahlt (Haftungsausschluss: von dem ich
einer bin). Bald nach Anfang des Projekts, stellten wir einen weiteren
Entwickler ein, Mike Pilato, um dem Projekt beizutreten. Bis dahin, 
hatte die Programmierung bereits angefangen. Obwohl Subversion 
sicherlich noch in seiner Anfangsphase war, hatte es bereits eine
Entwicklergemeinschaft, mit einem Satz einfacher Grundregeln.</para>

<para>Die Ankunft von Mike warf eine interessante Frage auf. Subversion
hatte bereits eine Verfahren, nach dem ein neuer Entwickler commit 
Zugriff bekommt. Zuerst reicht er ein paar Patches auf dem Entwickler
Verteiler ein. Nachdem genügend Patches eingetroffen sind, damit die
anderen Committer sehen können, dass der neue Mitwirkende weiß was er
macht, schlägt jemand vor, dass er einfach direkt committed (dieser
Vorschlag ist privat, wie in <xref linkend="committers"/> beschrieben).
Angenommen die Committer stimmen überein, wird einer von ihnen dem
neuen Entwickler eine Mail schreiben und ihm direkten commit Zugriff
auf die Repository des Projekts anbieten.</para>

<para>CollabNet hatte Mike ausdrücklich eingestellt, um an Subversion
zu arbeiten. Von denen, die ihn kannten, gab es keine Zweifel über
seine Programmierfähigkeiten oder seine Bereitschaft an dem Projekt zu
arbeiten. Desweiteren, hatten die freiwilligen Entwickler eine sehr
gute Beziehung mit den Mitarbeitern von CollabNet, und hätte 
wahrscheinlich nichts dagegen gehabt, wenn wir Mike vom Tag seiner 
Einstellung an, einfach commit Zugriff gegeben hätten. Wir wussten 
aber, dass wir einen Präzedenzfall setzen würden. Wenn wir Mike mit
einem Gebot commit Zugriff gegeben hätten, würden wir sagen, dass
CollabNet das recht hat die Richtlinien des Projekts, einfach nur weil
es der Haupt Geldgeber war, zu ignorieren. Obwohl der Schaden hiervon
nicht unbedingt gleich ersichtlich wäre, würde es langsam dazu führen,
dass die nicht bezahlten Entwickler sich ihrer Rechte beraubt fühlen.
Andere müssen ihren Commit Zugriff verdienen&mdash;Collabnet kauft es
einfach.</para>

<para>Mike willigte also ein seine Arbeit bei CollabNet wie jeder 
andere freiwillige Entwickler anzufangen, ohne commit Zugriff. Er
schickte Patches an die öffentlichen Entwickler Verteiler, wo sie
von allen überprüft und beurteilt werden konnten, und wurden. Wir 
sagten auch auf dem Verteiler, dass wir die Sache explizit so 
handhaben, um Missverständnisse zu vermeiden. Nach ein paar Wochen
solider Aktivität durch Mike, schlug jemand (ich kann mich nicht mehr
daran erinnern ob es ein CollabNet Entwickler war oder nicht) vor ihm
commit Zugriff zu gewähren, und er wurde angenommen, wie wir es alle
schon vorausgeahnt hatten.</para>

<!--

Die relevanten Zeitangaben für Mike Pilato sind:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

gefolgt von:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Behebt Ungereimtheiten bei Pfaden auf Windows. Oder allgemeiner,
	benutzt den "style" Paramenter welche den Funktionen der Pfad 
	Bibliothek übergeben wird um das richtige Pfad Trennzeichen (zur
	Zeit '/' oder '\') zu wählen.  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->

<para>Durch diese Art von Kontinuität, erhält man eine 
Glaubwürdigkeit, die einem Geld nicht kaufen kann. Und Glaubwürdigkeit,
ist eine wertvolle Währung die für technische Diskussionen: Es macht
immun davor, seine Motive im nachhinein hinterfragt zu bekommen. In der
Hitze einer Debatte, werden Leute vielleicht anfangen nach nicht
technische Möglichkeiten suchen, eine Gefecht zu gewinnen. Der Haupt-
Geldgeber, gibt aufgrund seiner tiefen Beteiligung und offensichtlichen
Sorgen um die Richtung die das Projekt nimmt, eine breiteres Ziel ab
als die Meisten. Indem er gewissenhaft alle Richtlinien des Projekts
von Anfang an wahrnimmt, stellt der Finanzier sich auf die gleiche
Höhe wie alle anderen.</para>

<para>(Siehe auch das Blog von Danese Cooper bei
<ulink url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"/>
für eine ähnliche Geschichte um commit Zugriff. Cooper war damals die
"Open Source Diva" von Sun Microsystem's&mdash;Ich glaube das war ihre
offizieller Anrede&mdash;und wie die Entwicklergemeinschaft von Tomcat,
Sun dazu brachte, seine eigene Entwickler an die selben Richtlinien
für commit Zugriff zu halten, wie die Entwickler außerhalb von Sun.)
</para>

<para>Die Notwendigkeit, das Geldgeber nach den selben Regeln spielen,
wie alle anderen bedeutet, dass das Modell der gütigen Diktatur (siehe
<xref linkend="benevolent-dictator"/><phrase output="printed"> 
im Kapitel <xref linkend="social-infrastructure"/></phrase>) etwas 
schwieriger, bei der Anwesenheit von Geld durchzuführen ist, 
insbesondere, wenn der Diktator für den Geldgeber arbeitet. Da eine
Diktatur wenig Regeln hat, ist es schwierig für einen Geldgeber zu
beweisen, dass er die Normen der Gemeinschaft befolgt, selbst wenn er
das der Fall ist. Es ist sicherlich nicht unmöglich, es erfordert aber
einen Projektleiter, der in der Lage ist die Dinge sowohl aus der Sicht
der Entwickler von außen, sowie derer die für den Geldgeber arbeiten,
zu sehen, und sich entsprechen zu verhalten. Selbst dann, ist es
wahrscheinlich eine gute Idee einen Vorschlag für eine nicht
diktatorisches Modell bereit zu haben, welches man bei Anzeichen von
breiter Unzufriedenheit innerhalb der Gemeinschaft, hervorbringen kann.
</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<title>Auftragsarbeit</title>

<para>Auftragsarbeit muss in freien Software Projekten vorsichtig 
gehandhabt werden. Idealerweise, wollen Sie das die Arbeit des
Auftragnehmers von der Gemeinschaft angenommen wird und in die
veröffentlichte Version aufgenommen wird. Theoretisch würde es keinen
Unterschied machen, wer der Auftragnehmer ist, solange seine Arbeit
gut ist und die Richtlinien des Projekts einhält. Theorie und Praxis
kann manchmal auch zusammenpassen: Ein komplett Fremder der mit einem
guten Patch auftaucht, <emphasis>wird</emphasis> es im allgemeinen 
schaffen, es in die Software zu bekommen. Das Schwierige ist, dass es
sehr schwer ist, einen guten Patch für eine nicht triviale Erweiterung
oder Funktion zu produzieren, während man ein komplett Fremder ist; man
muss es zuerst mit dem übrigen Projekts diskutieren. Die Dauer dieser
Diskussion, kann man nicht genau voraussehen. Wenn der Auftragnehmer
nach Arbeitszeit bezahlt wird, werden Sie vielleicht mehr Bezahlen, als
Sie erwartet haben; wenn er Pauschal bezahlt wird, kann es passieren,
dass er länger arbeitet, als er es sich leisten kann.</para>

<para>Es gibt zwei Möglichkeiten das zu Umgehen. Die bevorzugte ist,
eine fundierte Vermutung über die Dauer der Diskussion zu machen,
welches auf vergangene Erfahrung beruht, und einen Puffer für Fehler,
auf dem der Vertrag basiert. Es hilft auch das Problem in so viele 
kleine Teile wie möglich zu spalten, um die Vorhersehbarkeit der
einzelnen Brocken zu erhöhen. Die andere ist den Auftrag auf den Patch
selber zu beschränken, und seine Aufnahme als eine separate 
Angelegenheit zu behandeln. Dann wird es viel einfacher den Vertrag zu
schreiben, aber ihnen hängt dann der Klotz am Bein, den Patch so lange
zu pflegen, wie Sie auf die Software angewiesen sind, oder zumindest
so lange bis Sie es schaffen eine gleichwertige Funktionalität in den
Hauptast zu bekommen. Natürlich kann der Vertrag, selbst bei nach der
bevorzugten Art, nicht darauf bestehen, dass der Patch im Code
aufgenommen wird, weil das den Verkauf von etwas bedeuten würden, was
nicht zum Verkauf steht. (Was passiert wenn der Rest des Projekts sich
entscheidet, die Funktion nicht zu unterstützen)? Der Vertrag kann
allerdings eine bestimmte angemessen und glaubhafte Anstrengung
beinhalten, die Änderung von der Gemeinschaft angenommen zu bekommen,
und dass es in die Repository commited wird, wenn es von der
Gemeinschaft angenommen wird. Wenn das Projekt Normen ausgelegt hat,
was Änderungen am Code betrifft, kann der Vertrag auf diese Verwiesen
und festlegen, dass die Arbeit, sich nach denen richten muss. In der
Praxis, funktioniert das meisten wie alle es sich erhoffen.</para>

<para>Die beste Taktik für erfolgreiche Auftragsarbeit ist es, einen
der Entwickler des Projekts als Auftragnehmer&mdash; vorzugsweise einer
der committed&mdash; anzustellen. Das mag sich nach dem erkaufen von
Einfluss anhören, und nun ja das ist es. Es ist aber nicht so korrupt,
wie es sich anhört. Der Einfluss den ein Entwickler innerhalb eines
Projekts hat, hängt vorrangig von der Qualität des Codes den er 
schreibt, und seinen Umgang mit den anderen Entwicklern ab. Die
Tatsache, dass er ein Vertrag hat, um bestimmte Sachen erledigt zu 
bekommen, hebt seinen Status in keiner weise und es senkt ihn auch 
nicht, auch wenn Leute ihn vielleicht etwas vorsichtiger hinterfragen
werden. Die meisten Entwickler würden ihre längerfristige Position in
einem Projekt nicht riskieren indem sie eine weitestgehend unbeliebte
Funktion unterstützen. Tatsächlich, sollte ein Teil von dem was Sie
bekommen, wenn Sie einen solchen Entwickler einstellen, Ratschläge
darüber sein, welche Art von Änderung wahrscheinlich von der 
Gemeinschaft angenommen werden. Sie erhalten auch eine gewisse
Umstellung der Prioritäten des Projekts. Da die Priorisierung lediglich
davon abhängt, wer Zeit hat um an etwas zu arbeiten, sorgen Sie, indem
Sie für die Zeit von jemandem bezahlen, dafür, dass ihre Arbeit, eine
etwas höhere Priorität bekommt. Das ist eine wohl verstandene Tatsache
des Lebens unter erfahrenen Open Source Entwicklern, und zumindest
manche werden der Arbeit eines Auftragnehmers Aufmerksamkeit widmen,
einfach nur weil es danach aussieht, als würde es <emphasis>fertig
werden</emphasis>, also wollen sie dabei helfen, dass es richtig
gemacht wird. Sie werden vielleicht selber nichts von dem Code 
schreiben, werden aber den Entwurf diskutieren und den Code überprüfen
und bewerten, was alles sehr nützlich sein kann. Aus all diesen 
Gründen, sollte der Auftragnehmer am ehesten aus den Reihen der 
bereits am Projekt beteiligten gezogen werden.</para>

<para>Dadurch stellen sich zwei Fragen: Sollten Verträge jemals privat
sein? Und wenn sie es nicht sind, sollten Sie sich darüber sorgen 
machen, Spannungen in der Gemeinschaft zu verursachen indem Sie mit
manchen der Entwickler Verträge geschlossen haben, und nicht mit 
andere?</para>

<para>Es ist am besten, wenn Sie im Bezug auf Verträge offen sind,
wenn Sie es können. Ansonsten, kann sich das Verhalten des 
Beauftragten anderen in der Gemeinschaft komisch vorkommen&mdash;
vielleicht geben Sie auf ein mal Funktion eine unerklärlich hohe
Priorität, für die sie in der Vergangenheit, nie Interesse gezeigt
haben. Wenn Leute danach fragen, warum er sie jetzt haben will, wie
soll er überzeugend antworten, wenn er nicht über die Tatsache reden
kann, dass er beauftragt wurde sie zu schreiben?</para>

<para>Gleichzeitig sollten weder Sie noch der Auftragnehmer, so tun
als ob andere ihre Vereinbarung als etwas besonderes behandeln sollten.
All zu oft, habe ich Auftragnehmer erlebt, die auf dem Email Verteiler
mit der Einstellung hereinplatzen, dass ihre Nachrichten ernster 
genommen werden sollten, einfach nur, weil sie bezahlt werden. Diese
Art von Einstellung hat zur Folge, dass der Auftragnehmer den Vertrag
an und für sich als das Wichtige erachtet&mdash; im Gegensatz zu dem aus
dem Vertrag <emphasis>resultierenden</emphasis> Code. Aus Sicht der
anderen Entwickler ist nur der Code das Wesentliche. Technische 
Probleme sollten immer im Mittelpunkt stehen, nicht die Details 
darüber, wer von wem bezahlt wird. Einer der Entwickler in der 
Subversion Gemeinschaft geht mit Auftragsarbeit auf eine besonders
elegante Art um. Während er seine Code Änderungen im IRC bespricht,
wird er nebenbei anmerken (oftmals in einer privaten Nachricht, also
<firstterm>privmsg</firstterm> im IRC, an einer der anderen 
Entwickler), dass er für seine Arbeit an diesem bestimmten Bug oder 
Funktion bezahlt wird. Er gibt aber durchweg den Eindruck, dass er an
dieser Änderung auch so arbeiten wollte, und dass er darüber glücklich
ist, dass das Geld es ihm ermöglicht. Er mag die Identität des Kunden
offen legen, oder auch nicht, in jedem Fall aber verweilt er nicht bei
dem Vertrag. Seine Anmerkungen darüber sind lediglich eine Zierde für
eine ansonsten technische Diskussion darüber, wie man etwas erledigt
bekommt.</para>

<para>Dieses Beispiel zeigt einen weiteren Grund warum es gut ist, über
Verträge offen zu sein. Es mag mehrere Organisationen geben, die bei
einem gegebenen Open Source Projekt Verträge beisteuern, und wenn jeder
weiß, was der andere versucht zu machen, können sie vielleicht ihre 
Ressourcen bündeln. Im obigen Fall, ist er größte Finanzier (CollabNet)
nicht in irgend einer weise mit dieser Stückarbeit beteiligt, aber mit
dem Wissen, dass jemand anderes bestimmte Bug Fixes fördert wird es
CollabNet ermöglicht, seine Ressourcen auf andere Bugs zu richten, was
zu einer größeren Effizienz für das Projekt im gesamten führt.</para>

<para>Werden andere Entwickler es übel nehmen, dass manche für die
Arbeit am Projekt bezahlt werden? Im allgemeinen, nein, insbesondere
wenn diejenigen die bezahlt werden sowieso anerkannte, geachtete 
Mitglieder der Gemeinschaft sind. Keiner erwartet, dass Auftragsarbeit
gleichmäßig auf die commiter aufgeteilt wird. Leute verstehen wie
wichtig dauerhafte Beziehungen sind: Die Ungewissheiten die mit 
Auftragsarbeit verbunden sind, sind derart, dass wenn man jemanden
gefunden hat, mit dem man zuverlässig arbeiten kann, man nur 
widerwillig zu einer anderen Person wechseln würde, nur der 
Gerechtigkeit halber. Stellen Sie sich das so vor: Wenn Sie das erste
mal jemand wählen wird es ganz klar keine Beschwerden geben, denn
schließlich mussten Sie ja <emphasis>irgendjemand</emphasis> wählen
&mdash; es ist nicht Ihre Schuld, dass Sie nicht alle beauftragen
können. Später, wenn Sie die selbe Person ein zweites mal beauftragen,
ist das einfach nur vernünftig: Sie kennen ihn schon, das letzte mal 
war erfolgreich, warum sollten Sie ein unnötiges Risiko eingehen? 
Deßhalb ist es völlig natürlich ein zwei Leute in der Gemeinschaft zu
haben an denen man sich wenden kann, anstatt die Arbeit gleichmäßig zu
verteilen.</para>

<sect2 id="community-review-acceptance">
<title>Beurteilung und Annahme von Änderungen</title>

<para>Die Gemeinschaft ist trotzdem wichtig für den Erfolg der 
Auftragsarbeit. Ihre Beteiligung beim Entwurfs und Bewertungsablauf,
darf nicht beiläufig geschehen. Es muss als ein Teil der Arbeit
aufgefasst werden, und komplett vom Auftragnehmer einbezogen werden.
Betrachten Sie die Prüfung durch die Gemeinschaft nicht als ein
Hindernis welches überwunden werden mus &mdash; sondern als eine
kostenlose Platform für Entwürfe, sowie Fragen und Antworten. Es ist
ein Vorteil, welches aggressiv nachgegangen werden sollten und nicht
lediglich geduldet werden sollte.</para>

<sect3 id="cvs-pserver">
<title>Fallbeispiel: Das CVS Protokoll zur Passwort Authentifizierung 
</title>

<para>1995 war ich eine Hälfte einer Partnerschaft, welche technische
Unterstützung und Erweiterung für CVS (das Concurrent Versions System;
siehe <ulink url="http://www.cvshome.org/"/>) anbot. Mein Partner Jim
und ich waren zu dem Zeitpunkt informell für die Instandhaltung von 
CVS zuständig. Wir hatten aber nie sorgfältig darüber nachgedacht, wie
wir mit der bereits vorhandenen, größtenteils freiwilligen 
Entwicklergemeinschaft von CVS umgehen sollten. Wir nahmen einfach an,
dass sie patches schicken würden, und wir sie anwenden würden, und so
hat es auch im großen und ganzen funktioniert.</para>

<para>Damals, konnte CVS im Netzwerk nur über Fernzugriff mittels eines
Programms wie <literal>rsh</literal> gemacht werden. Mit dem selben
Passwort für den CVS Zugriff, wie für den Fernzugriff was ein 
offensichtliches Sicherheitsrisiko war, und viele Organisationen waren
davon abgetan. Eine bedeutende Anlagebank beauftragte uns einen neuen
Authentifizierungsmechanismuss zu implementieren, damit sie vernetztes
CVS sicher mit ihren Außenstellen benutzen konnten.</para>

<para>Jim und ich nahmen den Vertrag an und setzten uns hin um das neue
Authentifizierungssystem zu entwerfen. Was wir uns ausdachten war
relativ einfach (die Vereinigten Staaten hatten zu der Zeit 
Einschränkungen auf den Export von Kryptographischem Code, also hatte
Kunde Verständnis dafür, dass wir keine Starke Authentifizierung
implementieren konnten), da wir aber nicht erfahren damit waren, solche
Protokolle zu entwerfen, machten wir dennoch einige grobe Fehler, die
einem Experten sofort aufgefallen wären. Diese Ausrutscher wären mit
Leichtigkeit erkannt worden, hätten wir uns die Zeit genommen einen
Vorschlag zu verfassen und es an die anderen Entwickler zur Überprüfung 
durchzureichen. Das machten wir aber nie, und es kam uns nicht in den
Sinn, den Entwickler Verteiler als eine Resource welches wir nutzen
konnten zu betrachten. Wir wussten dass Leute wahrscheinlich annehmen
würden, was immer wir auch committeten, und&mdash;da wir nicht wussten
was wir nicht wussten &mdash;machten wir uns nicht die Mühe, die Arbeit
auf eine sichtbare Art zu erledigen, also Patches häufig ab zu 
schicken, kleine, leicht verdauliche Commits zu einem bestimmten Branch
zu machen, usw. Das entstandenen Authentifizierungsprotokoll war nicht
sonderlich gut, und natürlich, als es etabliert wurde, wurde es sehr
schwer es zu verbessern, aufgrund von Bedenken bezüglich der
Kompatibilität.</para>

<para>Die Wurzel des Problems war nicht unser Mangel an Erfahrung; wir
hätten mit Leichtigkeit lernen können, was nötig war. Das Problem war
unsere Einstellung im Bezug auf die Entwicklergemeinschaft. Wir
betrachteten die Annahme der Änderungen als eine Hürde über die wir
springen mussten, als ein Ablauf mit dem die Qualität der Änderungen
verbessert werden konnte. Da wir zuversichtlich waren, dass alles was
wir tun würden angenommen werden würde (was auch geschah), machten
wir uns wenig mühe andere zu beteiligen.</para>

</sect3>

<para>Wenn Sie eine Auftragnehmer auswählen, wollen Sie für den Auftrag
offensichtlich jemandem mit den richtigen technischen Fähigkeiten und
Erfahrung. Es ist aber auch wichtig, jemanden zu wählen, der 
nachweislich mit den anderen Entwicklern in der Gemeinschaft eine
konstruktive Zusammenarbeit pflegt. So bekommen Sie mehr als nur eine
Person; Sie bekommen einen Agenten, der in der Lage sein wird aus einem
Netzwerk von Fachwissen zu schöpfen, um sicher zu stellen das die 
Arbeit auf eine robuste und Wartbare weise gemacht wird.</para>

</sect2>

<!-- 
<para><remark>Auftragnehmer als ein Weg um Dienstleistungen und 
Unterstützung zu erweitern. Geschäftszweige, die zutiefst an der
Entwicklung einer Open Source Anwendung beteiligt sind, und auch
Dienstleistungen für technischen Support und Anpassungen anbieten,
befinden sich in einer Zwickmühle was ihre Ressourcen angeht. Je mehr
ihr Geschäft wächst, desto größer wird die Spannung unter der sie
stehen, zwischen der weiteren Beteiligung an der Open Source Seite
während sie die selben Entwickler für Arbeit innerhalb des Betriebs
benutzen. Freiwillige Entwickler zu beauftragen, ist ein Weg aus
dieser Klemme, muss aber vorsichtig (und so offen wie möglich) 
verwaltet werden.</remark></para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<title>Finanzierung von Tätigkeiten außer Programmieren</title>

<para>Programmieren ist nur ein Teil der Arbeit welches in eine Open
Source Projekt fließt. Aus Sicht der Freiwilligen im Projekt, ist es
der sichtbarste und glorreichste Teil. Das bedeutet leider, dass 
andere Tätigkeiten wie die Dokumentation, formale Tests, usw.
manchmal vernachlässigt werden können, zumindest im Vergleich zu der
Menge an Aufmerksamkeit die sie bei proprietärer Software oftmals
erhalten. Unternehmen sind manchmal in der Lage das auszugleichen,
indem Sie einen Teil ihrer internen Software Entwicklungsinfrastruktur
Open Source Projekten widmen.</para>

<para>Der Schlüssel das erfolgreich zu machen, ist zwischen den 
internen Abläufen der Firma und denen in der Gemeinschaft zu 
übersetzen. Solche Übersetzungen sind nicht Mühelos: Oft passen beide
nicht nicht gut zusammen, und die Unterschiede können nur durch
menschliche Eingriffe überwunden werden. Die Firma kann zum Beispiel
einen anderen Bug Tracker verwenden, als das öffentliche Projekt. 
Selbst wenn sie beide die gleiche Software dafür benutzen, sind die
Daten die darin gespeichert werden sehr unterschiedlich, da die
Bedürfnisse einer Firma im Bezug auf Bug Tracking sehr viel anders 
sind, als die einer freien Software Gemeinschaft. Ein Teil der
Information welches in einem der Tracker anfängt, mag auf den
anderen übertragen werden müssen, wobei vertrauliche Teile entfernt
werden, oder in der anderen Richtung hinzugefügt werden müssen.</para>

<para>Die Abschnitte die folgen handeln darüber, wie man solche Brücken
aufbaut und in stand hält. Das Endergebnis sollte sein, dass das Open
Source Projekt glatter abläuft, die Gemeinschaft die Investition von
Ressourcen der Firma anerkennt, und trotzdem nicht das Gefühl bekommt,
dass die Firma unangemessen Sachen in Richtung ihrer Ziele lenkt.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-qa">
<title>Qualitätssicherung (d.h, Professionelles Testen)</title>

<para>Bei der Entwicklung proprietärer Software, ist es normal
gesonderte Abteilung zu haben, die sich der Qualitätssicherung widmen:
Bugs aufsuchen, Evaluierung der Performance und der Skalierbarkeit,
Überprüfung der Schnittstellen und der Dokumentation, usw. Als 
Faustregel, werden diese Aktivitäten von der Gemeinschaft freiwilliger
bei einem freien Software Projekt, nicht so energisch verfolgt. Das
liegt zum Teil daran, dass es schwer ist, freiwillige Arbeit für
unrühmliche Tätigkeiten wie das Testen zu bekommen, teilweise deßhalb
weil Leute annehmen, dass eine große Nutzergemeinschaft zu haben eine
gute Test Abdeckung mit sich bringt, und, im Falle der Performance und
der Skalierbarkeit, z.T. da freiwillige oftmals sowieso keinen Zugang
zu den nötigen Hardware Ressourcen haben.</para>

<para>Die Annahme, dass viele Nutzer zu haben, das gleich es wie viele
Tester zu haben, ist nicht ganz ohne Grundlage. Es hat sicherlich wenig
Sinn, Personen dem Testen von grundsätzlichen Funktionen in 
verbreiteten Umgebungen zuzuweisen: dortige Bugs werden schnell von
Nutzern gefunden werden, im natürlichen Verlauf der Sachen. Da Nutzer
aber lediglich versuchen Arbeit erledigt zu bekommen, setzen Sie sich
nicht bewusst auf die Suche nicht erdachte Grenzfälle in der 
Funktionalität der Software zu entdecken, und werden wahrscheinlich
bestimmte Arten von Bugs unentdeckt lassen. Desweiteren, wenn sie einen
Bug finden der sich leicht umgehen lässt, implementieren Sie im Stillen
diese Abhilfe ohne sich die Mühe zu machen den Bug zu melden. Am
heimtückischsten kann sein, dass das Benutzerverhalten Ihrer Kunden 
(diejenigen die <emphasis>Ihr</emphasis> Interesse an der Software 
Antreiben), sich statistisch sehr von dem Nutzungsverhalten eines
durchschnittlichen Nutzers auf der Strasse unterscheiden kann.</para>

<para>Ein professionelles Team von Testern kann solche Bugs aufdecken,
und können es genau so gut mit freier Software, wie mit proprietärer
Software. Die Herausforderung ist, die Ergebnisse der Tester, der 
Öffentlichkeit in einer nützlichen Form mitzuteilen. Die Abteilungen
fürs testen innerhalb eines Betriebs haben für gewöhnlich ihre eigene
Art Ergebnisse zu melden, mit firmenspezifischem Jargon, oder speziellem
Fachwissen über bestimmte Kunden und ihre Datensätze. Solche Berichte
wären für einen öffentlichen Bug Tracker nicht angemessen, sowohl
wegen ihrer Form als auch wegen Bedenken im Bezug auf Vertraulichkeit.
Selbst wenn die interne Bug Tracking Software Ihrer Firma die gleiche
wäre, die von dem öffentlichen Projekt verwendet wird, kann es sein,
dass die Verwaltung Firmenspezifische Kommentare und Änderungen an den
Metadaten der Vorfälle machen muss (zum Beispiel um die interne 
Priorität eines Vorfalls anzuheben, oder seine Lösung für einen 
bestimmten Kunden anzusetzen). Für gewöhnlich sind solche Anmerkungen
vertraulich&mdash;manchmal werden sie nicht einmal dem Kunden gezeigt.
Aber selbst wenn sie nicht vertraulich sind, sind sie von keinem
Interesse für das öffentliche Projekt, und die Öffentlichkeit sollte
deshalb nicht von ihnen abgelenkt werden.</para>

<para>Die Meldung des Bugs im Kern <emphasis>ist</emphasis> dennoch
wichtig für die Öffentlichkeit. Tatsächlich ist eine Bug Meldung von
Ihrer Test Abteilung in mancherlei Hinsicht wertvoller als eins welches
von den allgemeinen Nutzern, da die Test Abteilung nach Sachen Ausschau
hält, welches andere Nutzer nicht machen werden. Angesichts der 
Tatsache, dass Sie diese bestimmte Bug Meldung aus keiner anderen 
Quelle bekommen werden, zweifellos bewahren und es dem öffentlichen
Projekt zur Verfügung stellen.</para>

<para>Um das zu erreichen, kann entweder die Abteilung zur 
Qualitätssicherung die Meldungen direkt in den öffentlichen Bug
Tracker eintragen, wenn sie sich dabei wohl fühlen, oder ein
Vermittler (für gewöhnlich einer der Entwickler) kann die internen
Meldungen der Test Abteilung zu dem Öffentlichen Tracker "übersetzen".
Übersetzen bedeutet in diesem Zusammenhang den Bug so zu beschreiben,
dass es keine Bezüge auf Kundenspezifische Informationen hat (sofern
der Kunde dem Zustimmt, kann die Anleitung um den Fehler zu 
reproduzieren natürlich auch Kundendaten beinhalten).</para>

<para>Es ist leicht vorzuziehen, dass die Abteilung zur 
Qualitätssicherung die Meldungen direkt in den öffentlichen Tracker
einträgt. Das gibt der Öffentlichkeit eine direktere Wertschätzung der
Beteiligung Ihrer Firma an dem Projekt: Nützliche Bug Meldungen tragen
genau so zu der Glaubwürdigkeit Ihrer Organization wie jeder andere
technische Beitrag es tun würde. Es gibt Entwickler auch einen direkten
Draht um mit der Test Abteilung zu kommunizieren. Wenn die interne 
Abteilung zur Qualitätssicherung zum Beispiel den Bug Tracker 
beobachtet, kann ein Entwickler eine Änderung committen, welches einen
Bug im Bezug auf die Skalierbarkeit behebt (welches der Entwickler 
selber nicht überprüfen kann, da er nicht die nötigen Ressourcen hat),
und dann eine Anmerkung der Meldung beifügen, mit der Bitte and das
Qualitätssicherungsteam zu überprüfen, ob es die gewünschte Wirkung
hatte. Stellen Sie sich auf ein wenig Widerstand von einigen 
Entwicklern ein; Programmierer haben die Angewohnheit 
Qualitätssicherung allerhöchstens als ein notwendiges übel zu erachten.
Das Qualitätssicherungsteam kann das leicht überwinden, indem es 
wesentliche Fehler findet und nachvollziehbare Meldungen abgibt; wenn
ihre Meldungen andererseits nicht mindestens so gut sind, wie denen
aus der gewöhnlichen Gemeinschaft, dann hat es keinen Sinn, dass sie
direkt mit dem Entwicklungsteam zusammenwirken.</para>

<para>So oder so, sollte sobald es die Öffentliche Meldung gibt, die
interne Meldung was technische Inhalte angeht, nur noch auf die 
öffentliche Verweisen. Die Verwaltung und bezahlte Entwickler können
weiterhin, was interne firmen spezifische Angelegenheiten angeht bei
bedarf Anmerkungen beifügen, sollten aber die öffentliche Meldung
für Informationen nutzen, welche allen zur Verfügung stehen sollten.
</para>

<para>Sie sollten sich bei diesem Verfahren auf einen erhöhten Aufwand
einstellen. Zwei Meldungen für einen Bug in stand zu halten, bedeutet
natürlich mehr Arbeit als eine. Der Vorteil ist, dass viel mehr
Programmierer die Meldung sehen werden und ihrer Lösung beitragen 
können.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-legal">
<title>Rechtsberatung und Schutz</title>

<para>Gesellschaften, ob profitorientiert oder nicht, sind fast die 
einzigen die jemals in freien Software Projekten komplexe rechtliche
Angelegenheiten Aufmerksamkeit widmen. Einzelne Entwickler verstehen
oft die Nuancen verschiedener Open Source Lizenzen, haben aber im
allgemeinen nicht die Zeit oder Ressourcen um Urheber-, Marken- und
Patentrecht im Detail zu verfolgen. Wenn Ihre Firma eine 
Rechtsabteilung hat, kann sie einem Projekt helfen, indem sie den
Urheberrechtlichen Stand des Quellcodes überprüft und den Entwicklern
hilft, mögliche Patent und Markenrechtliche Angelegenheiten zu 
verstehen. Die genauen Ausprägungen die diese Hilfe annehmen kann 
werden in <xref linkend="legal"/> diskutiert. Die Hauptsache ist
sicherzustellen, dass wenn zwischen der Rechtsabteilung und der
Entwicklergemeinschaft eine Kommunikation stattfindet, falls überhaupt,
sie mit gegenseitiger Anerkennung für die äußerst unterschiedlichen 
Welten aus dem die beiden Parteien kommen abläuft. Gelegentlich können
diese beiden Gruppen an einander vorbei reden, wenn die verschiedenen
Gruppen von fachspezifischen Wissen, welches die anderen nicht haben, 
ausgehen. Eine gute Strategie ist es, einen Verbindungsmann zu haben
(meistens ein Entwickler, ansonsten einen Anwalt mit technische
Fachkenntnisse) welcher zwischen beide so lange steht und übersetzt wie
nötig.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-documentation-usability">
<title>Dokumentation und Benutzerfreundlichkeit</title>

<para>Die Dokumentation und Benutzerfreundlichkeit sind beides wohl
bekannte Schwachstellen in Open Source Projekten, obwohl ich denke,
dass der Unterschied zu proprietärer Software im Falle der 
Dokumentation, sehr oft hochgespielt wird. Trotzdem ist es empirisch
wahr, dass es viel Open Source Software an einer erstklassigen
Dokumentation und einer Untersuchung ihrer Benutzerfreundlichkeit 
mangelt.</para>

<para>Wenn Ihre Gesellschaft helfen will, diese Lücken für ein Projekt
zu füllen, ist wahrscheinlich das beste was Sie machen können, Leute
einzustellen, die <emphasis>nicht</emphasis> regelmäßige Entwickler im
Projekt sind, aber in der Lage sein werden mit den Entwicklern 
produktiv zusammen zu arbeiten. Regelmäßige Entwickler nicht 
einzustellen ist aus zwei Gründen gut: Erstens, entziehen Sie dem 
Projekt dadurch keine Entwicklerzeit; zweitens, diejenigen die am 
nächsten zu der Software sind, sind im allgemeinen sowieso die Falschen
um Dokumentation zu schreiben oder um die Nutzerfreundlichkeit zu
untersuchen, da sie Schwierigkeiten haben die Software aus der Sicht
eines Außenstehenden zu sehen.</para>

<para>Es wird allerdings immer noch nötig sein, dass wer auch immer an
den Problemen arbeitet, mit den Entwicklern kommuniziert. Finden Sie
Leute, die genügend technische Kenntnisse haben, um mit den Entwicklern
zu kommunizieren, aber nicht so weit experten mit der Software sind, 
dass sie kein Einfühlungsvermögen für gewöhnliche Benutzer haben.</para>

<para>Ein Benutzer auf einer mittleren Stufe ist wahrscheinlich die
richtige Person um ein gutes Buch zu schreiben. Tatsächlich, bekam ich
nachdem ich die erste Version dieses Buches veröffentlicht hatte, eine
Email von einem Open Source Entwickler namens Dirk Reiners:</para>

<screen>
Eine Bemerkung im Bezug auf Geld::Dokumentation und 
Benutzerfreundlichkeit: Als wir etwas Geld übrig hatten und uns 
entschieden, dass eine Einleitung für Anfänger das wichtigste war was
wir brauchten, stellten wir einen mittelmäßig erfahrenen Benutzer ein,
um es zu schreiben. Seine Einweihung in das System war nicht so lange
her, sodass er sich an die Probleme erinnern konnte, er hatte es aber
geschafft an sie vorbei zu kommen und wusste wie er sie beschreiben
konnte. Das ermöglichte es ihm etwas zu schreiben, dass nur kleinerer
Korrekturen durch die Hauptentwickler benötigte was Sachen anging, die
er nicht richtig aufgefasst hatte, aber dennoch die 'offensichtlichen'
Sachen abdeckte, welche die Entwickler übersehen hätten.

Sein Fall war noch besser, da es seine Aufgabe gewesen war einen Haufen
anderer Personen (Studenten) in das System einzuführen, also 
kombinierte er die Erfahrung vieler Personen, was etwas ist, dass 
einfach nur ein glücklicher Zufall war und wahrscheinlich schwer in den
meisten Fällen zu erreichen ist.</screen>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-hosting">
<title>Bereitstellung von Hosting/Bandbreite</title>

<para>Bei einem Projekt welches nicht einer der freien gebündelten
Hosting Seiten benutzt (siehe <xref linkend="canned-hosting"/>
<phrase output="printed"> im Kapitel <xref 
linkend="technical-infrastructure"/></phrase>), kann die Bereitstellung
von Server und Netzwerkverbindung&mdash;und am wichtigsten Hilfe bei 
der System Administration&mdash;eine wesentlichem Unterstützung sein.
Selbst wenn das alles ist was Ihre Gesellschaft für das Projekt macht,
kann es eine halbwegs effektive Art sein Karma in der Öffentlichkeit zu
sammeln, auch wenn es Ihnen keinen Einfluss auf die Richtung des 
Projekts bringen wird.</para>

<para>Sie könne wahrscheinlich einen Banner oder eine Anerkennung auf
der Projekt Seite erwarten, welches Ihre Firma für das Hosting bedankt.
Wenn Sie das Hosting so einrichten, dass die Webseite des Projekts bei
Ihrer Domain ist, werden Sie alleine schon durch die URL eine etwas
größere Assoziierung bekommen. Das wird die meisten Benutzer dazu
bringen, zu denken, dass das Projekt <emphasis>irgendetwas</emphasis>
mit Ihrer Firma zu tun hat, selbst wenn Sie gar nicht zu der Entwicklung
beitragen. Das Problem ist, dass die Entwickler sich dieser Assoziation
auch bewusst sind, und werden sich nicht sonderlich wohl dabei fühlen,
das Projekt unter Ihrer Domain zu haben wenn Sie nicht mehr Ressourcen
als lediglich Bandbreite zu dem Projekt beitragen. Schließlich gibt es
heutzutage viele Orte für Hosting. Die Gemeinschaft mag irgendwann
der Meinung sein, dass die angedeutete falsche Anerkennung nicht dem
Komfort vom Hosting wert ist und das Projekt anderswo unterbringen.
Wenn Sie also Hosting anbieten wollen, machen Sie es&mdash;planen Sie
aber entweder sich eingehender zu beteiligen oder seien sie umsichtig
darüber wieviel Beteiligung sie sich Zusprechen.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<title>Marketing</title>

<para>Auch wenn die meisten Open Source Entwickler es nur ungern 
zugeben würden, funktioniert Marketing. Eine gute Marketing Kampagne
<emphasis>kann</emphasis> Aufmerksamkeit um ein Open Source Projekt
entstehen lassen, selbst zu dem Grad, dass starrköpfige Entwickler
unklare positive Gedanken über die Software haben, aus Gründen, die sie
sich nicht ganz erklären können. Es ist nicht an mir die Dynamik des
Wettrüstens beim Marketing um Allgemeinen zu untersuchen. Jede 
Gesellschaft die mit freier Software zu tun hat, wird irgendwann sich
dabei vorfinden zu bedenken, wie sie sich, die Software, oder ihre
Beziehung zu der Software vermarkten sollen. Die folgenden Ratschläge
handeln darüber, wie Sie bei solch einer Bemühung häufige Stolpersteine
vermeiden können; siehe auch <xref 
linkend="publicity"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase>.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<title>Denken Sie daran, dass Sie beobachtet werden</title>

<para>Um die Entwicklergemeinschaft auf Ihre Seite zu behalten, ist es
<emphasis>sehr</emphasis> wichtig nichts zu sagen, was nicht nachweislich
wahr ist. Überprüfen Sie vorsichtig alle Behauptungen, bevor Sie sie in
den Raum stellen, und geben Sie der Öffentlichkeit einen Weg Ihre
Behauptungen zu überprüfen. Unabhängige Überprüfung von Tatsachen ist
ein bedeutender Teil von Open Source, und es gilt für mehr als nur den
Code.</para>

<para>Natürlich würde eh keiner Firmen anweisen nicht überprüfbare
Behauptungen aufzustellen. Bei Open Source Aktivitäten gibt es für
gewöhnlich eine hohe Anzahl an Personen mit dem nötigen Wissen um
Behauptungen zu verifizieren&mdash;Personen die wahrscheinlich auch
einen Breitbandigen Internet Zugang haben und die richtigen sozialen
Kontakte um Ihre Ergebnisse auf eine schädliche Art zu verbreiten,
wenn Sie es wollen. Wenn Global Megacorp Chemical Industries einen
Fluss verunreinigt, kann das nachgewiesen werden, aber nur von
Ausgebildeten Wissenschaftlern, die wiederum von den Wissenschaftlern
von Global Megacorp angefochten werden können, wodurch die 
Öffentlichkeit verwirrt wird und sich nicht sicher ist was sie denken
sollen. Im Gegensatz dazu, ist Ihre Verhalten in der Open Source Welt
nicht nur sichtbar und aufgezeichnet; es ist auch ein leichtes für
viele Leute es unabhängig von einander zu überprüfen, ihre eigene
Schlussfolgerungen zu ziehen und diese mittels Mundpropaganda zu
verbreiten. Diese Kommunikationsnetzwerke sind bereits gelegt; sie sind
das Wesentliche wodurch Open Source funktioniert, und sie können 
benutzt werden, um jede Information zu übertragen. Widerlegung ist
für gewöhnlich schwer, wenn nicht sogar unmöglich, insbesondere wenn
das was die Leute sagen war ist.</para>

<para>Es ist zum Beispiel in Ordnung von Ihrer Organization zu sagen,
dass Sie "Projekt X gegründet" hat wenn das tatsächlich der Fall ist.
Bezeichnen Sie sich aber nicht als die "Hersteller von X" wenn der
meiste Code von fremden geschrieben wurde. Umgekehrt, sollten Sie nicht
behaupten, dass Sie eine zutiefst beteiligte Gemeinschaft freiwilliger
Entwickler haben, wenn jeder in Ihre Repository hineinschauen und sehen
kann, dass es wenige oder gar keine Änderungen gibt, die von außerhalb
Ihrer Gesellschaft kommen.</para>

<para>Vor nicht all zu lange, sah ich eine Meldung von einer sehr
bekannten Computer Firma, welche behaupteten, dass Sie ein wichtiges
Software Packet unter einer Open Source Lizenz veröffentlichten. Als
die ursprüngliche Ankündigung herausgegeben wurde, sah ich mir ihren
nunmehr öffentliches Repository an und sah, dass es nur drei Revisionen
beinhaltete. Mit anderen Worten, hatte sie den Ersten Import des
Quellcodes gemacht, seit dem war aber fast nichts geschehen. Das 
alleine für sich war nicht beunruhigend&mdash;schließlich hatten sie
eben erst die Ankündigung gemacht. Es gab keinen Grund gleich vorne
weg eine Menge Aktivität zu erwarten.</para>

<para>Etwas später, machten Sie eine weitere Meldung. Hier ist es, was
sie sagten, wobei der Name und die Versionsnummer durch Pseudonyme 
ausgetauscht wurden:</para>

  <blockquote>
    <para><emphasis>Wir freuen uns bekannt zu geben, dass nach 
	rigorosen Tests durch die Singer Gemeinschaft, Singer&nbsp;5 für
	Linux und Windows für den Einsatz in produktiv Umgebungen bereit
	ist.</emphasis></para>
  </blockquote>

<para>Neugierig was die Community bei ihren "rigorosen Tests" aufgedeckt
hatte, ging ich danach zurück zu der Repository um seine Historie
kürzlicher Änderung an zu sehen. Das Projekt war immer noch bei der
Revision 3. Scheinbar hatten sie <emphasis>keinen einzigen</emphasis>
Bug gefunden der es vor dem Release wert gewesen wäre behoben zu werden!
In der Annahme, dass die Ergebnisse der Tests durch die Gemeinschaft
anderswo aufgezeichnet worden sein müssen, untersuchte ich als nächstes
den Bug Tracker. Es gab genau sechs offene Meldungen, von denen vier
seit mehreren Monaten bereits offen gewesen waren.</para>

<para>Das ist so natürlich kaum glaubwürdig. Wenn Tester auf einem
großen und komplexen Stück Software für irgend eine beliebige 
Zeitspanne einhämmern, werden sie Fehler finde. Selbst wenn die
Fixes für diese Bugs es nicht in die nächste Version schaffen, sollte
man annehmen, dass durch das Testen irgend welche Aktivität auf dem 
Versionsverwaltungssystem resultieren würde oder zumindest ein paar
neue Bug Meldungen. Allem Anschein nach war jedoch nichts seit der
Ankündigung der Open Source Lizenzierung und der ersten Open Source
Version passiert.</para>

<para>Die Sache ist nicht, dass die Firma über die Tests durch die
Gemeinschaft gelogen hatte. Ich habe keine Ahnung ob das der Fall war
oder nicht. Sie waren aber völlig nachlässig darüber, wie sehr es
danach <emphasis>aussah</emphasis> als ob sie am lügen waren. Da weder
das Versionsverwaltungssystem noch der Bug Tracker irgend eine 
Andeutung über die angeblichen rigorosen Tests gab, hätte die Firma
entweder von vorn herein, die Behauptung nicht machen sollen, oder
einen klaren Verweis auf irgend ein greifbares Ergebnis dieser Tests
("Wir haben 278 Bugs gefunden; klicken Sie hier für weitere Details").
Letzteres hätte jeden die Möglichkeit gegeben, sich sehr schnell ein 
Bild über die Aktivität der Gemeinschaft zu machen. So wie es war,
braucht ich nur ein paar Minuten um heraus zu finden, dass was auch
immer diese Gemeinschaft am testen war, es hatte keine Spuren an den
üblichen Stellen zurück gelassen. Das ist keine große Mühe, und ich
bin mir sicher, dass ich nicht der einzige war der sich diese gemacht
hat.</para>

<para>Transparenz und Überprüfbarkeit sind natürlich auch ein wichtiger
Teil der rechten Würdigung. Siehe <xref linkend="credit"/>
<phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> für weiteres 
hierüber.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<title>Machen Sie Konkurierende Open Source Produkte Nicht Schlecht</title>

<para>Unterlassen Sie es, negative Meinungen über Konkurierende Open
Source Software kund zu tun. Es ist völlig in Ordnung negative
<emphasis>Tatsachen</emphasis>&mdash;also leicht überprüfbare 
Behauptungen von der Art, wie man sie oft in Vergleichstabellen
Sieht. Negative Beschreibungen, von weniger rigoroser Natur sollte
man aus zwei Gründen lieber vermeiden. Erstens machen Sie sich damit
schuldig Flame Wars anzufangen, welche von produktiven Diskussionen
ablenken. Zweitens und noch wichtiger, kann es sich herausstellen, dass
einiger der freiwilligen Entwickler in <emphasis>Ihrem</emphasis> 
Project, auch an dem konkurrierenden Projekt arbeiten. Das ist
wahrscheinlicher als es zunächst den Anschein haben mag: Die Projekte
sind bereits in dem selben Gebiet (deßhalb stehen sie zu einander in
Konkurrenz), und es kann passieren, dass Entwickler die Fachwissen auf
diesem Gebiet haben überall dort Beiträge leisten wo es anwendbar ist.
Selbst wenn es keine direkte Überlappung bei den Entwicklern gibt, ist
es wahrscheinlich, dass Entwickler in Ihrem Projekt zumindest mit denen
aus verwandter Projekten vertraut sind. Ihre Möglichkeiten konstruktive
persönliche Bekanntschaften zu bewahren könnten durch übermäßig 
negative Marketing Botschaften eingeschränkt werden.</para>

<para>Auf konkurrierende proprietäre Produkte herum zu hacken scheint
eher in der Open Source Welt akzeptiert zu sein, insbesondere wenn 
diese Produkte von Microsoft stammen. Ich persönlich verabscheue diese
Neigung (obwohl es in diesem Fall auch nichts an Vergleiche die auf 
Tatsachen beruhende, auszusetzen gibt), nicht nur weil es unhöflich
ist, sondern weil es gefährlich für ein Projekt ist, anzufangen ihren
eigenen Hype zu glauben und dadurch zu ignorieren, in wie fern die
Konkurrenz vielleicht tatsächlich überlegen sein mag. Im allgemeinen
sollten Sie darauf aufpassen, welche Auswirkungen Marketing Botschaften
auf Ihre eigene Entwicklergemeinschaft haben mag. Manche mögen derart
aufgeregt darüber sein durch Marketing Geld Rückenwind zu bekommen, 
dass sie ihre Objektivität über die wahren Stärken und Schwächen ihrer
Software verlieren. Es ist normal, und sogar zu erwarten, dass die
Entwickler einer Firma zu einem gewissen Grad Unberührtheit von den
Marketing Behauptungen ausdrücken, selbst in den öffentlichen Foren.
Sie sollten ganz klar diesen Marketing Botschaften nicht direkt
widersprechen (es sei denn sie sind tatsächlich falsch, obwohl man
hoffen mag, dass sowas vorher abgefangen werden sollte). Von Zeit zu
Zeit kann es aber passieren, dass sie sich darüber lustig machen, um
die restliche Entwicklergemeinschaft wieder auf den Teppich zu bringen.
</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
