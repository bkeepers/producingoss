<chapter id="introduction">

<title>Einleitung</title>

<simplesect>

<para>Die meisten freie Software-Projekte schlagen fehl.</para>

<para>Für gewöhnlich hören wir nicht sonderlich viel von 
fehlgeschlagenen Projekten. Nur erfolgreiche Projekte sammeln 
Aufmerksamkeit, und es gibt insgesamt so viele Open Source Projekte 
<footnote><para>Die beliebte Hosting Seite SourceForge.net, 
verzeichnete Mitte April 2004 79,225 Projekte. Natürlich ist das nicht 
einmal annähernd die Gesamtzahl der freien Software Projekte im 
Internet, sondern lediglich die Teilmenge die Sourceforge als Plattform 
gewählt haben.</para></footnote>, dass obwohl nur ein Bruchteil
Erfolg hat, immer noch eine Menge Projekte sichtbar sind. Von den 
Fehlschlägen hören wir auch deshalb nicht, weil Versagen kein Ereignis
ist. Es gibt keinen einzelnen Zeitpunkt an dem ein Projekt aufhört
realisierbar zu sein; Teilnehmer gleiten irgendwie langsam davon und 
hören auf daran zu arbeiten. Es gibt vielleicht einen Moment an dem die
letzte Änderung gemacht wird, aber diejenigen die sie durchführen, 
wissen für gewöhnlich nicht, dass es die Letzte war. Es gibt nicht
einmal eine klare Definition wann ein Projekt abgelaufen ist. Ist es 
wenn an einem Projekt seit sechs Monaten nicht Aktive gearbeitet wurde?
Sobald seine Nutzer Gemeinde aufhört zu wachsen, ohne die Entwickler
Gemeinde übertroffen zu haben? Was ist wenn die Entwickler ihr Projekt
verlassen, wenn sie merken, dass ein anderes Projekt die gleichen
Ziele hat und Sie unnötig einen Doppelten Aufwand betreiben, und wenn
sie sich diesem anderen Projekt anschließen und ihre früheren 
Anstrengungen mit einzubeziehen? Wurde das Projekt beendet, oder ist 
es nur umgezogen?</para>

<para>Auf Grund solcher Komplexitäten, ist es unmöglich ein genaue 
Ziffer zur Ausfallquote zu geben. Einzelberichte aus über ein 
Jahrzehnt freier Software, kurzes Stöbern auf SourceForge.net und ein 
wenig Googeln, deutet jedoch alle auf den gleichen Schluss: die Rate
ist extrem hoch, wahrscheinlich in der Größenordnung von 90%&ndash;95%. 
Die Zahl wird größer wenn man überlebende aber nicht vernünftig 
laufende Projekte mit einbezieht: solche die zwar laufenden Code
produzieren, aber weder ein angenehmer Aufenthaltsort sind, noch so
schnell oder zuverlässig Fortschritte machen, wie sie es könnten.</para>

<para>In diesem Buch geht es darum Versagen zu vermeiden. Es untersucht
nicht nur wie man Sachen richtig macht, sondern wie man sie falsch 
macht, damit Sie frühzeitig Probleme erkennen und korrigieren können.
Ich hoffe, dass nachdem Sie es gelesen haben, Sie ein Repertoire an 
Techniken haben werden, nicht nur um häufige Stolpersteine zu vermeiden,
sondern auch um mit dem Wachstum und der Pflege eines Projekts 
erfolgreich umzugehen. Erfolg ist kein Nullsummenspiel, und in diesem
Buch geht es nicht ums Gewinnen oder der Konkurrenz voraus zu sein. 
Tatsächlich ist ein wichtiger Teil beim betreib eines Open Source 
Projekts, die reibungslose Zusammenarbeit mit anderen verwandten
Projekten. Auf lange Sicht betrachtet, trägt jedes erfolgreiche Open
Source Projekt zu dem Wohl der gesamten Welt der freien Software bei.
</para>

</simplesect>

<simplesect>

<para>Es wäre verlockend zu sagen, dass Freie Software Projekte aus den
selben Gründen fehlschlagen, wie proprietäre Software Projekte. Freie 
Software hat sicherlich kein Monopol auf unrealistische Anforderungen,
vage Spezifikationen, unzureichende Ressourcenverwaltung, zu kurze 
Entwurfsphasen, oder irgend eines der anderen Kobolde die der Software
Industrie bereits wohl bekannt sind. Es gibt einen gewaltigen menge 
Schriftstücke zu diesem Thema und ich werde sie in diesem Buch nicht
versuchen zu duplizieren. Statt dessen werde ich versuchen die Probleme
die spezifisch zu freier Software sind zu beschreiben. Wenn ein Freies
Software Projekt in den Boden gefahren wird dann ist es oft weil die 
Entwickler (oder die Projektleiter) nicht die einzigartige Probleme von
Open-Source-Software zu würdigen wussten, auch wenn sie durchaus auf die 
bekannteren Probleme der Closed-Source Entwicklung vorbereitet waren.
</para>

<para>Einer der häufigsten Fehler sind unrealistische Erwartungen über
die Vorteile von offenem Quellcode. Eine offene Lizenz garantiert weder,
dass eine Horde aktiver Entwickler urplötzlich anfangen werden von sich
aus Zeit in Ihr Projekt zu investieren, noch wird die Offenlegung die 
Krankheiten des Projekts automatisch heilen. Tatsächlich kann es sogar 
genau das Gegenteil bewirken: Es kann eine ganze Reihe neuer 
Komplexität hinzufügen, und kann auf kurze Sicht 
<emphasis>mehr</emphasis> kosten als es einfach im Betrieb zu behalten.
Das Projekt zu öffnen, bedeutet, den Quellcode so um zu strukturieren,
dass er für völlig Fremde verständlich ist, eine Seite für Entwickler 
und ein E-Mail Verteiler einzurichten und oft auch zum erstem mal eine
Dokumentation zu schreiben. All das, ist eine Menge Arbeit. Und 
<emphasis>falls</emphasis> interessierte Entwickler auftauchen, gibt es
die zusätzliche Bürde ihrer Fragen, eine Weile lang, beantworten zu 
müssen, bevor man aus ihrer Anwesenheit einen Nutzen zieht. Entwickler
Jamie Zawinski hatte folgendes über die Anfangstage des Mozilla 
Projekts zu sagen:</para>

    <blockquote>
      <para><emphasis>Open Source funktioniert schon, aber es ist 
	sicherlich kein Allheilmittel. Falls es ein warnende Lehre hier
	gibt, dann die, dass man nicht ein sterbendes Projekt nehmen
	kann, es mit dem magischen Elfenstaub des "Open Source" 
	bestreuen kann und erwarten, dass alles auf ein mal magisch 
	funktioniert. Die Probleme sind nicht so einfach.
      </emphasis></para>

      <para>(aus <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>Ein verwandter Fehler ist an Aufmachung und Präsentation zu 
sparen, in der Annahme, dass diese Sachen auch später, sobald das 
Projekt erst einmal unterwegs ist, erledigt werden können. Aufmachung
und Präsentation umfasst eine weite Reihe von Aufgaben, die sich 
alle um das Thema drehen, die Einstiegshürden niedriger zu legen. Das
Projekt für nicht Eingeweihte einladend zu machen bedeutet, Anleitungen
für Nutzer und Entwickler zu schreiben, eine Webseite aufzubauen welche 
für Neuankömmlinge informativ ist, möglichst viele der Kompilierungs-
und Installationsvorgänge der Software zu automatisieren, usw. Viele
Entwickler behandeln diese Aufgaben leider so als wären sie nur von
sekundärer Wichtigkeit im Verhältnis zum Quellcode selbst. Es gibt 
hierfür ein paar Gründe. Erstens, kann es einem wie Fleißarbeit 
vorkommen, denn die Vorteile sind zumeist nur für diejenigen sichtbar,
die noch am wenigsten mit dem Projekt zu tun haben und umgekehrt. 
Schließlich brauchen solche die bereits mit dem Projekt vertraut sind 
nicht unbedingt diese ganze Aufmachung. Sie wissen bereits wie man die
Software installiert, administriert und benutzt, schließlich haben sie 
es ja auch geschrieben. Zweitens, sind die Fähigkeiten die Aufmachung
und Präsentation vernünftig zu machen andere, als solche die man 
benötigt um Quellcode zu schreiben. Menschen neigen dazu sich auf das
was sie gut können zu konzentrieren, selbst wenn es für das Projekt 
besser wäre ein wenig Zeit in etwas zu investieren, was ihnen weniger
liegt. <xref linkend="getting-started"/> behandelt Aufmachung und 
Präsentation im Detail, und erklärt warum es entscheidend ist, dass 
sie gleich von Anfang des Projekts an eine Priorität sein sollte.</para>

<para>Der nächste Trugschluss ist das bei freier Software wenig bis
gar kein Projektmanagement benötigt wird, bzw umgekehrt, dass die
selben Management Verfahren die für die Entwicklung im Betrieb
benutzt werden, sich genau so gut auf eine Open Source Projekt anwenden
lassen sind. Die Verwaltung ist in einem Open Source Projekt, nicht 
immer besonders offensichtlich, aber bei erfolgreichen Projekten
passiert sie, in irgend einer Form, im Hintergrund. Ein kleines 
Gedankenexperiment reicht um die Gründe dafür zu zeigen. Ein Open 
Source Projekt besteht aus einem zufällig zusammengewürfeltem Haufen von
Programmierern&mdash;die an und für sich schon ein notorisch
eigensinnige Truppe sind&mdash;von denen wahrscheinlich keiner einem
andere je begegnet ist, und von denen jeder u.U. verschieden eigene
persönliche Ziele verfolgt, bei seiner Arbeit am Projekt. Das 
Gedankenexperiment ist einfach, stellen Sie sich vor, was mit einer
solchen Gruppe passieren würde, <emphasis>ohne</emphasis> eine
Verwaltung. Wenn kein Wunder geschiedt, würden sie sehr schnell
außeinander gehen. Auch wenn wir es uns anders wünschen, läuft das
ganze nicht einfach von selbst. Die Verwaltung ist aber, wenn auch
ziemlich aktiv, meistens informell, subtil und unauffällig. Das einzige
was die Entwickler zusammenhält ist, dass sie mehr zusammen erreichen
können, als jeder für sich. Deshalb muss die Aufgabe einer Verwaltung
hauptsächlich darin bestehen, sie weiterhin daran glauben zu lassen,
indem sie Standards für Kommunikation festlegt, dafür sorgt, dass 
brauchbare Entwickler nicht auf Grund persönlicher Eigenheiten an den
Rand gedrängt werden, und allgemein dafür sorgt, dass das Projekt ein
Ort ist an dem Entwickler zurückkehren wollen. Bestimmte Methoden das
zu erreichen, werden im übrigen Verlauf des Buchs behandelt.</para>

<para>Zuletzt, gibt es noch die generelle Problemgruppe die man
"Versagen der kulturellen Navigation" nennen könnte. Vor zehn Jahren,
gar vor fünf, wäre es vorschnell gewesen, von einer globalen Kultur
der freien Software zu reden, heute jedoch nicht. Eine erkennbare
Kultur ist langsam aufgetaucht, und obwohl sie sicherlich nicht
monolitisch ist&mdash;sie ist mindestens so anfällig für interne 
Meinungsverschiedenheiten und Parteigeist wie irgend eine geographisch
gebundene Kultur&mdash;hat sie doch einen im Grunde genommen 
beständigen Kern. Die meisten erfolgreichen Open Source Projekte,
weisen alle oder zumindest einen großen Teil der Merkmale von diesem
Kern auf. Sie belohnen bestimmte Verhaltensmuster und bestrafen andere;
sie schaffen eine Atmosphäre, welche ungeplante Beteiligung anregt,
manchmal zu kosten zentraler Koordination; sie haben Konzepte von 
Unhöflichkeit und gutes Benehmen, die von den anderswo vorherrschenden
erheblich abweichen können. Am wichtigsten, erfahrene Teilnehmer haben
für gewöhnlich diese Konzepte verinnerlicht, sodass sie einen groben
Konsens über das zu erwartenden Benehmen teilen. Nicht erfolgreiche
Projekte weichen für gewöhnlich von diesem Kern wesentlich ab, wenn
auch unabsichtlich, und haben oft keinen Konsens darüber, welches 
grundsätzliche Benehmen angemessen ist. Das hat zur folge, dass sobald
Probleme auftreten, sich die Situation schnell verschlechtern kann, da
den Teilnehmern ein bereits etablierter Grundbestand kultureller 
Reflexe fehlt, worauf sie zurückgreifen können, um 
Meinungsverschiedenheiten zu klären.</para>

<para>Dieses Buch ist ein praktischer Führer, nicht eine 
anthropologische Studie oder Historie. Grundkenntnisse über die 
Herkunft der Kultur der freien Software sind dennoch, eine 
erforderliche Grundlage bei jedem praktischen Ratschlag. Eine Person
welche die Kultur versteht, kann weit und breit in der Open Source Welt
reisen, viele lokale Unterschiede in den Gebräuchen und Dialekten
begegnen und trotzdem in der Lage sein, sich überall bequem und 
effektiv zu beteiligen. Im Gegensatz dazu, wird eine Person welche kein
Verständniss über die Kultur hat, die Organisations- und 
Beteiligungsvorgänge in einem Projekt als schwierig und voller 
Überraschungen empfinden. Da sich die Anzahl der Menschen die freie 
Software entwickeln immer noch stark im Anstieg ist, gibt es viele in
der letzten Kategorie&mdash;diese sind zum größten Teil neulich 
Eingewanderte und das wird auch eine weile lang so bleiben. Wenn Sie
denken Sie könnten vielleicht eine von ihnen sein, gibt der nächste 
Abschnitt Ihnen einen Hintergrund für spätere Diskussionen, sowohl im
Buch als auch im Internet. (Wenn Sie andererseits bereits eine Weile
lang mit Open Source arbeiten, und u.U. bereits eine Menge seiner 
Geschichte kennen, können Sie den nächsten Abschnitt ruhig
überspringen.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>Geschichte</title>

<para>Software mit einander zu teilen wird schon seit dem es Software
gibt, gemacht. In den Anfangstagen der Computer, waren Hersteller der
Meinung, dass Wettbewerbsvorteile, vor allem durch Innovationen in der
Hardware zu erreichen waren, und schenkten der Software als
Geschäftsvorteil, wenig Aufmerksamkeit. Viele Kunden dieser frühen
Maschinen waren Wissenschaftler oder Techniker, die in der Lage waren
die Software die mit der Maschine selbst ausgeliefert wurde auch
selber zu verändern und zu erweitern. Kunden verteilten manchmal ihre
Patches nicht nur zurück an den Hersteller, sondern auch an andere 
Besitzer ähnlicher Maschinen. Die Hersteller duldeten dies, ermutigten
sogar oft dazu: aus ihrer Sicht, machten Verbesserungen an der Software,
unabhängig von ihrer Quelle, ihre Maschine attraktiver für andere 
potenzielle Kunden.</para>

<para>Obwohl diese frühe Zeit in vielerlei Hinsicht der heutigen freien
Software Kultur ähnelte, unterschied es sich in zwei wesentlichen 
Gesichtspunkten. Erstens, gab es noch wenig Standardisierung bei der
Hardware&mdash;es war eine Zeit florierender Innovationen bei den
Architechturen von Computern, aber diese Vielfalt bedeutete, dass alles
inkompatible zu einander war. Deshalb lief Software die für eine 
Maschine geschrieben wurde, im allgemeinen auf keine andere. 
Programmierer eigneten sich im allgemeinen Fachkenntnisse zu einer
bestimmten Architektur oder Familie von Architekturen an (im Gegensatz
dazu, würden sie heute eher Fachkenntnisse in einer Programmiersprache
oder Familie von Programmiersprachen sammeln, mit der Zuversicht, dass
ihre Kenntnisse, auf welche Hardware sie auch arbeiten mögen, übertragbar 
wären). Weil die Erfahrungen einer Person dazu neigten spezifisch auf 
eine Art von Computer beschränkt zu sein, hatte die Ansammlung an
Erfahrung den Effekt, diesen Computer für sie und ihre Kollegen 
attraktiver zu machen. Deshalb war es im Interesse des Herstellers, dass
Wissen und Code, spezifisch zu ihren Maschinen sich so weit wie möglich 
verbreitete.</para>

<para>Zweitens, gab es kein Internet. Obwohl es weniger rechtliche
Einschränkungen heute gab, die das Tauschen verhinderten, gab es mehr
technische: Es gab ein ein paar wenige, lokale Netzwerke, die gut waren
um Informationen mit Mitarbeiter der gleichen Forschungseinrichtung zu
tauschen. Aber es blieben Barrieren die es zu überwinden galt, wenn man
mit jedem teilen wollte, unabhängig von seinem Standort. Diese Barrieren
<emphasis>wurden</emphasis> in vielen Fällen überwunden. Manchmal
stellten verschiedene Gruppen eigenständig Kontakt zu einander her. 
Sie sandten Disketten oder Magnetbänder mittels Post zu einander und 
manchmal fungierten die Hersteller selbst als zentrale Anlaufstelle für
Patches. Es half auch das viele frühen Computer Entwickler an 
Universitäten arbeiteten, wo die Veröffentlichung des eigenen Wissens
erwartet wurde. Die Physikalischen Realitäten der Datenübertragung, 
bedeuteten jedoch, dass das Tauschen immer einen Widerstand mit sich 
brachte, welche proportional zu der Entfernung (echte oder 
organisatorische) anwuchs, die von der Software überwunden werden
musste. Weitverbreitete reibungsloses Tauschen, wie wir sie heute
kennen, war nicht möglich.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>Der Aufstieg proprietärer Software und freier Software</title>

<para>Wärend die Industrie heranreifte, traten gleichzeitig mehrere 
zusammenhängende Veränderungen auf. Die wilde Vielfalt an Hardware
Architechturen wich langsam einige wenige Gewinner - Gewinner durch 
überlegene Technologie, überlegenes Marketing, oder eine Kombination
beider. Gleichzeitig, und nicht ganz zufällig, bedeutete die 
Entwicklung sogenannter "höherer" Programmiersprachen, dass man eine
Anwendung einmal schreiben konnte, in einer Sprache, und es automatisch
übersetzen ("Kompilieren") lassen konnte, um es auf verschiedene
Computer laufen zu lassen. Die Folgen hiervon, blieben den Hardware 
Herstellern nicht verborgen: Ein Kunde konnte jetzt ein großes Software
Projekte in Angriff nehmen, ohne sich zwangsläufig auf eine bestimmte
Computer Architektur festzulegen. Diese Tatsache zusammen mit den 
allmählich knapper werden Leistungsunterschieden zwischen den 
verschiedenen Marken, da weniger effiziente Bauweisen ausgelesen wurden
führte dazu, dass ein Hersteller der Hardware als seine einziges Gut 
behandelte, sich auf sinkende Gewinnmargen einstellen konnte. Rohe 
Rechenleistung wurde ein ersetzbares Gut, während Software zum 
Unterscheidungsmerkmal wurde. Software zu verkaufen, oder zumindest es
als integrierten Bestandteil der Hardware zu verkäufen, fing an wie
eine gute Strategie auszusehen.</para>

<para>Hersteller mussten desshalb anfangen, ihre Urheberrechte auf den
Quellcode strenger durchzusetzen. Wenn Nutzer einfach weiterhin frei 
mit einander Code tauschten und modifizierten, würden sie vielleicht
manche der Verbesserungen die vom Hersteller als "Mehrwert" verkauft
wurden, eigenständig neu implementieren. Schlimmer noch, getauschter 
Quellcode, könnte in den Hände der Konkurrenz gelangen. Ironisch dabei
ist, dass all das zur selben Zeit geschah, als das Internet endlich 
anfing abzuheben. Gerade als der echte reibungslose Austauschen von
Software endlich technisch machbar wurde, machten es Veränderungen im
Computergeschäft wirtschaftlich nicht wünschenswert, zumindest aus
Sicht der einzelnen Unternehmen. Die Hersteller wurden restriktiver, 
entweder verwehrten Sie den Nutzern den Zugriff auf den Quellcode der
auf ihren Maschinen lief, oder sie bestanden auf 
Vertraulichkeitsvereinbarungen, welche effektiv das Tauschen unmöglich
machten.</para>

<sect3 id="history-conscious-resistance">
<title>Bewusster Widerstand</title>

<para>Während der unbeschränkte Austauschen von Quellcode langsam 
nachließ, kristallisierte sich, zumindest im Kopf von einem Programmier,
Konterreaktion. Richard Stallman arbeitete im Labor für künstliche 
Intelligenz an der Massachusetts Institute of Technology in den 1970ern
und frühen '80ern, während was sich als goldene Zeit und als goldener
Ort für den Austauschen von Quellcode, herausstellen sollte. Das KI
Labor hatte eine starke "Hacker Ethik", <footnote><para>Stallman benutzt
das Wort "Hacker" im Sinne von "Jemand der es liebt zu Programmieren und
Spaß daran hat sich dabei geschickt anzustellen", nicht im sinne der 
relativ neuen Bedeutung "Jemand der in Computer 
einbricht"</para></footnote> und Leute wurden nicht nur dazu ermutigt
sondern es wurde von ihnen erwartet, alle Verbesserungen am System mit 
anderen zu teilen. Wie Stallman später schrieb:</para>

    <blockquote>
      <para><emphasis>Wir nannten unsere Software nicht "freie Software"
      weil es diesen Begriff noch nicht gab; aber das ist was es war.
      Immer als Leute von anderen Universitäten oder Firmen eine 
      Anwendung benutzen und portieren wollte, konnten sie das gerne
      machen. Wenn du jemand bei der Nuntzung einer unbekannte und
      interesanten Anwendung gesehen hast, konntest du immer darum
      bitten dir den Quellcode anzuschauen, zum lesen, um es zu
      verändern oder Teile davon für eine neue Anwendung 
      auszuschlachten.</emphasis></para>

      <para>(von <emphasis role="bold">
      <ulink url="http://www.gnu.org/gnu/thegnuproject.html"/>
      </emphasis>)</para>
    </blockquote>


<para>Diese Edenische Gemeinschaft brach kurz nach 1980 um Stallman
herum zusammen, als die Veränderungen die in der restliche Industrie
geschahen, endlich das KI Labor aufholten. Eine Startup Firma stellte
viele Programmierer des Labors ein, um an einem Betriebssystem zu 
arbeiten, ähnlich zu dem welches sie im Labor programmiert hatten, nur 
jetzt unter einer exclusiven Lizenz. Zur gleichen Zeit, schaffte sich
das KI Labor neue Ausrüstung an, welches mit einem proprietären 
Betriebssystem kam.</para>

<para>Stallman sah in den Geschehnissen das größere Muster:</para>

    <blockquote>
      <para><emphasis>Die modernen Computer dieser Ära, wie z.B. der
      VAX oder die 68020, hatten ihre eigenen Betriebssysteme, aber
      keine von ihnen waren freie Software: Man musste eine
      Vertraulichkeitsvereinbarung unterschreiben, nur um eine
      ausführbare Kopie zu bekommen.
      </emphasis></para>

      <para><emphasis>Das hatte zur Folge, dass der erste Schritt bei
      der Nutzung eines neuen Computers, ein Versprechen war, seinen
      eigenen Nachbarn nicht zu helfen. Eine gemeinschaftliche
      Zusammenarbeit war verboten. Die Regel die von den Besitzern
      proprietärer Software gemacht wurde war, "Wenn du mit deinem
      Nachbarn Teilst, bist du ein Pirat. Wenn du irgendwelche 
      Änderungen haben möchtest, dann musst du uns darum betteln sie
      zu machen.".
      </emphasis></para>

    </blockquote>

<para>Durch irgend eine persönliche Eigenart, entschied er sich gegen
diese Entwicklung Widerstand zu leisten. Anstatt für das nunmehr
dezimierte KI Labor weiter zu arbeiten, oder eine Arbeit bei einer der
neuen Firmen anzunehmen, wo die Ergebnisse seiner Arbeit verschlossen in
einer Kiste wären, kündigte er dem Labor und gründete das GNU
Projekt und die Free Software Foundation (FSF). Das Ziel von GNU
<footnote><para>Steht für "GNU's Not Unix", und das "GNU" in dieser
Erweiterung steht...für dasselbe.</para></footnote> war es ein
komplett freies und offenes Betriebssystem und eine Sammlung von 
Anwendungen zu entwickeln, bei dem Benutzer weder daran gehindert
werden sollten zu hacken noch ihre Änderungen mit einander zu tauschen.
Im wesentlichen, machte er sich auf dem Weg wiederherzustellen, was im
KI Labor zerstört worden war, aber auf einer Welt umspannenden
Größenordnung und ohne die Schwachstellen welche die Kultur des KI
Labors verwundbar gemacht hatten.</para>

<para>Zusätzlich zur Arbeit am neuen Betriebssystem, entwarf er eine
Urheberrechtliche Lizenz, dessen Bedingungen garantierten, dass sein
Code für immer frei bleiben würde. Die GNU General Public License (GPL)
ist ein kleveres Stück juristisches Judo: Es besagt, dass Code ohne 
Einschränkungen kopiert und verändert werden darf, und dass sowohl
Kopien als auch abgeleitete Werke (das heißt veränderte Versionen)
unter derselben Lizenz wie das Original, ohne weitere Einschränkungen
freigegeben werden müssen. Tatsächlich, benutzt es das Urheberrecht um
einen gegenteiligen Effekt zu erzielen, für welches das üblich 
Urheberrecht benutzt wird: Anstatt die Verbreitung der Software 
einzuschränken, hindert es <emphasis>jeden</emphasis>, sogar den Autor,
an seiner einzuschränkung. Für Stallman war das besser als seinen Code
einfach als öffentliches Gut freizugeben. Wenn es lizenzfrei wäre,
könnte irgend eine beliebige Kopie in einer proprietären Anwendung
aufgenommen werden(ein bekanntes Phänomen, bei Code welches unter 
tolerante Lizenzen veröffentlicht wird). Obwohl solche eine Einbindung
in keiner Weise die weiter Verfügbarkeit des Codes einschränken würde,
würde es bedeuten, dass die Anstrengungen von Stallman dem 
Feind&mdash;Proprietäre Software&mdash;zum Vorteil gereichen könnte.
Die GPL kann man als eine Art von Schutz für freie Software betrachten,
da es nicht-freie Software daran hindert, seinen GPL Code komplett
auszunutzen. Die GPL und ihre Beziehung zu anderen freie Software
Lizenzen werden im Kapitel <xref linked="legal" /> ausführlich 
behandelt.</para>

<para>Mit Hilfe vieler Programmierer, von dem ein Teil die
Ideologie von Stallman teilte und von dem ein Andere einfach nur eine
Menge Freien Codes sehen wollte, begann das GNU Projekt Freien Ersatz
für viele der wichtigsten Komponenten eines Betriebssystems zu
veröffentlichen. Auf Grund der nunmehr weit verbreiteten
Standardisierung von Hardware und Software, war es möglich GNU Ersatz
in ansonsten nicht Freie Systeme zu verwenden, was viele auch machten.
Der GNU Text-Editor (Emacs) und C Compiler GCC, die großen anklang
fanden, nicht aufgrund der Ideologie, sondern einfach auf Grund ihrer
technischen Vorzüge, waren besonders erfolgreich. Bis ca. 1990, hatte
GNU hatte GNU den größten Teil eines freien Betriebssystems
fertiggestellt, bis auf den Kernal - den Teil den die Maschine
tatsächlich hochfährt und der dafür zuständig ist Haup-Speicher
Fest-Speicher und andere Ressourcen des Systems zu verwalten.</para>

<para>Leider hatte das GNU Projekt ein Kernel Entwurf gewählt, der
schwieriger zu implementieren war, als erwartet. Die dadurch
entstandene Verzögerung, hinderte die Free Software Foundation daran
die erste Veröffentlichung eines komplett freien Betriebssystems zu
machen. Das letzte Stück wurde statt dessen von Linus Torvalds, ein
finnischer Computer Student, hervorgebracht, der mit der Hilfe von 
vielen Freiwilligen verteilt auf der ganzen Welt, einen freien Kernel
fertig gestellt hatte, basierend auf einem viel konservativerem
Entwurf. Er nannte es Linux, und als es mit den bereits existierenden
GNU Anwendungen kombiniert wurde, war das Resultat ein komplett freies
Betriebssystem. Zum ersten Mal konnte man seinen Computer hoch fahren
und ohne proprietärer Software arbeiten. <footnote><para>Rein 
Technisch gesehen war Linux nicht das erste. Ein freies 
Betriebssystem für IBM-kompatible Computer namens 386BSD kam kurz vor
Linux. Es war jedoch viel schwieriger 386BSD zum laufen zu bringen.
Linux machte einen solch einen guten Anfang, nicht nur weil es frei 
war, sondern weil man tatsächlich eine hohe Wahrscheinlichkeit hatte, 
seinen Computer hoch zu fahren wenn man es installierte.</para>
</footnote></para>

<para>Vieles der Software diese neuen Betriebssystems wurde nicht
vom GNU Projekt produziert. In der Tat war GNU nicht einmal die
einzige Gruppe die daran arbeitete ein freies Betriebssystem
herzustellen (z.B der Code der letztendlich NetBSD und FreeBSD wurde, 
befand sich zu dieser Zeit bereits in der Entwicklung). Die Free 
Software Foundation war nicht nur auf Grund des Codes welches sie
produzierten von Bedeutung, sondern auch wegen ihrer Rhetorik. Indem
sie von freier Software als Ursache für das es sich zu kämpfen lohnt 
sprachen und nicht nur als Bequemlichkeit, machten sie es für 
Programmierer schwierig <emphasis>nicht</emphasis> ein politisches
Bewusstsein darüber zu haben. Selbst diejenigen, die der FSF nicht
zustimmten mussten das Thema angehen, wenn auch nur um eine andere
Position auszustechen. Die Effektivität der FSF's als Propagandisten,
bestand darin, ihren Code mittels der GPL und anderer Texte an ein 
Botschaft zu schnüren. Mit der weiten Verbreitung ihres Codes
verbreitete sich auch ihre Botschaft.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Versehentlicher Wiederstand</title>

<para>Es gab jedoch viele andere Vorgänge in der aufkeimenden
freien Software Scene und wenige waren so explizit ideologisch wie
das GNU Projekt von Stallman. Einer der wichtigsten war die 
<firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), eine schrittweise Neuimplementierung
des Unix Betriebssystems - welches bis in den späten 1970ern ein
lose proprietäres Forschungsprojekt bei AT&amp;T von Programmierer
an der Universität von Californien in Berkly war. Die BSD Gruppe
machte keine offenkundige politische Äußerungen über die
Notwendigkeit, das Programmierer sich verbinden und mit einander Teilen,
aber sie <emphasis>praktizierten</emphasis> die Idee mit Gespür und
Enthusiasmus, indem sie eine massive verteilte Entwicklungsanstrenung 
koordinierten, bei dem die Unix Konsolen Anwendungen und
Code Bibliotheken und schließlich das Betriebssystem selbst wurde von
Grund auf neu geschrieben zumeist von Freiwilligen. Das BSD Projekt
wurde zu einem vorzeige Beispiel für nicht ideologische freie Software
Entwicklung und diente als Ausbildungsstätte für viele Entwickler die
später weiterhin in der Open Source Welt aktiv bleiben sollten.</para>

<para>Eine weitere Feuerprobe der kooperativen Entwicklung war das
<firstterm>X Window System</firstterm>, eine freie, nezwerktransparente
graphische EDV Umgebung, welches an der MIT Mitte der 1980er in
Zusammenarbeit mit Hardware Anbietern, die ein gemeinsames
Interesse daran hatten ihren Kunden ein Fenstersystem anbieten zu
können, entwickelt wurde. Weit ab davon sich proprietäre Software
entgegen zu stellen, erlaubte die X Lizens ganz bewusst proprietäre
Erweiterungen auf dem freien Kern-alle Beteiligten des Konsortiums
wollten die Gelegenheit die Standard X Distribution zu verbessern und
sich dadurch von den anderen Mitgliedern abzuheben. X Windows
<footnote><para>Sie bevorzugen es das "X Window System", genannt zu
werden, aber praktisch nennt man es für gewöhnlich "X Windows", da
drei Wörter einfach zu schwerfällig sind.</para></footnote> selbst
war freie Software, aber hauptsächlich als Mittel das Spielfeld zu
ebnen für sich konkurierende Wirtschaftliche Interessen, nicht als
Wunsch die Vormacht proprietärer Software zu brechen. Noch ein weiteres
Beispiel welches dem GNU Projekt ein paar Jahre vorausging war TeX, 
ein freie Textsatzsystem für verlagsfertige Dokumente von Donald Knuth.
Er veröffentlichte es unter einer Lizenz, welches jedem erlaubte es zu
modifizieren und zu verteilen, das Resultat aber nicht "TeX" zu 
nennen, wenn es nicht einen strikten Satz an Kompatibilitätsprüfungen
bestand (dies ist ein Beispiel für eine Klasse von freie Software
Lizenzen die ein Markenzeichen schützen sollen, welches in
<xref linkend="legal"/>) ausführlicher behandelt wird. Knuth nahm 
nicht Stellung für die eine oder andere Partei bezüglich der Frage
nach freier gegen proprietärer Software, er brauchte nur ein besseres
Textsatzsystem um sein <emphasis>echtes</emphasis> Ziel zu erreichen-
ein Buch über Programmieren zu schreiben- und sah keinen Grund sein
System nicht der Welt zu veröffentlichen als er fertig war.</para>

</sect3>

<para>Ohne hier jedes Projekt und jede Lizenz aufzulisten, kann man
doch mit Sicherheit sagen, dass bis zu den späten 1980's eine Menge
freier Software unter eine breiten Auswahl an Lizenzen zu Verfügung
stand. Die Vielfalt an Lizenzen spiegelte eine entsprechende
Vielfalt an Motivationen wieder. Selbst einige der Programmierer die
die GNU GPL wählten waren viel weniger ideologisch getrieben als
das GNU Projekt selbst. Obwohl sie es genossen an freier Software zu
arbeiten, betrachteten viele Entwickler proprietäre Software, nicht
als soziales Übel. Es gab Menschen die einen moralischen Drang spürten
die Welt von "der Hortung von Software"(der Begriff den Stallman für
nicht freie Software benutzt) zu befreien, andere aber waren eher
motiviert durch technischer Begeisterung, durch die Freude daran
mit Gleichgesinnten zusammen zu arbeiten sogar durch das einfache
menschliche Verlangen nach Ruhm. Dennoch beeinflussten sich diese
ungleichen Motivationen größtenteils nicht negativ. Zum Teil liegt dies
daran, dass Software im Gegensatz zu anderen kreativen Formen wie
Prosa oder die Bildende Kunst einige mehr oder weniger objektive
Prüfungen bestehen muss um als erfolgreich in Anbetracht gezogen zu
werden: Es muss Laufen und zu einem gewissen Maß frei von Bugs sein.
Hierdurch haben automatisch alle Teilnehmer eines Projekts eine Art
gemeinsames Interesse, ein Grund und ein Rahmenwerk um zusammen zu
arbeiten, ohne sich all zu viele Sorgen um Qualifizierung außerhalb
des technischen zu machen.</para>

<para>Entwickler hatten noch einen Grund zusammen zu halten: es
stellte sich heraus, dass die Welt der freien Software Code von
sehr hoher Qualität produzierte. In manchen Fällen, war es 
nachweislich technisch der nächsten nicht freien Alternative
Überlegen; in anderen war es mindesten Vergleichbar und natürlich
kostete es weniger. Auch wenn nur wenige motiviert gewesen wären,
freie Software rein aus philosophischen Gründen zu betreiben, waren
eine Menge mehr als glücklich sie deshalb zu betreiben, weil sie
bessere Arbeit leistete. Und von denen die es benutzten, war immer
irgend ein Bruchteil bereit ihre Zeit und Fähigkeiten zu spenden,
um dabei zu helfen, die Software zu warten und zu verbessern.</para>

<para>Diese Neigung guten Code zu produzieren war sicherlich nicht
überall der Fall, aber es geschah mit zunehmender Häufigkeit in
freie Software Projekten auf der ganzen Welt. Geschäftszweige die
zu einem gewichtigen Teil von Software abhingen, fingen langsam an
das mit zu bekommen. Viele bemerkten, dass sie in ihren Betrieben
bereits jeden Tag freie Software einsetzten, ohne es gewusst zu haben
(die Geschäftsführung ist nicht immer informiert über alles was sich
in der IT Abteilung abspielt). Firmen fingen an eine aktivere Rolle
in freie Software Projekten anzunehmen, manchmal unterstützten sie
durch Zeit und Ausrüstung, manchmal auch direkt durch finanzielle
Unterstützung der Entwicklung freier Software Anwendungen. Solche
Investitionen konnten, im besten Fall, sich um ein Vielfaches 
auszahlen. Der Sponsor bezahlt nur eine kleine Gruppe erfahrener 
Entwickler dafür, dass sie sich einem Projekt ganztags widmen, erntet
aber die Vorteile der Beiträge von <emphasis>jedem</emphasis>, auch
von nicht bezahlten Freiwilligen und von Programmierer die durch
anderen Unternehmen bezahlt werden.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" kontra "Open Source"</title>

<para>Mit zunehmender Aufmerksamkeit aus der Unternehmenswelt, wurden
Programmiere freier Software mit Fragen der Präsentation konfrontiert.
Einer von Ihnen war das Wort "free" selbst. Wenn man den Begriff "free
software" zum ersten mal hört, denken viele es bedeutet lediglich
"gratis Software". Es stimmt zwar, dass alles freie Software auch
nichts kostet<footnote><para>Man kann eine Gebühr für die
Aushändigung von Kopien freier Software, da man aber den Empfänger
nicht daran hindern kann es danach kostenfrei weiter zu geben wird
der Preis sofort auf effektiv null herunter getrieben.</para>
</footnote>, nicht jede Software die umsonst ist, ist auch frei.
Zur Zeit der Browser Kriege in den 1990er zum Beispiel, boten sowohl
Netscape als auch Microsoft ihre konkurierende Browser kostenlos an,
bei dem Gedränge einen möglichst großen Marktanteil zu erlangen.
Weder der eine noch der andere waren im sinne "freier Software" frei. 
Man hatte keinen Zugriff auf den Quellcode und selbst wenn man es
hätte, hatte man nicht das Recht es zu modifizieren und weiter zu
geben.<footnote><para>Der Quellcode von Netscape Navigator
<emphasis>wurde</emphasis> letztendlich unter einer Open Source
Lizenz 1998 gestellt, und wurde zum Grundgerüst für den Mozilla 
Browser. Siehe<ulink url="http://www.mozilla.org/"/>.</para>
</footnote> Man konnte lediglich eine Ausführbare Datei herunterladen
und sie laufen lassen. Die Browser waren nicht freier als 
eingeschweißte Software aus dem Geschäft; sie hatten lediglich einen 
niedrigeren Preis.</para>

<para>Die Verwirrung um das Wort "free" ist einer ganz und gar 
unglücklichen Doppeldeutigkeit der Englischen Sprache. Die meisten
anderen Sprachen unterscheiden zwischen einem niedrigen Preis und
Freiheit (die Unterscheidung zwischen <emphasis>gratis</emphasis> und
<emphasis>libre</emphasis> leuchtet den meisten Sprechern romanischer
Sprachen sofort ein). Die Position von Englisch als de facto
Brückensprache des Internets, bedeutet das dieses Problem des
Englischen zu einem gewissen Grad, ein Problem aller ist. Die
Missverständnisse um das Wort "free" war so verbreitet, dass die
Programmierer freier Software schließlich eine Standard Formulierung
als Reaktion parat hielten: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>." Dennoch, ist
es ermüdend es wieder und wieder erklären zu müssen. Viele Programmierer
fühlten, teils zurecht, dass die Zweideutigkeit des Worts "free" das
Verständnis der Öffentlichkeit behinderte.</para>

<para>Das Problem war aber viel schwerwiegender. Das Wort "free" 
trug eine unausweichliche moralische Nebenbedeutung: Wenn die
Freiheit ein Ziel in sich war, dann machte es keinen Unterschied
ob die Software zufällig auch besser oder unter bestimmten 
Bedingungen auch für bestimmte Geschäfte einträchtiger war. Das 
waren lediglich angenehme Nebeneffekte eines Motivs, was im Grunde
genommen, weder technisch noch geschäftlich war, sondern moralisch.
Zusätzlich zwang die Position "free as in freedom" eine grelle
Inkonsistenz auf Firmen die für einen Geschäftszweig einige
bestimmte freie Anwendungen unterstützen wollten, aber für andere
weiterhin proprietäre Software vertrieben.</para>

<para>Diese Dilemmas kamen zu einer Gemeinschaft die sich bereits mit
einer Identitätskrise konfrontiert sah. Diejenigen Programmierer die
tatsächlich die freie Software <emphasis>schreiben</emphasis> waren
sich nie sonderlich einig über das Gesamtziel der Freien Software
Bewegung, wenn es überhaupt eines gibt. Zu sagen, dass die Meinungen
von einem Extrem zum anderen laufen wäre aber irreführend, da es
eine lineare Reihe im Gegensatz zu der tatsächlich vorhandenen
mehrdimensionalen Verteilung, fälschlicherweise implizieren würde. Es
können jedoch zwei breite Glaubenskategorien unterschieden werden,
wenn wir uns darauf einigen können Feinheiten außen vor zu lassen.
Eine Gruppe nimmt die Ansicht von Stallman an, welche die Freiheit zu
teilen und zu modifizieren als das Wichtigste ansieht. Sollte man also
aufhören über Freiheit zu reden, dann hat man die Kernfrage weg 
gelassen. Andere sind der Meinung das die Software selbst das
wichtigste Argument für freie Software ist und fühlen sich Unwohl bei
der Behauptung proprietäre Software sei an und für sich schlecht.
Manche, aber nicht alle, Programmierer freier Software glauben, dass
der Autor (bzw der Arbeitgeber, im Falle bezahlter Arbeit) das Recht
haben <emphasis>sollte</emphasis>, zu kontrollieren, unter welchen 
Bedingungen die Software verteilt werden darf und das keine moralische
Beurteilung an eine bestimmte Wahl von Bedingungen geknüpft sein muss. 
</para>

<para>Lange Zeit, mussten diese Meinungsverschiedenheiten nicht klar
untersucht oder Formuliert werden. Der Aufkeimende Erfolg in der
Geschäftswelt machte die Angelegenheit aber unausweichlich. 1998,
wurde der Begriff <firstterm>open&nbsp;source</firstterm> erschaffen,
als Alternative zu "free", durch eine Vereinigung von Programmierern
die letztendlich zum Open Source Initiative (OSI) wurden.<footnote>
<para>OSI's webseite ist<ulink url="http://www.opensource.org/"/>.
</para></footnote> Die OSI war der Meinung, dass der Begriff "free 
software" nicht nur potentiell verwirrend war, sondern dass es ein
Symptom eines generellen Problems war: Die Bewegung brauchte ein
Marketing Programm, um es der Firmenwelt schmackhaft zu machen und
dass das Gerede über Moral, soziale Vorteile und teilen, niemals 
in der Vorstandsetage ankommen würde. Mit anderen Worten:</para>

    <blockquote>
      <para><emphasis>Die Open Source Initiative ist ein Marketing
	Programm für freie Software. Es ist ein Angebot für freie
	Software, vielmehr auf einer pragmatischen Basis als auf
	schwülstige ideologisches Gerede. Der gute Inhalt ist der
	hat sich nicht verändert, die schlechte Einstellung schon.
	&nbsp;...</emphasis></para>

      <para><emphasis>Die Sache die den meisten Technikfreaks
	klargemacht werden muss ist nicht das Konzept von Open Source
	sondern der Name. Warum sollen wir es nicht so nennen wie
	bisher, "free software"?</emphasis></para>

      <para><emphasis>Ein Grund, ist dass der Begriff "free
      	software" leich so missverstanden werden kann, dass es zu
	Konflikten führen kann.&nbsp;...</emphasis></para>

      <para><emphasis>Der echte Grund für die Neubenennung ist aber
	ein Marketing Grund. Wir versuchen jetzt unser Konzept der
	Firmenwelt zu verkaufen. Wir haben ein gutes Produkt aber
	bisher war unsere Positionierung furchtbar. Der Begriff
	"free software" wurde von Firmenpersonen falsch verstanden,
	die den Wunsch mit einander zu teilen als so verstanden 
	haben als wäre es gegen den Kommerz, gar schlimmer noch, als
	Diebstahl.</emphasis></para>

      <para><emphasis>Die durchschnittliche Firmenleitung wird niemals
	"free software" kaufen. Wenn wir aber die selbe	Tradition, die 
	selben Menschen und die selbe freie Software Lizenzen nehmen 
	und den Namen in "open source" umändern, dann kaufen Sie es
	gerne.</emphasis></para>

      <para><emphasis>Manche Hacker finden es schwer das zu glauben,
	aber das liegt nur daran, dass sie in konkrete, wesentliche
	Begriffe denken und nicht verstehen wie wichtig das
	Erscheinungsbild ist wenn man etwas verkaufen will.</emphasis>
	</para>

      <para><emphasis>Beim Marketing, ist das Erscheinungsbild auch
	die Realität. Der Anschein, dass wir bereit sind von unseren
	Barrikaden herunterzukommen um mit der Firmenwelt zu arbeiten
	zählt so viel wie die Realität, unseres Verhaltens, unserer
	Überzeugungen und unsere Software.</emphasis></para>

      <para>(von <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      und <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>Die Spitzen vieler Eisberge sind in diesem Text sichtbar. Es ist
die Rede von "unsere Überzeugungen", vermeidet es aber schlauer weise
diese klar zu formulieren was diese sind. Für manche, mag es die
Überzeugung sein, dass Code der in einem offenen Prozess entwickelt
wurde, besserer Code sein wird; andere wiederum mag es die Überzeugung
sein, dass alles Information geteilt werden sollte. Das Wort "Diebstahl"
wird benutzt, um (vermutlich) auf illegales kopieren zu deuten - zu
welches viele Vorbehalte haben, auf der Grundlage, dass es kein
Diebstahl ist, wenn der ursprüngliche Besitzer nachher immer noch den
Gegenstand besitzt. Es gibt einen verlockenden Hinweis, dass die freie
Software Bewegung versehentlich als anti-kommerziell beschuldigt werden
könnte, untersucht aber vorsichtigerweise nicht ob solch eine 
Beschuldigung vielleicht einen Grundlage hat.</para>

<para>Was aber nicht bedeuten soll, dass die Seite von OSI inkonsistent
oder irreführend ist. Das ist sie nicht. Vielmehr, ist es ein Beispiel
für genau das, was die OSI behauptet, was der freien Software Bewegung,
fehlen würde: gutes Marketing, wobei "gut" hier "brauchbar für die
Geschäftswelt" bedeutet. Die Open Source Initiative gab vielen genau
das, wonach sie gesucht hatten - ein Vokabular, um über freie Software
als Entwicklungsmethode und Geschäftsstrategie zu reden, anstatt als
moralischer Kreuzzug.</para>

</sect2>

<para>Das auftauchen der Open Source Initiative veränderte die
Landschaft der freien Software. Es formalisierte einen Zwiespalt
der lange ungenannt geblieben war und zwang damit die Bewegung
anzuerkennen, dass es sowohl interne wie externe Politik hatte. Der
Effekt war, dass beide Seiten gezwungen waren eine gemeinsame Basis
zu finden, denn die meisten Projekte haben Programmierer aus beiden
Lagern, sowie solche die sich nicht klar einer Kategorie zuordnen
lassen. Was nicht bedeutet, dass die Leute nie über moralische
Motivationen reden-Fehler in der traditionellen "Hacker Ethik" werden
z.B. manchmal herausgerufen. Aber es ist selten, dass ein Entwickler
freier / Open Source Software offen die Motive anderer im Projekt in
Frage zu stellen. Die Beteiligung ist wichtiger als der Beteiligter.
Wenn jemand guten Code schreibt, frag ihn nicht ob sie es aus
moralische Gründen tun, weil sie dafür bezahlt werden oder weil sie
Ihr Lebenslauf erweitern wollen, oder aus welchen Gründen auch immer. 
Man beurteilt den Beitrag den er leistet auf technischer Ebene und
antwortet auf technischer Ebene. Selbst Organisationen wie Debian, 
die explizit politischer Natur sind, dessen Ziel es ist eine komplett
freie Rechenumgebung anzubieten sind relativ locker, wenn es darum
geht, mit nicht freiem Code zu integrieren und mit Programmierer
zusammenzuarbeiten, die nicht genau die selben Ziele teilen.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>Die Heutige Situation</title>

<para>Beim betrieb eines freien Software Projekts, werden Sie nicht
über solch schwerwiegende philosophische Themen Tag für Tag reden
müssen. Programmierer werden nicht darauf bestehen, dass jeder andere
im Projekt die gleichen Ansichten wie sie teilen (die die es tun,
finden sich schnell in der Situation an keinem Projekt arbeiten zu
können). Aber Sie sollten sich bewusst sein das die Frage nach "free"
kontra "open source" existiert, teils um zu vermeiden Sachen zu sagen
welche für manche Teilnehmer feindlich sein könnte, und teils weil
die Motivationen von Entwickler zu verstehen der beste Weg ist - in
gewissem Sinne der <emphasis>einzige</emphasis> Weg - ist ein
Projekt zu verwalten.</para>

<para>Freie Software ist eine Kultur der Wahl. Um darin erfolgreich
funktionieren zu können, muss man verstehen warum Leute überhaupt
die Wahl treffen, sich daran zu beteiligen. Zwangsmethoden
funktionieren nicht. Wenn Leute unglücklich in einem Projekt sind,
wandern sie einfach an ein anderes ab. Freie Software ist selbst bei
Gemeinschaften von freiwilligen, bemerkenswert darin, dass es nur
wenig Investition erfordert. Die meisten Beteiligten sind einander
noch nie wirklich von Angesicht zu Angesicht begegnet und spenden
einfach Teile ihrer Zeit, wann immer ihnen danach ist. Die Stränge
nach denen Menschen sich für gewöhnlich mit einander verbinden um
dauerhafte Gruppierungen zu bilden, werden auf einen winzigen Kanal 
reduziert: das geschriebene Wort, welches über elektrische Leitungen
getragen wird. Aus diesem Grund, kann es lange dauern, biss eine
geschlossene, engagierte Gruppe sich bildet. Umgekehrt ist es relative
einfach für eine Gruppe einen potentiellen Freiwilligen zu verlieren,
innerhalb der ersten fünf Minuten ihrer Begegnung. Wenn ein Projekt
keinen guten ersten Eindruck macht, werden Neuankömmlinge es selten
eine zweite Chance geben.</para>

<para>Die Vergänglichkeit, bzw die <emphasis>potenzielle</emphasis>
Vergänglichkeit, der Beziehungen ist die vielleicht größte 
einschüchternde Aufgabe die sich ein neues Projekt stellen muss.
Was soll all diese Menschen dazu bewegen lange genug zusammen zu
bleiben um etwas nützliches zu produzieren? Die Antwort zu dieser
Frage ist komplex genug, um es im Rest dieses Buches zum Thema zu
machen, aber wenn man es in einem Satz fassen müsste, wäre es dieser:
</para>

    <blockquote>
      <para><emphasis>Menschen sollten spüren, dass ihre Verbindung zu
	einem Projekt, und ihr Einfluss darüber, direkt proportional zu
	ihren Beiträgen ist.</emphasis></para> 
    </blockquote>

<para>Keine Klasse von Entwickler oder potentielle Entwickler sollte
sich jemals aus nicht technischen Gründen herabgesetzt oder diskriminiert
fühlen. Projekte mit Firmenunterstützung müssen in dieser Hinsicht, ganz
klar besonders vorsichtig sein, der Abschnitt <xref linkend="money"/> 
behandelt dieses Thema im Detail. Natürlich bedeutet dies nicht, dass
wenn es keine Firmenunterstützung gibt, man sich um nichts sorgen machen
muss. Geld ist lediglich eines von vielen Faktoren, die den Erfolg eines
Projekts beeinflussen können. Es gibt auch noch die Fragen, welche Sprach,
welche Lizenz, welche Art der Entwicklung man wählen sollte. Genau welche
Infrastruktur man aufbauen sollte, wie man die Gründung des Projekts
veröffentlichen sollte und vieles mehr. Wie man den Start eines Projekts
richtig angeht ist das Thema des<link linkend="getting-started">nächsten
Kapitels</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
