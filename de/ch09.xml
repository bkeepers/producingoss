<chapter id="legal">

<title>Lizenzen, Copyright, und Patente</title>

<simplesect>

<para> Die Lizenz die man auswählt hat vermutlich keinen großen Einfluss
  auf die Einführung des Projektes, solange es eine Open Source Lizenz
  ist.  Benutzer wählen Software aufgrund von Qualität und
  Funktionalität, und nicht wegen Lizenzdetails aus. Trotzdem sollte man
  ein Grundverständnis über Open Source Lizenzen haben um einerseits
  sicherzustellen, dass die Lizenz zu den Zielen des Projektes passt und
  andererseits um in der Lage zu sein mit anderen über die Lizenz zu
  reden. Bitte beachtet, dass ich kein Anwalt und dass dieses Kapitel
  nicht als juristischer Rat zu sehen ist. Dafür braucht man einen
  Anwalt oder sollte selbst einer sein. </para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="licenses-terminology">
<title>Terminologie</title>

<para> In jeder Diskussion über Open Source Lizenzen stellt man zunächst
  fest, dass es viele Begriffe für die gleiche Sache gibt:
  <firstterm>Freie&nbsp;Software</firstterm>,
  <firstterm>Open&nbsp;Source</firstterm>, <firstterm>FOSS</firstterm>,
  <firstterm>F/OSS</firstterm>, und <firstterm>FLOSS</firstterm>.  Wir
  beginnen damit, diese und einige andere Begriffe zu klären.  </para>

<variablelist>
  <varlistentry><term><firstterm>Freie Software</firstterm></term>
    <listitem>
      <para>Software, die auch im Quelltext frei verteilt und
        modifiziert werden kann. Der Begriff wurde zuerst von Richard
        Stallman geprägt, der das Prinzip in der GNU General Public
        License (GPL) festschrieb, und der die Free Software Foundation
        (<ulink url="http://www.fsf.org/"/>) gründete um das Konzept
        bekannt zu machen.</para>

      <para>Obwohl "Freie Software" ungefähr genau soviel Software
        umfasst wie "Open Source", bevorzugen die FSF und viele andere
        den Begriff "Freie Software", da er die Idee von Freiheit betont
        und das Konzept frei verteilbarer Software vor allem als
        gesellschaftliche Bewegung sehen. Die FSF sieht dass der Begriff
        zweideutig ist&mdash;es könnte auch "umsonst" bedeuten, anstatt
        "frei" wie in "Freiheit"&mdash; findet aber dennoch, dass es
        alles in allem am besten passt, da andere Varianten im
        Englischen eigene Zweideutigkeiten haben. (In diesem Buch wird
        "frei" immer im Sinne von "Freiheit" verwendet, nicht im Sinn
        von "umsonst".)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>Open Source Software</firstterm></term>
    <listitem>
      <para>Freie Software unter einem anderen Namen. Doch der Name
        spiegelt einen wichtigen philosophischen Unterschied wieder:
        "Open Source" wurde geprägt durch die Open Source Initiative
        (<ulink url="http://www.opensource.org/"/>) als eine durchdachte
        Alternative zu "Freier Software" um diese attraktiver für
        Unternehmen zu machen; als Entwicklungsmethode und nicht als
        politische Bewegung.  Vielleicht wollte man auch ein anderes
        Stigma verschwinden lassen, nämlich dass alles was nichts kostet
        auch von schlechter Qualität ist.  </para>

      <para>Obwohl jede freie Lizenz auch "Open Source" ist, und bis auf
        wenige Ausnahmen auch andersherum, bleiben die meisten Leute bei
        einem Begriff. Meistens haben diejenigen die "Freie Software"
        verwenden einen eher politischen oder moralischen Standpunkt,
        während die die "Open Source" bevorzugen es entweder nicht als
        eine Frage der Freiheit sehen oder kein Interesse haben, es nach
        außen zu zeigen. Siehe auch <xref
          linkend="free-vs-open-source"/><phrase output="printed"> in
          <xref linkend="introduction"/></phrase> für eine genauere
        Geschichte dieses Schismas.</para>

      <para>Die Free Software Foundation hat eine
        vorzügliche&mdash;fürchterlich unobjektive, aber nuancierte und
        recht faire&mdash;Herkunft der beiden Begriffe unter <ulink
          url="http://www.fsf.org/licensing/essays/free-software-for-freedom.html"/>
        veröffentlicht.  Die Open Source Initiative verteilt ihre Sicht
        auf zwei Seiten: <ulink
          url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"/>
        und <ulink
          url="http://www.opensource.org/advocacy/free-notfree.php"/>.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>FOSS</firstterm>,
                      <firstterm>F/OSS</firstterm>,
                      <firstterm>FLOSS</firstterm></term>
    <listitem>
      <para>Wo zwei sind, darf ein drittes nicht fehlen. Genau dies
        passierte mit Begriffen für freie Software. Akademiker, die
        vielleicht präzise und umfassende Begriffe gegenüber eleganten
        bevorzugen, scheinen sich auf FOSS oder F/OSS für "Freie / Open
        Source Software" zu einigen. Eine andere Variante ist FLOSS für
        "Freie / Libre Open Source Software"
        (<foreignphrase>libre</foreignphrase> steht in vielen Sprachen
        für "frei" jedoch ohne die Zweideutigkeiten; siehe auch <ulink
          url="http://de.wikipedia.org/wiki/FLOSS"/>.</para>

      <para> All diese Begriffe bedeuten eigentlich das gleiche:
        Software die von jedem verändert und verteilt werden kann,
        manchmal&mdash;aber nicht immer&mdash;mit der Einschränkung,
        dass abgeleitete Arbeiten wieder unter den gleichen Bedingungen
        verteilt werden.  </para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>DFSG-verträglich</firstterm></term>
    <listitem>
      <para>Verträglich mit den Debian-Richtlinien für Freie Software
        (Debian Free Software Guidelines) (<ulink
          url="http://www.debian.org/social_contract.de.html#guidelines"/>).
        Dies ist ein weit verbreiteter Test um zu prüfen ob eine Lizenz
        wirklich frei (open source, libre, etc.) ist. Das Ziel des
        Debian Projekts ist eine vollständig freies Betriebssystem, so
        dass niemand der es installiert daran zweifeln muss ob er das
        Recht hat einen Teil oder das ganze System zu verändern oder zu
        verteilen. Die Debian-Richtlinien für Freie Software bestimmen
        die lizenzrechtlichen Anforderungen die eine Software erfüllen
        muss um in Debian aufgenommen zu werden. Da das Debian Projekt
        gründlich darüber nachgedacht hat, wie man so einen Test
        erstellt, kamen dabei sehr robuste Richtlinien (siehe <ulink
          url="http://de.wikipedia.org/wiki/DFSG"/>) heraus, und soweit
        ich weiss, gibt es weder von der Free Software Foundation noch
        von der Open Source Initiative ernsthafte Bedenken dagegen. Wenn
        man weiss, dass eine Lizenz DFSG-verträglich ist, kann man
        sicher sein, dass sie alle wichtigen Freiheiten einräumt (z.B.
        die Möglichkeit ein neues Projekt abzuspalten, auch gegen den
        Willen des Originalautors. Alle hier diskutierten Lizenzen
        sind verträglich mit der DFSG. </para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>OSI-approved</firstterm></term>
    <listitem>
      <para>Anerkannt durch die Open Source Initiative. Dies ist ein
        anderer oft verwendeter Test ob eine Lizenz alle nötigen
        Freiheiten erlaubt. Die OSI-Definition von Open Source Software
        basiert auf den DFSG, und beinahe jede Lizenz die die eine
        Definition erfüllt, erfüllt auch die andere. Über die Jahre gab
        es einige Ausnahmen, die aber nur seltene Lizenzen betrafen und
        keine von diesen ist hier relevant. Im Gegensatz zum Debian
        Projekt hat die OSI eine Liste aller jemals anerkannten Lizenzen
        unter <ulink url="http://www.opensource.org/licenses/"/>. Damit
        ist "OSI-anerkannt" eindeutig: Entweder eine Lizenz ist auf der
        Liste oder eben nicht. </para>

      <para> Die Free Software Foundation stellt auch eine Liste mit
        Lizenzen unter <ulink
          url="http://www.fsf.org/licensing/licenses/license-list.html"/>
        zur Verfügung. Die FSF ordnet die Lizenzen aber nicht nur danach
        ein, ob sie frei sind, sondern auch danach ob sie kompatibel mit
        der GNU General Public License ist. Kompatibilität mit der GPL
        ist ein wichtiges Thema, das in <xref
          linkend="license-compatibility"/> <phrase output="printed">
        später in diesem Kapitil</phrase> besprochen wird.</para>
        
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>Proprietär</firstterm>,
                      <firstterm>Closed Source</firstterm></term>
    <listitem>
      <para> Das Gegenteil von "Frei" oder "Open Source". Es steht für
        Software die unter traditionellen, kostenpflichtigen
        Lizenzbedingungen (Der Nutzer zahlt pro Kopie der Software)
        ausgeliefert werden oder zu Bedingungen die restriktiv genug
        sind, die Dynamik von Open Source zu unterbinden. Auch Software
        die "umsonst" zur Verfügung gestellt wird, kann proprietär sein,
        wenn die Lizenz die freie Verteilung und Veränderung der
        Software verbietet.
       </para>

       <para> Im allgemeinen sind "proprietär" und "Closed Source"
         synonym. "Closed Source" impliziert jedoch , dass der Quellcode
         nicht einmal eingesehen werden kann. Da dies bei der meisten
         proprietären Software so ist, werden die beiden Varianten
         meistens nicht unterschieden. Manchmal wird jedoch proprietäre
         Software veröffentlicht, deren Lizenz es erlaubt, den Quellcode
         einzusehen. Verwirrender Weise wird dies dann auch "Open
         Source" oder "Fast Open Source" genannt, doch das ist
         irreführend. Die <emphasis>Sichtbarkeit</emphasis> des
         Quellcodes ist nicht entscheidend; wichtig ist was man damit
         tun darf. Die Unterschiede zwischen "proprietär" und
         "Closed-Source" sind also irrelevant, und man die Begriffe
         synonym verwenden.</para>

       <para> Manchmal wird <firstterm>kommerziell</firstterm> als
         Synonym für proprietär verwendet, doch genaugenommen ist das
         nicht dasselbe. Denn Freie Software kann verkauft werden,
         solange die Käufer ihre Kopien weitergeben dürfen. Sie kann
         auch auf anderen Wegen kommerzialisiert werden, zum Beispiel
         durch Support-Verträge, Dienstleistungen und Zertifizierungen.
         Es gibt millionenschwere Unternehmen die mit freier Software
         Geld verdienen, sie richtet sich also weder gegen
         Kommerzialisierung, noch gegen Unternehmen. Andererseits
         <emphasis>ist</emphasis> sie von Natur aus gegen proprietäre
         Software. Dies ist der Punkt warum sie sich von
         althergebrachten "pay per copy" Lizenzmodellen
         unterscheidet.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>public domain</firstterm></term>
    <listitem>
      <para>Niemand hat das Recht, das Kopieren der Software
        einzuschränken. Dies bedeutet aber nicht, dass die Software
        keinen Urheber hat. Der Urheber macht aber von seinen
        Verwertungsrechten keinen Gebrauch. Die Tatsache, dass er die
        Rechte der Öffentlichkeit einräumt, ändert nichts an seiner
        Urheberschaft. </para>

      <para>Wenn eine Arbeit "public domain" ist, können Teile davon in
        anderen lizenzgeschützten Werken benutzt werden. Dann steht
        <emphasis>diese Kopie</emphasis> der Arbeit unter derselben
        Lizenz wie das Gesamtwerk. Das betrifft aber nicht die
        Verfügbarkeit der Originalarbeit die immer noch "public domain" ist.
        Etwas der Öffentlichkeit zu übergeben ist also ein Weg eine
        Software "frei" zu machen, gemäß den Richtlinien der meisten
        Organisationen die freie Software zertifizieren. Trotzdem gibt
        es gute Gründe, eine Lizenz zu verwenden, statt die Software
        einfach mit allen Rechten und ohne Pflichten herauszugeben:
        Selbst bei freier Software können Einschränkungen sinnvoll sein,
        nicht nur für den Urheber, sondern auch für den Lizenznehmer,
        wie der nächste Abschnitt zeigt.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>copyleft</firstterm></term>
    <listitem>
      <para>Eine Lizenz, die das Urheberrecht verwendet um den
        entgegengesetzten Effekt zu erzielen. Je nach dem wen man fragt,
        sind Lizenzen gemeint, die die Rechte die wir hier diskutieren
        einräumen, oder genauer: Lizenzen die diese Rechte nicht nur
        einräumen sondern sie <emphasis>erzwingen</emphasis>, indem sie
        verlangen, dass diese Rechte mit der Arbeit wandern. Die FSF
        verwendet ausschließlich die zweite Form; ansonsten steht es
        Unentschieden: Viele verwenden den Begriff wie die FSF, andere
        &mdash; auch Autoren der Massenmedien &mdash; verwenden die
        erste Variante. Der Unterschied zwischen den Varianten ist
        vielen aber nicht klar.</para>
        
      <para> Das bekannteste Beispiel für die genauere Definition ist
        die GNU General Public License, die verlangt, dass jede
        abgeleitete Arbeit wieder unter der GPL stehen muss; siehe <xref
          linkend="license-compatibility"/><phrase output="printed">
        weiter unten</phrase> .</para>
    </listitem>
  </varlistentry>

</variablelist>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-aspects">
<title>Lizenzaspekte</title>

<para>Obwohl es viele freie Lizenzen gibt, sagen sie in den wichtigen
  Punkten doch alle dasselbe: dass jeder kann den Quellcode bearbeiten
  kann, jeder
  die Software im Original oder modifiziert verbreiten darf und dass die
  Rechteinhaber keine Garantie oder Gewährleistung übernehmen
  (Haftungsausschluss ist vor allem wichtig, wenn Leute veränderte
  Software einsetzen ohne es zu wissen.) Die Unterschiede zwischen den
  Lizenzen reduzieren sich auf einige wenige Punkte:
</para>

<variablelist>
  <varlistentry><term>Kompatibilität mit proprietären Lizenzen</term>
    <listitem><para>Einige freie Lizenzen gestatten es, den Code in
        proprietären Programmen zu verwenden. Das betrifft aber nicht die
        Lizenz des proprietären Programs: es ist genauso proprietär wie
        vorher, nur enthält es Code von einer nicht-proprietären Quelle.
        Beispiele für Lizenzen die das gestatten sind: Die Apache
        Lizenz, die Lizenz des X Konsortiums, Lizenzen im BSD- oder
        MIT-Stil.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>Kompatibilität mit anderen freien Lizenzen</term>
    <listitem><para>Die meisten freien Lizenzen sind kompatibel
        zueinander: Das bedeutet, dass Code der unter Lizenz A
        entstanden ist und mit Code der unter Lizenz B entstanden
        kombiniert wird unter jede der beiden Lizenzen gestellt werden
        kann, ohne die einzelnen Lizenzbedingungen zu verletzen. Die
        große Ausnahme ist die GNU General Public License, die fordert,
        dass jede Arbeit die GPL-lizensierten Code verwendet auch unter
        der GPL stehen muss, und keine weiteren Einschränkungen
        hinzufügen darf. Die GPL ist daher nur mit einigen freien
        Lizenzen kompatible. Das wird in <xref
          linkend="license-compatibility"/><phrase output="printed">
        genauer diskutiert</phrase>.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>Namensnennung erzwingen</term>
    <listitem><para>Einige freie Lizenzen verlangen, dass bei Verwendung
        des Codes eine Notiz erscheinen muss (die Art und Weise ist
        typischerweise vorgeschrieben), die den Autor oder
        Rechteinhaber nennt. Diese Lizenzen sind oft kompatibel zu
        proprietären, da sie nicht dazu zwingen, die abgeleitete Arbeit
        wieder unter eine freie Lizenz zu stellen, sondern nur dazu das
        freie Original zu nennen.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Schutz der Marke</term>
    <listitem><para>Eine Variante die Namensnennung zu erzwingen.
        Lizenzen mit einer Bestimmung zum Schutz der Marke, verlangen,
        dass der Name der Originalsoftware (oder der Rechteinhaber) ohne
        Genehmigung <emphasis>nicht</emphasis> in abgeleiteten Arbeiten
        verwendet werden darf. Auch wenn man beim Erzwingen der Namensnennung
        darauf besteht, einen bestimmten Namen zu verwenden, während man
        beim Schutz der Marke darauf besteht einen bestimmten Namen nicht zu
        verwenden, drücken doch beide Ansätze dasselbe aus: Der gute Ruf des
        Originals soll erhalten und verbreitet, aber nicht verwässert
        werden.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Schutz der "künstlerischen Integrität"</term>
    <listitem><para>Einige Lizenzen (z. B. die Perl Artistic License,
        oder Donald Knuths TeX License) erfordern, dass bei der
        Veränderung und Verbreitung klar zwischen der reinen
        Originalversion und Veränderungen getrennt werden soll. Es
        werden im Grunde die gleichen Freiheiten wie bei anderen freien
        Lizenzen eingeräumt, aber es wird verlangt, dass die
        Integrität des Originalcodes leicht zu überprüfen ist. Diese
        Lizenzen haben sich nicht über die Sprachen für die sie
        geschaffen wurden hinaus nicht durchgesetzt und werden in diesem
        Kapitel nicht weiter erwähnt; sie wurden hier nur der
        Vollständigkeit halber erwähnt.  </para> 
    </listitem>
  </varlistentry>
</variablelist>

<para>Die meisten dieser Bestimmungen schließen sich nicht gegenseitig
  aus. Die Gemeinsamkeit ist, dass der Lizenznehmer bestimmte Pflichten
  erfüllen muss für das Recht den Code zu verwenden oder weiter zu
  verbreiten. Zum Beispiel wollen einige Projekte ihren Namen und ihre
  Reputation mit dem Code verbreiten, und das ist es ihnen Wert eine
  zusätzliche Bestimmung zum Markenschutz zu erlassen. Je nachdem wie
  streng die Bestimmung ist, werden so manche Benutzer ein Programm
  nehmen das weniger strenge Bestimmungen hat. </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-compatibility">
<title>Die GPL und Lizenz-Kompatibilität</title>

<para> Die schärfste Trennlinie verläuft zwischen Lizenzen die
  kompatibel zu proprietärer Software sind solchen die es nicht sind;
  also zwischen der GNU General Public License und dem Rest. Da das
  vorrangige Ziel der GPL Autoren die Verbreitung freier Software ist,
  haben sie die Lizenz so gestaltet, dass es unmöglich ist,
  GPL-lizensierten Code in proprietären Programmen zu verwenden. Siehe
  vor allem diese beiden Absätze der GPL (siehe auch <ulink
    url="http://www.fsf.org/licensing/licenses/gpl.html"/>):</para>

<orderedlist>
  <listitem><para>
      Jedes abgeleitete Werk, also alles, was eine gewisse Menge
      GPL-lizensierten Code enthält, muss wieder unter die GPL gestellt
      werden. </para> 
  </listitem>
  <listitem><para> Es dürfen keine zusätzlichen Einschränkungen
      hinzugefügt werden, weder auf das Originalwerk, noch auf
      abgeleitete Arbeiten. Der genaue Wortlaut ist: "Sie dürfen keine
      zusätzlichen Einschränkungen bzgl. der Ausübung der unter dieser
      Lizenz gewährten oder zugesicherten Rechte
      vornehmen."<footnote>Anm. der Übersetzer: Die Übersetzung der GPL
      stammt von <ulink
        url="http://www.gnu.de/documents/gpl.de.html"/>, das englische
      Original findet man im §10 unter <ulink
        url="http://www.fsf.org/licensing/licenses/gpl.html"/></footnote>
    </para>
  </listitem>
</orderedlist>

<para>Mit diesen Bedingungen schafft es die GPL Freiheit ansteckend zu
  machen. Steht ein Programm erst einmal unter der GPL, sind die
  Bedingungen zur Weitergabe <firstterm>viral</firstterm>&mdash; sie
  verbreiten sich auf jede Software die diesen Code verwendet. Das macht
  es unmöglich GPL-lizensierten Code in proprietären Programmen zu
  verwenden.  Aber genau diese Sätze machen die GPL inkompatible mit
  einigen anderen freien Lizenzen. Das passiert üblicherweise, wenn die
  andere Lizenz z.B. verlangt, die Originalautoren zu nennen, denn das
  widerspricht der Bedingung keine weiteren Einschränkungen einzuführen.
  Aus Sicht der Free Software Foundation sind diese Folgen
  wünschenswert, oder zumindest nicht zu bedauern. Die GPL hält die
  Software nicht nur frei, sondern macht sie zu einem Agenten der
  versucht auch <emphasis>andere</emphasis> Programme dazu zu bringen
  Freiheit zu fordern.</para>

<para>Die Frage ob dies ein guter Weg ist, freie Software zu verbreiten
  ist einer der beständigsten heiligen Kriege im Internet (siehe <xref
    linkend="holy-wars"/><phrase output="printed"> in <xref
    linkend="communications"/></phrase>) und wir werden hier nicht
  näher darauf eingehen. Für uns ist wichtig, dass Kompatibilität mit
  der GPL wichtig ist, wenn man eine Lizenz auswählt. Die GPL ist bei
  weitem die populärste Open Source Lizenz: nach <ulink
    url="http://freshmeat.net/stats/#license"/> liegt sie bei 68%,
  während die nächst-populäre nur 6% erreicht. Wenn man möchte, dass der
  Code frei mit GPL-lizensiertem Code gemischt werden kann&mdash; und
  davon gibt es eine Menge &mdash; sollte man eine GPL-kompatible Lizenz
  nehmen. Die meisten Lizenzen die mit der GPL kompatibel sind, sind
  auch mit proprietären Lizenzen kompatibel, das heisst Code der unter
  so einer Lizenz steht kann in sowohl in GPL-lizensierten als auch in
  proprietären Programmen verwendet werden. Die Ergebnis solcher
  Kombinationen wären natürlich nicht kompatibel zueinander, da das eine
  unter der GPL stünde, das andere aber unter einer closed-source
  Lizenz.  Das bezieht sich aber nur auf abgeleitete Werke, nicht auf
  die ursprüngliche Software.  </para>

<para>Glücklicherweise hat die Free Software Foundation eine Liste die
  aufführt, welche Lizenzen kompatibel zur GPL sind und welche nicht
  (siehe <ulink url="http://www.gnu.org/licenses/license-list.html"/>).
  Alle Lizenzen die wir hier diskutiert haben sind auf dieser Liste, auf
  der einen oder anderen Seite.  </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-choosing">
<title>Choosing a License</title>

<para>When choosing a license to apply to your project, if at all
possible use an existing license instead of making up a new one.
There are two reasons why existing licenses are better:</para>

<itemizedlist>
  <listitem><para>Familiarity.  If you use one of the three or four
            most popular licenses, people won't feel they have to read
            the legalese in order to use your code, because they'll
            have already done so for that license a long time ago.</para>
  </listitem>
  <listitem><para>Quality.  Unless you have a team of lawyers at your
            disposal, you are unlikely to come up with a legally solid
            license.  The licenses mentioned here are the products of
            much thought and experience; unless your project has truly
            unusual needs, it is unlikely you would do better.</para> 
  </listitem>
</itemizedlist>
   
<para>To apply one of these licenses to your project, see
<xref linkend="license-quickstart-applying"/><phrase output="printed">
in <xref linkend="getting-started"/></phrase>.</para>

<sect2 id="license-choosing-mit-x">
<title>The MIT / X Window System License</title>

<para>If your goal is that your code be accessible by the greatest
possible number of developers and derivative works, and you do not
mind the code being used in proprietary programs, choose the MIT / X
Window System license (so named because it is the license under which
the Massachusetts Institute of Technology released the original X
Window System code).  This license's basic message is "You are free to
use this code however you want."  It is compatible with the GNU GPL,
and it is short, simple, and easy to understand:</para>

<screen>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</screen>

<para>(Taken from <ulink
url="http://www.opensource.org/licenses/mit-license.php"/>.)</para>

</sect2>

<sect2 id="license-choosing-gpl">
<title>The GNU General Public License</title>

<para>If you prefer that your project's code not be used in
proprietary programs, or if you at least don't care whether or not it
can be used in proprietary programs, choose the GNU General Public
License
(<ulink url="http://www.fsf.org/licensing/licenses/gpl.html"/>).  The
GPL is probably the most widely-used free software license in the
world today; this instant recognizability is itself one of the GPL's
major advantages.</para>

<para>When writing a code library that is meant mainly to be used as
part of other programs, consider carefully whether the restrictions
imposed by the GPL are in line with your project's goals.  In some
cases&mdash;for example, when you're trying to unseat a competing,
proprietary library that does the same thing&mdash;it may make more
strategic sense to license your code in such a way that it can be
mixed into proprietary programs, even though you would otherwise not
wish this.  The Free Software Foundation even fashioned an alternative
to the GPL for such circumstances: the <firstterm>GNU Library
GPL</firstterm>, later renamed to the <firstterm>GNU Lesser
GPL</firstterm> (most people just use the acronym
<firstterm>LGPL</firstterm>, in any case).  The LGPL has looser
restrictions than the GPL, and can be mixed more easily with non-free
code.  However, it's also a bit complex and takes some time to
understand, so if you're not going to use the GPL, I recommend just
using the MIT/X-style license.</para>

<sect3 id="is-the-gpl-free">
<title>Is the GPL free or not free?</title>

<para>One consequence of choosing the GPL is the
possibility&mdash;small, but not infinitely small&mdash;of finding
yourself or your project embroiled in a dispute about whether or not
the GPL is truly "free", given that it places some restrictions on
what you can do with the code&mdash;namely, the restriction that the
code cannot be distributed under any other license.  For some people,
the existence of this restriction means the GPL is "less free" than
more permissive licenses such as the MIT/X license.  Where this
argument usually goes, of course, is that since "more free" must be
better than "less free" (after all, who's not in favor of freedom?),
it follows that those licenses are better than the GPL.</para>

<para>This debate is another popular holy war (see
<xref linkend="holy-wars"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>).  Avoid participating
in it, at least in project forums.  Don't attempt to prove that the
GPL is less free, as free, or more free than other licenses.  Instead,
emphasize the specific reasons your project chose the GPL.  If the
recognizability of license was a reason, say that.  If the enforcement
of a free license on derivative works was also a reason, say that too,
but refuse to be drawn into discussion about whether this makes the
code more or less "free".  Freedom is a complex topic, and there is
little point talking about it if terminology is going to be used as a
stalking horse for substance.</para>

<para>Since this is a book and not a mailing list thread, however, I
will admit that I've never understood the "GPL is not free" argument.
The only restriction the GPL imposes is that it prevents people from
imposing <emphasis>further</emphasis> restrictions.  To say that this
results in less freedom has always seemed to me like saying that
outlawing slavery reduces freedom, because it prevents some people
from owning slaves.</para>

<para>(Oh, and if you do get drawn into a debate about it, don't raise
the stakes by making inflammatory analogies.)</para>

</sect3>

</sect2>

<sect2 id="license-bsd">
<title>What About The BSD License?</title>

<para>A fair amount of open source software is distributed under
a <firstterm>BSD license</firstterm> (or sometimes
a <firstterm>BSD-style license</firstterm>).  The original BSD license
was used for the Berkeley Software Distribution, in which the
University of California released important portions of a Unix
implementation.  This license (the exact text may be seen in section
2.2.2 of
<ulink url="http://www.xfree86.org/3.3.6/COPYRIGHT2.html#6"/>) was
similar in spirit to the MIT/X license, except for one
clause:</para>

<blockquote>
<para><emphasis>All advertising materials mentioning features or use
of this software must display the following acknowledgement: This
product includes software developed by the University of California,
Lawrence Berkeley Laboratory.</emphasis></para>
</blockquote>

<para>The presence of that clause not only made the original BSD
license GPL-incompatible, it also set a dangerous precedent: as other
organizations put similar advertising clauses into
<emphasis>their</emphasis> free software&mdash;substituting their own
organization's name in place of "the University of California,
Lawrence Berkeley Laboratory"&mdash;software redistributors faced an
ever-increasing burden in what they were required to display.
Fortunately, many of the projects that used this license became aware
of the problem, and simply dropped the advertising clause.  In 1999,
even the University of California did so.</para>

<para>The result is the revised BSD license, which is simply the
original BSD license with the advertising clause removed.  However,
this history makes the phrase "BSD license" a bit ambiguous: does it
refer to the original, or the revised version?  This is why I prefer
the MIT/X license, which is essentially equivalent, and which does not
suffer from any ambiguity.  However, there is perhaps one reason to
prefer the revised BSD license to the MIT/X license, which is that the
BSD includes this clause:</para>

<blockquote>
<para><emphasis>Neither the name of the &lt;ORGANIZATION&gt; nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written
permission.</emphasis></para>
</blockquote>

<para>It's not clear that without such a clause, a recipient of the
software would have had the right to use the licensor's name anyway,
but the clause removes any possible doubt.  For organizations worried
about trademark control, therefore, the revised BSD license may be
slightly preferable to MIT/X.  In general, however, a liberal
copyright license does not imply that recipients have any right to use
or dilute your trademarks &mdash; copyright law and trademark law are
two different beasts.</para>

<para>If you wish to use the revised BSD license, a template is
available at <ulink
url="http://www.opensource.org/licenses/bsd-license.php"/>.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="copyright-assignment">
<title>Copyright Assignment and Ownership</title>

<para>There are three ways to handle copyright ownership of free code
contributed to by many people.  The first is to ignore the issue of
copyright entirely (I don't recommend this).  The second is to collect
a <firstterm>contributor license agreement</firstterm>
(<firstterm>CLA</firstterm>) from each person who works on the
project, explicitly granting the project the right to use that
person's code.  This is usually enough for most projects, and the nice
thing is that in some jurisdictions, CLAs can be sent in by email.
The third way is to get actual copyright assignments from
contributors, so that the project (i.e., some legal entity, usually a
nonprofit) is the copyright owner for everything.  This is the most
legally airtight way, but it's also the most burdensome for
contributors; only a few projects insist on it.</para>

<para>Note that even under centralized copyright ownership, the code
remains free, because open source licenses do not give the copyright
holder the right to retroactively proprietize all copies of the code.
So even if the project, as a legal entity, were to suddenly turn
around and started distributing all the code under a restrictive
license, that wouldn't cause a problem for the public community.  The
other developers would simply start a fork based on the latest free
copy of the code, and continue as if nothing had happened.  Because
they know they can do this, most contributors cooperate when asked to
sign a CLA or an assignment of copyright.</para>

<sect2 id="copyright-assignment-none">
<title>Doing Nothing</title>

<para>Most projects never collect CLAs or copyright assignments from
their contributors.  Instead, they accept code whenever it seems
reasonably clear that the contributor intended it to be incorporated
into the project.</para>

<para>Under normal circumstances, this is okay.  But every now and
then, someone may decide to sue for copyright infringement, alleging
that they are the true owner of the code in question and that they
never agreed to its being distributed by the project under an open
source license.  For example, the SCO Group did something like this to
the Linux project, see
<ulink url="http://en.wikipedia.org/wiki/SCO-Linux_controversies"/>
for details.  When this happens, the project will have no
documentation showing that the contributor formally granted the right
to use the code, which could make some legal defenses more
difficult.</para>

</sect2>

<sect2 id="copyright-assignment-cla">
<title>Contributor License Agreements</title>

<para>CLAs probably offer the best tradeoff between safety and
convenience.  A CLA is typically an electronic form that a developer
fills out and sends in to the project.  In many jurisdictions, email
submission is enough.  A secure digital signature may or may not be
required; consult a lawyer to find out what method would be best for
your project.</para>

<para>Most projects use two slightly different CLAs, one for
individuals, and one for corporate contributors.  But in both types,
the core language is the same: the contributor grants the
project <emphasis>"...perpetual, worldwide, non-exclusive, no-charge,
royalty-free, irrevocable copyright license to reproduce, prepare
derivative works of, publicly display, publicly perform, sublicense,
and distribute [the] Contributions and such derivative
works."</emphasis> Again, you should have a lawyer approve any CLA,
but if you get all those adjectives into it, you're probably
fine.</para>

<para>When you request CLAs from contributors, make sure to emphasize
that you are <emphasis>not</emphasis> asking for actual copyright
assignment.  In fact, many CLAs start out by reminding the reader of
this:</para>

<blockquote>
<para><emphasis>This is a license agreement only; it does not transfer
copyright ownership and does not change your rights to use your own
Contributions for any other purpose.</emphasis></para>
</blockquote>

<para>Here are some examples:</para>

<itemizedlist>
  <listitem><para>Individual contributor CLAs:</para>
    <itemizedlist>
      <listitem><para><ulink
        url="http://apache.org/licenses/icla.txt"/>
      </para></listitem>
      <listitem><para><ulink
        url="http://code.google.com/legal/individual-cla-v1.0.html"/>
      </para></listitem>
<!--  <listitem><para><ulink
 url="http://svn.collab.net/repos/svn-org/trunk/documents/individual-cla.txt"/>
      </para></listitem>  -->
    </itemizedlist>
  </listitem>
  <listitem><para>Corporate contributor CLAs:</para>
    <itemizedlist>
      <listitem><para><ulink
        url="http://apache.org/licenses/cla-corporate.txt"/>
      </para></listitem>
      <listitem><para><ulink
        url="http://code.google.com/legal/corporate-cla-v1.0.html"/>
      </para></listitem>
<!--  <listitem><para><ulink
 url="http://svn.collab.net/repos/svn-org/trunk/documents/corporate-cla.txt"/>
      </para></listitem>  -->
    </itemizedlist>
  </listitem>
</itemizedlist>

</sect2>

<sect2 id="copyright-assignment-transfer">
<title>Transfer of Copyright</title>

<para>Copyright transfer means that the contributor assigns to the
project copyright ownership on her contributions.  Ideally, this is
done on paper and either faxed or snail-mailed to the project.</para>

<para>Some projects insist on full assignment because having a single
legal entity own the copyright on the entire code base can be useful
if the terms of the open source license ever need to be enforced in
court.  If no single entity has the right to do it, all the
contributors might have to cooperate, but some might not have time or
even be reachable when the issue arises.</para>

<para>Different organizations apply different amounts of rigor to the
task of collecting assignments.  Some simply get an informal statement
from a contributor on a public list mailing list&mdash;something to
the effect of "I hereby assign copyright in this code to the project,
to be licensed under the same terms as the rest of the code."  At
least one lawyer I've talked to says that's really enough, presumably
because it happens in a context where copyright assignment is normal
and expected anyway, and because it represents a <foreignphrase>bona
fide</foreignphrase> effort on the project's part to ascertain the
developer's true intentions.  On the other hand, the Free Software
Foundation goes to the opposite extreme: they require contributors to
physically sign and mail in a piece of paper containing a formal
statement of copyright assignment, sometimes for just one
contribution, sometimes for current and future contributions.  If the
developer is employed, the FSF asks that the employer sign it
too.</para>

<para>The FSF's paranoia is understandable.  If someone violates the
terms of the GPL by incorporating some of their software into a
proprietary program, the FSF will need to fight that in court, and
they want their copyrights to be as airtight as possible when that
happens.  Since the FSF is copyright holder for a lot of popular
software, they view this as a real possibility.  Whether your
organization needs to be similarly scrupulous is something only you
can decide, in consultation with lawyers.  In general, unless there's
some specific reason why your project needs full copyright assignment,
just go with CLAs; they're easier for everyone.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="dual-licensing">
<title>Dual Licensing Schemes</title>

<para>Some projects try to fund themselves by using a dual licensing
scheme, in which proprietary derivative works may pay the copyright
holder for the right to use the code, but the code still remains free
for use by open source projects.  This tends to work better with code
libraries than with standalone applications, naturally.  The exact
terms differ from case to case.  Often the license for the free side
is the GNU GPL, since it already bars others from incorporating the
covered code into their proprietary product without permission from
the copyright holder, but sometimes it is a custom license that has
the same effect.  An example of the former is the MySQL license,
described at
<ulink url="http://www.mysql.com/company/legal/licensing/"/>; an
example of the latter is Sleepycat Software's licensing strategy,
described at
<ulink
url="http://www.sleepycat.com/download/licensinginfo.shtml"/>.</para>

<para>You might be wondering: how can the copyright holder offer
proprietary licensing for a mandatory fee if the terms of the GNU GPL
stipulate that the code must be available under less restrictive
terms?  The answer is that the GPL's terms are something the copyright
holder imposes on everyone else; the owner is therefore free to
decide <emphasis>not</emphasis> to apply those terms to itself.  A
good way to think of it is to imagine that the copyright owner has an
infinite number of copies of the software stored in a bucket.  Each
time it takes one out of the bucket to send into the world, it can
decide what license to put on it: GPL, proprietary, or something else.
Its right to do this is not tied to the GPL or any other open source
license; it is simply a power granted by copyright law.</para>

<para>The attractiveness of dual licensing is that, at its best, it
provides a way for a free software project to get a reliable income
stream.  Unfortunately, it can also interfere with the normal dynamics
of open source projects.  The problem is that any volunteer who makes
a code contribution is now contributing to two distinct entities: the
free version of the code and the proprietary version.  While the
contributor will be comfortable contributing to the free version,
since that's the norm in open source projects, she may feel funny
about contributing to someone else's semi-proprietary revenue stream.
The awkwardness is exacerbated by the fact that in dual licensing, the
copyright owner really needs to gather formal, signed copyright
assignments from all contributors, in order to protect itself from a
disgruntled contributor later claiming a percentage of royalties from
the proprietary stream.  The process of collecting these assignment
papers means that contributors are starkly confronted with the fact
that they are doing work that makes money for someone else.</para>

<para>Not all volunteers will be bothered by this; after all, their
contributions go into the open source edition as well, and that may be
where their main interest lies.  Nevertheless, dual licensing is an
instance of the copyright holder assigning itself a special right that
others in the project do not have, and is thus bound to raise
tensions at some point, at least with some volunteers.</para>

<para>What seems to happen in practice is that companies based on
dual licensed software do not have truly egalitarian development
communities.  They get small-scale bug fixes and cleanup patches from
external sources, but end up doing most of the hard work with internal
resources.  For example, Zack Urlocker, vice president of marketing at
MySQL, told me that the company generally ends up hiring the most
active volunteers anyway.  Thus, although the product itself is open
source, licensed under the GPL, its development is more or less
controlled by the company, albeit with the (extremely unlikely)
possibility that someone truly dissatisfied with the company's
handling of the software could fork the project.  To what degree this
threat pre&euml;mptively shapes the company's policies I don't know,
but at any rate, MySQL does not seem to be having acceptance problems
either in the open source world or beyond.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="patents">
<title>Patents</title>

<para>Software patents are the lightning rod issue of the moment in
free software, because they pose the only real threat against which
the free software community cannot defend itself.  Copyright and
trademark problems can always be gotten around.  If part of your code
looks like it may infringe on someone else's copyright, you can just
rewrite that part.  If it turns out someone has a trademark on your
project's name, at the very worst you can just rename the project.
Although changing names would be a temporary inconvenience, it
wouldn't matter in the long run, since the code itself would still do
what it always did.</para>

<para>But a patent is a blanket injunction against implementing a
certain idea.  It doesn't matter who writes the code, nor even what
programming language is used.  Once someone has accused a free
software project of infringing a patent, the project must either stop
implementing that particular feature, or face an expensive and
time-consuming lawsuit.  Since the instigators of such lawsuits are
usually corporations with deep pockets&mdash;that's who has the
resources and inclination to acquire patents in the first
place&mdash;most free software projects cannot afford the latter
possibility, and must capitulate immediately even if they think it
highly likely that the patent would be unenforceable in court.  To
avoid getting into such a situation in the first place, free software
projects are starting to code defensively, avoiding patented
algorithms in advance even when they are the best or only available
solution to a programming problem.<footnote><para>Sun Microsystems and
IBM have also made at least a gesture at the problem from the other
direction, by freeing large numbers of software patents&mdash;1600 and
500 respectively&mdash;for use by the open source community.  I am not
a lawyer and thus can't evaluate the real utility of these grants, but
even if they are all important patents, and the terms of the grants
make them truly free for use by any open source project, it would
still be only a drop in the bucket.</para></footnote></para>

<para>Surveys and anecdotal evidence show that not only the vast
majority of open source programmers, but a majority
of <emphasis>all</emphasis> programmers, think that software patents
should be abolished entirely.<footnote><para>See
<ulink url="http://lpf.ai.mit.edu/Whatsnew/survey.html"/> for one such
survey.</para></footnote> Open source programmers tend to feel
particularly strongly about it, and may refuse to work on projects
that are too closely associated with the collection or enforcement of
software patents.  If your organization collects software patents,
then make it clear, in a public and irrevocable way, that the patents
would never be enforced on open source projects, and that they are
only to be used as a defense in case some other party initiates an
infringement suit against your organization.  This is not only the
right thing to do, it's also good open source public relations.<footnote>
<para>For example, RedHat has pledged that open source projects are
safe from its patents, see
<ulink url="http://www.redhat.com/legal/patent_policy.html"/>.</para>
</footnote></para>

<para>Unfortunately, collecting patents for defensive purposes is a
rational action.  The current patent system, at least in the United
States, is by its nature an arms race: if your competitors have
acquired a lot of patents, then your best defense is to acquire a lot
of patents yourself, so that if you're ever hit with a patent
infringement suit you can respond with a similar threat&mdash;then the
two parties usually sit down and work out a cross-licensing deal so
that neither of them has to pay anything, except to their intellectual
property lawyers of course.</para>

<para>The harm done to free software by software patents is more
insidious than just direct threats to code development, however.
Software patents encourage an atmosphere of secrecy among firmware
designers, who justifiably worry that by publishing details of their
interfaces they will be giving technical help to competitors seeking
to slap them with patent infringement suits.  This is not just a
theoretical danger; it has apparently been happening for a long time
in the video card industry, for example.  Many video card
manufacturers are reluctant to release the detailed programming
specifications needed to produce high-performance open source drivers
for their cards, thus making it impossible for free operating systems
to support those cards to their full potential.  Why would the
manufacturers do this?  It doesn't make sense for them to
work <emphasis>against</emphasis> software support; after all,
compatibility with more operating systems can only mean more card
sales.  But it turns out that, behind the design room door, these
shops are all violating one another's patents, sometimes knowingly and
sometimes accidentally.  The patents are so unpredictable and so
potentially broad that no card manufacturer can ever be certain it's
safe, even after doing a patent search.  Thus, manufacturers dare not
publish their full interface specifications, since that would make it
much easier for competitors to figure out whether any patents are
being infringed.  (Of course, the nature of this situation is such
that you will not find a written admission from a primary source that
it is going on; I learned it through a personal communication.)</para>

<para>Some free software licenses have special clauses to combat, or at
least discourage, software patents.  The GNU GPL, for example, contains
this language:</para>

<screen>
  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

[...]

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.
</screen>

<para>The Apache License, Version 2.0
(<ulink url="http://www.apache.org/licenses/LICENSE-2.0"/>) also
contains anti-patent requirements.  First, it stipulates that anyone
distributing code under the license must implicitly include a
royalty-free patent license for any patents they might hold that could
apply to the code.  Second, and most ingeniously, it punishes anyone
who initiates a patent infringement claim on the covered work, by
automatically terminating their implicit patent license the moment
such a claim is made:</para>

<screen>
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except
as stated in this section) patent license to make, have made, use,
offer to sell, sell, import, and otherwise transfer the Work, where
such license applies only to those patent claims licensable by such
Contributor that are necessarily infringed by their Contribution(s)
alone or by combination of their Contribution(s) with the Work to
which such Contribution(s) was submitted. If You institute patent
litigation against any entity (including a cross-claim or counterclaim
in a lawsuit) alleging that the Work or a Contribution incorporated
within the Work constitutes direct or contributory patent
infringement, then any patent licenses granted to You under this
License for that Work shall terminate as of the date such litigation
is filed.
</screen>

<para>Although it is useful, both legally and politically, to build
patent defenses into free software licenses this way, in the end these
steps will not be enough to dispel the chilling effect that the threat
of patent lawsuits has on free software.  Only changes in the
substance or interpretation of international patent law will do that.
To learn more about the problem, and how it's being fought, go to
<ulink url="http://www.nosoftwarepatents.com/"/>.  The Wikipedia
article <ulink url="http://en.wikipedia.org/wiki/Software_patent"/>
also has a lot of useful information on software patents.  I've also
written a blog post summarizing the arguments against software
patents, at
<ulink url="http://www.rants.org/2007/05/01/how-to-tell-that-software-patents-are-a-bad-idea/"/>.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="licensing-further-resources">
<title>Further Resources</title>

<para>This chapter has only been an introduction to free software
licensing issues.  Although I hope it contains enough information to
get you started on your own open source project, any serious
investigation of licensing issues will quickly exhaust what this book
can provide.  Here is a list of further resources on open source
licensing:</para>

<itemizedlist>
  <listitem><para><citetitle>Understanding Open Source and Free
            Software Licensing</citetitle> by Andrew M. St. Laurent.
            Published by O'Reilly Media, first edition August 2004,
            ISBN:&nbsp;0-596-00581-4.</para>

            <para>This is a full-length book on open source licensing
            in all its complexity, including many topics omitted from
            this chapter.  See
            <ulink url="http://www.oreilly.com/catalog/osfreesoft/"/>
            for details.</para>
  </listitem>

  <listitem><para><citetitle>Make Your Open Source Software
            GPL-Compatible.  Or Else.</citetitle> by David
            A. Wheeler, at
            <ulink
            url="http://www.dwheeler.com/essays/gpl-compatible.html"/>.</para>

            <para>This is a detailed and well-written article on why
            it is important to use a GPL-compatible license even if
            you don't use the GPL itself.  The article also touches on
            many other licensing questions, and has a high density of
            excellent links.</para>
  </listitem>

  <listitem><para><ulink url="http://creativecommons.org/"/></para>

            <para>Creative Commons is an organization that promotes a
            range of more flexible and liberal copyrights than
            traditional copyright practice encourages.  They offer
            licenses not just for software, but for text, art, and
            music as well, all accessible via a user-friendly license
            selector; some of the licenses are copylefts, some are
            non-copyleft but still free, others are simply traditional
            copyrights but with some restrictions relaxed.  The
            Creative Commons web site gives extremely clear
            explanations of what it's about.  If I had to pick one
            site to demonstrate the broader philosophical implications
            of the free software movement, this would be it.</para>
  </listitem>

</itemizedlist>
        

</sect1>

</chapter>


<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

<!-- vim: set ai tw=72 sw=2 expandtab sts=2 spell spelllang=de,en: -->
