     Oh Most Wise and Majestic Emacs, please be in -*- text -*- mode!

* Poul-Henning Kamp's post really slams Brett Glass by name.  Do we
  want to either blank that out, or find out some more about Brett
  Glass and put in a disclaimer that one's impression of him shouldn't
  be formed solely from this one post of Kamp's?

* The thing to be afraid of in adding a new committer is not that they
  might make bad commits, but that they might not be able to learn.

* In chapter 5, there are some deep lessons to draw from the whole
  (insert projname here, you know the one) debacle.  There is no such
  thing as an independent project.  One cannot just assume that the
  official public structures are the only ones that are relevant; all
  interested parties have to get involved.  This is politics, it
  cannot be avoided.

  This case history also has relevance to Andy's suggested topic of
  how to handle a difficult developer who happens to work for you.

* The Apache glossary http://www.apache.org/foundation/glossary.html
  might be nice to refer to as an external glossary.  It's a good
  browse.

* Henry's thoughts on delegation.

* Freshmeat / SourceForge "vitality" measures and what they really mean

* the STATUS file for releases: remember the issue tracker vs file
  debate?  File turned out to be better.  Say why.

* user account mgmt on the project web site?
  Maybe, but emphasize that login should *never* be required for read
  access.  Everything -- code, issue tracker, etc -- should be
  accessible anonymously.  login to file issues is barely acceptable :-).
* tell the Jefferson story, in the "productive threads" &
  "non-drive-by proposals" department.
* politics: why horse-trading is inevitable, whether acknowledged or not
* do a grep for "issue", replace with "bug", just in case

* for Chapter 2: don't make your home page be something like
  http://www.cc.utah.edu/~nb3367/.  People will assume it's not going
  to be around after the end of the school year.  (That particular
  home page is about the worst project front page in history, btw.)

* talk about the wide varieties of psychological preparedness for open
  development among different people (Mikes vs Noels).

* "Software Development and Cosmic Rays" essay, ~/mail/sp-outwent
  (where else?  oh, duh, in www/writings)

* Ben's notes on People Behaving Badly (see ben.txt)

* examples.mbox

* Bruno Latour: "Aramis"!

* "Here is what I was *going* to write: that a good maintainer must
  often play the role of 'honest broker', and conspicuously avoid
  taking a stand on a technical or process issue at first, attempting
  instead to elicit the best arguments from all parties so the
  tradeoffs are laid out before everyone.  But in practice, have I
  done this?  No, instead I almost always take an initial stand, and
  then flip-flop several times during the course of the discussion."
  Is this as productive, and if so why?  If not, what effects *does*
  it have?

* the "lone genuis" exception: you can get a lot done if you're just
  *that* good.  But then, you probably don't need this book.

  I have several friends who know [omitted] to some degree.  One of them
  said "he often walks the fine line between genius and lunatic."  The
  problem is, genius is such a commodity these days, that it's not
  acceptable to be an eccentric any more.

                -Greg Hudson

* The Debian New Maintainer process as a fantastic example of
  conscious training / indoctrination.

* Conversation with Sander, re: ASF guidelines, territoriality,
  <author> tags, etc.

* Express the turns-out-to-be wrong thought that a free-beer
  application can kill off any possibility of an open source app
  taking its place (thought this was happening with Netscape).  It's
  not true; it just slows the open source app development down a bit.
  Acknowledge the Mozilla mistake.

* Jim's point about co-ops that weren't content just to solve a
  limited problem, but had to solve *everything*.  "Okay, I can see
  how this ensures we have access to whole grains through the winter,
  but how does it solve the problems of world hunger, and is it doing
  anything to bring relief to oppressed peoples?"

* The emacs-devel bug-tracking discussion (whew).

* Greg's "no power plants" rule; the Mozilla "super review" system.

* What is openfoundry.org?  They host the bugtracker for svk, apparently.

* Erik's comments on the IRC section in Chapter 3:

  <dionisos> been reading from your link a bit. interesting reading.
  <dionisos> you may want to state that longer texts in the info bot
  are usually easier to understand from the recipients POV. Also,
  those can be sent privately to take some 'burden' off the channel at
  busy times. 
  <dionisos> a nice bot example is 'minion' in #lisp: a bot with an attitude :-)
  <kfogel> thanks for the tips!

* Another paste site: http://nopaste.php-q.net.

* The tension between shared culture and hostile exclusivity, or,
  the double-edged nature of exclusivity, as per conversation w/ Megan.

* Replace all subversion.tigris.org URLs with
  subversion.oss.collab.net, if the migration happens before
  publication.
