     Oh Most Noble and Gracious Emacs, please be in -*- org -*- mode!

This is where pending todo items for the 2nd edition live.

If something you expected to see here is missing, the omission may not
be intentional, or that may be one of the todo items kept in a private
file (because it comes from a confidential suggestion -- the result
will be public, but the information leading to the result is private).
See also the notes.org file, which contains ideas and notes and stuff
that may be actionable some day but that I don't consider to be "todo"
items right now.

* Andy Oram comments
** Chapter 1 (Andy Oram)
   By the way, for both the preface and some marketing material, we need
   to list the main changes to the new edition.

   I guess the opening ("Most free software projects fail.") seemed like
   a powerful statement when we put out the first edition, but this time
   I worry a bit about starting out with negatives. What about the
   stoned-soup miracle of seeing value created out of many small
   contributions by many strangers? What about the joys of community (as
   one finds, for instance, at DebConf)? What about the uncorruptible and
   unbreakable persistence of a project that meet people's needs? I would
   start with a page about those and then move to failure.
   
   Right at the beginning: "We tend not to hear very much about the
   failures..." This paragraph seems longer than necessary. You make a
   good point, but make it in two sentences and move on.
   
   List of myths and causes of failure, pages 1-2: Consider adding a bit
   of structure, perhaps through a variablelist: open source as panacea,
   lack of packaging, lack of active management, etc.
   
   Page 3: "some adjustments will usually be needed." Who has to adjust?
   The risk-averse organization, or the open source developers?
   
   Page 6: about BSD. Although that projects produced a lot of critical
   code still in widespread use, and OSes that powered a lot of projects,
   the organizations producing the various OSes diverged from what we now
   see as good free software practices, and the projects suffered. (The
   fragmentation and forks were symptoms of that.) I don't think you need
   to go into all that in Chapter 1, but it might be a useful topic for
   later chapters. If you don't mind getting the flames.
   
   X Windows: I'd rather not use a sloppy term, particularly because MS
   trademarked Windows. You could just give the full name once and then
   call it X.
   
   Page 7: "of course it always cost less." This could trigger complaints
   about the complicated TCO problem. It might be more accurate to say
   "of course, people with some computing skill could always use it
   reduce their software costs."
   
   A big addition to your Chapter 1 history: the renewed popularity of
   SaaS in the 1990s (it has existed in some form for decades, of course)
   presents a new challenge that the FSF responded to quickly and that
   your chapter needs to cover. It can take up just a few paragraphs, but
   there are a lot of subtleties. The counter-intuitive fact is that free
   software has flourished more and more as SaaS grows. I would like to
   see people adopt the term "closed core" to describe the phenomenon. I
   introduced that term in 2011:
   
   http://radar.oreilly.com/2011/12/could-closed-core-prove-a-more.html
   
   You already described the phenomenon earlier, to explain why companies
   invest in open source, but this is a bit of an extra twist.
** Chapter 2 (Andy Oram)
   Pages 11-12: Some of this material perhaps should not be right at the
   beginning of the chapter. Basically, how to present yourself to the
   outside world is a secondary or tertiary topic. The chapter contains
   other, more basic issues such as whether to create a new project in
   the first place.
   
   Pages 11-12, concerning the look of the web site: It might be worth
   mentioning that sophisticated projects usually include an introductory
   video. Many developers haven't gotten used to the video culture yet (I
   imagine that young ones have, though), and it's worth highlighting the
   availability of some kind of video presentation because it takes a lot
   of work but seems to have a big payoff. (Of course, the topic is also
   appropriate for Chapter 6, Communications.)
   
   Starting From What You Have, Pages 12-13: you introduce a number of
   requirements here quite quickly: a mission statement, a well-organized
   code tree, etc. Some of these are explained later, which is fine. But
   the presentation here is a welter of partially related concepts. I
   tend to like tidiness, so I go for variable lists laying out each
   requirement precisely (you can still follow up later with more
   information). Even if you don't use a variable list, think carefully
   about what you're asking the reader to do and be clear what the
   requirements are. You may well discover that some requirement--for
   instance, code tree--needs more explanation later in the chapter.
   
   Choose a Good Name: no changes to suggest, but I have an interesting
   story to tell. I visited the George Eastman home in Rochester and
   heard how he created the name Kodak. Already in 1888 he was thinking
   globally, and he wanted a simple word whose pronunciation would be
   obvious to anyone who was familiar with Roman letters. The name had no
   other meaning.
   
   Alpha and Beta, page 17: I believe that Alpha releases are usually
   free to evolve and change the APIs and functionality, where Beta
   releases aren't supposed to so except in cases of dire necessity. That
   is also worth mentioning.
   
   Communications Channels (page 19): I would say a little here about
   choosing good terms that aid in SEO. Be aware of what people search
   for, what similar projects use, what terms are used by projects you
   want to interface with, etc.
   
   Developer Guidelines, page 20; I would mention codes of conduct in
   this section, because you don't get to them until page 29.
   
   Documentation, page 21: Nowadays, much documentation is stored as a
   wiki to make it easy for contributors to change it. This might be
   worth mentioning. (You mention a wiki under "Hosting" later.) Some
   sites don't want to make the documentation too open to change, but
   sometimes it's a good way to get users involved.
   
   "If users interact with your code primarily over a network": sidebar,
   page 25: Almost any software is liable to be used by people over a
   network, I think. Whatever is useful to users is likely to be
   incorporated by someone into a SaaS service for those users. Think of
   a compiler or interpretor, for instance. Doesn't look like web
   software, but don't sites offer text boxes where you can paste in and
   run code?
   
   Code of Conduct: "It is always up to the project leadership, by which
   I mean those whom others in the project tend to listen to the most, to
   see to it that a code of conduct is used wisely." (page 30) It's also
   up to leadership to enforce the code, taking action as soon as a
   violation is noticed.
   
   Practice Conspicuous Code Review and Case study (pages 30-31): should
   these be in the Getting Started chapter? I think they could wait till
   a later chapter. Perhaps it could go in Chapter 4, Social and
   Political Infrastructure. If it's a different level of activity from
   Chapter 4, it could probably fit somewhere in Chapter 5, perhaps as a
   sub-section of Open Source and the Organization.
   
   Be Open From Day One (pages 32-33) and Opening a Formerly Closed
   Project (pages 33-34: I would reorganize these a little. You give
   three problems in these sections with closed projects that go open: 1)
   there are hidden proprietary elements to be stripped out; 2) opening
   the code creates a big unnecessary event, 3) there are cultural and
   managerial practices that make it hard for developers and the company
   as a whole to convert. I'd describe those things as subsections of "Be
   Open From Day One." Then the section "Opening a Formerly Closed
   Project" can be shortened and can focus on anticipating and fixing the
   cultural problems.
   
   Announcing (pages 35-36): Here, again, I'd remind the reader to choose
   SEO-appropriate terms that will cause searches to work well.
** Chapter 3 (Andy Oram)
   Move Canned Hosting (page 40) before Web site (page 39). I suggest
   this because canned hosting is an all-in-one umbrella solution that
   covers most of the other, individual tools. It makes sense to consider
   canned hosting first and do the others only if you find a reason to
   reject it.
   
   "Be sure to use moderation..." (p. 46): Consider making this a
   note. That makes it stick out and be more visible, which I think it
   deserves.
   
   Two fantasies (page 50): this also could be a note. I believe one can
   assign a title to a note, but even without the title, these two
   paragraphs make a good note.
   
   Footnote 7 (about Michael Bernstain) and footnote 8 on Siesta: why not
   incorporate these into the text for the new edition?
   
   Archiving (page 50): I suggest a short introductory paragraph listing
   the important aspects of archiving: that they allow messages to be
   retrieved later (and I've often solved a problem by accessing a
   message casually posted by some stranger), that they provide a history
   that's valuable to new users coming up to speed and to maintainer,
   perhaps other advantages.
   
   Mailman, "As of this writing, in late 2013..." (page 52): clearly a
   section of the book you didn't look over and update.
   
   Version Control, "it is a communications mechanism" (page 52): while
   version control is this, I agree, it is more fundamentally a piece of
   software that assures the integrity of software. I would say this
   first, followed by the communications rols. Version control (if backed
   up properly) ensures that the software is never lost, that its history
   and former states can be reconstructed, that each contributor's
   contributions can be recorded and acknowledged, etc.
   
   Terminology (pages 53-56): I suggest adding an entry for "reversion",
   which you refer to later.
   
   push and pull (page 53): I don't want to add extra verbiage to your
   introduction to version control, but it may be worth mentioning
   somewhere (right near the beginning) that version control systems
   allow people to create a copy of their software on their local
   systems--a sandbox (or the terms you seem to prefer, clone or working
   files). Then the concepts of push and pull make more sense.
   
   Authorization (pages 59-60)
   
   A complex area. This is a good section, but it leaves unclear (to me,
   at least) whether to give access to the whole project to a new,
   competent committeer. You seem to say that they should have access to
   the whole repository, but the last paragraph pulls back and suggests
   that you should somehow restrict people's access. How?
   
   Wikis, page 68: per my usual principle, state the positive impacts and
   possibilities first, and then how they can "go bad." By the way, I
   think another problem with wikis is that they don't get updated
   promptly, and therefore that readers come to distrust them as
   canonical sources of information.
** Chapter 4 (Andy Oram)
   Forkability (pages 72-72): I have two general suggestions for material
   to add.
   
   First, what I've heard of the various BSD projects is very sad. I
   mentioned this also in my comments to Chapter 1. I believe that the
   proliferation of *BSD projects could have been avoided if the
   maintainers knew the kind of open source collaboration culture that
   eventually developed in other projects. They had numerous forks, and
   created confusion as well as bad vibes. Might be worth mentioning.
   
   Second, there is a process that GitHub calls forking. Someone (maybe
   you) told me that it's not forking in the same drastic sense that the
   GNU compiler or Emacs forked. That might be worth mentioning, because
   other readers may be confused. GitHub presents forking as a good thing
   (and I think it may be part of the larger Git culture as well), but
   it's a much less conflicted process.
   
   Approval voting, page 76: I see two other reasons to avoid complex
   voting systems: people are less likely to understand them and
   therefore to trust them, and people are less likely to use them
   optimally because they require training.
   
   Footnote on Software Freedom Conservancy, p. 80; this is a disclosure,
   not a disclaimer.
** Chapter 5 (Andy Oram)
   Lots more comments on this chapter than usual, including a
   suggested name change and some reorganization.

   This chapter doesn't hang together as well as the previous ones. I
   feel that, using the unifying thread of money, you throw together a
   bunch of issues that perhaps don't really go together.
   
   Most of the chapter could go better under the title "Participating as
   a Business or Government Agency." The current title reflects the
   fuzziness of the topics in the chapter. When you talk of
   organizations, you make it sound like the chapter covers
   infrastructure, which was the topic of Chapter 4. And if you talk
   about money, people will think you'll talk about fund-raising, and
   then you have to explicitly say you won't. (Actually, you have one
   section about it; Crowdfunding and Bounties. Perhaps there's another
   chapter that could go in.)
   
   I think that most of the chapter could stay together with the new
   title I suggested. A few other changes would follow:
   
   * The "Funding Non-Programming Activities" section might be worth
     rethinking. You could orient it around "things that need to get done
     and nobody enjoys doing" instead of money. Perhaps it should be
     broken up. Quality assurance may fit well in this chapter, whereas
     conferences might go elsewhere. Marketing is also a topic that goes
     beyond the question of who pays.
   
   * Don't Bash Competing Open Source Products and Don't Bash Competing
     Vendor's Developers look like communications issues, not business
     issues. They could go in the communicatiosn chapter. Of course, I
     just recommended that you bash the BSD projects...
   
   * Foster Pools of Expertise in Multiple Places seems like a topic for
     another chapter too. (I'm not sure which one, maybe Chapter 4.)
   
   * Establish contact early with relevant communities: looks like a
     Chapter 4 topic.
   
   Now, on to comments about specific sections:
   
   Augmenting services (page 84): there may be a better term for this
   item. It's more like "Ensuring maintenance of infrastructure" because
   the open source project is infrastructure for the company.
   
   Donations (page 85): this should not be here, because it's not a
   motivation for supporting an open source project.
   
   "In addition to..." (page 86): I think you intended this paragraph to
   be broken into a list, and for some reason the formatting didn't
   happen. It should be a variable list.
   
   "disclaimer" (page 90): Again, this is a disclosure.
   
   Benevolent Dictator (page 91): I like your point in this paragraph,
   but I suspect it's rarely followed. My impression is that if a company
   starts a free software project or takes control of the funding for
   one, the company keeps final say to itself. I believe that's true at
   Canonical, for instance. (On the other hand, in Providing
   Hosting/Bandwidth you suggest that some companies do the
   opposite--they try to milk a project for good PR without really
   participating.)
   
   "Will other developer resent..." (page 92): I think there may be
   another issue to consider (although this section is already rather
   long): not so much resentment as confusion about what types of
   development are worth paying for. Probably the company should explain
   why it chose to pay for a certain feature instead of just going
   through the consensus-building process (which it has to do anyway to
   get the feature accepted). Probably the company has a deadline to meet
   a customer demand, and that's worth stating. Otherwise, contributors
   who work for free may wonder whether they could get the company to pay
   for their work.
   
   "Update Your RFI..." (pages 93-94): I can tell that each of the points
   in your list is based on real abuses that companies carried out in
   government work. That might be worth mentioning.
   
   Dirk Reiners quote: Could you ask him what he means by "His case was
   even better"? What "case" is this? Better than what?
   
   Total cost of ownership (page 101): Another point is that the costs of
   proprietary software tend to outstrip open source if you look ahead
   long enough. I remember how the city of Munich did a TCO analysis that
   looked five years into the future, and decided that MS Office was
   cheaper than OpenOffice.org. (They switched anyway, as I'm sure you
   know.) But five years is an artificial cut-off point--the costs of MS
   Office keep getting more out of line over the years. (This discussion
   is also relevant to the item "Open source is cheaper" on page 105, so
   I'm not sure whether it's worth including in one place or the other.)
   
   Dispel Myths Within Your Organization (pages 104 ff.): Perhaps divide
   these into unfairly positive myths and unfairly negative myths. Then
   people can anticipate what you're criticizing. Here is three other
   myths worth citing: 1) Open source is less secure, because malicious
   users can peruse the code. 2) All bugs are shallow. 3) We can casually
   copy open source code into our code.
   
   Foster Pools of Expertise in Multiple Places, page 106: Is it worth
   talking here about certifications, such as LPI? I don't know what you
   think of them. Most American programmers (at least in open source)
   scoff at certifications, but they're a big deal in Japan, Brazil, and
   some other places.
   
   Don't Let Publicity Events Drive Project Schedule (pages 107-108): the
   last paragraph discourages companies from forcing communities into
   pre-planned schedules. But several successful projects, notably
   Ubuntu, do that. I think this paragraph may be overly idealistic.
   
   The Key Role of Middle Management (page 108): It might be worth
   explaining the typical relationship between a manager and an open
   source project. Perhaps a manager has a one-to-one relatioship with a
   project: she's responsible for the company's contribution to the
   project and is really a member of the open source project
   herself. That's a relatively simple scenario. I suspect that often a
   manager is in charge of some internal corporate project that is not
   open source, and is also directly responsible for programmers working
   part-time or full-time on an open source project. That's more
   difficult and takes a lot sensitivity on the part of both the managers
   and the programmers.
   
   Innersourcing (pages 109-110): Although we agree that this is a timely
   topic that should be in the book, it sticks out as unrelated to the
   rest of the chapter. The chapter is about business, but that doesn't
   mean this section goes with the others. It might be better as either a
   sidebar or its own appendix. One way to integrate the section with
   this chapter better is talk about innersourcing as a stepping stone on
   the way to open sourcing, or as a follow-up to doing open source
   projects that train the company in open source processes.
   
   Hiring Open Source Developers (page 110): In the Huawei report, you
   ramped up very nicely by discussing why a company would want to hire
   developers with a particular expertise, and then how to do it. A
   couple paragraphs here about the benefits of hiring developers out of
   an open source community would be helpful--although you also discuss
   hiring new programmers to join the community.
   
   Evaluating Open Source Projects (page 110): You might mention the term
   "project maturity," which appeared in a companion book to yours: Open
   Source for Businesses.
** Chapter 6 (Andy Oram)
   Attached. Some interesting comments, nothing too disruptive I think.

   Per one of my principles, let's provide a broad overview of the topic
   (communications is a big topic!) at the start. For the first two or
   three paragraphs, I would remind readers what an open source project
   must do--recruit developers and users, motivate people, allow
   free-flowing discussion while reaching decisions, etc.--and then
   proceed to the types of communication required. The importance of
   writing well is a secondary topic, and could be a section following
   these few introductory paragraphs.
   
   I wonder whether you have devoted enough material to the media
   (mailing list, web site, FAQ, etc.) a project uses to do
   communications. You introduce a lot of these in Chapter 2 and descibe
   them on a technical level in Chapter 3. Maybe these are enough; I'm
   not sure. Chapter 6 assumes that all these are in place and talks
   about how to maximize their value. I would consider listing the
   important basic blocks of communication again.
   
   By the way, a friend of mine has a T-shirt reading, "Hyperbole is the
   greatest thing ever."
   
   Structure and Formatting, page 115: I cheered when I read your first
   paragraph about writing with proper grammar. From my own experience
   over the decades, I'd like to suggest another point you can make
   (regarding "arbitrary"): proper grammer and word usage is critical to
   minimizing ambiguity. Ambiguity can be very destructive in technical
   material (and certain other publications, such as legal ones). And
   little things such as run-on sentences, where it's not clear what's
   cause and what's effect, can create this dangerous ambiguity. No one
   can be perfect, but writers should do the best they can and reread
   their own work to look for ambiguity caused by mistakes.
   
   The rest of this section could be a bulleted list, each paragraph
   after the second becoming its own item.
   
   Subject lines, page 116: I don't know whether my observation here is
   on-topic, but I'm frusrated to find that Google Mail doesn't let you
   change the subject line when you press Reply or Forward. I don't know
   whether other mailers have the same problem, but a lot of people use
   Google Mail. When I want to change the subject line, I have to launch
   a new thread (which I may or may not want to do) and manually cut and
   paste addresses and the text of the email.
   
   Real names, page 118-119: I like your clever suggestion that people
   who want to remain anonymous can invent a real-seeming name. Women
   (and perhaps certain ethnic groups) have a particular need to hide
   their identities because they can be harrassed quite severely, and
   their contributions can be devalued. They may try to choose "neutral"
   names. I don't know whether this is worth saying--you already grant
   them the right to hide their identities.
   
   Avoiding Common Pitfalls, page 121: Can you add a sentence or two
   after this heading? Our production team has (or used to have) a rule
   against putting two headings in a row. I concur, finding that this
   looks bad. And there's almost always something general one can say to
   tie subsections together. As encouragement, here's a suggestion: the
   subsections here revolve around the idea of increasing productivity
   during discussions. You could find a couple sentences to say about
   that.
   
   "Me too" posts, page. 121: I'm not sure I'd encourage people to post
   empty encouraging messages--every message takes up a little bit of
   other people's time, and if the mailing list contains a lot of
   content-free messages, readers are discouraged from reading it. Your
   next section talks about signal/noise ratio, and I think that applies
   here too. Unless people are voting, I'd avoid extra messages that just
   convey encouragement. When I want to convey encouragement, I try to
   find something extra to say that "adds value."
   
   Holy Wars (pages 124-125): I have my own approach to holy wars (man,
   don't you see lots of those during this election season?). It may or
   may not be useful to you--you can ignore this if you want. I think
   holy wars stem from different basic values. The idea of "values" is
   almost defined by these being unarguable. You are pro-life or
   pro-choice, that's it. And sometimes people do overlap in their values
   (most people are partly pro-life and partly pro-choice) but different
   groups emphasize a value more than others. So people may have
   radically different values, or may simply place different value on
   each of their shared values. Take the GPU vs. BSD bruhaha: both sides
   value freedom of choice and efficiency, but they place different
   emphases on each. In any case where values clash, argument is useless
   because values lie beyond rationality. My two cents.
   
   The "Noisy Minority" Effect (pages 125): It might be worth
   acknowledging that the minority is sometimes right. In politics and
   social policy, we have plenty of examples of this. (Most white
   Americans in 1950 thought that blacks didn't deserve equal political
   rights, for instance.) If the merits of a proposal can be discussed
   dispassionately (which can't be done during Holy Wars, for instance,
   because values are not subject to rationality), the number of people
   who support each side isn't really important. I may be idealistic
   here.
   
   Difficult People (page 126), would you feel comfortable mentioning the
   discussions in The Art of Programming? It's up to you.
   
   Conspicuous Use of Archives, address for archives (page 130): in an
   earlier chapter, you said archives often move--that seems to
   contradict your "forever" URL promise here.
   
   Treat all resources like archives (page 131): Consider using the list
   to contain both the purpose of the FAQ and the implied way to handle,
   instead of having the purposes in the list and the implied way to
   handle the FAQ in the paragraph that follows. (And the list should
   probably be bulleted.) I think the points could be absorbed by readers
   more easily if each purpose is tied right to your conclusion about
   what to do.
   
   "policing" (page 133): This is an overly harsh word, as is evidenced
   by your disclaimers in parentheses. Say "monitoring" instead.
   
   "r12908" (page 133): isn't this format also the way the revision
   appears in svn command lines? A good reason to settle on it as a
   convention.
   
   Announcing Security Vulnerabilities (page 136): Sometimes it's hard to
   tell whether a bug makes a piece of software less secure or just
   causes bad outcomes. I don't know whether you should discuss this
   here, because it's a highly technical (and language-dependent) topic
   that goes beyond the scope of the book. Perhaps a paragraph describing
   the difficulty of deciding what's a security vulnerability is
   worthwhile. To some extent, this is a communications issue, and
   therefore relevant to the chapter: a project wants to help users
   understand which bugs are security vulnerabilities.
   
   Some of this section may be outside the scope of the communications
   chapter. This chapter isn't about how to handle and fix security
   flaws; it's about communications. I can see how all the material could
   arguably stay in this chapter, but perhaps there's a more appropriate
   chapter for some of the security material.
** Chapter 7 (Andy Oram)
   Road repair metaphor (page 142): I love this metaphor, and will think
   of it the next time I'm crawling along Route I95. But you might be
   unnecessarily pessimistic. Do parallel development tracks really
   discomfort anybody? Open source projects maintain a clean, stable
   release while creating a new branch (or several) to work on
   updates. Why say that everybody slows down in order to allow
   development to proceed in parallel?
   
   "Since the first edition of this book..." (footnote, page 144): Don't
   talk about the differences between the first and second editions in
   this book, unless you have a critical point to make. (For instance,
   you can distinguish between editions if you offered advice in the
   first edition that is invalid in the second because of changes in the
   environment.) I don't think this footnote is needed. Say in the text
   what's current, bring everything up to date.
   
   Major, minor, patch (page 145): Explain the sometimes fluid difference
   between these concepts first. Then explain how the canonical
   three-part numbering scheme reflects those concepts. Currently, you
   do the opposite: describing the scheme before the meaning.
   
   "...regular development work happens..." (page 148): I am confused
   about the difference between the main branch and the others. What is
   "irregular" about working in another branch? You need to distinguish
   the different work performed on different branches.
   
   "...fairly strict branch management..." (footnote, page 149): I don't
   know what this is. Hopefully, an earlier section defined what you mean
   by "strict branch management." You have to indicate what you mean by
   this. Is it just maintaining branches for each type of work and making
   sure each commit goes to the branch where it should go?
   
   Digital signing (page 157): this may need a little more
   explanation. Even I, who have a general sense of how the web of trust
   works with GPG, am confused about how average users will use it to
   reach the developers who signed the release. Do you expect people to
   build up enough personal connections to make use of the web of trust?
   
   "The purpose of all this signing and checksumming..." (page 157): I
   like to put purposes near the beginning of the section, not the end,
   because you are explaining why this section is important to read.
   
   Planning Releases (pages 160-161): Back in Chapter 5 (as well as in
   your Huawei report) you discuss the strategy of doing work in a
   separate branch to ensure a company can release what customers want on
   time, and then merging it back into the open project. Couldn't that be
   done here? It's not a complete substitute for getting what you want
   into the open project, but it's an alternative.
   
   Jeffersons' University (page 161): Is this an ethical and appropriate
   model for persuading free software developers to support one person's
   plan? Suppose Jefferson really had a stupid idea? Wouldn't you want
   free-wheeling discussion before anything is "set in stone" as you call
   it? Of course, before anyone makes a suggestion, it's always good to
   do some research and present a clear plan about its feasibility, but
   the purposes isn't to railroad discussion.
** Chapter 8 (Andy Oram)
   Politics (page 162): a valuable enough point to be a section or
   sidebar.
   
   Automated testing (pages 168-170): Is it worth mentioning test-driven
   development, just as a process used by many projects?
   
   Meeting in Person (page 172): I'm glad you keep this short, instead of
   entering deeply into a big topic. It may be worth referring to Jono's
   book The Art of Community for detail, because he has the subject
   nicely covered. One topic you might want to devote a couple sentences
   to, though, is the cost of attending. The project may want to sponsor
   certain people and perhaps run votes or use some other system to
   determine who gets a scholarship.
   
   Documentation manager (pages 175-176): you have come to my favorite
   topic, of course. We can't teach people here how to write readable and
   actionable documentation. But there is one thing I would like to
   suggest including: good documentation puts things together in usable
   sequences for people. It doesn't just explain each option or call in
   isolation. When something change, the first task of the documentation
   people is add or change the necessary information about that
   individual feature, but then something should try to go through
   tutorials or other documents and try to think of the ripple effects of
   the change. Entire procedures that are currently documented may be no
   longer necessary.
** Chapter 9 (Andy Oram)
   AGPL (pages 195-196): I believe the idea for this license historically
   arose as discussions were just beginning for the GPL 3, and some
   participants (perhaps even including RMS) wanted the GPL 3 to include
   the critical clause. Pushback from others who were less hostile to
   cloud services (which didn't even have that name then) led to a split
   between the GPL 3 and the AGPL. I am not sure of this, but it's my
   recollection. I don't know whether it's worth mentioning.
* Web site and build infrastructure
** BUG: DocBook->PDF via FOP continually breaks, totally unmaintainable.
   Wow, I'm so tired of this.  In theory, DocBook is convertible to PDF.
   In practice, you need a team of NASA scientists to get it working.
   At least, the method used in 'lang-makefile' here, with Apache FOP,
   has never stayed working for more than a year at a time as far as I
   can remember.  http://www.dpawson.co.uk/docbook/tools.html has some
   alternatives; search for "Off the top of my head, I know of the
   following ways to transform DocBook XML into PDF, with open
   source/free/semi-free software".  See also
   http://www.scons.org/doc/HTML/scons-user.html#b-DocbookPdf,
   and http://lwn.net/Articles/661778/ re 'dblatex'.
** BUG: Why is the output="printed" conditional not working?
   For example, in Chapter 8 there is this conditional:
 
     (see <xref linkend="trademarks"/><phrase output="printed">
     in <xref linkend="legal"/></phrase>)
   
   and yet the HTML output produces (with links, of course) this...
 
     (see the section called “Trademarks” in Chapter 10, Licenses,
     Copyrights, and Patents),
 
   ...in en/forks.html.  What's up with that?
** BUG: compatibility links don't produce .html files.
   When id="mailing-lists" changed to id="message-forums" in ch03.xml,
   we left an <anchor id="mailing-lists" /> in place for compatibility.
   However, that still doesn't produce mailing-lists.html, which means
   a bunch of links out on the Net will suddenly become obsolete.
   Solution is to find all the compatibility anchors and generate .html
   files that do a 301 redirect to the new link.
** BUG: Why are we getting this warning on every commit:
   "Warning: post-commit hook failed (exit code 1) with no output."
** Learn how to not include obsolete appendices in the PDF output.
** Explanation of POSS web site to ORM et al
   The online version has some properties that I'd like to maintain -- the
   most important is probably the human-readable anchor names, for example:
   
     http://producingoss.com/en/forks.html#forks-handling
   
   It's not just that they're human-readable, it's that they stay stable no
   matter how content moves around.  I could move the material about forks
   to a completely different chapter, but the URL would stay the same (and
   when someone went to it directly online, they would automatically be in
   the right chapter when they got there, whatever chapter it is).
   
   Out on the Net, people refer to particular parts of the book using those
   section & anchor names.  So I can't afford to break those.
