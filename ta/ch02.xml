<chapter id="getting-started">

<title>தொடங்குதல்</title>

<simplesect>

<para><citetitle>The Cathedral and theBazaar</citetitle>
என்ற தலைப்பில் Eric Raymond எப்படி இலவச மென்பொருள் திட்டங்கள் 
உருவாகின்றன என்பதன் உன்னதமான மாதிரியை வழங்கியுள்ளார்.  அவர் குறிப்பிட்டு உள்ளது:</para>

    <blockquote>
      <para><emphasis>அனைத்து சிறந்த மென்பொருள்களும் உருவாக்குபவரின் தனிப்பட்ட 
	தேவையை ஈடு செய்ய இயலாமல் ஏற்பட்ட அலுத்தத்தால் உருவானவையே.</emphasis>
	</para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"
      >catb.org/~esr/writings/cathedral-bazaar/</ulink>
      </emphasis>)</para>
    </blockquote>

<para>ரேமண்ட் தனிப்பட்ட தேவையால் மட்டும்தான் திறந்த மூல திட்டங்கள் உருவாகின்றன என 
கூராவில்லை. மாராக, அவர் <emphasis>சிறந்த</emphasis> மென்பொருள்கள் உருவாவது
உருவாக்குபவர் அந்தகைய தேவையை தானாக முன்வந்து தீர்த்து கொள்ள முயலும் பொது தான் என்கிறார்; 
திறந்த மூல திட்டங்களுக்கும் இத்தகைய தனிப்பட்ட தேவைகளுக்கும் உள்ள சம்பந்தம் என்னவென்றால் 
இத்தகைய அதிமுக்கிய காரணமாக இருப்பது மட்டுமே.</para>

<para>இவ்வருதான் பெரும்பாலான திட்டங்கள் தொட்ங் பட்டன தற்க்காலத்தை விட; இதை ரேமண்ட்
எழுதிய 1997 களில் மிக அதிக விழுக்காட்டில் உருவாகின.  இன்று பெரும்பாலும் நிருவனக்களால்
&mdash;அரசாங்கங்கள், லாப நோக்கற்ற நிருவனங்கள், லாப நோக்கம் உடைய நிருவனங்கள்&mdash;
அடிப்படையில் இருந்து மத்திய கட்டுப்பாட்டுடன் மருவுருவாக்கம் சேய்ய படும் திட்டங்கள் தான் அதிகம் 
தோன்று கின்றன. தனிப்பட்ட தேவையால் ஆற்வமுற்று அதை சார்ந்த மற்ற சிக்கல் கலுக்கும் தீர்வுகாணம்
திட்டங்கள் இன்றும் சிரப்பான மென்பொருள்களை உருவாக்கினாலும் அது மட்டும் இருதியான ஒரே 
காரண்ம் அல்ல.</para>

<para>எனினும் ரேமண்ட் குறிப்பு இன்னும் உள்ளார்ந்து.  திர்ந்த மென்பொருளின் வெற்றிக்கு 
அத்தியாவசிய தேவை மென்பொருள் உருவாக்குபவர்களின் அக்கறை, வழக்கமாக அவரகள் தங்கள் 
சுய பயன்பாட்டிற்கு அல்லது பயன்படுத்தும் தேவை உள்ளவர்களுடன் நேரடியாக வேலை செய்வதால் 
அதில் ஈடு கின்றனர்.  அது அவர்கள் செய்ய நினைப்தை செய்படுத்தவில்லை எனில் அந்த தனி 
நபரோ அல்லது நிவனமோ அதிருப்தி அடைவர். உதாரனமாக Kauli அறக்கட்டளையால் 
(<ulink url="http://www.kuali.org/" >kuali.org</ulink>), உருவாக்க பட்ட 
கல்வி சார்ந்த திரந்த மூல திட்டம் கல்வி நிருவனங்களின் நிதி மேலன்மை, வழங்கப்படும் ஆய்வுகள்,
மனித்வள மேலான்மை, மாணவர் பதிவ, மற்றும் பல வேலைகளை செய்தாலும் அது தனிப்பட்ட ஒருவரின்
தேவையால் உருவானது அல்ல.  அது ஒரு துரை சார்ந்த தேவையை அடிப்படையாக கோண்டது.
ஆனால் அது முற்றிலும் நேரடியாக அந்த துரையின் அனுபவம் மட்டும் சார்ந்த்தால் அதில் ஏர்படும் குரைகள் 
அவர்களுக்கு நன்கு புலப்படும்.  இது சிறந்த மென்பொருள் உருவாக ஏதுவாக இருக்கும் ஏன் என்றால்
பயண்பாட்டு கருத்துகள் சரியான திசையில் அமைந்துவிடு கிண்றது. இது <emphasis>மற்றவர்களின்
</emphasis> தேவையை தீர்க எழுதப்பட்டு விற்பனை செய்ய பட்டது அல்ல.  ஆனால் 
<emphasis>தனிப்பட்ட</emphasis> தேவைக்கு உருவாக்க பட்டு அத்தகைய சேவை தேவை 
பட்டவர்களுடன் பகிர்ந்து கொள்ள பட்டது.  அது ஒரு நோய்க்கு மருந்து கண்டு பிடித்து அந்த நோயை 
முற்றிலும் அழிக்கும் நோக்கில் அது உள்ள அனைவரிணடமும் பகிர்ந்து கொள்வது போன்றது.</para>

<para>இந்த அத்தியாயம் எவ்வாரு திரந்த மூல திட்டந்தினை அரிமுக படுத்துவது என்பதை பற்றியது,
ஆனால் இதன் கருத்துகள் பொரும்பாலும் மருந்து வினியோகம் செய்யும் நிவனத்தை சார்ந்திருப்பதை 
போன்று இருக்கலாம்.  அடிப்படை ஒன்றுதான்: அதாவது ஒரு சிரந்த மருந்தை உற்ப்பத்தி செய்து
அதை சரியானவர்களை தேர்ந்தெடுத்து அவர்களுக்கு அதன் பயன்பாட்டை புரியும் படி சேய்வதாகும்.
ஆனால் மென்பொருள் உற்ப்பத்தியில் நீங்கள் அதன் பயன் பாட்டாலரையும் வருங்கால ஆய்வு
மற்றும் மேன்படுத்துதலில் ஈடுபடும் படி தூன்டுவது அவசியம் ஆகிரது.</para>

<para>இலவச மேன்பொருள் வினியோகம் இரட்டிப்பு பணியாகும்.  அந்த மென்பொருள் பயன்
பாட்டாளர்களை ஈர்ப்பது மற்றம் உருவாக்குபவர்களை ஈர்பதும் அவசியம் ஆகின்றது.  இந்த தேவைகள்
ஒன்றுக்கு ஒன்று முரன் பட்டவை அல்ல, ஆயினும் அறிமுகம் செய்வதில் சில ஆரம்ப சிக்கல்கள் 
ஏர்படுத்த கூடியவை. சில தகவல்கள் இரு சாராருக்கும் அவசிமாகவும் மற்ற சில ஒரு சாராருக்கு மட்டும் 
பயனுள்ளதாய் அமைந்து விடும்.  இரண்டு வகையான தகவல்களும் ஓரு சிரந்த அரிமுத்திற்கு சரியான
அலவில் தேவை படுகின்றன; அதாவது, படிப்பவரின் அந்த கட்டதிற்று தேவையான நேரம் மற்றும் 
அற்றல் அடிப்படையின் தகவல்கள் சேர்க்கபட வேண்டும்.  அதி ஆற்றல் அதி பயண் தரவல்லதாக இருக்க
வேண்டும்.  இவ்வாரு அவை இரண்டும் சரிசீராக அமையாவிட்டால் மக்கள் அதிலை ஆர்வம் மற்றும்
நம்பிக்கை இலக்க வாய்பு உள்ளது.</para>

<para>இவற்றான் தோன்றும் நியாயமான முடிவு என்ன வென்றால்<emphasis>வழங்கப்படும் தோற்றம் 
அடிப்படை முக்கியத்துவம் வாய்ந்தது</emphasis>.  உருவாக்குபவர்கள் பொதுவாக இதனை 
ஏற்று கொள்வது இல்லை.  தொழில் திரமையில் பெருமிதம் கொள்வது அவர்களின் அடிப்படை
ஆர்வம்.  இதனால் இயற்கையாகவே அவர்கள் சந்தை படுத்துதல் மற்றும் மக்கள் தொடர்பில்
மிகவும் வெருப்பு காட்டுவது, தொழில் முரை வலைதல வடுவமைப்பவர்கள் பலமுரை 
உருவாக்குபவர்களின் கடும் தாக்கத்தினை சந்திக்க வேண்டியுள்ளதும் ஆச்சர்யமானது அல்ல.
</para>

<para>இது அருவருக்க தக்கது, ஏன் என்றால் சில சமயங்களில் <emphasis>வடிவமைத்தல்
</emphasis> முக்கியகாறணி, அரிமுப்படுத்துதல் அத்தகைய வடிவமைக்கும் செயல்தான்.
உதாரனமாக, ஒரு வருகையாளர் ஒரு திட்டதை பற்றி தவணிக்கும் முதல் செயல் அதன்
வலைதலம் எவ்வாரு காட்சி அளிக்கின்றது என்பதுதான்.  அந்து மற்ற அவசியமான் தகவல் 
புரிந்து கொள்வதர்க்கு முன்பே அதன் கவர்ந்துகொள்ள படுகின்றது&mdash;ஏதேனும் சுட்டியினை
இயக்கு முன் அல்லது எழுதியவற்றை படிக்கும் முன்பே.  அது அநீதியாக இருக்கலாம், ஆயினும்
முதல் கருத்துப்பதிவு உருவாக்கும் தோற்றத்தை யாராலும் தடுக்க இயலாது.  ஓரு தளத்தின் 
தோற்றம் திட்டத்தின் அறிமுகம் செய்தல் எத்தகைய அக்கறையுதடன் செய்யப்பட்டது என
காட்டுகின்றது. அக்கறையை மதிப்பிட மிக சிரந்த தனிக்கை கருவியை மனிதர்களிடம் இயல்பாக
உள்ளது. நம்மில் பெரும்பாலானவர்கள் முதல் பார்வையிலேயெ ஒரு தளம் சிரந்த அக்கறையுடன்
உருவாக்க பட்டதா அல்லது மிகவும் அவசரமாக செய்து முடிக்க பட்டதா என்பதை கூரவிடுவர்.
இதுவே ஒரு திட்டத்தின் முதல் தகவல் மேலும் இது மீதமுள்ள அனைது பகுதிகளுக்கும்
ஒரு தொடர்ந்த தாக்கத்தை ஏர்ப்படுத்தும்.</para>

<para>எனவே இந்த அத்தியாயத்தின் பெரும்பான்மையான பகுதி எத்தகைய தகவல்கள் கொன்டதாக
உங்கள் தளம் அமைய வேண்டும் என்பதை விவாதிக்கிரது, தோற்றம் மற்றும் பருப்பொருள் அமைப்பின்
முக்கியத்துவத்தையும் மறக்க வேண்டாம். இந்த தளம் இரண்டுவிதமான விருந்தினர்களுக்கும் 
பொதுவானதாக உள்ளதால்&mdash;பயனர்கள் மற்றும் உருவாக்குபவர்கள்&mdash;மிகவும்
கவனத்துடன் தெளிவு மற்றும் வழிகாட்டுதல் தகவல்களை கொடுக்க வேண்டும். இது வலை
வடிவமைப்பு பற்றிய ஒரு ஆய்வுக்கட்டுரை இல்லை என்றாலும், ஒரு கொள்கை பற்றி
குறிப்பிட வேண்டியுள்ளது, முக்கியமாக ஒரு தலம் பலதரப்பட்ட பார்வையாளர்களை பொற்றுள்ள 
போது: அவர்கள் ஒரு எந்த சுட்டியை பயன்படுத்தினால் எங்கு இட்டு செல்லும் என்ற
தோராயமான தோற்றம் அதனை இயக்காமலே பெர வேண்டும்.  உதாரணமாக, ஒரு 
<emphasis>இனைப்பை பார்பதில் இருந்தே</emphasis> அது பயனர் ஆவணத்தின் இணைப்பு
என்றும் நிச்சமாக உருவாக்குபவர்களுக்கு கொடுக்கப்பட்டது இல்லை என்றும் வெளிப்படையாக தொரிய
வெண்டும்.  தலந்தை இயக்குவது தகவல் வழங்க என்றாலும் அது வசதி அளிப்பதாகவும் இருக்க
வேண்டும்.  ஒருசில இணக்கமான காரணிகள், எதிர்பார்க்கப்படும் இடங்களில், வழங்கப்படுவது
பயனர் மற்றும் உருவாக்குபவர்கள் ஈடுபட வேண்டும் என்பதை தீர்மானிக்கும். இது அந்த திட்டம்
அதன் அனைத்து கூருகளையும் ஒருங்கினைத்து கொடுத்துள்ளதா, அனைவரும் கேட்க்க விழையும் 
கேள்விகள் மற்றும் அவற்றிக்கு மிக எளிதில் புரிந்து கொள்ளும்படி முயற்சி எடுத்து பதில்கள் 
கூரப்பட்டுள்ளதா என்பதை எல்லாம் குறிக்கிரது.  அப்படு கொடுக்கபட்ட சிரந்த தோற்றத்தால்
அந்த திட்டம் வழங்கும் செய்தி: “நீங்கள் பங்கு இதில் பெருவதால் உங்கள் நேரம் விரயம் ஆகது”
அதைத்தான் அனைவரும் கேட்க விரும்புவர்.</para>

<para>நீங்கள் “தொகுக்கபட்ட வழங்கு தலங்களை”(canned hosting) பயன் படுத்தினால்
(see <xref linkend="starting-with-canned-hosting"/>), ஒரு சிரந்த பயன்
அது ஒரேமாதிரியான திட்டங்களுகு பொதுவான அடிப்படை பரவமைப்புகள் வழங்குகின்றது, மேலும்
அது அறிமுகம் செய்ய எளிதானது.  அந்த பரவமைப்புகளை சிரப்பு மாற்றங்கள் செய்ய இயலும், சில 
அடிப்படை கட்டுப்பாடுகளுடன் இருந்தாலும் அதன் அடிப்படை பரவமைப்பு பயனர்களுக்கு தேவைபடும்
முக்கிய தகவல்களை வழங்க தூன்டுதலாக உள்ளது.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>ஆனால் முதல், சுற்றி தேடி பாருங்கள்</title>

<para>ஒரு திறந்த மூல திட்டம் துவங்குவதற்கு முன், முக்கியமான எச்சரிக்கை ஒன்று உள்ளது:
</para>

<para>எப்போதும் முதலில் நீங்கள் வேண்டும் சேயல்கள் செய்யும் திட்டம் ஏற்கனவே உள்ளதா
என்று சுற்றி தேடி பாருங்கள்.  நீங்கள் தீர்க்க உள்ள பிரச்சனைகளை வேறு யாராவது உங்களுக்கு முன்
தீர்த்து இருக்க வாய்ப்புகள் அதிகம் உள்ளது.  அவ்வாரு தீர்க்கப்பட்டு அவர்கள் அதை 
கட்டற்ற மென்பொருளாக வழங்கி இருந்தால் அதை நீங்கள் மீன்டும் சேய்வது அவசியம் அற்றது.
இறுப்பினும் அவ்வாரு தேடுவதற்கும் விதிவிலக்கு உள்ளது: உங்கள் ஆய்விர்க்காக நீங்கள் உருவாக்க 
நினைத்தால் ஏற்கனவே குறியீடுகள் இருந்தாலும் பயன் அற்றது; அதேபோல் நீங்கள் உருவாக்குவது 
முற்றிலும் தனித்துவம் பெற்றது என்றாலும் மற்றவர் உருவாக்கி இருக்க முற்றிலும் வாய்ப்பு இல்லை.
பொதுவாக தேடி பார்ப்பது ஒன்றும் தேவையற்ற செயல் அல்ல அதன் பயன் மிக அதிகமாக இருக்கும்.
உங்களில் தேடு பொறி எந்த திட்டங்களையும் காட்ட வில்லை எனில், நேரடியாக 
<ulink url="http://github.com/" >github.com</ulink>, on <ulink
url="http://ohloh.net/" >ohloh.net</ulink>, <ulink
url="http://freecode.com/" >freecode.com</ulink>, on <ulink 
url="http://www.sourceforge.net/" >sourceforge.net</ulink>, மற்றும்
கட்டற்ற மென்பொருள் அறக்கட்டளையின் அகராதியில்
<ulink url="http://directory.fsf.org/"
>directory.fsf.org</ulink> தேடி பேருங்கள்.</para>

<para>நீங்கள் தேடுவது சரியாக கிடைக்கா விட்டாலும், அதற்கு மிகவும் இனையானது 
உங்களுக்கு கிடைக்கலாம் மேலும் ஆரம்பத்தில் இருந்து உருவாக்காமல் சில செயல்பாடுகளை   
மட்டும் அதில் இனைந்து நீங்கள் உருவாக்கலாம்.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>உங்களிடம் இருப்பதில் இருந்து துவங்குதல்</title>

<para>நீங்கள் தேடி பார்த்து, நீங்கள் விரும்பியது போல் உங்கள் தேவையை எதுவும்
சரியாக செய்வது போல் தோன்றவில்லை என்ற உடன், நீங்கள் புதிதாக ஒரு திட்டத்தை 
நீங்களாகவே உருவாக்க நினைக்கிறீர்கள்.</para>

<para>இப்பொழுது என்ன?</para>

<para>கட்டற்ற மென்பொருள் திட்டம் நிருவ உள்ள கடுமையான பிரச்சனை தனிப்பட்ட 
நோக்கத்தை பொதுவான ஒன்றாக மாற்றுவதை.  உங்களுக்கு அல்லது உங்கள் நிறுவனத்திர்க்கு 
அதன் தேவை பற்றி உள்ள தெளிவான எண்ணம் உலகிற்கு புரியும்படி எடு கூருவது மிகவும் சிரம்மான
ஒன்று.  நீங்கள் மற்ற நிறுவுனர்களுடன் இனைந்து சில முடிவுகள் எடுக்க வேண்டும் அதில் 
உங்கள் திட்டம் உண்மையில் என்ன&mdash;அதாவது அதன் வரம்புகள், அது எதை <emphasis>
செய்யாது</emphasis>மற்றும் அது எதை செய்யும்&mdash; என்பது மற்றும் அதை பற்றிய ஒரு 
பணி அறிக்கை எழுதுவது பற்றி.  இது பொதுவாக மிக கடினமானது அல்ல, ஆனால் இது சில 
சமயன் சொல்லப்படாத ஊகங்கள் மற்றும் அந்த திட்டத்தின் மீது உள்ள கருத்து வேறுபாடுகளை 
வெளிப்படுத்தும், காலதாமதமாக இல்லாமல் இப்போது அவை தோன்றுவது நல்லது இப்போதுதான் 
அவற்றை எளிதில் தீர்க்கவும் இயலும்.  அடுத்த படி, திட்டத்தை பொது நுகர்வுக்காக தொகுப்பது,
மேலும் உண்மையில் அது வேலைபளு உள்ள செயல்.</para>

<para>அது மிகவும் கடினமாக இருப்பதற்கு காரணம் அதில் அனைவரும் ஏற்கனவே அறிந்தவற்றை
தொகுத்து ஆவணப்படுத்துதல்&mdash;”அனைவரும்”, அதாவது அதில் இப்போதுவரை ஈடுபட்டவர்கள்
அனைவரும்.  அதனால் அவர்களுக்கு எந்த உடனடி பயனும் இல்லை. அவர்கள்
திட்டத்தின் கண்ணோட்டம் பெற <filename>README</filename> கோப்பினை படிக்க 
அவசியம் இல்லை.  அவர்களுக்கு ஏற்று கொள்ள பட்ட நியமங்களை பின்பற்றி நன்கு கவணத்துடன
குறியீடுகளை ஏற்பாடு செய்ய வேண்டியது இல்லை.  குறியீடுகள் எப்படி அமைக்க பட்டு இந்தாலும்
அது அவர்களுக்கு கவலை இல்லை, அது இயங்கும் எனில் அவர்களுக்கு எப்படி பயன்படுத்த
வேண்டும் என்பது தேறியும்.  அதன் அடிப்படை கட்டமைப்பு நன்கு ஆவணப்படுத்த படாமல்
இருந்தாலும் அவர்களுக்கு கவலை இல்லை; அதை அவர்கள் நன்கு அறிந்திருப்பார்கள்.</para>

<para>அதே சமையம் புதியவர்களுக்கு அது முற்றிலும் அவசியம் தேவை.  நல்ல வேலையாக
அவர்களுக்கு அது உடனடி தேவையாக இருக்காது.  பொது நுகர்வுக்கு கொடுக்கும் முன
அனைத்து விதமான சாதனங்களையும் கொடுக்க வேண்டிய அவசியம் கிடையாது.   ஒரு பரிபூரண 
உலகில், அனைத்து புதிய கட்டற்ற மென்பொருள் திட்டங்களும் முழுமையான திட்ட வடிவம், பயனர்
கையேடு(எவை செயல்பாட்டிலும் எவை வருங்கால திட்டத்திலும் உள்ளன என்ற தெளிவான குறிப்புடன்),
அழகாக தொகுக்க பட்ட குறியீடு, அனைத்து தலங்களிலும் இயங்க கூடிய தன்மை, மற்றும் பல பண்புகளுடன்
தோன்றுகிறது. நடைமுரையில் இத்தகைய சாதனங்கள் அனைத்தும் காலம் தால்துபவை மற்றும் 
இதில் திட்டம் துவங்கியபில் மற்றவர்கள் உதவ வாய்ப்புகள் அதிகம்.</para>

<para>எது <emphasis>அவசியம்</emphasis> என்றால், புதியவர்கள் எந்த தங்கு தடையும் இன்றி
புரிந்து கொள்ள எளிமையான ஆரம்ப தடைகளை கடக்க அக்கரையுடன் நேரம் செலவிட்டு அரிமுக 
ஆவணம் தரிப்பது தான். இதை தொடக்க ஏற்றிக்கு ஒரு முதல் படி என நினைக்க வேண்டும், 
இது திட்டத்தின் ஆரம்ப நிலைக்கு குறைந்தபட்சம்  ஊக்கம் வர உதவும். நான் இந்த வாசற்படியை 
<firstterm>ஹாக்டிவேஸன் ஆற்றல்</firstterm> என கேட்டிருக்கிறேன்: புதுமுகம் ஒருவர்
அழிக்கும் ஆற்றலில் ஒரு அளவு திரும்பி பெரமுடியும் என்ற என்ம் அவருக்கு தோன்ற வேண்டும். 
உங்களு முதல் குறிக்கோள் அந்த ஹாக்டிவேஸன் ஆற்றல் அளவு குறைத்து மற்றவர்களுக்கு ஊக்கம்
தர வேண்டியதுதான்.</para>

<para>கீழ் உள்ள ஒவ்வொரு துனை பகுதிகளும் புதிய திட்டத்தை உருவாக் வேண்டிய ஒரு குறிப்பிட்ட
காரணியை விளக்கு கின்றன.  அவை பொதுவாக பயனர் எப்படி எதிர் பார்ப்பார் என்ற அடிப்படையில்
தொகுக்க பட்டுள்ளன, ஆயினு உங்கள் தயாரிப்பு முற்றிலும் மாருபட்டு இருக்கலாம்.  இவற்றை 
நீங்கள் ஒரு ஒப்பீட்டு மாதிரி போன்று பயன் படுத்தலாம்.  ஒரு திட்டத்தை துவங்கும் முன்னர் அவை
அனைத்தும் உள்ளனவா இல்லை என்றால் அதன் விலைவுகள் என் என்பதையும் தெரிந்து கொள்ளுங்கள்.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>ஒரு நல்ல பெயர் தேர்வு செய்யுங்கள்</title>

<para>நீங்கள் உங்களை உங்கள் திட்டத்தை பற்றி தொரிந்து கொண்ட ஒரு புதியவராக நினைத்து பாருங்கள்,
அவர் பொதுவாக சில கடினமான செயல்களுக்கு மென்பொருள் தீர்வு காண தெடதல் நடத்துபவராக இருந்திருப்பார். 
அவர் முதலில் பார்ப்பது உங்கள் திட்டத்தின் பெயராக இருக்கு.</para>

<para>ஒரு நல்ல பெயர் உங்கள் திட்டத்தை கண்டிப்பாக வெற்றி பெற்றதாகவோ அல்லது கெட்ட பெயர்
கண்டிப்பாக தோல்வியை தேடித்தரும் என்றோ செல்ல இயலாது\&mdash;உண்மையில்,
<emphasis>மிக மோசமான</emphasis> பெயர் அப்படி செய்யலாம், நமது அனுமானம் அப்படி 
தோழ்வியை எதிர் பார்த்து எவரும் திட்டத்தை உருவாக்குவது இல்லை.  ஆனால் தவரான பெயர் அதை 
நினைவுகூர கடினமாகவும் அல்லது எவரு அதர்க்கு முக்கியதுவம் தராமலும் போக செய்யலாம்.</para>

<para>ஒரு நல்ல பெயர்:

<itemizedlist>
  <listitem><para>அதன் அடிப்படை செயல் பாட்டை அல்லது அதன் செல் எதை சார்ந்துள்ளது
            என்பதை குறிக்கும், அதனால் அந்த பெயரை நினைக்கும் போது அதன் செயல்பாடு
            நினைவு கூருவதும் எளிதாக அமைந்துவிடும்.</para>
  </listitem>
  <listitem><para>நினைவில் கொள்ள எளிதானது.  ஆங்கிலம் இனையத்தின் பொது மொழியாக
            இருப்பல்: “நினைவு கூர எளியது” என்றால் அது “ஆங்கிலம் பேசுபவர்க்கு நினைவு 
            கூர எளியது” என கூருவதில் எந்த சுற்றி வலைப்பதும் இல்லை; அதனால் தாய்மொழி
            உச்சரிப்புக்கு முக்கியத்துவம் உள்ள பெயர் என்றால் மற்ற மொழி பேசுபவர்க்கு அது மிக 
            கடினமாக இருக்கும்.  அது அவ்வாரு பெயரிட அவசியம் இருந்து அது நினைவு கூர கடினமாக
            இல்லை எனில் முயற்ச்சிப்பது தவறில்லை;  ஆயினும் மற்றவர்கள் அதனை சரியாக
            உச்சரிப்பார்கள் என கருத இயலாது.</para>
  </listitem>
  <listitem><para>அது வேரு ஒரு திட்டத்தின் பெயராகவோ அல்லது பதிப்பு முத்திரை பெயர் மீரலாகவோ
            இருக்காது.  இது ஒரு சிரந்த பண்பு மட்டும் இன்றி சட்ட சிந்தனையுடன் செய்யப்பட்டது.  நீங்கள்
            அடையாள குழப்பம் உருவாக்க விரும்ப மாட்டீர்கள்.  அது இணையத்தில் ஏற்கனவே உள்ளதா 
            என்று கண்காணிக்க கடுமையாக இருக்கும்.</para>

            <para>முந்தைய பகுதியில் குறிப்பிடப்பட்டுள்ள வளங்கள்
            <xref linkend="look-around"/> அதர்க்கு பயன் உள்ளதாக இருக்கும்.  
            அமேரிக்க காப்புரிமை பெற்ற முத்திரை பெயர்களை இதில் தேடலாம்
            <ulink url="http://www.uspto.gov/">uspto.gov</ulink>.</para> 
  </listitem>
  <listitem><para>சாத்தியம் இருப்பின் பின் வரும் மேல் தள இனையத்தில் இருக்கும்
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, மற்றும்
            <systemitem>.org</systemitem>.  நீங்கள் ஏதேனும் ஒன்றை, 
            உதாரனமாக <systemitem>.org</systemitem>, உங்கள் திட்டத்தின்
            அதிகார பூர்வமான தளமாக தேர்வு செய்ய வேண்டும்; மற்ற இரன்டையும்
            அதர்க்கு முன் அனுப்புமாரு வழி செலுத்த வேண்டும் அது மற்றவர் அந்த 
            தளப்பெயரை பதிவு செய்து குலப்பம் ஏற்ப்படுத்தாமல் இருக்க உதவும்.
            ஒருவேலை நீங்கள் உங்கள் திட்டத்தை தொகுக்க பட்ட வேரு தளம் வழியாக 
            அரிமுகம் சேய்ய நினைத்தாலும்  (see
            <xref linkend="starting-with-canned-hosting"/>), அதை
            உங்கள் தனித்துவமான தளத்தின மூலம் முன் அனுப்புமாரு செய்யலாம்
            இது பயனாலர்களுக்கு எளிதில் நினைவு கூரும்மாரு அமையும்.</para>
  </listitem>
  <listitem><para>சாத்தியம் இருப்பின் பின், அது <ulink
            url="https://twitter.com/" >Twitter</ulink> மற்றும் ஏனய
            பலுக்கல் தளங்களில் பயனர் பெயராக இருக்கும்.  இதை பற்றிய மேலும் விவரங்களுக்கு
            <xref linkend="own-the-name"/>-ஐ காண்க.</para>
  </listitem>
</itemizedlist>

</para>

<sect3 id="own-the-name">
<title>முக்கியமான பெயர்வெளிகளில் பெயரை பெற்றிருங்கள்</title>

<para>பெரிய திட்டங்களுக்கு, அதன் தொடர்புடைய பல தரப்பட்ட பெயர்வெள்களில்
பெயர் பதிவு பெற்றிருப்பது சிரந்ததாக இருக்கும்.  பெயர்வெளி என்று நான் குறிப்பிடுவது
தளப்பெயர்களை மட்டும் அல்லாமல் பொதுவெளியில் உள்ள சேவைகளில் கணக்கு பெயராக
(பயனர் பெயர்) பெற்றிருக்க வேண்டும், அது பொதுவாக அந்த திட்டத்தை பரிந்துரைக்க
உடவியாக இருக்கும்.  அனைத்து பொது வெளிகளிலும் ஒரே மாதிரியான பெயர்களை பதிவு
செய்திருந்தால் அது மற்றவர்களை உங்கள் திட்டத்தில் ஈடுபட தூன்டும் வகையில் இருக்கும்.</para>

<para>உதாரனமாக, ஜினோம் கட்டற்ற மேசைத்தள திட்டத்திர்க்கு <ulink
url="http://gnome.org/" >gnome.org</ulink> என்ற தள்ப்பெயர்
<footnote><para>அவர்கள் gnome.com அல்லது gnome.net என்ற பெயர்களை
பதிவு செய்ய பெறவில்லை, இருப்பினும் அது போதுமானது&nbsp;&mdash;&nbsp;
நீங்கள் பதிவு பெற்றிருப்பது .org மட்டும் இருந்தாலே போதுமானது.  அதுதான் பொதுவாக கட்டற்ற
மென்பொருள் திட்ட தளங்களின் முதலில் தேடப்படும் தளமாக இருக்கிரது.  அப்படி அவர்கள் 
"gnome.org" பெர இயலாமல் போனால் அதர்க்கு மாற்று வழி
"gnomeproject.org" என்ற தளத்தை பதிவு செய்யலாம் அவ்வாரு இத்தகைய குலப்பங்களை
தீத்து கொண்ட திட்டங்கள் நிரைய உள்ளன.</para></footnote>, 
<ulink url="https://twitter.com/gnome"
>@gnome</ulink> ட்விட்டர் கைப்பிடி, <ulink
url="https://identi.ca/gnome" >gnome</ulink>
Identi.ca பயனர்பெயர்<footnote><para> <ulink url="https://identi.ca/"
>Identi.ca</ulink> கட்டற்ற மென்பொருள் உருவாக்குபவர்கள் பயன்படுத்தும்
ஒரு பலுக்கல் / சமூக வலைப்பின்னல்; அதன் குறியீடு <ulink url="http://pump.io/" >
pump.io</ulink> என்ற தளத்தில் கட்டற்ற மென்பொருளாக தரப்பட்டுள்ளது. உருவாக்குபவர்கள்
சார்ந்த திட்டங்களுக்கு, அனைத்து திட்ட நிலைகளையும் குறுச்செய்திகளாக
&nbsp;&mdash;&nbsp;பேச்சுவழக்கில் "tweets" எனப்படும்&nbsp;&mdash;&nbsp;
Identi.ca மற்றும் Twitter இல் பதிவிட நான் பரிந்துரைக்கிறேன்.  Identi.ca பயனர்கள்
ட்விட்டர் பயனர்களை விட எண்ணிக்கையில் மிகக் குரைவு என்ற போதும் அவர்களி கட்டற்ற
திட்டங்களில் ஆர்வம் கொண்டவர்கள் மிக அதிக விழுக்காட்டில் உள்ளனர், நான் இதை
எழதகையில் 2013-ல் இத்தகைய நிலமை இருந்தது குரைந்து மற்றும் சில வருடம் அது
தொடரும்.</para></footnote>, <ulink url="https://github.com/gnome" >
gnome</ulink>என்ற GitHub.com பயனர்பெயர்<footnote><para>அதன் அடிப்படை குறியீடு
<ulink url="http://git.gnome.org/" >git.gnome.org</ulink>-ல் இருப்பினும், 
பெரும்பாலான உருவாக்குபவர்களுக்கு ஏற்கனவே கிட்ஹப் தெரிந்திருந்ததால் அவர்கள் கிட்ஹப்பில் 
ஒரு பிரதியையும் பராமரித்து வருகின்றனர்</para></footnote>, மற்றும் அவர்களுக்கான 
தனித்துவமான ஐஆர்சி தள வழங்கி இருப்பினும்(நிலய பெயர்வெளிகளை கட்டுப்படுத்தவே), 
freenode IRC இனைப்பில்(see <xref linkend="irc"/>) <code>#gnome</code> 
என்ற நிலையம் அமைத்துள்ளனர்.</para>

<para>
இவை அனைத்தும் ஜினோம் திட்டத்தை தேடுவதை மிக எளிதாக்கி உள்ளன: அதிப்படியான
பங்களிப்பாளர்கள் விரும்பும் வகையில் இது சிர்ந்த வழியாகும்.  ஜினோம் ஆயிரக்கணக்கான 
பங்களிப்பாளர்கள் மற்றும் கிளைகள் கொன்ட ஒரு மிகப்பெரிய மற்றும் கடினமான திட்டம்; 
எனவே ஜினோம் புதிய திட்டங்களைவிட எளிதில் தேடிகண்டுபிடிக்கும் படி அமைவது அவசியம், 
அதன் காரணமாக அதில் இனைந்து பங்களிக்க எளிதாக இருக்கும்.  அதே சமையம் உங்கள்
திட்டம் பலதரப்பட்ட தளங்களில் பெயர்வெளிகளை கொண்டிருப்பது கண்டிப்பாக
<emphasis>தவறானது</emphasis> அல்ல, மேலும் அது சில சமையம் உதவும்.  எனவே
நீங்கள் திட்டங்களை உருவாக்கும் பொழுது அதன் வலைதள கைபிடி எவ்வாரு இருக்க வேண்டும் 
என்பதை அறிந்து அதன் பெயர்களை நீங்கள் அதிகம் எதிர் நோக்கும் வலைதள சேவைகளில் 
பதிவு செய்து விடுங்கள்.  மேலே குறிப்பிட்ட அனைத்தும் சரியான துவக்கத்தை தரலாம் எனினும்
உங்களுக்கி மற்ற எவை தொடர்புடையதாக உள்ளதோ அவை அனைத்திலும் பதிவது அவசியம்.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>ஒரு தெளிவான குறிக்கோள் அறிக்கை வேண்டும்</title>

<para>திட்ட தளத்தை கண்டுபிடித்த பின்னர் அவர்கள் பார்க்க விரும்புவது திட்டத்தின்
சிரு குறிப்பு அல்லது குறிக்கோள் அறிக்கை, எனவே அவர்கள் மேலும் அரிந்து கொள்ள வேண்டுமா இல்லயா
என ஒரு முடிவிர்க்கு (30 நிமிடங்களுக்குல்) வர இயலும்.  அது முதல் பக்கத்தில் நிரந்தரமாக இடம்
பெர வேண்டும்.</para>

<para>அந்த விழக்கம் மிகவும் உருதியானதாகவும், எல்லையுடனும், மற்றும் அவற்றிக்கு எல்லாம் 
மேலாக, சுருக்கமானதாகவும் இருக்க வேண்டும்.  அதர்க்கு உதாரனமாக 
<ulink url="http://hadoop.apache.org/" >hadoop.apache.org</ulink>
இல் இருந்து:</para>

  <blockquote>
  <para><emphasis>Apache™ Hadoop® என்பது நம்பகமான, வழப்படுத்த கூடிய,
  ஒரு விரவல் கணினி திட்டம்.</emphasis></para>

  <para><emphasis>அப்பாச்சி ஹடூப் மென்பொருள் நூலகம் ஒரு கட்டமைப்பு அது
  விநியோகம் செயிது பெரிய தரவுகளை ஆய்வு செய்ய ஒரு நிரலாக்க மாதிரியை அமைக்கிறது. 
  இது ஒன்று முதல் ஆயிரக்கணக்கான தனி கணித ஆற்றல் மற்றும் சேமிப்பு கலன்கள் கொன்ட
  வழங்கிகள் வரை எளிமையாக மேன்மை படுத்த தக்க வகையில் வடிவமைக்கப்பட்டுள்ளது. நம்பகத்தன்மைக்கு
  வன்பொருளை சார்ந்து இல்லாமல், அந்தன் மென்பொருள் நூலகமே பழுதுகளை கண்டுனர்ந்து
  கையாலும், எனவே நம்பகத்தன்மையை பழுது பட கூடிய கணினி கொத்துகளுக்கே நேரடியாக 
  வழங்கு கின்றது.</emphasis></para>
  </blockquote>

<para>நான்கே வரிகளில், படிப்பவர்களில் முன் அரிவை முற்றிலும் சார்ந்து, அனைத்து முக்கிய
அம்சங்கள் அனைத்தையும் கூரி விட்டனர்.  அது ஓரு முக்கிய அம்சம்:  அதாவது ஒரு குறைந்த 
பட்ச தகவல் பெற படிப்பவர் தயார்நிலை நிலை உள்ளதாக கருதிக் கொள்வது பரவாயில்லை.
படிப்பவர் “கொத்துகள்” மற்றும் “அதிக நிலைப்புதன்மை” பற்றிய பொதுமான அரிவை பொற்றிருக்கவில்லை
என்றால் அவர்கள் ஹடூபால் எந்த பயனும் அடைய இயலாது, எனவே அப்படி பட்ட அடுப்படை பெராத
வர்களுக்காக எழுதுவது அவசியம் அற்றதாகிரது.  அந்த "பழுதுகளை செயலி மட்டத்திலேயே
கண்டுனர்ந்து கையாலும் வடிவமைப்பு" பெரிய அளவிலான கணின் கொத்துகள் பராமரித்து அனுபவம் மிக்க
பொறியாலர்களும்கு மட்டும் விழங்கும்&mdash;இத்தகைய வார்தைகளை அவர்கள் பாத்த மட்டிலேயே
ஹடூப் உருவாக்கியவர்கள் அதன் உலகத்தை புரிந்து கொண்டுள்ளதை அரிவர் மேலும் அதில் பங்களிக்க
விருப்புவர்.</para>

<para>குறிக்கோள் அறிக்கை படித்த பின்னர் ஆர்வமாக இருப்பின் மேலும் அரிந்து கொள்ள விரும்புபவர்கள்,
பொதுவாக உருவாக்குபவர் அல்லது பயனர் கட்டூரைகள், மேலும் சில வற்றை பதிவிரக்க விரும்புவார்கள்.
அப்படி செய்யும் முன்னர் அவர்கள் அது கட்டற்ற மென்பொருளா என தெரிந்து கொள்வர்.
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>இது கட்டற்ற திட்டம் என்று அறிவித்து விடுங்கள்</title>

<para><emphasis>முதல் பக்கம் மிகவும் தெளிவாக இது ஒரு கட்டற்ற திட்டம் என்று எந்தவித குழப்பங்களும் 
இன்றி அறிவிக்கும் படி இருக்க வேண்டும்.</emphasis>  இது அவசியமானதாக தோன்றினாலும் அதை
எப்படி பல திட்டங்கள் தவரி விட்டன என்பது வியப்பாக இருக்கும்.  நான் பல கட்டற்ற திட்ட தளங்களில் அவை
கட்டற்ற திட்டங்கள் என்ற அரிவிப்பை முதல் பக்கத்தில் காணவில்லை அது மட்டும் இன்றி,  இது கட்டற்ற திட்டம்
என்று அப்பட்டமாக தெளிபடுத்தும் அறிவிப்பு கூட இல்லாமல் இருந்திருக்கின்றன.  சில சமையம் இத்தகைய
அதி முக்கிய குறிப்புகள் பதிவிரக்க பக்கம், அல்லது உருவாக்குபவர்கள் பக்கம், அல்லது ஒரு சில சுட்டி இயக்கங்கள்
தேவைபடும் வேரு ஏதேனும் பக்கங்களில் பயன் படுத்தி இருக்கலாம்.  இன்னும் அதீதமான திட்டங்களில் அதன்
உரிமம் பற்றி வலை தளத்தில் எங்கும் வழங்கப்படவில்லை&mdash;அதை கண்டுனர ஒரே வழி அதனை பதிவிரக்கி
அதன் உரிமம் பற்றிய கோப்பினை சரிபார்த்தல் மட்டுமே.</para>

<para>தயவு கூர்ந்து அத்தகைய தவறை செய்ய வேண்டாம்.  அத்தகைய அலட்சியப்படுத்துவதனால் பல பயனர்கள்
மற்றும் உருவாக்குபவர்களை இலக்க நேரிடலாம்.  ஆரம்பத்திலேயே, குறிக்கோள் அறிக்கைக்கு கீழாகவே, 
மிகத்தெளிவாக இது “கட்டற்ற மென்பொருள்” அல்லது “திரந்த மூல திட்டம்” என்பதை குறிப்பிடுக மேலும் அதன்
மிகச்சரியான உரிமம் பற்றியும் குறிப்பிடுக.  உரிமங்களை தேர்வு செய்ய ஒரு சிரந்த வழிகாட்டுதல் 
<xref linkend="license-quickstart"/><phrase output="printed"> என்ற பின்வரும் பகுதியில்
தரப்பட்டுள்ளது</phrase>, மற்றும் உரிமம் சார்ந்த சிக்கல்கள் பற்றி விரிவாக <xref linkend="legal"/>
விவாத்க்க பட்டுள்ளது.</para>

<para>இந்த நிலையில், நமது அனுமான பார்வையாளர் &mdash;ஒன்று அல்லது குறைவான
நிமிடத்திலேயே&mdash; பங்களிக்க விரும்புவதாக தீர்மானித்து இருப்பார், பின், இன்னும் ஐந்து நிமிடம் 
அதிகப்படியான ஆய்வு நேரம் செலவிடுவதாக கருதிலான்.  பின்வரும் பகுதி அந்த ஐந்து நிமிடந்தில் 
பார்க்க வேண்டியது என்ன என்பதை விளக்குகிறது.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>அம்சங்கள் மற்றும் தேவைகளின் பட்டியல்</title>

<para>அந்த திட்டதின் அம்சங்கள் என்ன எனபதை பற்றிய ஒரு சிறிய பட்டியல் 
(ஏதேனும் நிறைவு பெறாமல் இருப்பினும் நீங்கள் "<emphasis>திட்டமிடப்பட்டுள்ளது</emphasis>" 
அல்லது "<emphasis>செயல்நிலையில் உள்ளது</emphasis>" என்ற குறிப்புடன் இங்கு பட்டியல் 
இடலாம்), மற்றும் எந்தவிதமான கணினி சூழல் இயக்க தேவைப்படும் என்றும் குறிப்பிட வேண்டும்.  
உங்கள் திட்டம் பற்றி விவரம் கேட்பவருக்கு எதை சொல்ல விரும்புவீர்கள் எனபதை நினைத்து
அம்சங்கள்/தேவைகளின் பட்டியலை உருவாக்குங்கள்.  இதை நியாயப்படி குறிக்கோள் அறிக்கையின்
பொருத்தமான விரிவாக்கமாக என்னலாம்.  உதாரனமாக, குறிக்கோள் அறிக்கை பின்வருமாரு கூரலாம்:
</para>

  <blockquote>
  <para><emphasis>அதிக என்னிக்கையில் ஆன கோப்புகளில் தேடல் மற்றும் சுட்டுவரிசையாக்கம்
  செய்ய கூடிய தேடல் இயந்திரம் ஒன்றை உருவாக்குபவர்கள் பயன் படுத்தும் வகையில் சிரப்பான API   
  தொகுப்புகளுடன் உருவாக்குவது.</emphasis></para>
  </blockquote>

<para>அம்சங்களை மற்றும் தேவைகள் பட்டியல் குறிக்கோள் அறிக்கை பற்றிய விளக்கங்கள் இவ்வாரு
தரலாம்:</para>

  <blockquote>
    <para><emphasis>அம்சங்கள்:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>சாதாரன உரை, HTML மற்றும்
           XML வடிவங்களை தேடவல்லது</emphasis></para>
      </listitem>
      <listitem><para><emphasis>சொல் அல்லது வாக்கிய தேடல்</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(திட்டமிடப்பட்டுள்ளது) தெளிவற்ற பொருத்தம்(Fuzzy matching)
      </emphasis></para>
      </listitem>
      <listitem><para><emphasis>(திட்டமிடப்பட்டுள்ளதுs) சுட்டு வரிசைகளை வளர்ச்சிக்கு
      தக்கவாரு புதுப்பித்த்</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(திட்டமிடப்பட்டுள்ளது) தொலை வலை தள அட்டவனை படுத்துதல்
      </emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>தேவைகள்:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 அல்லது அதனினும் புதியது</emphasis></para>
      </listitem>
      <listitem><para><emphasis>சுட்டு வரிசைகளை சேமிக்க தேவையான இடம்
                (தரவுகளை விட சுமார் இரண்டுமடங்கு)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>இந்த தகவலுடன், வாசகர்கள் அதில் வேலை செய்ய ஏதேனும் நம்பிகை உணர்வை பெற முடியும், 
மேலும் அவர்கள் அதில் உருவாக்குபவராக இனையவும் கூடும்.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>வளர்ச்சி நிலை</title>

<para>பார்வையாளர்கள் வழக்கமாக ஒரு திட்டம் எத்தகைய நிலையில் உள்ளது என்பதை அறிந்து கொள்ள
வேண்டும்.  புதிய திட்டங்களுக்கு, அவர்கள் திட்ட வாக்குறுதி மற்றும் அதன் தற்ப்போதைய நிலை பற்றி
தெறிந்து கொள்ள விரும்புவர்.  முதிர்ந்த திட்டங்களுக்கு, அது எவ்வாரு தொடர்ந்து பராமரிக்கப்படுகிறது,
அதன் புதிய வெளியீடுகள் சீரான இடைவெளியில் வழிங்கப்படுகிறதா, பிழை அறிக்கைகளுக்கு எப்படி 
பதிலளிக்க படுகிறது, மற்றும் பல தகவள்களை அவர்கள் தெறிந்து கொள்ள விரும்புவர்.</para>

<para>இந்த கேள்விகளுக்கு பதில் கூர வெவ்வேறு வழிகள் உள்ளன.  அதில் திட்டத்தின் குருகிய 
கால நோக்கங்கள் மற்றும் தேவைகள் பற்றி பட்டியல் கொன்ட திட்ட நிலை பக்கம் இருப்பதும் ஒன்று
(உதாரணமாக, அதில் ஒரு குறிப்பிட்ட வகையான நிபுணத்துவம் உள்ள உருவாக்குபவர்களில் தேவை 
பற்றி குறிப்பிடுவது).  அதில் கடந்த வெளியீடுகளின் வரலாறு, அதன் அம்சங்கள் பட்டியல் கொடுக்க 
முடியும், அது பற்வையாளர்களுக்கு திட்டத்தின் "முன்னேற்றம்" எவ்வாரு வரையறை செய்யபட்டு,
அதன் படி எவ்வளவு விரைவாக முன்னேற்றம் பெறுகிரது என அறிய உதவும்.  சில திட்டங்கள் தங்கள்
வளர்ச்சி நிலை பக்கம் ஒரு திட்ட அறிக்கை போன்று அதன் வருங்கால அம்சங்களுடன் கொடுத்துள்ளனர்:
கடந்த கால நிகழ்வுகள் அவை நிகல்ந்த சரியான தேதியுடனும், வருங்கால திட்டங்களை அவை நடங்க
எதிர்பார்க்க படும் தேதியுடனும் குறிப்பிட பட்டு இருக்கும்.</para>

<para>மற்றொரு முறை&nbsp;&mdash;&nbsp;முதலில் கூரியதில் இருந்து முற்றிலும் வேறுபட்டது 
அல்லாமல், மேலும் அதனுடன் இனைத்து செயவதால் சிறந்ததாகவும் இருக்கும்&nbsp;&mdash;&nbsp;
பல்வேரு பட்ட தானியங்க கூடிய குறியீடுகள் மற்றும் காரணிகளை அந்த திட்ட முதல் பக்கத்தில் அல்லது/மேலும்
உருவாக்குபவர்களில் பக்கத்தில், சேகரிக்கபட்ட பல முக்கிய தகவளுடன் தருவது திட்டத்தின் வளர்ச்சி பற்றிய
தேற்றத்தை உருவாக்கும்.  உதாரணமாக, புதிய செய்திகளை அல்லது அறிவிப்பை பற்றிய டிவிட்டர் அல்லது
குறு செய்தி தளங்களில் காட்டுவது, திட்டத்தின் வளர்ச்சியுடன் தொடர்புடைய புதிய வெளியீட்டின் கால 
அளவை குறிப்பது, பிழை நிகழ்வுகளை காட்டுவது(பிழை பதிவுகள், பதில் கூரப்பட்ட பிழைகள் அனைத்தும்),
அஞ்சல் பட்டியல் மற்றும் கருத்துகளை விவாதிக்கும் மன்ற நிகள்வுகளை இனைப்பது போன்ற பலவற்றை கூரலாம்.
அப்படி பட்ட அனைத்து காரணிகளும் அதன் தொடர்பான மற்ற விவரங்களை கோடுக்க வேண்டும்: உதாரணமாக,
"புதிய பிழைகள்" என்ற இனைப்பு பிழை தொகுக்கும் பக்கதிர்க்கு இட்டு செல்ல வேண்டும் அல்லது குறைந்தது
விரிவாகி மேலும் தகவள் தர வேண்டும்.</para>

<para>உண்மையில், சிரிய வேருபாட்டுடன் கூடிய இரண்டு விதமான "வளர்ச்சி நிலைகள்" இங்கு விழக்க பட்டுள்ளன.
ஒன்று முறைப்படி கூரப்பட்டது: அதில் திட்ட நிலைபாடு குறிப்பிட்ட இலக்குகளுடன் எத்தகைய நிலையில் உள்ளது,
மற்றும் எவ்வளவு விரைவாக முன்னேறி செல்கிரது எனபது விழக்க பட்டிருக்கும்.  மற்றது சற்று முறை சார்ந்தது இல்லை
அனால் பயனுள்ளது: திட்டம் எவ்வாரு துரிதமாக நடைபெருகிறது? ஏதேனும் நிகழ்ந்து கொண்டு உள்ளதா?
எவரேனும் இப்போது செயல்களை செய்து முடிக்க உள்ளனரா? போதுவாக அந்த கடைசி கேள்விக்கு இல்லை என்ற
பதிலைதான் புதியவர்கள் எதிர் பார்ப்பார்கள்.  அந்த திட்டம் தனது அன்மைகால குறிக்கோளை அடைந்ததா இல்லையா
என்பதை விட அதில் செயல் பாடுமிக்க குழு உள்ளதா என்பதே மிக முக்கியமான கேள்வி.</para>

<para>அந்த இரண்டு விதமான வளர்ச்சி நிலைகள், நிச்சயமாக தொடர்புடையது மேலும் நன்கு அறிமுகம் சேய்ய பட்ட
ஒரு திட்டம் இரண்டையும் பெற்றிருக்கும்.  தகவல்கள் வேண்டுமானால் முதல் பக்கம் (போதுமான வகையில 
இரண்டுவிதமான வளர்ச்சி பற்றிய தகவல்களுடன்) மற்றும் முற்றிலும் உருவாக்குபவர்கள் சார்ந்த பக்கம் இரண்டிலும்
பிரித்து வலங்கப்பட்டு இருக்கலாம்.</para>

<sidebar id="launchpad-status-indicators">
<title>உதாரணம்: லாஞ்ச்பேட் நிலைமை குறிகாட்டிகள்</title>
<para>Launchpad.net உருவாக்குபவர்கள் சார்ந்த பக்கம் அமைப்பதை சிற்ப்பாக செய்துள்ளது.
Launchpad.net சற்று வித்தியாசமானது அது மற்ற திட்டங்களுக்கு வளங்கு தளமாகவும் மற்றும்
மற்ற வருக்கு தொகுப்பு சார்ந்த தளமாகவும் உள்ளது(அல்லுது, அத்தகைய திட்டங்களுக்கு குனு/லினக்ஸ்
இயங்கு தளத்தில் தொகுக்க மட்டும் பயன்படுகிறது).  எவ்வாரு இருப்பினும் திட்ட ஆரம்ப பக்கம் தானாக 
சேகரிக்க பட்ட பல்வேரு குறிகளை திட்டத்தின் நிலைபற்றி புரிந்து கொள்ளும் வகையில் தருகிரது.
இருப்பினும் லாஞ்ச்பேடை அப்படியே பிரதி எடுத்தால் போதுமானது இல்லை&nbsp;&mdash;&nbsp;
உங்களி திட்டம் எவை வளர்ச்சி குறிக்கும் காரணிகள் என்பதை மிகவும் சிந்தித்து முடிவெடுக்க
வேண்டும்&nbsp;&mdash;&nbsp;ஆயினும் லாஞ்ச்பேட் திட்டம் பல வகையான வாய்புகள் பற்றி 
சிரந்த உதாரணமாக உள்ளது.  திட்ட பக்கத்தின் துவக்கத்தில் தொடங்கி மற்றும் கீழ் இரங்கி: <ulink
url="https://launchpad.net/drizzle" >launchpad.net/drizzle</ulink>.
அல்லது <ulink url="https://launchpad.net/inkscape">launchpad.net/inkscape
</ulink>, இரண்டில் ஒன்றை தேர்ந்தெடுக்களாம்.</para></sidebar>

<sect3 id="development-status-honesty">
<title>வளர்ச்சி நிலை எப்போதும் உண்மையை பிரதிபலிக்க வேண்டும்.</title>

<para>தயாராக இல்லை என்று தோற்றம் தருவதாக பயம் கோள்ள வேண்டாம், மேலும் உயர்த்திகாட்ட 
அல்லது மிகைபடுத்தி காட்ட சலனப்பட வேண்டாம்.  அனைவரும் மேன்பொருள் படிப்படையாக வளரும் என்பதை
அறிவர்; "இது வளர் நிலையில் உள்ள பிழைகள் கொண்ட திட்டம்.  இது சில நேரம் இயங்காமல் போகலாம்
எனவே ஆபத்தை கவணத்தில் கொண்டு பயன்படுத்துங்கள்"  என குறிப்பிடுவதில் தவறேதும் இல்லை. அத்தகைய
வார்தைகள் அந்த சூழலில் தேவைபடும் உருவாக்குபவர் யாரையும் பயம் கொள்ள செய்யாது.  பயனர்களை 
பொருத்த வரை தார் நிலையில் இருக்கும் முன்பே கவர்ந்திலுக்கும் செயல் மிகவமு தீமையானது. ஒரு முரை 
வாங்கிய பின்னர் நிலையற்ற தன்மை அல்லது பிழைகள் இருக்கும் என்ற போதுமதிப்பை மாற்றுவது கடினம்.
பாதுகாப்பு உணர்ச்சி என்றும் பயன் தரும்;  பயனர் எதிர்பார்ப்பதை விட <emphasis>அதிகமான</emphasis>
நிலைப்பு தன்மை இருப்பது என்றும் சிரந்தது, மேலும் இன்ப அதிர்ச்சி தரும் வாய்வழி விளம்பரம் என்றும் சிரந்தது.
</para>

<sidebar id="alpha-and-beta">
  <title>ஆல்பா மற்றும் பீட்டா</title>
  <para><firstterm>ஆல்பா</firstterm> என்ற சொல் பொதுவாக பயனர்களுக்கு அதை கொண்டு    
  செயல்கள் செய்யதக்க மற்றும் கண்டுபிடிக்கபட்ட பிழைகள் கொண்டுள்ள முதல் வெளியீட்டை குறிக்கும்.
  அதன் முக்கிய நோக்கம் உருவாக்குபவர்கள் எதை செய்ய வேண்டும் என்று கண்டரிய்தக்க விமர்சனம் 
  பொருவது மட்டுமே.  அடுத்த கட்டம் <firstterm>பீட்டா</firstterm>, என்பது அந்த திட்டத்தில்
  இருந்த அனைத்து பிழைகளும் கலையபட்டு, பொது வினியோகத்திற்கு வளங்கதக்க வகையில் பல 
  சேதனைகள் செய்யப்பட வேண்டும்.  இதன் முக்கிய நோக்கம் பிழைகள் எதுவும் கண்டு பிடிக்க படவில்லை 
  என்றால்முறைப்படி அருவிக்க பட்ட மென்பொருளாக மாருவது அல்லுத உருவாக்குபவர்களுக்கு நல் விமர்சன்
  செய்யபட்டு அவர்கள் அதன் பொது வினியோகம் செய்வதை விரைவு படுத்துவது மட்டுமே.  ஆல்பா மற்றும் 
  பீட்டா இடையில் உள்ள வேற்றுமை என்பது புரிந்து கொள்ளும் தன்மையை பொருத்த்து.</para>
</sidebar>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>பதிவரக்கங்கள்</title>

<!-- This section probably needs to be rewritten, because there's so
     much software, especially Javascript, that is distributed
     straight from GitHub.  To a first approximation, source packaging
     is important for something you expect an OS packager to
     repackage; otherwise, it may be a luxury.  Not sure whether this
     footnote for JS can be used or not:

     <footnote><para>This is still true even for Javascript packages
     that are deployed as minified, continuously available downloads
     from a canonical URL.  Minified JS downloads are equivalent to an
     executable form.  They're not what a developer would hack on to
     fix a bug&nbsp;&mdash;&nbsp;for that, you need developer-friendly
     source code.  You also need .</para></footnote>
-->

<para>அந்த மென்பொருள் கண்டிப்பாக வரையறை செய்யபட்ட வடிவங்களில் பதிவிரக்கம் செய்யும் 
படி இருக்க  வேண்டும்.  துவக்க நிலையில், அந்த மென்பொருள் தோகுத்தல் அவ்வலவு கடினம் 
இல்லை என்றா இருகூட்டு (இயங்கவல்ல) தொகுப்புகள் அவசியம் அற்றது. (ஆனால் 
கடினமானதாகி விட்டால் அது உருவாக்குபவர்களை ஈர்பது மிகவும் கடினமாகிவிடும்!)</para>

<para>வினியோக முரை முடிந்த வரை மிகவும் எளிதாகவும், வரையறை செய்யபட்டும், மேலும் 
குறைந்த வேலை பலு கொண்டதாகவும் இருக்க வேண்டும். நோய்க்கு மருந்து வினியாகம் செய்ய 
நித்தால் நீங்கள் கண்டிப்பாக ஒரு வரையருக்க பட்டாத அளவுல்ல ஊசி நிர்வகிக்கும் படி வடிவமைக்க 
மாட்டீர்கள் அல்லவா. அதைபோல் மென்பொருள் வரையருக்க பட்ட தொகுப்பு மற்றம் நிருவும் முறையை 
பயன்படுத்த வேண்டும்; அது எந்த அளவில் வரையறைகளை மீரு கின்றதோ அதே விழுக்காடு பனர் 
மற்றும் உருவாக்குபவர்கள் குழப்பம் அடைந்து போவார்கள்.</para>

<para>அது அவசியமாக தோன்றினாலும் பல திட்டங்களில் அது வரைமுரை செய்வதை, எப்போது 
வேண்டுமானாலும் செய்துவிடலாம் என்ற நம்பிக்கையில் செய்வதே இல்லை:<emphasis>"நாங்கள் 
குறியீடுகள் இருதி நிலை அடையும் தருனத்தில் சரி செய்து விடுவோம்."</emphasis> அவர்கள் 
எதை புரிந்து கொள்ள வில்லை என்றால் நேர விரயம் செய்யும் தொகுப்பு மற்றம் நிருவதல் வேலைகளை 
தல்லி போடுவதால் திட்டம் நிரைவடைய ஆகும் நேரம் தல்லிபோகும்&mdash;ஏன் என்றால் அது 
தொகுத்து சோதனை செய்ய முடிந்தால் உதவலாம் என நினைப்பர்களை அதையரியப்படுத்தும்.  மிக 
மெல்லமாக, அந்த திட்டம் <emphasis>அறியாமல்</emphasis> அதன் அனைத்து 
உருவாக்குபவர்களையும் தேங்கிய நிகழ்வுகள் காரணமாக இலக்க நேரிடும்: சிலர் திட்ட தளத்தை 
அடைந்து மென்பொருள் குறியீடுகளை பதிவிரக்கம் செய்து அதனை தொகுக்க முற்பட்டு தோல்வி அடைந்த 
உடன் சென்று விடுவார்கள்.  அப்படி நடந்ததை அவரை தவிர யாராலும் இனம் காண முடியுமா? 
திட்டத்தில் வேலை பார்க்கும் எவருக்கும் நல்ல என்னம் கொண்ட ஒருவர் விலகி சென்றதை கண்டுபிடிக்க 
இயலாது.</para>

<para>சோர்வை உண்டாக்கும் மிக முக்கியமான பனிகளை முதலில் செய்துவிடுவது நல்லது, மேலும் 
தொகுத்தலில் உள்ள தடைகளை களைவது மிக நல்ல பலனை தரவல்லது.</para>

<para>நீங்கள் தறவிரக்க கூடிய தொகுப்பை வழங்கும் போது, அதற்கு தனிப்பட்ட பதிப்பு எண் கொடுங்கள், 
அதனால் எவரும் ஒப்பிட்டு எது சிறந்தது என்று கண்டுபிடிக்க இயலும். அதன் மூலம் அவர்கள் பிழைகளை 
பதிப்பு எண் குறிப்பிட்டு பதிவு செய்ய இயலும்(அது அந்த பிழை ஏற்கனவே தீர்க்கப்பட்டு உள்ளதா என பதில் 
கூற இயலும்).  பதிப்பு என் பற்றிய மேலும் தகவல்களுக்கு <xref linkend="release-numbering"/> 
பகுதியை காண்க, தொகுப்பு மற்றும் நிருவுதலுக்கான தரக்கொள்கை பற்றி மேலும் அறிய 
<xref  linkend="packaging"/>பகுதியை காண்க <phrase output="printed"> , இரண்டை 
பற்றியும் அறிய  <xref linkend="development-cycle"/></phrase> பகுதிகளை காண்க.</para>
</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>பதிப்பு கட்டுப்பாடு மற்றும் பிழை கண்காணிப்பானுக்கு அணுகல் அனுமதி</title>

<para>பதிவிரக்கூடிய குறியீடுகளை வளங்குவது நிருவி பயன் படுத்த மட்டும் விரும்புவோர்க்கு வேண்டுமானால் 
போதுமானதாக இருக்கும், ஆனால் அது பகுத்தாய்து புதிய அம்சத்தை இனைக்க விரும்புவோர்க்கு போதாது.
இரவு நேர நொடிப்பு எடுப்புகள் உதவியாக இருக்கலாம், ஆனால் அவை வெற்றிகரமான உருவாக்குபவர்கள் 
சமூகத்திற்கு தேவையான நுண்ணிய கட்டுப்பாட்டை  தற இயலாது.  அனைவரும் அந்த தருனத்தில் உள்ள 
குறியீட்டை பெற விரும்புவதேடு மேலும் மற்றங்களை பதிவு செய்ய ஒரு வழியையும் விரும்புவர்.</para>

<para>அதர்க்கு தீர்வு பதிப்பு கட்டுப்பாடு செயலி&nbsp;&mdash;&nbsp;குறிப்பாக, எதில் இருந்து 
அனைவரும் குறியீட்டை தரவிக்கிவும் மாற்றங்களை பெறவும் முடியுமோ அத்தகைய ஒரு இணைய, பகிரங்கமாக 
அணுகக்கூடிய பதிப்பு கட்டுப்பாட்டு களஞ்சியமாக இருக்க வேண்டும்.   பதிப்பு கட்டுப்பாட்டு களஞ்சியம்
&mdash;பயனர்கள் மற்றும் உருவாக்குபவர்களுக்கும்&mdash;அந்த திட்டம் அனைவரும் பங்களிக்க விரும்பும் 
அனைத்தும் தற முயற்ச்சி மேற்கொன்டதர்கு ஒரு குறிப்பு.  இதை எழுதும் தருவாயில் பல கட்டற்ற திட்டங்கள் 
தடைகள் அற்ற இலவச பொது சேவையாக தள நிருவாகத்தை தரும்<ulink
url="https://github.com/" >GitHub.com</ulink>-ஐ பயன் படுத்து கின்றன. கிட்ஹப் மட்டுமே 
ஒரு தேர்வாகவும், ஒரே சிரந்த தேர்வாகவும், இல்லை என்றாலும் அது பல திட்டங்களுக்கு போதுமானது.
<footnote><para>கிட்ஹப், மிகவும் பிரபலமான கட்டற்ற பதிப்பு கட்டுப்பாட்டு மென்பொருள் கிட் செயலியை 
சார்ந்து இருப்பினும் அதன் மென்பொருள் கட்டற்றது அல்ல. அப்படி இருக்க வேண்டியது உங்கள் திட்டதிற்கு 
அவசியம் தேவையனதா என்பது மிகப்பெரிய கேள்வி, மேலும் அது மிகவும் விரிவாக <phrase
output="printed"> இல் உள்ள <xref
linkend="technical-infrastructure"/></phrase> பகுதி 
<xref linkend="canned-hosting"/>இல் கூர்ப்பட்டுள்ளது.</para></footnote> பதிப்பு கட்டுப்பாட்டு 
கட்டமைப்பு மிகவும் விரிவாக <phrase output="printed"> இல் உள்ள <xref 
linkend="technical-infrastructure"/></phrase> பகுதி <xref linkend="vc"/>
இல் கூரப்பட்டுள்ளது.</para>

<para>அதே தேவைதான் பிழை கண்காணிப்பானுக்கும் உள்ளன.  அதன் முக்கியத்துவம் உருவாக்குபவர்களுக்கு 
நாளுக்கு நாள் உள்ள பயன் பாட்டில் மட்டும் அல்ல, திட்டத்தை கண்காணிப்பவருக்கும் முக்கிதுவம் வாய்ந்தது.  
பலருக்கு, அனுக கூடிய பிழை கண்காணிப்பான் அந்த திட்டதை அவசியமாக எடுத்துக்கொள்ள ஒரு வகையான 
குறிப்பு: அதிகப்படியான பிழை எண்ணிக்கை திட்டதிற்கு <emphasis>சிரப்பான</emphasis> தோற்றம் தரும்.  
இது எதிர் மாறாக தோன்றலாம், ஆனால் கவனத்தில் கொள்ள வேண்டிது மூன்று முக்கிய காரணிகள் பிழை 
எண்ணிக்கையை அதிகமாக காட்டும்: மென்பொருளில் உள்ள உண்மையான பிழைகள் எண்ணிக்கை, பயன் 
படுத்துபவர்கள் எண்ணிக்கை மற்றும் பிழைகளை பதிவு செய்ய ஏதுவான தன்மை. மூன்று காரணிகள் இருப்பினும், 
இருதியாக உள்ள இரண்டும் முதலில் உள்ளதை விட மிகவும் சிறப்பானது.  எந்த மென்பொருளும் போதுமான 
அளவு மற்றும் சிக்கல்கள் கொண்டிருப்பின் அதில் நிரைய பிழைகள் இனம்காண காத்துக்கொணுடு இருக்கும். 
உண்மையான கேள்வி என்ன வென்றால், எத்தகைய வரிசையில் மற்றும் முன்னுரிமை அடிப்படை தரப்பட்டு அவைகள் 
தீர்க்கப்படுகின்றன? பெரிய மற்றும் நன்கு கண்காணிக்கபட்ட (அதாவது பிழைகள் எவ்வளவு விரைவில் பதில் 
கூரப்படு கிண்றன, எப்படி ஒரே மாதிரியான பிழை பதிப்புகள் கண்டுனர படுகின்றன, மற்றம் பல) பிழை பதிப்பானை 
கொண்டுள்ள ஒரு திட்டம் ஒரு பிழைகள் குரைவாக அல்லது கிட்டதட்ட ஒருபிழைகளும் இல்லாத திட்டத்தை விட 
சிரந்த உணர்வை தருகின்றன.</para>

<para>உங்கள் திட்டம் ஆரம்ப நிலையில் இருப்பின், கண்டிப்பாக நீங்கள் ஏதும் செய்ய இயலாது.  ஆனால் திட்ட 
நிலை பக்கம் திட்டத்தின் அதன் ஆரம்ப நிலையை விளக்கமா சொல்லி, மேலும் பிழைபதிவுகள் மிக அன்மையில் 
பதிய பட்டிருப்பின், பார்ப்பவர்கள் அந்த திட்டம் ஆரோக்கியமான <emphasis>விகித்தில்</emphasis> பதிய 
பட்டுள்ளதை கவணித்தால் குறைவான பிழைகள் பற்றி கவலை கொள்ள மாட்டார்கள்.<footnote><para>பிழை 
பதிப்புகள் நல்லது என்பது பற்றி மேலும் அறிய, காண்க <ulink 
url="http://www.rants.org/2010/01/10/bugs-users-and-tech-debt/">
rants.org/2010/01/10/bugs-users-and-tech-debt</ulink>, நான் 2010ல் எழுதிய பதிவு எப்படி 
பிழை பதிவு <emphasis>தவரில்லை</emphasis> ஆனால் வளர்ச்சி அரிகுறி என்று கூருகிறது என 
"<ulink url="http://en.wikipedia.org/wiki/Technical_debt">தொழில்நுட்ப கடன்
</ulink>"-ல் காண்க.</para></footnote></para>

<para>கவணிக்க வேண்டியது பிழை கண்காணிப்பான் பிழைகளை குறிக்க மட்டும் இன்றி, விரிவாக்க கோரிக்கைகள், 
ஆவண மாற்றங்கள், நிலுவையில் உள்ள பணிகள் மற்றும் பல வேலைகளை செய்கின்றன.  பிழை கண்காணிப்பான்கள் 
இயக்கும் முரை பற்றிய விவரங்கள் அறிய <phrase output="printed"> இல் உள்ள <xref 
linkend="technical-infrastructure"/></phrase> <xref linkend="bug-tracker"/> பதிவை 
காண்க. எனவே அவற்றை இங்கு விவரிக்க போவது இல்லை.  அரிமுகம் சேய்யும் நோக்கில் பிழை கண்காணிப்பான் 
ஒன்றை <emphasis>பெற்றிருக்க</emphasis> வேண்டுதம், மேலும் அது முதல் பக்கத்தில் இருந்து அடையும் படி 
தர வேண்டும்.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>தகவல் தொடர்பு தடங்கள்</title>

<para>பொதுவாக எவரும் ஒரு திட்டதில் ஈடுபட்டுள்ளோரை எவ்வாரு தொடர்பு கெள்வது என அறிய விரும்புவர்.  
அஞ்சல் பட்டியல்கள், மின்னாடல் அறைகள், ஐஆர்சி தடங்கள் (<xref linkend="technical-infrastructure"/>) 
மற்றம் ஏனய தடங்களை உருவாக்கி திட்ட பங்காளர்களுக்கு தொடர்புக்கு வழி செய்து தாருங்கள்.  நீங்களும் மற்ற திட்ட 
நிருவுனர்களும் அந்த அஞ்சல் பட்டியல்களில் சந்தா பெற்று இருக்க வேண்டும், அதனால் உருவாக்குபவர்களை தொடர்பு 
கொண்டு கருத்து கூர வழி இருப்பதை அனைவரும் உணர்வார்கள்.  நீங்கள் சந்தா பெற்று இருப்பதால் அனைத்து 
கேள்விகளுக்கும் பதில் அளிக்கவும் அனைத்து கோரிக்கைகளையும் நிருவுவதர்க்கும் உதிரவாதம் தரவேண்டிய அவசியம் 
இல்லை.  நீன்ட நாள் இக்கத்திர்கு பின்னர், மிக குறைவானவர்களே கருத்துக்களம் பயன்படுத்துவர், ஆயினும் தேவை 
இருப்பின் பயன் படுத்தி <emphasis>முடியும்</emphasis> என்று அனைவரும் அறிவர்.</para>

<para>திட்டதின் துவக்கத்தில் உருவாக்குபவர்கள் மற்றும் பயனர்கள் இருவருக்கும் தனித்தனி கருத்துக்களம் இருக்க 
வேண்டிய அவசியம் இல்லை.  அனைவரும் ஒரே "அறையில்" விவாதிப்பது அப்பொழுது மிகவும் ஏற்றதாக இருக்கும். 
ஆரம்பத்தில் பங்குகொள்வோர் மத்தியில்,  மேம்பாட்டாளர் மற்றும் பயனர் இடையே வேறுபாட்டு பெரும்பாலும் தெளிவில்லாமல் 
இருக்கிரது; காரணம் துவக்கத்தில் பாகுபாடு செய்யமுடியாத அளவிற்கு, உருவாக்குபவர்கள் மற்றும் பயனர்களுக்கு இடையே 
ஆன விகிதம் மிக அதிகமாக இருக்கிறது.   நீங்கள் ஆரம்ப காலதில் பங்கு பெருவோர் கண்டிப்பாக உருவாக்குபவராகள் 
என்று என்ன இயலாது,  ஆயினும் அவர்கள் உருவாக்குபவர்களின் விவாதத்தில் பங்கு கொண்டு திட்டம் எந்த திசையில் 
செல்கின்றது என்று அறிந்து கொள்ள விரும்புவதாக கருதலாம்.</para>

<para>இந்த அத்தியாயம் திட்டத்தை துவங்குவதை பற்றி மட்டுமே விளக்குவதால், தகவல் தொடர்பு தடங்கள் இருக்க 
வேண்டும் என்று மட்டமே கூருவது போதுமானது.  பின்பு <phrase output="printed"> இன்
<xref linkend="communications"/></phrase><xref linkend="growth"/>இல் அதர்க்கான நேரம் 
வருகையில் எவ்வாறு இருக்க வேண்டும், எப்படி வடுவமைக்க வேண்டும், எத்தகைய கட்டுப்பாடு அல்லது மற்ற மேலாண்மை 
இருக்க வேண்டும், மற்றும் எப்படி உருவாக்குபவர்கள் மற்றும் பயனர்கள் கருத்துக்களம் இடையே எத்தகைய வித்தியாசம் 
இருக்க வேண்டும் போன்ற வற்றை நாம் விவாதிக்கலாம்.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>உருவாக்குபவர்களுக்கான வழிமுறைகள்</title>

<para>எவரேனும் பங்களிக்கி விரும்பினால், அவர் உருவாக்குபவர்களுக்கான வழிமுறைகள் என்ன என்பதை பார்க்க 
விரும்புவார்கள்.  அது அதிகம் தொழில்நுட்பம் சார்ந்தது இல்லாமல் சமூக வழிமுரை சார்ந்த்து: அவை எவ்வாரு 
உருவாக்குபவர்கள் தங்களுக்குள் மற்றன் பயனர்களுடன் எப்படு தொடர்பு கொண்டு இருதியாக செயல்களை எப்படி 
முடிவுக்கு கொண்டு செல்ல வேண்டும் என்பதை பற்றியது.</para>

<para>அந்த தலைப்பு முலு விலக்கத்துடன் <xref linkend="written-rules"/><phrase 
output="printed"> என்ற
<xref linkend="social-infrastructure"/></phrase>இல் இருக்கும் பகுதியில் கூரப்படுள்ளது, 
ஆயினும் அதன் அடிப்படை கூருகள்:

<itemizedlist>
  <listitem><para>மற்ற உருவாக்குபவர்களுடன் தொடர்பு கொள்ள இருக்கும் சுட்டிகள்</para>
  </listitem>
  <listitem><para>பிழைகள் மற்றும் மாற்றம் செய்ய பட்ட திட்டுகளை எப்படி சமர்ப்பிப்பது</para>
  </listitem>
  <listitem><para><emphasis>எப்படி</emphasis> மேம்பாடு செய்யப்படுகின்றது 
            மற்றும் முடிவுகள் எடுக்கபடு கின்றது என்ற சிரு குறிப்பாக&mdash;அது தாராளமனதுடன் கூடிய 
            சர்வாதிகாரமா, ஜனநாயகமா, அல்லது வேரு ஏதோ ஒன்றை பின் பற்றுகிரதா என்னும் 
            வகையில்.</para>                       
  </listitem>           
</itemizedlist>

"சர்வாதிகாரமா" என்பது எந்த ஒரு இழிவுபடுத்தும் வகையிலும் இங்கு குறிப்பிடப்பட வில்லை.  இதில் ஒரே ஒரு 
உருவாக்குபவர்கு மட்டும் அனைத்து நிராகரிக்கும் அதிகாரத்தையும் கொடுத்து திட்டத்தை நடத்தி செல்வது எந்த தவரும் 
இல்லை.  பல வெற்றி கரமான திட்டங்கள் அவ்வாரு இயங்கு கின்றன.  அதில் முக்கியமான ஒன்று அவை அவ்வாரே 
உருவாக்க பட்டு மேலும் அவ்வாரு இருக்கும் என்பதை குறிப்பிட்டும் வெளிவரு கின்றன.    
ஒரு கொடுங்கோன்மை ஜனநாயகம் போல் பாசாங்கு செய்வதை மக்கள் விரும்ப மாட்டார்கள்; அதே பொல் 
கொடுங்கோன்மை என்பதை குறிப்பிட்டு அதன் சர்வாதிகாரி நம்பகத்தன்மையுடனும் தகுதியுடனும் இருப்பின் திட்டம் 
எந்தவித தங்கு தடையும் இன்றி தொடரும்(<xref linkend="forkability"/>
<phrase output="printed"> பகுதியில் உள்ள 
<xref linkend="social-infrastructure"/></phrase> 
விளக்கத்தில் மேலும் எப்படி இங்கு சர்வாதிகார்ம் என்பது மற்ற துரைகளை காட்டிலும் மாருபட்டது என்பதை 
காணலாம்.)</para>

<para><ulink url="http://subversion.apache.org/docs/community-guide/">
subversion.apache.org/docs/community-guide</ulink> ஒரு சிரந்த உருவாக்குபவர்களுக்கான 
விதிமுறைகள் அமைத்து தந்து உதாரணமாக உள்ளது;
<ulink url="https://wiki.documentfoundation.org/Development">
wiki.documentfoundation.org/Development</ulink>இல் கொடுக்கப்பட்டுள்ள லிப்ரெ ஆபிஸ் 
விதிமுறைகளும் சிறந்த உதாரணம்.</para>

<para>இந்த அத்தாயாயத்தின் பிற்றபகுதியில் உருவாக்குபவர்களுக்கு வளங்கப்பட வேண்டிய அறிமுகம் குறித்து 
<xref
linkend="developer-documentation"/><phrase output="printed">
என்ற பகுதியில்</phrase> விளக்க பட்டுள்ளது.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>ஆவணங்கள்</title>

<para>ஆவணங்கள் மிகவும் அவசியமானவை.  எளியவையாக மற்றும் முழுமையடையாது இருப்பினும் 
<emphasis>சில</emphasis> ஆவண்ங்கள் பயனர் படிக்கும் படி இருக்க வேண்டும்.  இது முன்பு 
குறிப்பிட்டது போன்று "வேலைப்பளு" கொண்டது, ஆயினும் இதில் தான் பல கட்டற்ற திட்டங்கள் கீழே 
விழுகிறன.  குறிக்கோள் விளக்கம், அம்சங்கள் பட்டியல், உரிமம் தேர்வு செய்தல், வளர்ச்சி நிலை
சுருக்கம் ஆகிவை செய்த பிரகு&mdash;இவை அனைத்தும் மிக சுலபமானவை, அவை கண்டிப்பாக ஒரே 
ஒரு முரையில் செய்து முடிக்க வேண்டியவை, அதன் பின்பு மீன்டு அதை பற்றி கவலை பட வேண்டியது 
இல்லை.  ஆவணங்கள் அப்படி பட்டவை இல்லை, அது என்றும் நிறைவு பெற்றதாக என்ன இயலாது, 
அதனாலோ என்னவோ அதை துவள்க பலர் காலதாமதம் செய்கின்றனர்.</para>

<para>அதில் மிகவும் வஞ்சகமான காரியம் என்ன வென்றால் ஆவணங்கள் தயாரிக்க தேவைப்படும் கருவிகள்
அதை படிக்க தேவைப்படுவதை விட முற்றிலும் மாரு பட்டது.  பிதிவர்களுக்கான ஆவணமே அதில் மிக 
முக்கியமானது: எப்படி மென்பொருளை நிருவுவது, எப்படி அது இயங்குகிறது மேலும் சில செயல்களை எப்படி
செய்வது என்ற வரைமுரை ஆகியவை.  ஆயினும் இவை அனைத்தையும் <emphasis>எழுதுபவர்</emphasis> 
எதுபவர் எத்தகைய எளிமையாக செய்கிராரோ&mdash;அதை எழுதுவது அத்தகைய கடினமானது படிப்பவர்
பக்கம் இருந்து சிந்திப்பது, மேலும் சிரம்ப்பட்டு அனைத்து வழிகளையும் தருவது (எழுதுபவருக்கு) தேவையற்றது
வேலை போல் தோன்றும்.</para>

<para>அதை தீர்க்க எந்த ஒரு மந்திர சாவியும் கிடையாது.  சிலர கண்டிப்பாக அமர்ந்து எழுதிமுடிக்க 
வேண்டும், மேலும், முக்கியமாக, படிப்பவர்களின் கருத்துக்களை ஏற்றவாரு இனைக்கவும் வேண்டும்.  எளிய
முரையில் எழுதவும் வடிவமைக்கவும் உதவும்  HTML, உரை வடிவம், Markdown, ReStructuredText,
அல்லது  XML மாற்று வடிவங்களை பயன்படுத்துக&mdash;எளிய முரையில் மாற்றம் செய்யது வளப்பத்த 
கூடியதாக<footnote><para>முதல் முரையே சரியான வடிவமைப்பை தேர்வு செய்ய கவலை பட வேண்டாம்.
நீங்கள் உங்கள் முடிவை மாற்ற நினைத்தால், அதை தானியங்கி முரையில்<ulink 
url="http://johnmacfarlane.net/pandoc/">Pandoc</ulink>ஐ பயன் படுத்தி மாற்றி 
விடலாம்.</para></footnote>.  இது எழுதுபவருக்கு தொடர்ந்து மேன்மை படுத்த அதில் உள்ள 
சிரமத்தை மட்டும் தீர்க்காமல், பின்பு ஆவணப்படுத்த முன்வருபவருக்கு பயன் படும்.</para>

<para>ஆவணத்தின் எல்லையை துவக்கத்தில் சற்று குரைத்துவைப்பது அதை செய்து முடிப்பதை 
உருதி செய்யும்.  அப்படி செய்வது குறைந்த பச்சம் முடிவற்ற வேலை போன்று தேன்றாது.  அதில் உள்ள 
அடிப்படை விதி குறைந்தது பின்வரும் நிபத்தனைகளை நிரைவு செய்வது தான்:

<itemizedlist>
  <listitem><para>படிப்பவருக்கு எத்தகைய அடிப்படை அறிவு அவசியம் என்பதை தேளிவு படுத்துக.
            </para>
  </listitem>
  <listitem><para>மிகவும் தெளிவாக மற்றும் விளக்கமாக எப்படி அந்த மென்பொருளை நிருவது 
            என்பதுடன் துவக்கத்தில் எங்கேனும் எப்படி பழுதரியும் சோதனையை இயக்குவது அல்லது 
            சரியாக நிருவியதை உறுதி செய்யும் கட்டளை ஏதேனும் இருப்பின் அதை இயக்கும் 
            முறைபற்றியும் குறிப்பிடவும்.  ஆரம்ப ஆவணம் பொதுவாக பயன்படுதும் வழிமுறை 
            ஆவணத்தைவிட சற்று முக்கியமானது.  நிருவுதல் மற்றும் துவங்கும் முறைபற்றி அறிந்து 
            கொள்ள ஒருவர் அதிக நேரம் செலவிட நேர்ந்தால் அவர் மிகவும் மேம்பட்ட 
            இயக்கங்களுக்கான பகுதியும் அப்படி கடினமாக இருக்கும் என்று என்ன அதிக வாய்ப்பு 
            உள்ளது.  கைவிட்டு செல்ல விரும்புவோரில் துவக்கத்திலேயே விட்டு விடுவார்கள்தான் அதிகம்
            எனவே நிருவுதல் போன்ற, ஆரம்ப விஷயங்கள், மிகவும் கவணத்துடன் சொல்லப்பட 
            வேண்டும்.</para>
  </listitem>
  <listitem><para>ஒரு பொதுவான செயலை எப்படி செய்வது என்று ஒரு பயிற்சி போன்ற உதாரணம்
            கொடுக்க வேண்டும்.  கண்டிப்பாக பலவகையான உதாரணங்கள் தருவது மிகவும் சிரந்த்து
            இருப்பினும் நேரம் இல்லை என்றால் ஒன்றை மட்டும் தேர்வு செய்து மிகவும் தெளிவாக 
            விளக்கம் தாருங்கள்.  ஒருவர் அதை படிக்கும் போது அந்த மென்பொருள் ஒரு செயலை
            <emphasis>எப்படி செய்கிறது</emphasis> என புரிந்து கொண்ட உடன் மற்ற செயல்களை
            எப்படி செய்கிறது என்று தானகவே காண முயல்வார்கள்&mdash;மேலும் நீங்கள் 
            அதிஸ்டசாலியாக இருப்பின் அவர்களாகவே அவைகளை ஆவணப்படுத்த விரும்புவார்கள்.  அது 
            நம்மை அடுத்த நிபந்தனைக்கு இட்டு செல்கிரது...</para>
  </listitem>
  <listitem><para>எங்கெல்லாம் ஆவணம் முடிவடையாமல் இருக்கின்றது என்று குறித்து வையுங்கள்.      
            அதனால் அதில் நீங்கள் முடிக்க முடியாமல் போனவற்றை சுட்டிகாடி, 
            அவர்களுடன் கருத்து ஒற்றுமை அடைய முடியும்.  உங்கள் பச்சாத்தாபம் அவர்களை நீங்கள்
            எதற்கு முக்கியதுவம் தந்தீர்கள் என இனம்கான உதவும்.  அந்த குறிப்புகளுடன் பின் 
            தேதியிட்டு அதர்குள் முடிக்க விருப்பதாக அறிவிக்க வேண்டும்&mdash;அது உதவி 
            தேவைபடுவதை முறைப்படி அறிவிப்பது போன்றது.</para>
  </listitem>
</itemizedlist>
</para>
<para>அந்த கடைசி நிபந்தனை மிகவும் முக்கியமானது, உண்மையில், அது அந்த திட்டம் முலுவதிர்க்கும்
உதவி தேவைப்படுவதாக நினைப்பை கொடுக்கும்.  துல்லியமாக குறைகளை குறித்து வைப்பது கட்டற்ற
மென்பொருள் திட்டங்களின் ஒரு முக்கிய விதி.  தயவுதாட்சணை இல்லாமல் மற்றும் உணர்ச்சி வசப்படாமல்
சரியன வற்றை மட்டம் இனம் கண்டு குறித்து வையுங்கள் அதில் எந்தவித மிகைபடுத்துதலும் இல்லாமல் இருப்பது 
அவசியம்(ஆவணங்கள், பிழை குறிப்புகள் அல்லது அஞ்சல் பட்டியல்கள் போன்ற அனைத்திலும் 
அவ்வாரு இருக்க வேண்டும்).  அந்த திட்டமே வெளிப்படையாக சொல்ல வில்லை என்றால் அதனை எவரும் ஒரு 
திட்ட தோல்வியாகவோ அல்லது குறிப்பிட்ட தேதியில் தீர்க்க தறப்பட்ட உருதியாகவோ கருத 
மாட்டார்கள்.  எனவே அந்த திட்டத்தை பயன்படுத்வேர் எவரும் அதன் குறைபாட்டை அறிந்திருப்பதால்
அதர்கு மனதலவில் தயாராகவும் இருப்பர்&mdash;எனவே அந்த திட்டம் அதன் அடிப்படை அறிந்து
செயல் படுவதை போன்று இருக்கும்.</para>

<sidebar id="starting-a-faq">
  <title>அடிக்கடி கேட்கப்படும் கேள்விபதில்களை பராமரித்தல்</title>

  <para><firstterm>அடிக்கடி கேட்கப்படும் கேள்விபதில்களை</firstterm>("FAQ") பராமரிப்பது ஒரு 
  திட்டத்தின் பயிற்றுமுரை பயன்பாட்டிற்கு பேருதவியாக இருக்கும்.  பொதுவாக உருவாக்குபவர்கள் மற்றும் 
  பயனர்கள் கேட்க விரும்பும் கேள்விகளுடன் ஒருங்கினைந்து இருக்கும் படி கேள்விபதில்கள் அமையவேண்டும்
&mdash;நீங்கள் <emphasis>எதிர்பார்கும்</emphasis> கேள்விகளுக்கு அல்ல&mdash;எனவே நன்கு 
நிர்வகிக்க பட்ட கேள்விபதில்கள் அதனை பரிசீலனை செய்பவர்களுக்கு தேவையானது கிடைக்கும் படி
இருக்கும்.  பொதுவாக பிரச்சனைகள் உருவாகும் போது பார்கப்படும் முதல் பக்கம் கேள்விபதில்கள்தான்,
சில சமயம் அதிகார பூர்வமான கையேட்டை விட கேள்விபதில்கள் சிரந்த தேர்வாக இருக்கும், மேலும் மற்ற 
தளங்களில் இருந்து உங்கள் தளதுடன் இனைக்க பட்டு இருக்கும் பொதுவான பக்கமும் இதுவாக தான் 
இருக்கும்.</para>

  <para>நீங்கள் திட்டத்தின் துவக்கத்தில் கேள்விபதில்களை உருவாக்க முடியாதது இதில் வருந்ததக்கது.
நல்ல கேள்விபதில்கள் எழுதப்பட்டவை அல்ல அவை தானாக வளர்தவை.  அதன் வரையறை படி அது
எதிர்வினை ஆவணம், அந்த மென்பொருள் பற்றி பலரும் கேட்ட கேள்விகள் கொண்டு வளர்ந்து வந்தது.
எனவே அவர்கள் என் கேட்பார்கள் என்று சரியாக எதிர் பார்க்க முடியாது, எனவே அதனை ஆரம்பம் முதல் 
சிந்தித்து எழுத முடியாது.</para>

<para>எனவே அதை செய்ய நினைத்து உங்கள் நேரத்தை வீன் செய்யாதீர்கள்.  ஆயினும் ஒரு பக்கத்தில் 
அதர்க்காக சில மாதிரி கேள்விகள் அமைத்து வைப்பதில் தவரேதும் இல்லை, எனவே திட்டம் நடைபெரும்
பொழுது அதில் சிலர் தங்கள் பங்களிப்பை செய்வார்கள்.  அந்த தருனத்தில், மிக முக்கியமான விதி அது
முலுமையாக இருக்க வேண்டும் என்பது அல்ல மாறாக <emphasis>எளிமையாக</emphasis> புதிதாக
செர்க்கும் படி உள்ளதா என்பதாகும்.  (சரியான கேள்விபதில்கள் பக்கம் என்பது சிறிய அம்சம் கிடையாது
அதை பற்றி மேலும் விவரங்கள் <xref
linkend="faq-manager"/><phrase output="printed" >இன்<xref linkend="managing-
volunteers"/></phrase>இல் உள்ளது.  மேலும் <xref
  linkend="all-as-archives"/><phrase output="printed" ><xref
  linkend="communications"/></phrase>ஐ காண்க.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>ஆவணங்கள் வளங்கப்படுவது</title>
<para>ஆவணங்கள் கண்டிப்பாக இரண்டு இடங்களில் வளங்கப்பட வேண்டும்: இனையத்தில் (இனைய 
தளத்தில் நேரடுயாக), <emphasis>மற்றும்</emphasis> பதிவிரக்க கூடிய மென்பொருள் வினியோகத்துடன்
(பார்க்க <xref linkend="packaging"/><phrase output="printed"> இன்
<xref linkend="development-cycle"/></phrase> பகுதியை).  அது இனையத்தில், உலாவும் படி,
கிடைக்க வேண்டும், ஏன் என்றால் மக்கள் பொதுவாக மென்பொருள் பதிவிரக்கும் 
<emphasis>முன்பு</emphasis> அதன் ஆவணங்களை முதலில் படிக்க விரும்புவார்கள், அது அவர்களுக்கு
பதிவிரக்கம் தேவையா இல்லையா என முடிவு செய்ய உதவியாக இருக்கும்.  ஆயினும் அது பதிவிர்க்க படும் 
மென்பொருளுடனும் இருக்க வேண்டும், ஏனென்றால் பதிவிரக்கம் அனைத்தையும்
தொகுத்து தர வேண்டும் (அதாவது உள்ளமைவாக அணுக) என்னும் அடிப்படைக்காக.</para>

<para>இனைய ஆவணங்களில், <emphasis>முலு</emphasis> ஆவணத்தையும் ஒரே HTML 
பக்கமாக தரவள்ள ஒரு இணைப்பை நிச்சயம் இருக்கும் படி செய்க ("ஒன்றுபட்ட ஒற்றை பக்கத்தில்" அல்லது
"அனைத்தும் ஒரே பக்கத்தில்" அல்லது "ஒற்றை பெரிய பக்கமாக" பேன்ற குறிப்பை அதன் அருகிள் அமைத்து
விடுங்கள்).  இது பொதுவாக மக்கள் ஒரு செல்லை முலு ஆவணத்திலும் தேட ஏதுவாக இருக்கும்.  
பொதுவாக அவர்கள் தேடுவது என்ன வென்று நன்கு அறிவார்கள் ஆயினும் அது எந்த பாகத்தில் உள்ளத் என
தேட முற்ப்படுவார்கள்.  அப்படி பட்டவர்களுக்கு ஒரு HTML பக்கத்தில் பகுதி அட்டவனை, அடுத்ததில் அறிமுகம், 
அடுத்ததில் நிருவும் முரை என வரிசை படுத்தி வைத்திருப்பது மிகவும் சிரமம் தரக்கூடிய செயல்.
அப்படி பக்கங்களாக பிரித்து வைக்க பட்டிருப்பது அவர்களின் உலாவியின் தேடு பொறி பயன் அற்றது.  அந்த 
முறை எந்த பகுதியை வாசிக்கின்றோம் என்று அறிந்தவர் மற்றும் ஆரம்பம் முதல் இருதி வரை படித்து முடிக்க
விரும்புவோர்க்கு ஏற்றதாக இருக்கும்.  ஆனால் அப்படி அனுகுவது பொதுவான முறை அல்ல.  மேலும், 
மென்பொருள் பற்றி அறிந்த ஒருவர் ஒரு குறிப்பிட்ட செல் எந்த பகுதியில் உள்ளது என காண முற்படுவதே 
பொதுவானது, எனவே அப்படி பட்ட ஒற்றை பக்க ஆவணம் தராமல் இருப்பது அவர்களுக்கு மிகவும் 
வெருப்பை தூன்டும்.</para>

</sect3>

<sect3 id="developer-documentation">
<title>உருவாக்கு பவர்களுக்கான ஆவணங்கள்</title>

<para>உருவாக்குபவர்களுக்கு மற்றொரு உருவாக்குபவர் குறியீடுகளை சரி செய்து விரிவாக்க அவசியம் புரிந்து 
கொள்ள வேண்டுவதை எழுதுவது.  இது முன்னர் கூரப்பட்ட அதிகம் சமூக சிந்தனையில் கொடுக்கப்படும் 
<emphasis>உருவாக்குபவர்கள் வழிகாட்டியில்</emphasis> இருந்து வேரு பட்டது. அது உருவாக்குபவர்கள் எப்படி 
இணைந்து செயல் படலாம் என சொல்கிறது;  உருவாக்கு பவர்களுக்கான ஆவணம் அதன் 
குறியீட்டுடன் எப்படு இணைந்து செயல் படலாம் என சொல்கிறது.  இவை இரண்டும் பொதுவாக வசதிக்காக 
ஒரே ஆவணத்தில் தரப்படுவது உண்டு (
<ulink url="http://subversion.apache.org/docs/community-guide/">
subversion.apache.org/docs/community-guide</ulink> உதாரணத்தில் உள்ளது போல்), ஆனால் 
அப்படி இருக்க வேண்டிய கட்டாயம் இல்லை.</para>

<para>உருவாக்கு பவர்களுக்கு ஆவணம் அவசிம் என்றாலும் அதை எழுதி முடிக்க எந்த வெளியீட்டையும்
தள்ளிப்போட வேண்டியது இல்லை.  அந்த மென்பொருள் உருவாக்கியவர்கள் பதிள்கள் கூற (பதில் 
கூர விருப்பதுடனும்) இருப்பின், அதுவே போதுமானது.  மீன்டும் மீன்டும் ஒரே மாதிரியான கேள்விகளுக்கு
பதில் கூர நேர்வதே ஆவணம் எழுத தூனுடுதலாகவும் இருக்கும்.  அது எழுதப்படும் முன்பாகவே, ஆர்வம் 
மிகுந்த உருவாக்கு பவர்கள் குறியீடுகள் தெளிவு பெற்று விடுவார்கள்.  அவர்களுக்கு உதவும் படி ஏதேனும்
செயல்பாடு அதில் இருப்பதே அதனை கற்று கொள்ள தூண்டும் காரணியாக இருக்கும்.  அதன் மீது நம்பிக்கை
இருக்கும் போது, அதை கண்டு பிடிக்க அவர்கள் நேரம் ஒதுக்குவார்கள்; அவர்களுக்கு நம்பிக்கை வராவிடில், 
எந்த ஒரு ஆவணமும் அவர்களை பெரவும் அல்லது நிலை நிருத்த உதவாது.</para>

<para>எனவே உங்களுக்கு ஒரே ஒரு வகையான வடிக்கையாலருக்கு மட்டும் ஆவணம் எழுத நேரம் இருப்பின், 
பயனர்களுக்கானதை எழுதுங்கள்.  அனைத்து பயனர் ஆவணங்களும், பிரதி பலனாக, உருவாக்கு பவர்களின் 
ஆவணங்களே;  எந்த ஒரு செயல் முறையிலும் மேன்படுத்த முற்ப்படும் முன்பு அவர்கள் அதை பற்றிய பயன் 
பாட்டு அறிவு பொற்றிருப்பது அவசியம்.  பின்னர்,  ஒரே ஒரு வகையான கேள்விகள் மீன்டும் மீன்டும் கேட்கப்படின் 
ஒரு தனிப்பட்ட ஆவணம் உருவாக்க முயற்சி செய்யலாம்.</para>

<para>சில திட்டங்கள் விக்கியை ஆரம்ப அல்லது முக்கிய ஆவணமாக பயன் படுத்து கின்றன.  எனது
அனுபவத்தில், அது ஒரு சிலரால் தீவிரமாக நிருவகிக்க பட்டு அதன் "குறல்" எப்படி இருக்க 
வேண்டும் முடிவு செய்ய பட்டு இருந்தால் சிறப்பான பலன் தர கூடியது.  மேலும் தகவளுக்கு 
<xref linkend="wikis"/><phrase output="printed"> இன்
<xref linkend="technical-infrastructure"/></phrase> பகுதியை பார்க்க.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="examples-and-demos">
<!-- For link compatibility with the old section ID. -->
<anchor id="example-output" />
<title>செய்முறைகள், திரைப்பிடிப்புகள், வீடியோக்கள், மற்றும் எடுத்துக்காட்டாக வெளியிடல்</title>

<!-- For link compatibility with an old sidebar ID. -->
<anchor id="screenshots" />
<para>அந்த திட்டம் வரைகலை பயனர் இடைமுகம் கெண்டு இயங்கினால், அல்லது வரைகலை வெளியீடு
செய்தால் அல்லது மாறுபட்ட வெளியீடு உருவாக்கினால், சில திரைப்பிடிப்புகளை திட்ட தளத்தில் இனைத்து
விடுங்கள்.  இடைமுகம் இருப்பின், திரைப்பிடிப்பு அல்லது, அதைவிட சிரப்பான, குறுகிய (4 நிமிடங்களுக்கு
குறைவான) வீடியோ வழிகாட்டலுடன் அல்லது வசனத்துடன் இருக்க வேண்டும்.  வெளியீடுகளுக்கு, அது 
திரைப்பிடிப்பு அல்லது பதிவிரக்க கூடிய மாதிரி கோப்புகளாக இருக்கலாம்.  இனையம் சார்ந்ததெனில், அந்த 
மென்பொருள் ஏதுவானது இருப்பின், தங்கத் தரநிலை ஒரு உதாரண தளம் இருப்தே ஆகும்.</para>

<para>அதில் முகியமானது அவர்கள் மனநிரைவு அடையும் படி விர்பத்தை தீர்க்க வேண்டியதை தர வேண்டும்.
ஒரு திரைப்பிடிப்பு அல்லது வீடியோ பல பத்திகளின் மற்றும் அஞ்சல் பட்டியலில் உள்ள விளக்கத்தை காட்டிலும்
எளிதில் திருப்தி படுத்தும் படி இருக்கும், ஏன் என்றால் அது மென்பொருள் <emphasis>இயங்க கூடுயது
</emphasis> என்பதை நிரூபனம் செய்கிறது.  அதன் குறியீடுகளில் பிழைகள் இருக்கலாம், அதை நிருவது
கடினமாக இருக்கலாம், அது முற்றிலும் ஆவணப்படுத்த படாமல் இருக்களாம் ஆனால் ஒரு நிரூப்படம் அதை 
சற்று சிரமம் மேற்கொண்டால் இயக்க இயலும் என உருதி செய்கிரது.</para>

<sidebar id="video-brevity">
<title>வீடியோவை சுருக்கமாக அமைத்து, அதை சுருக்கமானது என்று 
  <emphasis>குறிப்பிடுக</emphasis></title>
  <para>நீங்கள் வீடியோ விளக்கப்படம் உங்கள் திட்டத்தில் கொடுத்து இருந்தால், அதை 4 நிமிடத்துக்குல்
இருக்கும் படி அதன் ஓடும் நேரத்தை அதை <emphasis>இயக்காமலே</emphasis>தெறிந்து கொள்ள 
வசதியாக குறிப்பிட்டு தருக.  இது முன்னர் கூறியது போல் "அளவிட பட்ட அறிமுகம்" என்ற கொல்கையை
சார்ந்தது: நீங்கள் அப்படி செய்வதால் அதனை காண முடிவு செய்வதை அனைத்து தடைகளுயும் 
நீக்கி எளிதாக்கலாம்.  பயனர்கள் "எங்கள் 3 நிமிட வீடியோவை பாருங்கள்" என்ற இனைப்பை 
"வீடியோவை பாருங்கள்" என்று கூரும் இனைப்பை விட அதிகமாக விரும்பும் வாய்ப்பு உள்ளது ஏன் என்றால்
தாங்கள் எதை செய்ய விருக்கிரோம் என்பதை அதன் சுட்டியை இயக்கும் முன்பே செய்யும் முன்பே தெறிந்து 
கொள்வதால்&nbsp;&mdash;&nbsp;அதை அவர்கள் மனதலவில் தயாராகி செய்வதால் நன்றக பார்கவும்
செய்வார்கள், அப்படி இல்லாம் பாதியில் சோர்வடைந்து நிருத்த மாட்டார்கள்.</para>
  <para>அந்த 4 நிமிட நிபந்தனை எப்படி உருவானது: அது ஒரு ஆய்வின் முடிவு, ஒரே (பெயர் குறிப்பிட 
விரும்பாத நபரை பலமுறை திட்ட வீடியோக்களை பார்க்க செய்து முடிவு செய்ய பட்டது.  அது மற்ற 
செயல்முறை விளக்கப்படம் அல்லது வழிகாட்டும் வீடியோக்களுக்கு பொருந்தாது.</para>
  <para>ஒரு வேளை நிங்கள் முன்னதாகவே இடைமுக வீடியோ பதிவு செய்யும் செயலி ஒன்றை தேர்வு
செய்யாமல் இருந்தால்:  எனக்கு நல்ல அதிர்ஷ்டமாக இருந்த டெபியன் குனு/லினக்ஸ் இல் 
இயங்கும் <filename>gtk-recordmydesktop</filename>, மற்றும் பிறகு 
<filename>OpenShot</filename>ஐ வைத்து வீடியோ திருந்தியை கொண்டு மாற்றி எழுதலாம்
  </para>
</sidebar>
  
</sect2>

<para>நேரம் இருப்பின், நீங்கள் இன்னும் பல தகவள்களை உங்கள் திட்ட பக்கத்தில் வளங்களாம், அல்லது
ஒன்று அல்லது பல காரணங்களுக்காக தேவைக்கேர்ப்ப தரலாம்: ஒரு செய்தி பக்கம், ஒரு திட்ட வரளாரு
பக்கம், ஒரு தொடர்புடைய இனைப்புகள் பக்கம், ஒரு முலு தளதிலும் தேட வள்ள பொறி, ஒரு நன்கொடை
பக்கம் போற்று ஏனையவை அனைத்தும்.  அவை எதுவும் துவக்கத்தில் அவசியம் அற்றவை இருப்பினும் 
வருங்காலத்தில் செய்யும் படி கவணத்தில் வைக்திருங்கள்.</para>

<sect2 id="hosting">
<title>ஓம்புதல்</title><!--https://ta.wiktionary.org/wiki/hosting விளக்கப்படி மொழி பெயர்க்க பட்டது -->

<!-- For link compatibility with the old section id. -->
<anchor id="starting-with-canned-hosting" />

<para>இணையத்தில் எங்கு உங்கள் திட்ட மூலப்பொருள்களை வைப்பது?</para>

<para>நிச்சயமாக ஒரு வலைத்தளம்&nbsp;&mdash;&nbsp;ஆயினும் அதல் முலு விளக்கம் சற்று குழப்பமானது.</para>

<para>பல திட்டங்கள் தங்கள் பொது பயனர் வலைத்தளத்தை&mdash;&nbsp;
அழகான படங்கள், முன்னொட்டம், வீடியோக்கல், வழி நடத்தப்பட்ட தள சுற்றுலாக்கள் மற்றும்
பல துனுக்குகள் வைத்து ஒரு தனி தளமாக&nbsp;&mdash;&nbsp; மிகவும் நுன்னிய மற்றும் முலுவதும் 
மோனோஸ்பேஸ் எழுத்துகளில் போலித்தனைமயை அல்லாத சுருக்கங்களுடன் உள்ள உருவாக்கு பவர்களுக்கான 
தளத்தில் இருந்து வேறுபடுத்தி காட்டு கின்றன.</para>

<para>சரி, நான் மிகைப்படுத்து கின்றேன்.  ஒரு சிறிய அளவில்.  எப்படி இருப்பினும், திட்ட ஆரம் 
காலங்களில் நீங்கள் அப்படி பட்ட வேருபாட்டை தர அவசியம் எதுவும் இல்லை. அச்சமையங்களில் உங்கள் 
திட்டத்தை பார்வையிடுபவர்கள் மேம்படுத்து பவர்களாகவோ அல்லது குறைந்த பச்சம் புதியதை முயற்சி செய்ய 
பலக்கியவர்களாகவும் இருப்பார்கள்.  காலம் செல்ல செல்ல அவர்களில் பலர் சிரிதளவாவது திட்ட 
மேன்பாட்டில் ஈடுபட விரும்பினால்(நிச்சயமா, உள்ளகள் திட்டம் ஒரு குறியீட்டு நூலகமாகவும், அதன் 
"பயனர்கள்" மற்றொரு உருவாக்குபவராகவும் இருக்கலாம்), பயனுருக்கான தனியான தளத்தை 
அமைக்க வேண்டிய அவசியத்தை நீங்களாக உணர்வீர்கள்.  ஒத்துழைப்புடன் இயங்கும் தளம் குறியீட்டு களம்,
பிழை கண்கானிப்பான், உருவாக்குபவர்கள் விக்கி, உருவாக்கு பவர்களில் அஞ்சல் பட்டியல் இனைப்புகள் 
மற்றும் பலவற்றை கொன்டிருக்கும்.  அந்த இரண்டு தளங்களும் ஒனுறுடன் ஒன்று இனைந்து இருக்க 
வேண்டும், முக்கியமாக பயனர் தளம் இது ஒரு கட்டற்ற திட்டம் மற்றும் மேன்படுத்தும் செயல்பாடு இருக்க 
முடியும் என்பதை குறிக்க வேண்டும்.<footnote><para>ஆகஸ்டு 2013 வரை, குறுக்கு இனைப்புகள் கொன்டு 
ஒரு தனித்து இயங்க்கும் பயனர் மற்றும் மேம்பாட்டள்கள் தளங்களில் உதாரணமாக உள்ளது Ozone Widget 
Framework:அதை <ulink
url="http://www.ozoneplatform.org/" >ozoneplatform.org</ulink> அவர்களில் பயனர் 
தளத்தை <ulink url="https://github.com/ozoneplatform/owf">
github.com/ozoneplatform/owf</ulink>இல் உள்ள மேம்பாட்டளர் தளத்துடன் ஒப்பிட்டு 
காண்க.</para></footnote></para>
<!--canned hosting என்பதை தொகுக்க பட்டு வளங்கும் என மொழியாக்கம் செய்ய பட்டுள்ளது-->
<para>கடந்த காலங்களில், பல திட்டங்கள் மேம்பாட்டாள்ர்கள் தளத்தை அவர்களாகவே உட்கட்டமைப்பு 
செய்து வளங்கி வந்தனர்.  ஆயினும், கடந்த பத்தாண்டுகளில்,  பல கட்டற்ற மென்பொருள்கள்&nbsp;&mdash;&nbsp;கிட்ட தட்ட புதியவைகள் அனைத்தும்&nbsp;&mdash;&nbsp;
இலவசமாக கட்டற்ற மென்பொருள்களுக்கு என்று "தொகுக்க பட்டு வளங்கும்" தளங்களை பயன் படுத்தி வளங்க படுகின்றன.  இதுவரை அதில் மிகவும் வெற்றகரமானது, <ulink url="https://github.com/">
GitHub.com</ulink>, மேலும் உங்களுக்கு என்று எந்த வித தேர்வும் இல்லை என்றால் நீங்கள் கிட்ஹப் 
தேர்வு செய்யலாம்; பலர் அதில் பரிச்சயம் பெற்று அதில் பயனர் கணக்கும் கொன்டுள்ளனர்.  மேலும்
தகவள்களுக்கு <xref
linkend="canned-hosting"/><phrase output="printed"> இல் உள்ள பகுதி <xref
linkend="technical-infrastructure"/>ஐ பார்க்க</phrase>, அதில் தொகுக்க பட்ட வளங்குதளம்
தேர்வு செய்யும் முன்பு பதிள்கான வேண்டிய கேளவிள்கள் பற்றி அறியலாம்.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>ஒரு உரிமம் தேர்வு மற்றும் அதை விண்ணப்பித்தல்</title>

<para>இது மிகவும் சுருக்கமாக குறிப்பிடும் நோக்கத்தில், உரிம்ம தேர்வு பற்றிய மேம்போக்கான வழிகாட்டும் காட்டலுடன் உருவாக்கபட்ட பகுதி இது. முழுமையான 


Read <xref linkend="legal"/> to understand
the detailed legal implications of the different licenses, and how the
license you choose can affect people's ability to mix your software
with other software.</para>

<sidebar id="fsf-and-osi-approved">
  <title>Synonyms: "free software license", "FSF-approved", "open
  source license", and "OSI-approved"</title>

  <para>The terms "free software license" and "open source license"
  are essentially synonymous, and I treat them so throughout this
  book.</para>

  <para>Technically, the former term refers to licenses confirmed by
  the Free Software Foundation as offering the "four freedoms"
  necessary for free software (see <ulink
  url="http://www.gnu.org/philosophy/free-sw.html"
  >gnu.org/philosophy/free-sw.html</ulink>), while the latter term refers
  to licenses approved by the Open Source Initiative as meeting the
  Open Source Definition (<ulink url="http://opensource.org/osd"
  >opensource.org/osd</ulink>).  However, if you read the FSF's
  definition of free software, and the OSI's definition of open source
  software, it becomes obvious that the two definitions delineate the
  same freedoms&nbsp;&mdash;&nbsp;not surprisingly, as <xref
  linkend="free-vs-open-source"/><phrase output="printed"> in <xref
  linkend="introduction"/></phrase> explains.  The inevitable, and in
  some sense deliberate, result is that the two organizations have
  approved the same set of licenses.<footnote><para>There are actually
  some minor differences between the sets of approved licenses, but
  they are not significant for our purposes&nbsp;&mdash;&nbsp;or
  indeed for most practical purposes.  In some cases, one or the other
  organization has simply not gotten around to considering a given
  license, usually a license that is not widely-used anyway.  And
  apparently (so I'm told) there historically was a license that at
  least one of the organizations, and possibly both, agreed fit one
  definition but not the other.  Whenever I try to get the details on
  this, though, I seem to get a different answer as to what that
  license was, except that the license named is always one that was
  not many people used anyway.  So today, for any license you are
  likely to be using, the terms "OSI-approved" and "FSF-approved" can
  be treated as implying each other.</para></footnote></para>
</sidebar>

<para>There are a great many free software licenses to choose from.
Most of them we needn't consider here, as they were written to satisfy
the particular legal needs of some corporation or person, and wouldn't
be appropriate for your project.  We will restrict ourselves to just
the most commonly used licenses; in most cases, you will want to
choose one of them.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>The "Do Anything" Licenses</title>

<para><emphasis>29 August 2013: If you're reading this note, then
you've encountered this subsection while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis>  TODO: is
MIT or BSD still really the best default, given the modern patent
landscape?  Would Apache-2.0 be better&nbsp;&mdash;&nbsp;but then what
about the FSF's claim of GPL-incompatibility?  Need to get some advice
here.</para>

<para>If you're comfortable with your project's code potentially being
used in proprietary programs, then use
an <firstterm>MIT/X-style</firstterm> license.  It is the simplest of
several minimal licenses that do little more than assert nominal
copyright (without actually restricting copying) and specify that the
code comes with no warranty.  See
<xref linkend="license-choosing-mit-x"/> for details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>The GPL</title>

<para>If you don't want your code to be used in proprietary programs,
use the GNU General Public License, version 3 (<ulink
url="http://www.gnu.org/licenses/gpl.html"
>gnu.org/licenses/gpl.html</ulink>).  The GPL is probably the most
widely recognized free software license in the world today.  This is
in itself a big advantage, since many potential users and contributors
will already be familiar with it, and therefore won't have to spend
extra time to read and understand your license.  See <xref
linkend="license-choosing-gpl"/><phrase output="printed"> in <xref
linkend="legal"/></phrase> for details.</para>

<sidebar>
<para>If users interact with your code primarily over a
network&mdash;that is, the software is usually part of a hosted
service, rather than being distributed as a binary&mdash;then consider
using the <firstterm>GNU Affero GPL</firstterm> instead.  The AGPL is
just the GPL with one extra clause establishing network accessibility
as a form of distribution for the purposes of the license.  See <xref
linkend="gnu-affero-gpl"/><phrase output="printed"> in <xref
linkend="legal"/></phrase> for more.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>How to Apply a License to Your Software</title>

<para>Once you've chosen a license, you'll need to apply it to the
software.</para>

<para>The first thing to do is state the license clearly on the
project's front page.  You don't need to include the actual text of
the license there; just give its name and make it link to the full
license text on another page.  That tells the public what license you
<emphasis>intend</emphasis> the software to be released
under&mdash;but it's not quite sufficient for legal purposes.  The
other step is that the software itself should include the
license.</para>

<para>The standard way to do this is to put the full license text in a
file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>) included with the source code, and then
put a short notice in a comment at the top of each source file, naming
the copyright date, holder, and license, and saying where to find the
full text of the license.</para>

<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>

<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;
</screen>

<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename> or <filename>LICENSE</filename>, but
that's where it's usually put.  (You could change the above notice to
state that directly, but there's no real need to.)</para>

<para>In general, the notice you put in each source file does not have
to look exactly like the one above, as long as it starts with the same
notice of copyright holder and date<footnote><para>The date should
show the dates the file was modified, for copyright purposes.  In
other words, for a file modified in 2008, 2009, and 2013, you would
write "2008, 2009, 2013"&nbsp;&mdash;&nbsp;<emphasis>not</emphasis>
"2008-2013", because the file wasn't modified in most of the years in
that range.</para></footnote>, states the name of the license, and
makes clear where to view the full license terms.  It's always best to
consult a lawyer, of course, if you can afford one.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Setting the Tone</title>

<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  For
example, if the project is being opened up after years of closed,
in-house development, its development processes will change, and you
will have to prepare the existing developers for that change.</para>

<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>

<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive for centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>

<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; once
established, they will be largely self-perpetuating.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.apache.org/" >subversion.apache.org</ulink>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Avoid Private Discussions</title>

<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>

<para>Don't do it.</para>

<para>As slow and cumbersome as public discussion can be, it's
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious contributor would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:

<itemizedlist>
  <listitem>
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be lurking
        silently, gleaning information about the software.</para>
  </listitem>
  <listitem>
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
  </listitem>
  <listitem>
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than you might intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and he was emphatic about
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>

<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>

<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>

<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion with you and
there's no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Nip Rudeness in the Bud</title>

<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack as a separate issue unto itself,
separate from the technical content.</para>

<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>

    <blockquote>
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>

      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
    </blockquote>

<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.</para>

<para>One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>

<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practice Conspicuous Code Review</title>

<para>One of the best ways to foster a productive development
community is to get people looking at each others'
code&nbsp;&mdash;&nbsp;ideally, to get them looking at each others'
code <emphasis>changes</emphasis> as those changes arrive.
<firstterm>Commit review</firstterm> (sometimes just called
<firstterm>code review</firstterm>) is the practice of reviewing
commits as they come in, looking for bugs and possible
improvements.</para>

<para>There are a couple of reasons to focus on reviewing changes,
rather than on reviewing code that's been around for a while.  First,
it just works better socially: when someone reviews your change, she
is interacting with work you did recently.  That means if she comments
on it right away, you will be maximally interested in hearing what she
has to say; six months later, you might not feel as motivated to
engage, and in any case might not remember the change very well.
Second, looking at what changes in a codebase is a gateway to looking
at the rest of the code anyway&nbsp;&mdash;&nbsp;reviewing a change
often causes one to look at the surrounding code, at the affected
callers and callees elsewhere, at related module interfaces,
etc.<footnote><para>None of this is an argument against top-to-bottom
code review, of course, for example to do a security audit.  But while
that kind of review is important too, it's more of a generic
development best practice, and is not as specifically relevant to
running an open source project as change-by-change review
is.</para></footnote></para>

<para>Commit review thus serves several purposes simultaneously.  It's
the most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
commit review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>

<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with another developer, and one of
us has made a commit, we take care not to do the review verbally in
the room, but to send it to the appropriate online review forum
instead.  Everyone benefits from seeing the review happen.  People
follow the commentary and sometimes find flaws in it; even when they
don't, it still reminds them that review is an expected, regular
activity, like washing the dishes or mowing the lawn.</para>

<para>Some technical infrastructure is required to do change-by-change
review effectively.  In particular, setting up commit emails is
extremely useful.  The effect of commit emails is that every time
someone commits a change to the central repository, an email goes out
showing the log message and diffs (unless the diff is too large; see
<xref linkend="vc-vocabulary-diff"/>, in <xref
linkend="vc-vocabulary"/>).  The review itself might take place on a
mailing list, or in a review tool such as Gerrit or the GitHub "pull
request" interface.  See <xref linkend="commit-emails" /><phrase
output="printed" > in <xref linkend="technical-infrastructure"
/></phrase> for details.</para>

<sect3 id="subversion-commit-review">
<title>Case study</title>

<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one were particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.</para>

<para>What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>

</sect3>

<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>

<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood, that attention is being paid.  Of
course, code review does not absolve programmers of the responsibility
to review and test their changes before committing; no one should
depend on code review to catch things she ought to have caught on her
own.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="be-open-from-day-one">
<title>Be Open From Day One</title>

<para>Start your project out in the open from the very first day.  The
longer a project is run in a closed source manner, the harder it is to
open source later.<footnote><para>This section started out as a blog
post, <ulink
url="http://blog.civiccommons.org/2011/01/be-open-from-day-one/"
>blog.civiccommons.org/2011/01/be-open-from-day-one</ulink>, though
it's been edited a lot for inclusion here.</para>
</footnote></para>

<para>Being open source from the start doesn't mean your developers
must immediately take on the extra responsibilities of community
management.  People often think that "open source" means "strangers
distracting us with questions", but that's
optional&nbsp;&mdash;&nbsp;it's something you might do down the road,
if and when it makes sense for your project.  It's under your control.
There are still major advantages to be had by running the project out
in open, publicly-visible forums from the beginning.  Conversely, the
longer the project is run closed-source, the more difficult it will be
to open up later.</para>

<para>I think there's one underlying cause for this:</para>

<para>At each step in a project, programmers face a choice: to do that
step in a manner compatible with a hypothetical future open-sourcing,
or do it in a manner incompatible with open-sourcing.  And every time
they choose the latter, the project gets just a little bit harder to
open source.</para>

<para>The crucial thing is, they can't help choosing the latter
occasionally&nbsp;&mdash;&nbsp;all the pressures of development propel
them that way.  It's very difficult to give a future event the same
present-day weight as, say, fixing the incoming bugs reported by the
testers, or finishing that feature the customer just added to the
spec.  Also, programmers struggling to stay on budget will inevitably
cut corners here and there (in Ward Cunningham's phrase, they will
incur "<ulink url="http://en.wikipedia.org/wiki/Technical_debt"
>technical debt</ulink>"), with the intention of cleaning it up
later.</para>

<para>Thus when it's time to open source, you'll suddenly find there
are things like:</para>

<itemizedlist>
  <listitem>Customer-specific configurations and passwords checked
            into the code repository;</listitem>
  <listitem>Sample data constructed from live (and confidential)
            information;</listitem>
  <listitem>Bug reports containing sensitive information that cannot
            be made public;</listitem>
  <listitem>Comments in the code expressing perhaps overly-honest
            reactions to the customer's latest urgent request;</listitem>
  <listitem>Archives of correspondence among the developer team, in
            which useful technical information is interleaved with
            personal opinions not intended for strangers;</listitem>
  <listitem>Licensing issues due to dependency libraries whose terms
            might have been fine for internal deployment (or not even
            that), but aren't compatible with open source
            distribution;</listitem>
  <listitem>Documentation written in the wrong format (e.g., that
            proprietary internal wiki your department uses), with no
            easy translation tool available to get it into formats
            appropriate for public distribution;</listitem>
  <listitem>Non-portable build dependencies that only become apparent
            when you try to move the software out of your internal
            build environment;</listitem>
  <listitem>Modularity violations that everyone knows need cleaning
            up, but that there just hasn't been time to take care of
            yet...</listitem>
  <listitem>(This list could go on.)</listitem>
</itemizedlist>

<para>The problem isn't just the work of doing the cleanups; it's the
extra decision-making they sometimes require.  For example, if
sensitive material was checked into the code repository in the past,
your team now faces a choice between cleaning it out of the historical
revisions entirely, so you can open source the entire (sanitized)
history, or just cleaning up the latest revision and open-sourcing
from that (sometimes called a "top-skim").  Neither method is wrong or
right&nbsp;&mdash;&nbsp;and that's the problem: now you've got one
more discussion to have and one more decision to make.  In some
projects, that decision gets made and reversed several times before
the final release. The thrashing itself is part of the cost.</para>

<sect3 id="avoid-exposure-events">
<title>Waiting Just Creates an Exposure Event</title>

<para>The other problem with opening up a developed code base is that
it creates a needlessly large exposure event.  Whatever issues there
may be in the code (modularity corner-cutting, security
vulnerabilities, etc), they are all exposed to public scrutiny at
once&nbsp;&mdash;&nbsp;the open-sourcing event becomes an opportunity
for the technical blogosphere to pounce on the code and see what they
can find.</para>

<para>Contrast that with the scenario where development was done in
the open from the beginning: code changes come in one at a time, so
problems are handled as they come up (and are often caught sooner,
since there are more eyeballs on the code).  Because changes reach the
public at a low, continuous rate of exposure, no one blames your
development team for the occasional corner-cutting or flawed code
checkin.  Everyone's been there, after all; these tradeoffs are
inevitable in real-world development.  As long as the technical debt
is properly recorded in "FIXME" comments and bug reports, and any
security issues are addressed promptly, it's fine.  Yet if those same
issues were to appear suddenly all at once, unsympathetic observers
may jump on the aggregate exposure in a way they never would have if
the issues had come up piecemeal in the normal course of
development.</para>

<para>(These concerns apply even more strongly to government software
projects; see <ulink url="starting-open-for-govs"
>starting-open-for-govs</ulink> <phrase output="printed" > in <xref
linkend="governments-and-open-source" /></phrase>.)</para>

</sect3>

<para>The good news is that these are all unforced errors.  A project
incurs little extra cost by avoiding them in the simplest way
possible: by running in the open from Day One.</para>

<para>"In the open" means the following things are publicly
accessible, in standard formats, from the first day of the project:
the code repository, bug tracker, design documents, user
documentation, wiki, and developer discussion forums. It also means
the code and documentation are placed under an open source license, of
course. It also means your team's day-to-day work takes place in the
publicly visible area.</para>

<para>"In the open" does not have to mean: allowing strangers to check
code into your repository (they're free to copy it into their own
repository, if they want, and work with it there); allowing anyone to
file bug reports in your tracker (you're free to choose your own QA
process, and if allowing reports from strangers doesn't help you, you
don't have to do it); reading and responding to every bug report
filed, even if you do allow strangers to file; responding to every
question people ask in the forums (even if you moderate them through);
reviewing every patch or suggestion posted, when doing so may cost
valuable development time; etc.</para>

<para>One way to think of it is that you're open sourcing your code,
not your time.  One of those resources is infinitely replicable, the
other is not.  You'll have to determine the point at which engaging
with outside users and developers makes sense for your project.  In
the long run it usually does, and most of this book is about how to do
it effectively.  But it's still under your control.  Developing in the
open does not change this, it just ensures that everything done in the
project is, by definition, done in a way that's compatible with being
open source.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>

<!-- TODO from hardcopy: Add a section or subsection on the mechanical
     details of how to open up a formerly closed project. -->

<para>As per <xref linkend="be-open-from-day-one" />, it's best to
avoid being in the situation of opening up a closed project in the
first place; just start the project in the open if you can.  But if
it's too late for that, and you find yourself opening up an existing
project that already has active developers accustomed to working in a
closed-source environment, make sure everyone understands that a big
change is coming&mdash;and make sure that you understand how it's
going to feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>

<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="money"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Announcing</title>

<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.</para>

<para>This is a simpler process than you might expect.  There are two kinds
of forums for making announcements: generic forums that display a
constant stream of new project announcements, and topic-specific
forums where your project would be appropriate news.</para>

<para>The most useful generic place is probably <ulink
url="http://freecode.com/"
>freecode.com</ulink>&nbsp;&mdash;&nbsp;just click on the
<guimenuitem>Submit new project</guimenuitem> link in the top
navigation bar.  Freecode's list of recent new projects is embedded on
the front page of the popular <ulink url="http://slashdot.org/"
>Slashdot.org</ulink>, which means someone interested is likely to
notice it and help spread the news by word of mouth.  (Note that
Freecode was known as Freshmeat.net until it was renamed in Oct 2011.)
You might also want to register your project at <ulink
url="http://OhLoh.net/" >OhLoh.net</ulink>, which is the closest thing
there is to an integrated global database of free software projects
and their contributors.  (Some projects also successfully climb the
word-of-mouth / upvote tree to the point where they are featured on
the front page of <ulink url="http://news.ycombinator.com/"
>news.ycombinator.com</ulink>, one of the subreddit forums related to
<ulink url="http://www.reddit.com/r/technology/"
>reddit.com/r/technology</ulink>, or some similarly popular public
page.  While it's good news for your project if you can get mentioned
in a place like that, I hesitate to contribute to the marketing arms
race by suggesting any concrete steps to accomplish this.  Use your
judgement and try not to spam.)</para>

<para>The topic-specific forums are probably where you'll get the most
interest.  Think about mailing lists or web frums where an
announcement of your project would be on-topic and of
interest&nbsp;&mdash;&nbsp;you might already be a member of some of
them&nbsp;&mdash;&nbsp;and post there.  Be careful to make exactly
<emphasis>one</emphasis> post per forum, and to direct people to your
project's own discussion areas for follow-up discussion (when posting
by email, you can do this by setting the
<systemitem>Reply-to</systemitem> header).  Your announcement should
be short and get right to the point, and the Subject line should make
it clear that it is an announcement of a new project:</para>

<screen>
To: discuss@some.forum.about.search.indexers
Subject: [ANN] Scanley, a new full-text indexer project.
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites
   - (planned) Long-distance mind-reading

Requirements:
   - Python 3.2 or higher
   - SQLite 3.8.1 or higher

For more information, please come find us at scanley.org!

Thank you,
-J. Random
</screen>

<para>(See <xref linkend="publicity"/><phrase output="printed"> in
<xref linkend="communications"/></phrase> for advice on announcing
subsequent releases and other project events.)</para>

<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being announced even during the
design/discussion stage.  I used to think starting with running code
was crucial, that it was what separated successful projects from toys,
and that serious developers would only be attracted to software that
already does something concrete.</para>

<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>

<para>On the evidence of this and other examples, I have to back away
from the assertion that running code is absolutely necessary for
launching a project.  Running code is still the best foundation for
success, and a good rule of thumb would be to wait until you have it
before announcing your project<footnote><para>Note that
<emphasis>announcing</emphasis> your project can come long after you
have open sourced the code.  My advice to consider carefully the
timing of your announcement should not be taken as advice to delay
open sourcing the code&nbsp;&mdash;&nbsp;ideally, your project should
be open source and publicly visible from the very first moment of its
existence, and this is entirely independent of when you announce it.
See <xref linkend="be-open-from-day-one"/> for
more.</para></footnote>.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>

<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

