<chapter id="introduction">

<title>முன்னுரை</title>

<simplesect>

<para>பெரும்பாலான கட்டற்ற மென்பொருள் திட்டங்கள் தோல்வியடைகின்றன.</para>

<para>நாம் தோல்விகளை பற்றி மிகவும் குறைவாக கேட்கின்றோம்.வெற்றிகரமான திட்டங்களெ 
நமது பவனத்தை ஈர்க்கின்றன, என்னில் அடங்கா கட்டற்ற மென்பொருள் திட்டங்கள்<footnote>
<para>மிகவும் பிரபலமான திட்டப்பதிப்பு தளங்களின் உதவிகொன்டு நான் மதிப்பிட்ட திட்டங்கள்
மட்டும் ஒரு நூறு முதல் இருநூறுறாய்ரம் இருக்கும்.  எண்ணிக்கை மிகவும் உண்மையான 
எண்ணிக்கை மிகவும் அதிகமாக இருக்கும், ஏனெனில் என்னுடைய எண்ணிக்கை மிகவும் 
பிரபலமான திட்டப்பதிப்பு தளங்கள் உள்ளவை மட்டும்</para></footnote> ஒரு சிறிய சதவீதம்
மட்டும் வெற்றி பெற்றாலும், இதன் விளைவாக இன்னும் புலப்படும் திட்டங்கள் நிறைய இருக்கிறது.
நாம் தோல்விகளை பற்றி கேட்க வேண்டாம், ஏனெனில் தோல்வி ஒரு நிகழ்வு அல்ல.  
ஒரு திட்டம் சாத்தியமற்று போவதுற்க்கு எந்த ஒரு ஒற்றை கணமும் இல்லை; மக்களின் சிறிய 
கவனச்சிதறலெ முழு வேலையை நிறுத்த பொதுமானது.  சில கணம் திட்டதை உருவாக்கியவர்களெ 
திட்டம் நிறைவு பெரும் போது அதுவே அத்திட்டதின் இறுதியான மாற்றம் என்பதை உனர்வது 
இல்லை.  ஒரு திட்டம் காலாவதியாவதை கூட தெளிவாக வரையறையை செய்வது இல்லை.  அதை 
தீவிரமாக ஆறு மாதங்களுக்கு கிடப்பில் வைப்பதால் நிறுத்தப்பட்டதா?  அதன் பயனீட்டாளர் 
குறைவதால், இல்லை உருவாக்குபவர் நாட்டம் குறைவதால் நிறுத்தப்பட்டதா? திட்ட வல்லுனர்கள் 
வேர்ரொறு திட்டத்தை மறுப்பதிப்பதாய் உனர்வதால?&mdash;இல்லைஎனில் வேர்ரொறு திட்டதில் 
இனைந்து தங்கலின் பலய திட்ட அனுபவதை பயன்படுத்த விளைவதாலா?</para>

<para>ஏனவெ இத்தகைய சிக்கல்களள் தோல்வி விகித கணக்கீடை துல்லியமான வைக்க முடியாது.
ஆனால் இரண்டு தசாப்தங்களாக கிடைத்த தடயங்கள் 
(see <xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for more about
them), மற்றும் அனைத்து காறனிகளையும் google செய்தால் தோல்வி விகிதம் மிக அதிகம் 
என்னும் முடிவுக்கு வரக்கூடும்: ஒருவேளை 90&ndash;95% வரைக்கூட இறுக்கும்.  வாழும் ஆனால்
செயலிழந்த திட்டங்களை உள்ளிட்டல் இவ் எண்ணிக்கை மேலும் அதிகரிக்கும்: மேலும் 
<emphasis>எவை</emphasis>emphasis> தேவைப்படும் விகிதத்தை விட குறைவாக 
வளற்கின்றனவோ.</para>

<para>இப்புத்தகம் தோல்வியை தவிர்ப்பது பற்றியது.  இது திட்டங்களை சரியக செய்யவது 
எப்படி என்று மட்டும் ஆராயாமல், எப்படி தவறு செய்யவது என்பதயும் விளக்குவதற்கு, 
அதனால் நீங்கள் சரியான பிரச்சினைகள் தொடக்கத்தில் அடையாளம் காண முடியும்.  இதை 
படித்தவுடன் நீங்கள் பொதுவான தவறுகளை தவிர்ப்பது மட்டும் இன்றி, வெற்றிகரமான திட்ட 
வளர்ச்சி மற்றும் பராமரிப்பு நுட்பங்களையும் புரிந்துகொள்ள இயலும் என்பது என் நம்பிக்கை.. 
வெற்றி சிறு விளையாட்டு அல்ல, இந்த புத்தகம் வெற்றி அடயவொ அல்லாது வணிக 
போட்டியில் முன்னணியில் பெறுவது பற்றியொ அல்ல. உண்மையில், ஒரு கட்டற்ற 
மென்பொருள் திட்டம் இயங்க ஒரு முக்கிய பகுதி, மற்ற தொடர்புடைய திட்டங்களுடன் 
எவ்வாரு சுமூகமாக செயல்படுவது என்பதெ. தொலைநோக்கில், ஒவ்வொரு வெற்றிகரமான 
திட்டமும் உலகளாவிய கட்டற்ற மென்பொருள் நல்வாழ்விர்கெ பங்களிக்கிறது</para>

<para>தனியுரிம மென்பொருள் திட்டங்கள் தோல்வியடையும் அதே வகையான காரணங்கள் 
இலவச மென்பொருள் திட்டங்களில் தோல்விகும் பொருந்தும் என்று கூர தூண்டுகின்றன. 
நிச்சயமாக, கட்டற்ற மென்பொருள் நம்பத்தகாத எந்த ஏகபோக உரிமையும் கொண்டுள்ளதல்ல, 
மாறாக தெளிவற்ற குறிப்புகள், மேலாண்மை குரைபாடுகள், போதுமான வடிவமைப்பு இன்மை 
அல்லது மென்பொருள் தொழில் நன்கு அறியப்பட்ட வழக்கங்கள் எதிர்பார்க்கலாம். இந்த 
தலைப்புகளில் நிறய எழுதப்பட்டு உள்ளது, நான் அதை இந்த புத்தகதில் பிரதி 
முயற்சிக்கவில்லை.  அதற்கு பதிலாக, நான் கட்டற்ற மென்பொருள் சார்ந்த விசித்திரமான 
பிரச்சினைகளை விவரிக்க முயற்சிப்பேன். </para>

<para>கட்டற்ற மென்பொருள் நன்மைகள் பற்றிய யதார்த்தமற்ற எதிர்பார்ப்பு மிகவும் 
பொதுவான தவறுகளில் ஒன்று. ஒரு கட்டற்ற மென்பொருள் உரிமம் மென்பொருள் 
உருவாக்குபவர்களுக்கு திடீரென்று பங்கீட்டலிக்க காறனி ஆவதும், அல்லது ஒரு பதற்றமான 
திட்டம் திறந்த உரிமம் பறுவதால் தானாகவே அதன் சரிசெய்யப்படுவதும் இல்லை.. 
உண்மையில், முற்றிலும் எதிரானது: ஒரு திட்டம் திறந்துவிடப்படும் பொது முழு புதிய 
சிக்கல்களை சேர்க்கலாம், மற்றும் வெறுமனே குறுகிய காலத்தில் செலவை <emphasis>மேலும்
</emphasis> உயர்த்தும். திறந்துவிடல் என்பது முற்றிலும் புதியவருக்கு புரிந்து கொள்ளும் 
வகையில் அமைத்தல், திட்டத்தை வளர்க்கும் குறிப்புகளை தயார் செய்வது மற்றும் மின் 
அஞ்சல் பட்டியல் அமைத்தல், மேலும் பொதுவாக முதல் முறை ஆவனம் செய்வது.  இவை 
அனைத்தும் மிக அதிகப்படியான வேலை.  அது மட்டும் இன்றி, <emphasis>ஆர்வலர்கள் இசைவு தெரிவிக்கும் 
பொது</emphasis> அவர்களுக்கு போதிய விலக்கம் அளிப்பது அவர்களால் பயன் பெரும் முன்பே அதிகப்படியான 
சுமையை கூட்டும்.  ஓரு உருவாக்குபவராக Mozilla project-ல் ஆரம்ப காலங்களில் இருந்த 
சிக்கல்களை பற்றி Jamie Zawinski கூறியது:</para>

    <blockquote>
      <para><emphasis>திறந்த மூலம் பலன் தரவல்லது, அதே சமயம் கண்டிப்பாக அது ஓரு 
      சஞ்சீவினி அல்ல.  ஓரு எச்சரிக்கையான கறுத்தை சொல்ல விரும்பினால், அது ஓர் அழிவின் 
      ஆரம்பத்தில் உள்ள திட்டத்தை எடுத்து, "திறந்த மூலம்" என்னும் மந்திர துகள் கொண்டு 
      தூவுவதால் உயிர்பிக்க இயலாது. மென்பொருள் கடினமானது.  அதன் பிரச்சினைகள் என்று 
      எளிமையானவை அல்ல.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"
      >jwz.org/gruntle/nomo.html</ulink></emphasis>)</para>
    </blockquote>

<para>தொகுத்தல் மற்றும் முன்னிலை படுத்துவதை திட்டம் நன்றாக நடந்து கொண்டு இருக்கையில் 
கவனக்குறைவாக செய்வது ஓர் பொதுவான தவறுதல்.  தொகுத்தல் மற்றும் முன்னிலை படுத்துதல் 
பல்வேறுபட்ட செயல்களை கொண்டது, அவை அனைத்தும் இனைந்து செயல் புரிய உள்ள 
தடைகளை குறைப்பது.  திட்டத்தை வரவேற்க்க தக்கதாக அமைப்பது என்றால் உருவாக்குபவர்களுக்கான 
குறிப்புகளை செய்வது, புதியவர் அறிந்துகொள்ளும் வகையில்  குறிப்புகள் தயார் செய்வது, மென்பொருள் 
தொகுப்பு மற்றும் நிருவும் செயல்களை தானியங்க வைப்பது, மற்றும் பல.</para>

<para>பலர் இதை மென்பொருள் குறியீடு செய்வதை விட முக்கியத்துவம் அற்றதாக கருதுவது வருந்ததக்கது.  
அதர்க்கு சில காரணங்கள் உள்ளது.  முதலில், அது சலிப்பூட்டும், அதன் பயன்கள் திட்டத்தை பற்றிய 
தெளிவு அற்றவரக்கு உதவுவது&nbsp;&mdash;&nbsp;மற்றும் மறுதலையாக: மொத்தத்தில் எப்படியிருந்தாலும், 
அந்த மென்பொருள் குறியீட்டை உருவாக்கியவர்க்கு அது முற்றிலும் அவசியம் அற்றது.  அவர்கள் 
உருவாக்கியதால் எப்படி தொகுப்பது, பராமரிப்பது மற்றும் பயன்படுத்துவது என்பதை நன்கு அறிவர்.  
இரண்டாவதாக, மென்பொருள் உருவாக்க தேவையான திறமை அதை முன்னிலை படுத்தும் 
தொகுப்பாளர்களிடம் இருந்து முற்றிலும் வேறுபட்டது.  பொதுவாக மக்கள் தங்களின் திறமை 
சார்ந்த செயலில்தான் ஆர்வம் கொள்வர்.  <xref linkend="getting-started"/> 
தொகுப்பு மற்றும் முன்னிலை படுத்துவதை பற்றி விளக்குகின்றது, மேலும் அது துவக்கதில் இருந்தே  எத்தகைய 
முக்கியதுவம் உள்ள செயல் என்பதை விளக்குகின்றது.</para>

<para>அடுத்த்தாக உள்ள ஒரு தவரான நம்பிக்கை திறந்த மூல திட்டங்களுக்கு மேலான்மை தேவையற்றது 
அல்லது மிக குறைவாக தேவைப்படும் என்பது, அதே போல் ஓர் அலுவலகத்தில் நடைபெரும் திட்டங்களுக்கான 
மேலான்மை கொள்கைகள் இங்கும் பொருந்தும் என என்னுவது.  திற்ந்த மூல திட்டங்களில் திட்ட 
மேலான்மை எப்பொதும் வெளிப்படையாக தெரிவதில்லை அதே சமயம் ஒரு வெற்றி கரமான திட்டத்தில் 
அது இலைமறை காயாக அமைந்திருக்கும்.  அதை நிரூபிக்க ஒரு சிறிய கருத்தாய்வு போதுமானது.
ஒரு திறந்த மூல திட்டம் பலதரபட்ட உருவாக்குநர்களை கொன்ட கலப்பு அமைப்பு; தனித்தனை இலக்குகளுடன், 
நேரில் கண்டிராதவர்களை அடக்கியாது&mdash;அவர்கள் ஏற்கனவே தனித்தியங்கும் சுதந்திர மனம் படைத்தவர்கள்&mdash;.  
இந்த கருத்தாய்வில் அத்தகைய குழுவில் மேலான்மை <emphasis>இல்லை எனில்<ழemphasis> 
எத்தகைய விழைவுகள் ஏற்ப்படும் என்பதை கற்பனை செய்யலாம். எந்த ஒரு அதிசயமும் இல்லை எனில் அது 
கண்டிப்பாக சரிந்துவிடும். எந்த செயலும் அதுவாகவே நாம் என்னும் வகையில் நிகழ்வது இல்லை.
மேலான்மை மிக தீவிரமேக செயல் ஆற்றும் போதும், அது பொதுவாக முறைசாரா, நுட்பமான 
மற்றும் குறைந்த முக்கியதுவம் கொன்டது.  தங்களில் ஒருங்கினைந்த குறிக்கோள்களில் குழுவாக 
செயலாற்றுகையில் மட்டுமே அதிக முன்னேற்றம் காண இயலும் என்னும் என்னதான் ஓரு உருவக்குபவர்கள் 
குழுவை இனைந்து செயல்பட வைக்கிறது.  எனவே பெரும்பாலும் மேலான்மையின் குறிக்கோள் அவர்களிடம் 
அத்தகைய நம்பிக்கையை வளர்க்க, குழு தகவல் தொடர்பு ஒழுங்குமுறைகளை வகுத்தல், தனிப்பட்ட 
நம்பிக்கைகளால் தனித்து விடப்படாமல் காப்பது, மற்றும் உருவாக்குபவர்கள் மீன்டும் மீன்டும் வரும் 
வகையில் அமைப்பது ஆகும்.  அவற்றை எவ்வாரு செய்யலாம் என்னும் விரிவான விலக்கம் இந்த 
புத்தகத்தின் பின்வரும் பகுதிகளில் உள்ளது.</para>

<para>இறுதியாக, ஒரு பொது வகையான பிரச்சனைகளுக்கான காரனியை "கலாச்சார 
ஊடுருவல் தோல்வி" என கூரலாம். பத்து அல்லது இருபது வருடங்களுக்கு முன்பு கட்டற்ற மென்பொருள் 
பற்றிய உலகலாவிய கலாச்சாரத்தை பற்றி கூருவது முதிர்வற்ற கூற்றாக நினைக்க பட்டது ஆனால் 
அது இப்போது சாத்தியம் அல்ல.   ஒரு கவனிக்க தக்க பண்பாடு மெதுவாக தோன்றி உள்ளது, 
மேலும் அது முற்றிலும் ஒன்றுபட்டு ஒரேமாதிரியானது அல்ல&mdash;அதில் சிறிய அளவிலேனும் புவியியல்
சார்ந்த எந்த ஒரு பண்பாட்டிலும் உள்ளது போன்று வேறுபாடுகளும் உட்கட்சிப்பூசலும் 
உள்ளது&mdash;அது அடிப்படையில் சீரான உட்கட்டமைப்பு கொண்டுள்ளது.  வெற்றி பெற்ற பெரும்பாலான 
கட்டற்ற மென்பொருள் திட்டங்கள் அந்த உள் கட்டமைப்பின் ஒரு சில குணங்களை கொண்டுள்ளன.  
அவை சில இயல்புகளை ஊக்குவிக்கின்றன மற்றவற்றை தண்டிக்கின்றன.  அவை திட்டமிடப்படாத 
பங்களிப்பை வளர்க்கும் சூழ்நிலையை உருவாக்குகின்றன, சில சமயம் மத்தி கட்டுபாட்டை விலக்கியும்;
அவை மென்மையான மற்றும் வசைபாடும் பண்புகளையும் கணிசமாக மாறுபட்ட வகையில் கொண்டுள்ளன.  
முக்கியமாக, நீண்ட நாள் பங்களிப்பு  செய்பவர்கள் பொதுவாக இத்தகைய கட்டுபாடுகளை உட்புகுத்தி 
இருப்பார்கள், எனவே ஒருமித்த கருத்தை பகிர்ந்து கொள்ள இலகுவாக இருக்கும்.    
வெற்றி பெறாத திட்டங்கள் பொதுவாக இத்தகைய உள் கட்டமைப்பில் இருந்து வேறுபடுகின்றன, அல்லது 
வருந்த தக்க வகையில் ஒருமித்த கருது இன்றி உள்ளன.  அதனால் ஏதேனும் குழப்பமான சூழ்நிலையில் அது
மென்மேலும் பண்பாட்டு பிளவை ஏற்படுத்து கின்றது. </para>

<para>அந்த இறுதியான காரனி, கலாச்சார ஊடுருவல் தோல்வி, ஒரு கவர்ச்சிகரமான தோற்றப்பாடை 
தருகின்றது: அது ஒரு சில குறுப்பிட்ட நிருவன அமைப்புகள் திறந்த மூல திட்டங்களுக்கான கட்டமைப்பு 
அமைப்பிற்கு மிக குறைந்த அளவே ஏற்றதாக உள்ளன என்பதைப்போல் காட்டுகின்றது.
இரண்டாவது பதிப்பு தயாரிப்பதில் எனக்கு நம்பி ஏற்றுகொள்ள வேண்டியிருந்த பெரிய ஆச்சரியங்கள் ஒன்று, 
எனது அனுபவத்தில் அரசு சார்ந்த அமைப்புகள் அத்தகைய குறைந்த அளவே பொருத்தமாகவும்; லாப
நோக்கிலான தனியார் நிருவனங்கள் நன்கு ஒத்துப்போவதும் அதே நேரம் லாப நோக்கில்லா நிருவனங்கள் 
இரண்டிற்கும் இடைபட்ட இனக்கம் கொண்டிருப்பதாகும்.  அதர்க்கு பல காரணிகள் உள்ளன 
(see <xref linkend="governments-and-open-source"/>), மேலும் அவை 
அனைத்தும் சமன் செய்ய இயலும் என்றாலும் கவனிக்க வேண்டியது ஏற்கனவே உள்ள நிருவன 
அமைப்புகள்&nbsp;&mdash;&nbsp;குறிப்பாக ஒரு படிநிலை கொண்ட அமைப்புகள், மற்றும் 
<emphasis>குறிப்பிட தக்க</emphasis> படிநிலைகளை முற்றிலும் சார்ந்த மற்றும் 
பொதுமக்களுக்கு வெளிப்படையாக கூர இயலாத&nbsp;&mdash;&nbsp;திட்டங்கள் திறந்த மூல 
திட்டங்களாக தொடங்கவோ அல்லது  மாற்றவோ முயலும் போது கண்டிப்பாக சில சமரசங்கள் 
தேவைப்படுகின்றது.</para>

<para>இந்த புத்தகம் ஒரு செயல்முரை விளக்கமே அன்றி, வரலாற்று ஆய்வு கட்டுரையோ மானுடவியல் 
விளக்க உறையோ அல்ல.  இருப்பினும், அறிவுறை கூறும் முன்பு நடைமுறையில் உள்ள திறந்த மூல 
திட்டங்களின் கலாசாரத்தின் ஆரம்பம் பற்றிய அடிப்படை அவசியம்.  அதை உணர்ந்தவர், பல தரப்பட்ட 
மற்றும் மாற்றி அமைக்க பட்ட, திறந்த மூல திட்டங்களில் மிக எளிதில் ஈடுபடவும் தயக்கம் இன்றி 
கையாலவும் இயலும்.  மாறாக அத்தகைய கலாச்சார தெளிவு அற்றவர் திட்டங்களை தொகுத்து வழங்கவோ 
அல்லது பங்கு கொள்ளவோ மிகவும் சிரம்மும், ஆச்சரியம் கொள்ளலாம்.  மேலும் மேலும் திறந்த மூல 
திட்டங்களில் உருவாக்குபவர்கள் அதிகப்படியாக சேருவதால் இரண்டாவதக கூரியது போல் அத்தகைய 
தெளிவற்றவர்கள் அதிகம் காணப்படு கின்றனர்&mdash;இது பொதுவாக அன்மையில் புலம்பெயர்ந்தவர்களால், 
மேலும் இத்தகைய சூழல் சிலகாலம் நீடிக்க வாய்ப்புள்ளது.  நீங்கள் அத்தகைய பிரிவு சார்ந்தவர் எனில் 
பின்வரும் பாகம் அடுத்த கட்டத்திற்க்கு, இந்த புத்தகத்திலும் மட்டும் இன்றி இணையத்தில் கிடைக்கும் மற்ற 
கட்டூரைகளுக்கும், தேவையான அடிப்படைகளை விளக்குகின்றது.  (மாறாக நீங்கள் ஏற்கனவே நீண்ட நாள் 
திறந்த மூல திட்டத்தில் பங்களிப்பவர் எனில் உங்களுக்கு கீழ்வரும் பாகத்தில் உள்ளவை முற்றிலும் 
பழகியவையாக இருக்கும் எனவே நீங்கள் விரும்பினால் அதனை தவிர்த்து விட்டு அடுத்த பாகத்திற்க்கு
செல்லலாம்.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>வரலாறு</title>

<para>மென்பொருள் பகிர்ந்து கொள்ளுவது மென்பொருள் உருவான காலம் முதல் நடைமுரையில் உள்ளது.  
ஆரம்பகாலங்களில் வன்பொருள் கண்டுபிடிப்பு மட்டுமே வணிக முக்கியதுவம் கொண்டதாக உற்பத்தியாளர்கள் 
என்னினர், எனவே மென்பொருளை ஒரு சொத்தாக நினைக்க வில்லை.  பெரும்பான்மையான அக்கால 
வாடிக்கையாளர்கள் விஞ்ஞானிகள் அல்லது தொழில்நுட்ப வல்லுனர்கள் எனவே அவர்கள் வன்பொருளுடன் 
வரும் மென்பொருளை தங்கள் தேவைக்கு ஏற்றவாரு மாற்றி அமைக்கவல்லவர்கள்.  அவர்கள் மற்ற பட்ட 
மென்பொருள் இணைப்புகளை(patches) உற்பத்தியாளர்களுக்கு மட்டும் இன்றி தங்களை போன்ற அதே 
மாதிரிகளை வைத்துள்ளவர்களுக்கும் வழங்கினர்.  உற்பத்தியாளர்கள் பொதுவாக அவற்றை ஏற்று கொள்ளவும் 
சில நேரம் ஊக்குவிக்கவும் செய்தனர்:அவர்கள் பார்வையில் அது மென்பொருளில் ஏற்படுத்த படும் முன்னேற்றம் 
அவர்களின் வன்பொருளை வணிகரீதியாக விரும்பத்தக்கதாக மாற்றுவதாக என்னினர்.</para>

<para>அத்தகைய கலாச்சாரம் இன்றய திறந்த மூல திட்டங்களை ஒத்து போவதாக தோன்றினாலும் அது 
முக்கியமாக இரண்டு வகையில் வேறுபட்டது.  முதலில், வன்பொருள் தரப்படுத்தல் நடைமுறையில்  
இல்லை&mdash;அப்பொழுது கணிப்பொரி கண்டுபிடிப்புகள் மிகவும் தீவிரமாக நடைபெற்று வந்தது அதனால் 
ஒன்றிக்காக உருவாக்க பட்ட மென்பொருள் மற்ற எவற்றிலும் இயக்க தக்கதாக இல்லை.  ஒரு குறிப்பிட்ட 
கணினி மாதிரிக்கு உருவாக்கிய மென்பொருள் பொதுவாக மற்ற எந்த மாதிரியிலும் இயங்காது: எனவே 
மென்பொருள் வல்லுனர்கள் ஒரு குறுப்பிட்ட செயலி கட்டமைப்பை அல்லது அத்தகை பிரிவை சார்ந்த 
அனைத்து செயலி குறியீடுகளையும் பழக்க படுத்தி கொள்வார்கள் (ஆனல் இந்த காலத்தில் ஒரு 
கணிப்பொரி மொழியை அல்லது அத்தகைய மொழி வகையை சார்ந்த தங்களுக்கு அவசியமான அனைத்து 
மொழிகளையும் பழக்க படுத்தி கொள்வார்கள்.).  அவர்களின் ஆக்க திரன் ஒரு குறிப்பிட்ட செயலி 
கட்டமைப்பை சார்ந்ததாக மாறிவிடுவதால் அவர்கள் அவற்றையே மற்றவர்களுக்கு 
பரிந்துரை செய்யவும் செய்வார்கள்.   எனவே குறுப்பிட்ட செயலி சார்ந்த குறியீட்டை பரிமாற்றி கொல்வது 
அந்த வன்பொருள் மீது ஈர்ப்பை அதிகரிப்பதால் உற்பத்தியாளர்கள் அதை வரவேற்றார்கள். </para>

<para>இரண்டாவதாக, அக்காலத்தில் இணையம் பொது பயன்பாட்டில் இல்லை.  சட்டரீதியான 
சிக்கல்கள் மிக குறைவாக இருந்த போதும் தொழில் நுட்பரீதியான சிக்கல்கள் அதிகம் இருந்தது: ஒப்பிட்டு 
பார்க்கையில் ஒரு பகுதியில் இருந்த மற்ற பகுதிக்கு குறியீட்டை கொண்டு சேர்ப்பது மிக கடினமாக 
இருந்தது.  ஓரிரு சிறிய அளவிலான, ஆய்வகத்தின் உள்ளே அல்லது அலுவலகத்திற்கு உள்ளே, இயங்க 
கூடிய வலை தலங்கள் பகிர்ந்து கொள்ள இருந்தன.  இருப்பினும் அது அனைவரிடமும் பகிர்ந்து 
கொள்ளும் வகையில் எளிதாக இல்லை.  அத்தகை தடைகள் <emphasis>அனைத்தும்</emphasis> பல 
சந்தர்ப்பங்களில் கடக்க பட்டு உள்ளன.  சில சந்தர்ப்பங்களில் பல்வேரு குழுக்கள் தொடர்பு ஏற்படுத்தி 
கொன்டு  தட்டுகள் அல்லது நாடாக்களில் தரைவழி அஞ்சல் மூலம் மென்பொருள் இணைப்புகளை பரிமாறி 
கொன்டனர், சில சந்தர்ப்பங்களில் உற்பத்தியாளர்களே அத்தகைய பரிமாற்றத்தை செய்தனர்.  அதே 
வேலையில் பெரும்பான்மையான மென்பொருள் வல்லுனர்கள் பல்கலைகழகங்களில் இருந்தமையால் 
அவர்களின் படைப்புகளை அச்சிட நேரிட்டது.  ஆனால் அத்தகைய பறிமாற்றம் பகிர்ந்துகொள்வதில் 
தடையை ஏற்ப்படுத்தியது அந்த தடை தூரத்திற்க்கு நேரடி விகிதாசாரம் கொண்டது(உண்மையான அல்லது 
நிறுவனரீதியாக).  தோய்வு அல்லாத பரவலான பரிமாற்றம், இப்பொழுது உள்ளதை போல், சாத்தியம் 
அல்ல.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>தனியுரிம மென்பொருள் மற்றும் கட்டற்ற மென்பொருள் எழுச்சி</title>

<para>தொழில் வளர்ச்சி காரணமாக, பல மாற்றங்களும் அதே நேரத்தில் ஏற்ப்பட்டன.  வன்பொருள் 
வடிவமைப்பின் பன்முகத்தன்மை இருதியாக சரியான வெற்றியாலரை அடையால 
படுத்திவிட்டது&mdash;உயர்ந்த தொழில்நுட்பம், உயர்ந்த சந்தைப்படுத்தல், அல்லது இரண்டாலும் 
வெற்றியாளரை.  அதே நேரம், மேலும் முற்றிலும் தற்செயலாக இன்றி, உயர்மட்ட கணினி நிரலாக்க 
மொழிகளின் வளர்ச்சி ஒரு வகையான மாதிரிக்கு எழுதிய மென்பொருள் தானக அனைத்து மாதிரிக்கும் 
("தொகுக்கப்பட்டு') இயங்கும் படி செய்தது.  இந்த தாக்கங்கள் வன்பொருள் உற்பத்தியாளர்கள் மீதும் 
இருந்தது: காரணம் அந்த மொழிகளின் உதவியால் ஒரு வாடிக்கையாளர் மென்பொருள் சார்ந்த பொறியிலை 
கணினி வடிவமைப்பு பற்றி கவலை இன்றி செய்ய இயலும்.  இத்தகைய மொழிகளின் வளர்சியால் 
செயலாக்க திறனை காரணியாக வைத்து பலதர பட்ட கனிணிகளை ஒப்பீட்டுபார்கையில், வடிவமைப்பு 
குறைபாடுகள் காரணமாக வன்பொருளை மட்டும் தனது சொத்தாக பார்க்கும் ஒரு உற்பத்தியாளர் வனிக 
இலாப விகிதத்தில் சரிவை மட்டுமே எதிர் நோக்க நேரும்.  செயலாற்றும் திறன் மாற்றுப் பொருள் 
போலும் மென்பொருளே வேறுபடுத்தும் காரனியாகவும் ஆகிறது.  இவ்வாரு மென்பொருள் விற்பனை, அல்லது 
அதனை வன்பொருளின் ஒரு அங்கமாக கருதுவது, ஒரு சிரந்த உத்தியாக மறியது.</para>

<para>அது மட்டும் இன்றி பங்கிடபட்ட மென்பொருள் போட்டியாளர்கள் கையில் சிக்க வாய்பு 
இருந்த்து.  இதனால் உற்பத்தியாளர்கள் தங்கள் மென்பொருள் குறியீடிர்க்கு பதிப்புரிமையை கட்டாய படுத்தலானர்.    
அதை மீறியும் மென்பொருள் மற்றங்களை செய்வதும் அதை மற்றவருடன் பகிர்ந்து கொள்ளவும் விரும்புவோர், 
"மதிப்பு கூட்டு பொருள்" என்னும் பெயரில் விற்பனை செய்ய பட்ட மென்பொருகளை மீன்டும் தாங்களாகவே 
எழுத நேர்ந்த்து.  இதற்கு முரண்பாடாக இணையமும் உருவாக துவங்கியது.  அதலால் மென்பொருள் 
பகிர்வுக்கு இருதியாக தேவை பட்ட தொழில்நுட்ப வசதியும் சாத்தியமானது, ஆனால் இச்சமையம் 
மென்பொருள் சந்தை படுத்துதலில் ஏற்பட்ட மாற்றத்தால் மென்பொருள் பகிர்தல் விரும்ப தக்கதாக இல்லை, 
ஒரு சில நிறுவனங்கள் அதை விரும்ப வில்லை.  விநியோகிப்பாளர்கள் தங்கள் விற்பனை செய்யும் 
வன்பொருளில் இயங்கும் குறியீடுகளை நேரடியாக பார்க்க அனுமதி வில்லை, அல்லது ரகசிய காப்பு ஒப்பந்தம் 
செய்து மென்பொருள் பங்கீட்டை சாத்தியமற்றதாக்கினர். </para>

<sect3 id="history-conscious-resistance">
<title>இனங்கண்டு கொண்டிருந்தார் எதிர்ப்பு</title>

<para>இவ்வாரு கட்டுபாடுகள் அற்ற மென்பொருள் பங்கீடு அழிந்து வந்த காலத்தில், ஒரு மென்பெருள் 
வல்லுநர் மனதில் அதர்க்கு எதிர் வினை பற்றிய எண்ணம் வலு பெற்றது.
Richard Stallman 1970 களிலும் 80'-ன் துவக்கத்திலும் வேலைபார்த்து வந்த  Massachusetts 
Institute of Technology-ல் உள்ள  செயற்கை நுண்ணறிவு ஆய்வகம் மென்பொருள் பங்கீடு செய்ய ஏற்ற 
இடம் அதனால் அது ஒரு பொற்காலமாகவும் இருந்தது.  அந்த ஆய்வகத்தில் மிகவும் ஆளமான "ஹேக்கர் 
நெறிமுறைகள்" நடைமுரையில் இருந்தன,<footnote><para>-ன் வரையரையில் "ஹேக்கர்" என்பவர் 
"மென்பொருள் எழுதுவதையும் மிகவும் நேசித்தும் அதை பற்றி பெருமை பட்டு கொள்ளவும் செய்பவர்" 
மாறாக "கனிணிகளை உரிமம் இன்றி கட்டு படுத்துபவர்" அல்ல</para></footnote> மேலும் அனைவரும் 
சிரந்த மாற்றங்களை மற்றவரிடம் பகிர்ந்து கொள்ள ஊக்குவிக்க பட்டதுடன் அவ்வாரு செய்ய மேலும் 
எதிர்பார்க்க பட்டனர்.  Stallman-பின்வாரு எழுதி உள்ளதை போல:</para>

    <blockquote>
      <para><emphasis>நாங்கள் எழுதிய மென்பொருளை "கட்டற்ற மென்பொருள்"என்று அழைத்தது 
      இல்லை ஏனெனில் அப்படு ஒரு சொல் பயன்பாட்டில் இல்லை, இருப்பினும் அதுதான் கட்டற்ற 
      மென்பொருள்.  எப்பொழுதெல்லாம் மற்ற பல்கலைகழகங்களில் அல்லது நிருவனங்களில் உள்ளவர்கள் 
      விரும்பி கேட்டாலும் நாங்கள் பரந்த மனதுடன் கொடுத்தோம்.  எவரேனும் ஒரு பரிச்சயம் அற்ற 
      செயலியை பயன் படுத்தினால், நீங்கள் அவற்றின் மூல குறியீட்டை காட்ட சொல்லி புரிந்து 
      கொள்ளலாம், மாற்றியமைக்கலாம் மேலும் அதன் பகுதியை பிரித்து புதிதாக ஒன்றை உருவாக்கலாம்.
      </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html" >gnu.org/gnu/thegnuproject.html</ulink></emphasis>)</para>
    </blockquote>


<para>1908 களில் மற்ற நிருவனங்களில் நடந்து கொன்டிருந்த மாற்றங்கள் இருதியாக AI ஆய்வகத்தினை 
அடைந்த போது, Stallman-ஐ சுற்றி இருந்த அத்தகைய ஆரம்பகால குலுக்கள்  பிளவுபட்டன.  ஒரு 
தொடக்க நிறுவனம் அந்த ஆய்வகத்தில் உருவக்க பட்டதை போல் ஒரு இயங்குதளம் பிரத்யேக உரிமத்தின் 
கீழ் உருவாக்க பெரும்பாலானவர்களை வெலைக்கு எடுத்துக் கொன்டது.  அதே நேரம் AI ஆய்வகம் ஒரு புதிய 
கருவியை வாங்கியது அது கட்டனம் பெற்ற இயங்கு தலத்தில் செயல்பட கூடியது.</para>

<para>அங்கே நிகழ்ந்துகொண்டிருந்த மாற்றங்களில் ஒரு பாங்கினை ஸ்டால்மென் கண்டார்:</para>

    <blockquote>
      <para><emphasis>அந்த காலத்தில் இருந்த VAX அல்லது 68020 போன்ற நவீன கனிணிகள் 
      பிரத்யேகமான செயலிகள் கொண்டிருந்தன, ஆனால் அவை கட்டற்ற மென்பொருள் அல்ல:
      	     இயங்கக்கூடிய நகலை பெற கூட நீங்கள் ஒரு வெளிப்படுத்தாமை ஒப்பந்தம் கையெழுத்திட 
         வேண்டும்</emphasis> </para>

      <para><emphasis>அதன் அர்த்தம் நீங்கள் செய்யவேன்டிய முதல் காரியம் மற்றவருக்கு உதவ 
      மாட்டேன் என உறுதி அளிப்பது. பங்கிட்டு செயல்படும் குழுக்கள் தடுக்க பட்டன. கட்டுபடுத்த பட்ட 
              மென்பொருள் விற்ப்பவரின் சட்டம் என்னவென்றால், "நீங்கள் உங்களுக்கு நெருங்கியவருடன் பகிர்ந்து 
         கொண்டால் நீங்கை கொள்ளையர். உங்களுக்கு மாற்றம் ஏதேனும் தேவைபட்டால், எங்களிடம் 
         கெஞ்சுங்கள்."
      </emphasis> </para>

    </blockquote>

<para>ஆளுமையின் திடீர்த்திருப்பம் மூலம், அவர் அந்த போக்கை எதிர்க்க முடிவு செய்தார்.
இப்போது சிதைக்கப்பட்டுள்ள AI ஆய்வகத்தில் தொடர்வதை விட, அல்லது தனது படைப்புகளை ஒரு 
பெட்டிக்குள் அடைக்க கூடிய புதிய நிருவனங்களில் வேலை பார்க்காமல், அவர் ஆய்வகத்தில் இருந்து விலகி 
GNU திட்டத்தை மற்றும் இலவச மென்பொருள் திட்டத்தை(FSF) உருவாக்கினார்.  
GNU<footnote><para>அதன் விரிவாக்கம் "GNU's Not Unix", இதில் "GNU" 
என்பது முடிவற்ற அடிக்குறிப்பு என்பதின் சுருக்கம்</para></footnote> திட்டத்தின் குறிக்கோல் முற்றிலும் 
திறந்த மூல செயலி ஒன்றை வடிவமைப்பது மற்றும் அடிப்படை பயன்பாட்டு மென்பொருள்களை 
உருவாக்குவது, அவற்றில் பயனாலர்கள் எந்த வகையிலும் மூல குறியீடுகளை பார்க்க மற்றும் மாற்றம் செய்து 
கொள்ள எந்தவித தடைகளும் விதிப்பது கிடையாது.  அவ்வாரு செய்ய எண்ணி அவர் ஆய்வகத்தில் இருந்த 
பண்பாட்டை உலகம் முழுவதும் கொண்டு சேர்க்க திட்டமிட்டார் அதே வேளையில் அது பிளவு பட 
காரணமாக இருந்த பாதிப்பு உண்டாக்கிய காரணி இன்றி.</para>

<para>புதிய செயலி உருவாக்கி கொண்டிருந்த அதே வேலையில், அவை என்றும் நிரந்தரமாக கட்டற்று 
இருக்கும் வகையில் Stallman புதிய பதிப்புரிமை ஒன்றையும் உருவாக்கினார்.
அது GNU General Public License (GPL) என்ற புத்திசாலிதனமான சட்ட நுட்பம்: அது மென்பொருள் 
குறியீடுகளை பார்க்கவும் மாற்றம் செய்யவும் உரிமை வளங்கும் அதே சமயம், மூல குறியீட்டையும் மாற்றம் 
செய்ததையும் எந்தவித கூடுதல் கட்டுபாடும் இன்றி அதே பதிப்புரிமையுடன் பங்கிட்டு கொள்ள வேண்டும் 
என்கிறது.  அதன் விலைவாக அது பதிப்புரிமை சட்டத்தை நடமுறையில் உள்ள பதிப்புரிமைகளுக்கு எதிர் 
வினையில் பயன்படுத்து கின்றது: அது மென்பொருள் விநியோகத்தினை கட்டுப்படுத்தாமல், அது 
<emphasis>அனைவரையும்</emphasis>, மென்பொருளின் ஆசிரியரையும் சேர்த்து கட்டுப்பாடு அற்ற 
விநியோகம் செய்ய தூண்டுகிறது.  Stallman-க்கு இது மென்பொருளை பொது களத்தில் வெளியிடுவதை 
மட்டும் இன்றி இது சிரந்ததாக தோன்றியது.  அப்படி இல்லாமல்  பொது களத்தில் உள்ள எந்த 
மென்பொருள் குறியீட்டு பிரதியும் சிறப்பு காப்புரிமை பெற்ற மென்பொருளுடன் இணைக்க வாய்ப்பு உள்ளது.
(அது சில நேரங்களில் அனுமதியளிக்கும் திறந்த மூல கீழ் குறியீட்டு திட்டங்களிலும் நடக்கிறது 
<footnote><para>அனுமதியளிக்கும் மற்றும் GPL-style "பதிப்புரிமை அற்ற" உரிமங்களுக்கும் இடைப்பட்ட 
வேற்றுமை பற்றிய தகவல்களுக்கு பார்க்க<xref linkend="licenses-terminology" />.  opensource.org இல் 
கொடுக்க பட்டுள்ள FAQ-வும் சிறந்த தகவல் மையம் &mdash;பார்க்க<ulink
url="http://opensource.org/faq#copyleft"
>opensource.org/faq#copyleft</ulink>.</para></footnote>).  அத்தகைய பதிப்புரிமை மூல 
மென்பொருள் குறியீட்டை பாதுகாக்க அவசியம் இல்லை என்றாலும் அது இல்லை எனில் பயன் 
அடைவது Stallman-னின் எதிரிகள்&mdash;தனியுரிம மென்பொருள் உற்பத்தியாளர்களுக்கு.  அது 
உண்மையில் கட்டற்ற மென்பொருளை தனியுரிம மென்பொருள் கொள்கையில் இருத்து பாதுகாக்கிறது, 
இல்லை எனில் அதன் முழு பயனையும் அவர்கள் எளிதில் பயன்படுத்தி கொள்வார்கள்.  GPL மற்றம் மற்ற 
இலவச மென்பொருள் உரிமங்களுக்கும் உள்ள உறவு இங்கு <xref linkend="legal"/> மிக விளக்கமாக 
விவாதிக்க பட்டுள்ளது.</para>

<para>Stallman-ஐ போன்ற எண்ணம் படைத்தவர்களாலும் மற்றும் பல இலவச மென்பொருளை பார்க்க 
விரும்பியவர்களாலும் இனைந்து குனு திட்ட செயலி சார்ந்த முக்கிய இயக்கிங்களை வெளியிட தொடங்கினர்.
வன்பொருள் தரப்படுத்தல் காரணமாக குனு மற்று இயக்கிகளை மற்ற தனியுரிமை மென்பெருள் செயலிகளில் 
இயக்க முடிந்தது, பலர் அதை இயக்கவும் செய்தனர்.  குனு உரை தொகுப்பி(Emacs) மற்றும் சி தொகுப்பி 
(gcc)இரண்டும் தங்களின் தங்களின் கொள்கை காரணம் அன்றி தொழில் நுட்ப காரணங்களால் மிகப் பெரும் வெற்றி 
பெற்றன.  கிட்ட தட்ட 1990-ல் குனு ஒரு முழுமையான இயங்கு தலம் அமைக்க தேவையான கர்னல் தவிர 
அனைத்தையும் உற்பத்தி செய்து விட்டது&mdash;கர்னல் என்பது கனிணியை துவக்கவும், நினைவகம், 
வட்டுகள் மற்றும் கணிப்பொறி வளங்களை மேலான்மை செய்யவும் கூடிய மென்பொருள்.</para>

<para>வருந்ததக்க வகையில் குனு திட்டம் தேர்ந்தெடுத்த கர்னல் வடுவமைப்பு எதிர் பார்த்ததை விட 
எழுதுவதர்க்கு மிகவும் கடினமானதாகி விட்டது.  அதனால் ஏற்ப்பட்ட தடையால் இலவச மென்பொருள் 
சம்பேளனம் முற்றிலும் திறந்த மூலம் கொண்டு இயக்க படும் இயங்கு தலத்தை வெளியிடவும் தடையாக 
மாறியது.  அந்த இறுதியான பாகத்தினை Linus Torvalds என்ற பின்லாந்து கணிப்பொறி மாணவர், 
உலகதில் உள்ள மற்ற தன்னார்வளர்களின் உதவியுடன், எளிமையான வடிவமைப்புடன் செய்து 
வழங்கினார்.  அதர்க்கு அவர் Linux என்று பெயர் வைத்தார், அதை மற்ற GNU செயலிகளுடன் 
இனைத்து இயக்கும் போது (முக்கியமாக X Windows System) அது ஓரு முழுமையான இலவச கணினி 
இயங்கு தளமாகியது.  அதனால் முதல் முறையாக முற்றிலும் சுதந்திரமான ஒரு இயங்கு தளத்தினை 
கொன்டு உங்கள் கணிப்பொறியை இயக்குவது சாத்தியம் ஆனது.<footnote><para>அடிப்படையில் 
லினக்‌ஸ் முதலில் உருவான இலவச இயங்குதளம்  அல்ல.  அதற்கு சற்று முன்பே 386BSD என்ற IBM 
கணினிகளில் இயங்க கூடிய இயங்குதளம் வெளியாகியது.  ஆனால் அதனை  முழுமையாக இயக்க 
செய்வது மிகவும் கடினமாக இருந்தது.  Linux-ன் வெற்றி அது சுதந்திரமாக இயக்க கூடியதால் மற்றும் 
இன்றி அதனை நிறுவிய பின்னர் அதை இயக்க செய்வதும் எளிமையாக இருந்த்தால்.
</para></footnote></para>

<para>இந்த இயங்குதளத்தில் உள்ள பல செயலிகள் முற்றிலும் குனு  திட்டத்தால் உருவாக்க பட்டது 
அல்ல.உன்மையில், குனு மட்டுமே இலவச மென்பொருள் உருவாக்கதில் ஈடுபட்ட செயல் குழு 
அல்ல(NetBSD மற்றும் FreeBSD என்பன ஏற்க்கனவே உருவாக்கதில் இருந்தன).  இலவச மென்பொருள்
அறக்கட்டளையின் முக்கியதுவம் அதன் மென்பொருள் உருவாக்கத்தில் மட்டும் இன்றி அதன் அரசியல் 
சொல்லாட்சியால் அமைந்த்து.  இலவச மென்பொருளை ஒரு சலுகையாக அல்லாமல் அதை ஒரு சேவை 
போல் உணர வைத்து, உருவாக்கு பவர்களுக்கு  அதன்  அரசியல் விழிப்புணர்வு அற்ற தன்மையை 
<emphasis>இல்லாமல்<ழemphasis> செய்தனர்.  FSF  உடன் கருத்து வேருபாடு கொண்டவர்களும் 
அதனிடம் இருந்து வேறுபடுத்தி காட்ட இத்தகைய பிரச்சனையை கையால நேர்ந்த்து.  FSF-இன் 
பிரச்சாரத்தினை GPL மற்றும் சில உரைமூலங்களை மென்பொருள் கோப்புகளில் இணைப்பதன் மூலம் 
சிறப்பாக செயல்படுத்தினர்.  அவ்வாரு அவர்களில் மென்பொருள் மூலங்கள் விரைவாக பரவுதல் காரணமாக 
அவர்களின் கருத்தும் அதன் உடன் பரவியது.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>தற்செயலான எதிர்ப்பு</title>

<para>இலவச மென்பொருள் காலகட்டத்தின் ஆரம்பத்தில் பல தரப்பட்ட புரட்சிகள் நடந்துகொண்டு 
இருந்தன ஆனால் அவை அனைத்தும் Stallman குனு திட்டம் போல் உறுதியான சித்தாந்தம் 
கொண்டில்லை.  அவற்றில் முக்கியமானது <firstterm>Berkeley Software Distribution
</firstterm>(<firstterm>BSD</firstterm>), அது ஒரு யுனிக்‌ஸ் செயலியின் மறு உருவாக்க 
திட்டம்&mdash;1970 வரை அது மெல்லிய கட்டுபாடுகள் உடைய AT&amp;T தனியுரிம ஆய்வு திட்டமாக 
&mdash;பெர்க்லேயில் உள்ள கலிபோர்னியா பல்கலைகழகத்தின் மென்பொருள் உருவாக்குபவர்களால் 
தயாரிக்க பட்டது.  BSD குழுவில் நுட்பத்திறனுடனும் கூடிய உற்சாகத்துடன் உருவாக்குபவர்களின் 
ஓற்றுமை மற்றும் பரஸ்பரம் பங்கிட்டு கொள்வதையும் அவர்கள் <emphasis>பின்பற்றினர்<ழemphasis> ஆனல் 
அதை எந்த ஓரு சட்ட வழிமுறைகளை கொண்டும் கட்டாய படுத்த வில்லை, ஒருங்கிணைப்பு மூலம் அதீத
வேலை களான யுனிக்ஸ் கட்டலை வரி பயனுடைமைகள் மற்றும் மென்பொருள் கோப்புகள் மற்றும் இன்றி 
கணிப்பொறி செயலியின் கெர்னலையும்  விநியோகிக்கப்பட்டு கூட்டு முயற்சியால் முற்றிலும் தன்னார்வலர்கள் 
கொண்டே உருவாக்கினர்.  எனவே BDS கருத்தியல் அற்ற இலவச மென்பொருள் உருவாகுதலின் சிரந்த 
உதாரனமாக மற்றும் இன்றி பிற்க்காலத்தில் மிகவும் ஈடுபட்டுடன் தொடந்து செயல் பட்டு கொண்டுள்ள பல 
கட்டற்ற மென்பொருள் உருவாக்குபவர்களின் பயிற்ச்சி மையமாகவும் இருந்தது.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests and increase standardization, not out of
some desire to end the 
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under terms
that allowed anyone to modify and distribute the code, but not to call 
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software; he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
programmers who chose the GNU GPL were much less ideologically driven
than the GNU project itself was.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This may be
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications or motivations beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free as in "freedom"&mdash;that is,
the freedom to share and modify for any purpose.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/" >mozilla.org</ulink>.</para></footnote>
The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at its root, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.  Others don't believe this.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"
>opensource.org</ulink>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words at the
time:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open
      source"&nbsp;&mdash;&nbsp;<emphasis>that</emphasis>, they'll
      buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <ulink url="http://www.opensource.org/"
      >opensource.org</ulink>.  Or
      rather, <emphasis>formerly</emphasis> from that
      site&nbsp;&mdash;&nbsp;the OSI has apparently taken down the
      pages since then, although they can still be seen at 
      <ulink url="http://web.archive.org/web/20021204155057/http://www.opensource.org/advocacy/faq.php" >web.archive.org/web/20021204155057/http://www.opensource.org/advocacy/faq.php</ulink>
      and
      <ulink url="http://web.archive.org/web/20021204155022/http://www.opensource.org/advocacy/case_for_hackers.php#marketing" >web.archive.org/web/20021204155022/http://www.opensource.org/advocacy/case_for_hackers.php#marketing</ulink> [sic].)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their r&eacute;sum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers may wait a long time
before giving it a second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical
reasons<footnote><para>There can be cases where you discriminate
against certain developers due to behavior which, though not related
to their technical contributions, has the potential to harm the
project.  That's reasonable: their behavior is relevant because in the
long run it will have a negative effect on the project.  The varieties
of human culture being what they are, I can give no single, succint
rule to cover all such cases, except to say that you should try to be
welcoming to all potential contributors and, if you must discriminate,
do so only on the basis of actual behavior, not on the basis of a
contributor's group affiliation or group identity.</para></footnote>.
Clearly, projects with corporate
sponsorship and/or salaried developers need to be especially careful
in this regard, as <xref linkend="money"/> discusses in detail.  Of
course, this doesn't mean that if there's no corporate sponsorship
then you have nothing to worry about.  Money is merely one of many
factors that can affect the success of a project.  There are also
questions of what language to choose, what license, what development
process, precisely what kind of infrastructure to set up, how to
publicize the project's inception effectively, and much more.
Starting a project out on the right foot is the topic of <link
linkend="getting-started">the next chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
