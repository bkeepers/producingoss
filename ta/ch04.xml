<chapter id="social-infrastructure">

    <title>சமூக மற்றும் அரசியல் உள்கட்டமைப்பு</title>

    <simplesect>

        <para>கட்டற்ற மென்பொருள் குறித்து, பலரும் முதலில் கேட்கும் சில கேள்விகள், “இது எவ்வாறு 
வேலைசெய்கிறது? ஒரு திட்டத்தை தொடர்ந்து நடத்த உந்துசக்தியாக இருப்பது எது? முடிவுகளை யார் 
எடுக்கிறார்கள்?” என்பவையே. தகுதிக்கேற்ற மரியாதை, ஒத்துழைப்பு உணர்வு, நிரலின் தரம் ஆகியவை ]குறித்த சாந்தமான மறுமொழிகள் திருப்தியை தருவதில்லை. உண்மை என்னவெனில், இவை எளிதான
கேள்விகள் அல்ல. திறமை, தகுதி, ஒத்துழைப்பு, நிரலின் தரம் ஆகியவற்றிற்கு முக்கிய பங்கு உள்ளதெனினும், 
ஒவ்வொரு நாளும் திட்டங்கள் எப்படி நடத்தப்படுகின்றன என்பது பற்றி, இவை மிக குறைவாகவே 
விளக்குகின்றன. முரண்பாடுகளை களைவதெப்படி என விவரிப்பதில்லை.</para>

        <para>இந்த அத்தியாயத்தில், பல வெற்றிகரமான திட்டங்களை கட்டமைக்க காரணமாக இருந்த 
பொதுவான  அச்சாணிகளைப்பற்றி காணலாம். இங்கே வெற்றிகரமான திட்டத்தின் வரையறை, தொழில்நுட்ப 
தரத்தில் மட்டுமல்லாமல், ஆரோக்கியமான செயல்பாட்டிற்கும், தொடர்ந்து உயிர்ப்புடன் இருப்பதையும் 
உள்ளடக்கியது. ஆரோக்கியமான செயல்பாடு என்பது, நிரலில் புதிய பங்களிப்புகளையும், புதிய 
உருவாக்குநர்களையும், இயங்கிவரும் திட்டத்தில் எவ்வாறு உள்ளடக்குவது என்பதிலும், வழுக்கள் குறித்த 
புகார்களின் மீது விரைவாக பதிலளிப்பதிலும் தான் இருக்கிறது. தொடர்ந்து உயிர்ப்புடன் இருப்பதென்பது, ஒரு 
திட்டம் எந்தவொரு தனிமனித பங்களிப்புகளின் மீதும், ஆதரவின் மீதும் சார்ந்திராமல் 
இருப்பதாகும்&mdash;ஒரு திட்டத்தை துவங்கும்பொழுது இருந்த உருவாக்குநர்கள் அனைவரும் வேறு 
திட்டங்களுக்கு சென்றபிறகும், திட்டம் தொடர்ந்தால், அது உயிர்ப்புடன் இருக்கிறது என பொருள் 
கொள்ளலாம். தொழில்நுட்ப ரீதியில் வெற்றியடைவது மிக கடினமானதல்ல. ஆனால்,  வலுவான உருவாக்குநர் 
குழுவும், சமூக அடித்தளமும் இல்லையெனில், ஆரம்பகால வெற்றிக்குப்பின்னும், அல்லது கவனத்தை ஈர்க்கும் 
பங்களிப்பாளர்கள் பிரிந்து சென்ற பின்னும்,  ஒரு திட்டத்தின் வளர்ச்சியை சமாளிப்பது சிரமமாக 
இருக்கலாம்.</para>

        <para>இந்த முறையில் வெற்றியடைய பல வழிகள் உள்ளன. சில குழுக்கள், விவாதங்களுக்கு 
தீர்வுகாணவும், புதிய உருவாக்குநர்களை அழைக்கவும், விடுவிக்கவும், புதிய அம்சங்களை திட்டமிடவும் 
முறையான கட்டமைப்பை உள்ளடக்கி செயல்படுகின்றன. மற்ற குழுக்கள், சாதாரண கட்டமைப்பை 
உள்ளடக்கியதோடு, சுய கட்டுப்பாட்டையும், நேர்மையான சூழலையும் உருவாக்கி, குழுவினரின் நம்பிக்கையைப் 
பெற்ற கட்டுப்பாட்டு கட்டமைப்பை நடைமுறைப்படுத்துகின்றன. இருவழிகளும் ஒரே பலனைத்தருகின்றன: 
பங்களிக்கும் அனைவராலும் புரிந்துகொள்ளப்பட்ட, பழக்கவழக்கங்கள் மற்றும் செயல்முறைகளின் ஆதரவு பெற்ற, 
நிறுவன நிரந்தரத்தன்மையை அளிக்கின்றன. இந்த அம்சங்கள், மத்தியில் நிர்வகிக்கப்படும் குழுக்களை விட, 
சுய ஒருங்கிணைப்பு குழுக்களுக்கு மிகவும் முக்கியமானதாகும். ஏனெனில், சில அழுகிய ஆப்பிள்கள், ஒரு முழு 
கூடையையும் கெடுத்துவிடும் தன்மையுடையது என, சுய ஒருங்கிணைப்பு குழுவினர், சில காலத்திற்காவது 
நினைவில் கொண்டிருப்பர்.</para>

        <sect1 id="forkability">
            <title>பிரியூன்றுமை</title>

            <para>ஒரு கட்டற்ற மென்பொருள் திட்டத்தில், நிரலர்களை ஒன்றிணைத்து, தேவையான 
பொழுது சமரசம் செய்துகொள்ளவும் இணங்கவைக்கும், ஒரு தவிர்க்க முடியாத காரணியாக, 
<firstterm>பிரியூன்றுமை</firstterm> விளங்குகிறது. எந்தவொரு தனிநபராலும், நிரலின் நகலையெடுத்து, 
அதிலிருந்து ஒரு போட்டி திட்டத்தை உருவாக்கும் திறன் பிரியூன்றுமை எனப்படுகிறது. இப்போட்டித்திட்டம் 
<firstterm> பிரியூன்று</firstterm> என்று அழைக்கப்படுகிறது. இதில் ஒரு முரண்பாடான விடயம் 
என்னவெனில், கட்டற்ற மென்பொருட்களில், பிரியூன்றுகளை உருவாக்குவதற்கான 
<emphasis>சாத்தியமே</emphasis>, உண்மையான பிரியூன்றுகளைவிட வலுவான சக்தியாகும். கட்டற்ற 
மென்பொருட்களில் பிரியூன்றுகள் மிக அரிதாகவே காணப்படுகின்றன. ஒரு பிரியூன்று, திட்டத்திலுள்ள 
அனைவருக்கும் பாதகமாக அமைவதால், (அதற்கான காரணிகள் <xref linkend="forks"/>
<phrase output="printed">இங்கே<xref linkend="managing-volunteers"/></phrase> 
விவரிக்கப்பட்டுள்ளன), ஒரு பிரியூன்றுதலின் அபாயம் அதிகரிக்கும்பொழுது, அதை தவிர்ப்பதற்காக, குழுவினர் 
சமரசத்திற்கு அதிகமாக இணங்குகின்றனர்.</para>

            <para>கட்டற்ற மென்பொருள் திட்டங்களில், உண்மையான சர்வாதிகாரிகள் இல்லாமல் 
இருப்பதற்கு, பிரியூன்றுகளுக்கான சாத்தியமே காரணமாகும். கட்டற்ற மென்பொருள் திட்டங்களில் சிலரை, 
சர்வாதிகாரி அல்லது கொடுங்கோலன் என அழைப்பதை பரவலாக கேள்வியுற்றோருக்கு, இக்கூற்று ஆச்சரியமாக 
இருக்கலாம். ஆனால், இங்கே குறிப்பிடப்படும் கொடுங்கோன்மை, அந்த சொல்லின் பாரம்பரிய 
பொருளிலிருந்து சற்று மாறுபடுகிறது. இதை புரிந்துகொள்ள, இரு நாடுகளை உதாரணமாக 
எடுத்துக்கொள்ளலாம். முதலாவது நாட்டில், அரசன் என்ன செய்தாலும், மக்கள் அவனோடு இருக்கவேண்டிய 
கட்டாயத்தில் இருக்கின்றனர். இரண்டாவது நாட்டில், எந்தவொரு தருணத்திலும், அந்நாட்டை பிரதியெடுத்து, 
அப்பிரதியை, தங்கள் விருப்பபடி ஆண்டுகொள்ளும் திறன்பெற்ற மக்கள் இருக்கின்றனர். இதில் இரண்டாவது 
நாட்டு அரசரின் ஆட்சி, முதலாம் நாட்டு அரசரின் ஆட்சியிலிருந்து வேறுபட்டிருக்குமல்லவா? கட்டற்ற 
மென்பொருள் திட்டங்களை இரண்டாவது நாட்டிற்கு ஒப்பாக கருதலாம்.</para>

            <para>இதனாலேயே, முறையாக மக்களாட்சி பெற்ற அமைப்புகள் என அறிவிக்கப்படாத 
அமைப்புகள் கூட, சில முக்கியமான முடிவுகளையெடுக்க, மக்களாட்சி முறையை பின்பற்றுகின்றன. 
பிரதியெடுக்கும் திறன், பிரியூன்றுமையை குறிக்கிறது. பிரியூன்றுமை ஒருமித்த கருத்தை குறிக்கிறது. குழுவினர் 
அனைவரும், குறைகூறும் மனப்பான்மையின்றி, வஞ்சகநோக்கமின்றி, தங்கள் விருப்பத்துடன், ஒரு தனிநபரை 
சர்வாதிகாரியாக (பிரபலமான எடுத்துக்காட்டாக, லினக்ஸ் கரு உருவாக்கத்தில் லினஸ் டார்வால்ட்ஸ்) 
<emphasis>தேர்ந்தெடுக்கலாம்</emphasis>. இந்த சர்வாதிகாரிக்கு திட்டத்தின் மீது எந்தவொரு விசேஷ 
பிடிப்பும் இல்லை. நிரலின் மாற்றங்கள் குறித்தும், அதன் பயன்பாடுகள் குறித்தும் முடிவெடுக்கும் சக்தியை, 
கட்டற்ற மென்பொருள் உரிமங்கள், அனைவருக்கும் சமமாக வழங்கியிருப்பதே அதன் முக்கிய அம்சம் ஆகும். 
ஒருவேளை சர்வாதிகாரி, தொடர்ந்து மோசமான முடிவுகளை எடுத்துவந்தால், அது குழுவினரிடையே 
அதிருப்தியை ஏற்படுத்தும். அதைத்தொடர்ந்து ஒரு கிளர்ச்சி ஏற்பட்டு, திட்டம் பிரியூன்றப்படலாம். 
சர்வாதிகாரிகள் முதலில் சமரசத்தை நாடுவதால், இதுபோன்ற நிகழ்வுகள் அரிதாகின்றன. </para>

            <para>திட்டத்தின் மீது, ஒருவர் செலுத்தும் அதிகாரத்திற்கு, பிரியூன்றுமை ஒரு உச்சவரம்பை 
விதிப்பதாலேயே, திட்டங்களை வழிநடத்துவதில் முக்கியமான வேறுபாடுகள் ஏதுமில்லை எனப்பொருள்கொள்ள 
முடியாது. வேறுவழிகள் ஏதும் இல்லாதபொழுது மட்டுமே திட்டத்தை பிரியூன்றவேண்டும். ஒவ்வொரு முடிவிற்கும் 
பிரியூன்றுமை குறித்த கேள்வியில் வந்து நிற்பது விரும்பத்தக்கதல்ல. மேலும், குழுவினரை அது 
சலிப்பூட்டுவதோடு, தங்கள் பணியை செய்வதற்கான ஆற்றலையும் உறிஞ்சியெடுத்துவிடும். அடுத்துவரும் இரு 
பகுதிகளில், பெரும்பாலான முடிவுகளை சுமூகமாக எடுக்கவல்ல, இருவேறு முறைகளைப்பற்றி ஆய்ந்தறியலாம். 
இவ்விருமுறைகளும் நடைமுறைப்பழக்கங்களின் எதிரெதிர் எல்லைகளாகக்கொள்ளலாம். பெரும்பாலான 
திட்டங்கள் இவையிரண்டிற்கும் இடைப்பட்ட நிலையிலிருக்கின்றன.</para>

        </sect1>

    </simplesect>

    <!-- ======================== SECTION ============================== -->
    <sect1 id="benevolent-dictator">
        <title>இரக்கமுள்ள சர்வாதிகாரிகள்</title>

        <!-- For link compatibility with a previous misspelling. -->
        <anchor id="benevolant-dictator" />

        <para>இந்த <firstterm>இரக்கமுள்ள சர்வாதிகாரி</firstterm> முறையின் பெயருக்கேற்ப, 
இறுதி முடிவு எடுக்கும் பொருப்பு, தனது ஆளுமை மற்றும் அனுபவத்தின் மூலம், இப்பொருப்பை சாமர்த்தியமாக 
கையாளும் ஒருவரிடம் மட்டுமே இருக்கும். </para>

        <para>“இரக்கமுள்ள சர்வாதிகாரி" என்ற பதம் பெருமளவில் பயன்படுத்தப்பட்டாலும், இந்த 
பொறுப்பினை வகிப்பவர்கள், அந்த சமூகத்தால் அங்கீகரிக்கப்பட்ட நடுவர்களாகவோ, நீதிபதிகளாகவோ தான் 
இருக்கின்றனர். இந்த இரக்கமுள்ள சர்வாதிகாரிகள், எல்லா முடிவுகளையும் தாங்களாகவே எடுப்பதில்லை. 
பெரும்பான்மையான முடிவுகளைக்கூட இவர்கள் தீர்மானிப்பதில்லை. ஒரு திட்டத்தின் அனைத்து பிரிவுகளிலும், 
எப்பொழுதும் சிறந்த முடிவுகளையே எடுக்கத்தேவையான எல்லா நிபுணத்துவமும், தனியொருவரிடம் இருப்பது 
சாத்தியமல்ல. மேலும், திட்டத்தின் பாதை குறித்த முடிவுகளில், தங்களுடைய செல்வாக்கு இல்லையெனில் 
தரமான உருவாக்குநர்கள் திட்டத்தில் நீடிக்கமாட்டார்கள். இதனால், இரக்கமுள்ள சர்வாதிகாரிகள், பொதுவாக 
அதிக ஆதிக்கம் செலுத்துவதில்லை. மாறாக, விடயங்களை அதன் போக்கிலேயே, விவாதங்களின் மூலமும், 
பரிசோதனைகளின் வாயிலாகவும்,  சரிசெய்கின்றனர். இவ்விவாதங்களில் தாமும், ஒரு சாதாரண நிரலராகவே 
பங்கேற்பதுடன், அத்துறை சார்ந்த நிபுணர்களிடம் முடிவெடுக்கும் பொருப்பை அளிக்கின்றனர். இப்படிகளின் 
மூலம் எந்தவொரு முடிவையும் எட்டமுடியாது என்றும், நிரலாக்கம் தொடர்ந்து நடைபெறவேண்டும் என்பதற்காக, 
குழுவினரில் பெரும்பான்மையானோர், முடிவை நோக்கி திட்டத்தை, தான் , வழிநடத்திச்செல்லவேண்டும் என 
<emphasis>விரும்புகின்றனர்</emphasis> என்றும்,  திட்டவட்டமாக தெரிந்தபின்னரே, இந்த இரக்கமுள்ள 
சர்வாதிகாரிகள் ஒரு தீர்மானத்திற்கு வருகின்றனர். அதிகாரத்தின் மூலம் முடிவுகளை எடுக்க தயங்குவதே, இந்த 
சர்வாதிகாரிகளில் பலரிடம் காணப்படும் சிறப்பம்சமாகும். இவர்கள், இந்த பொறுப்பை நீண்டகாலம் வகிப்பதற்கு 
முக்கிய காரணமும் இதுவேயாகும்.</para>

        <sect2 id="benevolent-dictator-qualifications">
            <title>யாரால் நல்ல இரக்கமுள்ள சர்வாதிகாரியாக இருக்கமுடியும்?</title>

            <!-- For link compatibility with a previous misspelling. -->
            <anchor id="benevolant-dictator-qualifications" />

            <para> ஒரு இரக்கமுள்ள சர்வாதிகாரிக்கு பல முக்கிய குணங்கள் இருக்கவேண்டும். 
முதலாவதாக, திட்டத்தின் மீது தனக்குரிய செல்வாக்கு குறித்து நன்றாக அறிந்திருக்கவேண்டும். இதனால், 
அவர்களுக்கு சுய கட்டுப்பாடு வருகிறது. குழுவினர், தங்கள் கருத்து வேறுபாடுகளை முன்வைப்பதில் எந்த 
பயனுமில்லை என எண்ணுமளவிற்கு, ஒரு விவாதத்தின் துவக்கத்திலேயே, திட்டவட்டமாக கருத்துக்களையும், 
முடிவுகளையும் எவரும் முன்வைக்கக்கூடாது. தங்கள் கருத்துக்களை, முட்டாள்தனமான கருத்துக்களைக்கூட, 
சுதந்திரமாக பகிர்ந்துகொள்ள முடியவேண்டும். சில நேரங்களில், இரக்கமுள்ள சர்வாதிகாரியும் சில 
முட்டாள்தனமான கருத்துக்களை பதிவுசெய்வதை தவிர்க்க முடியாது. ஆகையால்,  குழுவிலிருக்கும் ஒருவர், 
ஒரு தவறான முடிவெடுக்கும்பொழுது, அதை அடையாளம்கண்டு ஒப்புக்கொள்ளும் குணம் இந்த 
பொருப்பிலிருக்கும் நபருக்கு இருக்கவேண்டும். <emphasis>எந்தவொரு</emphasis> நல்ல நிரலருக்கும், 
அதிலும் ஒரு திட்டத்தில் நீண்டநாள் பங்கேற்றிருக்கும் நிரலருக்கு இக்குணமிருப்பது அவசியம். இதில் ஒரு 
வித்தியாசம் என்னவென்றால், இந்த இரக்கமுள்ள சர்வாதிகாரி, தனது நம்பகத்தன்மைக்கு ஊறு 
விளைவதைப்பற்றி கவலைப்படாமல், அவ்வப்போது சில முட்டாள்தனமான கருத்துக்களை முன்வைக்கலாம். 
ஆனால், அதிக அனுபவமில்லாத நிரலர்களுக்கு, தங்கள் கருத்துக்கள் மீதான விமர்சனத்தை எண்ணி, அவற்றை 
வெளிப்படுத்த தயக்கமிருக்கலாம். ஆகையால், இரக்கமுள்ள சர்வாதிகாரி, தனது விமர்சனங்களையும், 
மாற்றுகருத்துக்களையும் முன்வைக்கும்பொழுது, தொழில்நுட்ப ரீதியாகவும், உளவியல் ரீதியாகவும் அவை 
ஏற்படுத்தக்கூடிய தாக்கங்களைக்குறித்து ஆழ்ந்து சிந்திக்கவேண்டும்.</para>

            <para>இந்த இரக்கமுள்ள சர்வாதிகாரி, தன் குழுவிலுள்ள அனைவரைவிடவும் அதிக 
நுட்பத்திறன் கொண்டவராக, இருக்கவேண்டிய <emphasis>அவசியமில்லை.</emphasis> தன்னிச்சையாக 
நிரலில் வேலை செய்யும் திறன் கொண்டவராகவும், எந்தவொரு மாற்றத்தை பற்றி நன்கு 
புரிந்துகொண்டவராகவும், அதன் மீது தன் கருத்திடக்கூடியவராகவும் இருக்கவேண்டியது 
<emphasis>அவசியம்</emphasis>. இந்த இரக்கமுள்ள சர்வாதிகாரி என்ற பொருப்பு, அதீத நிரலாக்க 
திறன் மூலம் பெறக்கூடியதோ, தக்கவைத்துக்கொள்ளக்கூடியதோ அல்ல. ஆனால், அனுபவமும், 
திட்டத்தைக்குறித்த அறிவும் அவசியம். நல்ல திட்டத்தை கொடுக்கக்கூடியவராக இருக்கவேண்டும் என்பதில்லை. ஆனால், நல்ல திட்டம் யாரிடமிருந்து வந்தாலும், அதை கண்டறிந்து அங்கீகரிக்கக்கூடியவராக 
இருக்கவேண்டும்.</para>

            <para>பொதுவாக, ஒரு திட்டத்தின் நிறுவுனரே, அதன் இரக்கமுள்ள சர்வாதிகாரியாகவும் 
இருக்கின்றனர். நுட்பத்திறன், பிறரை தன் திட்டத்தில் ஈடுபடுத்திக்கொள்ளும் திறன், போன்ற ஒரு திட்டத்தை 
வெற்றிகரமாகத் துவங்க தேவையான பண்புகள் தான் ஒரு இரக்கமுள்ள சர்வாதிகாரிக்கும் தேவைப்படுகின்றன. 
திட்டத்தின் நிறுவுனருக்கு, குழுவினரிடையே இயல்பாக ஒரு மூப்பும் கிடைத்துவிடுகிறது. இதனால், இந்த 
சர்வாதிகாரப்பாதை, ஒரு தடைகள் குறைவாக உள்ள பாதையாக அனைவருக்கும் தெரிகிறது.</para>

            <para>பிரியூன்றுமை என்பது இருவழிப்பாதை என்பதையும் நாம் நினைவில் கொள்ளவேண்டும். 
குழுவின் பிற உறுப்பினர்களைப்போலவே, இரக்கமுள்ள சர்வாதிகாரியும் ஒரு திட்டத்தை பிரியூன்றலாம். சில 
சமயங்களில், திட்டத்தின் போக்கு குறித்து, தனது விருப்பமும், குழுவில் பெரும்பான்மையானோரின் விருப்பமும் 
வேறுபட்டிருக்கும் பொழுது, சில இரக்கமுள்ள சர்வாதிகாரிகள் சில திட்டங்களை பிரியூன்றியுள்ளனர். 
பிரியூன்றுமையின் காரணமாக, ஒரு முறைமையின் நிர்வாக சிறப்புரிமைகளை இரக்கமுள்ள சர்வாதிகாரி 
பெற்றிருக்கிறாரா என்பது ஒரு பொருட்டாக அமைவதில்லை. வழங்கியின் மீதான அதிகாரமே, 
இறுதியானதென்று சிலர் எண்ணுகின்றனர். ஆனால் உண்மையில் இது பொருத்தமானதன்று. திட்டத்தின் நிரல் 
களஞ்சியம் இருக்கும் ஒரு வழங்கியில், உறுப்பினர்களின் கடவுச்சொற்களை சேர்க்கவோ, நீக்கவோ இருக்கும் 
அதிகாரம், அந்த வழங்கியிலுள்ள நிரல் நகலுக்கு மட்டுமே பொருந்தும். தொடர்ந்து இந்த அதிகாரத்தை 
தவறாக பயன்படுத்தும்பொழுது, இரக்கமுள்ள சர்வாதிகாரியோ, அல்லது பிற உறுப்பினர்களோ, திட்டத்தின் 
நிரலாக்கத்தை வேறொரு வழங்கிக்கு எடுத்துச்செல்கின்றனர்.</para>

        </sect2>

        <para>உங்கள் திட்டத்திற்க்கு ஒரு இரக்கமுள்ள சர்வாதிகாரியின் அவசியம் இருக்கிறதா, அல்லது, 
வேறு சில குறைந்த மையப்படுத்தப்பட்ட அமைப்புகளே போதுமானதா என்பது, இந்த இரக்கமுள்ள 
சர்வாதிகாரியின் பாத்திரத்தை யார் ஏற்கிறார்கள் என்பதை பொருத்தது. இரக்கமுள்ள சர்வாதிகாரியாக யார் 
இருக்கவேண்டுமென்பது குழுவினர் அனைவருக்கும் தெளிவாக தெரியும்பொழுது, நாம் அவ்வழியிலேயே 
தொடரலாம். ஆனால், இரக்கமுள்ள சர்வாதிகாரிக்கான வேட்பாளர்கள் யாரென தெளிவாக 
தெரியவில்லையென்றால், அத்திட்டம், அடுத்த பகுதியில் விவரிக்கப்பட்டுள்ளது போல, பரவலாக்கப்பட்ட 
முடிவெடுக்கும் முறைமையை பின்பற்றவேண்டும் என்பது ஒரு பொதுவிதி.</para>

    </sect1>


    <!-- ======================== SECTION ============================== -->
    <sect1 id="consensus-democracy">
        <title>ஒருமித்த கருத்தின் அடிப்படையிலான ஜனநாயகம்</title>

        <para>திட்டங்கள் வெகுநாட்களாக இயங்கிவரும்பொழுது, அவை இரக்கமுள்ள சர்வாதிகாரி மாதிரியிலிருந்து விலகி, திறந்த ஜனநாயக முறையை நோக்கி நகர்கின்றன. இரக்கமுள்ள சர்வாதிகாரிகள் மீதான வெறுப்பு, இதற்கு காரணமல்ல. உயிரியல் ரீதியில் ஒப்புநோக்கும்பொழுது, குழு சார்ந்த ஆட்சிமுறை, பரிணாம ரீதியில் நிலைத்தன்மை பெற்றதாக உள்ளது. ஒரு இரக்கமுள்ள சர்வாதிகாரி தன் பதவியிலிருந்து விலகும்பொழதும், முடிவெடுக்கும் பொறுப்பினை குழுவினரிடையே சீராக பரப்புவதற்கு முனையும்பொழுதும், குழுவிற்கு ஒரு புதிய, சர்வாதிகாரமற்ற அரசியலமைப்பை ஏற்படுத்துவதற்கான வாய்ப்பாக அமைகிறது. குழுவிற்கு வழங்கப்படும் முதல் சில வாய்ப்புகளை அவர்கள் பயன்படுத்தாமல் போனாலும், இறுதியில் இந்த மாற்றம் நிகழ்ந்தேயாகவேண்டும். அப்படியொரு மாற்றம் நிகழ்ந்தபின்பு, அதைத் அரிதாகவே திரும்பப்பெறப்படுகிறது. பொது அறிவைக்கொண்டு இதை புரிந்துகொள்ளலாம். 10 பேர் கொண்ட குழுவில், ஒருவருக்கு மட்டும் சிறப்பு அதிகாரத்தை குழுவினர் கொடுக்கும்பட்சத்தில், மீதமுள்ள 9 பேரும் தங்களுடைய தனிப்பட்ட செல்வாக்கினை குறைத்துக்கொள்கின்றனர் என்றே பொருள். மனிதர்கள் பொதுவாக அப்படி செய்வதில்லை. ஒருவேளை அப்படிசெய்தாலும், அதன் பலனாகக் கிடைக்கும் சர்வாதிகாரம் நிபந்தனைகளுக்குட்பட்டதாகவே அமையும்: இரக்கமுள்ள சர்வாதிகாரி குழுவால் நியமிக்கப்பட்டார். அவரை பதவியிலிருந்து அகற்றவும் குழுவால் முடியும். ஆகவே, ஒரு தனிநபரின் தலைமையிலிருந்து, குழு சார்ந்த தலைமையை நோக்கி ஒரு குழு நகர்ந்த பிறகு, அது அரிதாகவே பழைய நிலைக்கு மாறுகிறது.</para>

        <para>இந்த அமைப்புகளின் செயல்பாட்டு விவரங்கள் பெருமளவில் வேறுபட்டிருந்தாலும், இரண்டு பொதுவான அடிப்படைக்கூறுகள் உள்ளன: முதலாவதாக, குழுவினர், பெரும்பாலும், ஒருமித்த கருத்துடன் செயல்படுகின்றனர்; இரண்டாவதாக, ஒருமித்த கருத்து எட்டப்படாதபொழுது, முறைப்படுத்தப்பட்ட வாக்கெடுப்பு முறையை பின்பற்றுகின்றனர்.</para>

        <para>குழுவிலுள்ள அனைவராலும் ஏற்றுக்கொள்ளப்பட்ட ஒப்பந்தத்தையே <firstterm>ஒருமித்த கருத்து</firstterm> என்கிறோம். இது ஒரு தெளிவற்ற நிலையல்ல: குழுவிலுள்ள ஒருவர், ஒருமித்த கருத்து எட்டப்பட்டதாக முன்மொழியும்பொழுது, வேறுயாரும் அதை ஆட்சேபிக்கவில்லையெனில், அந்த குறிப்பிட்ட விவாதத்தில் ஒருமித்த கருத்து எட்டப்பட்டுவிட்டது என்று பொருள். அவ்வாறு முன்மொழியும் நபர், அந்த ஒருமித்த கருத்து என்னவென்பதையும், அதன் விளைவாக என்னென்ன நடவடிக்கைகள் எடுக்கப்படவேண்டும் என்றும் குறிப்பிடவேண்டும்.</para>

        <para>ஒரு திட்டத்தில், பெரும்பாலும் நுட்பம் சார்ந்த விவாதங்களே நடைபெறுகின்றன. ஒரு வழுவை நீக்குவதற்கு சரியான முறையெது, ஒரு சிறப்பியல்பை திட்டத்தில் சேர்க்கவேண்டுமா இல்லையா, இடைமுகங்களை எவ்வளவு கடுமையாக ஆவணப்படுத்தவேண்டும், போன்றவை இவற்றுள் அடங்கும். இத்தகைய நுட்பம்சார்ந்த விவாதங்களுடன் தடையின்றி கலந்துவிடுவதால், ஒருமித்த கருத்தின் அடிப்படையிலான ஆட்சிமுறை சிறப்பாக செயல்படுகிறது. விவாதத்தின் முடிவில், எந்த மார்கத்தில் செல்லவேண்டும் என ஒரு பொதுவான ஒப்பந்தம் ஏற்படுகிறாது. வழக்கமாக ஒரு விவாதத்தின் இறுதியில், குழுவிலிருக்கும் யாரேனும் ஒருவர், எடுக்கப்பட்ட முடிவையும் ஒருமித்த கருத்தையும் தொகுத்து முன்மொழிவார். இதுவே, தனது ஆட்சேபனையை குழுவிற்கு தெரிவிப்பதற்கான கடைசி வாய்ப்பாகும்.</para>

        <para>சிறிய, சர்ச்சைகளற்ற முடிவுகளில், ஒருமித்த கருத்தை முன்மொழிவது உள்ளார்ந்த ஒன்றாகிறது. எடுத்துக்காட்டாக, ஒரு உருவாக்குநர், வழுவிற்கான தீர்வை உடனடியாக நிரலில் ஒப்புவிக்கும்பொழுது, அதுவே அந்த வழு குறித்த ஒருமித்த கருத்தின் முன்மொழிவாகிறது: “இந்த வழு நீக்கப்படவேண்டும் என்றும், அதற்கான சரியான வழிமுறை இதுதானென்றும் நாம் அனைவரும் ஏற்கிறோம் என நான் கருதுகிறேன்”. இந்த கருத்தை வெளிப்படையாக உருவாக்குநர் கூறுவதில்லை; வழுவிற்கான தீர்வை மட்டுமே ஒப்புவிக்கிறார். திட்டத்தின் மற்ற உறுப்பினர்கள் தங்கள் ஒப்புதலையளிக்கவும் முற்படுவதில்லை. அவர்களின் மௌனம் சம்மதமாக ஏற்கப்படுகிறது. ஒருவேளை, <emphasis>ஒருமித்த கருத்தாக மாறாத</emphasis> தீர்வினை ஒருவர் ஒப்பிவிப்பின், அந்த நிரல்மாற்றம் நிகழவில்லையெனக்கருதி, மாற்றுக்கருத்துக்களை திட்டக்குழுவினர் விவாதிக்கின்றனர். நிரல்மாற்றம் ஒப்புவிக்கப்பட்ட பின்னரும், அதை நிகழாதவொன்றாக எவ்வாறு கருதமுடியும் என்பது அடுத்துவரும் பகுதியில் விவரிக்கப்பட்டுள்ளது.</para>

        <sect2 id="version-control-relaxation">
            <title>பதிப்பு கட்டுப்பாடு இருந்தால் நீங்கள் ஓய்ந்திருக்கலாம்</title>

            <para>திட்டத்தின் மூலநிரல் பதிப்பு கட்டுப்பாட்டில் இருந்தால், பெரும்பாலான முடிவுகளை எளிதில் எட்டலாம். குழுவினர் அனைவரும் இந்த மாற்றத்தினை ஏற்றுக்கொள்வர் எனக்கருதி ஒரு நிரலர் ஒரு மாற்றத்தை ஒப்புவித்து, அதற்கு மறுப்புகள் எழும்பொழுது, ஒரு விவாதம் நடப்பது மிகவும் பொதுவானவொன்றாகும். பொதுவாக, இத்தகைய மறுப்புகளை முந்தைய விவாதங்களில் பங்கேற்காமல் போனதற்கு வருத்தம் தெரிவித்து துவங்குவது வழக்கம். ஒருவேளை மறுப்பு தெரிவிப்பவரால், விவாதப்பொருள் குறித்து முன்னர் நடந்த விவாதங்களின் பதிவுகளை காணமுடியவில்லையெனில், இவ்வாறு வருத்தம் தெரிவிக்கவேண்டியதில்லை. விவாதத்தின் தொனி, மாற்றத்தை ஒப்புவித்தபின் நடக்கிறதா, அல்லது மாற்றம் நிகழ்வதற்கு முன் நடக்கிறதா என்பதைப்பொருத்து மாறவேண்டியதில்லை. நிகழ்ந்த மாற்றம் சார்ந்து பிற மாற்றங்கள் நிகழாத வரையில், எந்தவொரு மாற்றத்தையும் திரும்பப்பெற்றுக்கொள்ளலாம். மோசமான அல்லது அவசர முடிவுகளை திருத்திக்கொள்வதற்கான வழிமுறையினை பதிப்பு கட்டுப்பாடு முறைமைகள், திட்டத்திற்கு வழங்குகின்றன. இதனால், ஒரு வேலையை செய்வதற்கு முன்னதாக, எவ்வளவு பின்னூட்டம் அவசியமென்பது குறித்து தங்கள் உள்ளுணர்வுகளை நம்புவதற்கான சுதந்திரத்தை குழுவினர் பெறுகின்றனர்.</para>

            <para>இதனால், ஒருமித்த கருத்தை எட்டுவதற்கான வழிமுறை, மிகவும் முறைப்படுத்தப்பட்டதாக இருக்கவேண்டியதில்லை. பெரும்பாலான திட்டங்கள் உணர்வு ரீதியிலேயே இதனை கையாளுகின்றன. சிறிய மாற்றங்களை ஏற்படுத்த விவாதங்கள் ஏதும் தேவைப்படுவதில்லை. அல்லது, குறைந்த அளவிலான விவாதங்களும், சிலரது ஒப்புதல்களும் பெறப்படுகின்றன. நிரலின் பெரும்பகுதியின் நிலைத்தன்மையை பாதிக்கவல்ல, குறிப்பிடத்தகுந்த மாற்றங்களுக்கான ஒருமித்த கருத்தை எட்டுவதற்கு முன் ஓரிரு நாட்கள் காத்திருக்கவேண்டியது அவசியம். ஒரு சிலர் அடிக்கடி தனது மின்னஞ்சலை கவனிப்பதில்லை என்பதற்காக, முக்கியமான உரையாடல்களில் அவர்களை ஒதுக்கிவிடக்கூடாது என்பதே இதற்கு காரணம்.</para>

            <para>ஆகையால், என்ன செய்யவேண்டுமென்று ஒருவர் உறுதியாக அறியும்பொழுது, தயக்கமின்றி அதை அவர் செய்யவேண்டும். நிரல்மாற்றங்களுக்கு மட்டுமல்லாமல், வலைதளத்தை மேம்படுத்தல், ஆவணங்களை மாற்றுதல் போன்ற எந்தவொரு சர்ச்சையற்ற விடயத்திற்கும் இது பொருந்தும். ஒரிசில நிகழ்வுகளில் மட்டுமே, மாற்றங்கள் நிறுத்தப்படவேண்டியிருக்கும். இவற்றை ஒவ்வொன்றாக கையாளலாம். நிச்சயமாக, முரட்டுத்தனமான நடத்தையை ஊக்குவிக்கக்கூடாது. விவாதத்திலிருக்கும் ஒரு விடயத்திற்கும், ஏற்கனவே செயல்படுத்தப்பட்ட விடயத்திற்கும் (திரும்ப்பபெற்றுக்கொள்ளக்கூடியதாக இருந்தாலும் கூட), உளவியல்ரீதியான வேறுபாடு இருக்கிறது. பெரும்பாலானோர், செயல்களை உத்வேகத்தோடு தொடர்புடையதாக கருதுகின்றனர். மேலும் ஒரு மாற்றத்தை தடுப்பதைவிட, அதை திரும்ப்பபெறுவதற்கு குழுவினர் அதிகம் தயங்குவர். இதனை தவறாக ஒரு நிரலர் பயன்படுத்தி, தொடர்ந்து சர்ச்சைக்குரிய மாற்றங்களை ஒப்புவித்தால், அதைக்குறித்து புகாரளித்து, விடயங்களில் முன்னேற்றம் தெரியும் வரை, அந்நிரலரை கடுமையான தரநிர்ணயத்திற்கு உட்படுத்தவேண்டும்.</para>

        </sect2>

        <sect2 id="voting">
            <title>ஒருமித்த கருத்து எட்டமுடியாதபோது வாக்களியுங்கள்</title>

            <para>சில விவாதங்கள், ஒருமித்த கருத்தை எட்டாமல் போவதை தவிர்க்கமுடியாது. ஒரு முட்டுக்கட்டையான நிலையை சமாளிப்பதற்கான அனைத்து முயற்சிகளும் தோல்வியடையும்பொழுது, வாக்களிப்பதே தீர்வாகிறது. ஆனால், வாக்களிப்பதற்கு முன்பு, தெளிவான தெரிவுகள் இருக்கவேண்டும். இங்கேயும், நுட்பவிவாதங்களின் நடைமுறை, திட்டத்தின் முடிவெடுக்கும் வழிமுறையோடு தற்செயலாக இணைந்துள்ளது. வாக்களிக்கவேண்டிய கேள்விகள், சிக்கலான பன்முகத்தன்மைகொண்ட பிரச்சனைகளை உள்ளடக்கியிருக்கிறது. இத்தகைய எந்தவொரு சிக்கலான விவாதத்திலும், வழக்கமாக ஓரிருவர் <firstterm>நேர்மையான தரகராக</firstterm> செயல்படுவர்: இடையிடையே, விவாதத்தை சுருக்கமாக தொகுத்தும், கருத்து வேறுபாடுகளின் மையப்புள்ளிகள் குறித்து கண்காணிக்கவும் செய்கின்றனர். விவாதத்தில் ஏற்பட்டுள்ள முன்னேற்றம் குறித்து ஒவ்வொருவரும் அளவிட்டு அறியவும், மீதமுள்ள பிரச்சனைகள் குறித்து நினைவுபடுத்தவும் இந்த தொகுப்புகள் உதவுகின்றன. வாக்கெடுப்பு அவசியமாகும்பொழுது, இந்த தொகுப்புகளே, வாக்குச்சீட்டின் மாதிரியாகவும் பயன்படுகின்றன. நேர்மையான தரகர்கள் தங்கள் பணியை சிறப்பாக செய்துவந்தால், அவர்களால், சரியான சமயத்தில் வாக்கெடுப்பிற்கான அழைப்பை விடுக்க இயலும். மேலும், அவர்களது தொகுப்புகளின் அடிப்படையில் அமைக்கப்பட்ட வாக்குச்சீட்டை பயன்படுத்த குழுவினர் தயாராக இருப்பர். இத்தரகர்களும் விவாதத்தில் பங்கெடுக்கலாம். குழுவிலுள்ள பிறரின் கருத்துக்களை புரிந்துகொண்டு, அதை பிரதிபலிப்பதோடு, தனது கருத்துக்களால் பாகுபாடு ஏற்படாமல், நடுநிலையோடு விவாதத்தின் நிலையை தொகுக்க முடியும்வரை, இத்தரகர்கள் விவாதகளத்திலிருந்து விலகியிருக்கவேண்டியதில்லை.</para>

            <para>வாக்குச்சீட்டின் உள்ளடக்கம் பொதுவாக சர்ச்சைக்குரியதாக இருப்பதில்லை. வாக்களிக்கும் நிலையை விவாதம் எட்டும்பொழுது, பெரும்பாலான கருத்துவேறுபாடுகள் சில முக்கியமான விடயங்களுக்கு சுருங்கியிருக்கும். சிலசமயங்களில், யாரேனும் ஒரு உருவாக்குநர் வாக்குச்சீட்டை உருவாக்கவே ஆட்சேபனை தெரிவிப்பர். சிலசமயங்களில் அவரது கவலை முறையானதாக இருக்கலாம். எடுத்துக்காட்டாக, ஒரு முக்கியமான தெரிவு விடப்பட்டிருக்கலாம், அல்லது சரியாக விவரிக்கப்படாமலிருக்கலாம். மற்ற சமயங்களில், வாக்கெடுப்பின் முடிவு தனது விருப்பத்திற்கு எதிரானதாக இருக்கலாம் என்பதால், தவிர்க்க முடியாதவொன்றை தவிர்க்க முயலலாம். இத்தகைய தடைகளை எப்படி சமாளிப்பது என <xref linkend="difficult-people"/><phrase output="printed">இப்பகுதியில்<xref linkend="communications"/></phrase> அறியலாம்.</para>

            <!-- TODO Sigh, better consider STV/IRV vs Approval for below. -->

            <para>வாக்கெடுப்பு முறையை மறக்காமல் குறிப்பிடவேண்டும். பலவேறுபட்ட வாக்கெடுப்புமுறைகள் இருப்பதால், எந்த முறையை பின்பற்றுவது என்பது குறித்து தவறான அனுமானங்கள் ஏற்பட வாய்ப்புகள் உள்ளன. பெரும்பாலான சமயங்களில் <firstterm>அங்கீகரிக்கும் வாக்கெடுப்பு முறை</firstterm> பொருத்தமானதாக இருக்கலாம். இதில், வாக்காளர், தான் விரும்பும் அனைத்து தெரிவுகளுக்கும் வாக்களிக்கலாம். இந்த முறையை விவரிப்பதும், இதில் வாக்கு எண்ணுவதற்கும், மற்ற முறைகளைவிட எளிமையாக இருக்கும்.
                and unlike some other
                methods, it only involves one round of voting.  See <ulink
                        url="http://en.wikipedia.org/wiki/Voting_system"
                        >en.wikipedia.org/wiki/Voting_system</ulink> for
                more details about approval voting and other voting systems, but try
                to avoid getting into a long debate about which voting system to use
                (because, of course, you will then find yourself in a debate about
                which voting system to use to decide the voting system!).  One reason
                approval voting is a good choice is that it's very hard for anyone to
                object to&mdash;it's about as fair as a voting system can be.</para>

            <para>Finally, conduct votes in public.  There is no need for secrecy
                or anonymity in a vote on matters that have been debated publicly
                anyway.  Have each participant post her votes to the project mailing
                list, so that any observer can tally and check the results for
                herself, and so that everything is recorded in the archives.</para>

        </sect2>

        <sect2 id="when-to-vote">
            <title>When To Vote</title>

            <para>The hardest thing about voting is determining when to do it.  In
                general, taking a vote should be very rare&mdash;a last resort for
                when all other options have failed.  Don't think of voting as a great
                way to resolve debates.  It isn't.  It ends discussion, and thereby
                ends creative thinking about the problem.  As long as discussion
                continues, there is the possibility that someone will come up with a
                new solution everyone likes.  This happens surprisingly often: a
                lively debate can produce a new way of thinking about the problem, and
                lead to a proposal that eventually satisfies everyone.  Even when no
                new proposal arises, it's still usually better to broker a compromise
                than to hold a vote.  After a compromise, everyone is a little bit
                unhappy, whereas after a vote, some people are unhappy while others
                are happy.  From a political standpoint, the former situation is
                preferable: at least each person can feel he extracted a price for his
                unhappiness.  He may be dissatisfied, but so is everyone else.</para>

            <para>Voting's main advantage is that it finally settles a question so
                everyone can move on.  But it settles it by a head count, instead of
                by rational dialogue leading everyone to the same conclusion.  The
                more experienced people are with open source projects, the less eager
                I find them to be to settle questions by vote.  Instead they will try
                to explore previously unconsidered solutions, or compromise more
                severely than they'd originally planned.  Various techniques are
                available to prevent a premature vote.  The most obvious is simply to
                say "I don't think we're ready for a vote yet," and explain why not.
                Another is to ask for an informal (non-binding) show of hands.  If the
                response clearly tends toward one side or another, this will make some
                people suddenly more willing to compromise, obviating the need for a
                formal vote.  But the most effective way is simply to offer a new
                solution, or a new viewpoint on an old suggestion, so that people
                re-engage with the issues instead of merely repeating the same
                arguments.</para>

            <para>In certain rare cases, everyone may agree that all the
                compromise solutions are worse than any of the non-compromise ones.
                When that happens, voting is less objectionable, both because it is
                more likely to lead to a superior solution and because people will not
                be overly unhappy no matter how it turns out.  Even then, the vote
                should not be rushed.  The discussion leading up to a vote is what
                educates the electorate, so stopping that discussion early can lower
                the quality of the result.</para>

            <para>(Note that this advice to be reluctant to call votes does not
                apply to the change-inclusion voting described in
                <xref linkend="stabilizing-a-release"/><phrase output="printed">
                    in <xref linkend="development-cycle"/></phrase>.  There, voting
                is more of a communications mechanism, a means of registering one's
                involvement in the change review process so that everyone can tell how
                much review a given change has received.)</para>

        </sect2>

        <sect2 id="electorate">
            <title>Who Votes?</title>

            <para>Having a voting system raises the question of electorate: who
                gets to vote?  This has the potential to be a sensitive issue, because
                it forces the project to officially recognize some people as being
                more involved, or as having better judgement, than others.</para>

            <para>The best solution is to simply take an existing distinction,
                commit access, and attach voting privileges to it.  In projects that
                offer both full and partial commit access, the question of whether
                partial committers can vote largely depends on the process by which
                partial commit access is granted.  If the project hands it out
                liberally, for example as a way of maintaining many third-party
                contributed tools in the repository, then it should be made clear that
                partial commit access is really just about committing, not voting.
                The reverse implication naturally holds as well: since full committers
                <emphasis>will</emphasis> have voting privileges, they must be chosen
                not only as programmers, but as members of the electorate.  If someone
                shows disruptive or obstructionist tendencies on the mailing list, the
                group should be very cautious about making him a committer, even if
                the person is technically skilled.</para>

            <para>The voting system itself should be used to choose new
                committers, both full and partial.  But here is one of the rare
                instances where secrecy is appropriate.  You can't have votes about
                potential committers posted to a public mailing list, because the
                candidate's feelings (and reputation) could be hurt.  Instead, the
                usual way is that an existing committer posts to a private mailing
                list consisting only of the other committers, proposing that someone
                be granted commit access.  The other committers speak their minds
                freely, knowing the discussion is private.  Often there will be no
                disagreement, and therefore no vote necessary.  After waiting a few
                days to make sure every committer has had a chance to respond, the
                proposer mails the candidate and offers him commit access.  If there
                is disagreement, discussion ensues as for any other question, possibly
                resulting in a vote.  For this process to be open and frank, the mere
                fact that the discussion is taking place at all should be secret.  If
                the person under consideration knew it was going on, and then were
                never offered commit access, he could conclude that he had lost
                the vote, and would likely feel hurt.  Of course, if someone
                explicitly asks for commit access, then there is no choice but to
                consider the proposal and explicitly accept or reject him.  If the
                latter, then it should be done as politely as possible, with a clear
                explanation: "We liked your patches, but haven't seen enough of them
                yet," or "We appreciate all your patches, but they required
                considerable adjustments before they could be applied, so we don't
                feel comfortable giving you commit access yet.  We hope that this will
                change over time, though."  Remember, what you're saying could come as
                a blow, depending on the person's level of confidence.  Try to see it
                from their point of view as you write the mail.</para>

            <para>Because adding a new committer is more consequential than most
                other one-time decisions, some projects have special requirements for
                the vote.  For example, they may require that the proposal receive at
                least <emphasis>n</emphasis> positive votes and no negative votes, or
                that a supermajority vote in favor.  The exact parameters are not
                important; the main idea is to get the group to be careful about
                adding new committers.  Similar, or even stricter, special requirements
                can apply to votes to <emphasis>remove</emphasis> a committer, though
                hopefully that will never be necessary.  See <xref
                        linkend="committers"/><phrase output="printed"> in
                    <xref linkend="managing-volunteers"/></phrase> for more on the
                non-voting aspects of adding and removing committers.</para>

        </sect2>

        <sect2 id="polls">
            <title>Polls Versus Votes</title>

            <para>For certain kinds of votes, it may be useful to expand the
                electorate. For example, if the developers simply can't figure out
                whether a given interface choice matches the way people actually use
                the software, one solution is to ask to all the subscribers of the
                project's mailing lists to vote.  These are really
                <firstterm>polls</firstterm> rather than votes, but the developers may
                choose to treat the result as binding.  As with any poll, be sure to
                make it clear to the participants that there's a write-in option: if
                someone thinks of a better option not offered in the poll questions,
                her response may turn out to be the most important result of the
                poll.</para>

        </sect2>

        <sect2 id="veto">
            <title>Vetoes</title>

            <para>Some projects allow a special kind of vote known as a
                <firstterm>veto</firstterm>.  A veto is a way for a developer to put a
                halt to a hasty or ill-considered change, at least long enough for
                everyone to discuss it more.  Think of a veto as somewhere between a
                very strong objection and a filibuster.  Its exact meaning varies from
                one project to another.  Some projects make it very difficult to
                override a veto; others allow them to be overridden by regular
                majority vote, perhaps after an enforced delay for more discussion.
                Any veto should be accompanied by a thorough explanation; a veto
                without such an explanation should be considered invalid on
                arrival.</para>

            <para>With vetoes comes the problem of veto abuse.  Sometimes
                developers are too eager to raise the stakes by casting a veto, when
                really all that was called for was more discussion.  You can prevent
                veto abuse by being very reluctant to use vetoes yourself, and by
                gently calling it out when someone else uses her veto too often.  If
                necessary, you can also remind the group that vetoes are binding for
                only as long as the group agrees they are&mdash;after all, if a
                clear majority of developers wants X, then X is going to happen one
                way or another.  Either the vetoing developer will back down, or the
                group will decide to weaken the meaning of a veto.</para>

            <para>You may see people write "-1" to express a veto.  This usage
                comes from the Apache Software Foundation, which has a highly
                structured voting and veto process, described at <ulink
                        url="http://www.apache.org/foundation/voting.html"
                        >apache.org/foundation/voting.html</ulink>.  The Apache
                standards have spread to other projects, and you will see their
                conventions used to varying degrees in a lot of places in the open
                source world.  Technically, "-1" does not always indicate a formal
                veto even according to the Apache standards, but informally it is
                usually taken to mean a veto, or at least a very strong
                objection.</para>

            <para>Like votes, vetoes can apply retroactively.  It's not okay to
                object to a veto on the grounds that the change in question has
                already been committed, or the action taken (unless it's something
                irrevocable, like putting out a press release).  On the other hand, a
                veto that arrives weeks or months late isn't likely to be taken very
                seriously, nor should it be.</para>

        </sect2>

    </sect1>

    <!-- ======================== SECTION ============================== -->
    <sect1 id="written-rules">
        <title>Writing It All Down</title>

        <para>At some point, the number of conventions and agreements floating
            around in your project may become so great that you need to record it
            somewhere.  In order to give such a document legitimacy, make it clear
            that it is based on mailing list discussions and on agreements already
            in effect.  As you compose it, refer to the relevant threads in the
            mailing list archives, and whenever there's a point you're not sure
            about, ask again.  The document should not contain any surprises: it
            is not the source of the agreements, it is merely a description of
            them.  Of course, if it is successful, people will start citing it as
            a source of authority in itself, but that just means it reflects the
            overall will of the group accurately.</para>

        <para>This is the document alluded to in <xref
                linkend="developer-guidelines"/><phrase output="printed"> in
            <xref linkend="getting-started"/></phrase>.  Naturally, when the
            project is very young, you will have to lay down guidelines without
            the benefit of a long project history to draw on.  But as the
            development community matures, you can adjust the language to reflect
            the way things actually turn out.</para>

        <para>Don't try to be comprehensive.  No document can capture
            everything people need to know about participating in a project.  Many
            of the conventions a project evolves remain forever unspoken, never
            mentioned explicitly, yet adhered to by all.  Other things are simply
            too obvious to be mentioned, and would only distract from important
            but non-obvious material.  For example, there's no point writing
            guidelines like "Be polite and respectful to others on the mailing
            lists, and don't start flame wars," or "Write clean, readable bug-free
            code."  Of course these things are desirable, but since there's no
            conceivable universe in which they might <emphasis>not</emphasis> be
            desirable, they are not worth mentioning.  If people are being rude on
            the mailing list, or writing buggy code, they're not going to stop
            just because the project guidelines said to.  Such situations need to
            be dealt with as they arise, not by blanket admonitions to be good.
            On the other hand, if the project has specific guidelines about
            <emphasis>how</emphasis> to write good code, such as rules about
            documenting every API in a certain format, then those guidelines
            should be written down as completely as possible.</para>

        <para>A good way to determine what to include is to base the document
            on the questions that newcomers ask most often, and on the complaints
            experienced developers make most often.  This doesn't necessarily mean
            it should turn into a FAQ sheet&mdash;it probably needs a more
            coherent narrative structure than FAQs can offer.  But it should
            follow the same reality-based principle of addressing the issues that
            actually arise, rather than those you anticipate might arise.</para>

        <para>If the project is a benevolent dictatorship, or has officers
            endowed with special powers (president, chair, whatever), then the
            document is also a good opportunity to codify succession procedures.
            Sometimes this can be as simple as naming specific people as
            replacements in case the BD suddenly leaves the project for any
            reason.  Generally, if there is a BD, only the BD can get away with
            naming a successor.  If there are elected officers, then the
            nomination and election procedure that was used to choose them in the
            first place should be described in the document.  If there was no
            procedure originally, then get consensus on a procedure on the mailing
            lists <emphasis>before</emphasis> writing about it.  People can
            sometimes be touchy about hierarchical structures, so the subject
            needs to be approached with sensitivity.</para>

        <para>Perhaps the most important thing is to make it clear that the
            rules can be reconsidered.  If the conventions described in the
            document start to hamper the project, remind everyone that it is
            supposed to be a living reflection of the group's intentions, not a
            source of frustration and blockage.  If someone makes a habit of
            inappropriately asking for rules to be reconsidered every time the
            rules get in her way, you don't always need to debate it with
            her&mdash;sometimes silence is the best tactic.  If other people
            agree with the complaints, they'll chime in, and it will be obvious
            that something needs to change.  If no one else agrees, then the
            person won't get much response, and the rules will stay as they
            are.</para>

        <para>Two good examples of project guidelines are the Subversion
            Community Guide, at <ulink
                    url="http://subversion.apache.org/docs/community-guide/"
                    >subversion.apache.org/docs/community-guide/</ulink>, and the
            Apache Software Foundation governance documents, at <ulink
                    url="http://www.apache.org/foundation/how-it-works.html"
                    >apache.org/foundation/how-it-works.html</ulink> and <ulink
                    url="http://www.apache.org/foundation/voting.html"
                    >apache.org/foundation/voting.html</ulink>.  The ASF is
            really a collection of software projects, legally organized as a
            nonprofit corporation, so its documents tend to describe governance
            procedures more than development conventions.  They're still worth
            reading, though, because they represent the accumulated experience of
            a lot of open source projects.</para>

    </sect1>

    <!-- ======================== SECTION ============================== -->
    <sect1 id="non-profit">
        <title>Joining or Creating a Non-Profit Organization</title>

        <para><emphasis>24 March 2013: If you're reading this note, then
            you've encountered this section while it's undergoing substantial
            revision; see <ulink url="http://producingoss.com/v2.html"
                    >producingoss.com/v2.html</ulink> for details.</emphasis></para>

        <para>poss2 tbd</para>

        <para><emphasis>Mention Software Freedom Conservancy, SPI, ASF, GNOME,
            any others.  Note "non-profit" vs "not-for-profit".  Mention Kuali et
            al as models.  Problems of consortiums.  Don't assume the U.S. tax
            code benefit is familiar everywhere.  Emphasize clear separation
            between the legal infrastructure and the day-to-day running of the
            project: the organization is there to take care of the things the
            developers don't want to deal with, not to interfere with the things
            the developers already know how to do.  Explain fiscal sponsorship
            when talking about fundraising.  Note trademark ownership as well as
            copyright ownership, and link to this section as appropriate from the
            licensing/copyrights chapter and from the money / corporate
            involvement chapter.</emphasis></para>

    </sect1>

</chapter>

        <!--
        local variables:
        sgml-parent-document: ("book.xml" "chapter")
        end:
        -->
