<chapter id="pfs-ch-9">

<title>Licenses, Copyrights, and Patents</title>

<simplesect>

<para>The license you select probably won't have a major impact on the
adoption of your project, as long as the license is open source.
Users generally choose software based on quality and features, not on
the details of the license.  Nevertheless, you still need a basic
understanding of free software licensing issues, both to ensure that
the project's license is compatible with its goals, and to be able to
discuss licensing decisions with other people.</para>

<para><remark>(Note to self: find the right place to put an "I am not
a lawyer!"  disclaimer, and put it there!)</remark></para>

<para>The first thing you will notice in any licensing discussion is
that there seem to be many different words for the same
thing: <firstterm>free&nbsp;software</firstterm>,
<firstterm>open&nbsp;source</firstterm>,
<firstterm>FOSS</firstterm>, <firstterm>F/OSS</firstterm>, and
<firstterm>FLOSS</firstterm>.  Let's start by sorting those
out, along with a few other things.</para>

</simplesect>

<sect1 id="pfs-licenses-terminology">
<title>Terminology</title>

<variablelist>
  <varlistentry><term><firstterm>free software</firstterm></term>
    <listitem><para>Software that can be freely shared and modified,
              including in source code form.  The term was first
              coined by Richard Stallman, who codified it in the GNU
              General Public License (GPL), and who founded the Free
              Software Foundation (<ulink url="http://www.fsf.org/"/>)
              to promote the concept.</para>

              <para>Although "free software" means pretty much the
              same thing as "open source", the FSF, among others,
              prefers the former term because it emphasizes the idea
              of freedom, and the concept of freely-redistributable
              software as primarily a social movement rather than a
              technical one.  The FSF acknowledges that the term is
              ambiguous&mdash;it could mean "free" as in "zero-cost",
              instead of "free" as in "freedom"&mdash;but feels that
              it's still the best term, all things considered, and
              that the other possibilities in English have their own
              ambiguities.  (Throughout this book "free" is used in
              the "freedom" sense, not the "zero-cost" sense.)</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>open source software</firstterm></term>

    <listitem><para>Free software under another name.  But the
              different name reflects an important philosophical
              difference: "open source" was coined by the Open Source
              Initiative (<ulink url="http://www.opensource.org/"/>)
              as a deliberate alternative to "free software", in order
              to make such software a more palatable choice for
              corporations, by presenting it as a development
              methodology rather than a political movement.  While any
              license that is free is also open source, and vice versa
              (with a few minor exceptions), people tend to pick one
              term and stick with it.  In general, those who prefer
              "free software" are more likely to have a philosophical
              or moral stance on the issue, while those who prefer
              "open source" either don't view it as a matter of
              freedom, or are not interested in advertising the fact
              that they do.  See
              <xref linkend="pfs-free-vs-open-source"/> for a more
              detailed history of this schism.</para>

              <para>The Free Software Foundation has an
              excellent&mdash;utterly unobjective, but nuanced and
              quite fair&mdash;exegesis of the two terms, at <ulink
   url="http://www.fsf.org/licensing/essays/free-software-for-freedom.html"/>.
              The Open Source Initiative's take on it is spread across
              two pages: <ulink
   url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"/>
              and <ulink
   url="http://www.opensource.org/advocacy/free-notfree.php"/>.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>FOSS</firstterm>,
                      <firstterm>F/OSS</firstterm>,
                      <firstterm>FLOSS</firstterm></term>

    <listitem><para>Where there are two of anything, there will soon
              be three, and that is exactly what is happening with
              terms for free software.  The academic world, perhaps
              wanting precision and inclusiveness over elegance, seems
              to have settled on FOSS, or sometimes F/OSS, standing
              for "Free / Open Source Software".  Another variant
              gaining momentum is FLOSS, which
              stands for "Free / Libre Open Source Software" ("libre"
              is familiar across many languages and does not suffer
              from ambiguities of "free"; see
              <ulink url="http://en.wikipedia.org/wiki/FLOSS"/> for
              more).</para>

              <para>All these terms mean essentially the same thing:
              software which can be modified and redistributed by
              everyone, sometimes&mdash;but not always&mdash;with the
              requirement that derivative works be freely
              redistributable under the same terms.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>DFSG-compliant</firstterm></term>
    <listitem><para>Compliant with the Debian Free Software Guidelines
              (<ulink
              url="http://www.debian.org/social_contract#guidelines"/>).
              This is a widely-used test for whether a given license
              is truly open source (free, libre, etc).  The Debian
              Project's mission is to maintain an entirely free
              operating system, such that someone installing it need
              never doubt that they have the right to modify and
              redistribute any or all of the system.  The Debian Free
              Software Guidelines are simply the requirements that any
              software package's license must meet in order to be
              included in Debian.  Because the Debian Project spent a
              good deal of time thinking about how to construct such a
              test, the guidelines they came up with have proven very
              robust (see
              <ulink url="http://en.wikipedia.org/wiki/DFSG"/>), and
              as far as I'm aware no serious objection to them has
              been raised either by the Free Software Foundation or
              the Open Source Initiative.  If you know that a given
              license is DFSG-compliant, you know that it guarantees
              all the important freedoms (such as forkability even
              against the original author's wishes) required to
              sustain the dynamics of an open source project.  All of
              the licenses discussed in this chapter are
              DFSG-compliant.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>OSI-approved</firstterm></term>
    <listitem><para>Approved by the Open Source Initiative.  This is
              another widely-used test of whether a license permits
              all the necessary freedoms.  The OSI's definition of
              open source software is based on the Debian Free
              Software Guidelines, and any license that meets one
              definition almost always meets the other.  There have
              been a few exceptions over the years, but only involving
              niche licenses and not of any relevance here.  Unlike
              the Debian Project, the OSI maintains a list of all
              licenses it has ever approved, at
              <ulink url="http://www.opensource.org/licenses/"/>, so
              that being "OSI-approved" is an unambiguous state: a
              license either is or isn't on their list.</para>

              <para>The Free Software Foundation also maintains a list
              of licenses at <ulink
              url="http://www.fsf.org/licensing/licenses/license-list.html"/>.
              The FSF categorizes licenses not only by whether they
              are free, but whether they are compatible with the GNU
              General Public License.  GPL compatibility is an
              important topic, covered in
              <ulink url="pfs-license-compatibility"/>.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>proprietary</firstterm>,
                      <firstterm>closed-source</firstterm></term>
    <listitem><para>The opposite of "free" or "open source".  It means
              software distributed under traditional, royalty-based
              licensing terms, where users pay per copy, or under any
              other terms sufficiently restrictive to prevent open
              source dynamics from operating.  Even software
              distributed at no charge can still be proprietary, if
              its license does not permit free redistribution and
              modification.</para>

              <para>Generally "proprietary" and "closed-source" are
              synonyms.  However, "closed-source" additionally implies
              that the source code cannot even be seen.  Since the
              source code cannot be seen with most proprietary
              software, this is normally a distinction without a
              difference.  However, occasionally someone releases
              proprietary software under a license that allows others
              to view the source code.  Confusingly, they sometimes
              call this "open source", or "nearly open source", etc,
              but that's misleading. The
              <emphasis>visibility</emphasis> of the source code is
              not the issue, the important question is what you're
              allowed to do with it.  Thus, the difference between
              proprietary and closed-source is mostly irrelevant, and
              the two can be treated as synonyms.</para>

              <para>Sometimes "commercial" is used as a synonym for
              "proprietary", but properly speaking the two are not the
              same thing.  Free software can be commercial software.
              After all, free software can be sold, as long as the
              buyers are not restricted from giving away copies
              themselves, and it can be commercialized in other ways
              as well, for example by selling support, services, and
              certification.  There are multi-million dollar companies
              are built on free software today, so it is not
              inherently anti-commercial nor anti-corporate.  On the
              other hand, it <emphasis>is</emphasis> anti-proprietary
              by its nature, and this is the key way in which it
              differs from traditional per-copy licensing.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>public domain</firstterm></term>
    <listitem><para>Having no copyright holder, meaning that there is
              no one who has the right to restrict copying of the
              work.  Being in the public domain is not the same having
              no author.  Everything has an author, and even if a
              work's author or authors choose to put it in the public
              domain, that doesn't change the fact of who wrote it.
              It comes down to the difference
              between <emphasis>ownership</emphasis>, which is about
              control over distribution, and
              <emphasis>authorship</emphasis>, which is really about
              credit and reputation.  There is no necessary legal
              connection between the two.  When someone writes a work
              for hire, for example, in most jurisdictions whoever
              paid for the work (usually a corporation) is the
              copyright holder by default, even though they are not
              the author.  If you look in the front of many books, you
              will see that often the publisher owns the copyright,
              even though the author's name is on the cover.</para>

              <para>When a work is in the public domain, material from
              it can be incorporated into a copyrighted work, and
              thereafter <emphasis>that copy</emphasis> of the
              material is covered under the same copyright as the
              whole work.  But this does not affect the availability
              of the original work, which remains in the public
              domain.  Thus, releasing something into the public
              domain is technically one way to make it "free",
              according to the guidelines of most free software
              certifying organizations.  However, there are usually
              good reasons to use a license instead of just releasing
              into the public domain: even with free software certain
              restrictions can be useful, not only to the copyright
              holder but even to recipients as well, as the next
              section makes clear.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>copyleft</firstterm></term>
    <listitem><para>A license that uses copyright law to achieve a
              result opposite to traditional copyright.  Depending on
              whom you ask, this means either licenses that permit
              the freedoms under discussion here, or, more narrowly,
              licenses that not only permit those freedoms but
              <emphasis>enforce</emphasis> them, by stipulating that
              the freedoms must travel with the work.  The Free
              Software Foundation uses the second definition
              exclusively; elsewhere it's a toss-up: a lot of people
              use the term the same way the FSF does, but
              others&mdash;including some who write for mainstream
              media&mdash;tend to use the first definition.  It's not
              clear that everyone using the term is aware that there's
              a distinction to be made at all.</para>

              <para>The canonical example of the narrower, stricter
              definition is the GNU General Public License, which
              stipulates that any derivative works must also be
              licensed under the GPL; see
              <xref linkend="pfs-license-compatibility"/> for
              more.</para>
    </listitem>
  </varlistentry>

</variablelist>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-license-aspects">
<title>Aspects of Licenses</title>

<para>Although there are many different free software licenses
available, in the most most important respects they all say the same
things: that anyone can modify the code, that anyone can redistribute
it both in original and modified form, and that the copyright holders
and authors provide no warranties whatsoever (avoiding liability is
especially important given that people might run modified versions
without even knowing it).  The differences between licences boil down
to a few oft-recurring issues:</para>

<variablelist>
  <varlistentry><term>compatibility with proprietary licenses</term>
    <listitem><para>Some free licenses allow the covered code to be
              used in proprietary programs.  This does not affect the
              licensing terms of the proprietary program: it is still
              as proprietary as ever, it just happens to contain some
              code from a non-proprietary source.  The Apache License,
              X Consortium License, BSD-style license, and the
              MIT-style license are all examples of
              proprietary-compatible licenses.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>compatibility with other free licenses</term>
    <listitem><para>Most free license are compatible with each other,
              meaning that code under one license can be combined with
              code under another, and the result distributed under
              either license without violating the terms of the
              other.  The major exception to this is the GNU General
              Public License, which requires that any work using GPL'd
              code be itself distributed under the GPL, and without
              adding any further restrictions beyond what the GPL
              requires.  The GPL is compatible with some free
              licenses, but not with others.  This discussed in more
              detail in <xref linkend="pfs-license-compatibility"/>.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>enforcement of crediting</term>
    <listitem><para>Some free licenses stipulate that any use of the
              covered code be accompanied by a notice, whose placement
              and display is usually specified, giving credit to the
              authors or copyright holders of the code.  These
              licenses are often still proprietary-compatible: they do
              not necessarily demand that the derivative work be free,
              merely that credit be given to the free code.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>protection of trademark</term>
    <listitem><para>A variant of credit enforcement,
              trademark-protecting licenses specify that the name of
              the original software (or its copyright holders, or
              their institution, etc) may <emphasis>not</emphasis> be
              used by derivative works without prior written
              permission.  Although credit enforcement insists that a
              certain name be used, and trademark protection insists
              that it not be used, they are both expressions of the
              same desire: that the original code's reputation be
              preserved and transmitted, but not tarnished by
              association.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>protection of "artistic integrity"</term>
    <listitem><para>Some licenses (the Artistic License, used
              for the most popular implementation of the Perl
              programming language, and Donald Knuth's TeX license,
              for example), requires that modification and
              redistribution be done in a manner that distinguishes
              clearly between the pristine original version of the
              code and any modifications.  They permit essentially the
              same freedoms as other free license, but impose certain
              requirements that make the integrity of the original
              code easy to verify.  These licenses have not caught on
              much beyond the specific programs they were made for,
              and will not be discussed in this chapter; they are
              mentioned here only for completeness' sake.</para> 
    </listitem>
  </varlistentry>
</variablelist>

<para>Most of these stipulations are not mutually exclusive, and some
licenses include several.  The common thread among them is that they
are about what demands the copyright holder places on the recipient,
in order for the recipient to have the right to use and/or
redistribute the code.  For example, some projects want their name and
reputation to be transmitted along with the code, and this is worth
imposing the extra burden of a credit or trademark clause; depending
on its onerousness, that burden may result in some users choosing a
package with a less demanding license.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="pfs-license-compatibility">
<title>The GPL and License Compatibility</title>

<para>By far the sharpest dividing line in licensing is that between
proprietary-incompatible and proprietary-compatible licenses, that is,
between the GNU General Public License and everything else.  Because
the primary goal of the GPL's authors is the promotion of free
software, they deliberately crafted the license to make it impossible
to mix GPL'd code into proprietary programs.  Specifically, among the
GPL's requirements (see
<ulink url="http://www.gnu.org/licenses/licenses.html#GPL"/> for its
full text) are these two:</para>

<orderedlist>
  <listitem><para>Any derivative work&mdash;that is, any work
            containing a non-trivial amount of GPL'd code&mdash;must
            itself be distributed under the GPL.</para> 
  </listitem>
  <listitem><para>No additional restrictions may be placed on the
            redistribution of either the original work or a derivative
            work.  (The exact language is: "You may not impose any
            further restrictions on the recipients' exercise of the
            rights granted herein.")</para>
  </listitem>
</orderedlist>

<para>With these conditions, the GPL succeeds in making freedom
contagious.  Once a program is copyrighted under the GPL, its terms of
redistribution are <firstterm>viral</firstterm>&mdash;they are passed
on to anything else the code gets incorporated into, making it
effectively impossible to use GPL'd code in closed-source programs.
However, these same clauses also make the GPL incompatible with some
other free software licenses.  The usual way this happens is that the
other license imposes a requirement&mdash;for example, a credit clause
requiring the original authors to be mentioned in some way&mdash;that
is incompatible with the GPL's "You may not impose any further
restrictions..." language.  From the point of view of the Free
Software Foundation, these second-order consequences are desirable, or
at least not regrettable.  The GPL not only keeps your software free,
but effectively makes your software an agent in pushing
<emphasis>other</emphasis> software to enforce freedom as well.</para>

<para>The question of whether or not this this is a good way to
promote free software is one of the most persistent holy wars on the
Internet (see <xref linkend="pfs-holy-wars"/>), and we won't
investigate it here.  What's important for our purposes is that
GPL-compatibility is an important issue when choosing a license.  The
GPL is by far the most popular open source license; at <ulink
url="http://freshmeat.net/stats/#license"/>, it is at 68%, and the
next highest license is at 6%.  If you want your code to be able to be
mixed freely with GPL'd code&mdash;and there's a lot of GPL'd code out
there&mdash;then you should pick a GPL-compatible license.  Most of
the GPL-compatible open source licenses are also
proprietary-compatible: that is, code under such a license can be used
in a GPL'd progarm, and it can be used in a proprietary program.  Of
course, the <emphasis>results</emphasis> of these mixings would not be
compatible with each other, since one would be under the GPL and the
other would be under a closed-source license.  But that concern
applies only to the derivative works, not to the code you distribute
in the first place.</para>

<para>Fortunately, the Free Software Foundation maintains a list
showing which licenses are compatible with the GPL and which are not,
at <ulink url="http://www.gnu.org/licenses/license-list.html"/>.  All
of the licenses discussed in this chapter are present on that list, on
one side or the other.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-license-choosing">
<title>Choosing a License</title>

<para>When choosing a license to apply to your project, if at all
possible use an existing license instead of making up a new one.
There are two reasons why existing licenses are better:</para>

<itemizedlist>
  <listitem><para>Familiarity.  If you use one of the three or four
            most popular licenses, people won't feel they have to read
            the legalese in order to use your code, because they'll
            have already done so for that license a long time ago.</para>
  </listitem>
  <listitem><para>Quality.  Unless you have a team of lawyers at your
            disposal, you are unlikely to come up with a legally solid
            license.  The licenses mentioned here are the products of
            much thought and experience; unless your project has truly
            unusual needs, it is unlikely you would do better.</para> 
  </listitem>
</itemizedlist>
   
<para>To apply one of these licenses to your project, see
<xref linkend="pfs-license-quickstart-applying"/>.</para>

<sect2 id="pfs-license-choosing-mit-x">
<title>The MIT / X Window System License</title>

<para>If your goal is that your code be accessible by the greatest
possible number of developers and derivative works, and you do not
mind the code being used in proprietary programs, then choose the MIT
/ X Window System license (so named because it is the licence under
which the Massachusetts Institute of Technology released the original
X Window System code).  This license's basic message is "You are free
to use this code however you want."  It is compatible with the GNU
GPL, and it is short, simple and easy to understand:</para>

<screen>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</screen>

<para>(Taken from <ulink
url="http://www.opensource.org/licenses/mit-license.php"/>.)</para>

</sect2>

<sect2 id="pfs-license-choosing-gpl">
<title>The GNU General Public License</title>

<para>If you prefer that your project's code not be used in
proprietary programs, or if you at least don't care whether or not it
can be used in proprietary programs, then choose the GNU General
Public License
(<ulink url="http://www.fsf.org/licensing/licenses/gpl.html"/>).  The
GPL is probably the most widely-used free software license in the
world today; this instant recognizeability is itself one of the GPL's
major advantages.</para>

<para>When writing a code library that is meant mainly to be used as
part of other programs, consider carefully whether the restrictions
imposed by the GPL are in line with your project's goals.  In some
cases&mdash;for example, when you're trying to unseat a competing,
proprietary library that does the same thing&mdash;it may make more
strategic sense to license your code in such a way that it can be
mixed into proprietary programs, even though you would otherwise not
wish this.  The Free Software Foundation even fashioned an alternative
to the GPL for such circumstances: the <firstterm>GNU Library
GPL</firstterm>, later renamed to the <firstterm>GNU Lesser
GPL</firstterm> (most people just use the acronym
<firstterm>LGPL</firstterm> in any case).  The LGPL has looser
restrictions than the GPL, and can be mixed more easily with non-free
code.  However, it's also a bit complex and takes some time to
understand, so if you're not going to use the GPL, I recommend just
using the MIT/X-style license.</para>

<sect3 id="pfs-is-the-gpl-free">
<title>Is the GPL free or not free?</title>

<para>One consequence of choosing the GPL is the
possibility&mdash;small, but not infinitely small&mdash;of finding
yourself or your project embroiled in a dispute about whether or not
the GPL is truly "free", given that it places some restrictions on
what you can do with the code&mdash;namely, the restriction that you
can only distribute the code under the GPL.  For some people, the
existence of this restriction means the GPL is "less free" than more
permissive licenses such as the MIT/X license.  Where this argument
usually goes, of course, is that since "more free" must be better than
"less free" (after all, who's not in favor of freedom?), it follows
that those licenses are better than the GPL.</para>

<para>This debate is another popular holy war (see
<xref linkend="pfs-holy-wars"/>).  Avoid participating in it, at least
in project forums.  Don't attempt to prove that the GPL is less free,
as free, or more free than other licenses.  Instead, emphasize the
specific reasons your project chose the GPL.  If the recognizability
of license was a reason, say that.  If the enforcement of a free
license on derivative works was also a reason, say that too, but
refuse to be drawn into discussion about whether this makes the code
more or less "free".  Freedom is a complex topic, and there is little
point talking about it if terminology is going to be used as a
stalking horse for substance.</para>

<para>Since this is a book and not a mailing list thread, however, I
will admit that I've never understood the "GPL is not free" argument.
The only restriction the GPL imposes is that it prevents people from
imposing <emphasis>further</emphasis> restrictions.  To say that this
reduces freedom has always seemed to me like saying that outlawing
slavery reduces freedom, because it prevents some people from owning
slaves.</para>

<para>(Oh, and if you do get drawn into a debate about it, don't raise
the stakes by making inflammatory analogies.)</para>

</sect3>

</sect2>

<sect2 id="pfs-license-bsd">
<title>What About The "BSD" License?</title>

<para>A fair amount of open source software is distributed under
a <firstterm>BSD license</firstterm> (or sometimes
a <firstterm>BSD-style license</firstterm>).  The original BSD license
was used for the Berkeley Software Distribution, in which the
University of California released important portions of a Unix
implementation.  This license (the exact text may be seen in section
2.2.2 of
<ulink url="http://www.xfree86.org/3.3.6/COPYRIGHT2.html#6"/>) was
similar in spirit to the the MIT/X license, except for one
clause:</para>

<blockquote>
<emphasis>All advertising materials mentioning features or use of
this software must display the following acknowledgement: This product
includes software developed by the University of California, Lawrence
Berkeley Laboratory.</emphasis>
</blockquote>

<para>The presence of that clause not only made the the original BSD
license GPL-incompatible, it also set a dangerous precedent: as other
organizations put similar advertising clauses into
<emphasis>their</emphasis> free software&mdash;substituting their own
organization's name in place of "the University of California,
Lawrence Berkeley Laboratory"&mdash;software redistributors faced an
ever-increasing burden in what they were required to display.
Fortunately, many of the projects that used this license became aware
of the problem, and simply dropped the advertising clause.  In 1999,
even the University of California did so.</para>

<para>The result is the revised BSD license, which is simply the
original BSD license with the advertising clause removed.  However,
this history makes the phrase "BSD license" a bit ambiguous: does it
refer to the original, or the revised version?  This is why I prefer
the MIT/X license, which is essentially equivalent, and which does not
suffer from any ambiguity.  However, there is perhaps one reason to
prefer the revised BSD license to the MIT/X license, which is that the
BSD includes this clause:</para>

<blockquote>
<emphasis>Neither the name of the &lt;ORGANIZATION&gt; nor
the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written
permission.</emphasis>
</blockquote>

<para>It's not clear that without such a clause, a recipient of the
software would have had the right to use the licensor's name anyway,
but the clause removes any possible doubt.  For organizations worried
about trademark control, therefore, the BSD may therefore be slightly
preferable to MIT/X.  In general, however, a liberal copyright license
does not imply that recipients have any right to use or dilute your
trademarks &mdash; copyright law and trademark law are two different
beasts.</para>

<para>If you wish to use the revised BSD license, a template is
available at <ulink
url="http://www.opensource.org/licenses/bsd-license.php"/>.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-copyright-assignment">
<title>Copyright Assignment and Ownership</title>

<para>Most projects have a single legal entity own the copyright on
the entire codebase.  This is done for various reasons.  If the terms
of the copyright ever need to be defended or enforced in court, it's
much easier if a single entity has the right to do so; otherwise, all
of the contributors would have to cooperate, and some might not have
time or even be reachable when the issue arises.  Also, if the code is
the target of a copyright infringement suit, you wouldn't want the
individual developers to be personally exposed to liability.</para>

<para>Remember that centralized ownership of the copyright does not
make the code any less free.  Open source licenses do not give the
copyright holder the right to retroactively proprietize all copies of
the code.  Even if the copyright-holding entity suddenly turned around
and started distributing all the code under a restrictive license, it
wouldn't cause a problem for the public project.  The other developers
would simply fork based on the latest free copy of the code, and
continue as if nothing had happened.  Because they know they can do
this, most developers do not object when asked to assign copyright to
some sponsoring organization.</para>

<para>Different organizations apply different amounts of rigor to the
task of collecting copyright assignments.  For most, simply getting an
informal statement from a contributor on the public list is
enough&mdash;something to the effect of "I hereby assign copyright in
this code to the project, to be licensed under the same terms as the
rest of the code".  At least one lawyer I've talked to says that's
really enough, presumably because it happens in a context where
copyright assignment is normal and expected anyway, and because it
represents a <foreignphrase>bona fide</foreignphrase> effort on the
project's part to ascertain the developer's true intentions.  On the
other hand, the Free Software Foundation goes to the opposite extreme:
they require contributors to physically sign and mail in a piece of
paper containing a formal statement of copyright assignment, sometimes
for just one contribution, sometimes for current and future
contributions.  If the developer is employed, the FSF asks that the
employer sign it too.</para>

<para>The FSF's paranoia is understandable.  If someone violates the
terms of the GPL by incorporating some of their software into a
proprietary program, the FSF will need to fight that in court, and
they want their copyrights to be as airtight as possible when that
happens.  Since the FSF is copyright holder for a lot of popular
software, they view this as a real possibility.  Whether your
organization needs to be similarly scrupulous is something only you
can decide, in consultation with lawyers.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-dual-licensing">
<title>Dual Licensing Schemes</title>

<para><remark>(Use the Zack Urlocker interview material
here.)</remark></para>

<para>These are mostly used for librarized code, not standalone
apps.  sleepycat.org is an example using a bsd-style license, sort
of.  Point out the tricky issues w/ contributed code.</para>

<para>See www.mysql.com / dev.mysql.com / www.innodb.com for an
example of a dual-licensing strategy where the free half of the
license is GPL.  How do they handle contributed code?  I don't
know.  Point out how the GPL is the usual choice for dual-licensing
strategies, because it natively enforces what the licensor wants to
enforce anyway.</para>

<para><remark>See
http://www.mysql.com/company/legal/licensing/</remark></para>

<para><remark>(It may be that most of what needs to be said about
dual-licensing will be said in Chapter 5.  Or if not, then Chapter 5
needs to refer to here for some of the business/legal implications.
Either way, make sure there are cross-references.)</remark></para>

<para><remark>(Re dual-licensing: Dual-licensing situations get
started for a number of reasons.  The code may have started out free,
and a permanent proprietary fork may simply not be in the cards (too
much negative publicity, too much momentum in the existing dev
community, whatever).  But also, let's not forget the "Where do you
want to spend your time?" factor.  Sometimes, people start these
companies because they just plain like doing open source development,
and don't want to give it up.  Discuss how all this affects ownership
both legal and psychological.)</remark></para>

<para><remark>License interactions.  (Example: the temporary drifting
apart of PHP and MySQL due to PHP's fear that licensing differences
would prohibit them from distributing MySQL with their code.  We also
have some examples of this problem in
Subversion/Apache/BerkeleyDB-land.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-patents">
<title>Patents</title>

<para><remark>Patents are a lightning rod issue.  If you collect them,
make it clear that it's for defensive purposes, and never enforce them
on open source projects.  (This is not only the right thing to do, but
it's also good open source public relations.)  Don't go off the deep
end ranting about the coming patent war (or put it in a footnote or an
appendix if you do), but point out that opposition to software patents
is almost universal among open source developers.  Talk about the
boomerang licenses.  When noting the harm, point out the subtle and
pervasive aspects like the video card industry issue.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-licensing-further-resources">
<title>Further Resources</title>

<screen>
Links:

   Andrew St. Laurent's licensing book at <ulink
   url="http://www.oreilly.com/catalog/osfreesoft/"/>.

   Make Your Open Source Software GPL-Compatible.  Or Else.
       by David A. Wheeler
   http://www.dwheeler.com/essays/gpl-compatible.html

   Related read:
   http://daniel.haxx.se/transition.html

   http://www.opensource.org/licenses/
      Has everything for software!

   http://www.apache.org/licenses/
      Has a good link about GPL compatibility.

   http://www.gnu.org/licenses/licenses.html
      Has GNU license for software and docs.

   http://creativecommons.org/license/
      See list of licenses on the left.
      Note that not all of these are truly free.

   Humor... sort of:
   http://www.panix.com/~kingdon/licenses.html

</screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

