<chapter id="pfs-ch-9">

<title>Licenses, Copyrights, and Patents</title>

<simplesect>

<para>The license you select probably won't have a major impact on the
adoption of your project, as long as the license is open source.
Users generally choose software based on quality and features, not on
the details of the license.  Nevertheless, you still need a basic
understanding of free software licensing issues, both to ensure that
the project's license is compatible with its goals, and to be able to
discuss licensing decisions with other people.</para>

<para><remark>(Note to self: find the right place to put an "I am not
a lawyer!"  disclaimer, and put it there!)</remark></para>

<para>The first thing you will notice in any licensing discussion is
that there seem to be many different words for the same
thing: <firstterm>free&nbsp;software</firstterm>,
<firstterm>open&nbsp;source</firstterm>,
<firstterm>FOSS</firstterm>, <firstterm>F/OSS</firstterm>, and
<firstterm>FLOSS</firstterm>.  Let's start by sorting those
out.</para>

</simplesect>

<sect1 id="pfs-licenses-terminology">
<title>Terminology</title>

<para><firstterm>Free software</firstterm> is software that can be
freely shared and modified, including in source code form.  The term
was first coined by Richard Stallman, who codified it in the GNU
General Public License (GPL), and who founded the Free Software
Foundation (<ulink url="http://www.fsf.org/"/>) to promote the
concept.</para>

<para>Although "free software" means pretty much the same thing as
"open source", the FSF, among others, prefers the former term because
it emphasizes the idea of freedom, and the concept of
freely-redistributable software as primarily a social movement rather
than a technical one.  The FSF acknowledges that the term is
ambiguous&mdash;it could mean "free" as in "zero-cost", instead of
"free" as in "freedom"&mdash;but feels that it's still the best term,
all things considered, and that the other possibilities in English
have their own ambiguities.  (Throughout this book "free" is used in
the "freedom" sense, not the "zero-cost" sense.)</para>

<para><firstterm>Open source software</firstterm> is simply free
software under another name, but the different name reflects an
important philosophical difference: "open source" was coined by the
Open Source Initiative (<ulink url="http://www.opensource.org/"/>) as
a deliberate alternative to "free software", in order to make such
software a more palatable choice for corporations, by presenting it as
a development methodology rather than a political movement.  While any
license that is free is also open source, and vice versa (with a few
minor exceptions), people tend to pick one term and stick with it.  In
general, those who prefer "free software" are more likely to have a
philosophical or moral stance on the issue, while those who prefer
"open source" either don't view it as a matter of freedom, or are not
interested in advertising the fact that they do.  See <xref
linkend="pfs-free-vs-open-source"/> for a more detailed history of
this schism.</para>

<para>The Free Software Foundation has an excellent&mdash;utterly
unobjective, but nuanced and quite fair&mdash;exegesis of the two
terms, at
<ulink
url="http://www.fsf.org/licensing/essays/free-software-for-freedom.html"/>.
The Open Source Initiative's take on it is spread across two pages:
<ulink
url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"/>
and
<ulink
url="http://www.opensource.org/advocacy/free-notfree.php"/>.</para>

<para>Where there are two of anything, there will soon be three, and
that is exactly what is happening with terms for free software.  The
academic world, perhaps wanting precision and inclusiveness over
elegance, seems to have settled on <firstterm>FOSS</firstterm>, or
sometimes <firstterm>F/OSS</firstterm>, standing for "Free / Open
Source Software".  Another variant gaining momentum is
<firstterm>FLOSS</firstterm>, which stands for "Free / Libre Open
Source Software" ("libre" is familiar across many languages and does
not suffer from ambiguities of "free"; see <ulink
url="http://en.wikipedia.org/wiki/FLOSS"/> for more).</para>

<para>All these terms mean essentially the same thing: software which
can be modified and redistributed by everyone, sometimes&mdash;but not
always&mdash;with the requirement that derivative works be freely
redistributable under the same terms.</para>

<para>There are two widely-used tests for whether a given license is
truly open source (free, libre, etc).  The first is
<firstterm>DFSG-compliance</firstterm>, that is, compliance with the
Debian Free Software Guidelines (<ulink
url="http://www.debian.org/social_contract#guidelines"/>).  The Debian
Project's mission is to maintain an entirely free operating system,
such that someone installing it need never doubt that they have the
right to modify and redistribute any or all of the system.  The Debian
Free Software Guidelines are simply the requirements that any software
package's license must meet in order to be included in Debian.
Because the Debian Project spent a good deal of time thinking about
how to construct such a test, the guidelines they came up with have
proven very robust (see <ulink
url="http://en.wikipedia.org/wiki/DFSG"/>), and as far as I'm aware no
serious objection to them has been raised either by the Free Software
Foundation or the Open Source Initiative.  If you know that a given
license is <firstterm>DFSG-compliant</firstterm>, you know that it
guarantees all the important freedoms (such as forkability even
against the original author's wishes) required to sustain the dynamics
of an open source project.  All of the licenses discussed in this
chapter are DFSG-compliant.</para>

<para>The other widely-used test is approval by the Open Source
Initiative; licenses meeting this test are called
<firstterm>OSI-approved</firstterm>.  The OSI's definition of open
source software is actually based on the Debian Free Software
Guidelines, and any license that meets one definition almost always
meets the other.  There have been a few exceptions over the years, but
only involving niche licenses and not of any relevance here.  Unlike
the Debian Project, the OSI maintains a list of all licenses it has
ever approved, at <ulink url="http://www.opensource.org/licenses/"/>,
so that being "OSI-approved" is an unambiguous state: a license either
is or isn't on their list.</para>

<para>The Free Software Foundation also maintains a list of licenses
at <ulink
url="http://www.fsf.org/licensing/licenses/license-list.html"/>.  The
FSF categorizes licenses not only by whether they are free, but
whether they are compatible with the GNU General Public License.  GPL
compatibility is an important topic, covered in <ulink
url="pfs-license-compatibility"/>.</para>

<para>A few other terms that come up often in licensing
conversations:</para>

<para><firstterm>Proprietary software</firstterm> means the opposite
of free software.  Proprietary software usually means software
distributed under traditional royalty-based licensing terms, where
users pay per-copy.  However, even software which is distributed at no
charge can still be proprietary, if its license does not permit free
redistribution and modification.</para>

<para>Sometimes people use "commercial" as a synonym for
"proprietary", but properly speaking the two are not the same thing.
Commercial software can be free software.  After all, free software
can be sold, as long as the buyers are not restricted from giving away
copies themselves, and it can be commercialized in other ways as well,
for example by selling support, services, and certification.  There
are multi-million dollar companies are built on free software today;
it is simply not inherently anti-commercial nor anti-corporate.  On
the other hand, it <emphasis>is</emphasis> anti-proprietary by its
nature, and this is the key way in which it differs from traditional
per-copy licensing.</para>

<para>The other term that gets bandied about a lot is
<firstterm>public domain</firstterm>.  The public domain is a specific
legal state: works in the public domain have no copyright holder,
meaning that there is no one who has the right to restrict copying of
those works.  Being in the public domain is not the same having no
author.  Everything has an author, and even if a work's author or
authors choose to put it in the public domain, that doesn't change the
fact of who wrote it.  It comes down to the difference between
<emphasis>ownership</emphasis>, which is about control over
distribution, and <emphasis>authorship</emphasis>, which is really
about credit and reputation.  There is no necessary legal connection
between the two.  When someone writes a work for hire, for example, in
most jurisdictions whoever paid for the work (usually a corporation)
is the copyright holder by default, even though they are not the
author.  If you look in the front of many books, you will see that
often the publisher owns the copyright, even though the author's name
is on the cover.</para>

<para>When a work is in the public domain, material from it can be
incorporated into a copyrighted work, and thereafter <emphasis>that
copy</emphasis> of the material is covered under the same copyright as
the whole work.  But this does not affect the availability of the
original work, which remains in the public domain.  Thus, releasing
something into the public domain is technically one way to make it
"free", according to the guidelines of most free software certifying
organizations.  However, there are usually good reasons to use a
license instead of just releasing into the public domain: even with
free software certain restrictions can be useful, not only to the
copyright holder but even to recipients as well, as the next section
makes clear.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-license-comparison">
<title>License Comparison</title>

<para>Although there are many different free software licenses
available, in the most most important respects they all say the same
things: that anyone can modify the code, that anyone can redistribute
it both in original and modified form, and that the copyright holders
and authors provide no warranties whatsoever (avoiding liability is
especially important given that people might run modified versions
without even knowing it).  The differences between licences boil down
to a few oft-recurring issues:</para>

<variablelist>
  <varlistentry><term>compatibility with proprietary licenses</term>
    <listitem><para>Some free licenses allow the covered code to be
              used in proprietary programs.  This does not affect the
              licensing terms of the proprietary program: it is still
              as proprietary as ever, it just happens to contain some
              code from a non-proprietary source.  The Apache License,
              X Consortium License, BSD-style license, and the
              MIT-style license are all examples of
              proprietary-compatible licenses.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>compatibility with other free licenses</term>
    <listitem><para>Most free license are compatible with each other,
              meaning that code under one license can be combined with
              code under another, and the result distributed under
              either license without violating the terms of the
              other.  The major exception to this is the GNU General
              Public License, which requires that any work using GPL'd
              code be itself distributed under the GPL, and without
              adding any further restrictions beyond what the GPL
              requires.  The GPL is compatible with some free
              licenses, but not with others.  This discussed in more
              detail in <xref linkend="pfs-license-compatibility"/>.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>enforcement of crediting</term>
    <listitem><para>Some free licenses stipulate that any use of the
              covered code be accompanied by a notice, whose placement
              and display is usually specified, giving credit to the
              authors or copyright holders of the code.  These
              licenses are often still proprietary-compatible: they do
              not necessarily demand that the derivative work be free,
              merely that credit be given to the free code.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>protection of trademark</term>
    <listitem><para>A variant of credit enforcement,
              trademark-protecting licenses specify that the name of
              the original software (or its copyright holders, or
              their institution, etc) may <emphasis>not</emphasis> be
              used by derivative works without prior written
              permission.  Although credit enforcement insists that a
              certain name be used, and trademark protection insists
              that it not be used, they are both expressions of the
              same desire: that the original code's reputation be
              preserved and transmitted, but not tarnished by
              association.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>protection of "artistic integrity"</term>
    <listitem><para>Some licenses (the Artistic License, used
              for the most popular implementation of the Perl
              programming language, and Donald Knuth's TeX license,
              for example), requires that modification and
              redistribution be done in a manner that distinguishes
              clearly between the pristine original version of the
              code and any modifications.  They permit essentially the
              same freedoms as other free license, but impose certain
              requirements that make the integrity of the original
              code easy to verify.  These licenses have not caught on
              much beyond the specific programs they were made for,
              and will not be discussed in this chapter; they are
              mentioned here only for completeness' sake.</para> 
    </listitem>
  </varlistentry>
</variablelist>

<para>Most of these stipulations are not mutually exclusive, and some
licenses include several.  The common thread among them is that they
are about what demands the copyright holder places on the recipient,
in order for the recipient to have the right to use and/or
redistribute the code.  For example, some projects want their name and
reputation to be transmitted along with the code, and this is worth
imposing the extra burden of a credit or trademark clause; depending
on its onerousness, that burden may result in some users choosing a
package with a less demanding license.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="pfs-license-compatibility">
<title>The GPL and License Compatibility</title>

<para>By far the sharpest dividing line in licensing is that between
proprietary-incompatible and proprietary-compatible licenses, that is,
between the GNU GPL and everything else.  The GPL is a
<firstterm>copyleft</firstterm>: it uses the laws and terms of
traditional copyright in order to achieve an opposite result.  Because
the primary goal of the GPL's authors was the promotion of free
software, they deliberately crafted the license to make it impossible
to incorporate GPL'd code into proprietary programs.</para>

<para><remark>[...working here...]</remark></para>

<screen>
<para>The most popular type (1) license is the GNU General Public
License, or GPL (see <ulink
url="http://www.gnu.org/licenses/licenses.html#GPL"/>).  The GPL's
most controversial attribute is that any work which uses GPL'd code
must also be released under the GPL.  If all the free software in the
world were under the GPL, this would merely mean that GPL'd code could
be shared among free programs, but not used in proprietary
programs.</para>

<para><remark>(See <ulink url="http://freshmeat.net/stats/#license"/>.
It's rather amazing: the GPL leads with 68%, the next highest is 6%.
That's a much bigger footprint than I'd realized.)</remark></para>

<para>However, as there are other free licenses besides the GPL, the
GPL can sometimes prevent (or at least discourage) code-swapping even
between two free programs.  From the point of view of the Free
Software Foundation, these second-order consequences are desirable.
The GPL not only keeps your software free, but effectively makes your
software an agent in pushing <emphasis>other</emphasis> software to
enforce freedom as well.</para>

<para>Whether it's the right license for your project depends on your
goals.  If you want absolutely the widest possible use of the
software, and don't mind its being incorporated into proprietary
programs, the GPL is not a good choice.  If you mainly intend the
project ... </para>

<para><remark>The GPL cannot be categorized as innately business-friendly or
business-unfriendly.</remark></para>

<para><remark>Depending on your goals, and how you want your program to be
used, this may or may not be what you want.</remark></para>

<para><remark>Perhaps surprisingly, the GPL can make better business sense
than some other licenses, because it prevents competitors from using
the software in a proprietary value-add.</remark></para>

<para><remark>(Competitors often won't mind credit clauses.)</remark></para>

<para><remark>In general, using the GPL may put off some developers; whereas a
non-GPL free license will not put off any.  Nevertheless, I sometimes
use the GPL for personal programs</remark></para>

Take down of the GPL-is-not-free argument, quickly.
</screen>

<para> License interactions.  (Example: the temporary drifting apart
of PHP and MySQL due to PHP's fear that licensing differences would
prohibit them from distributing MySQL with their code.  We also have
some examples of this problem in Subversion/Apache/BerkeleyDB-land.)
</para>

</sect2>


<para><remark>Note: the material excised from <xref
linkend="pfs-license-quickstart"/> in r147 should be incorporated into this
chapter.  Andy had some comments on that material, see his marks on
pages 15, 16, 17 from back when the material lived in Chapter 2.
Also, point to Andrew St. Laurent's licensing book at <ulink
url="http://www.oreilly.com/catalog/osfreesoft/"/>.</remark></para>

<screen>
Links:

   Make Your Open Source Software GPL-Compatible.  Or Else.
       by David A. Wheeler
   http://www.dwheeler.com/essays/gpl-compatible.html

   Related read:
   http://daniel.haxx.se/transition.html

   http://www.opensource.org/licenses/
      Has everything for software!

   http://www.apache.org/licenses/
      Has a good link about GPL compatibility.

   http://www.gnu.org/licenses/licenses.html
      Has GNU license for software and docs.

   http://creativecommons.org/license/
      See list of licenses on the left.
      Note that not all of these are truly free.

   Humor... sort of:
   http://www.panix.com/~kingdon/licenses.html

</screen>


<para><remark>Have a subsection on why it's important not to create a
new license if you can avoid it.  Point to
<ulink
url="http://www.opensource.org/docs/policy/licenseproliferation.php"/>.
</remark></para>

<para><remark>(somewhere above, explode the bogus "open source but not
free" distinction)</remark></para>


</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-avoiding-license-wars">
<title>Avoiding Licensing Holy Wars</title>

<para> how? </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ownership">
<title>Ownership</title>

<para><remark>Briefly discuss the thorny issue of copyright
assignment.  It may be important, if the code ever needs to be
defended legally against a copyright infringement or other suit.
Copyright assignment can actually protect the contributors, by making
them not be targets.</remark></para>

<para><remark>(Talk about seniority and its relationship to having
started a project vs not having started it.  CVS/Cyclic is a good
example here.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-dual-licensing">
<title>Dual Licensing Schemes</title>

<para><remark>(Use the Zack Urlocker interview material
here.)</remark></para>

<para>These are mostly used for librarized code, not standalone
apps.  sleepycat.org is an example using a bsd-style license, sort
of.  Point out the tricky issues w/ contributed code.</para>

<para>See www.mysql.com / dev.mysql.com / www.innodb.com for an
example of a dual-licensing strategy where the free half of the
license is GPL.  How do they handle contributed code?  I don't
know.  Point out how the GPL is the usual choice for dual-licensing
strategies, because it natively enforces what the licensor wants to
enforce anyway.</para>

<para><remark>See
http://www.mysql.com/company/legal/licensing/</remark></para>

<para><remark>(It may be that most of what needs to be said about
dual-licensing will be said in Chapter 5.  Or if not, then Chapter 5
needs to refer to here for some of the business/legal implications.
Either way, make sure there are cross-references.)</remark></para>

<para><remark>(Re dual-licensing: Dual-licensing situations get
started for a number of reasons.  The code may have started out free,
and a permanent proprietary fork may simply not be in the cards (too
much negative publicity, too much momentum in the existing dev
community, whatever).  But also, let's not forget the "Where do you
want to spend your time?" factor.  Sometimes, people start these
companies because they just plain like doing open source development,
and don't want to give it up.  Discuss how all this affects ownership
both legal and psychological.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-patents">
<title>Patents</title>

<para><remark>Patents are a lightning rod issue.  If you collect them,
make it clear that it's for defensive purposes, and never enforce them
on open source projects.  (This is not only the right thing to do, but
it's also good open source public relations.)  Don't go off the deep
end ranting about the coming patent war (or put it in a footnote or an
appendix if you do), but point out that opposition to software patents
is almost universal among open source developers.  Talk about the
boomerang licenses.</remark></para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

