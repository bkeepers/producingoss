<chapter id="introduction">

<title>مقدمه</title>

<simplesect>

<para>اغلب پروژه‌های نرم‌افزارهای آزاد با شکست مواجهه می‌شوند.</para>

<para>معمولا تمایل داریم به پروژه‌های شکست خورده نپردازیم؛ تنها روی 
پروژه‌های موفق هستند که توجه ما را به خود جلب می کنند، درکل نرم‌افزارهای‌آزاد 
زیادی وجود دارند<footnote><para>SourceForge.net, one popular
hosting site, had 79,225 projects registered as of mid-April 2004.
This is nowhere near the total number of free software projects on the
Internet, of course; it's just the number that chose to use
SourceForge.</para></footnote> که حتی اگر درصد کوچکی از آن‌ها  موفق بوده باشند،
درنتیجه پروژه‌های زیادی برای بررسی وجود دارند. همچنین درمورد شکست‌ها 
چیزی نمی‌گوییم زیرا که شکست یک اتفاق نیست. اهمیتی ندارد که یک پروژه 
متوقف شده به حیات خود ادامه دهد، چراکه به سادگی افراد از دور می‌توانند 
اراده کنند و کار آن را متوقف کنند. زمان تغییرات نهایی پروژه حائز اهمیت
است، اما معمولآ نمی‌دانیم چه کسی در چه زمانی آن را تغییرداده و آخرین
تغییر متعلق به چه کسی است. تعریف روشنی از زمان پایان کار نرم‌افزار یا
تاریخ انقضای آن وجود ندارد. مثلآ زمانی‌که برای شش ماه غیرفعال باشد؟ یا
زمانی که کاربران اصلی بدون اینکه از مبنای گسترش تجاوز کند، ارتقا
نرم‌افزار را متوقف کند؟ را می‌توان تاریخ انقضای نرم‌افزار درنظر گرفت.
اگر توسعه‌دهندگان نرم‌افزار به دلیل اینکه متوجه‌شوند درحال نسخه‌برداری 
از کار دیگری هستند، کار خود را متوقف کنند چه می‌شود – و و اگر به پروژه
دیگری ملحق شوند، و تلاش‌های قبلی خود را در آن بکار گیرند چه می‌شود؟
آیا پروژه اول را به پایان می‌رسانند؟</para>

<para>به دلیل همچین پیچیدگی‌هایی، گفتن عدد دقیقی از نرخ شکست غیرممکن 
است. اما حکایت دو دهه در نرم‌افزارهای متن‌باز، یکسری طرح‌ریزی‌ها حول 
سایت‌های میزبان چند پروژه‌ای، و کمی کار در تمام نقاط گوگل برای نتایج 
مشابه نشان‌می‌دهد: اگر شما تعداد پروژه‌های باقی مانده را به حساب بیاورید 
در حالیکه تعداد پروژه ناکارآمد هم در آن‌ها است، نرخ به شدت بالا است،
شاید در حدود  90&ndash;95% است. این نرخ حتی بیشتر هم می شود وقتی 
شامل پروژه های زنده اما ناکارآمد هم شود: مثلآ پروژه‌هایی نارکارآمد 
هستند که کدهای اجرایی را تولید <emphasis>می کنند</emphasis> اما 
در موقعیت‌های مناسبی نیستند، یا با سرعت کافی پیشرفت نمی کنند و یا 
تا آنجا که می‌شود قابل اتکا نیستند. </para>

<para>این کتاب در رابطه با اجتناب از شکست است. و نه تنها بررسی 
می‌کند که چگونه کارها را درست انجام دهید، بلکه ‌ چگونه اشتباه انجام 
دهید، لذا می‌توانید سریعتر مسائل را تشخیص دهید و آن‌ها را تصحیح کنید. 
امیدواریم که بعد از خواندن این کتاب، فهرستی از تکنیک‌ها نه تنها برای
اجتناب از تله‌های توسعه متن‌بازها، بلکه برای سرو کار داشتن با رشد و 
نگهداری پروژه‌های موفق داشته باشید. این کتاب درمورد برنده‌شدن در 
رقابت‌هاست. براستی، بخش مهمی از اجرای پروژه‌های متن‌بازها همکاری با 
یکدیگر در پروژه‌های مرتبط است. دربلند مدت،  به طورکلی خوب بودن 
پروژه، به نرم‌افزارهای‌آزاد کمک می‌کند.</para>

<para>می‌توان گفت که پروژه‌های نرم‌افزاری‌آزاد به همان دلایلی شکست 
می خورند که پروژه‌های نرم‌افزاری‌اختصاصی با شکست مواجهه می‌شوند.
مطمئنآ، نرم‌افزارهای‌آزاد هیچ امتیاز انحصاری برای نیازهای غیرواقعی، 
ویژگی‌های مبهم، مدیریت منبع ضعیف، مراحل طراحی ناکافی، یا هرچیز 
دیگری که تاکنون در صنعت نرم‌افزار شناخته شده است، ندارد. مطالب 
زیادی دررابطه با این موضوع وجود دارد، و نمی‌خواهیم که آن‌ها را 
دوباره در این کتاب تکرار کنیم. درعوض، به تشریح مسائل خاص نرم‌افزارهای‌ 
آزاد می‌پردازیم. وقتی یک پروژه‌های‌آزاد به ته می نشیند،معمولا به این 
خاطر ‌است که توسعه دهندگان (یا مدیران) مسئله و مشکلات منحصربفرد 
توسعه نرم‌افزارهای متن‌باز را درک نکرده‌اند، حتی اگر برای حل مشکلات 
پروژه‌های منبع بسته کاملا آماده باشند.</para>

<para>یکی از مشکلات رایج در داشتن انتظارات غیرواقعی حول مزایای خود
پروژه‌های متن‌باز است. داشتن مجوزهای ‌باز یکباره سرازیری انبوهی 
از توسعه‌دهندگان  فعالی را که وقت خود را داوطلبانه به پروژه شما 
تخصیص ‌دهند را تضمین نمی‌کند و درنظر داشته باشید که متن‌باز بودن 
یک پروژه به مشکل خورده، به طور خودکار باعث سهولت در برطرف کردن 
مشکل آن نمی‌شود. 
در حقیقت برعکس است : بازکردن پروژه می‌تواند مجموعه ای کاملا جدید
از پیچیدگی‌ها و هزینه در کوتاه مدت نسبت به نگهداری <emphasis>بیشتر</emphasis> 
آن در اختیار خودتان به آن اضافه کند. بازکردن به معنی مرتب‌سازی 
کد به منظور اینکه توسط افراد ناشناس تکمیل شود، تنظیم اسناد توسعه، 
لیست ایمیل‌ها، و اغلب نوشتن اسناد برای اولین بار است. همه این‌ها 
کار می‌باشد و البته، توسعه‌دهندگان علاقه مند را درصورت‌وجود نشان‌می‌دهد،
و این سوال که آیا از حضور آن‌ها منفعتی برای پروژه بوجود آمده‌است 
یا نه را ایجاد می‌کند. یکی از توسعه‌دهندگان  Jamie Zawinski درمورد 
روزهای اولیه مشکل پروژه موزیلا گفت:</para>

    <blockquote>
      <para><emphasis>پروژه متن‌باز کار می‌کند، اما مطمئنآ این یک راه‌حل کلی نیست. 
	  احتیاطی که باید رعایت کرد این است، که یک پروژه درحال مرگ را درنظر نگیرید،
	  این یک فضای‌رویایی از "متن‌باز" را ایجاد می‌کند، و همه چیز به صورت رویایی کار می‌کند. 
	  مسئله این است که این کارها ساده نیست.</emphasis></para>

      <para>(از <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>مشکلات مرتبط دیگر مضایقه کردن از ارائه و بسته‌بندی است، 
متوجه‌باشید زمانی که پروژه به خوبی در حال اجرا است، بسته‌بندی و ارائه 
می‌تواند بعدآ انجام شود. ارائه و بسته‌بندی شامل محدوده وسیعی از وظایف،
و همه گرداننده‌ها با محوریت موضوع کاهش موانع ورود است. دعوت به پروژه 
با نوشتن واسط‌های غیرآغازین کاربران و سندبندی توسعه‌دهندگان، اسنادی 
که حاوی اطلاعاتی برای افراد تازه‌کار است، و اتوماسیون که تلفیقی از 
نرم‌افزار و نصب و راه‌اندازی آن است، ایجاد می‌شود. 
متاسفانه بسیاری از برنامه نویسان  این کار را به عنوان اهمیت ثانویه 
خود کد تلقی می‌کنند. چند دلیل برای این کار وجود دارد: ابتدا به دلیل 
اینکه مزایای آن حداقل برای کسی که آشنا به پروژه است قابل مشاهده است،
احساس می‌شود این کار یک کار پرمشغله است، و برعکس. بعد از آن، افرادی 
که کد را بسط می‌دهند حقیقتآ نیازی به بسته‌بندی یا پکیج کردن ندارند. 
در حال حاضر چگونگی نصب، مدیریت، و استفاده از نرم‌افزار را می‌دانند، 
چرا که خود آن‌ها نرم‌افزار را نوشته‌اند. دومآ، مهارتهایی که نیازمند 
ارائه و بسته‌بندی خوب است اغلب به طورکامل از نیازمندی‌های نوشتن کد 
متفاوت است.  افراد به تمرکز بر آنچه که بهتر است تمایل دارند، حتی 
اگر پروژه‌های بهتری در گذرزمان کوتاه در موردی که کمتر مناسب است 
بکارگیرد. د<xref linkend="getting-started"/> 2، ارائه و بسته‌بندی را
باجزییات، و اینکه چرا اولویت‌ها از آغاز پروژه مهم هستند را توضیح 
می‌دهیم</para>

<para>تصور غلطی وجود دارد که پروژه‌های متن‌باز نیازمند مدیریت کم 
پروژه یا بطور کل مدیریت نکردن پروژه هستند، و یا برعکس، عملیات 
مدیریتی مشابه استفاده شده در توسعات خانگی به همان اندازه برروی 
پروژه‌های متن‌باز نیز کار خواهدکرد. مدیریت در پروژه‌های متن‌باز همیشه
قابل مشاهده‌نیست، بلکه در پروژه‌های موفقیت‌آمیز، معمولآ در پشت‌صحنه‌ای 
از فرم‌ها و دیگر رخدادها اتفاق می‌افتد. آزمایش ذهنی کوچکی برای 
نشان‌دادن چرایی آن کافی‌است. پروژه‌های متن‌باز مجموعه تصادفی از 
برنامه نویسان را در برمی‌گیرد- درحال‌حاضر گونه‌های به شدت مستقلی 
وجود دارند- که به احتمال زیاد هرگز همدیگر را ملاقات نمی‌کنند، و 
ممکن است هریک از آن‌ها برای کار برروی پروژه اهداف شخصی مختلفی 
داشته‌باشد. آزمایش نظری ساده‌ای آنچه که در گروه‌ها 
<emphasis>بدون</emphasis> مدیریت رخ می‌دهد را تصورمی‌کند. با جلوگیری
نکردن از یکسری اتفاقات، می‌تواند پروژه فروپاشی شود و یا جریان 
آن به‌سرعت از هم جدا شود و یکسری رخدادهای ناخواسته رخ دهد.
مدیریت هرچند ممکن است بسیار فعال باشد، اما اغلب غیررسمی، زیرکانه،
با قدرت کم است. تنها چیزی که منجر به گسترش گروه می‌شود اعتقاد
به‌این است که می‌توانند کارها را به‌صورت گروهی در هماهنگی بیشتری 
انجام دهند. بنابراین هدف مدیریت  اغلب این است که تداوم این اعتقاد
را، با استانداردهایی برای ارتباطات، و با اطمینان از اینکه 
توسعه‌دهندگان سودمند بادلایل شخصی به حاشیه رانده نمی‌شوند، و به
طورکلی پروژه را محلی برای آنکه توسعه‌دهندگان بخواهند به آن برگردند
تبدیل می‌کند، تضمین می‌کند. تکنیک ویژه انجام این کار در بقیه 
کتاب گفته شده است.</para>

<para>سرانجام، یک گروه‌بندی عمومی از مسئله وجود دارد که به آن 
"شکست ناوبری فرهنگی" گفته می‌شود. بیست سال، یا حتی ده سال پیش،
برای صحبت دررابطه با فرهنگ جهانی نرم‌افزارهای‌آزاد زود بوده‌است،
اما هم اکنون زمان آن رسیده است که در این رابطه صحبت شود. 
یک فرهنگ شناخته شده به آرامی ظهور می‌کند، و درحالیکه قطعآ یکپارچه
نیست، دارای یک هسته اساسآ سازگار است. اغلب پروژه‌های متن‌باز 
موفق یکسری از ویژگی‌های این هسته یا همه ویژگی‌های آن را نشان‌می‌دهند.
ان‌ها انواع خاصی از رفتارها را بدست آورده‌اند، و باقی رفتارها 
را از دست‌دادند، آن‌ها فضایی ایجادکردند که آن‌ها را به یک همکاری 
طرح‌ریزی نشده تشویق می‌کند، گاهی اوقات برای هماهنگی مرکزی، 
آن‌ها مفهومی از گستاخی و ادب در رفتار را که می‌تواند از رفتارهایی
که در جاهای دیگر رایج است را تمییز دهد را دارا می‌باشند. 
مهمتر از همه، شرکای قدیمی ذاتآ این استانداردها را دارند، لذا 
می‌توانند یک اجماع نسبی حول نتیجه موردانتظار را به اشتراک بگذارند. 
پروژه‌های ناموفق معمولآ از این راه مهم هسته، به‌طور ناخواسته 
منحرف می‌شوند، و اغلب حول آنچه که به عنوان پیش‌فرض رفتار معقول است، 
اتفاق نظر ندارند. این به معنی این است که زمانی که یک مسئله 
بوجود می‌آید، شرایط به سرعت بدتر می‌شوند، همانطور شراکت فاقد سهام
تازه‌تاسیس شده فرهنگی برای اتکا به حل و فصل اختلافات یک عکس‌العمل 
غیرارادی دارند.</para>
<para>آخرین طبقه‌بندی، شکست ناوبری فرهنگی، شامل پدیده‌های جالبی است: 
نوع خاص سازمان‌ها به صورت ساختاری دارای سازگاری کمتری با بسط‌های 
متن‌باز نسبت به بقیه است. یکی از این بزرگترین شگفتی‌ها در اماده‌سازی 
دومین ویرایش این کتاب توجه به آن است، در کل، تجارب من نشان
دادند که به‌طور طبیعی دولت‌ها برای شرکت در پروژه‌های نرم‌افزاری‌آزاد
نسبت به شرکت‌های خصوصی، برای سود شرکت، و سازمان‌های غیرانتفاعی 
که در جایی بین این دو هستند، کمتر مناسب هستند. 
(<xref linkend="governments-and-open-source"/>). 
مشکلات قطعآ قابل برطرف شدن هستند، اما شایان ذکر است که زمانی که
یک سازمان وجود دارد، بخصوص سازمان سلسله مراتبی، ریسک‌گریز، و 
حساس به تبلیغ، و پروژه متن‌باز را شروع می‌کنند یا با آن همکاری می‌کنند،
یکسری تنظیمات معمولآ مورد نیاز هستند.
</para>

<para>این کتاب یک راهنمای عملی است، نه یک مطالعه انسان‌شناسانه 
یا تاریخی. بااین حال، دانش‌کاری منشا امروزه فرهنگی نرم‌افزارهای‌آزاد 
یک زیربنای ضروری برای هر توصیه عملی است. شخصی که درکی از فرهنگ
داشته باشد می‌تواند در دنیای متن‌باز یک پیمایش دور و گسترده، در 
مواجهه با بسیاری از تغییرات محلی در سفارشات و زبان‌های‌محلی داشته
باشد، درعین‌حال قادر است به راحتی و به طور موثر در همه‌جا شرکت 
داشته باشد. در مقابل، شخصی که درکی از فرهنگ نداشته باشد فرآیند 
سازمان‌دهی یا همکاری در پروژه‌ها برایش مشکل‌ و پر از نکات متحیرکننده
است. از آنجا که تعداد افراد توسعه‌دهنده نرم‌افزارهای رایگان باوجود 
فرازو نشیب‌هایی که وجود دارد در حال رشد هستند، افراد زیادی در 
گروه‌بندی‌های بعدی وجوددارند، این اتفاق به‌طور گسترده یک فرهنگ 
از مهاجران جدید است، و در برخی از زمان‌ها ادامه خواهدداشت. اگر
شما فکر می‌کنید می‌توانید یکی از آن‌ها باشید، بخش بعدی یک پس‌زمینه 
برای بحث‌هایی که بعدآ با آن مواجهه می‌شوید فراهم می‌آورد، که هردو 
در کتاب و اینترنت هستند.(از طرفی دیگر، اگر درحال همکاری با 
پروژه متن‌باز باشید، ممکن است هم‌اکنون از بسیاری از این تاریخچه‌ها
اطلاع داشته باشید، لذا به راحتی می‌توانید از بخش بعدی عبور کنید).</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>تاریخچه</title>

<para>نرم‌افزارهای اشتراک‌گذاری در پیرامون خود دنیای نرم‌افزار است. 
در روزهای اولیه کامپیوتر، تولیدکنندگان احساس کردند که مزیت‌های 
رقابتی به طورعمده باعث نوآوری در سخت‌افزار شده‌است، و بنابراین به 
نرم‌افزار به عنوان یک دارایی تجاری توجه‌نکردند. بسیاری از 
مصرف‌کنندگان ماشین‌های اولیه دانشمندان و تکنسین‌ها بودند، که قادر
به ساخت و بسط نرم‌افزارها با خود ماشین بودند. مصرف‌کنندگان گاهی 
تکه‌ها برنامه‌های قبلی خود را نه‌تنها به تولیدکنندگان‌دیگر، بلکه 
به صاحبان دیگر ماشین‌های مشابه توزیع‌می‌کنند. تولیدکنندگان اغلب 
این مسئله را تحمل می‌کنند و حتی به آن تشویق می‌کنند: در چشم آن‌ها،
بهبود نرم‌افزار، از هرمنبعی، تنها سخت‌افزار را برای دیگر مشتریان 
بالقوه جذاب می‌سازد.</para>

<para>گرچه اوایل این دوره از بسیاری جهات شبیه به فرهنگ نرم‌افزارهای 
آزاد امروزه است، اما از دو جهت تفاوت بسیار مهمی دارد: ابتدا، 
هنوز کمی راه تا استانداردسازی سخت‌افزار وجود داشت- که زمانی 
برای شکوفایی نوآوری در طراحی کامپیوتر بود، امادر تنوع معماری 
محاسبات هرچیزی با چیز دیگر در تناقض بود.  نرم‌افزار نوشته شده 
برای یک ماشین قاعدتآ در ماشین دیگری کار نمی‌کرد، و برنامه‌نویسان 
تمایل به بدست اوردن تخصص در یک معماری سخت‌افزار خاص یا در خانواده 
معماری را داشتند ( در حالیکه امروزه آن‌ها می‌خواهند که در زبان 
برنامه‌نویسی یا خانواده‌ای از زبان‌ها تجربه و تخصص بدست آورند، 
باامید به اینکه بتوانند تخصص خود را به هر سخت افزار رایانه انتقال 
دهند و در آن رایانه کار کند). به دلیل اینکه تخصص‌های افراد محدود 
به یک نوع کامپیوتر می‌شود، تجمع تخصص آن‌ها باعث می‌شود که کامپیوتر 
معماری خاص و جذاب‌تری برای آنها و همکاران آن‌ها داشته باشد.
بنابراین تولیدکنندگان تمایل دارند که کدهای ماشین را تولید کنند 
و دانش را تاجایی که می‌شود بسط دهند.</para>

<para>
ثانیآ، هیچ اینترنت گسترده‌ای وجود نداشت. گرچه محدودیت‌های قانونی 
کمتری برای اشتراک‌گذاری نسبت به امروز وجود داشت، محدودیت‌های فنی 
بیشتر بود: مفهوم گرفتن داده از مکانی به مکان دیگر ناخوشایند و 
دست‌وپاگیر بود، که درمورد آن صحبت‌شده‌است. یکسری شبکه کوچک، محلی وجود 
دارند که برای اشتراک‌گذاری اطلاعات در آزمایشگاه یا شرکت‌ها مناسب هستند.
اگر درخواست اشتراک‌گذاری جهانی وجود داشته باشد باید بریکسری 
از موانع غلبه کنیم. در بسیاری از موارد بر این موانع غلبه شده است. 
گاهی اوقات گروه‌های متفاوت به طورمستقلی باهم در تماس هستند، 
دیسک یا نوارهایی را ایمیل می‌کنند، و گاهی اوقات تولیدکنندگان به عنوان
مرکز اصلی پاکسازی برای پچ‌ها بکار گرفته می‌شوند. همچنین به 
توسعه‌دهندگان کامپیوترهای اولیه برای کار در دانشگاه‌ها، که در آن‌جا 
دانش‌ها به‌صورت مکتوب هستند، کمک می‌کند. اما واقعیت فیزیکی انتقال‌داده 
این‌است که همیشه برای اشتراک‌گذاری یک مقاومت ظاهری وجود دارد، و 
باتوجه‌به مقاومت ظاهری فاصله (واقعی یا سازمانی) که نرم‌افزار باید از 
آن عبور کند. گستردگی، اصطکاک به‌اشتراک‌گذاری، که امروز میشناسیم ممکن 
 نبود. </para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>ظهور نرم‌افزار اختصاصی و نرم‌افزارهای‌آزاد</title>

<para>
به عنوان یک صنعت بالغ، چندین تغییرات مرتبط به صورت همزمان اتفاق افتاد. 
یک تنوع رام‌نشده طراحی نرم‌افزار به تدریج راهی را به چند برنده، برای مثال 
برندگان از طریق تکنولوژی برتر، بازاریابی برتر، یا ترکیبی از این دو،  
نشان داد. در زمان‌های مشابه، و نه زمان‌های اتفاقی، بسط‌هایی که به آن‌ها زبان
برنامه‌نویسی سطح بالا گفته می‌شود به معنی آن بود که می‌توان برنامه را تنها
یکبار در یک زبان نوشت و آن را به طورخودکار در کامپیوترهای مختلف اجرا 
کرد. این‌کار در تولید سخت‌افزار پیامدهایی داشت: درحال حاضر مشتری می‌تواند 
نسبت به تلاش‌های مهم یک مهندس نرم‌افزار بدون قفل‌کردن نرم‌افزار آن‌ها در یک 
معماری کامپیوتراختصاصی متعهد شود. زمانیکه با محدودیت‌بندی تدریجی تفاوت 
عملکرد انواع کامپیوترها ترکیب شود، و کمتر به عنوان کار کارآمد تلقی 
می‌شدند، تولیدکنندگانی به این سخت‌افزارها به عنوان تنها دارایی که می‌تواند
سود را در آینده کاهش‌دهد نگاه می‌کردند. قدرت محاسبات‌اولیه تبدیل به یک تناسب
قابل‌تعویض شده‌است، در صورتیکه نرم‌افزار تبدیل به یک تمایزگر می‌شود. 
نرم‌افزارهای فروش، حداقل تغییرات آن را به عنوان بخش جدایی‌ناپذیر فروش 
سخت افزار، به عنوان شروع یک استراتژی خوب در نظر گرفته‌اند. 
</para>

<para>این به معنی اینست که تولیدکنندگان باید اجرای حق کپی کدها را با شدت 
بیشتری شروع کنند. اگر کاربران اشتراک‌گذاری و اصلاح کد را در میان خودشان 
به سادگی ادامه‌دهند، ممکن است به طورمستقل برخی از بهبودهای کنونی به 
عنوان "ارزش افزوده" توسط عرضه‌کننده کالا به فروش‌رسد. از همه بدتر، کدهای به 
اشتراک‌گذاشته شده می‌توانند بدست رقبا بی‌افتند. مسخره است که همه اینها 
درزمانی اتفاق می‌افتد که اینترنت مسبب آن است. لذا تنها زمانی که واقعآ 
اشتراک‌گذاری نرم‌افزار بدون مانع است نهایتآ این تبدیلات از لحاظ فنی 
امکان‌پذیر است، نهایتآ از نقطه نظر هرشرکتی، تغییر در تجارت کامپیوتر آن 
را از لحاظ اقتصادی نامطلوب ساخته‌است، عرضه‌کنندگان پایین نگه‌داشته‌شده‌اند، 
و دسترسی کاربران به کدهایی که ماشین آنها اجرا می‌کند را مسدودمی‌کنند، و 
یا بر توافق نامه عدم افشا اصرار ورزیده که اشتراک‌گذاری را غیرممکن می‌سازد.
</para>

<sect3 id="history-conscious-resistance">
<title>مقاومت آگاهانه</title>

<para>همانطور که جهانی از کدهای مبادله‌شده نامحدود به آرامی کم‌رنگ می‌شود،
یک ضدحمله در ذهن حداقل یک برنامه نویس تبلور می‌یابد. ریچارد استالمن که
در آزمایشگاه هوش‌مصنوعی  در موسسه تکنولوژی ماساچوست در سال 1970 و ا
وایل 1980، در طول زمانی که تبدیل به یک عصر طلایی و موقعیت طلایی برای 
اشتراک‌گذاری کد شده‌بود، کار می‌کرد.  آزمایشگاه هوش‌مصنوعی دارای یک 
"هکر اخلاقی" قوی است <footnote><para>Stallman uses the word "hacker" in the sense of
"someone who loves to program and enjoys being clever about it," not
the relatively new meaning of "someone who breaks into
computers."</para></footnote>، و افراد تنها انتظارندارند که تشویق‌شوند بلکه 
انتظار به اشتراک‌گذاری انچه که باعث بهبود سیستم می‌شود نیز دارند. 
همانطور که استالمن بعدها نوشت: 
</para>

    <blockquote>
      <para><emphasis>نمی‌گوییم که نرم‌افزار ما "نرم‌افزار آزاد" است، چرا 
	  که آن اصطلاح هنوز وجود ندارد، اما چیزی بود که هست.  هرگاه افرادی از
	  دانشگاه یا شرکت دیگری درگاهی از نرم‌افزار یا استفاده از نرم‌افزار 
	  را درخواست کرد، با کمال میل به آنها اجازه این کار را می‌دهیم. اگر 
	  فردی را دیدی که از یک برنامه ناآشنا و جالب استفاده می‌کند، می‌توانید 
	  کد منبع آن را از او بخواهید، لذا می‌توانید آن را بخوانید، تغییر 
	  دهید، و یا بخش‌هایی از آن را به برنامه جدید وارد کنید. 
      </emphasis></para>

      <para>(از <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>این جامعه بهشتی استالمن مدت کوتاهی پس از سال 1980 سقوط کرد، 
در آن زمان تغییراتی در بقیه صنعت اتفاق افتاد نهایتآ این تغییرات به 
آزمایشگاه هوش مصنوعی رسید. یک شرکت راه اندازی تعدادی برنامه‌نویس 
آزمایشگاه را برای کار برروی سیستم‌عامل‌هایی شبیه به آنچه که در 
آزمایشگاه کار می‌کند و درحال حاضر تنها تحت مجوزهای منحصربفرد هستند، 
استخدام کرد. درهمین‌زمان، آزمایشگاه هوش‌مصنوعی تجهیزات جدیدی که بایک 
سیستم عامل اختصاصی بوجود امده بود بدست آورد. 
</para>

<para>استالمن یک الگوی بزرگ در آنچه که رخ داده است را مشاهده کرد: </para>

    <blockquote>
      <para><emphasis>کامپیوترهای مدرن هر دوره، مانند VAX یا 68020، 
	  دارای سیستم‌عامل مخصوص به‌خود هستند، اما هیچکدام از آن سیستم‌عامل‌ها، 
	  نرم‌افزار آزاد نیستند: حتی برای گرفتن یک نسخه اجرایی باید یک توافق‌نامه
	  عدم‌اطلاع را امضا کنید.</emphasis> </para>

      <para><emphasis>این به معنی اینست که اولین گام در استفاده از 
	  کامپیوتر این است که مثلآ تعهددهید که به همسایه خود کمک نمی‌کنید. 
	  همکاری تجمعی ممنوع است.  قانونی که توسط صاحبان نرم‌افزارهای 
	  اختصاصی ایجاد شده است این است که:" اگر آن را با همسایه خود به
	  اشتراک بگذارید، شما یک دزد هستید، اگر می‌خواهید در آن تغییری 
	  ایجاد کنید ، این کار را از ما بخواهید".
      </emphasis> </para>

    </blockquote>

<para>
با کمی تغییر شخصیت، برای مقاومت دربرابر تغییر روند تصمیم‌گرفت. به جای 
کار در آزمایشگاه هوش‌مصنوعی که در حال‌حاضر نابود شده است، و یا در 
نظرگرفتن شغل برنامه نویسی در شرکت‌های جدید، که نتایج کار در انها 
ثبت‌می‌شود و محفوظ می‌ماند، از آزمایشگاه انصراف داد و پروژه GNU و 
نرم‌افزار آزاد را بنیان‌گذاری کرد(FSF). هدف GNU <footnote><para>It stands for "GNU's Not Unix", and the
"GNU" in that expansion stands for...the same
thing.</para></footnote> گسترش کامل 
سیستم‌عامل‌های کامپیوترهای آزاد و باز و بدنه نرم‌افزارهای کاربردی است، 
که در آن کاربران از هک‌کردن و یا به اشتراک‌گذاری تغییرات خود جلوگیری 
می‌کنند. او، دراصل، مجموعه‌ای از نوآوری‌هایی که در آزمایشگاه هوش مصنوعی 
نابود شده‌بود را بدست‌آورد، اما در مقیاس گسترده جهانی و بدون وجود 
آسیب‌پذیری که فرهنگ آزمایشگاه را مستعد ابتلا به فروپاشی کرده بود. 
</para>

<para>
علاوه بر کار برروی سیستم‌عامل جدید، استالمن یک گواهی‌نامه حق‌کپی که 
اصطلاحات ان اینکه یک کد به طور دایمی رایگان خواهد بود را تضمین می‌کند، 
طراحی کرد. مجوز عمومی GNU یک قطعه هوشمندانه از قانون است: 
این مجوز بیان‌می‌کند که کد می‌تواند بدون هیچ محدودیتی کپی و اصلاح شود، 
و هردو کپی و آثار مشتق شده از آن( برای مثال، نسخه اصلاح شده) می‌تواند 
تحت مجوز مشابه به عنوان اصل آن، بدون هیج محدودیت اضافی، منتشر شود. 
در تاثیرات آن، این قانون از قانون حق‌کپی برای بدست آوردن تاثیرات مثبت 
نسبت به حق‌کپی سنتی استفاده می‌کند: به‌جای محدودیت توزیع نرم‌افزار، 
<emphasis>هرکسی</emphasis>, را، حتی برنامه‌نویس را، از محدودکردن توزیع 
منع می‌کند. برای استالمن، بهترست که به سادگی کد خود را در یک دامنه 
عمومی قرار دهد. اگر در یک دامنه عمومی باشد،  هرگونه کپی خاص از آن کد 
می‌تواند در یک برنامه‌اختصاصی گنجانده شود ( همانطور گاهی اوقات اتفاق 
می‌افتد که یک کد تحت مجوز حق کپی متن باز باشد[5]) . درحالیکه همچین 
اختلالی منجر به کاهش در دسترس‌بودن کد اصلی نمی‌شود، به معنی این است که 
تلاش‌های استالمن می‌تواند در نرم‌افزارهای اختصاصی دشمن را بهره‌مند کند.
GPL  می‌تواند به عنوان یک حمایت تولید داخلی برای نرم‌افزارهای آزاد در 
نظرگرفته می‌شود،  به این دلیل که مانع این می‌شود که نرم‌افزارهای غیرآزاد 
از کد GPLed کاملآ بهره مند شود.  GPL و ارتباطات آن برای دیگر قوانین 
نرم‌افزارهای رایگان با جزییات بیشتر در <xref linkend="legal"/> به بحث گذاشته شده‌اند.
</para>

<para>
با کمک بسیاری از برنامه نویسان، یکسری از آنها ایدئولوژی استالمن را به 
اشتراک‌گذاشته اند و یکسری از آنها می‌خواهند یکسری از کدهای دردسترس آزاد 
را به سادگی ببینند، پروژه GNU  شروع به رهاسازی جایگزین رایگان برای 
بسیاری از مولفه‌های بحرانی سیستم عامل می‌کند. به دلیل استانداردهای گسترده 
کنونی در نرم‌افزار و سخت‌افزار کامپیوتر،  استفاده از جایگزینی GNU درغیر 
از سیستم‌های آزاد ممکن‌است، و بسیاری از افراد آن را انجام می‌دهند.
ویرایشگر متن GNU و کامپایلر C (GCC)  به طور خاصی، در بدست‌آوردن موارد 
بزرگ و ثابت نه تنها در زمینه ایدئولوژیک، بلکه به سادگی در 
پارامترهای فنی موفق‌هستند.  حدود سال 1990،  GNU اغلب سیستم‌عامل‌های 
رایگان را،  به جز برای هسته، قسمتی از ماشین که بوت می‌شود، و مسئول 
مدیریت حافظه، دیسک، و سایر منابع سیستم است، را تولید کردند.</para>

<para>
متاسفانه، پروژه GNU  طراحی هسته را انتخاب کرده که نسبت به آنچه که 
انتظار می‌رفت پیاده‌سازی آن سخت‌تر بود. متناسب با موانع زیربنای نرم‌افزار 
آزاد، اولین نسخه از سیستم‌عامل که کاملآ رایگان است را ایجاد کردند.
قسمت نهایی را Linus Torvalds تکمیل کرد، یک دانشجوی علوم‌کامپیوتر 
فنلاندی، با کمک داوطلبان در سراسر جهان،  هسته رایگان را با استفاده 
از طراحی محافظه کارانه تکمیل‌کرد. آن را لینوکس نامید، زمانی که با 
برنامه‌های GNU موجود و دیگر نرم‌افزارهای رایگان ترکیب شد (به خصوص سیستم 
ویندوزX)، نتیجه به طورکامل شبیه یک سیستم‌عامل آزاد بود. برای اولین بار؛
شما می‌توانید کامپیوتر خود را بوت کنید و بدون هیج نرم‌افزار اختصاصی کار 
خود را انجام دهید
<footnote><para>Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>

<para>
بسیاری از نرم‌افزارها در سیستم‌عامل‌های جدید با پروژه‌های GNU تولید نشده‌اند. 
درحقیقت، GNU  تنها یک گروه کاری برای تولید سیستم‌عامل آزاد نیست 
(برای مثال، کدها در نهایت تبدیل به NetBSD می‌شود و FreeBSD در حال حاضر 
در حال توسعه در این زمان بوده است). اهمیت زیربنای نرم‌افزارهای آزاد تنها 
در کد نوشته شده آنها نیست، بلکه در فصاحت سیاسی آن هم هست. صحبت 
پیرامون نرم‌افزارهای‌آزاد به‌عنوان یک عامل تسهیلات، اینکه نباید 
برنامه نویسان آگاهی سیاسی درمورد ان داشته باشند را مشکل ساخت. 
حتی انهایی که با FSF مخالف بوده‌اند، اگر حتی سهمی از موقعیت‌های مختلف 
داشته باشند، باید برروی این مسئله بحث کنند.  اثر FSF  به‌عنوان تبلیغات 
در پیوست کد خود به پیام‌ها، به منظور GPL و دیگر متن‌ها ذخیره می‌شود. 
همانطور که کدهای خود را به صورت گسترده گسترش می‌دهند، کدها به خوبی 
گسترده می‌شوند.
</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>مقاومت تصادفی</title>

<para>
چیزهای دیگری وجود دارد که در صحنه نرم‌افزارهای‌آزاد به تازگی ظهور می‌کند، 
با این حال، همه به وضوح ایدئولوژی پروژه GNU استالمن نیستند. یکی از 
مهمترین چیزها <firstterm>  توزیع نرم‌افزار برکلی </firstterm>
(<firstterm>BSD</firstterm>), اجرای دوباره تدریجی سیستم عامل یونیکس- 
که تا اواخر 1970 یک پروژه تحقیقاتی آزادانه اختصاصی AT&amp;T&mdash; بوده
است- با برنامه نویسان در دانشگاه کالیفرنیای برکلی بوده است، می‌باشد.
گروه BSD هیچ بیانیه آشکار سیاسی درمورد احتیاج برنامه‌نویسان به همدستی و 
اشتراک آنها بایکدیگر وجودندارد، اما انها این کار را با استعداد و شور و 
شوق انجام‌می‌دهند،  با هماهنگی تلاش‌های توسعه توزیع‌شده تاسیسات خط-فرمان 
یونیکس و کتابخانه کد، و درنهایت هسته خود سیستم عامل، ابتدآ توسط افراد 
داوطلب بازنویسی شد. پروژه BSD تبدیل به یک مثال ابتدایی از توسعه نرم‌افزار 
آزاد غیرایدئولوژیک شده است، و همچنین به عنوان یک زمینه مبادله برای بسیاری 
از توسعه دهندگان که می‌خواهند به فعالیت های باقی‌مانده در جهان متن باز 
ادامه دهند بکار گرفته شده است. 
</para>

<para>
دیگر امتحان سخت توسعه شراکتی 
<firstterm>سیستم ویندوز X</firstterm>
یک محیط آزاد، شبکه محاسباتی گرافیکی شفاف است، که در MIT در اواسط 1980 
در همکاری با فروشندگان سخت‌افزار که دارای علایق مشترک و قادر به ارائه به 
مشتریان خود با یک سیستم ویندوز است توسعه داده شده است. به دور از مخالفت 
با نرم‌افزار اختصاصی، مجوز X  عمدآ الحاقات اختصاصی در بالای هسته آزاد را 
اجازه داده است، هر عضو کنسرسیوم فرصتی برای افزایش توزیع Xپیش فرض را 
خواسته است، و در نتیجه مزایای رقابتی را بیش از سایر اعضا بدست‌آورده است. 
ویندوز X خودش یک نرم‌افزار آزاد است
<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote>

software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in 
<xref linkend="legal"/>
).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his

<emphasis>real</emphasis>

 goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
programmers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
