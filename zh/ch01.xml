<chapter id="初步">

<title>初步</title>

<simplesect>

<para>大部分自由软件计划是失败的</para>

<para>人们总不太喜欢听太多失败的故事，只有成功的计划才能吸引我们的注意力。 林林总总的自由
软件的数量是惊人的 <footnote><para>SourceForge.net, 一个著名的代码存
放站点。截至到2004年4月中旬，总共有79225个计划注册。 虽然这只是选择使用SourcdForge的
计划数量，但已经非常接近互联网上全部自由软件计划的数量了。</para></footnote> 尽管只有一
小部分的计划成功了，但这仍然只是那些广为认知的计划的一部分。有太多的计划由于不为人知，即使
失败了我们也不会听到。我们无法用一个确定的时间点来宣判一个计划的死刑，人们只是停止工作无所事事。
即使我们知道一个计划的最后一个变动是何时添加的，但是在当时那些做这些工作的人通常并不知道这会
是最后的晚餐。我们甚至无法明确地定义何时一个计划才算是断气了，是停止活动6个月之后？ 是用户数
量停止增长并且人数还少于开发者的数量时？ 当一个计划的开发者发现他们只是在重复别人的工作，而决定
放弃计划，如何看待？ 然后他们决定加入另一个计划，并且在计划中使用之前的一些工作成果，如何看待？
原先的计划死亡了，或者只是搬了一次家？ </para>

<para>因为是如此复杂，得出一个精确的失败率是不可能的。但是十多年以来流传于SourcdForge.net
或是用Google搜索的得到的开源运动传闻，都指向同一个结论：这个比率是非常高的，
也许能到达90~95%。如果把那些虽然存活但是内忧外患的计划算在内，这个比率还将更高。这些计划通常
仍然在生产代码，但已不再是开发者的乐园了，要么是进展缓慢要么是互相之间失去信任。 </para>

<para>这本书和避免失败有关。 它不仅演示了如何才是正确的做事方法，而且告诉你如何是错的，以便你
及时发现和纠正错误。 我希望在读过此书之后， 你不仅能对如何避免开发过程中的常见陷阱有丰富的技术储备，
而且对如何使一个成功的计划得到成长和维护有深入的了解。成功不是一场零和游戏，此书也不是教你如在在竞争
中获胜或是领先的。相反，运作一个开源计划的重要部分就是流畅地同计划中的其他人合作。在更高的层次上，每
一个成功的计划都为在世界范围内自由软件的成长作出一份贡献。 </para>

</simplesect>

<simplesect>

<para>如果说导致自由软件计划失败的原因同私有软件是相同类型的，那是不公平的。实际上，
在自由软件内不会有诸如建立在不切实际的需求上的垄断，含混不清的规范，可怜的代码管理，
设计阶段不足等等笼罩在传统软件工业上的幽灵。有关这些主题的书已经是汗牛充栋， 我不打
算重复。 我想做的是描述自由软件独有的问题。 当一个自由软件计划开始运转，最常见的问题是
开发者（或是经理）难以识别开源软件开发过程中的独特问题，尽管他们可能已经在那些闭源软件的
常见问题上摔打了多年。 </para>

<para>一个最常见的错误就急于从开源的形式本身获得好处，但这是不切实际的。 一纸开放
协议不会一下子让成群的活跃开发者自愿地把他们的时间交给你的计划， 开源一个原本问题多多的
计划也不能自动地修正这些问题。 实际上很可能相反， 相比不开源，开放一个计划短期内会带来一系列
全新的复杂问题和代价。 开放意味着要让完全陌生的人读懂代码，建立一个开发网站和邮件列表， 
通常还会第一次需要写文档。 这些事情的工作量是相当大的。 当然如果有开发者表示出了兴趣， 在
他们为你的计划带来好处之前回答他们的问题也是一个额外的负担。 如同开发者Jamie Zawinski
回忆Mozilla计划早期的混乱状况所说： </para>

    <blockquote>
      <para><emphasis>开源的确行， 但它绝不是万能药。  我对你的忠告是：你不能指望在一个垂死
                项目上洒一点“开源的精灵魔粉”就能让所有事情奇迹办地运转起来。 做软件是困难的。问题
                不会那么简单。 </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>一个相关的错误是对简报和打包的轻视，特别是当一个项目顺利运转时总认为这些以后再做
不迟。 简报和打包有很多的目的，所有的一切都是为了减低进入的门槛。使计划对那些后来者有吸引
力意味着编写用户和开发者文档， 建立为新来者提供信息的网站， 尽可能自动化软件的编译和安装工
作，以及其他。很不幸地很多程序员认为相比代码这些工作都是次要的。导致这种情况的原因有很多。
首先， 他们感觉这些都是无用功，因为对这些少部分的人来说，它的贡献是可见的，反之亦然。毕竟
这些编写代码的人并不真需要打包。他们知道如何安装，管理和使用这些软件，因为代码就是他们编写的。
其次，简报和打包所需要的技术通常和写代码完全不同。人们总是倾向于专注自己所擅长的，即使另外
的工作能对整个计划起到事半功倍的作用。
   <xref
linkend="getting-started"/> 将详细讨论简报和打包，并且解释从计划的一开始就确定这些工作
的优先地位的重要性。</ para>

<para>接下来的一个谬误是认为开源几乎或完全不需要项目管理，或者照搬商业开发的那一套管理模式也能
在开源中做得很好。管理在一个开源计划中总是不显眼的，但在成功的计划中，它通常在幕后起到推动的作用
。一个简单的心理试验就足够显示为什么。 想像一个开源计划有这样几个懒散的程序员──都有着的
坏名声──他们中的大部分人从来没有互相见过面，为这个计划工作只是出于他们的个人目的。心理试验能很
简单地预测如果<emphasis>没有</emphasis>管理，在这样一个团体中会发生什么。除非发生奇迹，否
则他们很快就会四分五裂。 事情不会如我们希望的那样自己运转。管理偶尔会相当活跃，但是大部分时候是日常
的，微妙的，低调的。只有一件事情能把开发者团结在一起，就是他们相信团队合作比单干能做得更多。因此管理
的最重要的目标是确保他们继续相信这一点，做得这点需要使他们坐下来交流，需要让能干的开发者不会因为个性
而受到排斥，总之要使计划成为开发者的留恋之地。我们将在后面讨论这些工作需要的具体技术。
 </para>

<para>最后还有一种类型的问题也许我们可以称之为“文化引导失败”。十年之前，甚至五年之前，谈论
自由软件运动的整体文化都为时过早，但现在不是了。一种清晰的文化正在慢慢浮现，虽然它不是一个整体──
如同很多的地域约束文化，它倾向于持在内部异议和社团活动──它有一个基本的坚固核心。大部分成功的开源计
划展示了这个核心中的部分特质。他们奖励符合这种文化的行为，惩罚相反的。他们创造了一种鼓励计划外的参与
的氛围，甚至不惜中心协调时间的代价。他们对粗野和礼貌的概念使得他们能大体地判断行为的价值。最重要的是，
长期的参与已经内化了这些标准，所以他们对产品的大体期望能不谋而合。虽非故意，不成功的计划通常是脱离了
这个核心的重要方面，无法就那些是合理的默认行为上达成一致。这意味着一旦问题出现，由于参与者缺乏通过弥
补分歧而对问题做出反馈的现成文化储备，形式会迅速恶化 。 </para>

<para>此书是一本实用的指南，而不是一篇人类学论文或是史书。然而了解今天的自由软件文化的发源对任何
一个实际的建议都是必要的基础。一个对理解这种文化的人能开源世界任意驰骋，即使遇到很多的各地风俗和
方言，仍然可以自信和有效地参与。相反，一个没能很好理解这种文化的人将会在组织或是参与一个计划的过程
中处处遇到困难和意外。由于自由软件的开发人员的数量仍然在飞速增长，其中有很多人属于后一种情况──这
多半是一种新近加入的文化，并且会持续一段时间。如果你自认为是其中的一员，下一节为你在以后将在本书或
是互联网上遇到的讨论提供了背景材料。（另一方面，如果你已经在开源中工作了一段时间，你也许早已了解了
这段历史，你可以选择跳过这一节。） </para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>历史</title>

<para>软件分享自有计算机的哪天存在了。 在计算机工业的早期，厂商认为竞争的优势在于对硬件的
创新，因此并不太认真把软件当成商业资产看待。 这些早期机器用户许多都是科学家或是技师， 他们有
能力自己修改和扩展随机附送的软件。 有时用户不仅将补丁反馈给厂商， 而且分发给相似机器的其他用
户。 厂商经常允许甚至鼓励这么做：在他们眼里无论是都从源代码着手， 对软件的改经都使得机器对其
他的潜在消费者更有吸引力。 </para>

<para>虽然今天的自由软件文化在很多方面都和早期相似， 但是有两点重要的不同。 首先，当时几乎
没有硬件的标准。那是一个计算机设计创新的黄金时代， 但是繁多的计算机架构也意味着所有的事情都无法
同其他的兼通。因此，为一台机器编写的软件一般无法在另一台上工作。 在一种特定的架构或是架构族上
程序员需要专门的知识（今天程序员更多的是学习一种编程语言或是语言类型的专门知识， 他们对他们
的专业知识能移植任何一台遇到的机器上非常自信）。 因为个人的专门知识总是针对一种特定类型的
计算机，这些专门知识的积累能 让计算机对他们以及同事变得越来越有趣。 这就是为什么厂商对让特定
机器的代码和知识尽可能广的得到传播感兴趣的原因。 </para>

<para>其次，当时没有互联网。虽然当时对分享的法律约束比今天少，但是技术约束更多。也就是说，
和说话相比，把数据从地方移到另一个地方是笨重不便的。在一些公司和实验室里员工之间可以通过
一些不错小型的局域网共享信息。但当一个人想同不限地点的所有人分享时，问题还是存在。克服这
些问题的途径有很多。有时独立的团体之间会互相联系，通过邮局寄送磁盘或是磁带。有时厂商扮演了
补丁的中心票据交换所的角色。厂商还会帮助在大学里的早期计算机开发者，那里的气氛是鼓励知识的
传播的。但是数据传输所必须的物理媒体意味着分享总会遇到阻力，和（实际上的或是组织上的）距离
成正比的阻力。 </para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title> 自由软件同私有软件的兴起</title>

<para>As the industry matured, several interrelated changes occurred
simultaneously.  The wild diversity of hardware designs gradually gave
way to a few clear winners&mdash;winners through superior technology,
superior marketing, or some combination of the two.  At the same time,
and not entirely coincidentally, the development of so-called "high
level" programming languages meant that one could write a program
once, in one language, and have it automatically translated
("compiled") to run on different kinds of computers.  The implications
of this were not lost on the hardware manufacturers: a customer could
now undertake a major software engineering effort without necessarily
locking themselves into one particular computer architecture.  When
this was combined with the gradual narrowing of performance
differences between various computers, as the less efficient designs
were weeded out, a manufacturer that treated its hardware as its only
asset could look forward to a future of declining profit margins.  Raw
computing power was becoming a fungible good, while software was
becoming the differentiator.  Selling software, or at least treating
it as an integral part of hardware sales, began to look like a good
strategy.</para>

<para>This meant that manufacturers had to start enforcing the
copyrights on their code more strictly.  If users simply continued to
share and modify code freely among themselves, they might
independently reimplement some of the improvements now being sold as
"added value" by the supplier.  Worse, shared code could get into the
hands of competitors.  The irony is that all this was happening around
the time the Internet was getting off the ground.  Just when truly
unobstructed software sharing was finally becoming technically
possible, changes in the computer business made it economically
undesirable, at least from the point of view of any single company.
The suppliers clamped down, either denying users access to the code
that ran their machines, or insisting on non-disclosure agreements
that made effective sharing impossible.</para>

<sect3 id="history-conscious-resistance">
<title>Conscious resistance</title>

<para>As the world of unrestricted code swapping slowly faded away, a
counterreaction crystallized in the mind of at least one programmer.
Richard Stallman worked in the Artificial Intelligence Lab at the
Massachusetts Institute of Technology in the 1970s and early '80s,
during what turned out to be a golden age and a golden location for
code sharing.  The AI Lab had a strong "hacker
ethic",<footnote><para>Stallman uses the word "hacker" in the sense of
"someone who loves to program and enjoys being clever about it," not
the relatively new meaning of "someone who breaks into
computers."</para></footnote> and people were not only encouraged but
expected to share whatever improvements they made to the system.  As
Stallman wrote later:</para>

    <blockquote>
      <para><emphasis>We did not call our software "free software",
      because that term did not yet exist; but that is what it was.
      Whenever people from another university or a company wanted to
      port and use a program, we gladly let them.  If you saw someone
      using an unfamiliar and interesting program, you could always
      ask to see the source code, so that you could read it, change
      it, or cannibalize parts of it to make a new program.
      </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>This Edenic community collapsed around Stallman shortly after
1980, when the changes that had been happening in the rest of the
industry finally caught up with the AI Lab.  A startup company hired
away many of the Lab's programmers to work on an operating system
similar to what they had been working on at the Lab, only now under an
exclusive license.  At the same time, the AI Lab acquired new
equipment that came with a proprietary operating system.</para>

<para>Stallman saw the larger pattern in what was happening:</para>

    <blockquote>
      <para><emphasis>The modern computers of the era, such as the VAX
      or the 68020, had their own operating systems, but none of them
      were free software: you had to sign a nondisclosure agreement
      even to get an executable copy.</emphasis> </para>

      <para><emphasis>This meant that the first step in using a
      computer was to promise not to help your neighbor. A cooperating
      community was forbidden. The rule made by the owners of
      proprietary software was, "If you share with your neighbor, you
      are a pirate. If you want any changes, beg us to make them."
      </emphasis> </para>

    </blockquote>

<para>By some quirk of personality, he decided to resist the trend.
Instead of continuing to work at the now-decimated AI Lab, or taking a
job writing code at one of the new companies, where the results of his
work would be kept locked in a box, he resigned from the Lab and
started the GNU Project and the Free Software Foundation (FSF).  The
goal of GNU<footnote><para>It stands for "GNU's Not Unix", and the
"GNU" in that expansion stands for...the same
thing.</para></footnote> was to develop a completely free and open
computer operating system and body of application software, in which
users would never be prevented from hacking or from sharing their
modifications.  He was, in essence, setting out to recreate what had
been destroyed at the AI Lab, but on a world-wide scale and without
the vulnerabilities that had made the AI Lab's culture susceptible to
disintegration.</para>

<para>In addition to working on the new operating system, Stallman
devised a copyright license whose terms guaranteed that his code would
be perpetually free.  The GNU General Public License (GPL) is a clever
piece of legal judo: it says that the code may be copied and modified
without restriction, and that both copies and derivative works (i.e.,
modified versions) must be distributed under the same license as the
original, with no additional restrictions.  In effect, it uses
copyright law to achieve an effect opposite to that of traditional
copyright: instead of limiting the software's distribution, it
prevents <emphasis>anyone</emphasis>, even the author, from limiting
it.  For Stallman, this was better than simply putting his code into
the public domain.  If it were in the public domain, any particular
copy of it could be incorporated into a proprietary program (as has
also been known to happen to code under permissive copyright
licenses).  While such incorporation wouldn't in any way diminish the
original code's continued availability, it would have meant that
Stallman's efforts could benefit the enemy&mdash;proprietary software.
The GPL can be thought of as a form of protectionism for free
software, because it prevents non-free software from taking full
advantage of GPLed code.  The GPL and its relationship to other free
software licenses are discussed in detail in
<xref linkend="legal"/>.</para>

<para>With the help of many programmers, some of whom shared
Stallman's ideology and some of whom simply wanted to see a lot of
free code available, the GNU Project began releasing free replacements
for many of the most critical components of an operating system.
Because of the now-widespread standardization in computer hardware and
software, it was possible to use the GNU replacements on otherwise
non-free systems, and many people did.  The GNU text editor (Emacs)
and C compiler (GCC) were particularly successful, gaining large and
loyal followings not on ideological grounds, but simply on their
technical merits.  By about 1990, GNU had produced most of a free
operating system, except for the kernel&mdash;the part that the
machine actually boots up, and that is responsible for managing memory,
disk, and other system resources.</para>

<para>Unfortunately, the GNU project had chosen a kernel design that
turned out to be harder to implement than expected.  The ensuing delay
prevented the Free Software Foundation from making the first release
of an entirely free operating system.  The final piece was put into
place instead by Linus Torvalds, a Finnish computer science student
who, with the help of volunteers around the world, had completed a
free kernel using a more conservative design.  He named it Linux, and
when it was combined with the existing GNU programs, the result was a
completely free operating system.  For the first time, you could boot
up your computer and do work without using any proprietary
software.<footnote><para>Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>

<para>Much of the software on this new operating system was not
produced by the GNU project.  In fact, GNU wasn't even the only group
working on producing a free operating system (for example, the code
that eventually became NetBSD and FreeBSD was already under
development by this time).  The importance of the Free Software
Foundation was not only in the code they wrote, but in their political
rhetoric.  By talking about free software as a cause instead of a
convenience, they made it difficult for
programmers <emphasis>not</emphasis> to have a political consciousness
about it.  Even those who disagreed with the FSF had to engage the
issue, if only to stake out a different position.  The FSF's
effectiveness as propagandists lay in tying their code to a message,
by means of the GPL and other texts.  As their code spread widely,
that message spread as well.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Accidental resistance</title>

<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
progammers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
