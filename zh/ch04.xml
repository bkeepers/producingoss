<chapter id="social-infrastructure">

<title>社会和政治的基础架构</title>

<simplesect>

<para>有关自由软件，人们经常问到的第一个问题是：“它能行吗？如何运作一个项目？谁来做决定？”我一直对关于知识界精化、合作精神、代码会说话此类的平淡回复不感兴趣，事实是这个问题很难回答，知识界精化、合作精神和运行代码只是其中的一部分，但它们对于解释日复一日的项目运转贡献不多，对于如何解决冲突什么也没说。
</para>

<para>本章尝试展示支持成功项目的共同结构，“成功”不仅仅指的技术质量方面，而且也包含了运行健康状况和生存性。运行健康状况是指项目将新代码和新开发者吸收进来，并对到来的bug负责的持续能力。生存性是项目独立于任何单独参与者或赞助商而存在的能力&mdash;考虑一下如果项目所有的创始成员离开后项目继续运作的可能性。技术成功不难实现，但是如果没有健壮的开发者基础和社会基础，一个项目就不能处理由初始的成功带来的成长，或者有魅力个体的离开。</para>

<para>获取此类成功有很多方法。有些涉及正式的管理结构，通过哪些争论被解决、新开发者被邀请加入（有时是离开）和计划的新特行等等。还有一些涉及不太正式的结构，但需要更有意识的自我克制，来产生一种人们可以依赖的正直氛围，作为<foreignphrase>事实上的</foreignphrase>管理形式。两种方式都产生相同的结果：一种由来已久的永恒感觉，由所有参与者都充分理解的习惯和程序作为支撑。这些特性在自我组织的系统中甚至比集中控制的系统更重要，每个人都知道一个坏苹果可以毁掉一桶，即使只是一会儿。</para>

<sect1 id="forkability">
<title>分叉能力（forkability）</title>

<para>能将开发者绑定在一个自由软件项目中的必需组成部分，能让他们在必要时愿意作出妥协，是代码的<firstterm>分叉能力</firstterm>：也就是任何人可以使用一个拷贝并使之成为一个竞争项目的能力，被称为<firstterm>分叉</firstterm>。怪异的是自由软件项目的中分叉<emphasis>可能性</emphasis>具备比实际的分叉更大的动力，很少会发生。因为分叉对于每个人都不好（<phrase output="printed"><xref linkend="managing-volunteers"/>的</phrase><xref linkend="forks"/>会解释详细原因），分叉的威胁越大，越期望的人就越会妥协去避免它。</para>

<para>分叉，更确切说是分叉的可能性，是自由软件项目中没有真正独裁者的原因。考虑到在一个特定开源项目中听到某人被称为“独裁者”或者“暴君”是多么常见，这看起来是一个令人惊讶的断言。但是此类暴政是特别的，与一般意义上的字面理解非常不同。想象一下一个国王的臣民可以在任何时候复制整个王国，并搬过去按自己满意的规则统治。这与国王无论如何做，臣民都无法离开的情况是多么的不同？</para>

<para>这也是为什么即使项目不是完全按照民主方式组织时，在实践中，重要决定还是通过民主方式产生。可复制性暗指了分叉能力；分叉能力暗指了意见一致。也可能是每个人都希望与一个领袖不同（最有名的例子是在Linux内核开发中的Linus Torvalds），但那是因为他们<emphasis>选择</emphasis>如此，以一种非愤世嫉俗和非邪恶的方式。暴君没有项目的定身法，所有开源许可证都有一个关键特性，也就是在代码如何变更或使用上没有给任何组织更多的权力，如果一个独裁者突然开始做了一个坏的决定，就从此不得安宁，紧接着就是造反和分叉。除非，当然，很多时候不会到这一步，因为独裁者会首先妥协。</para>

<para>但分叉能力放置了一个上限（一个人在一个项目中发挥多少力量的上限）并不意味着项目的管理方式没有太大的区别。你不会希望每个决定都是某人要考虑分叉后的结果，下面两个小节会仔细检查组织项目平稳做出大多数决定的不同方法，这两个都是极端理想的例子；许多项目会处于中间状态。</para>

</sect1>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title>慈善独裁者</title>

<para><firstterm>慈善独裁者</firstterm>这一称号确实名副其实：最终的决定权完全取决于一个人，因为其人格和经验的力量，他被认为可以明智的运用这个权力。</para>

<para>尽管“慈善独裁者”（<firstterm>BD</firstterm>）是这个角色的标准术语，但是更应该将其视为“社区认可的仲裁者”或“裁判者”。通常来说，慈善独裁者并不会作出所有的、甚至大多数的决定。一个人很难拥有在项目所有领域中都能做出正确决定的专业技能，毕竟，如果对于项目的方向没有任何影响，有价值的开发者也不会在此停留。因此，慈善独裁者通常不会非常的独裁。相反，他们会尽可能的让事情在讨论和实验中顺其自然。他们自己也会参与讨论，但是作为某领域的普通开发者，他们一般会尊重拥有更多专业知识的领域维护者。只有当明显无法得出结论时，而且大多数成员<emphasis>期望</emphasis>有人能够指导作出决定，并让开发继续时，他们才会采取坚定的立场并说“这是我们前进的路。”避免使用命令作决定是所有成功慈善独裁者共同的特征；也是他们设法保持这个角色的一个理由。</para>

<sect2 id="benevolent-dictator-qualifications">
<title>谁可以成为一个慈善独裁者？</title>

<para>成为一个BD需要许多特性的组合。首先，要对自己在项目中的影响有经过充分磨练的敏感性，这样可以保证自我约束。在一个讨论的早期阶段，一定不能过于确定的表达自己的意见和结论，以至于让别人觉得继续发生分歧毫无意思，人们应当能自由的放飞思想。BD也会不可避免的屡屡发表愚蠢的意见，所以这个角色也必须具备认可和承认自己作出错误决定的能力&mdash;尽管这是一个<emphasis>所有</emphasis>优秀开发者都应该具备的能力，但如果她要长期呆在一个项目，这一点特别重要。但区别是BD无法无视其信誉的长期损害，但资历尚浅的开发者不必如此谨慎，所以BD必须对批评或反对决定的语句小心措辞，对于词汇的分量十分敏感，不仅是技术上的，还包括心理的。</para>

<para>BD的技术技能<emphasis>不</emphasis>需要超越项目中的所有人，但她对于自己的代码工作必须足够精通，也必须能够理解所有考虑中的变更评论，但这还不够。BD的位置并不是通过恐怖的编码技巧获取或保持的，重要的<emphasis>是</emphasis>富于经验和全局的设计感觉&mdash;不必是根据要求生产好设计的能力，只需要有识别好设计的能力，无论什么来源。</para>

<para>慈善独裁者经常是项目的创建者，但这只是关系，而不是原因。这类特性让一个人能够成功的开始一个项目&mdash;技术能力、说服别人加入的能力等等&mdash;也都是BD所需要的。当然，创建者开始就自动有了相关的资历，在成为慈善独裁者的方法中，是所担心的阻力最小的。</para>

<para>请记住，潜在的分叉会以两种方式出现。一个BD可以和其他人一样分出一个项目，确实有些人已经这样做了，只要他们觉得要将项目带领到大多数项目成员不希望的方式中。因为可分叉的能力，无论慈善独裁者是否有项目主服务器的root权限（系统管理员特权），人们有时候会将服务器的控制能力当做对于一个项目的权力根源，但是机上这毫不相干。将某服务器商某人的提交密码添加或删除的能力只会影响存放在那个服务器上的项目拷贝，对于此权力长期滥用，无论她是BD或其他人，都会致使开发转到其他服务器上。</para>

</sect2>

<para>无论你的项目是否存在一个慈善独裁者，或能够在一个较弱的集中式系统下运行良好，都十分依赖于谁在承担这个角色。作为一个普遍的规则，通常对每个人来说谁是BD非常的明显，然后就会如此继续。但是如果没有明显的BD候选者，项目通常会使用分散的决策过程，这就是下个小节所描述的。</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>共识为基础的民主（Consensus-based Democracy）</title>

<para>随着项目的成长，通常会从慈善独裁模型转为更开放的民主系统。这不是必然由于某个BD的不满，而可以简单认为团队基础的管理更加“进化稳定”，借用一个生物学的隐喻。每当一个慈善独裁者引退，或尝试将决策责任更均匀的分配出去，这就是团队选定一个新的非独裁系统的好机会&mdash;也就是建立一个章程。团队可能错过了第一次机会、或者第二次，但是最终会这样做；一旦做了，这个决定就不太会反转过来。常识解释了原因：如果某个N位成员的团队给某个人特殊的权利，也就意味着有N&nbsp;-&nbsp;1位成员都愿意降低自己的个人影响。人们通常不愿意这样做。即使他们这样做了，结果的独裁同志仍然是有条件的：团队推举了BD，团队也可以罢免BD。因此，一个项目的领导权一旦从某个魅力个人转移为更正式的团队为基础的系统，就很少会走回头路。</para>

<para>这类系统的工作细节有很大的区别，但是有两个共同的元素：首先，团队大多数时候在达成共识的情况下工作。其次，在无法达成共识时有一个正式的投票机制。</para>

<para><firstterm>共识</firstterm>仅仅意味着每个人都能够接受的一种协议，它不是一种含混的状态：当有人提出某个共识已经达成，而且没有人提出反对意见，我们说一个团队对某个问题达成了共识。当然，提出共识的人应当详细说明共识的内容，如果不是显而易见的话，还要说明后续的动作。</para>

<para>一个项目的大多数对话是关于技术主题的，例如如何修正bug的正确方法、是否添加某个特性、以及文档接口有多严格等等。共识为基础的管理之所以可以工作正常，是因为它无缝的混入了技术讨论当中。在一个讨论的最后，通常是确定方向的协定，某些人会创建一个结论帖，作为所作决定的总结，同时也是隐含的共识提议。这也给了某人最后一次机会说“等等，我对此并不同意，我们应该再讨论一下。”</para>

<para>对于小的有争议的决议，这种共识的提议是隐含的。例如，当一个开发者本能的提交了一个bug修正，提交本身就是一个共识提议：“我料定我们都认可这个bug需要修正，而这就是我做的修正。”当然，开发者不会真的这么说；她只是提交修正，而项目中的其他人无需表明立场，因为沉默代表了认可。如果有人提交的结果<emphasis>没有</emphasis>导致共识，结果就是项目会象这个变更没有提交一样进行讨论，这个方法可以正常工作的原因请看下一个小节。</para>

<sect2 id="version-control-relaxation">
<title>版本控制意味着你可以放轻松</title>

<para>如果项目源代码已经纳入版本控制，这意味着大多数决定都可以轻易的取消。一个常见的情况是某人自以为提交了一个别人会喜欢的变更，但实际上并不如此。通常始于反对者对于遗漏某个预先讨论的道歉开始，当然，如果反对者在邮件列表归档中没有发现此类讨论的纪录，可以省略这一步。另一个方法是，变更是否已经提交没有理由影响我们讨论的基调。所有的变更都可以回退，至少在引入依赖的变更之前都没有问题（例如，在移除原来的变更后会破坏新代码）。版本控制系统让项目有能力收回错误或仓促判断的后果，这也释放了人们，使他们对做任何事情之前需要多少反馈可以相信自己的直觉。</para>

<para>这也意味着达成共识的过程不需要非常正式，许多项目跟着感觉处理。小的变更可以直接引入，而无需讨论，或者只需要通过最少的讨论来点头确认。对于重要的变更，特别是有可能造成大量代码不稳定的变更，人们应当需要等待一两天才能达成共识，不应当因为某人没有足够频繁的检查邮件，而将其排斥在对话之外。
</para>

<para>因此，当某人相信他知道应该做什么，他应当继续前进和完成它。这不仅仅适用于软件修正，也可以用于网站更新、文档变更和其他任何不会引起争议的事情。通常情况下，需要进行回退操作的情况很少，应当根据实际情况处理。当然，不应当鼓励人们刚愎自用。正在讨论和已经生效的决定会造成一定的心理差异，即使它在技术上是可逆的。人们一直认为动力等同于行动，相对于回退变更，人们更情愿在开始的时候阻止它。如果开发者滥用这个事实，过于快速的提交有争议的变更，不管怎样，人们可以也必然会抱怨，会将开发者置于更严格的标准，直到事情改进。</para>

</sect2>

<sect2 id="voting">
<title>如果无法达成共识，那么投票！</title>

<para>不可避免的，一些争论无法达成共识。当打破死锁的所有其他方法都已经失效，最后的方案就是投票。但是，在投票之前，一定要理清投票的选项。这里一切又重演了，技术讨论的正常过程会混合项目决策程序的偶然发现。此类需要投票的问题通常会很复杂，具有多方面的问题。在所有此类复杂讨论中，需要有一两个人扮演<firstterm>诚实的中间人</firstterm>的角色：定期发布各种论点的摘要，并保持对于分歧（和一致意见）核心论点的跟踪。这些摘要可以帮助每个人评估所做工作的进展，并提醒每个人还需要解决什么问题。如果需要投票，这些摘要也可以作为投票表格的原形。如果诚实中间人的任务完成的好，当时机成熟就可以发布投票的可信请求，而团队会希望使用以他们对于此问题的摘要为基础的投票表格。中间人自己也可以参与辩论；只要他们可以理解并公平的表示其他人的观点，不会因党派观点而影响以中立地态度总结辩论的状态，就没必要让他们脱离争论。</para>

<para>投票的实际内容通常不应当是有争议的，当投票时刻到来，分歧通常会归纳为一些包含可识别的标签和简短描述的关键问题。偶尔某个开发者会反对投票本身的形式，有时候他的考虑是有道理的，例如，一个选项被遗漏了或描述的不够精确。但是还有一些时候，开发者仅仅希望避开这个投票，因为他知道投票不会得到自己期望的结果。如何处理此类蓄意阻挠可以看<phrase output="printed"><xref linkend="communications"/>的</phrase><xref linkend="difficult-people"/>。</para>

<para>要记住指明投票系统，因为有许多不同的类型，人们很容易错误的假定使用某个步骤。大多数情况下的较好选择是<firstterm>同意投票（approval voting）</firstterm>，也就是每个投票者可以选择多个中意的选项。同意投票易于解释和统计，也不会像其他方法那样，它只有一轮投票。关于同意投票和其他投票系统的更多细节可以看<ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/>，但是要避免陷入使用何种投票系统的长期辩论（因为，当然你会发现你陷入了使用何种投票系统选择投票系统的辩论！）。同意投票是正确选择的一个原因是任何人都很难反对&mdash;作为投票系统它足够公平。</para>

<para>最后，公开引导投票。没有必要对公开讨论的事务进行秘密或匿名的投票，让每个参与者在项目邮件列表中发布自己的投票，这样每个观察者都可以自己检查结果，而且所有的内容都会记录到归档中。</para>

</sect2>

<sect2 id="when-to-vote">
<title>When To Vote</title>

<para>The hardest thing about voting is determining when to do it.  In
general, taking a vote should be very rare&mdash;a last resort for
when all other options have failed.  Don't think of voting as a great
way to resolve debates.  It isn't.  It ends discussion, and thereby
ends creative thinking about the problem.  As long as discussion
continues, there is the possibility that someone will come up with a
new solution everyone likes.  This happens surprisingly often: a
lively debate can produce a new way of thinking about the problem, and
lead to a proposal that eventually satisfies everyone.  Even when no
new proposal arises, it's still usually better to broker a compromise
than to hold a vote.  After a compromise, everyone is a little bit
unhappy, whereas after a vote, some people are unhappy while others
are happy.  From a political standpoint, the former sitation is
preferable: at least each person can feel he extracted a price for his
unhappiness.  He may be dissatisfied, but so is everyone else.</para>

<para>Voting's main advantage is that it finally settles a question so
everyone can move on.  But it settles it by a head count, instead of
by rational dialogue leading everyone to the same conclusion.  The
more experienced people are with open source projects, the less eager
I find them to be to settle questions by vote.  Instead they will try
to explore previously unconsidered solutions, or compromise more
severely than they'd originally planned.  Various techniques are
available to prevent a premature vote.  The most obvious is simply to
say "I don't think we're ready for a vote yet," and explain why not.
Another is to ask for an informal (non-binding) show of hands.  If the
response clearly tends toward one side or another, this will make some
people suddenly more willing to compromise, obviating the need for a
formal vote.  But the most effective way is simply to offer a new
solution, or a new viewpoint on an old suggestion, so that people
re-engage with the issues instead of merely repeating the same
arguments.</para>

<para>In certain rare cases, everyone may agree that all the
compromise solutions are worse than any of the non-compromise ones.
When that happens, voting is less objectionable, both because it is
more likely to lead to a superior solution and because people will not
be overly unhappy no matter how it turns out.  Even then, the vote
should not be rushed.  The discussion leading up to a vote is what
educates the electorate, so stopping that discussion early can lower
the quality of the result.</para>

<para>(Note that this advice to be reluctant to call votes does not
apply to the change-inclusion voting described in
<xref linkend="stabilizing-a-release"/><phrase output="printed">
in <xref linkend="development-cycle"/></phrase>.  There, voting
is more of a communications mechanism, a means of registering one's
involvement in the change review process so that everyone can tell how
much review a given change has received.)</para>

</sect2>

<sect2 id="electorate">
<title>Who Votes?</title>

<para>Having a voting system raises the question of electorate: who
gets to vote?  This has the potential to be a sensitive issue, because
it forces the project to officially recognize some people as being
more involved, or as having better judgement, than others.</para>

<para>The best solution is to simply take an existing distinction,
commit access, and attach voting privileges to it.  In projects that
offer both full and partial commit access, the question of whether
partial committers can vote largely depends on the process by which
partial commit access is granted.  If the project hands it out
liberally, for example as a way of maintaining many third-party
contributed tools in the repository, then it should be made clear that
partial commit access is really just about committing, not voting.
The reverse implication naturally holds as well: since full committers
<emphasis>will</emphasis> have voting privileges, they must be chosen
not only as programmers, but as members of the electorate.  If someone
shows disruptive or obstructionist tendencies on the mailing list, the
group should be very cautious about making him a committer, even if
the person is technically skilled.</para>

<para>The voting system itself should be used to choose new
committers, both full and partial.  But here is one of the rare
instances where secrecy is appropriate.  You can't have votes about
potential committers posted to a public mailing list, because the
candidate's feelings (and reputation) could be hurt.  Instead, the
usual way is that an existing committer posts to a private mailing
list consisting only of the other committers, proposing that someone
be granted commit access.  The other committers speak their minds
freely, knowing the discussion is private.  Often there will be no
disagreement, and therefore no vote necessary.  After waiting a few
days to make sure every committer has had a chance to respond, the
proposer mails the candidate and offers him commit access.  If there
is disagreement, discussion ensues as for any other question, possibly
resulting in a vote.  For this process to be open and frank, the mere
fact that the discussion is taking place at all should be secret.  If
the person under consideration knew it was going on, and then were
never offered commit access, he could conclude that he had lost
the vote, and would likely feel hurt.  Of course, if someone
explicitly asks for commit access, then there is no choice but to
consider the proposal and explicitly accept or reject him.  If the
latter, then it should be done as politely as possible, with a clear
explanation: "We liked your patches, but haven't seen enough of them
yet," or "We appreciate all your patches, but they required
considerable adjustments before they could be applied, so we don't
feel comfortable giving you commit access yet.  We hope that this will
change over time, though."  Remember, what you're saying could come as
a blow, depending on the person's level of confidence.  Try to see it
from their point of view as you write the mail.</para>

<para>Because adding a new committer is more consequential than most
other one-time decisions, some projects have special requirements for
the vote.  For example, they may require that the proposal receive at
least <emphasis>n</emphasis> positive votes and no negative votes, or
that a supermajority vote in favor.  The exact parameters are not
important; the main idea is to get the group to be careful about
adding new committers.  Similar, or even stricter, special requirements
can apply to votes to <emphasis>remove</emphasis> a committer, though
hopefully that will never be necessary.  See <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on the
non-voting aspects of adding and removing committers.</para>

</sect2>

<sect2 id="polls">
<title>Polls Versus Votes</title>

<para>For certain kinds of votes, it may be useful to expand the
electorate. For example, if the developers simply can't figure out
whether a given interface choice matches the way people actually use
the software, one solution is to ask to all the subscribers of the
project's mailing lists to vote.  These are really
<firstterm>polls</firstterm> rather than votes, but the developers may
choose to treat the result as binding.  As with any poll, be sure to
make it clear to the participants that there's a write-in option: if
someone thinks of a better option not offered in the poll questions,
her response may turn out to be the most important result of the
poll.</para>

</sect2>

<sect2 id="veto">
<title>Vetoes</title>

<para>Some projects allow a special kind of vote known as a
<firstterm>veto</firstterm>.  A veto is a way for a developer to put a
halt to a hasty or ill-considered change, at least long enough for
everyone to discuss it more.  Think of a veto as somewhere between a
very strong objection and a filibuster.  Its exact meaning varies from
one project to another.  Some projects make it very difficult to
override a veto; others allow them to be overridden by regular
majority vote, perhaps after an enforced delay for more discussion.
Any veto should be accompanied by a thorough explanation; a veto
without such an explanation should be considered invalid on
arrival.</para>

<para>With vetoes comes the problem of veto abuse.  Sometimes
developers are too eager to raise the stakes by casting a veto, when
really all that was called for was more discussion.  You can prevent
veto abuse by being very reluctant to use vetoes yourself, and by
gently calling it out when someone else uses her veto too often.  If
necessary, you can also remind the group that vetoes are binding for
only as long as the group agrees they are&mdash;after all, if a
clear majority of developers wants X, then X is going to happen one
way or another.  Either the vetoing developer will back down, or the
group will decide to weaken the meaning of a veto.</para>

<para>You may see people write "-1" to express a veto.  This usage
comes from the Apache Software Foundation, which has a highly
structured voting and veto process, described at <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The Apache
standards have spread to other projects, and you will see their
conventions used to varying degrees in a lot of places in the open
source world.  Technically, "-1" does not always indicate a formal
veto even according to the Apache standards, but informally it is
usually taken to mean a veto, or at least a very strong
objection.</para>

<para>Like votes, vetoes can apply retroactively.  It's not okay to
object to a veto on the grounds that the change in question has
already been committed, or the action taken (unless it's something
irrevocable, like putting out a press release).  On the other hand, a
veto that arrives weeks or months late isn't likely to be taken very
seriously, nor should it be.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>Writing It All Down</title>

<para>At some point, the number of conventions and agreements floating
around in your project may become so great that you need to record it
somewhere.  In order to give such a document legitimacy, make it clear
that it is based on mailing list discussions and on agreements already
in effect.  As you compose it, refer to the relevant threads in the
mailing list archives, and whenever there's a point you're not sure
about, ask again.  The document should not contain any surprises: it
is not the source of the agreements, it is merely a description of
them.  Of course, if it is successful, people will start citing it as
a source of authority in itself, but that just means it reflects the
overall will of the group accurately.</para>

<para>This is the document alluded to in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturally, when the
project is very young, you will have to lay down guidelines without
the benefit of a long project history to draw on.  But as the
development community matures, you can adjust the language to reflect
the way things actually turn out.</para>

<para>Don't try to be comprehensive.  No document can capture
everything people need to know about participating in a project.  Many
of the conventions a project evolves remain forever unspoken, never
mentioned explicitly, yet adhered to by all.  Other things are simply
too obvious to be mentioned, and would only distract from important
but non-obvious material.  For example, there's no point writing
guidelines like "Be polite and respectful to others on the mailing
lists, and don't start flame wars," or "Write clean, readable bug-free
code."  Of course these things are desirable, but since there's no
conceivable universe in which they might <emphasis>not</emphasis> be
desirable, they are not worth mentioning.  If people are being rude on
the mailing list, or writing buggy code, they're not going to stop
just because the project guidelines said to.  Such situations need to
be dealt with as they arise, not by blanket admonitions to be good.
On the other hand, if the project has specific guidelines about
<emphasis>how</emphasis> to write good code, such as rules about
documenting every API in a certain format, then those guidelines
should be written down as completely as possible.</para>

<para>A good way to determine what to include is to base the document
on the questions that newcomers ask most often, and on the complaints
experienced developers make most often.  This doesn't necessarily mean
it should turn into a FAQ sheet&mdash;it probably needs a more
coherent narrative structure than FAQs can offer.  But it should
follow the same reality-based principle of addressing the issues that
actually arise, rather than those you anticipate might arise.</para>

<para>If the project is a benevolent dictatorship, or has officers
endowed with special powers (president, chair, whatever), then the
document is also a good opportunity to codify succession procedures.
Sometimes this can be as simple as naming specific people as
replacements in case the BD suddenly leaves the project for any
reason.  Generally, if there is a BD, only the BD can get away with
naming a successor.  If there are elected officers, then the
nomination and election procedure that was used to choose them in the
first place should be described in the document.  If there was no
procedure originally, then get consensus on a procedure on the mailing
lists <emphasis>before</emphasis> writing about it.  People can
sometimes be touchy about hierarchical structures, so the subject
needs to be approached with sensitivity.</para>

<para>Perhaps the most important thing is to make it clear that the
rules can be reconsidered.  If the conventions described in the
document start to hamper the project, remind everyone that it is
supposed to be a living reflection of the group's intentions, not a
source of frustration and blockage.  If someone makes a habit of
inappropriately asking for rules to be reconsidered every time the
rules get in her way, you don't always need to debate it with
her&mdash;sometimes silence is the best tactic.  If other people
agree with the complaints, they'll chime in, and it will be obvious
that something needs to change.  If no one else agrees, then the
person won't get much response, and the rules will stay as they
are.</para>

<para>Two good examples of project guidelines are the Subversion
<filename>hacking.html</filename> file, at <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, and the Apache
Software Foundation governance documents, at <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> and <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The ASF is
really a collection of software projects, legally organized as a
nonprofit corporation, so its documents tend to describe governance
procedures more than development conventions.  They're still worth
reading, though, because they represent the accumulated experience of
a lot of open source projects.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
