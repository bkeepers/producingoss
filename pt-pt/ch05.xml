<chapter id="money">

<title>Dinheiro</title>

<simplesect>
<para>Este capítulo examina como trazer fundos para o ambiente do 
software livre. Destina-se não só aos programadores quer são pagos
para trabalhar em projectos de software livre, mas também os seus
gestores, que necessitam de compreender as dinâmicas sociais do
ambiente de desenvolvimento. Nas secções seguintes, o destinatário 
("você") presume-se ser ou um programador pago ou alguém que gere
tais programadores. O conselho será frequentemente o mesmo para
ambos; quando não, a audiência destinatária será tornada clara pelo
contexto.</para>

<para>O custeio por parte de empresas de desenvolvimento de software
livre não é um fenómeno novo. Muito do desenvolvimento foi sempre
informalmente subsidiado. Quando um administrador de sistemas escreve
uma ferramenta de análise de rede para o ajudar nas suas tarefas e que
depois a coloca em linha e obtém correcções de erros e contribuições
com novas características de outros administradores de sistemas, o
que sucedeu foi ter-se formado um consórcio não formal. Os fundos do
consórcio provêm dos salários dos administradores de sistemas e do
seu espaço de escritório e largura de banda doados, mesmo que 
ignorado, pelas organizações onde trabalham. Estas organizações 
tiram benefícios do investimento, claro, embora possam não estar
institucionalmente conscientes de tal facto.</para>

<para>A diferença actualmente é que muitos destes esforços estão a ser
formalizados. As empresas ficaram conscientes das vantagens do software
open source, e começaram-se a envolver elas próprias mais directamente
no seu desenvolvimento. Os programadores também começaram a ter 
expectativas que os projectos importantes atraíssem doações senão mesmo
apoios de longo prazo. Enquanto a presença do dinheiro não alterou a 
dinâmica fundamental do desenvolvimento do software livre, mudou 
grandemente a escala de como as coisas sucedem, tanto em termos de 
número de programadores como de número de horas por programador. Também
teve efeitos em como os projectos são organizados e como é que as 
várias entidades envolvidas interagem. Os assuntos não são de mera
atribuição de despesas ou como é que o retorno do investimento é medido.
Trata-se também de gestão e processo: como é que estruturas hierárquicas
de comando das empresas e de comunidades de voluntários 
semi-descentralizadas de projectos de software livre trabalham 
produtivamente umas com as outras? Será que conseguem acordar sobre o
que significa "produtividade"?</para>

<para>O suporte financeiro, em geral, é bem vindo pelas comunidades
de open source. Pode reduzir a vulnerabilidade do projecto às Forças
do Caos, que deitam abaixo muitos projectos mesmo antes de eles 
começarem, e assim pode tornar as pessoas mais dispostas a dar uma
oportunidade ao software &mdash; As pessoas sentem estar a investir
o seu tempo em algo que ainda andará por cá nos próximos seis meses.
Quando, digamos, a IBM suporta um projecto de open source, as pessoas
presumem que o projecto não será deixado falhar e ficam com mais
disposição para envidarem esforços para tornar tal um profecia
auto-induzida.</para>

<para>Contudo, o suporte financeiro trás uma percepção de controlo.
Se não for cuidadosamente tratado, o dinheiro pode dividir um projecto
em programadores do cerne e programadores externos. Se os voluntários
não pagos ficam a sentir que as decisões de concepção ou as introduções
de características estão simplesmente disponíveis para quem paga mais,
saiam do projecto para se integrarem num que se assemelhe mais a uma
meritocracia e menos como trabalho subordinado para proveito de outrem.
Podem nunca reclamar abertamente nas listas de distribuição de correio.
Em vez disso, haverá simplesmente menos e menos ruído de fontes externas,
à medida que os voluntários gradualmente deixarem de tentar ser levados
a sério. O ruído da actividade de pequena escala irá continuar, na forma
de relatórios de erros e correcções pequenas ocasionais. Mas não haverá
contribuições significativas de código ou participação externa em
discussões sobre concepção. As pessoas sentem o que se espera delas,
e vivem (ou não) de acordo com essas expectativas.</para>

<para>Embora o dinheiro necessite ser usado com cuidado, isso não significa
que não possa comprar influência. Claro que pode. O truque é que não pode
comprar influência de modo directo. Numa transacção comercial directa, 
troca dinheiro por aquilo que deseja. Se necessita de ver introduzir uma
característica, assina um contrato, paga-o e isso é feito. Num projecto
open source, tal não é assim tão simples. Pode assinar um contrato com
alguns programadores, mas eles estarão a enganar-se a si próprios &mdash; 
e a si &mdash; se lhe garantirem que o trabalho que pagou será aceite
pela comunidade de desenvolvimento simplesmente porque pagou por ele. O
trabalho só poderá ser aceite se tiver mérito próprio e se se enquadrar
na visão da comunidade para o software. Poderá ter algo a dizer nessa
visão, mas não vai ser a única voz.</para>

<para>Assim o dinheiro não pode comprar influência mas pode comprar coisas
que <emphasis>conduzam à</emphasis> influência. A coisa mais óbvia são
programadores. Se os bons programadores forem empregues e se se mantiverem
durante tempo suficiente, então eles podem influenciar o projecto da mesma
forma que qualquer outro membro. Eles irão ter um voto, ou se forem
vários um bloco de votação. Se forem respeitados no projecto, irão
influenciar para além dos seus próprios votos. Não é necessário aos
programadores mascararem os seus motivos. Independentemente de qualquer 
outra coisa, todos os que desejem que uma mudança seja feita ao software
desejam-na por alguma razão. As razões da sua empresa não são menos 
legítimas do que as razões de qualquer outra pessoa. Só que o peso
dado aos objectivos da sua empresa serão determinados pelo estatuto
dos seus representantes no projecto e não pelo tamanho, orçamento ou plano
de negócios da empresa.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-involvement">
<title>Tipos de Envolvimento</title>

<para>Há muitas razões diferentes pelas quais os projectos open  
source são financiados. Os itens nesta lista não são mutuamente 
exclusivos; frequentemente o financiamento do projecto irá resultar
de várias ou mesmo todas estas motivações:</para>

<variablelist>

   <varlistentry><term>Partilhar o peso</term>
     <listitem>
     <para>Organizações separadas com necessidades de software relacionadas
	 por vezes duplicam esforços, ou escrevendo código similar
	 de modo redundante dentro de portas ou adquirindo produtos
	 similares ou a fornecedores de código proprietário. Quando
	 percebem o que está a suceder as organizações podem consorciar-se
	 juntando recursos ou criando (ou juntando-se a) um projecto
	 open source adequado às suas necessidades. As vantagens são
     óbvias: os custos de desenvolvimento são repartidos, mas as 
     vantagens são totais são para todos. Embora este cenário possa 
     parecem intuitivo para organizações sem fins lucrativos, pode  
     fazer sentido estratégico mesmo para concorrentes comerciais.</para>
     <para>Exemplos: <ulink url="http://www.openadapter.org/"/>,
     <ulink url="http://www.koha.org/"/></para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Ampliando serviços</term>
     <listitem>
     <para>Quando uma companhia vende serviços dos quais dependem, ou
	 são tornados mais atraentes por, determinados programas de open
	 source, é do interesse natural da companhia assegurar que esses
	 programas sejam mantidos activamente.</para>
     <para>Exemplo: <ulink
     url="http://www.collab.net/">CollabNet</ulink> O apoio da Collabnet
	 ao <ulink url="http://subversion.tigris.org/"/> (aviso à navegação:
	 trata-se do meu emprego, mas também é um exemplo perfeito deste
	 modelo).</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Suporte de vendas de hardware</term>
     <listitem>
     <para>O valor dos computadores e dos componentes de computadores 
	 está directamente relacionado com a quantidade de software neles
	 disponível. Fornecedores de hardware &mdash; não só fornecedores
	 de máquinas completas, mas também fabricantes de dispositivos
	 periféricos e microchips &mdash; perceberam que ter software livre
	 de elevado calibre para correr no seu hardware é importante para
	 os seus clientes.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Minar um concorrente</term>
     <listitem>
     <para>Por vezes as companhias suportam um projecto open source de
	 modo a minar o produto de um concorrente, o qual pode ou não ser
	 ele próprio open source. Comer uma parte da quota de mercado de
	 um concorrente não é normalmente a única razão para se envolver num
	 projecto open source, mas pode ser um factor.</para>
     <para>Exemplo: <ulink url="http://www.openoffice.org/"/> (Não, não
	 é esta a única razão pela qual existe o OpenOffice, mas o software
	 é parcialmente uma resposta ao Microsoft Office).</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Marketing</term>
     <listitem>
     <para>Ter a sua empresa associada a uma aplicação popular de
	 open source pode ser simplesmente uma boa gestão de marca.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Duplo licenciamento</term>
     <listitem>
     <para>O <firstterm>duplo licenciamento</firstterm> é a prática
	       de um software ser oferecido sob uma licença proprietária
		   tradicional a clientes que a desejem revender como parte
		   de uma aplicação proprietária própria, e simultaneamente
		   sob uma licença livre para os que a desejem usar sob licença
		   open source (ver
           <xref
           linkend="dual-licensing"/><phrase output="printed"> em
           <xref linkend="legal"/></phrase>).
           Se a comunidade de desenvolvimento open source é activa
		   o software obtém as vantagens de uma área alargada de 
		   depuração e desenvolvimento e contudo a empresa continua
		   a obter um fluxo de royalty para suportar alguns dos
		   programadores a tempo inteiro.</para> 
     <para>Dois exemplos bem conhecidos são <ulink
           url="http://www.mysql.com/">MySQL</ulink>, produtores da
		   do software de gestão de base de dados do mesmo nome e
		   <ulink
           url="http://www.sleepycat.com/">Sleepycat</ulink>, a qual 
		   oferece distribuições e suporte para a gestão de base de 
		   dados Berkeley Database. Não se trata de coincidência que
		   sejam ambas empresas de sistemas de gestão de bases de dados.
		   O software de gestão de base de dados tende a ser integrado
		   em aplicações em vez de ser vendido directamente aos 
		   utilizadores, sendo pois um caso bem adequado ao modelo
		   do duplo licenciamento.</para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Doações</term>
     <listitem>
     <para>Um projecto que seja usado de modo alargado pode por vezes
	       obter contribuições significativas, quer de indivíduos quer
		   de organizações, tendo só um botão para doações em linha, ou
		   vendendo merchandise com a marca tal como chávenas de café,
		   camisolas, tapetes para rato, etc. Uma palavra de cuidado: 
		   se o seu projecto aceitar doações, faça o planeamento da 
		   utilização do dinheiro <emphasis>antes</emphasis> de ele entrar
		   e apresente o orçamento no sítio web do projecto. As discussões
		   sobre como atribuir dinheiro tendem a ser mais fáceis quando
		   tidas antes de haver dinheiro para gastar; de qualquer modo,
		   se houver desentendimentos significativos, é melhor saber
		   enquanto tais desentendimentos sejam académicos.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para>Um modelo de negócios do financiador não é o único factor de
como ele se relaciona com a comunidade open source. A relação
histórica entre os dois também tem importância: a empresa começou
o projecto  ou juntou-se já com esforço de desenvolvimento existente.
Em ambos os casos o financiador terá que ganhar credibilidade, mas,
sem ser surpreendente há algo mais a fazer no último caso para a 
ganhar. A organização necessita ter objectivos claros em relação
ao projecto. Se a empresa estiver a tentar manter a liderança, ou 
simplesmente a tentar ser uma voz na comunidade, para guiar mas não
necessariamente para governar a direcção do projecto? Ou deseja
só tem um par de submetedores por aí, de modo a serem capazes de
corrigir erros de clientes e obter alterações na distribuição
pública sem complicações?</para>

<para>Lembre-se destas questões à medida que for lendo as directrizes
que se seguem. Estas destinam-se a ser aplicadas em qualquer envolvimento
num projecto de software livre, mas cada projecto é um ambiente humano
e assim não haverá dois exactamente iguais. Até certo ponto, 
terá sempre que tocar de ouvido, mas seguindo estes princípios 
aumentará a probabilidade de as coisas decorrerem como deseja.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<title>Empregue a Longo Prazo</title>

<para>Se gere programadores num projecto de open source, mantenha-os
tempo suficiente de modo a que adquiram as capacidades técnicas e
políticas &mdash; pelo menos dois anos no mínimo. Claro que nenhum 
projecto, open source ou não, tira partido de frequente troca de
programadores. A necessidade de um recém chegado aprender os detalhes
de cada vez será  um travão em qualquer ambiente. Mas a penalidade é
ainda maior nos projectos open source, porque programadores que saiam
levam com eles não só o seu conhecimento do código mas também o seu
estatuto na comunidade e as relações humanas que aí tenham feito.</para>

<para>A credibilidade que um programador tenha acumulado não é transferida.
Para escolher o exemplo mais óbvio, um programador não pode herdar o 
acesso de submissão de alguém que tenha saído (ver
<xref linkend="money-vs-love"/> adiante neste capítulo), assim se
o novo programador não tiver já acesso de submissão, terá que 
submeter remendos até o ter. Mas o acesso de submissão é só a 
manifestação mais mensurável dessa perca de influência. Um programador
de longo prazo também conhece todos os argumentos antigos que foram
apresentados e reapresentados nas listas de discussão. Um programador
novo, não tendo memória dessas conversações pode tentar levantar
esses tópicos novamente, levando a uma perca de credibilidade da sua
organização; os outros podem imaginar que "eles não se lembram de nada?"
Um novo programador não terá sentido político das personalidades do
projecto, e não será capaz de influenciar a direcção do desenvolvimento
de modo tão rápido e suave do que um que já por aí ande à muito 
tempo.</para>

<para>Treine novos programadores através de um programa de envolvimento
supervisionado. O novo programador deve ter contacto directo público com
a comunidade de desenvolvimento desde o primeiro dia, começando por
correcções de erros e tarefas de limpeza, de modo a poder aprender os 
fundamentos do código e adquirir uma reputação na comunidade, mas não 
em algo grande e não sendo envolvido nas discussões de concepção. Durante
algum tempo um ou mais programadores experientes devem estar disponíveis 
para interrogatório e devem ler cada entrada que o programador novato faça
para as listas de desenvolvimento, mesmo que se tratem de ramificações
as quais os programadores experientes normalmente não prestem atenção.
Isto irá ajudar a que o grupo de aperceba de pedras potenciais antes que
o programador novato se enterre. Orientação privada e encorajamento nos
bastidores podem também ajudar muito, em especial se o novato não estiver
acostumado a uma revisão do seu código feita em paralelo de modo massivo
por pares.</para>

<para>Quando a CollabNet emprega um novo programador para trabalhar
no Subversion, sentamos-nos com ele e escolhemos uns quantos erros
em aberto para que essa pessoa possa ter um cheirinho. Discutiremos
os aspectos técnicos gerais das soluções e depois escolheremos pelo
menos um programador experiente para (publicamente) rever o remendo
que o novo programador irá (também publicamente) colocar.  Normalmente
não iremos sequer olhar para o remendo antes da lista principal de
desenvolvimento o ver, embora o possamos fazer se houver alguma
razão para isso. O importante é que o novo programador passe pelo
processo de revisão pública, aprendendo as fundações do código e
em simultâneo se habitue a receber críticas de completos estranhos.
Mas tentamos coordenar os tempos de modo a que as nossas próprias
críticas apareçam imediatamente após a colocação do remendo. Assim a
primeira crítica que a lista vê é a nossa, o que pode ajudar a estabelecer
o tom para as críticas dos restantes. Também contribui para a ideia
de que esta nova pessoa é para ser levada a sério: se os outros virem
que estamos a gastar tempo para fazermos uma crítica detalhada, 
com explicações profundas e referências ao arquivo quando apropriado,
irão perceber que está a ser efectuada formação, e que tal será 
indicativo de investimento a longo prazo. Isso pode levar a que fiquem
mais favoráveis em relação ao programador, pelo menos até ao ponto
de gastarem um pouco mais de tempo em responder às questões e 
criticar remendos.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<title>Appear as Many, Not as One</title>

<para>Your developers should strive to appear in the project's public
forums as individual participants, rather than as a monolithic
corporate presence.  This is not because there is some negative
connotation inherent in monolithic corporate presences (well, perhaps
there is, but that's not what this book is about).  Rather, it's
because individuals are the only sort of entity open source projects
are structurally equipped to deal with.  An individual contributor can
have discussions, submit patches, acquire credibility, vote, and so
forth.  A company cannot.</para>

<para>Furthermore, by behaving in a decentralized manner, you avoid
stimulating centralization of opposition.  Let your developers
disagree with each other on the mailing lists.  Encourage them to
review each other's code as often, and as publicly, as they would
anyone else's.  Discourage them from always voting as a bloc, because
if they do, others may start to feel that, just on general principles,
there should be an organized effort to keep them in check.</para>

<para>There's a difference between actually being decentralized and
simply striving to appear that way.  Under certain circumstances,
having your developers behave in concert can be quite useful, and they
should be prepared to coordinate behind the scenes when necessary.
For example, when making a proposal, having several people chime in
with agreement early on can help it along, by giving the impression of
a growing consensus.  Others will feel that the proposal has momentum,
and that if they were to object, they'd be stopping that momentum.
Thus, people will object only if they have a good reason to do so.
There's nothing wrong with orchestrating agreement like this, as long
as objections are still taken seriously.  The public manifestations of
a private agreement are no less sincere for having been coordinated
beforehand, and are not harmful as long as they are not used to
prejudicially snuff out opposing arguments.  Their purpose is merely
to inhibit the sort of people who like to object just to stay in
shape; see <xref linkend="bikeshed"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for more about
them.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<title>Be Open About Your Motivations</title>

<para>Be as open about your organization's goals as you can without
compromising business secrets.  If you want the project to acquire a
certain feature because, say, your customers have been clamoring for
it, just say so outright on the mailing lists.  If the customers wish
to remain anonymous, as is sometimes the case, then at least ask them
if they can be used as unnamed examples.  The more the public
development community knows about <emphasis>why</emphasis> you want
what you want, the more comfortable they'll be with whatever you're
proposing.</para>

<para>This runs counter to the instinct&mdash;so easy to acquire, so
hard to shake off&mdash;that knowledge is power, and that the more
others know about your goals, the more control they have over you.
But that instinct would be wrong here.  By publicly advocating the
feature (or bugfix, or whatever it is), you have
<emphasis>already</emphasis> laid your cards on the table.  The only
question now is whether you will succeed in guiding the community to
share your goal.  If you merely state that you want it, but can't
provide concrete examples of why, your argument is weak, and people
will start to suspect a hidden agenda.  But if you give just a few
real-world scenarios showing why the proposed feature is important,
that can have a dramatic effect on the debate.</para>

<para>To see why this is so, consider the alternative.  Too
frequently, debates about new features or new directions are long and
tiresome.  The arguments people advance often reduce to "I personally
want X," or the ever-popular "In my years of experience as a software
designer, X is extremely important to users / a useless frill that
will please no one."  Predictably, the absence of real-world usage
data neither shortens nor tempers such debates, but instead allows
them to drift farther and farther from any mooring in actual user
experience.  Without some countervailing force, the end result is as
likely as not to be determined by whoever was the most articulate, or
the most persistent, or the most senior.</para>

<para>As an organization with plentiful customer data available, you
have the opportunity to provide just such a countervailing force.  You
can be a conduit for information that might otherwise have no means of
reaching the development community.  The fact that that information
supports your desires is nothing to be embarrassed about.  Most
developers don't individually have very broad experience with how the
software they write is used.  Each developer uses the software in
her own idiosyncratic way; as far as other usage patterns go, she's
relying on intuition and guesswork, and deep down, she knows
this.  By providing credible data about a significant number of users,
you are giving the public development community something akin to
oxygen.  As long as you present it right, they will welcome it
enthusiastically, and it will propel things in the direction you want
to go.</para>

<para>The key, of course, is presenting it right.  It will never do to
insist that simply because you deal with a large number of users, and
because they need (or think they need) a given feature, therefore
your solution ought to be implemented.  Instead, you should focus your
initial posts on the problem, rather than on one particular solution.
Describe in great detail the experiences your customers are
encountering, offer as much analysis as you have available, and as
many reasonable solutions as you can think of.  When people start
speculating about the effectiveness of various solutions, you can
continue to draw on your data to support or refute what they say.  You
may have one particular solution in mind all along, but don't single
it out for special consideration at first.  This is not deception, it
is simply standard "honest broker" behavior.  After all, your true
goal is to solve the problem; a solution is merely a means to that
end.  If the solution you prefer really is superior, other developers
will recognize that on their own eventually&mdash;and then they will
get behind it of their own free will, which is much better than you
browbeating them into implementing it.  (There is also the possibility
that they will think of a better solution.)</para>

<para>This is not to say that you can't ever come out in favor of a
specific solution.  But you must have the patience to see the analysis
you've already done internally repeated on the public development
lists.  Don't post saying "Yes, we've been over all that here, but it
doesn't work for reasons A, B, and C.  When you get right down to it,
the only way to solve this is..."  The problem is not so much that it
sounds arrogant as that it gives the impression that you have
<emphasis>already</emphasis> devoted some unknown (but, people will
presume, large) amount of analytical resources to the problem, behind
closed doors.  It makes it seem as though efforts have been going on,
and perhaps decisions made, that the public is not privy to, and that
is a recipe for resentment.</para>

<para>Naturally, <emphasis>you</emphasis> know how much effort you've
devoted to the problem internally, and that knowledge is, in a way, a
disadvantage.  It puts your developers in a slightly different mental
space than everyone else on the mailing lists, reducing their ability
to see things from the point of view of those who haven't yet thought
about the problem as much.  The earlier you can get everyone else
thinking about things in the same terms as you do, the smaller this
distancing effect will be.  This logic applies not only to individual
technical situations, but to the broader mandate of making your goals
as clear as you can.  The unknown is always more destabilizing than
the known.  If people understand why you want what you want, they'll
feel comfortable talking to you even when they disagree.  If they
can't figure out what makes you tick, they'll assume the worst, at
least some of the time.</para>

<para>You won't be able to publicize everything, of course, and people
won't expect you to.  All organizations have secrets; perhaps
for-profits have more of them, but nonprofits have them too.  If you
must advocate a certain course, but can't reveal anything about why,
then simply offer the best arguments you can under that handicap, and
accept the fact that you may not have as much influence as you want in
the discussion.  This is one of the compromises you make in order to
have a development community not on your payroll.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<title>Money Can't Buy You Love</title>

<para>If you're a paid developer on a project, then set guidelines
early on about what the money can and cannot buy.  This does not mean
you need to post twice a day to the mailing lists reiterating your
noble and incorruptible nature.  It merely means that you should be on
the lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>

<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Soon after the
project began, we hired another developer, Mike Pilato, to join the
effort.  By then, coding had already started.  Although Subversion was
still very much in the early stages, it already had a development
community with a set of basic ground rules.</para>

<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (that proposal is private, as described in <xref
linkend="committers"/>).  Assuming the committers agree, one of
them mails the new developer and offers him direct commit access to
the project's repository.</para>

<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
volunteer developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we granted Mike commit access by fiat, we'd be saying
that CollabNet had the right to ignore project guidelines, simply
because it was the primary funder.  While the damage from this would
not necessarily be immediately apparent, it would gradually result in
the non-salaried developers feeling disenfranchised.  Other people
have to earn their commit access&mdash;CollabNet just buys
it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the public mailing list, where they could be, and were, reviewed by
everyone.  We also said on the list that we were doing things this way
deliberately, so there could be no missing the point.  After a couple
of weeks of solid activity by Mike, someone (I can't remember if it
was a CollabNet developer or not) proposed him for commit access, and
he was accepted, as we knew he would be.</para>

<!--

The relevant dates for Mike Pilato are:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

followed by:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Fixes path inconsistencies on Windows.  More generally, actually
        makes use of the "style" parameter passed to the path library
        functions to choose the right path delimeter ('/' or '\' at this
        time).  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having one's motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes itself the same size as everyone else.</para>

<para>(See also Danese Cooper's blog at
<ulink url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"/>
for a similar story about commit access.  Cooper was then Sun
Microsystem's "Open Source Diva"&mdash;I believe that was her official
title&mdash;and in the blog entry, she describes how the Tomcat
development community got Sun to hold its own developers to the same
commit-access standards as the non-Sun developers.)</para>

<para>The need for the funders to play by the same rules as everyone
else means that the Benevolent Dictatorship governance model (see
<xref linkend="benevolent-dictator"/><phrase output="printed">
in <xref linkend="social-infrastructure"/></phrase>) is slightly
harder to pull
off in the presence of funding, particularly if the dictator works for
the primary funder.  Since a dictatorship has few rules, it is hard
for the funder to prove that it's abiding by community standards, even
when it is.  It's certainly not impossible; it just requires a project
leader who is able to see things from the point of view of the outside
developers, as well as that of the funder, and act accordingly.  Even
then, it's probably a good idea to have a proposal for non-dictatorial
governance sitting in your back pocket, ready to be brought out the
moment there are any indications of widespread dissatisfaction in the
community.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<title>Contracting</title>

<para>Contracted work needs to be handled carefully in free software
projects.  Ideally, you want a contractor's work to be accepted by the
community and folded into the public distribution.  In theory, it
wouldn't matter who the contractor is, as long as his work is good and
meets the project's guidelines.  Theory and practice can sometimes
match, too: a complete stranger who shows up with a good patch
<emphasis>will</emphasis> generally be able to get it into the
software.  The trouble is, it's very hard to produce a good patch for
a non-trivial enhancement or new feature while truly being a complete
stranger; one must first discuss it with the rest of the project.  The
duration of that discussion cannot be precisely predicted.  If the
contractor is paid by the hour, you may end up paying more than you
expected; if he is paid a flat sum, he may end up doing more work
than he can afford.</para>

<para>There are two ways around this.  The preferred way is to make an
educated guess about the length of the discussion process, based on
past experience, add in some padding for error, and base the contract
on that.  It also helps to divide the problem into as many small,
independent chunks as possible, to increase the predictability of each
chunk.  The other way is to contract solely for delivery of a patch,
and treat the patch's acceptance into the public project as a separate
matter.  Then it becomes much easier to write the contract, but you're
stuck with the burden of maintaining a private patch for as long as
you depend on the software, or at least for as long as it takes you to
get that patch or equivalent functionality into the mainline.  Of
course, even with the preferred way, the contract itself cannot
require that the patch be accepted into the code, because that would
involve selling something that's not for sale.  (What if the rest of
the project unexpectedly decides not to support the feature?)
However, the contract can require a <foreignphrase>bona
fide</foreignphrase> effort to get the change accepted by the
community, and that it be committed to the repository if the community
agrees with it.  For example, if the project has written standards
regarding code changes, the contract can reference those standards and
specify that the work must meet them.  In practice, this usually works
out the way everyone hopes.</para>

<para>The best tactic for successful contracting is to hire one of the
project's developers&mdash;preferably a committer&mdash;as the
contractor.  This may seem like a form of purchasing influence, and,
well, it is.  But it's not as corrupt as it might seem.  A developer's
influence in the project is due mainly to the quality of his code and
to his interactions with other developers.  The fact that he has a
contract to get certain things done doesn't raise his status in any
way, and doesn't lower it either, though it may make people scrutinize
him more carefully.  Most developers would not risk their long-term
position in the project by backing an inappropriate or widely disliked
new feature.  In fact, part of what you get, or should get, when you
hire such a contractor is advice about what sorts of changes are
likely to be accepted by the community.  You also get a slight shift
in the project's priorities.  Because prioritization is just a matter
of who has time to work on what, when you pay for someone's time, you
cause their work to move up in the priority queue a bit.  This is a
well-understood fact of life among experienced open source developers,
and at least some of them will devote attention to the contractor's
work simply because it looks like it's going to <emphasis>get
done</emphasis>, so they want to help it get done right.  Perhaps they
won't write any of the code, but they'll still discuss the design and
review the code, both of which can be very useful.  For all these
reasons, the contractor is best drawn from the ranks of those already
involved with the project.</para>

<para>This immediately raises two questions: Should contracts ever be
private?  And when they're not, should you worry about creating
tensions in the community by the fact that you've contracted with some
developers and not others?</para>

<para>It's best to be open about contracts, when you can.  Otherwise,
the contractor's behavior may seem strange to others in the
community&mdash;perhaps he's suddenly giving inexplicably high
priority to features he's never shown interest in in the past.  When
people ask him why he wants them now, how can he answer convincingly
if he can't talk about the fact that he's been contracted to write
them?</para>

<para>At the same time, neither you nor the contractor should act as
though others should treat your arrangement as a big deal.  Too often
I've seen contractors waltz onto a development list with the attitude
that their posts should be taken more seriously simply because they're
being paid.  That kind of attitude signals to the rest of the project
that the contractor regards the fact of the contract&mdash;as opposed
to the code <emphasis>resulting</emphasis> from the contract&mdash;to
be the important thing.  But from the other developers' point of view,
only the code matters.  At all times, the focus of attention should be
kept on technical issues, not on the details of who is paying whom.
For example, one of the developers in the Subversion community handles
contracting in a particularly graceful way.  While discussing his code
changes in IRC, he'll mention as an aside (often in a private remark,
an IRC <firstterm>privmsg</firstterm>, to one of the other committers)
that he's being paid for his work on this particular bug or feature.
But he also consistently gives the impression that he'd want to be
working on that change anyway, and that he's happy the money is making
it possible for him to do that.  He may or may not reveal his
customer's identity, but in any case he doesn't dwell on the contract.
His remarks about it are just an ornament to an otherwise technical
discussion about how to get something done.</para>

<para>That example shows another reason why it's good to be open about
contracts.  There may be multiple organizations sponsoring contracts
on a given open source project, and if each knows what the others are
trying to do, they may be able to pool their resources.  In the above
case, the project's largest funder (CollabNet) is not involved in any
way with these piecework contracts, but knowing that someone else is
sponsoring certain bug fixes allows CollabNet to redirect its
resources to other bugs, resulting in greater efficiency for the
project as a whole.</para>

<para>Will other developers resent that some are paid for working on
the project?  In general, no, particularly when those who are paid are
established, well-respected members of the community anyway.  No one
expects contract work to be distributed equally among all the
committers.  People understand the importance of long-term
relationships: the uncertainties involved in contracting are such that
once you find someone you can work reliably with, you would be
reluctant to switch to a different person just for the sake of
evenhandedness.  Think of it this way: the first time you hire, there
will be no complaints, because clearly you had to pick
<emphasis>someone</emphasis>&mdash;it's not your fault you can't hire
everyone.  Later, when you hire the same person a second time, that's
just common sense: you already know him, the last time was
successful, so why take unnecessary risks?  Thus, it's perfectly
natural to have one or two go-to people in the community, instead of
spreading the work around evenly.</para>

<sect2 id="community-review-acceptance">
<title>Review and Acceptance of Changes</title>

<para>The community is still important to the success of contract
work.  Their involvement in the design and review process for sizeable
changes cannot be an afterthought.  It must be considered part of the
work, and fully embraced by the contractor.  Don't think of community
scrutiny as an obstacle to be overcome&mdash;think of it as a free
design board and QA department.  It is a benefit to be aggressively
pursued, not merely endured.</para>

<sect3 id="cvs-pserver">
<title>Case study: the CVS password-authentication protocol</title>

<para>In 1995, I was one half of a partnership that provided support
and enhancements for CVS (the Concurrent Versions System; see <ulink
url="http://www.cvshome.org/"/>).  My partner Jim and I were,
informally, the maintainers of CVS by that point.  But we'd never
thought carefully about how we ought to relate to the existing, mostly
volunteer CVS development community.  We just assumed that they'd send
in patches, and we'd apply them, and that was pretty much how it
worked.</para>

<para>Back then, networked CVS could be done only over a remote login
program such as <literal>rsh</literal>.  Using the same password for
CVS access as for login access was an obvious security risk, and many
organizations were put off by it.  A major investment bank hired us to
add a new authentication mechanism, so they could safely use networked
CVS with their remote offices.</para>

<para>Jim and I took the contract and sat down to design the new
authentication system.  What we came up with was pretty simple (the
United States had export controls on cryptographic code at the time,
so the customer understood that we couldn't implement strong
authentication), but as we were not experienced in designing such
protocols, we still made a few gaffes that would have been obvious to
an expert.  These mistakes would easily have been caught had we taken
the time to write up a proposal and run it by the other developers for
review.  But we never did so, because it didn't occur to us to think
of the development list as a resource to be used.  We knew that people
were probably going to accept whatever we committed, and&mdash;because
we didn't know what we didn't know&mdash;we didn't bother to do the
work in a visible way, e.g., posting patches frequently, making small,
easily digestible commits to a special branch, etc.  The resulting
authentication protocol was not very good, and of course, once it
became established, it was difficult to improve, because of
compatibility concerns.</para>

<para>The root of the problem was not lack of experience; we could
easily have learned what we needed to know.  The problem was our
attitude toward the volunteer development community.  We regarded
acceptance of the changes as a hurdle to leap, rather than as a
process by which the quality of the changes could be improved.  Since
we were confident that almost anything we did would be accepted (as it
was), we made little effort to get others involved.</para>

</sect3>

<para>Obviously, when you're choosing a contractor, you want someone
with the right technical skills and experience for the job.  But it's
also important to choose someone with a track record of constructive
interaction with the other developers in the community.  That way
you're getting more than just a single person; you're getting an agent
who will be able to draw on a network of expertise to make sure the
work is done in a robust and maintainable way.</para>

</sect2>

<!-- 
<para><remark>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with volunteer developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark></para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<title>Funding Non-Programming Activities</title>

<para>Programming is only part of the work that goes on in an open
source project.  From the point of view of the project's volunteers,
it's the most visible and glamorous part.  This unfortunately means
that other activities, such as documentation, formal testing, etc., can
sometimes be neglected, at least compared to the amount of attention
they often receive in proprietary software.  Corporate organizations
are sometimes able to make up for this, by devoting some of their
internal software development infrastructure to open source
projects.</para>

<para>The key to doing this successfully is to translate between the
company's internal processes and those of the public development
community.  Such translation is not effortless: often the two are not
a close match, and the differences can only be bridged via human
intervention.  For example, the company may use a different bug
tracker than the public project.  Even if they use the same tracking
software, the data stored in it will be very different, because the
bug-tracking needs of a company are very different from those of a
free software community.  A piece of information that starts in one
tracker may need to be reflected in the other, with confidential
portions removed or, in the other direction, added.</para>

<para>The sections that follow are about how to build and maintain
such bridges.  The end result should be that the open source project
runs more smoothly, the community recognizes the company's investment
of resources, and yet does not feel that the company is
inappropriately steering things toward its own goals.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-qa">
<title>Quality Assurance (i.e., Professional Testing)</title>

<para>In proprietary software development, it is normal to have teams
of people dedicated solely to quality assurance: bug hunting,
performance and scalability testing, interface and documentation
checking, etc.  As a rule, these activities are not pursued as
vigorously by the volunteer community on a free software project.
This is partly because it's hard to get volunteer labor for
unglamorous work like testing, partly because people tend to assume
that having a large user community gives the project good testing
coverage, and, in the case of performance and scalability testing,
partly because volunteers often don't have access to the necessary
hardware resources anyway.</para>

<para>The assumption that having many users is equivalent to having
many testers is not entirely baseless.  Certainly there's little point
assigning testers for basic functionality in common environments: bugs
there will quickly be found by users in the natural course of things.
But because users are just trying to get work done, they do not
consciously set out to explore uncharted edge cases in the program's
functionality, and are likely to leave certain classes of bugs
unfound.  Furthermore, when they discover a bug with an easy
workaround, they often silently implement the workaround without
bothering to report the bug.  Most insidiously, the usage patterns of
your customers (the people who drive <emphasis>your</emphasis>
interest in the software) may differ in statistically significant ways
from the usage patterns of the Average User In The Street.</para>

<para>A professional testing team can uncover these sorts of bugs, and
can do so as easily with free software as with proprietary software.
The challenge is to convey the testing team's results back to the
public in a useful form.  In-house testing departments usually have
their own way of reporting test results, involving company-specific
jargon, or specialized knowledge about particular customers and their
data sets.  Such reports would be inappropriate for the public bug
tracker, both because of their form and because of confidentiality
concerns.  Even if your company's internal bug tracking software
were the same as that used by the public project, management might
need to make company-specific comments and metadata changes to the
issues (for example, to raise an issue's internal priority, or
schedule its resolution for a particular customer).  Usually such
notes are confidential&mdash;sometimes they're not even shown to the
customer.  But even when they're not confidential, they're of no
concern to the public project, and therefore the public should not be
distracted with them.</para>

<para>Yet the core bug report itself <emphasis>is</emphasis> important
to the public.  In fact, a bug report from your testing department is
in some ways more valuable than one received from users at large,
since the testing department probes for things that other users won't.
Given that you're unlikely to get that particular bug report from any
other source, you definitely want to preserve it and make it
available to the public project.</para>

<para>To do this, either the QA department can file issues directly in
the public issue tracker, if they're comfortable with that, or an
intermediary (usually one of the developers) can "translate" the
testing department's internal reports into new issues in the public
tracker.  Translation simply means describing the bug in a way that
makes no reference to customer-specific information (the reproduction
recipe may use customer data, assuming the customer approves it, of
course).</para>

<para>It is somewhat preferable to have the QA department filing
issues in the public tracker directly.  That gives the public a more
direct appreciation of your company's involvement with the project:
useful bug reports add to your organization's credibility just as any
technical contribution would.  It also gives developers a direct line
of communication to the testing team.  For example, if the internal QA
team is monitoring the public issue tracker, a developer can commit a
fix for a scalability bug (which the developer may not have the
resources to test herself), and then add a note to the issue asking
the QA team to see if the fix had the desired effect.  Expect a bit of
resistance from some of the developers; programmers have a tendency to
regard QA as, at best, a necessary evil.  The QA team can easily
overcome this by finding significant bugs and filing comprehensible
reports; on the other hand, if their reports are not at least as good
as those coming from the regular user community, then there's no point
having them interact directly with the development team.</para>

<para>Either way, once a public issue exists, the original internal
issue should simply reference the public issue for technical content.
Management and paid developers may continue to annotate the internal
issue with company-specific comments as necessary, but use the public
issue for information that should be available to everyone.</para>

<para>You should go into this process expecting extra overhead.
Maintaining two issues for one bug is, naturally, more work than
maintaining one issue.  The benefit is that many more coders will see
the report and be able to contribute to a solution.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-legal">
<title>Legal Advice and Protection</title>

<para>Corporations, for-profit or nonprofit, are almost the only
entities that ever pay attention to complex legal issues in free
software.  Individual developers often understand the nuances of
various open source licenses, but they generally do not have the time
or resources to follow copyright, trademark, and patent law in detail.
If your company has a legal department, it can help a project by
vetting the copyright status of the code, and helping developers
understand possible patent and trademark issues.  The exact forms this
help could take are discussed in <xref linkend="legal"/>.  The
main thing is to make sure that communications between the legal
department and the development community, if they happen at all,
happen with a mutual appreciation of the very different universes the
parties are coming from.  On occasion, these two groups talk past each
other, each side assuming domain-specific knowledge that the other
does not have.  A good strategy is to have a liaison (usually a
developer, or else a lawyer with technical expertise) stand in the
middle and translate for as long as needed.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-documentation-usability">
<title>Documentation and Usability</title>

<para>Documentation and usability are both famous weak spots in open
source projects, although I think, at least in the case of
documentation, that the difference between free and proprietary
software is frequently exaggerated.  Nevertheless, it is empirically
true that much open source software lacks first-class documentation
and usability research.</para>

<para>If your organization wants to help fill these gaps for a
project, probably the best thing it can do is hire people who
are <emphasis>not</emphasis> regular developers on the project, but
who will be able to interact productively with the developers.
Not hiring regular developers is good for two reasons: one, that way
you don't take development time away from the project; two, those
closest to the software are usually the wrong people to write
documentation or investigate usability anyway, because they have
trouble seeing the software from an outsider's point of view.</para>

<para>However, it will still be necessary for whoever works on these
problems to communicate with the developers.  Find people who are
technical enough to talk to the coding team, but not so expert in the
software that they can't empathize with regular users anymore.</para>

<para>A medium-level user is probably the right person to write good
documentation.  In fact, after the first edition of this book was
published, I received the following email from an open source
developer named Dirk Reiners:</para>

<screen>
One comment on Money::Documentation and Usability: when we had some 
money to spend and decided that a beginner's tutorial was the most 
critical piece that we needed we hired a medium-level user to write it. 
He had gone through the induction to the system recently enough to 
remember the problems, but he had gotten past them so he knew how to 
describe them. That allowed him to write something that needed only 
minor fixes by the core developers for the things that he hadn't gotten 
right, but still covering the 'obvious' stuff devs would have missed.

His case was even better, as it had been his job to introduce a bunch of 
other people (students) to the system, so he combined the experience of 
many people, which is something that was just a lucky occurrence and is 
probably hard to get in most cases.
</screen>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="subsidize-hosting">
<title>Providing Hosting/Bandwidth</title>

<para>For a project that's not using one of the free canned hosting
sites (see
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), providing a
server and network connection&mdash;and most importantly, system
administration help&mdash;can be of significant assistance.  Even if
this is all your organization does for the project, it can be a
moderately effective way to obtain good public relations karma, though
it will not bring any influence over the direction of the
project.</para>

<para>You can probably expect a banner ad or an acknowledgment on the
project's home page, thanking your company for providing hosting.  If
you set up the hosting so that the project's web address is under your
company's domain name, then you will get some additional association
just through the URL.  This will cause most users to think of the
software as having <emphasis>something</emphasis> to do with your
company, even if you don't contribute to development at all.  The
problem is, the developers are aware of this associative tendency too,
and may not be very comfortable with having the project in your domain
unless you're contributing more resources than just bandwidth.  After
all, there are a lot of places to host these days.  The community may
eventually feel that the implied misallocation of credit is not worth
the convenience brought by hosting, and take the project elsewhere.
So if you want to provide hosting, do so&mdash;but either plan to get
even more involved soon, or be circumspect about how much involvement
you claim.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<title>Marketing</title>

<para>Although most open source developers would probably hate to
admit it, marketing works.  A good marketing campaign
<emphasis>can</emphasis> create buzz around an open source product,
even to the point where hardheaded coders find themselves having
vaguely positive thoughts about the software for reasons they can't
quite put their finger on.  It is not my place here to dissect the
arms-race dynamics of marketing in general.  Any corporation involved
in free software will eventually find itself considering how to market
themselves, the software, or their relationship to the
software.  The advice below is about how to avoid common pitfalls in
such an effort; see also
<xref linkend="publicity"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<title>Remember That You Are Being Watched</title>

<para>For the sake of keeping the volunteer developer community on
your side, it is <emphasis>very</emphasis> important not to say
anything that isn't demonstrably true.  Audit all claims carefully
before making them, and give the public the means to check your claims
on their own.  Independent fact checking is a major part of open
source, and it applies to more than just the code.</para>

<para>Naturally no one would advise companies to make unverifiable
claims anyway.  But with open source activities, there is an unusually
high quantity of people with the expertise to verify
claims&mdash;people who are also likely to have high-bandwidth
Internet access and the right social contacts to publicize their
findings in a damaging way, should they choose to.  When Global
Megacorp Chemical Industries pollutes a stream, that's verifiable, but
only by trained scientists, who can then be refuted by Global
Megacorp's scientists, leaving the public scratching their heads and
wondering what to think.  On the other hand, your behavior in the open
source world is not only visible and recorded; it is also easy for many
people to check it independently, come to their own conclusions, and
spread those conclusions by word of mouth.  These communications
networks are already in place; they are the essence of how open source
operates, and they can be used to transmit any sort of information.
Refutation is usually difficult, if not impossible, especially when
what people are saying is true.</para>

<para>For example, it's okay to refer to your organization as having
"founded project X" if you really did.  But don't refer to yourself as
the "makers of X" if most of the code was written by outsiders.
Conversely, don't claim to have a deeply involved volunteer developer
community if anyone can look at your repository and see that there are
few or no code changes coming from outside your organization.</para>

<para>Not too long ago, I saw an announcement by a very well-known
computer company, stating that they were releasing an important
software package under an open source license.  When the initial
announcement came out, I took a look at their now-public version
control repository and saw that it contained only three revisions.  In
other words, they had done an initial import of the source code, but
hardly anything had happened since then.  That in itself was not
worrying&mdash;they'd just made the announcement, after all.  There
was no reason to expect a lot of development activity right
away.</para>

<para>Some time later, they made another announcement.  Here is what
it said, with the name and release number replaced by pseudonyms:</para>

  <blockquote>
    <para><emphasis>We are pleased to announce that following
    rigorous testing by the Singer Community, Singer&nbsp;5 for Linux
    and Windows are now ready for production use.</emphasis></para>
  </blockquote>

<para>Curious to know what the community had uncovered in "rigorous
testing," I went back to the repository to look at its recent change
history.  The project was still on revision 3.  Apparently, they
hadn't found a <emphasis>single</emphasis> bug worth fixing before the
release!  Thinking that the results of the community testing must have
been recorded elsewhere, I next examined the bug tracker.  There were
exactly six open issues, four of which had been open for several months
already.</para>

<para>This beggars belief, of course.  When testers pound on a large
and complex piece of software for any length of time, they will find
bugs.  Even if the fixes for those bugs don't make it into the
upcoming release, one would still expect some version control activity
as a result of the testing process, or at least some new issues.  Yet
to all appearances, nothing had happened between the announcement of
the open source license and the first open source release.</para>

<para>The point is not that the company was lying about the community
testing.  I have no idea if they were or not.  But they were oblivious
to how much it <emphasis>looked</emphasis> like they were lying.
Since neither the version control repository nor the issue tracker
gave any indication that the alleged rigorous testing had occurred,
the company should either not have made the claim in the first place,
or provided a clear link to some tangible result of that testing ("We
found 278 bugs; click here for details").  The latter would have
allowed anyone to get a handle on the level of community activity very
quickly.  As it was, it only took me a few minutes to determine that
whatever this community testing was, it had not left traces in any of
the usual places.  That's not a lot of effort, and I'm sure I'm not
the only one who took the trouble.</para>

<para>Transparency and verifiability are also an important part of
accurate crediting, of course.  See
<xref linkend="credit"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on this.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<title>Don't Bash Competing Open Source Products</title>

<para>Refrain from giving negative opinions about competing open
source software.  It's perfectly okay to give negative
<emphasis>facts</emphasis>&mdash;that is, easily confirmable
assertions of the sort often seen in good comparison charts.  But
negative characterizations of a less rigorous nature are best avoided,
for two reasons.  First, they are liable to start flame wars that
detract from productive discussion.  Second, and more importantly,
some of the volunteer developers in <emphasis>your</emphasis> project
may turn out to work on the competing project as well.  This is more
likely than it at first might seem: the projects are already in the
same domain (that's why they're in competition), and developers with
expertise in that domain may make contributions wherever their
expertise is applicable.  Even when there is no direct developer
overlap, it is likely that developers on your project are at least
acquainted with developers on related projects.  Their ability to
maintain constructive personal ties could be hampered by
overly negative marketing messages.</para>

<para>Bashing competing closed-source products seems to be more widely
accepted in the open source world, especially when those products are
made by Microsoft.  Personally, I deplore this tendency (though again,
there's nothing wrong with straightforward factual comparisons), not
merely because it's rude, but also because it's dangerous for a
project to start believing its own hype and thereby ignore the ways in
which the competition may actually be superior.  In general, watch out
for the effect that marketing statements can have on your own
development community.  People may be so excited at being backed by
marketing dollars that they lose objectivity about their software's
true strengths and weaknesses.  It is normal, and even expected, for a
company's developers to exhibit a certain detachment toward marketing
statements, even in public forums.  Clearly, they should not come out
and contradict the marketing message directly (unless it's actually
wrong, though one hopes that sort of thing would have been caught
earlier).  But they may poke fun at it from time to time, as a way of
bringing the rest of the development community back down to
earth.</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
