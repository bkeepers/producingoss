<chapter id="social-infrastructure">

<title>Infra-estrutura Social e Política</title>

<simplesect>

<para>A primeira pergunta que as pessoas fazem sobre o software livre é
"Como funciona?  O que é que move um projecto?  Quem toma decisões?"
Fico sempre insatizfeito com respostas prontas sobre meritocracia, o
espírito de cooperação, o código falar por si mesmo, etc.
O facto é que a questão não tem resposta fácil. A meritocracia, a 
cooperação e a execução de código fazem parte da resposta, mas não 
explicam como é que os projectos são geridos no dia-a-dia e nada dizem
sobre como são resolvidos os conflitos.</para>

<para>Este capítulo tenta mostrar as fundações estruturais que os projectos
bem sucedidos têm em comum. Digo "bem sucedidos" não só em termos de 
qualidade técnica, mas também saúde operacional e sobrevivência.
Saúde operacional é a capacidade sustendada de um projecto incorporar novas
contribuições de código e novos programadores e ter capacidade de resposta
aos relatórios de erros que entrem. Capacidade de sobrevivência é a capacidade
de um projecto existir independentemente de qualquer participante individual ou
sponsor; pense nisto como a probabilidade do projecto continuar mesmo que todos
os seus membros fundadores se mudarem para outras coisas. O sucesso técnico não 
é difícil de alcançar, mas sem uma base de programadores e uma fundação
social robustas, um projecto pode ser incapaz de tratar o crescimento que esse
sucesso inicial trás ou a partida de indivíduos carismáticos.</para>

<para>Há várias maneiras de alcançar este tipo de sucesso. Algumas envolvem uma
estrutura de governo formal, pela qual os debates são resolvidos, os novos 
programadores são admitidos (e por vezes excluídos), novas características
são planeadas e assim sucessivamente. Outras envolvem uma estrutura menos
formal, mas maior auto-controlo, para produzir uma atmosfera de justiça em
que as pessoas possam confiar como uma forma de governação <foreignphrase>de
facto</foreignphrase>. Ambos os caminhos levam ao mesmo resultado, perenidade 
institucional, suportada por hábitos e procedimentos bem compreendidos por
todos os participantes. Estas características são ainda mais importantes
em sistemas auto-organizados do que em sistemas controlados centralmente,
porque em sistemas auto-organizados todos têm consciência que algumas maças
podres podem estragar toda a caixa, pelo menos durante algum tempo.</para>

<sect1 id="forkability">
<title>Bifurcabilidade</title>

<para>O ingrediente indispensável que serve de argamassa a que os programadores
se mantenham unidos num projecto de software livre e os leva a estarem disponíveis
para o compromisso quando necessário é a <firstterm>bifurcabilidade</firstterm>: a
capacidade de qualquer pessoa a partir de uma cópia do código fonte e usando-o como
base começar um projecto concorrente, conhecido como <firstterm>bifurcação</firstterm>.
A coisa paradoxal é que é esta <emphasis>possibilidade </emphasis> de bifurcações é
normalmente uma força muito maior nos projectos de software livre que as próprias 
bifurcações, as quais são muito raras. Porque uma bifurcação é má para toda a gente
(por razões explicadas em detalhe em
<xref linkend="forks"/><phrase output="printed"> em
<xref linkend="managing-volunteers"/></phrase>), quanto mais
séria uma ameaça de ramificação fica, mais as pessoas estão dispostas a 
efectuar um compromisso para a evitar.</para>

<para>As bifurcações, ou o potencial para o seu surgimento melhor dizendo, é
a razão pela qual nos projectos de software livre não há verdadeiros
ditadores. Pode parecer uma afirmação surpreendente, tendo em conta a 
frequência com que se ouve falar de "ditador" ou de "tirano" num dado
projecto de «open source». Mas este tipo de tirania é especial, muito
diferente do significado convencional da palavra. Imagine um rei cujos
subditos possam copiar o seu reino completo a qualquer momento  e possam
mudar para a cópia para governarem como acharem mais apropriado. Esse
rei não governaria de modo completamente diferente daquele ao qual os subditos
estão sob tutela independentemente do que ele faça?</para>

<para>É por esta razão que projectos que não têm uma organização formal
como democracias são, na prática, democracias quando se chega ao momento
de tomar decisões importantes. A replicabilidade implica a ramificabilidade;
a ramificabilidade implica o concenso. É perfeitamente possível que se 
deseje atribuir a um líder (o exemplo mais famoso é o de Linus Torvalds no
desenvolvimento do cerne do Linux), mas isso foi porque assim o 
<emphasis>escolheram</emphasis>, de uma maneira não cínica e não sinistra.
O ditador não tem uma mão mágica sobre o projecto. A propriedade chave de
todas as licenças de «open source» é não darem a ninguém mais poder do que a
qualquer outra entidade na decisão de como o código pode ser alterado ou
usado. Se o ditador começar de repente a tomar decisões más, haverá uma paragem
de actividade, seguida eventualmente de uma revolta e uma ramificação. Claro
que isto normalmente não chega tão longe porque o ditador faz um compromisso
antes.</para>

<para>Mas só porque a ramificabilidade coloca um limite máximo no poder que
uma pessoa pode exercer num projecto não quer com isto dizer que não haja
importantes diferenças em como os projectos sejam governados. Não quer que 
cada decisão venha até à pergunta extrema de quem está a pensar num ramo. 
Isso seria cansativo muito rapidamente, retirando energia do trabalho 
propriamente dito. As duas secções seguintes examinam maneiras diferentes de
organizar projectos de tal modo que a maior parte das decisões sejam
adoptadam sem guerra. Estes dois exemplos são de algum modo extremos ideais;
vários projectos caiem no continuo entre ambos.</para>

</sect1>

</simplesect>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolent-dictator"></simplesect>
<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title>Ditador Benevolente</title>


<para>O modelo <firstterm>ditador benevolente</firstterm> é exactamente
aquilo que parece: a autoridade final de tomada de decisão fica com essa
pessoa, que, por virtude da sua personalidade e experiência, se espera
que faça um uso sábio da mesma.</para>

<para>Embora "ditador benevolente" (ou abreviadamente 
<firstterm>BD</firstterm>) seja o termo normalmente usado para este
papel, seria melhor pensar nele como "árbitro aprovador pela comunidade"
ou "juiz". Geralmente os ditadores benevolentes não tomam de facto todas
as decisões ou mesmo a maior parte. É improvável que essa pessoa possa
ter a perícia suficiente para consistentemente tomar boas decisões em todas
as áreas de um projecto, e de qualquer modo, os programadores de qualidade
não ficam excepto se tiverem alguma influência na direcção do projecto.
Assim os ditactores benevolentes normalmente não ditam muito. Em vez disso
deixam as coisas funcionar por si através de discussão e experimentação
sempre que possível. Participam nessas discussões eles próprios, mas como
programadores normais, normalmente delegando numa pessoa da área da
manutenção que tenha mais conhecimento. Só quando é claro que não se
está a alcançar consenso e a maior parte do grupo <emphasis>quer</emphasis>
alguém que guie a decisão de modo a poder prosseguir." A roletância em
tomar decisões por decreto é um traço partilhado virtualmente por todos
os ditadores benevolentes bem sucedidos. É uma das razões porque conseguem
manter esse papel.</para>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolent-dictator-qualifications"></simplesect>
<sect2 id="benevolent-dictator-qualifications">
<title>Quem Pode Ser um Bom Ditador Benevolente?</title>

<title>Quem Pode Ser um Bom Ditador Benevolente?</title>

<para>Ser um BD exige uma combinação de traços. Necessita, primeiro que
tudo, uma sensibilidade grande sobre a sua própria influência no projecto,
que por outro lado trás auto-controlo. Nos primeiro estadios de uma 
discussão, não deve exprimir opiniões e consulsões para evitar que os
outros achem inútil efectuarem dissidências. As pessoas têm que ser livres
de se exprimirem, mesmo ideias estúpidas. É inevitável que o próprio
BD exprime de tempos a tempos uma ideia estúpida também e, é claro, 
o papel exige também a capacidade de reconhecer quando se toma uma má
decisão; embora isto seja um simples traço que <emphasis>qualquer</emphasis>
bom programador deva ter, em especial se se mantiver no projecto a longo
prazo.A grande diferença é que o BD pode de vez em quando cometer asneiras
sem se preocupar com a perca de credibilidade. Programadores menos seniores
podem não se sentir tão seguros e portanto o BD deve usar fraseologia 
cuidadosa nas critícas ou decisões contrárias sopesando as palavras
tanto tecnicamente como psicologicamente.</para>

<para>O BD <emphasis>não</emphasis> necessita de ter as capacidades 
técnicas afiadas de qualquer pessoa no projecto. Deve ter as capacidades
suficientes para trabalhar no código, mas é tudo. A posição de BD
não é adquirida em virtude das capacidades de codificação intimidatórias.
O que <emphasis>é</emphasis> importante é experiência e sentido de concepção
geral, não necessariamente capacidade de produzir boa concepção a pedido, 
mas a capacidade de reconhecer uma boa concepção independentemente da 
sua origem.</para>

<para>É comum o ditador benevolente ser o fundador do projecto, mas isto
é mais uma correlação do que uma cusa. Todos o tipos de qualidades que 
tornam uma pessoa capaz de ser bem sucedida no início de um projecto, &mdash;
competência técnica, capacidade de persuadir outras pessoas a juntarem-se, etc &mdash; são exactamente as capacidades que qualquer BD necessitaria. E claro
os fundadores começam logo com uma espécie de senioridade automática,
que pode ser suficiente para tornar a ditadura parecer o caminha da menor
resistência para todos aqueles a que diga respeito.</para>

<para>Lembrar que o potencial de bifurcação dá para os dois lados. Um BD
pode bifurcar um projecto como qualquer outra pessoa e alguns fizeram-no
ocasionalmente, quando acharam que a direcção que queriam tomar para
o projecto era diferente da da maioria dos outros programadores. Devido 
à bifurcabilidade não importa se o ditador benevolente é root (tem 
previlégios de administração) nos servidores principais do projecto ou
não. As pessoas falam por vezes do controlo do servidor como se fosse a 
última fonte de poder num projecto quando tal é irrelevante. A capacidade
de adicionar ou remover as palavras de passe das pessoas num determinado
servidor afecta só a cópia do projecto aí residente. Um abuso prolongado
do poder, pelo BD ou por outra pessoa, simplesmente levaria a que o 
desenvolvimento passasse para outro servidor.</para>

</sect2>

<para>Se o seu projecto deve ter um ditador benevolente ou se seria melhor
gerido com um sistema menos centralizado depende largamente em quem está
disponível para preencher os papeis. Como regra geral se é simplesmente
óbvio quem deva ser o BD então esse é o caminho a seguir. Mas se não houver
um candidato imediatamente óbvio, então o projecto deve ter um processo
de tomada de decisão descentralizados, como o descrito na próxima secção.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>Consensus-based Democracy</title>

<para>Há medida que os projectos vão envelhecendo, tendem a deixar o
modelo da ditadura benevolente e a partirem para sistemas mais abertamente
democráticos. Isto não necessariamente a partir de aborrecimento com um
determinado BD. Só que a governação baseada no grupo é "evolucionariamente
estável", para pedir emprestada uma metáfora de biologia. Sempre que um BD
se demite, ou tenta espalhar a tomada de decisão de modo mais equilibrado
é a oportunidade para o grupo estabelecer um novo sistema não ditaturial &mdash;estabelecer uma constituição como deve ser. O grupo pode não tomar esta
oportunidade a primeira ou a segunda vez mas vai acabar por o fazer; 
quando o fizer, a probabilidade desta decisão ser invertida é pouco
provável. O senso comum explica porquê: Se um grupo de N pessoas tem que 
investir alguém com um poder especial tal significa que N&nbsp;-&nbsp;1 pessoas
têm que concordar com a redução da sua influência pessoal. As pessoas 
normalmente não o desejam fazer. Mesmo o o fizerem a ditadura resultante seria
ainda assim condicionada: se o grupo de aborrece-se com o BD o grupo poderia
distituir o BD. Assim uma vez tendo mudado a liderança de um individuo
carismático para um sistema mais formal baseado no grupo raramente se volta
atrás.</para>

<para>Os detalhes de como estes sistemas funcionam variam muito, mas têm dois
elementos em comum: primeiro, o grupo funciona por consenso a maior parte do
tempo; segundo há um mecanismo de votação formal ao qual recorrer se o
consenso não puder ser alcançado.</para>

<para><firstterm>Consenso</firstterm> significa acordo com que todos
estam dispostos a viver. Não é um estado ambiguo: um grupo alcançou consenso
numa dada questão quando alguém propõe que se alcançou consenso e que
ninguém contradiga essa afirmação. A pessoa que propõe o consenso deve
especificar a que consenso se refere e que acções devem ser levadas a 
cabo como consequência desse consenso, se tal não for óbvio.</para>

<para>A maior parte das conversas num projecto são sobre tópicos 
técnicos, tal como a forma correcta de corrigir certo erro, se se deve
ou não acrescentar cerca característica, qual o grau de exactidão para
a documentação de interfaces, etc. O governo baseado em consenso funciona
bem porque se funde suavemente com a discussão técnica propriamente
dira. No fim de uma discussão há frequentemente acordo geral no caminho
a seguir. Alguém trata de fazer um fecho, o qual simultaneamente
resume o que foi decidido e a proposta implicita do consenso. Isto permite
que alguém diga "Espera lá eu não acordei isso. Temos que conversar
mais."</para>

<para>Para decisões pequenas e sem controversia, a proposta de consenso
é implícita. Por exemplo se um programador espontaneamente submete uma
correção de um erro a própria submissão é uma proposta de consenso:
"Parto do princípio que todos concordam que este erro necessita ser 
corrigido e esta é a correção." Claro que o programador não diz isto; 
ele só trata de submeter a correção e os outros no projecto não se
preocupam em indicar o seu acordo, visto o silêncio ser o próprio
consentimento. Se alguém submeter uma alteração que se venha a verificar
<emphasis>não</emphasis> ter consenso, o resultado é simples o projecto 
tem que discutir a alteração como se ela não tivesse sido já submetida. A
razão pela qual isto funciona é tópico para a secção seguinte.</para>

<sect2 id="version-control-relaxation">
<title>O Controlo de Versão Significa que Pode Relaxar</title>

<para>O facto do código fonte do projecto estar sob controlo de versões
significa que a maior parte das decisões pode ser facilmente desfeita. A
maneira mais comum disto acontecer é se alguém submeter uma alteração
por engano pensando que toda a gente concorda com ela, para vir a enfrentar
objeções após tal facto. É tipico dessas objeções começarem por um
pedido de desculpas por se ter estado ausente de discussão, embora
se possa omitir isto se não se encontrar nada sobre o assunto nos 
arquivos da lista de correio. De qualquer modo não há razão para o tom
da discussão ser diferente após a alteração ter sido submetida do que antes.
Qualquer alteração pode ser invertida, pelo menos até terem sido inseridas
alterações dependentes (isto é, novo código que falhe se a alteração 
original form retirada de repente). O sistema de controlo de versões
dá ao projecto uma maneira de desfazer os efeitos de um julgamento mau ou
rápido. Isto, por seu lado, liberta as pessoas para confiarem nos seus
instintos sobre quanta retroalimentação é necessária antes de fazerem
algo.</para>

<para>Isto também significa que o processo de estabeler consenso não
necessita de ser muito formal. A maior parte dos projectos gerem isto
por instinto. Pequenas alterações podem ocorrer sem discussão ou com 
discussão mínima seguida de alguns assentimentos de acordo. Para 
alterações mais significativas, em especial aquelas com potencial
para desestabilizar muito código as pessoas devem esperar um dia ou dois
antes de presumirem que há consenso, sendo a linha de pensamento que
ninguém deve ser marginalizado numa conversação importante simplesmente
porque não verificou o seu email com a frequência necessária.</para>

<para>Assim, quando alguém está confiante e sabe o que necessita ser 
feito, deve fazê-lo. Isto aplica-se não só a correções de software, mas
a actualizações de sítios web, alterações na documentação, e qualquer
outra coisa que dificilmente seja controversa. Normalmente só haverá alguns
exemplos onde uma acção tem que ser desfeita, e essas podem ser tratadas
caso-a-caso. Claro que não se deve encorajar as pessoas a serem cabeças
duras. Há ainda uma diferença psicológica entre uma decisão sob discussão
e uma que já teve efeito mesmo que seja tecnicamente reversível. As pessoas
podem achar que esse momento é aliado da acção e podem estar ligeiramente
mais relutantes para reverterem uma alteração do que a evitar em primeiro 
lugar. Se um programador abusar deste facto submetendo alterações 
potencialmente controversas de modo demasiado rápido, as pessoas podem e
devem queixar-se, e adoptar para esse programador um padrão mais estrito
até que as coisas melhorem.</para>

</sect2>

<sect2 id="voting">
<title>Quando não se Consegue Alcançar Consenso, Vote</title>

<para>Inevitavelmente irá haver debates onde é impossível chegar a 
um consenso. Quanto todos os outros meios de evitar bloqueios falham
a solução é votar. Mas antes da votação ter lugar, deve ficar claro o
conjunto de escolhas em discussão. Aqui, também, o processo normal
de discussão técnica funde-se com felicidade com os procedimentos de
tomada de decisão do projecto. O tipo de perguntas que chegam a votos
envolvem elas próprias frequentemente aspectos multifacetados complexos.
Em qualquer discussão complexa normalmente uma ou duas pessoas fazem o
papel de <firstterm>intermediário honesto</firstterm>: colocando resumos
periódicos dos vários argumentos e mantendo focados os pontos centrais 
do desacordo (ou acordo). Estes resumos ajudam todos a ver que progresso
foi sendo feito e lembra-os de que aspectos que é necessário continuar
a tratar. Esses mesmos resumos podem servir como protótipos para os 
da página de voto no caso de ser necessário votar. Se os intermediários
honestos fizerem bem o seu papel, irão ter o crédito para pedir uma 
votação quando se chegar a esse tempo e o grupo estará disposto a usar
a folha de votação com base no resumo dos problemas. Os próprios 
intermediários podem participar no debate; não é necessário que fiquem
neutros desde que compreendam e representem de forma justa o ponto de
vista oposto e não deixem que os seus sentimentos partidários façam com
que evitem resumir o estado do debate de um modo neutral.</para>

<para>O conteúdo da votação propriamente dito não é normalmente controverso
quando se chega à votação o desacordo normalmente está resumido a uns quantos
pontos chaves, com etiquetas reconhecidas e descrições breves. Ocasionalmente
um programador irá objectar em relação à própria votação. Por vezes este 
facto é legítimo, por exemplo uma escolha importante foi deixada de fora ou
está mal descrita. Mas noutras alturas o programadores poderá estar só a
tentar adiar o inevitável, eventualmente sabendo que a votação provavelmente
não irá correr-lhe de feição.
Conferir <xref linkend="difficult-people"/><phrase output="printed">
em <xref linkend="communications"/></phrase> sobre como tratar deste tipo
de obstrução.</para>

<para>Lembrar de especificar o sistema de votação, pois há vários tipos
diferentes e as pessoas podem fazer presunções erradas sobre o procedimento
a ser usado. Uma boa escolha na maior parte dos casos é
<firstterm>votação pela positiva</firstterm>, onde cada votante pode votar
em tantas escolhas da votação quantas as que quizer. A votação pela positiva
A votação pela positiva é fácil de explicar e de contar ao contrário de 
vários outros métodos só envolve uma volta de votação. Ver <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> para
mais detalhes sobre votação pela positiva e outros sistemas de votação,
mas tente evitar entrar num longo debate sobre qye sistema de votação
usar (porque, claro, iria encontrar-se num debase sobre que sistema
de votação usar para decidir o sistema de votação!). Uma razão pela qual
a votação pela positiva é uma boa escolha é que é muito difícil para
alguém objectar, é um sistema tão justo quanto possível como sistema
de votação.</para>

<para>Finalmente, conduza a votação em público. Não há necessidade
para segredo ou anonimia de votação em assuntos que tenham sido 
debatidos publicamente. Deixe que cada participante coloque os seus
votos na lista de correio do projecto, de modo a que cada observador
possa escrutinar e verificar os resultos por si e assim fica tudo
registado nos arquivos.</para>

</sect2>

<sect2 id="when-to-vote">
<title>Quando Votar</title>

<para>A coisa mais difícil sobre a votação é determinar quando a fazer.
Em geral votar deve ser algo  muito raro: &mdash;um último recurso par
quando todas as outras opção tenham falado. Não pense na votação como
um grande meio de resolução de debates. Não é. Acaba discussão e assim 
também termina o pensamento criativo sobre o problema. Desde que a 
discussão continue há a possibilidade de que alguém descubra uma nova
solução de que todos gostem. Isto sucede com frequência: um debate vivo
pode produzir uma nova maneira de pensar sobre o problema e conduz 
para uma proposta que eventualmente satizfaça toda a gente. Mesmo quando
não aparecem novas proposta é mesmo assim normalmente preferírel ao
intermediário chegar a um compromisso do que ir para votação. Após um
compromisso, todos estaram um pouco descontentes, enquanto que após uma 
votação algumas pessoas estaram muito descontentes enquanto outras 
estão alegres. De um ponto de vista político a situação anterior é 
preferível: pelo menos cada pessoa pode sentir ter extraído algo 
do seu descontentamento. Pode estar insatizfeito mas isso sucede com cada
um deles.</para>

<para>Voting's main advantage is that it finally settles a question so
everyone can move on.  But it settles it by a head count, instead of
by rational dialogue leading everyone to the same conclusion.  The
more experienced people are with open source projects, the less eager
I find them to be to settle questions by vote.  Instead they will try
to explore previously unconsidered solutions, or compromise more
severely than they'd originally planned.  Various techniques are
available to prevent a premature vote.  The most obvious is simply to
say "I don't think we're ready for a vote yet," and explain why not.
Another is to ask for an informal (non-binding) show of hands.  If the
response clearly tends toward one side or another, this will make some
people suddenly more willing to compromise, obviating the need for a
formal vote.  But the most effective way is simply to offer a new
solution, or a new viewpoint on an old suggestion, so that people
re-engage with the issues instead of merely repeating the same
arguments.</para>

<para>In certain rare cases, everyone may agree that all the
compromise solutions are worse than any of the non-compromise ones.
When that happens, voting is less objectionable, both because it is
more likely to lead to a superior solution and because people will not
be overly unhappy no matter how it turns out.  Even then, the vote
should not be rushed.  The discussion leading up to a vote is what
educates the electorate, so stopping that discussion early can lower
the quality of the result.</para>

<para>(Note that this advice to be reluctant to call votes does not
apply to the change-inclusion voting described in
<xref linkend="stabilizing-a-release"/><phrase output="printed">
in <xref linkend="development-cycle"/></phrase>.  There, voting
is more of a communications mechanism, a means of registering one's
involvement in the change review process so that everyone can tell how
much review a given change has received.)</para>

</sect2>

<sect2 id="electorate">
<title>Who Votes?</title>

<para>Having a voting system raises the question of electorate: who
gets to vote?  This has the potential to be a sensitive issue, because
it forces the project to officially recognize some people as being
more involved, or as having better judgement, than others.</para>

<para>The best solution is to simply take an existing distinction,
commit access, and attach voting privileges to it.  In projects that
offer both full and partial commit access, the question of whether
partial committers can vote largely depends on the process by which
partial commit access is granted.  If the project hands it out
liberally, for example as a way of maintaining many third-party
contributed tools in the repository, then it should be made clear that
partial commit access is really just about committing, not voting.
The reverse implication naturally holds as well: since full committers
<emphasis>will</emphasis> have voting privileges, they must be chosen
not only as programmers, but as members of the electorate.  If someone
shows disruptive or obstructionist tendencies on the mailing list, the
group should be very cautious about making him a committer, even if
the person is technically skilled.</para>

<para>The voting system itself should be used to choose new
committers, both full and partial.  But here is one of the rare
instances where secrecy is appropriate.  You can't have votes about
potential committers posted to a public mailing list, because the
candidate's feelings (and reputation) could be hurt.  Instead, the
usual way is that an existing committer posts to a private mailing
list consisting only of the other committers, proposing that someone
be granted commit access.  The other committers speak their minds
freely, knowing the discussion is private.  Often there will be no
disagreement, and therefore no vote necessary.  After waiting a few
days to make sure every committer has had a chance to respond, the
proposer mails the candidate and offers him commit access.  If there
is disagreement, discussion ensues as for any other question, possibly
resulting in a vote.  For this process to be open and frank, the mere
fact that the discussion is taking place at all should be secret.  If
the person under consideration knew it was going on, and then were
never offered commit access, he could conclude that he had lost
the vote, and would likely feel hurt.  Of course, if someone
explicitly asks for commit access, then there is no choice but to
consider the proposal and explicitly accept or reject him.  If the
latter, then it should be done as politely as possible, with a clear
explanation: "We liked your patches, but haven't seen enough of them
yet," or "We appreciate all your patches, but they required
considerable adjustments before they could be applied, so we don't
feel comfortable giving you commit access yet.  We hope that this will
change over time, though."  Remember, what you're saying could come as
a blow, depending on the person's level of confidence.  Try to see it
from their point of view as you write the mail.</para>

<para>Because adding a new committer is more consequential than most
other one-time decisions, some projects have special requirements for
the vote.  For example, they may require that the proposal receive at
least <emphasis>n</emphasis> positive votes and no negative votes, or
that a supermajority vote in favor.  The exact parameters are not
important; the main idea is to get the group to be careful about
adding new committers.  Similar, or even stricter, special requirements
can apply to votes to <emphasis>remove</emphasis> a committer, though
hopefully that will never be necessary.  See <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on the
non-voting aspects of adding and removing committers.</para>

</sect2>

<sect2 id="polls">
<title>Polls Versus Votes</title>

<para>For certain kinds of votes, it may be useful to expand the
electorate. For example, if the developers simply can't figure out
whether a given interface choice matches the way people actually use
the software, one solution is to ask to all the subscribers of the
project's mailing lists to vote.  These are really
<firstterm>polls</firstterm> rather than votes, but the developers may
choose to treat the result as binding.  As with any poll, be sure to
make it clear to the participants that there's a write-in option: if
someone thinks of a better option not offered in the poll questions,
her response may turn out to be the most important result of the
poll.</para>

</sect2>

<sect2 id="veto">
<title>Vetoes</title>

<para>Some projects allow a special kind of vote known as a
<firstterm>veto</firstterm>.  A veto is a way for a developer to put a
halt to a hasty or ill-considered change, at least long enough for
everyone to discuss it more.  Think of a veto as somewhere between a
very strong objection and a filibuster.  Its exact meaning varies from
one project to another.  Some projects make it very difficult to
override a veto; others allow them to be overridden by regular
majority vote, perhaps after an enforced delay for more discussion.
Any veto should be accompanied by a thorough explanation; a veto
without such an explanation should be considered invalid on
arrival.</para>

<para>With vetoes comes the problem of veto abuse.  Sometimes
developers are too eager to raise the stakes by casting a veto, when
really all that was called for was more discussion.  You can prevent
veto abuse by being very reluctant to use vetoes yourself, and by
gently calling it out when someone else uses her veto too often.  If
necessary, you can also remind the group that vetoes are binding for
only as long as the group agrees they are&mdash;after all, if a
clear majority of developers wants X, then X is going to happen one
way or another.  Either the vetoing developer will back down, or the
group will decide to weaken the meaning of a veto.</para>

<para>You may see people write "-1" to express a veto.  This usage
comes from the Apache Software Foundation, which has a highly
structured voting and veto process, described at <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The Apache
standards have spread to other projects, and you will see their
conventions used to varying degrees in a lot of places in the open
source world.  Technically, "-1" does not always indicate a formal
veto even according to the Apache standards, but informally it is
usually taken to mean a veto, or at least a very strong
objection.</para>

<para>Like votes, vetoes can apply retroactively.  It's not okay to
object to a veto on the grounds that the change in question has
already been committed, or the action taken (unless it's something
irrevocable, like putting out a press release).  On the other hand, a
veto that arrives weeks or months late isn't likely to be taken very
seriously, nor should it be.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>Writing It All Down</title>

<para>At some point, the number of conventions and agreements floating
around in your project may become so great that you need to record it
somewhere.  In order to give such a document legitimacy, make it clear
that it is based on mailing list discussions and on agreements already
in effect.  As you compose it, refer to the relevant threads in the
mailing list archives, and whenever there's a point you're not sure
about, ask again.  The document should not contain any surprises: it
is not the source of the agreements, it is merely a description of
them.  Of course, if it is successful, people will start citing it as
a source of authority in itself, but that just means it reflects the
overall will of the group accurately.</para>

<para>This is the document alluded to in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturally, when the
project is very young, you will have to lay down guidelines without
the benefit of a long project history to draw on.  But as the
development community matures, you can adjust the language to reflect
the way things actually turn out.</para>

<para>Don't try to be comprehensive.  No document can capture
everything people need to know about participating in a project.  Many
of the conventions a project evolves remain forever unspoken, never
mentioned explicitly, yet adhered to by all.  Other things are simply
too obvious to be mentioned, and would only distract from important
but non-obvious material.  For example, there's no point writing
guidelines like "Be polite and respectful to others on the mailing
lists, and don't start flame wars," or "Write clean, readable bug-free
code."  Of course these things are desirable, but since there's no
conceivable universe in which they might <emphasis>not</emphasis> be
desirable, they are not worth mentioning.  If people are being rude on
the mailing list, or writing buggy code, they're not going to stop
just because the project guidelines said to.  Such situations need to
be dealt with as they arise, not by blanket admonitions to be good.
On the other hand, if the project has specific guidelines about
<emphasis>how</emphasis> to write good code, such as rules about
documenting every API in a certain format, then those guidelines
should be written down as completely as possible.</para>

<para>A good way to determine what to include is to base the document
on the questions that newcomers ask most often, and on the complaints
experienced developers make most often.  This doesn't necessarily mean
it should turn into a FAQ sheet&mdash;it probably needs a more
coherent narrative structure than FAQs can offer.  But it should
follow the same reality-based principle of addressing the issues that
actually arise, rather than those you anticipate might arise.</para>

<para>If the project is a benevolent dictatorship, or has officers
endowed with special powers (president, chair, whatever), then the
document is also a good opportunity to codify succession procedures.
Sometimes this can be as simple as naming specific people as
replacements in case the BD suddenly leaves the project for any
reason.  Generally, if there is a BD, only the BD can get away with
naming a successor.  If there are elected officers, then the
nomination and election procedure that was used to choose them in the
first place should be described in the document.  If there was no
procedure originally, then get consensus on a procedure on the mailing
lists <emphasis>before</emphasis> writing about it.  People can
sometimes be touchy about hierarchical structures, so the subject
needs to be approached with sensitivity.</para>

<para>Perhaps the most important thing is to make it clear that the
rules can be reconsidered.  If the conventions described in the
document start to hamper the project, remind everyone that it is
supposed to be a living reflection of the group's intentions, not a
source of frustration and blockage.  If someone makes a habit of
inappropriately asking for rules to be reconsidered every time the
rules get in her way, you don't always need to debate it with
her&mdash;sometimes silence is the best tactic.  If other people
agree with the complaints, they'll chime in, and it will be obvious
that something needs to change.  If no one else agrees, then the
person won't get much response, and the rules will stay as they
are.</para>

<para>Two good examples of project guidelines are the Subversion
<filename>hacking.html</filename> file, at <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, and the Apache
Software Foundation governance documents, at <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> and <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The ASF is
really a collection of software projects, legally organized as a
nonprofit corporation, so its documents tend to describe governance
procedures more than development conventions.  They're still worth
reading, though, because they represent the accumulated experience of
a lot of open source projects.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
