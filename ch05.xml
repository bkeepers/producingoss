<chapter id="pfs-ch-5">

<title>Money</title>

<simplesect>

<para>Corporate funding of free software development is not a new
phenemenon.  A lot of development has always been informally
subsidized: when a system administrator writes a network analysis tool
to help her do her job, then posts it online and gets bug fixes and
feature contributions from other system administrators, what's
happened is that an unofficial consortium has been formed.  The
consortium's funding comes from the sysadmins' salaries, and its
office space and network bandwidth are donated, albeit unknowingly, by
the organizations they work for.  Those organizations benefit from the
investment, of course, although they may not be institutionally aware
of this at first.</para>

<para>Today, though, many of these efforts are being formalized.
Corporations have become conscious of the benefits and started trying
to measure them, to better direct their involvement.  The arrival of
for-profit resources implies, of course, the arrival of for-profit
expectations.  This is not just a matter of return on investment.  It
is also about managerial expectations: how can the essentially
hierarchical command structures of corporations, and the
semi-decentralized volunteer communities of free software projects,
work with each other in ways that are beneficial to both?</para>

<para><remark>The beginning is always hardest... Working
here.</remark></para>

<para><remark>(transition)</remark></para>

<para><remark>Money can affect a project both positively and
negatively.  By reducing the project's vulnerability the Forces of
Chaos, which sweep away so many projects before they really get off
the ground, it can make people more willing to give the software a
chance &mdash; they feel they're investing their time into something
that will be around a year from now.  On the other hand, if not
handled carefully, money can also divide the project into in-group and
out-group developers.</remark></para>

<para><remark>(Starting with running code is not important in itself.
Rather, running code is just one way of inspiring confidence that the
project will stick around (because it's already gotten that far).  But
it's not the only way.  For example, what if IBM started an open
source project.  Even if they had no running code, or any code at all,
when the project started, people would still have enough confidence in
the project's persistence to invest their own time in it.  Because,
after all, it's IBM, and they wouldn't just let it fail, right?
*That's* the key: the confidence itself is the goal, the running code
is just one means to it.  And that's why money is usually a help not a
hindrance, the same way a well-done web page on a stable server is
good, while a school-account website is bad.  One inspires confidence,
the other doesn't.)</remark></para>

<para><remark>(This is probably redundant with material already in the
book, but this may be a better way to express the thought.  Look
around, and either trim this or pull the other
material.)</remark></para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-types">
<title>Types of Projects</title>

<para><remark>List the main ways funded projects are organized, and
what kind of involvement each tends to get.  Talk to Jon, Jim: do they
get serious outside devs, or mainly just bugfix patches?</remark></para>

<para>

<itemizedlist>
  <listitem>
  <para>Projects which are essentially done for the love of it, but
        which solicit small-scale donations.</para>
  </listitem>

  <listitem>
  <para>Projects that receive all, or a significant portion of, their
        funding from non-profit organizations (such as the Free
        Software Foundation, the Apache Software Foundation,
        Xiph.org, et al).</para>
  </listitem>

  <listitem>
  <para>Projects that are funded from royalties driven by a
        dual-licencing model (see <xref linkend="pfs-dual-licensing"/>),  
        where those using the software in proprietary products
        subsidize its development for the free world.  Examples:
        MySQL, Sleepycat's Berkeley Database.</para>
  </listitem>

  <listitem>
  <para>Projects which are started and managed by for-profit
        corporations for strategic reasons, for example to drive
        support, service, or hardware sales.  (e.g.,
        Subversion)</para>
  </listitem>

  <listitem>
  <para>Projects that exist independently and have no particular
        corporate allegiance, but where some participants are fully 
        salaried by various corporations, forming consortium
        informally or formally.  Examples: GCC, the Linux kernel, what
        else?</para>
  </listitem>

</itemizedlist>

</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-money">
<title>Money and How to Handle It</title>

<para><remark>Conflicts of Interest: In a funded project, the
corporation or consortium supplying the money may have different goals
than many of the volunteers have.  How to balance the funder's
interests with the volunteers' interests without either side becoming
disgruntled.  [Case studies: Subversion, possibly others ]
</remark></para>

<para><remark>(remark on how this non-BD-based organization is more
desirable when money is involved, then link to the money
chapter/section)</remark></para>

<para><remark>Deleted material from Chapter 1, in the spot which now
just refers to this chapter: "This means that if the project has
corporate sponsorship, it should lay out clear guidelines for how the
sponsor may and may not influence project direction.  For if the
unpaid volunteers get the feeling that design decisions or feature
additions are simply available to the highest bidder, they'll most
likely head off to a project that seems more like a meritocracy and
less like unpaid labor for someone else's benefit.  Volunteer
developers generally do not mind corporate support for the projects
they work on; in fact, they often welcome it, because it can give the
project a higher chance of surviving.  But they insist, reasonably
enough, on being treated as equal partners."</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-money-vs-love">
<title>Money Can't Buy You Love</title>

<para>If some of the developers in your project are funded, even
partially, then it is very important for you to set guidelines about
what the money can and cannot buy.  This does not mean you need to
post twice a day to the mailing lists reiterating your noble and
incorruptible nature.  It merely means that you should be on the
lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>

<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Fairly early in the
project, we hired another developer, Mike Pilato, to join the effort.
By then, coding had already started.  Although we were still very much
in the early stages, there was already a development community, with
set of basic ground rules for how .</para>

<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (this proposal takes place on a closed mailing list of
just committers, so no feelings will be hurt if the proposal fails
<remark>(or just xref to <xref linkend="pfs-electorate"/> or <xref
linkend="pfs-committers"/> here?)</remark>.  When the committers
agree, someone mails the new developer and offers him direct commit
access to the project's repository.</para>

<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
volunteer developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we just granted Mike commit access by fiat, we'd be
saying that CollabNet had the right to ignore project guidelines,
simply by virtue of being the primary funder.  While the damage from
this might not have been immediately apparent, it would gradually
result in the non-salaried developers feeling disenfranchised.  Other
people have to earn their commit access &mdash; CollabNet just buys
it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the mailing list, where they could be, and were, reviewed by everyone.
Equally importantly, we said on the list that we were doing things
this way deliberately, so there could be no missing the point.  After
a while, someone (I can't remember if it was a CollabNet developer or
not) proposed Mike for commit access, and he was accepted, as everyone
knew he would be.</para>

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having ones motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes themselves the same size as everyone
else.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-contracting">
<title> Contracting </title>

<para> Contracting.  You may have funding, but that doesn't mean it's
easy to disburse.  Subcontracting needs to be done carefully in free
software projects, because part of the deal is that the
subcontractor's work must be accepted by the community -- and just
because someone funded the work doesn't necessarily mean the community
will accept it!  [Tell the story of CVS pserver here?]  </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-marketing">
<title>Marketing</title>

<para><remark>In a word: if you've got it, spend it.  For the sake of
keeping the volunteer developer community on your side, it is
<emphasis>very</emphasis> important not to say anything that isn't
demonstrably true.  Also, don't bash competing products (especially if
those products are open source, because it might turn out that some of
your developers work on them, or know people who do).  But do devote
resources to press releases, professional web site design,
advertisements in industry trade magazines.  The oft-remarked-on rift
between marketers and programmers is overstated.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-donations">
<title>Donations</title>

<para><remark>Is there anything to say about this?</remark></para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
