<chapter id="pfs-ch-5">

<title>Money</title>

<simplesect>

<para>Corporate funding of free software development is not a new
phenemenon.  In fact, a lot of development has always been informally
subsidized.  When a system administrator writes a network analysis
tool to help her do her job, then posts it online and gets bug fixes
and feature contributions from other system administrators, what's
happened is that an unofficial consortium has been formed.  The
consortium's funding comes from the sysadmins' salaries, and its
office space and network bandwidth are donated, albeit unknowingly, by
the organizations they work for.  Those organizations benefit from the
investment, of course, although they may not be institutionally aware
of it at first.</para>

<para>The difference today is that many of these efforts are being
formalized.  Corporations have become conscious of the benefits of
open source software, and started involving themselves more directly
in its development.  The arrival of for-profit resources implies the
arrival of for-profit expectations.  This is not simply a matter of
measuring return on investment.  It is also about management
processes: how can the essentially hierarchical command structures of
corporations and the semi-decentralized volunteer communities of free
software projects work productively with each other?  Will they even
always agree on what "productively" means?</para>

<para>Before we go any further, let's be clear what this chapter is
<emphasis>not</emphasis> about: it is not about projects that are
licensed as open source, but run closed-source.  Sometimes a company
will start a free software project, announce it with great fanfare on
<ulink url="http://www.freshmeat.net/">Freshmeat.net</ulink> and all
the right mailing lists, but never really get developer buy-in from
the outside world.  When you check back a year later, all the
committers' email addresses are still at that company, and there are
no significant outside voices on the mailing lists.  The project may
be officially open, its code available to the public at large and
forkable by anyone, but in practice it remains an in-house operation.
There is nothing wrong with this, and I would certainly never argue
against having more free code in the world.  But from a management
perspective, it is not much different from a proprietary project.  The
developers are organized hierarchically, working toward a single
vision defined by the company, and not pressured to negotiate with or
react to outside influences (other than market pressures, of course).
The project may <emphasis>be</emphasis> open source, but it is not
<emphasis>doing</emphasis> open source.  This chapter is about doing
open source &mdash; in particular, about using money effectively in
the presence of an outside development community.</para>

<para>Financial backing is, in general, welcomed by open source
development communities.  By reducing the project's vulnerability the
Forces of Chaos, which sweep away so many projects before they really
get off the ground, it can make people more willing to give the
software a chance &mdash; they feel they're investing their time into
something that will still be around six months from now.  Credibility
is transferable, to a point: when, say, IBM backs an open source
project, people pretty much assume the project won't be allowed to
fail, and their resultant willingness to devote effort to it can make
that a self-fulfilling prophecy.</para>

<para>However, if not handled carefully, money can divide a project
into in-group and out-group developers.  If the unpaid volunteers get
the feeling that design decisions or feature additions are simply
available to the highest bidder, they'll most likely head off to a
project that seems more like a meritocracy and less like unpaid labor
for someone else's benefit.  They may never complain overtly on the
mailing lists.  Instead, there will simply be less and less noise from
external sources, as the volunteers gradually stop trying to be taken
seriously.  The buzz of small-scale activity will continue, in the
form of bug reports and occasional small fixes.  But there won't be
any large code contributions or outside participation in design
discussions.  People sense what's expected of them, and live up (or
down) to those expectations.</para>

<para>Yet this doesn't mean that money can't buy influence.  It most
certainly can.  The trick is that it can't buy influence directly.  In
a straightforward commercial transaction, you simply trade money for
what you want.  If you need a feature added, you sign a contract, pay
for it, and it gets done.  In an open source project, it's not so
simple.  You may sign a contract with some developers, but they'd be
fooling themselves &mdash; and you &mdash; if they guaranteed that the
work you paid for would be accepted by the development community
simply because you paid for it.  The work can only be accepted on its
own merits and on how it fits into the community's vision for the
software.</para>

<para>So you can't purchase influence, but you can purchase things
that <emphasis>lead to</emphasis> influence.  The most obvious example
is programmers.  If you hire good programmers, and they stick around
long enough to get some experience with the software and some
credibility in the community, then they can influence the project by
the same means as any other member.  They will have a vote, or if
there are many of them, they will have a voting bloc.  If they are
respected in the project, they will have influence beyond just their
votes.  There is no need for paid developers to disguise their
motives.  After all, everyone who wants something done in the software
wants it done for a reason.  Your company's reasons are no less
legitimate than anyone else's.  It's just that the weight given to
your goals will be determined by your representatives' status in the
project, not by your company's size, budget, or business plan.</para>

<para>Programmers aren't the only thing you can fund, nor are they the
only way to gain influence.  In fact, one of the best ways to use
funding is to support activities that are typically neglected by
purely volunteer-driven open source projects.  The next section
explores some of those ways.</para>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-funding-non-dev">
<title>Funding Non-Development Activities</title>

The general idea is to use funding to make things happen that
otherwise <emphasis>wouldn't</emphasis> happen in open source
development.  Useability testing, QA, thorough documentation, etc.

<para><remark>todo: working here</remark></para>

<screen>
   - Presentation
   - QA / PSR testing
   - Useability studies
   - Documentation
   - Marketing / Publicity
   - Legal advice, protection
   - What else?
</screen>

<para><remark>The key with all of these is to integrate them into the
development community, by using a little preparation.  Use your
salaried developers as a liason.  Don't just have the marketing
department send out papers, get them fact-checked and also
*politics*-checked first.  Make sure the QA people know how to use the
project's public bug tracker, and make sure the community sees that
these resources are being devoted to the project.)</remark></para>

</sect1>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-types">
<title>Types of Projects</title>

<para><remark>So far, this is the only section in the book with the
potential to talk about how to <emphasis>make</emphasis> money by
producing free software.  Is that worth retaining?  If so, need to do
a little interviewing, probably with the Sleepycat and MySQL people,
and someone from RedHat?</remark></para>

<para><remark>List the main ways funded projects are organized, and
what kind of involvement each tends to get.  Talk to Jon, Jim: do they
get serious outside devs, or mainly just bugfix patches?</remark></para>

<para>

<itemizedlist>
  <listitem>
  <para>Projects which are essentially done for the love of it, but
        which solicit small-scale donations.</para>
  </listitem>

  <listitem>
  <para>Projects that receive all, or a significant portion of, their
        funding from non-profit organizations (such as the Free
        Software Foundation, the Apache Software Foundation,
        Xiph.org, et al).</para>
  </listitem>

  <listitem>
  <para>Projects that are funded from royalties driven by a
        dual-licencing model (see <xref linkend="pfs-dual-licensing"/>),  
        where those using the software in proprietary products
        subsidize its development for the free world.  Examples:
        MySQL, Sleepycat's Berkeley Database.</para>
  </listitem>

  <listitem>
  <para>Projects which are started and managed by for-profit
        corporations for strategic reasons, for example to drive
        support, service, or hardware sales.  (e.g.,
        Subversion), or to undermine a competitor's product.</para>
  </listitem>

  <listitem>
  <para>Projects that exist independently and have no particular
        corporate allegiance, but where some participants are fully 
        salaried by various corporations, forming consortium
        informally or formally.  Examples: GCC, the Linux kernel, what
        else?</para>
  </listitem>

</itemizedlist>

</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-money-vs-love">
<title>Money Can't Buy You Love</title>

<para>If some of the developers in your project are funded, even
partially, then it is very important for you to set guidelines about
what the money can and cannot buy.  This does not mean you need to
post twice a day to the mailing lists reiterating your noble and
incorruptible nature.  It merely means that you should be on the
lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>

<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Fairly early in the
project, we hired another developer, Mike Pilato, to join the effort.
By then, coding had already started.  Although we were still very much
in the early stages, there was already a development community, with
set of basic ground rules.</para>

<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (the proposal is private, as described in <xref
linkend="pfs-committers"/>).  Assuming the committers agree, someone
mails the new developer and offers him direct commit access to the
project's repository.</para>

<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
volunteer developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we granted Mike commit access by fiat, we'd be saying
that CollabNet had the right to ignore project guidelines, simply by
virtue of being the primary funder.  While the damage from this might
not have been immediately apparent, it would gradually result in the
non-salaried developers feeling disenfranchised.  Other people have to
earn their commit access &mdash; CollabNet just buys it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the mailing list, where they could be, and were, reviewed by everyone.
Equally importantly, we said on the list that we were doing things
this way deliberately, so there could be no missing the point.  After
a while, someone (I can't remember if it was a CollabNet developer or
not) proposed Mike for commit access, and he was accepted, as everyone
knew he would be.</para>

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having ones motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes itself the same size as everyone else.</para>

<para><remark>(Remark on how some sort of non-BD-based project
organization may be more robust in this sort of situation.  A funded
BD is probably the worst of all possible worlds.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-contracting">
<title>Contracting</title>

<para> Contracting.  You may have funding, but that doesn't mean it's
easy to disburse.  Subcontracting needs to be done carefully in free
software projects, because part of the deal is that the
subcontractor's work must be accepted by the community -- and just
because someone funded the work doesn't necessarily mean the community
will accept it!  [Tell the story of CVS pserver here?]  </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ownership">
<title>Ownership</title>

<para><remark>Briefly discuss the thorny issue of copyright
assignment.  It may be important, if the code ever needs to be
defended legally against a copyright infringement or other suit.
Copyright assignment can actually protect the contributors, by making
them not be targets.</remark></para>

<para><remark>(Talk about seniority and its relationship to having
started a project vs not having started it.  CVS/Cyclic is a good
example here.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-marketing">
<title>Marketing</title>

<para><remark>In a word: if you've got it, spend it.  For the sake of
keeping the volunteer developer community on your side, it is
<emphasis>very</emphasis> important not to say anything that isn't
demonstrably true.  Also, don't bash competing products (especially if
those products are open source, because it might turn out that some of
your developers work on them, or know people who do).  But do devote
resources to press releases, professional web site design,
advertisements in industry trade magazines.  The oft-remarked-on rift
between marketers and programmers is overstated.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-donations">
<title>Donations</title>

<para><remark>Is there anything to say about this?  Well, maybe one
thing: make some plans for how the money will be used
<emphasis>before</emphasis> it comes in.  Otherwise, perfectly
avoidable arguments can happen.</remark></para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
