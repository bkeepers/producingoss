<preface id="pfs-ch-0">
<title>Preface</title>
  
<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-why">
<title>Why Write This Book?</title>

<para>At cocktail parties, people no longer give me a blank stare when
I tell them I write free software.  "Oh, yes, Open Source&mdash;like
Linux?" they say.  I nod eagerly in agreement: "Yes, exactly!  That's
what I do."  It's nice not to be completely fringe anymore.  In the
past, the next question was usually fairly predictable: "How do you
make money doing that?"  To answer, I'd summarize the economics of
open source&mdash;that there are organizations in whose interest it is
to have certain software exist, but that they don't need to sell
copies, they just want to make sure it's available and maintained, as
a tool instead of a commodity.</para>

<para>Lately, however, the next question has not always been about
money.  The business case for open source<footnote><para>The terms
"open source" and "free" are essentially synonymous in this context;
they are discussed more in
<xref linkend="pfs-free-vs-open-source"/>.</para></footnote> software
is no longer so mysterious, and many non-programmers already
understand&mdash;or at least are not surprised&mdash;that there are
people employed at it full time.  Instead, the question I have been
hearing more and more often is "<emphasis>Oh, how does that
work?</emphasis>"</para>

<para>I didn't have a satisfactory answer ready, and the harder I
tried to come up with one, the more I realized how complex a topic it
really is.  Running a free software project is not exactly like
running a business (imagine having to constantly negotiate the nature
of your product with a group of volunteers, most of whom you've never
met!)  Nor, for various reasons, is it exactly like running a
traditional non-profit organization, nor a government.  It has
similarities to all these things, but I have slowly come to the
conclusion that free software is <foreignphrase>sui
generis</foreignphrase>.  There are many things with which it can be
usefully compared, but none with which it can be equated.  Indeed,
even the assumption that free software projects can be "run" is a
stretch.  A free software project can be <emphasis>started</emphasis>,
and it can be influenced by interested parties, often quite strongly.
But its assets cannot be made the property of any single owner, and as
long as there are people somewhere&mdash;anywhere&mdash;interested in
continuing it, it cannot be unilaterally shut down.  Everyone has
infinite power; everyone has no power.  It makes for an interesting
dynamic.</para>

<para>That is why I wanted to write this book.  Free software projects
have evolved a distinct culture, an ethos in which the liberty to make
the software do anything one wants is a central tenet, and yet the
result of this liberty is not a scattering of individuals each going
their own separate way with the code, but enthusiastic collaboration.
Indeed, competence at cooperation itself is one of the most highly
valued skills in free software.  To manage these projects is to engage
in a kind of hypertrophied cooperation, where one's ability not only
to work with others but to show them new ways of working with each
other can result in tangible benefits to the software.  This book
attempts to describe the techniques by which this may be done.  It is
by no means complete, but it is at least a beginning.</para>

<para>Good free software is a worthy goal in itself, and I hope that
readers who come looking for ways to achieve it will be satisfied with
what they find here.  But beyond that I also hope to convey something
of the sheer pleasure to be had from working with a motivated team of
open source developers, and from interacting with users in the
wonderfully direct way that open source encourages.  Participating in
a successful free software project is
<emphasis>fun</emphasis>, and ultimately that's probably what keeps
the whole system going.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-audience">
<title>Who Should Read This Book?</title>

<para>This book is meant for software developers and managers who are
considering starting an open source project, or who have started one
and are wondering what to do now.  It should also be helpful for
people who just want to participate in an open source project but have
never done so before.</para>

<para>The reader need not be a programmer, but should know basic
software engineering concepts such as source code, compilers, and
patches.</para>

<para>Prior experience with open source software, as either a user or
a developer, is not necessary.  Those who have worked in free software
projects before will probably find at least some parts of the book a
bit obvious, and may want to skip those sections.  Because there's
such a potentially wide range of audience experience, I've made an
effort to label sections clearly, and to say when something can be
skipped by those already familiar with the material.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-sources">
<title>Sources</title>

<para>Much of the raw material for this book came from five years of
working with the Subversion project
(<ulink url="http://subversion.tigris.org/"/>).  Subversion is an open
source version control system, written from scratch, and intended to
replace CVS as the <foreignphrase>de facto</foreignphrase> version
control system of choice in the open source community.  The project
was started by my employer, CollabNet
(<ulink url="http://www.collab.net/"/>), in early 2000, and thank
goodness CollabNet understood right from the start how to run it as a
truly collaborative, distributed effort.  We got a lot of volunteer
developer buy-in early on; today there are fifty-some developers on
the project, of whom only a few are CollabNet employees.</para>

<para>Subversion is in many ways a canonical example of an open source
project, and I ended up drawing on it more heavily than I originally
expected.  This was partly a matter of convenience: whenever I needed
an example of a particular phenomenon, I could usually call one up
from Subversion right off the top of my head.  But it was also a
matter of verification.  Although I am involved in other free software
projects to varying degrees, and talk to friends and acquaintances
involved in many more, one quickly realizes when writing for print
that all assertions need to be fact-checked.  I didn't want to make
statements about events in other projects based only on what I could
read in their public mailing list archives.  If someone were to try
that with Subversion, I knew, she'd be right about half the time and
wrong the other half.  So when drawing inspiration or examples from a
project with which I didn't have direct experience, I tried to first
talk to an informant there, someone I could trust to explain what was
really going on.</para>

<para>Subversion has been my job for the last five years, but I've
been involved in free software for twelve.  Other projects that
influenced this book include:</para>

<itemizedlist>
  <listitem><para>The GNU Emacs text editor project at the Free
            Software Foundation, in which I maintain a few small
            packages.</para>
  </listitem>
  <listitem><para>CVS (Concurrent Versions System), which I worked on
            intensely in 1994-1995 with Jim Blandy, but have been
            involved with only intermittently since.</para>
  </listitem>
  <listitem><para>The collection of open source projects known as the
            Apache Software Foundation, especially the Apache Portable
            Runtime (APR) and Apache HTTP Server.</para> 
  </listitem>
  <listitem><para>OpenOffice.org, the Berkeley Database from
            Sleepycat, and MySQL Database; I have not been
            involved with these project personally, but have observed
            them and in some cases talked to people there.</para> 
  </listitem>
  <listitem><para>GDB, the GNU Debugger (likewise).</para>
  </listitem>
  <listitem><para>The Debian Project (likewise).</para>
  </listitem>
</itemizedlist>

<para>This is not a complete list, of course.  Like most open source
programmers, I keep loose tabs on a many different projects, just to
have a sense of the general state of things.  I won't name all of them
here, but they are mentioned in the text where appropriate.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-acknowledgements">
<title>Acknowledgments</title>

<para><remark>[still writing the acknowledgements]</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-disclaimer">
<title>Disclaimer</title>

<para>The thoughts and opinions expressed in this book are my own.
They do not necessarily represent the views of CollabNet or of the
Subversion project.</para>

</sect1>

</preface>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
