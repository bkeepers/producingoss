<preface id="pfs-ch-0">
<title>Preface</title>
  
<!-- ======================== SECTION 1 ============================== -->
<sect1 id="pfs-why">
<title>Why Write This Book?</title>

<para>At cocktail parties, people no longer give me a blank stare when
I tell them I write free software.  "Oh, yes, Open Source&mdash;like
Linux?" they say.  I nod eagerly in agreement: "Yes, exactly!  That's
what I do."  It's nice not to be completely fringe anymore, but still,
I often wish for a way to make my interlocutor understand that what's
happening here is far more radical than it looks.</para>

<para>Over the last couple of decades, free software has gone from an
obscure, mostly unfunded sideline of software development, to a
thriving worldwide phenomenon with repercussions that extend well
beyond computer programming.  Skepticism of so-called "strong
intellectual property", and consideration of various degrees of
intellectual property reform, are becoming increasingly mainstream
ideas now, and this is in no small part due to the example of the free
software movement.  By showing that complex, successful works of the
mind can be created and sustained without monopolistic licensing
structures, free software is like a giant, throbbing question mark
hovering over traditional assumptions about the economics of human
creativity.</para>

<para>But that's only one of the reasons it has been making such a
stir.  The other reason is that it <emphasis>works</emphasis>.  For
certain applications it's the best stuff available; for others, it is
at least good enough, and makes financial and organizational sense in
a lot of ways.  Businesses and even some governments have begun to see
open source<footnote><para>The terms "open source" and "free" are
essentially synonymous in this context; they are discussed more in
<xref linkend="pfs-free-vs-open-source"/>.</para></footnote> software
as a way out of the vendor trap: after investing millions in a
proprietary system, what do you do when the company that sold it to
you goes out of business?  Or decides to double the per-seat charge to
upgrade to the next version?  Or decides to develop the software in a
direction that is of no use to you, leaving your needs unaddressed in
future versions?  Maybe you can keep an old version on life support
for a few years, but eventually it will be unable to interoperate with
newer software, and you will be right back to square one, facing the
prospect of tossing out years of training and acquired
expertise.</para>

<para>Open source software is an obvious escape from this trap.  It's
not just that you never have to worry about the price going up; it's
that you will never be forced to throw out your total investment in
the software.  If it's important enough to your organization to have a
certain feature, then you can just <emphasis>add</emphasis> it, or
hire someone else to.  If you need the software to be interoperable
badly enough, then it will be, because you can make it so.  The
steering wheel is in your hands, as it is in the hands of every other
user.  Whether you want to drive into town or off a cliff is up to
you, and it's up to the other users whether or not to join you.</para>

<para>Considering overall investment is not a new idea.  In fact, when
comparing their products to the open source competition, many
proprietary software vendors like to talk about
<firstterm>total cost of ownership</firstterm>, that is, how much does
a software system cost after you factor in planning, deployment,
training, maintenance, and everything else?  Measured this way, so the
argument goes, open source software is often no cheaper than
proprietary software, because even though its licensing costs are
zero, all those other costs may be higher.</para>

<para>This might be true, and in any case I haven't enough data to
argue with it.  But instead of considering total cost of ownership,
let's turn around and consider something else: the <firstterm>cost of
total ownership</firstterm>.</para>

<para>How much does it cost to be <emphasis>totally owned</emphasis>
by your software vendors?</para>

<para>The answer is, a lot.  It cannot be measured in money alone,
although there is a monetary component.  It must also be measured in
control, in loss of freedom.  With proprietary software, someone
else's code runs on <emphasis>your</emphasis> computer,
saving <emphasis>your</emphasis> files to <emphasis>your</emphasis>
disk, writing packets to <emphasis>your</emphasis> network&mdash;yet
the moment you want to change what this code does, it's suddenly not
your computer anymore.  You cannot reach inside and rewire a
proprietary program.  You eat what's put in front of you, or you don't
eat at all.</para>

<para>How much does it cost to lose the very technical foundations of
choice and creativity?  How much does it cost to have someone else
making all the important decisions?  And remember that if that someone
decides to prevent you from exchanging information in a format and
manner of your choosing, then they are making that decision for the
rest of us as well.</para>

<para>This is why I wanted to write about how free software projects
work.  It's not merely that knowing how to engage a geographically
distributed team of volunteers has immediate practical benefits,
although it does.  It's that free software projects have developed a
distinct ethos, a culture in which the liberty to make the software do
anything one wants is a central tenet, and yet the result of this
liberty is not a scattering of individuals each going their own
separate way with the code, but instead enthusiastic cooperation.
Indeed, competence at cooperation itself is one of the most highly
valued skills in free software, and to manage a free software project
is to engage in a kind of hypertrophied cooperation, where one's
ability not only to work with others but to show them new ways of
working with each other can result in tangible benefits to the
software.</para>

<para>Although much of the advice in this book is technical, it is not
primarily a technical book.  It is about people, and about how people
can use machines to help them work with other people.  The principles
described herein are not only applicable to software development;
naturally much of the advice is software-specific, but the real
question this book tries to answer is "How do people engage in large,
voluntary, cooperative projects on the Internet?"  I have a feeling
that question is only going to become more important with time.</para>

</sect1>

<!-- ======================== SECTION 1 ============================== -->
<sect1 id="pfs-audience">
<title>Who Should Read This Book?</title>

<para>This book is meant for software developers, or software project
managers, who are considering either starting or participating in an
open source project.</para>

<para>The reader should know basic software engineering concepts like
"source code" and "patch", but need not necessarily write code.  Prior
experience with open source software, as either a user or a developer,
is also not necessary.  Those who have worked in free software
projects before will probably find at least some parts of the book a
bit obvious, and may want to skip those sections.  Because there's
such a potentially wide range of audience experience, I've made an
effort to label sections clearly, and to say when something can be
skipped by those already familiar with the material.  I hope, however,
that there's something here for everyone interested in being involved
with free software.</para>

</sect1>

</preface>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
