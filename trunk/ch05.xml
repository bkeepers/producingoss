<chapter id="pfs-ch-5">

<title>Social and Political Infrastructure <!-- [ 15-25 pp ] --></title>

<simplesect>

<para> todo chapter introduction </para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-1">
<title> Self Organization </title>

<para> The mechanisms by which meritocracies organize themselves. </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-2">
<title>Money and How to Handle It</title>

<screen>
Conflicts of Interest: In a funded project, the corporation or
consortium supplying the money may have different goals than many of
the volunteers have.  How to balance the funder's interests with the
volunteers' interests without either side becoming disgruntled.  [Case
studies: Subversion, possibly others ]
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-3">
<title> Written vs Unwritten Rules </title>

<para> When does a project need a written constitution, and what kind? </para>

<!-- Make sure to talk about the procedures by which a
     contributor gets <firstterm>commit access</firstterm>, that is,
     the ability to put changes directly into the software without
     going through some other developer.)  Refer back to the Mike
     Pilato example. --> 

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-4">
<title> Consensus vs Voting vs Tyranny </title>

<para> Consensus vs voting: the importance of having a voting system,
but also, the importance of rarely using it.  Contrast official
tyranny with de facto tyranny. </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-5">
<title>Money Can't Buy You Love</title>

<para><remark>(Still deciding if this section belongs here, or
somewhere in Chapter 5.  For now, here, as I think it's one of the
better examples, so might as well put it sooner rather than
later.)</remark></para>

<para>Free software projects today are funded by a wide variety of
methods.  There are</para>

<itemizedlist>
  <listitem>
  <para>Totally unfunded projects, done simply for pleasure or
        personal utility and then released for free.</para>
  </listitem>

  <listitem>
  <para>Projects which are essentially done for the love of it but
        which solicit small-scale donations.</para>
  </listitem>

  <listitem>
  <para>Projects that receive all, or a significant portion of, their
        funding from non-profit organizations (such as the Free
        Software Foundation, the Apache Software Foundation,
        Xiph.org, et al).</para>
  </listitem>

  <listitem>
  <para>Projects that are funded from royalties driven by a
        dual-licencing model (see <xref linkend="pfs-ch-3-sect-5"/>),  
        where those using the software in proprietary products
        subsidize its development for the free world.</para>
  </listitem>

  <listitem>
  <para>Projects which are started and managed by for-profit
        corporations for strategic reasons, for example to drive
        support or hardware sales.</para>
  </listitem>
</itemizedlist>

<para>...and all sorts of outliers and edge cases.</para>

<para>Money can affect a project both positively and negatively.  By
reducing the project's vulnerability the Forces of Chaos, which sweep
away so many projects before they really get off the ground, it can
make people more willing to give the software a chance &mdash; they
feel they're investing their time into something that will be around a
year from now.  On the other hand, if not handled carefully, money can
also divide the project into in-group and out-group developers.</para>

<para>If your project is funded, even partially, then it is very
important for you to set guidelines about what the money can and
cannot buy right, from the start.  This does not mean you need to post
twice a day to the mailing lists reiterating your nobility and
incorruptibility.  It merely means that you should be on the lookout
for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you just need to show
an awareness that there is a potential for them to arise.</para>

<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Fairly early in the
project, we hired another developer, Mike Pilato, to join the effort.
By then, coding had already started, although we were still very much
in the early stages.</para>

<para>The question was, how to receive Mike into the public project?
Subversion already had a policy about how new developers get commit
access: first, they submit some patches to the development mailing
list.  After enough patches have gone by for the other committers to
see that the new contributor knows what he's doing, someone proposes
that he just commit directly (this proposal takes place on a closed
mailing list of just committers, so no feelings will be hurt if the
proposal fails).  When the committers agree, someone mails the new
developer and offers him direct commit access to the project's master
sources.</para>

<para>But what about Mike?  CollabNet had hired him specifically to
work on Subversion.  There was no doubt about his coding skills or his
readiness to work on the project.  Furthermore, the non-salaried
developers had a very good relationship with the CollabNet employees,
and most likely would not have objected if we'd just given Mike commit
access the day he was hired.  But we realized we were setting a
precedent.  If we just granted Mike commit access by fiat, we'd be
saying that CollabNet had the right to ignore project guidelines,
simply by virtue of being the primary funder.  While the damage from
this might not have been immediately apparent, it would eventually
result in the non-salaried developers feeling gradually
disenfranchised.  Other people have to earn their commit access
&mdash; CollabNet just buys it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the mailing list, where they could be, and were, reviewed by everyone.
Equally importantly, we said on the list that we were doing things
this way deliberately, so there could be no missing the point.  After
a while, someone (I can't remember if it was a CollabNet developer or
not) proposed Mike for commit access, and he was accepted, as everyone
knew he would be.</para>

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having ones motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes themselves the same size as everyone
else.</para>

<para><remark>(Check with Mike that it's okay to use his name.  I
don't think he'll mind, but it's nice to ask.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-6">
<title>Open-sourcing an Already-Established Project</title>

<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming &mdash; and make sure that you understand how it's going to
feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about their skills, imagine how that
will be exacerbated when newcomers point out flaws in code the
developer wrote, and worse, do so in front of the developer's
colleagues.  Unless you have a team of perfect coders, this is
unavoidable &mdash; in fact, it will probably happen to all of them at
first.  This is not because they're bad programmers; it's just that
any program above a certain size has bugs, and peer review will spot
some of those bugs (see <xref linkend="pfs-ch-2-sect-3.4"/>).  Of
course, the newcomers themselves won't be subject to much peer review
at first, since they can't contribute code until they get up to speed.
To your developers, it can feel like all the criticism is incoming,
never outgoing.  Thus there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet; or, it could be that they don't have a
feel for how to prioritize coding work against the new burden of
"community management".  The way to get them to participate is to
participate yourself.  Be on the mailing lists, and make sure to
answer some questions publically yourself.  When you don't have the
domain expertise to field a question, then visibly hand it off to a
developer who does &mdash; and watch to make sure they follow up with
an answer, or at least a response.</para>

<para>(On an unrelated note: when opening up a formerly private
codebase, you should also make sure your legal department has
exercised due diligence.  If the software contains code owned by other
parties, they'll need to sign off on opening it up.  See <xref
linkend="pfs-ch-3"/>.)</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-5-sect-7">
<title> Contracting </title>

<para> Contracting.  You may have funding, but that doesn't mean it's
easy to disburse.  Subcontracting needs to be done carefully in free
software projects, because part of the deal is that the
subcontractor's work must be accepted by the community -- and just
because someone funded the work doesn't necessarily mean the community
will accept it!  [Tell the story of CVS pserver here?]  </para>

</sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

