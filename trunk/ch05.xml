<chapter id="pfs-ch-5">

<title>Money</title>

<simplesect>

<para>Corporate funding of free software development is not a new
phenemenon.  In fact, a lot of development has always been informally
subsidized.  When a system administrator writes a network analysis
tool to help her do her job, then posts it online and gets bug fixes
and feature contributions from other system administrators, what's
happened is that an unofficial consortium has been formed.  The
consortium's funding comes from the sysadmins' salaries, and its
office space and network bandwidth are donated, albeit unknowingly, by
the organizations they work for.  Those organizations benefit from the
investment, of course, although they may not be institutionally aware
of it at first.</para>

<para>The difference today is that many of these efforts are being
formalized.  Corporations have become conscious of the benefits of
open source software, and started involving themselves more directly
in its development.  The arrival of corporate resources implies the
arrival of corporate expectations.  This is not simply a matter of
measuring return on investment.  It is also about management
processes: how can the essentially hierarchical command structures of
corporations and the semi-decentralized volunteer communities of free
software projects work productively with each other?  Will they even
agree on what "productively" means?</para>

<para>Before we go any further, let's be clear what this chapter is
<emphasis>not</emphasis> about: it is not about projects that are
licensed as open source, but run closed-source.  Sometimes a company
will start a free software project, announce it with great fanfare on
<ulink url="http://www.freshmeat.net/">Freshmeat.net</ulink> and all
the right mailing lists, but never really get developer buy-in from
the outside world.  When you check back a year later, all the
committers are still from that same company, and there are no
significant outside voices on the mailing lists.  The project may be
officially open, its code available to the public at large and
forkable by anyone, but in practice it remains an in-house operation.
There is nothing wrong with this, and I would certainly never argue
against having more free code in the world.  But from a management
perspective, it is not much different from a proprietary project.  The
developers are organized hierarchically, working toward a single
vision defined by the company, and not pressured to negotiate with or
react to outside influences (other than market pressures, of course).
The project may <emphasis>be</emphasis> open source, but it is not
<emphasis>doing</emphasis> open source.  This chapter is about doing
open source &mdash; in particular, about using money effectively in
the presence of an outside development community.  For the most part,
the recommendations apply equally to for-profit and non-profit
institutions; there are a few issues of particular concern to
for-profits, which will be pointed out as we go.</para>

<para>Financial backing is, in general, welcomed by open source
development communities.  It reduces the project's vulnerability the
Forces of Chaos, which sweep away so many projects before they really
get off the ground, and therefore can make people more willing to give
the software a chance &mdash; they feel they're investing their time
into something that will still be around six months from now.
Credibility is contagious, to a point.  When, say, IBM backs an open
source project, people pretty much assume the project won't be allowed
to fail, and their resultant willingness to devote effort to it can
make that a self-fulfilling prophecy.</para>

<para>However, if not handled carefully, money can divide a project
into in-group and out-group developers.  If the unpaid volunteers get
the feeling that design decisions or feature additions are simply
available to the highest bidder, they'll most likely head off to a
project that seems more like a meritocracy and less like unpaid labor
for someone else's benefit.  They may never complain overtly on the
mailing lists.  Instead, there will simply be less and less noise from
external sources, as the volunteers gradually stop trying to be taken
seriously.  The buzz of small-scale activity will continue, in the
form of bug reports and occasional small fixes.  But there won't be
any large code contributions or outside participation in design
discussions.  People sense what's expected of them, and live up (or
down) to those expectations.</para>

<para>Although money needs to be used carefully, that doesn't mean it
can't buy influence.  It most certainly can.  The trick is that it
can't buy influence directly.  In a straightforward commercial
transaction, you trade money for what you want.  If you need a feature
added, you sign a contract, pay for it, and it gets done.  In an open
source project, it's not so simple.  You may sign a contract with some
developers, but they'd be fooling themselves &mdash; and you &mdash;
if they guaranteed that the work you paid for would be accepted by the
development community simply because you paid for it.  The work can
only be accepted on its own merits and on how it fits into the
community's vision for the software.  You may have some say in that
vision, but you won't be the only voice.</para>

<para>So you can't purchase influence, but you can purchase things
that <emphasis>lead to</emphasis> influence.  The most obvious example
is programmers.  If you hire good programmers, and they stick around
long enough to get experience with the software and credibility in the
community, then they can influence the project by the same means as
any other member.  They will have a vote, or if there are many of
them, they will have a voting bloc.  If they are respected in the
project, they will have influence beyond just their votes.  There is
no need for paid developers to disguise their motives, either.  After
all, everyone who wants a change made to the software wants it for a
reason.  Your company's reasons are no less legitimate than anyone
else's.  It's just that the weight given to your goals will be
determined by your representatives' status in the project, not by your
company's size, budget, or business plan.</para>

<para>Of course, acquiring influence in a project isn't the only
reason to support it financially (even Machiavelli wasn't always
Machiavellian), and paying programmers isn't the only way to do so.
In the sections that follow, we'll look at various kinds of corporate
involvement.  But usually the longest-term and stablest investment a
corporation makes is in hiring developers to work on the project, so
we'll examine that first.</para>

<para></para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-paid-participation">
<title>Paid Participation</title>

<para>The question of how to subsidize developer involvement depends
partly on how free software fits into your company's business model.
There are a number of different ways to be involved with free
software.  The examples that follow are not mutually exclusive.  In
many cases a company's support of free software comes from several, or
even all, of these motivations:</para>

<variablelist>

   <varlistentry><term>Sharing the burden</term>
     <listitem>
     <para>Separate organizations with related software needs often
     find themselves duplicating effort, redundantly writing similar
     code in-house, or by purchasing similar products from proprietary
     vendors.  When they realize what's going on, the organizations
     pool their resources and create (or join) an open source project
     tailored to their needs.  The advantages are obvious: the costs
     of development are divided, but the benefits are not.  Although
     this scenario seems most intuitive for non-profits, it can make
     strategic sense even for for-profit competitors.</para>
     <para>Examples: <ulink url="http://www.openadapter.org/"/>,
     <ulink url="http://www.koha.org/"/></para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Augmenting services</term>
     <listitem>
     <para>When a company sells services which depend on, or are made
     more attractive by, particular open source programs, it is
     in that company's interests to ensure that those programs are
     actively maintained.</para>
     <para>Example: <ulink
     url="http://www.collab.net/">CollabNet's</ulink> support of
     <ulink url="http://subversion.tigris.org/"/> (disclaimer: that's
     my day job, but it's also a perfect example of this model).</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Supporting hardware sales</term>
     <listitem>
     <para>The value of computers and computer components is directly
     related to the amount of software available for them.  Hardware
     vendors &mdash; not just whole-machine vendors, but also makers
     of peripheral devices and microchips &mdash; have found that
     having high-quality free software to run on their hardware is
     important to customers.</para>
     <para>Examples: <remark>(Have some, but am not sure whether
     they're confidential.  Will ask.)</remark></para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Undermining a competitor</term>
     <listitem>
     <para>Sometimes companies support a particular open source
     project as a means of undermining a competitor's product, which
     may be proprietary or may even be open source itself.  Eating
     away at a competitor's market share is usually not the sole
     reason for getting involved with an open source project, but it
     can be one factor.</para>
     <para>Example: <ulink url="http://www.openoffice.org/"/> (No,
     this isn't the only reason OpenOffice exists, but it is at least
     partly a response to Microsoft Office.) <remark>(One more example
     would be nice.)</remark></para> 
     </listitem>
   </varlistentry>

   <varlistentry><term>Dual-licensing</term>
     <listitem>
     <para><firstterm>Dual-licensing</firstterm> is the practice of
           offering software under a traditional proprietary license
           for customers who want to resell it as part of a
           proprietary application of their own, and simultaneously
           under a free license for those willing to use it under open
           source terms.  (See <xref linkend="pfs-dual-licensing"/>.)
           If the open source developer community is active, the
           software gets the benefits of wide-area debugging and
           development, yet the company still gets a royalty stream to
           support some full-time programmers.</para> 
     <para>The two most well-known examples are <ulink
           url="http://www.mysql.com/">MySQL</ulink>, makers of the
           database software of the same name, and <ulink
           url="http://www.sleepycat.com/">Sleepycat</ulink>, who
           offer distributions and support for the Berkeley Database
           software.  It's no coincidence that they're both database
           companies.  Database software tends to be integrated into
           applications rather than marketed directly to users, so
           it's very well-suited to the dual-licensing model.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Marketing</term>
     <listitem>
     <para>Having your company associated with a popular open source
     application can be simply good brand management.</para>
     </listitem>
   </varlistentry>

</variablelist>

<para>Your business model is an important factor, but not the only
one.  There's also the question of your organization's historical
relationship to the software project.  Did you start it, or are you
joining an existing development effort?  In both cases you will have
to earn credibility, but, as you might imagine, there's a bit more
earning to be done in the latter case.  Your goals will also influence
your involvement.  Are you trying to reach (or keep) a position of
leadership in the project?  Are you merely trying to maintain an
influential voice in the community, to guide but not necessarily
govern the project's direction?  Or do you just want to have a couple
of committers able to fix bugs for your customers?</para>

<para>To some degree, of course, you just have to play it by ear.
Every project is a human environment, and no two are exactly alike.
But there are certain principles that apply to any sort of corporate
involvement, and if you follow them, things are a lot more likely to
work out in your favor.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-open-motives">
<title>Be Open About Motivations</title>

<para>Be as open about your goals as you can be without compromising
business secrets. <remark>(point out psychology of knowns vs
unknowns)</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-appear-as-many">
<title>Appear as Many, Not as One</title>

<para><remark>Try to appear as individual participants, not as a
corporate presence.  This is <emphasis>not</emphasis> because there is
somehow a negative connotation/aura with "corporate", but rather
because individuals are really the only kind of entity open source
projects are structurally equipped to deal with.  An individual
contributor can submit patches and get credibility (find another
word); a company cannot.  (This may have implications for staff
rotations, etc.)</remark></para>

<para><remark>Also, by appearing decentralized, you avoid centralized
opposition.  Argue with each other on list, don't always vote in a
bloc, and in every other way, avoid giving the impression of
military-type control among your developers (even if that is going on
internally, although of course it probably won't be, since it would be
hard to sustain such a disconnection between appearance and reality
for very long).</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-goldfish-bowl">
<title>Remember That You Are Being Watched</title>

<para><remark>Vet your claims before you make them; open source is all
about independent fact-checking.  It's okay to refer to yourself as
having "founded project X" if you really did.  But don't refer to
yourself as the "makers of X", if 60% of the code was written by
outsiders.  (Cross-reference to crediting chapter, and to Marketing
section below.)  Conversely, you can't claim to have a deeply involved
developer community if anyone can look at your repository and see that
all the changes come from within &mdash; it just looks
silly.</remark></para>

<para><remark>It is probably not the case that the actions of
companies involved in open source software are intrisically more
testable than those of other companies.  The difference is that there
are many, many more people with the <emphasis>expertise</emphasis> to
test claims, and furthermore they are likely to have high-bandwidth
internet connections and the right social contacts to publicize their
findings in a damaging way.  If Alcoa pollutes a stream, that's
verifiable, but only by trained scientists, who can then be refuted by
Alcoa's scientists, leaving the public scratching their heads and not
sure what to think.  On the other hand, your behavior in the open
source world is not only recorded, it is easy and convenient for many
people to check it independently, and easy for them to spread the
word among a trust network.  (Okay, that's the idea anyway, reword
that example to not use Alcoa, etc.)</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-money-vs-love">
<title>Money Can't Buy You Love</title>

<para>If some of the developers in your project are funded, even
partially, then it is very important for you to set guidelines about
what the money can and cannot buy.  This does not mean you need to
post twice a day to the mailing lists reiterating your noble and
incorruptible nature.  It merely means that you should be on the
lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>

<para>A perfect example of this came up in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I'm one of them).  Fairly early in the
project, we hired another developer, Mike Pilato, to join the effort.
By then, coding had already started.  Although we were still very much
in the early stages, there was already a development community, with
set of basic ground rules.</para>

<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (the proposal is private, as described in <xref
linkend="pfs-committers"/>).  Assuming the committers agree, someone
mails the new developer and offers him direct commit access to the
project's repository.</para>

<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
volunteer developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we granted Mike commit access by fiat, we'd be saying
that CollabNet had the right to ignore project guidelines, simply by
virtue of being the primary funder.  While the damage from this might
not have been immediately apparent, it would gradually result in the
non-salaried developers feeling disenfranchised.  Other people have to
earn their commit access &mdash; CollabNet just buys it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other volunteer developer, without commit access.  He sent patches to
the mailing list, where they could be, and were, reviewed by everyone.
Equally importantly, we said on the list that we were doing things
this way deliberately, so there could be no missing the point.  After
a while, someone (I can't remember if it was a CollabNet developer or
not) proposed Mike for commit access, and he was accepted, as everyone
knew he would be.</para>

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having ones motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes itself the same size as everyone else.</para>

<para><remark>(Remark on how some sort of non-BD-based project
organization may be more robust in this sort of situation.  A funded
BD is probably the worst of all possible worlds.)</remark></para>

<para><remark>See <ulink
url="http://blogs.sun.com/roller/page/DaneseCooper/20040916"/> for a
corroborating story.  In fact, ask Danese if can just quote it
directly.</remark></para>

<para><remark>(Another example: inclusion of internal issue numbers in
scarab commits.  Though not strictly about money, it is about the
relationship between internal/profit-driven, and external/volunteer
development.)</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-contracting">
<title>Contracting</title>

<para> Contracting.  You may have funding, but that doesn't mean it's
easy to disburse.  Subcontracting needs to be done carefully in free
software projects, because part of the deal is that the
subcontractor's work must be accepted by the community -- and just
because someone funded the work doesn't necessarily mean the community
will accept it!  [Tell the story of CVS pserver here?]  </para>

<para><remark>By the way, don't think of community acceptance as an
obstacle to be overcome.  Rather, think of it as a free QA department.
The CVS pserver protocol story shows the dangers of not aggressively
taking advantage of that free QA.</remark></para>

<para><remark>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with volunteer developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark></para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-funding-non-dev">
<title>Funding Non-Development Activities</title>

<para>There are certain aspects of software development that open
source volunteers tend not to get around to.  The volunteers who get
involved with projects are usually programmers, and their primary
interests are writing code and debugging.  If your goal is just to
help a project succeed, one of the best ways is to fund activities
that are typically be neglected the volunteer community.</para>

The general idea is to use funding to make things happen that
otherwise <emphasis>wouldn't</emphasis> happen in open source
development.  Useability testing, QA, thorough documentation, etc.

<para><remark>todo: working here</remark></para>

<screen>
   - Presentation
   - QA / PSR testing
   - Useability studies
   - Documentation
   - Marketing / Publicity
   - Legal advice, protection
   - What else?
</screen>

Open source programs are widely alleged to have poor user
interfaces (although I think this is often a canard &mdash; what they
have are <emphasis>different</emphasis> user interfaces

<para><remark>The key with all of these is to integrate them into the
development community, by using a little preparation.  Use your
salaried developers as a liason.  Don't just have the marketing
department send out papers, get them fact-checked and also
*politics*-checked first.  Make sure the QA people know how to use the
project's public bug tracker, and make sure the community sees that
these resources are being devoted to the project.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ownership">
<title>Ownership</title>

<para><remark>Briefly discuss the thorny issue of copyright
assignment.  It may be important, if the code ever needs to be
defended legally against a copyright infringement or other suit.
Copyright assignment can actually protect the contributors, by making
them not be targets.</remark></para>

<para><remark>(Talk about seniority and its relationship to having
started a project vs not having started it.  CVS/Cyclic is a good
example here.)</remark></para>

<para><remark>(Re dual-licensing: Dual-licensing situations get
started for a number of reasons.  The code may have started out free,
and a permanent proprietary fork may simply not be in the cards (too
much negative publicity, too much momentum in the existing dev
community, whatever).  But also, let's not forget the "Where do you
want to spend your time?" factor.  Sometimes, people start these
companies because they just plain like doing open source development,
and don't want to give it up.  Discuss how all this affects ownership
both legal and psychological.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-marketing">
<title>Marketing</title>

<para><remark>In a word: if you've got it, spend it.  For the sake of
keeping the volunteer developer community on your side, it is
<emphasis>very</emphasis> important not to say anything that isn't
demonstrably true.  Also, don't bash competing products (especially if
those products are open source, because it might turn out that some of
your developers work on them, or know people who do).  But do devote
resources to press releases, professional web site design,
advertisements in industry trade magazines.  The oft-remarked-on rift
between marketers and programmers is overstated.</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-donations">
<title>Donations</title>

<para><remark>Is there anything to say about this?  Well, maybe one
thing: make some plans for how the money will be used
<emphasis>before</emphasis> it comes in.  Otherwise, perfectly
avoidable arguments can happen.</remark></para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
