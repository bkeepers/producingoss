<chapter id="introduction">

<title>Introducere</title>

<simplesect>

<para>Cele mai multe proiecte de software gratuit eșuează.</para>

<para>Nu auzim prea multe despre eșecuri. Numai proiectele cu succes 
atrag atenția dar există atât de multe proiecte de software gratuit
<footnote><para>SourceForge.net, un site cunoscut de găzduire, înregistrase
79225 de proiecte până la mijlocul lunii aprilie 2004. Desigur că numărul
acesta nu se apropie de numărul total de proiecte existente pe Internet;
reprezintă doar numărul celor care au ales să utilizeze SourceForge.
</para></footnote> încât chiar dacă numai un procentaj mic au succes
tot va rezulta un număr mare de proiecte vizibile. De asemenea nu auzim
de eșecuri pentru că eșecul nu este un eveniment în sine. Nu există un 
moment anume de timp în care un proiect încetează să mai fie util; 
oamenii se îndepărtează de el și încetează să mai lucreze la el. Poate 
exista un moment când se face o ultimă modificare la un proiect dar cei
care au făcut-o de obicei nu știu că aceasta este ultima. Nu există
nicio definiție clară a momentului în care se consideră că un proiect
a expirat. Să fie când la un proiect nu s-a mai lucrat timp de șase luni?
Sau când numărul de utilizatori nu mai crește fără a fi depășit 
capacitatea numărului de dezvoltatori de a întreține proiectul? Dar dacă
dezvoltatorii unui proiect îl abandonează pentru că realizează că 
replicau efortul unui altul&mdash;și dacă se alătură acelui alt 
proiect, apoi îl extind pentru a putea să includă o parte a efortului
anterior? Primul proiect s-a încheiat s-au și-a schimbat doar locul? </para>

<para>Această complexitate duce la imposibilitatea stabilirii
unei rate exacte a eșecului. Dar dovezile anecdotice strânse după
mai mult de un deceniu de open-source, puțină navigare pe SourceForge.net
și câteva căutări pe Google duc toate la aceeași concluzie: rata este
extrem de mare, probabil ajungând la 90&ndash;95%. Numărul crește
dacă includem proiectele existente dar disfuncționale: acele care 
<emphasis>produc</emphasis> cod executabil dar care nu sunt plăcute 
utilizatorului sau care nu progresează la fel de rapid sau de fiabil 
cum ar putea.
</para>

<para>Această carte vorbește despre evitarea eșecului. Examinează nu 
numai cum se fac lucrurile corect dar și cum se fac în mod greșit pentru
a putea recunoaște și corecta problemele din timp. Sper că, după citirea
cărții, veți avea un repertoriu de tehnici nu numai pentru a evita
problemele uzuale din dezvoltarea open-source dar și pentru a vă ocupa
de creșterea și întreținerea unui proiect de succes. Succesul nu este un
joc cu sumă zero și această carte nu este despre cum să câștigi sau să
îți întreci adversarii. Din contră, o parte importantă a conducerii
unui proiect open-source o constituie interfațarea simplă cu proiecte
înrudinte. Pe termen lung, fiecare proiect de succes contribuie la 
binele corpului mondial de software gratuit.</para>

</simplesect>

<simplesect>

<para>Ar fi tentant de spus faptul că proiectele de software gratuit
eșuează din aceleași categorii de motive ca și proiectele de software
proprietar. Cu siguranță, software-ul gratuit nu deține monopolul asupra
cerințelor nerealiste, cerințelor vagi, administrării deficitare a
resurselor, fazelor insuficiente de design sau altor pitici deja 
bine cunoscuți în industria software. Există deja destule scrieri pe
aceste teme și nu voi încerca să le reproduc în această carte. În schimb,
voi încerca să descriu problemele caracteristice software-ului gratuit.
Când un proiect de software gratuit dispare se întâmplă de obicei 
pentru că dezvoltatorii (sau managerii) nu au apreciat problemele unice
ale dezvoltării de software open-source deși poate că erau destul de bine
pregătiți pentru dificultățile dezvoltării closed-source.</para>

<para>Una dintre cele mai frecvente greșeli este de a avea așteptări
nerealiste de la avantajul unei surse deschise. O licență deschisă nu 
garantează faptul că hoarde de dezvoltatori activi își vor oferi brusc
timpul lor proiectului și nici transformarea unui proiect în open-source
nu îi rezolvă în mod magic problemele. De fapt, se poate întâmpla chiar 
contrariul: deschiderea unui proiect poate adăuga complexitate și poate
costa <emphasis>mai mult</emphasis> pe termen scurt decât păstrarea
codului închis. Deschiderea către public presupune aranjarea codului
astfel încât să poată să fie înțeles de străini, stabilirea unui site de
dezvoltare și a unor liste de e-mail și adesea scrierea documentației 
pentru prima dată. Toate acestea presupun multă muncă. Desigur, dacă
totuși <emphasis>apar</emphasis> apar noi dezvoltatori, există povara
suplimentară de a le răspunde la întrebări pentru o vreme înainte de a
beneficia de pe urma prezenței lor. După cum spunea și dezvoltatorul
Jamie Zawinski despre problemele din primele zile ale proiectului
Mozilla:</para>

    <blockquote>
      <para><emphasis>Open source-ul funcționează dar nu este un panaceu.
      Dacă există un un înțeles în această poveste este că nu se poate
      presăra praful magic "open-source" pe un proiect aflat pe moarte
      și totul să funcționeze în mod magic. Software-ul este complicat.
      Problemele nu sunt atât de simple.</emphasis></para>

      <para>(sursa: <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>O greșeală înrudită este aceea de a sări peste partea de prezentare
și împachetare, considerând că acestea pot fi făcute mai târziu, când
proiectul a demarat deja de ceva vreme. Prezentarea și împachetarea 
aplicației cuprind destul de multe etape care toate se învârt în 
jurul ideei de a reduce dificultatea intrării. Pentru ca proiectul să fie
deschis celor neinițiați trebuie scrisă documentația pentru utilizatori
și dezvoltatori, trebuie creat un site web care să ofere informațiile 
necesare celor care sunt noi, trebuie automate procesele de compilare
și instalare a software-ului, etc. Din păcate mulți programatori 
consideră că această muncă este de mai puțină importanță decât codul în
sine. Există câteva motive pentru care se întâmplă acest lucru. În primul
rând poate să pară muncă inutilă pentru că beneficiile ei sunt mai
degrabă vizibile celor mai puțin familiarizați cu proiectul și invers.
Oamenii care dezvoltă codul nu au nevoie neapărat de acest proces de 
ambalare. Ei deja știu să instaleze, administreze și să folosească
aplicația pentru că au scris-o. În al doilea rând, deprinderile
necesare pentru a realiza bine prezentarea și împachetarea aplicației
sunt complet diferite de cele de care e nevoie pentru a scrie cod.
Oamenii tind să se concentreze pe lucrurile la care sunt buni chiar dacă
ar fi mai bine pentru proiect să petreacă și puțin timp făcând ceva
care li se potrivește mai puțin.  <xref
linkend="getting-started"/> discută în detaliu procesele de realizare
a prezentării și împachetării aplicației și explică de ce e crucial
ca ele să fie o prioritate încă de la începutul proiectului.</para>

<para>Următoarea pe lista noastră de greșeli frecvente sunt presupunerile
greșita că în open-source nu e nevoie de management de proiect, că e 
nevoie de foarte puțin sau că aceleași practici de management folosite
la dezvoltarea în cadrul unei firme vor funcționa la fel de bine la un
proiect open-source. Administrarea unui proiect deschis nu este 
întotdeauna foarte vizibilă utilizatorilor dar în proiectele de succes
aceasta are loc în culise într-o formă sau alta. Un mic exercițiu de 
gândire ajunge pentru a demonstra de ce. Un proiect open-source cuprinde
un grup aleator de programatori&mdash;deja o categorie cunoscută pentru
firea independentă&mdash;care, cel mai probabil, nu s-au întâlnit 
niciodată unii cu alții și care pot să urmărească fiecare scopuri 
diferite prin munca lor de la proiect. Exercițiul constă doar în a ne
imagina ce s-ar întâmpla cu un astfel de grup <emphasis>fără</emphasis> 
management. Dacă nu luăm în considerare miracolele, un astfel de grup 
s-ar destrăma foarte repede. Lucrurile pur și simplu nu se vor așeza 
singure, indiferent cât am dori noi să fie invers. Dar partea de 
management, deși poate fi destul de activă, e adesea lipsită de
formalitate și subtilă. Singurul lucru care menține coeziunea unui grup
de dezvoltare este credința comună că pot face mai multe împreună
decât fiecare individual. Astfel, scopul procesului managerial este
de a se asigura faptul că ei împărtășesc în continuare acest crez prin
eliminarea marginalizării dezvoltatorilor datorate idiosincraziei și,
în general, făcând proiectul unul la care dezvoltatorii să vrea să se
întoarcă. Tehnicile specifice pentru realizarea acestui scop sunt
discutate pe parcursul cărții.</para>

<para>Ultima categorie este a acelor probleme care ar putea fi denumite
"eșecuri ale navigației culturale". Acum zece ani, poate chiar cinci,
ar fi fost prematur să vorbim despre o cultură globală a software-ului
gratuit. Ulterior a apărut o cultură ușor de recunoscut care nu este
monolitică&mdash;este la fel de predispusă la conflicte interne ca și
orice altă cultură delimitată geografic&mdash; dar are un miez consistent.
Majoritatea proiectelor de succes prezintă unele dintre aceste 
caracteristici comune. Ele recompensează anumite tipuri de comportament și
pedepsesc altele; creează o atmosferă care încurajează participarea 
neplanificată, uneori cu riscul reducerii gradului de coordonare; au
concepte de politețe și impolitețe care pot să difere substanțial de cele
care există în alte locuri. Cel mai important, cei care participă pe 
termen lung internalizează aceste standarde astfel încât să existe un 
consens vis-a-vis de conduita așteptată de la membri. Proiectele lipsite
de succes deviază puternic de la acest miez de idei, chiar dacă 
neintenționat, și adeseori nu prezintă un consens în legătură cu 
ideea de comportament rezonabil. Asta înseamnă că, atunci când apar 
probleme, situația poate să deterioreze rapid de vreme ce participanților
le lipsește un set de reflexe culturale la care să recurgă pentru
rezolvarea diferențelor.</para>

<para>Această carte nu este un ghid practic, nu un studiu antropologic
sau o istorie. Totuși e nevoie de cunoașterea originilor culturii
free software din ziua de astăzi pentru a crea orice fel de sfaturi
practice. O persoană care înțelege cultura poate să ajungă departe în
lumea open-source, întâlnind multe variații locale în obiceiuri și 
dialect, rămânând capabilă să participe confortabil și efectiv oriunde.
O persoană care nu înțelege această cultură va considera procesul de
organizare sau participare la un proiect dificil și plin de surprize.
De vreme ce numărul de oameni care dezvoltă software gratuit crește 
cu salturi și limite, există mulți oameni în această a doua categorie
&mdash;aceasta este, în mare, o cultură a imigranților recenți și va fi
la fel timp de ceva vreme. Dacă vă considerați a fi unul dintre ei, 
următoarea secțiune furnizează informațiile de bază pentru discuțiile
pe care le veți întâlni ulterior, atât în această carte cât și pe Internet.
(Pe de altă parte, dacă deja lucrați cu software open-source de ceva
vreme, s-ar putea să știți deja destule despre istoria mișcării așa
că puteți sări liniștiți peste această secțiune.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>Istorie</title>

<para>Folosirea de software în comun există de aproape la fel de mult
ca și noțiunea de software în sine. În primele zile ale calculatoarelor
fabricanții au simțit că avantajele competitive puteau să apară doar
în inovația hardware și nu au fost atenți la folosirea software-ului ca 
un bun comercial. Mulți dintre clienții pentru aceste mașini timpurii
erau oameni de știință sau tehnicieni care erau capabili să modifice sau
 să extindă aplicațiile care erau livrate cu mașinile. Clienții uneori
 distribuiau propriile patch-uri nu doar producătorului ci și 
 proprietarilor unor sisteme similare. Producătorii de multe ori tolerau
 și chiar încurajau acest fenomen: în ochii lor, îmbunătățirile aduse
 soft-ului, indiferent de sursa de proveniență, făceau mașinile mai 
 atractive pentru potențialii clienți.</para>

<para>Deși această perioadă seamănă cu ceea ce se întâmplă astăzi în
cultura software-ului gratuit, diferă în două aspecte cruciale. În primul
rând, încă nu exista o standardizare a hardware-ului&mdash;era o perioadă
de înflorire pentru inovația în design-ul calculatoarelor, dar
diversitatea arhitecturilor de calcul însemna că totul era incompatibil
cu orice altceva. Astfel, aplicațiile scrise pentru o mașină nu funcționau
pe altele. Programatorii acumulau expertiza într-o arhitectură sau o 
familie de arhitecturi (în ziua de astăzi devin experți într-un limbaj
de programare sau într-o familie de limbaje de programare, știind că 
expertiza lor va fi ușor de transferat pe orice arhitectură hardware cu 
care au ocazia să lucreze). Pentru că experiența era specifică unui
anumit tip de calculator, acumularea de expertiză avea efect asupra 
atractivității calculatorului pentru persoana respectivă și colegii ei.
Astfel, era în cel mai bun interes al producătorului să se disemineze 
cât mai departe codul și cunoștințele specifice unei anumite mașini.</para>

<para>În al doilea rând, nu exista Internet. Deși existau mai puține
restricții legale decât în ziua de astăzi, existau mai multe de ordin
tehnic: modalitățile de a transfera date dintr-un loc în altul erau 
neconvenabile și greoaie în comparație cu ziua de astăzi. Existau niște 
rețele micil, locale, bune pentru diseminarea informației între angajații
de la același laborator de cercetare sau dintr-o companie. Dar existau 
bariere de depășit dacă o persoană ar fi vrut să împartă ceva cu toată
lumea, indiferent unde se aflau. Aceste bariere <emphasis>erau depășite
</emphasis> în multe cazuri. Uneori diferite grupuri intrau în legătură
unele cu altele în mod independent, trimițând dischete sau casete prin
poștă, uneori fabricanții serveau ei înșiși ca și puncte centrale de 
transmisie a patch-urilor. A fost de ajutor și faptul că mulți dintre
primii dezvoltatori software lucrau la universități unde era de așteptat
ca fiecare să-și publice cunoștințele. Dar realitatea de ordin fizic în
transmiterea datelor însemna că întotdeauna exista un obstacol în calea
distribuției, o problemă direct proporțională cu distanța (dificultăți 
reale sau de ordin organizațional) pe care aplicația trebuia să o parcurgă
până la destinație. Nu era posibilă împărțirea pe scară largă, cum se
întâmplă în ziua de astăzi.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>Apariția software-ului proprietar și a celui gratuit</title>

<para>Pe măsură ce industria s-a maturizat, mai multe schimbări 
interrelaționale au avut loc simultan. Diversitatea modelelor hardware
a făcut loc câtorva câștigători&mdash;prin tehnologie superioară, 
marketing superior sau o combinație a celor două. În același timp, și
nu în întregime printr-o coincidență, dezvoltarea așa-numitelor limbaje
de programare "de nivel înalt" însemna că se puteau scrie programe o 
singură dată, într-un limbaj, care să fie apoi traduse automat 
("compilate") pentru a rula pe diferite tipuri de calculatoare. 
Implicațiile acestui fapt nu au rămas necunoscute pentru producătorii
de hardware: un client putea acum să inițieze un proiect de inginerie
software de mare anvergură fără a fi nevoie să rămână blocați într-o
anumită arhitectură de calculator. Când acest lucru s-a combinat cu 
reducerea treptată a diferenței de performanță dintre diferitele 
calculatoare, pe măsură ce modelele mai puțin eficiente au dispărut, 
un producător care își trata hardware-ul ca fiind singurul bun comercial
aflat la dispoziție putea să se aștepte la o descreștere a ratei
profitului în viitor. Puterea de calcul pură devenea un bun fungibil
pe când software-ul devenea un diferențiator. Vânzarea de aplicații, sau
cel puțin tratarea acestora ca o parte integrală a vânzării de hardware,
începea să pară o strategie bună.</para>

<para>Asta însemna că producătorii trebuiau să impună mai strict reguli
de copyright asupra codului sursă. Dacă utilizatorii continuau pur și
simplu să împartă codul și să-l modifice liberi între ei, ar fi putut să
reimplementeze în mod independent unele dintre îmbunătățirile care
erau vândute acum ca și "valoare adăugată" de către furnizor. Mai rău,
codul putea să ajungă în mâinile concurenței. Ironia face ca acest
fenomen să aibă loc exact în perioada în care Internetul făcea primii
pași. Când împărțirea neobstrucționată a software-ului devenea posibilă
tehnic, schimbările din industria computerelor o făceau nedorită 
economic, cel puțin din punctul de vedere al oricărei companii. Furnizorii
au închis aceste portițe prin refuzul de a permite accesul utilizatorilor
la codul care rula pe mașinile lor, sau prin impunerea unor 
acorduri de nedivulgare a secretului care făceau utilizarea la comun
a codului imposibilă.</para>

<sect3 id="history-conscious-resistance">
<title>Rezistența conștientă</title>

<para>Pe măsură ce lumea care efectua schimburi nelimitate de cod 
dispărea încet, în mintea a cel puțin un programator s-a cristalizat
o contrareacție. Richard Stallman a lucrat în Laboratorul de Inteligență
Artificială de la Institutul de Tehnologie din Massachusetts în anii '70 
și la începutul anilor '80, în timpul a ceea ce s-a dovedit a fit epoca 
de aur și locul potrivit pentru folosirea în comun a codului. Laboratorul
de Inteligență Artificială avea o „etică de lucru” puternică. <footnote>
<para>Stallman folosește cuvântul „hacker” pentru a se referi la „cineva
căruia îi place să programeze și să facă lucrul acesta într-un mod 
inteligent” și nu în sensul modern de „persoană care compromite
securitatea unui computer”.</para></footnote> și oamenii nu erau 
încurajați dar se aștepta de la ei să îi înștiințeze pe restul de 
modificările pe care le făceau sistemului. După cum a scris mai târziu
Stallman:</para>

    <blockquote>
      <para><emphasis>Nu ne intitulam aplicațiile ca fiind „software 
      gratuit” pentru că termenul nu exista; dar asta era în realitate.
      Oricând oamenii de la o altă universitate sau companie voiau să
      transforme și să folosească un program, îi lăsam fericiți să o facă.
      Dacă vedeai pe cineva care folosea un program necunoscut dar 
      interesant, puteai întotdeauna să ceri să vezi codul sursă astfel
      încât să poți să-l citești, să-l modifici sau să folosești părți 
      din el pentru a face un nou program.
      </emphasis></para>

      <para>(sursa <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Această comunitate Edenică s-a prăbușit în jurul lui Stallman
puțin după 1980, când schimbările care aveau loc în restul industriei 
au ajuns și în laborator. O companie start-up a angajat mulți dintre 
programatorii Laboratorului pentru a lucra la un sistem de operare
asemănător cu ceea ce lucrau acolo numai că, de data aceasta, totul
se făcea sub o licență exclusivă. În același timp, Laboratorul achiziționa
echipament nou care venea cu un sistem de operare proprietar.</para>

<para>Stallman observa modelul mare a ceea ce se întâmpla:</para>

    <blockquote>
      <para><emphasis>Calculatoarele moderne ale erei, cum ar fi VAX sau
      68020, aveau propriile sisteme de operare dar niciunul dintre ele
      nu era software gratuit: trebuia să semnezi un act de 
      confidențialitate numai pentru a obține o copie executabilă.
      </emphasis> </para>

      <para><emphasis>Asta însemna că primul pas pentru a folosi un 
      calculator era să promiți să nu-ți ajuți vecinul. Comunitatea 
      cooperantă era interzisă. Regula făcută de proprietarii soft-ului
      proprietar era: „dacă împarți cu vecinii, ești un pirat; dacă vrei
      modificări, imploră-ne să le facem.”
      </emphasis> </para>

    </blockquote>

<para>Printr-o ciudățenie de personalitate, el s-a decis să reziste 
modei. În loc să lucreze în continuare la acum-decimatul Laborator de 
Inteligență Artificială sau să-și ia o slujbă scriind cod la una dintre
noile companii, unde rezultatele muncii lui ar fi rămas închise într-o
cutie, a demisionat de la laborator și a inițiat Proiectul GNU și 
Fundația pentru Software Gratuit (Free Software Foundation - FSF). 
Scopul GNU<footnote><para>vine de la „GNU is not Unix” &mdasu; GNU nu 
este Unix&mdash; și GNU în extensia aceasta vine de la... același lucru.
</para></footnote> era să dezvolte un sistem de operare complet gratuit
și deschis și un corp de software în care utilizatorii nu erau niciodată
împiedicați să modifice codul sau să împartă modificările cu alții. El,
în esență, încerca să recreeze ceea ce se distrusese la laborator, dar la
o scară globală și fără vulnerabilitățile care făcuseră cultura 
laboratorului AI susceptibilă la dezintegrare.</para>

<para>Pe lângă faptul că lucra la un sistem de operare nou, Stallman a 
creat o licență de copyright ai cărei termeni garantau faptul că
sursele aplicațiilor create urmau să fie întotdeauna libere. Licența
Generală Publică GNU (GPL) este o piesă inteligentă de judo legal: spune
că sursele pot fi copiate și modificate fără restricții și că atât copiile
cât și lucrările derivate (i.e. versiunile modificate) trebuie să fie
distribuite sub aceeași licență ca și originalul, fără niciun fel de
restricții adiționale. Prin urmare, folosește legea copyright-ului pentru
a obține un efect contrar aceluia al copyright-ului tradițional: previne
ca <emphasis>oricine</emphasis>, chiar și autorul, să poată să limiteze 
accesul la cod. Pentru Stallman era mai bine decât să dea drumul codului
în domeniul public. Dacă ar fi fost proprietate din domeniul public, orice
copie particulară putea fi copiată într-un program proprietar (după cum 
s-a întâmplat deja cu licențele de copyright puțin restrictive). În timp
ce această încorporare nu ar diminua deloc disponibilitatea codului 
original, ar fi însemnat  că eforturile lui Stallman puteau beneficia
dușmanului&mdash; software-ul proprietar. Licența GPL poate fi văzută ca 
o formă de protecționism pentru software-ul gratuit pentru că previne ca 
aplicațiile comerciale să folosească la maximum codul creat sub licență 
GPL. Licența și relația ei cu alte licențe software sunt discutate în
detaliu în
<xref linkend="legal"/>.</para>

<para>With the help of many programmers, some of whom shared
Stallman's ideology and some of whom simply wanted to see a lot of
free code available, the GNU Project began releasing free replacements
for many of the most critical components of an operating system.
Because of the now-widespread standardization in computer hardware and
software, it was possible to use the GNU replacements on otherwise
non-free systems, and many people did.  The GNU text editor (Emacs)
and C compiler (GCC) were particularly successful, gaining large and
loyal followings not on ideological grounds, but simply on their
technical merits.  By about 1990, GNU had produced most of a free
operating system, except for the kernel&mdash;the part that the
machine actually boots up, and that is responsible for managing memory,
disk, and other system resources.</para>

<para>Unfortunately, the GNU project had chosen a kernel design that
turned out to be harder to implement than expected.  The ensuing delay
prevented the Free Software Foundation from making the first release
of an entirely free operating system.  The final piece was put into
place instead by Linus Torvalds, a Finnish computer science student
who, with the help of volunteers around the world, had completed a
free kernel using a more conservative design.  He named it Linux, and
when it was combined with the existing GNU programs, the result was a
completely free operating system.  For the first time, you could boot
up your computer and do work without using any proprietary
software.<footnote><para>Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>

<para>Much of the software on this new operating system was not
produced by the GNU project.  In fact, GNU wasn't even the only group
working on producing a free operating system (for example, the code
that eventually became NetBSD and FreeBSD was already under
development by this time).  The importance of the Free Software
Foundation was not only in the code they wrote, but in their political
rhetoric.  By talking about free software as a cause instead of a
convenience, they made it difficult for
programmers <emphasis>not</emphasis> to have a political consciousness
about it.  Even those who disagreed with the FSF had to engage the
issue, if only to stake out a different position.  The FSF's
effectiveness as propagandists lay in tying their code to a message,
by means of the GPL and other texts.  As their code spread widely,
that message spread as well.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Accidental resistance</title>

<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
programmers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
