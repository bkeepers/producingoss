<chapter id="pfs-ch-2">

<title>Getting Started <!-- [ 15-25 pp ] --></title>

<simplesect>

<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>

    <blockquote>
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Note that Raymond wasn't saying that open source projects only
happen when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; the relevance of this
to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.</para>

<para>This is still how most free projects are started, but less so
now than in 1997, when Raymond wrote those words.  Today, we have the
phenomenon of organizations &mdash; including for-profit corporations
&mdash; starting large, centrally-managed open source projects from
scratch.  The lone programmer, banging out some code to solve a local
problem and then realizing the result has wider applicability, is
still the source of much new free software, but is not the only
story.</para>

<para>Raymond's point is still insightful, however.  The essential
condition is that the producers of the software have a direct interest
in its success, because they use it themselves.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the OpenAdapter project (<ulink
url="http://www.openadapter.org/"/>), which was started by investment
bank Dresdner Kleinwort Wasserstein as an open source framework for
integrating disparate financial information systems, can hardly be
said to scratch any individual programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institution and its partners, and therefore if
the project fails to relieve them, they will know.  This arrangement
can produce good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease, and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>

<para>This chapter is about how to introduce a new free software
project to the world, but many of its recommendations would sound
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.  Free software distribution is a
twofold task.  The software needs to acquire users, and to acquire
developers.  These two needs are not necessarily in conflict, but they
do add some complexity to a project's initial presentation.  Some
information is useful for both audiences, some is useful only for one
or the other.  Both kinds of information should subscribe to the
principle of scaled presentation, that is, the degree of detail
presented should correspond directly to the amount of time and effort
put in by the reader.  More effort should always equal more reward.
When the two do not correlate tightly, people may quickly lose faith
and stop investing effort.</para>

<para>The corollary to all this is that <emphasis>appearances
matter</emphasis>.  Programmers in particular often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride, and it's no accident that so many programmers
exhibit an antipathy for marketing and public relations work.</para>

<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  For example, the very first thing a visitor learns about a
project is what its web site looks like.  This information is absorbed
before any of the actual content on the site is comprehended &mdash;
before any of the text has been read or links clicked on.  However
unjust it may be, people cannot help themselves from forming an
immediate first impression.  The site's appearance signals whether
care was or was not taken in organizing the project's presentation.
Humans have extremely sensitive antennae for detecting the investment
of care.  Most of us can tell in one glance whether a web site was
slapped together quickly or was given serious thought.  This is the
first piece of information your project puts out, and there is no way
to avoid it, because it is the channel in which further information
must flow.  If the channel itself is not well-built, people will
assume a similar lack of care applies to the code and everything else
associated with the project.  Such an impression can be overcome by
further exposure to the project &mdash; but only, of course, if the
visitor stays long enough for there to be further exposure.</para>

<para>Thus, one of the constant themes in this chapter will be the
importance of appearances.  Running a project is partly about
supplying information, but it's also about supplying comfort.  The
mere <emphasis>presence</emphasis> of certain standard offerings, in
the expected places, reassures users and developers who are deciding
whether they want to get involved.  It says that this project has its
act together, has anticipated the questions people will ask, and has
made an effort to answer them in a way that requires minimum exertion
by the asker.  By giving off an aura of preparedness, the project is
sending out a message: "Your time will not be wasted if you get
involved.", which is exactly what people need to hear.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-0.1">
<title>But First, Look Around</title>

<para>Before starting an open source project, there is one important
caveat:</para>

<para>Always look around to see if there's an existing project that
does what you want.  The chances are pretty good that whatever problem
you want solved now, someone else wanted solved before you.  If they
did solve it, and released their code under a free license, then
there's no reason for you to reinvent the wheel today.  There are
exceptions, of course: if you want to start a project as an
educational experience, than pre-existing code won't help; or maybe
the project you have in mind is so specialized that you know there is
zero chance anyone else has done it.  But generally, there's no point
not looking, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on <ulink
url="http://www.freshmeat.net/"/> (an open source project news site,
about which more later), and if that doesn't work, try <ulink
url="http://www.sourceforge.net/"/>.</para>

<para>Even if you don't find exactly what you were looking for, you
mind find something so close that it makes more sense to join that
project and add functionality, rather than starting from scratch
yourself.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-2-sect-1">
<title>Starting From What You Have</title>

<para>You've looked around, found that nothing out there really fits
your needs, and decided to start a new project.</para>

<para>What now?</para>

<para>The hardest part about launching a free software project is
transforming a private vision into a public one.  You (or your
organization) may know perfectly well what you want, but expressing
that goal comprehensibly to the world is a fair amount of work.  It is
essential, however, that you take the time to do it.  First, you and
the other founders must decide what the project is really about, and
write up a mission statement.  This part is usually not too hard,
though it can sometimes reveal unspoken assumptions and even
disagreements about the nature of the project &mdash; which is fine:
better to resolve those now than later.  The next step is to package
up the project for public consumption, and this is, basically, pure
drudgery.  It's so laborious because it consists mainly of organizing
and documenting things everyone already knows, "everyone", that is,
who's been involved in the project so far.</para>

<para>The people already involved do not need a
<filename>README</filename> file giving a project overview, nor a
design document, nor user manual, nor a carefully arranged code tree
that conforms to the informal but widespread standards of software
source distributions.  Whatever way the source code is arranged is
fine for them, because they're already accustomed to it anyway, and if
the code runs at all, they know how to use it.  It doesn't even
matter, for them, if the fundamental architectural assumptions of the
project are not spelled out; they're already familiar with all that
too.</para>

<para>Newcomers, on the other hand, do need these things.
Fortunately, they don't need them all at once.  It's not necessary for
you to provide every possible resource before taking a project public.
In a perfect world, perhaps, every new open source project would start
out life with a thorough design document, a complete user manual (with
special markings for features planned but not yet implemented),
beautifully and portably packaged code, capable of running on any
computing platform, and so on.  In reality, taking care of all these
loose ends would be prohibitively time-consuming, and furthermore,
some of it is exactly the sort of work that one can reasonably hope
volunteers will help with once the project is under way.</para>

<para>What <emphasis>is</emphasis> necessary, however, is that enough
investment be put into initial presentation that newcomers can get
past the initial obstacle of unfamiliarity.  Think of it as the first
step in a bootstrapping process, or as bringing the project to a kind
of minimum activation energy.  I've heard this threshold called the
<firstterm>hacktivation energy</firstterm>: the amount of energy
someone must put in before they start getting something back.  The
lower a project's hacktivation energy, the better.</para>

<para>Therefore, your first task is to determine the project's current
hacktivation energy, and take steps to bring it down to something
acceptable.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-1.1">
<title>Lowering the Hacktivation Energy</title>

<para>Let's put ourselves in the shoes of someone who's just heard
about your project, or maybe stumbled across it during their own
search for a solution.  The first thing they'll look for is a quick
description, a mission statement, so they can decide (within 30
seconds) whether or not they're interested in learning more.  This
should be prominently placed on the project's home page, preferably
right up near the project's name.</para>

<itemizedlist>
  <listitem>

  <para><emphasis role="bold">Mission Statement.</emphasis>
  The mission statement should be concrete, limiting, and above all,
  short.  Here's an example of a good one, from <ulink
  url="http://www.openoffice.org/"/>: 

  <blockquote>
  <para><emphasis>To create, as a community, the leading international
  office suite that will run on all major platforms and provide access
  to all functionality and data through open-component based APIs and
  an XML-based file format.</emphasis></para>
  </blockquote>

  In just a few words, they've hit all the high points, largely by
  drawing on the reader's prior knowledge.  By saying "<emphasis>as a
  community</emphasis>", they signal that no one corporation will
  dominate development; "<emphasis>international</emphasis>" means
  that the software will allow people to work in multiple languages
  and locales; "<emphasis>all major platforms</emphasis>" means it
  will be portable to Unix, Macintosh, and Windows.  The rest signals
  that open interfaces and easily understandable file formats are an
  important part of the goal.  They don't come right out and say that
  they're trying to be a free alternative to Microsoft Office, but
  most people can probably read between the lines.  Although this
  mission statement looks broad at first glance, in fact it is quite
  circumscribed: the words "<emphasis>office suite</emphasis>" mean
  something very concrete to those familiar with such software.
  Again, the reader's presumed prior knowledge (in this case probably
  from MS Office) is used to keep the mission statement
  concise.</para>

  <para>The nature of a mission statement depends partly on who is
  writing it, not just on the software it describes.  For example, it
  makes sense for OpenOffice.org to use the words "<emphasis>as a
  community</emphasis>", because the project was started, and is still
  largely sponsored, by Sun Microsystems.  By including those words,
  Sun indicates its sensitivity to worries that it might try to
  dominate the development process.  But open source projects that
  aren't sponsored by a single corporation probably don't need such
  language; after all, development by community is the norm, so there
  would ordinarily be no reason to list it as part of the
  mission.</para>

  </listitem>
</itemizedlist>

<para>With the mission statement, you've set up the first level of
participant filtering.  Anyone who sees your mission and stays
interested will want to read a more detailed description of the
project, perhaps some user or developer documentation, and then
download something.  But before they download anything, they'll want
to know for sure that it's open source:</para>

<itemizedlist>
  <listitem>
  <para><emphasis role="bold">State That It's Free.</emphasis> The
  front page must make it unambiguously clear that the project is open
  source.  This may seem obvious, but you would be surprised how many
  projects forget to do it.  I have seen free software project web
  sites where the front page not only did not say which particular
  free license the software was distributed under, but did not even
  state outright that the software was free at all.  Sometimes the
  crucial bit of information was relegated to the Downloads page, or
  the Developers page, or some other place that required one more
  mouse click to get to.  In extreme cases, the license was not given
  anywhere on the web site at all &mdash; the only way to find it out
  was to download the software and look inside.</para>

  <para>Needless to say, such an omission can lose many potential
  developers and users.  Don't make this mistake.  State up front that
  the project is "free software" or "open source software", and give
  the exact license.  A quick guide to choosing a license is given in
  <xref linkend="pfs-ch-2-sect-3"/>, and licensing issues are
  discussed in detail in <xref linkend="pfs-ch-3"/>.</para>
  </listitem>
</itemizedlist>

<para>Now our hypothetical visitor can determine, probably in a minute
or less, that they're interested in spending, say, at least five more
minutes investigating this intriguing project.  What will they look
for in that five minutes?</para>

<screen>

* development status indicator

* documentation (user & developer)

* downloads
  (refer to packaging section for more)

* mailing lists, or at least least some sort of address where
  already-existing active participants can be reached.

* screenshots / example output / something that will give them that
  instant-gratification reassurance they want that this is real

-----------------
Optional items:
-----------------

* bug tracker

* project news

* project history

* donations button

* developer guidelines
  (see http://www.openoffice.org/dev_docs/guidelines.html)

* related links

* discussion forums / irc

* search feature

</screen>


<remark>(Rewrite the paragraph below to say something like: this is
not the place for a general treatise on web design, but, especially
given that a project web site is targeted toward two different
audiences -- users and developers -- the general principle enunciated
below is important.)</remark>

<para>There should be links to user documentation, and it should be
obvious <emphasis>from looking at the links</emphasis> that they lead
to user documentation, not developer documentation.  It is a general
principle of clear web site design that one should have a rough idea
where a link goes before clicking on it.  In this case it's even more
important, because the web site has to target two different, though
often overlapping, types of visitors: potential users and potential
developers.  Always consider the site's presentation from the point of
view of each audience.</para>


<screen>
* README: 

  Give email addresses for mailing lists (if any), or feedback
  should either point to INSTALL, or contain that content itself.

* design document

  If starting from scratch:
     1) How open should the initial design work be?
     2) Choosing a language; avoiding language holy wars.
        Most important thing is, choose a language that you and the
        the other initial developers are comfortable with, and defend
        the language on *those* grounds, *not* on the grounds that
        it's better than some other possible language.

* packaging
  (Use cvs2svn as an example of how not to do it.)
</screen>

</sect2>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-1.2">
<title> Open-Sourcing an Existing Project </title>

<para> todo </para>

<screen> 
c) Open-sourcing an already-established project (e.g., Vesta).
Understanding that development will happen differently after the
project goes open.  Talk about the license implications; don't go into
detail (since the details will depend on the particulars of the
existing software), just point out that the issue is there, and is
serious.
</screen>

</sect2>


</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-2-sect-2">
<title>The Project Web Site</title>

<remark>(Bad transition from earlier arrangment -- fix.)</remark>

<para>So take the time to set up a good (meaning good-looking, as well
as contentful) project web site.  This is not the place for a general
treatise on web design, but here are some basic guidelines for setting
up a free software project site.</para>

<para>fooo</para>

<itemizedlist>

  <listitem>
  <para>State the development status of the project, and what its
  near-term goals and needs are (for example, it might be looking for
  developers with a particular kind of expertise).  The mission
  statement itself will usually not contain this information, because
  it looks to the future.  This mission statement is about what the
  project will be; the development status says what it is right now.
  Don't be afraid of looking bad, and don't give in to the temptation
  to hype the development status.  Everyone knows that software
  evolves by stages; there's no shame in saying "This is alpha
  software with known bugs.  It runs, and works at least some of the
  time, but use at your own risk."  Such language won't scare away the
  kinds of developers you need at that stage.  As for users, the very
  worst thing a project can do is attract users before the software is
  ready for them.  A reputation for instability or bugginess is very
  hard to shake, once acquired.  Conservativism pays off in the long
  run; it's always better for the software to be
  <emphasis>more</emphasis> stable than the user expected than less,
  and pleasant surprises produce the best kind of
  word-of-mouth.</para>

  <para>(By the way, <firstterm>alpha</firstterm> means a running
  prototype that may not have all the intended functionality, but has
  enough core functionality to be used.  The main purpose of alpha
  software is to generate feedback, so the developers know what to
  work on.  The next stage, <firstterm>beta</firstterm>, means the
  software has most or all of its intended functionality, but still
  has known bugs.  The purpose of beta is likewise to give developers
  feedback, but it's also expected that users can get real work done
  with the software.)</para>
  </listitem>

  <listitem>
  <para>The distribution mechanism should be as convenient, standard,
  and low-overhead as possible.  If you're trying to eradicate a
  disease, you don't distribute the medicine in such a way that it
  requires a non-standard syringe size to administer.  Likewise,
  software should conform to standard build and installation methods;
  the more it deviates from the standards, the more potential users
  and developers will give up and go away lost.</para>

  <para>That sounds obvious, but many projects don't bother to
  standardize their installation procedures until very late in the
  game, telling themselves they can do it any time: <emphasis>"We'll
  sort all that stuff out when the code is closer to being
  ready."</emphasis> What they don't realize is that by putting off
  the boring work of finishing the build and installation
  procedures, they are actually making the code take longer to get
  ready &mdash; because they lose developers who might otherwise have
  contributed to the code.  Boring work with a high payoff should
  always be done early, and significantly lowering the project's
  barrier to entry is a high payoff.</para>

  <para>The details of standardizing build and installation procedures
  are covered later in this chapter.  (###todo: link to where)</para>
  </listitem>

  <listitem>
  <para>Make it clear how to get involved as a developer.  If someone
  wants to contribute, the first thing they'll look for is contributor
  guidelines.  These will be covered in more detail below (###todo:
  link to where), but the basic elements are code documentation (not
  just comments, but a standalone design document), pointers to forums
  for interaction with other developers, and some indication of
  <emphasis>how</emphasis> development is usually done &mdash; for
  example, guidelines for submitting patches, and the procedures by
  which a contributor gets <firstterm>commit access</firstterm>, that
  is, the ability to put changes directly into the software without
  going through some other developer.</para>
  </listitem>

</itemizedlist>

<remark>(Maybe it would be good to put an image of a good example
project web site here, and an image of a bad one, for side-by-side
comparison?)</remark>

<remark>(Also, need to talk about the "canned website option", that
is, SourceForge or Berlios.de or one of those sites.)</remark>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-3">
<title>Choosing a License and Applying It</title>

<para>This section is intended to be a "quick start" guide to choosing
a license.  It provides an overview of the best-known licenses, and
why you might choose one over another.  You should read <xref
linkend="pfs-ch-3"/> to understand the detailed legal implications of
the different licenses, so you can understand how the license you
choose affects your ability to incorporate other free software into
yours.</para>

<para>There are a great many free software licenses to choose from.
Most of them we needn't consider, as they were written to satisfy the
particular legal needs of some corporation or person, and probably
wouldn't be appropriate for a new software project.  In this overview,
we will restrict ourselves to just the most commonly-used licenses.
In most cases, you will just want to choose one of these.</para>

<sect2 id="pfs-ch-2-sect-3.1">
<title>The "Do Anything" Licenses</title>

<para>If your primary goal is widespread adoption of the software by
both users and developers, and you don't mind the possibility of it
being used in proprietary products, then choose one of the following:
<firstterm>MIT-style</firstterm>, <firstterm>BSD-style</firstterm>, or
<firstterm>Apache-style</firstterm>.</para>

<variablelist>

  <varlistentry><term>MIT-style:</term>

    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/mit-license.php"/></para>

      <para>The MIT license is short, simple, and easy to understand.
      In fact, it's short enough to include whole right here: </para>

      <screen>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</screen>

    <para>As you can see, it places almost no restrictions on what
    people can do with the software, so long as they reproduce the
    copyright notice, and it carefully disclaims any liability on the
    part of the copyright holder.  It is called "MIT-style" because
    the Massachusetts Institute of Technology released free software
    under this license.  However, you do not need to be affiliated
    with MIT to use the same license for your programs.</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>BSD-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/bsd-license.php"/></para>

      <para>The BSD license is basically like the MIT, although it
      uses slightly different words to achieve the same effect.  It's
      a bit longer, so I won't reproduce it here; you can find it at
      the above link.  The main difference is that BSD-style licenses
      include a clause explicitly disavowing the right to use the
      licensor's name to endorse the software:</para>

      <screen>Neither the name of the &lt;ORGANIZATION&gt; nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written
permission.</screen>

      <para>It's not clear that without such a clause, a recipient of
      the software would have had the right to use the licensor's name
      anyway, but the clause removes any possible doubt.  For
      corporations releasing software, therefore, the BSD-style may
      be slightly preferable to MIT-style (however, for reasons
      detailed below, the Apache-style may be preferable to both of
      them).  In general, however, a liberal copyright license does
      not imply that recipients have any right to use or dilute your
      trademarks &mdash; copyright law and trademark law are two
      different beasts.</para>

      <para>The name "BSD" derives from "Berkeley Software
      Distribution", a much-revered version of the Unix operating
      system produced by the University of California at Berkeley and
      released under what became known as the "BSD license".</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>Apache-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.apache.org/licenses/"/></para>

      <para>The Apache license (version 2.0 as of this writing) is
      longer than either the BSD or MIT, but still quite readable, and
      the extra time needed to comprehend it is worth spending.  The
      Apache Software Foundation (<ulink
      url="http://www.apache.org/"/>) has taken great care to make
      sure the license encourages their goal of "open, collaborative
      development among individuals, industry, and nonprofit
      organizations".  The license includes provisions for protecting
      the trademarks and reputation of the distributing organization,
      preventing patent entanglements, accepting code contributions,
      and various other eventualities.  The terms of use and
      distribution that it allows are pretty much the same as with the
      BSD or MIT licenses.  It may be thought of as a more legalistic
      and thorough version of those two.</para>
    </listitem>
  </varlistentry>

</variablelist>

</sect2>

<sect2 id="pfs-ch-2-sect-3.2">
<title>The GPL</title>

<para>If you don't want your code to be used in proprietary programs,
then use the GNU General Public License (<ulink
url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is probably
the most widely recognized free software license in the world today.
This is in itself a big advantage, since potential users and
contributors will most likely already be familiar with it, and
therefore won't have to spend extra time to read and understand the
license.</para>

<para>The disadvantage of the GPL is that some programmers do not like
its contagiousness.  When GPL'd code is copied or linked into another
program, that program must, as a whole, be distributed under the GPL
as well.  Thus, the GPL is contagious, and software that incorporates
GPL'd code may end up narrowing the range of possible redistribution
terms.  Whether this is a good or a bad thing depends on who you ask
(I do not feel the GPL's terms are onerous, but I am also sympathetic
to the Free Software Foundation's goals).  In any case, it's fairly
rare for someone who would otherwise work on a project to refuse to do
so because it is under the GPL.  For that matter, it may be that there
are programmers who want reassurance that their contributions will not
be used in non-free products, and who are therefore
<emphasis>more</emphasis> comfortable with the GPL than with other
free licenses.</para>

<remark>This section needs to be expanded to describe how the
narrowing is symmetrical: by _not_ choosing the GPL, one can likewise
restrict.  See <ulink
url="http://www.dwheeler.com/essays/gpl-compatible.html"/>.  Possibly
rewrite default recommendation below to favor one of the BSD-style
licenses, instead of Apache.</remark>

<para>Note that the GPL's viral nature is more significant when your
software is a library instead of a standalone program.  The GPL is not
contagious across high-level invocation boundaries: if a non-GPL'd
program merely invokes a standalone GPL'd program, the former is not
automatically placed under the restrictions of the GPL.  However, if
otherwise non-GPL'd code requires linking against a GPL'd library,
then the distribution of the program as a whole must be under the GPL.
In other words, one cannot write a program which depends on a GPL'd
library and distribute the program as, say, an executable under some
other license, even if one distributes the source code to the GPL'd
library portion.  The entire work, source code and all, must be
distributed under the terms of the GPL.</para>

<para>These restrictions may be acceptable, if your first priority is
ensuring that all derivative works of your work are also free.  Again,
see <xref linkend="pfs-ch-3"/> for a more in-depth discussion of
these issues.</para>

</sect2>

<sect2 id="pfs-ch-2-sect-3.3">
<title>The Artistic License</title>

<para>Finally, there are licenses designed to allow free distribution
while strongly protecting the reputation of the author and the
"artistic integrity" of the work.  The best-known example of this kind
of license the <firstterm>Artistic
License</firstterm><footnote><para>I refuse to comment on the
pun.</para></footnote>, which is the license the
<firstterm>Perl</firstterm> scripting language is distributed under.
A template for the Artistic License is available from <ulink
url="http://opensource.org/licenses/artistic-license.php"/>.  It
allows free redistribution, modification, and all the usual stuff.
But it has some extra clauses requiring anyone who modifies the
software significantly to take steps to clarify that their version is
different from the standard version, by putting notices of
modification in files, and using different names for executables.  It
also has trademark and endorsement protection clauses similar to those
of the Apache license.</para>

</sect2>

<sect2 id="pfs-ch-2-sect-3.4">
<title>Help, I still can't decide which license to use...</title>

<para>If you're still not sure what to use, then go with Apache-style
or GNU GPL.  They're both fine licenses, you really can't go wrong,
and the intimidating legal language will give everyone the impression
you thought long and hard about it.</para>

</sect2>

<sect2 id="pfs-ch-2-sect-3.5">
<title>How to apply a license to your software.</title>

<para>Once you've chosen a license, you should state it on the
project's front page.  You don't need to include the actual text of
the license there; just give the name of the license, and make it link
to the full license text on another page.</para>

<para>This tells the public what license you
<emphasis>intend</emphasis> the software to be released under, but
it's not sufficient for legal purposes.  For that, the software itself
must contain the license.  The standard way to do this is to put the
full license text in a file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>), and then put a short notice at the top
of each source file, naming the copyright date, holder, and license,
and saying where to find the full text of the license.</para>

<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>

<screen>
    Copyright (C) &lt;year&gt;  &lt;name of author&gt;

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename>, but that's where it's usually put.  (You
could change the above notice to state that directly.)  This template
also gives a geographical address from which to request a copy of the
license.  Another common method is to give a link to a web page
containing the license.  Just use your judgement and point to wherever
you feel the most permanent copy of the license is maintained, which
might simply be somewhere on your project's web site.  In general, the
notice you put in each source file does not have to look exactly like
the one above, as long as it starts with the same notice of copyright
holder and date, states the name of the license, and makes it clear
where to view the full license.</para>

<para>If you use an Apache-style license, there are special provisions
regarding propagating the contents of a <filename>NOTICE</filename>
file in your distribution.  You could use this file to list
trademarks, attributions, patent notices, and any other information
that needs to be preserved in works derived from your work.  See the
<ulink url="http://www.apache.org/licenses/LICENSE-2.0">Apache
license</ulink> for details about this.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-4">
<title>Predicting Conflicts of Interest</title>

<para> todo </para>

<screen> 

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.

d) Conflicts of Interest.  In a funded project, the
           corporation or consortium supplying the money may have
           different goals than many of the volunteers have.  How to
           balance the funder's interests with the volunteers'
           interests without either side becoming disgruntled.  [ Case
           studies: Subversion, possibly others ]

These conflicts should be identified and answered early.
Preemptivity is the key.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-5">
<title>Announcing </title>

<para> todo </para>

<screen> 
   e) Announcing the project's inception.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-6">
<title> Making it Both Developer-Friendly and User-Friendly </title>

<para> todo </para>

<screen> 
   f) How to make a project appear developer-friendly from the start.

   note: state, in order to debunk, the fallacy of "it's more
   important to have code than good presentation."  Programmers are
   trained to believe that substance beats form every time; it's
   almost a moral position.  Unfortunately, it trips them up in
   situations when form *is* substance.

</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-7">
<title> Designing to Support Division of Labor </title>

<para> todo </para>

<screen> 
        g) How to make the project's architecture support division
           among many workers.  (Example: According to Tim [via Andy],
           Linus said that he found it easier to get volunteers
           because he knew how to break down the functionality or
           source code into chunks that different people could
           handle.)  This will tie into material in Chapter 5(a).
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-8">
<title> Understanding Developers' Motivations </title>

<para> todo </para>

<screen> 
        h) Understanding potential volunteers' motivations will help
           you set things up to attract them.  You can't build the
           lamp until you know what frequencies of light the moths
           are attracted to.  Oh, wait, maybe that's not such a good
           metaphor...
</screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

