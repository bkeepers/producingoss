<chapter id="pfs-ch-2">

<title>Getting Started <!-- [ 15-25 pp ] --></title>

<simplesect>

<para>This chapter is about how to introduce a new free software
project to the world.  We will approach the subject backwards.  In
real life, your first decision might be whether or not to take a
project open source, and all else would flow from that.  But the
question of <emphasis>whether</emphasis> isn't so easy to separate
from the question of <emphasis>how</emphasis>.  Therefore, we will
start by assuming you've already decided to open up a project, and
examine how to do it for various types of projects.  By the end, you
should have a pretty good feel for what would be involved in opening
up a specific project.</para>

<para>There is one caveat, however, important enough to potentially
short-circuit the entire decision process: if you're thinking of
starting an open source project, the first thing you should do is look
to see if there's an existing project that does what you want.</para>

<para>Of course, there are some exceptions to this rule.  If you want
to start a project as an educational experience, than pre-existing
code won't help.  Or it might be that that the project you have in
mind is so specialized that you know there is zero chance anyone else
has done it.  But such exceptional circumstances aside, the chances
are pretty good that whatever problem you want solved now, someone
else wanted solved before you.  If they did solve it, and released
their code under a free license, then there's no reason for you to
reinvent the wheel.</para>

Obviously, the first place to look is in your favorite search engine.
After that, try searching on <ulink url="http://www.freshmeat.net/"/>,
and if that doesn't work try <ulink
url="http://www.sourceforge.net/"/>.  (Freshmeat is a news site, 

</simplesect>


<!-- ========================== subsection =========================== -->
<sect1 id="pfs-ch-2-sect-1">
<title>Project Scale </title>

<para>The classic model of how free software projects get started is </para>

<screen>
        [Subsection: Different Species in the Genus:]
        Overview of different types of open source projects, from the
        just-scratching-an-itch-on-my-dorm-room-computer variety to
        highly publicized, centrally funded efforts such as Dresdner's
        OpenAdaptor project (see www.openadapter.org, see also
        www.softwareconservancy.org).

        Planning for bandwidth; the Slashdot effect.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-2">
<title>Setting Goals, Choosing a License </title>

<para> Setting goals, choosing a license (but refer to Chapter 3 for
the really detailed discussion of licenses.  It's important to *not*
dive into that swamp too early, since the licensing discussion will
probably be the part of the book most often skipped over in a first
reading) </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-3">
<title> Starting from Scratch </title>

<para> todo </para>

<screen>
     b) Starting from scratch:
         1) How open should the initial design work be?
         2) Choosing a language; avoiding language holy wars.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-4">
<title> Open-Sourcing an Existing Project </title>

<para> todo </para>

<screen> 
c) Open-sourcing an already-established project (e.g., Vesta).
Understanding that development will happen differently after the
project goes open.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-5">
<title>Predicting Conflicts of Interest</title>

<para> todo </para>

<screen> 

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.

d) Conflicts of Interest.  In a funded project, the
           corporation or consortium supplying the money may have
           different goals than many of the volunteers have.  How to
           balance the funder's interests with the volunteers'
           interests without either side becoming disgruntled.  [ Case
           studies: Subversion, possibly others ]

These conflicts should be identified and answered early.
Preemptivity is the key.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-6">
<title>Announcing </title>

<para> todo </para>

<screen> 
   e) Announcing the project's inception.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-7">
<title> Making it Both Developer-Friendly and User-Friendly </title>

<para> todo </para>

<screen> 
   f) How to make a project appear developer-friendly from the start.

   note: state, in order to debunk, the fallacy of "it's more
   important to have code than good presentation."  Programmers are
   trained to believe that substance beats form every time; it's
   almost a moral position.  Unfortunately, it trips them up in
   situations when form *is* substance.

</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-8">
<title> Designing to Support Division of Labor </title>

<para> todo </para>

<screen> 
        g) How to make the project's architecture support division
           among many workers.  (Example: According to Tim [via Andy],
           Linus said that he found it easier to get volunteers
           because he knew how to break down the functionality or
           source code into chunks that different people could
           handle.)  This will tie into material in Chapter 5(a).
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-9">
<title> Understanding Developers' Motivations </title>

<para> todo </para>

<screen> 
        h) Understanding potential volunteers' motivations will help
           you set things up to attract them.  You can't build the
           lamp until you know what frequencies of light the moths
           are attracted to.  Oh, wait, maybe that's not such a good
           metaphor...
</screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

