<chapter id="pfs-ch-6">

<title>Communications</title>

<simplesect>

<para>The ability to communicate clearly in written form is perhaps
the most important skill one can have in an open source environment.
In the long run it matters more than technical talents.  A great
programmer with lousy communications skills can only get one thing
done at a time, and even then may have trouble convincing others to
pay attention.  But a lousy programmer with good communications skills
can coordinate and persuade many people to do many different things,
and thereby have a significant effect on a project's direction and
momentum.</para>

<para>Curiously, there does not seem to be much correlation, in either
direction, between the ability to write good code and the ability to
communicate with one's fellow human beings.  There is some correlation
between programming well and describing technical issues well, but
describing technical issues is only a tiny part of the communications
in a project.  Much more important is the ability to empathize with
one's audience, to see one's own posts and comments as others see them
and to cause others to do the same.  Equally important is noticing
when a given medium no longer works for a certain type of
communication (perhaps because it doesn't scale well as the number of
users increases), and taking the time to do something about it.</para>

<para>All of which is obvious in theory&mdash;what makes it hard in
practice is that free software development environments are diverse
both in audiences and in communications mechanisms.  Should a given
thought be expressed in a post to the mailing list, or as an
annotation to an issue in the bug tracker, or as a comment in the
code?  When answering a question in a public forum, how much knowledge
can you assume on the part of the reader, given that the reader is not
only the one who asked the question in the first place, but all those
who might see your response?  How can the developers stay in
constructive contact with the users, without getting swamped by
feature requests, spurious bug reports, and general chatter?  How do
you tell when a medium has reached the limits of its capacity, and
what do you do about it?</para>

<para>These problems never go away completely, because any particular
solution will eventually be made obsolete by project growth or changes
in project structure.  Thus all participants need to be aware of how
communications can become bogged down, and as many as possible should
be involved in solutions.  Helping people to do this is a big part of
managing an open source project.  The sections that follow discuss
both how to conduct your own communications, and how to make
maintenance of communications mechanisms a priority for everyone in
the project<footnote><para>There has been some interesting academic
research on this topic, for example see <citetitle>Group Awareness in
Distributed Software Development</citetitle> by Gutwin, Penner, and
Schneider, at <ulink
url="http://hci.usask.ca/publications/2004/awareness-cscw04/"
/>.</para></footnote>.</para>

<!--
* Good prose

* Make it easy for people (do more work so your readers won't have to)

* Understand context

* Empathy: divining people's moods from what they write (or knowing
  when to privchat for more)

* The meta-mandate: persuading others to communicate well.  Because
  (see the next two paragraphs)...

* Terse is good, but always sign off with an emoticlue ("Good luck,",
  etc), so people understand that terse means simply terse and nothing
  more.  (See 'thoughts' for example.)  Give an example from #svn
  whereby someone asks a long complex torturous question about their
  repository perms, and the response is simply a URL.
-->

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-your-writing-is-you">
<title>Your Writing Is You</title>

<para><remark>Jim's point about how your writing
<emphasis>is</emphasis> you on the 'Net.  Include his story about that
kid.</remark></para>

<screen>
In progress:

* Use full sentences, with capitalization, and paragraphs
* Don't use no HTML mails
* When including screen output, script quotes, whatever, offset them
  consistently so it's clear what's going on.
* (scan the svn mailing list guidelines for other clues to include here)
* Make it easy for people (that is, include references, even when it
  costs you more time to do so, because it's a form of cultural training)
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-common-pitfalls">
<title>Avoiding Common Pitfalls</title>

<para> Avoiding common pitfalls; distinguishing productive threads
from unproductive ones; guiding threads toward usefulness without
being pushy.  </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-difficult-people">
<title>Difficult People</title>

<para> Dealing with difficult/rude participants on mailing lists.
Also, dealing with people who misuse or abuse procedural forms (such
as vetos, voting, filibustering, etc, which sadly
<emphasis>has</emphasis> been known to happen from time to time).  Ask
J about his experiences with you-know-who in this regard.</para>

<para><remark>Some truly insidious people look for wedgepoints in the
procedures.  For example, in a debate that won't consense, the group
will try to at least clarify the points of disagreement, so that a
reasonable ballot can be made up for voting.  The obstructionist who
knows the vote could go against him will try to delay it, by
constantly complexifying the questino of what should be on the ballot
in the first place (usually by objecting to reasonable suggestions or
by introducing unexpected new items to the ballot).  Strategy:
tolerate this for a while.  Then start keeping notes.  Then gather
allies privately.  Then raise the issue publicly, using the notes as
evidence... Unfortunately, there is a great danger of looking bad
yourself when you try to combat this, so you may need to engage in a
whispering campaign first.  Of course, it can't
<emphasis>look</emphasis> like a whispering campaign, it has to look
like innocent inquiry.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-codifying-tradition">
<title>Codifying Tradition</title>

<para><remark>See <ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate
concern.  Log message templates.  Make sure that commit reviews apply
to log messages and other "meta" aspects of the commit as well as to
the code itself.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-growth">
<title>Handling Growth</title>

<para><remark>Dividing into multiple forums.  Key is to make sure the
purpose of each forum is clear, consciously steer people (e.g.,
mailing list crossposts, irc channel redirects) to the right place,
make sure there is no psychological balkanization (lurkers are always
allowed, etc).  Link to guidelines; then, instead of shouting at
people, calmly point them to the guidelines.</remark></para>

<para><remark>The part below was originally in the IRC section in
Chapter 3, but really belongs here.  Open questions: should it be a
separate subsection?  Should it combine mailing lists and IRC, or just
focus on IRC?</remark></para>

<para>As a project gets more popular, it is inevitable that more and
more inexperienced people will show up in the IRC channels.  Although
this is desirable and a sign of success, it will naturally have
destabilizing effects at first.  Longtime channel users will begin to
feel overwhelmed, as the old strategy of individually training each
newcomer in channel conventions fails to scale to the new population
size.  There will be more of a tendency for conversations to drift off
topic and become "noise" as far as the channel's purpose is concerned.
Experienced users may react by venting their frustration, often at
people who had no idea they were doing anything wrong.</para>

<para><remark>Here's how a really busy channel handles it.  Compare
this with the earlier topic example given in Chapter 3:</remark></para>

<screen>
   You are now talking on #linuxhelp
   
   Topic for #linuxhelp is Please READ
   http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
   http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
   rules are at http://www.nerdfest.org/lh_rules.html | Please consult
   http://kerneltrap.org/node/view/799 before asking about upgrading to a
   2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc ->
   update to 2.6.8.1 or 2.4.27 | hash algo disaster:
   http://tinyurl.com/6w8rf | reiser4 out
</screen>

<para><remark>(Also, note how on-topic enforcement should be much
looser in IRC, because it is really a social medium.  Don't ask people
to go out-of-band unless they're actually interfering with stuff, and
even then make it clear that the request is only temporary, and that
when the channel's less busy it won't matter so much.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-using-archives">
<title>Conspicuous Use of Archives</title>

<para><remark>The importance of having all communications be logged
and be searchable, with stable references.  Describe the misery that
results when this is not available -- for example, the pain of the
contactor.se/~dast "route around" that resulted from the lossage of
the native tigris.org mail archiver.  Written guidelines vs precedence
is like the distinction between English statutory law and common law.
Good archiving is essential for the same reason.  It's like an oral
tradition with a video camera constantly running.</remark></para>

<para><remark>Perfect example: a named anchor for *every* FAQ
item.</remark></para>

<remark>(Also, get Brian B's story of the FreeBSD IRC archives
here.)</remark>

<para><remark>Redundancy example: ChangeLogs in CVS, 'cvs log', 'svn
log', CIA logs, etc.  Same information, different presentations.
Mention cvs2cl for CVS here?</remark></para>

<sect2 id="pfs-bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para><remark>Note the danger of the bug tracker turning into a
discussion forum, when mailing lists should really be used.  Keep the
mathematical analogy in mind, though this may not be the best way to
describe it in words: the question is, is the discussion potentially
divergent or convergent?  If it's stuff like getting more technical
details from the original reporter, or pointing out a gotcha with a
proposed solution, then it's convergent.  If it's a philosophical
questioning of the bug's justification for being, or if the bug is one
specific case that reveals a much wider problem, then the discussion
might end up divergent, which means it should be on the development
mailing list, and the URL to the thread should be recorded in the bug
when the discussion dies down.  Note that those involved with the bug
may find this laborious, but this is a writer-responsible culture:
more important to make things easy for the tens or hundreds of people
who may read the bug than for the 3 or 5 people writing to
it.</remark></para>

<para><remark>How much to reproduce data in the tracker?  Link to the
mail thread, or cut-and-paste it, or summarize it with some pasting
but then link to thread for details?  The overriding concern should
be convenience of readers.  So, paste all you want, *and* link to the
thread.  Remember, the usual problem of data duplication does not
exist here, because archives are static data anyway.</remark></para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-private-chatting">
<title>Open vs Private Interactions</title>

<para>When to operate overtly, when to operate behind the scenes.</para>

<para><remark>(Give the example of bouncing a review back to Mike (or
was it Ben?) to have them post it, so the exchange could be public,
even though we were sitting right next to each other.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-internal-vs-external">
<title>Internal vs External Communications</title>

<para> Internal vs external communications.  In free software
projects, there tends to be a smooth continuum between purely internal
discussions and public relations statements.  Discuss how to navigate
this continuum.  Describe how to hook into the standard real-time news
distribution forums (RSS, CIA, etc), and the meta-distribution sites
such as Freshmeat.  </para>

</sect1>


<!-- This used to be in Chapter 2.  It's not really about
     communications either, but where is a better place?  Should it
     be cut entirely? 

   Understanding potential volunteers' motivations will help you set
   things up to attract them.  You can't build the lamp until you know
   what frequencies of light the moths are attracted to.  Oh, wait,
   maybe that's not such a good metaphor...

   For example, talk about the sharp distinction between those who
   were interested in reaching 1.0 versus those who were interested in
   adding new features to Subversion.  (Philip, Ghudson, etc.)
-->

<para><remark>(Another example: inclusion of internal issue numbers in
scarab commits.  Though not strictly about money, it is about the
relationship between internal/profit-driven, and external/volunteer
development.)</remark></para>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-soft-topics">
<title>The Softer the Topic, the Longer the Debate</title>

<para><remark>The need for this section grows out of Andy's comment
in <xref linkend="pfs-consensus-democracy"/>: "I think consensus is
probably most likely to fail in non-technical issues: publicity,
organization, funding, support issues, etc."  Sort of.  It doesn't
necessarily fail more often, but it does require more patience.
People can participate in these arguments forever, because there are
no qualifications necessary for doing so, no clear way to decide
(even afterwards) if a decision was wrong, and because simply
outwaiting the opposition is sometimes a successful tactic.  Also,
the process of reaching consensus can be more damaging, because the
potential for ad hominem or other unfair attacks is higher in "soft"
issues.</remark></para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-bikesheds">
<title>Why Should I Care What Color the Bikeshed Is?</title>

<para><remark>Put the Poul-Henning Kamp bikeshed material here.  We've
got his permission to include it in the book; he'll probably want to
me clean up the few typos first.</remark></para>

<para><remark>The original is at <ulink
url="http://www.freebsd.org/cgi/getmsg.cgi?fetch=506636+517178+/usr/local/www/db/text/1999/freebsd-hackers/19991003.freebsd-hackers"/>.
Its enshrinement in the FreeBSD documentation is at <ulink
url="http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING"/>.</remark></para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-holy-wars">
<title>Avoid Holy Wars</title>

<para>A <firstterm>Holy War</firstterm> is a dispute, usually over a
relatively minor issue, which has no hope of being resolved on the
merits of the arguments, but where people feel passionate enough to
continue arguing anyway in the hope that their side will
prevail.</para>

<para>Once a holy war has started, it generally cannot be resolved to
everyone's satisfaction.  It does no good to point out, in the midst
of a holy war, that a holy war is going on.  Everyone knows that
already.  Unfortunately, a common feature of holy wars is disagreement
on the very question of <emphasis>whether</emphasis> the dispute is
resolveable by continued discussion.  Viewed from outside, it is clear
that neither side is changing the other's mind.  Viewed from inside,
the other side is being obtuse and not thinking clearly, but they
might come around if browbeaten enough.  Now, I am
<emphasis>not</emphasis> saying there's never a right side in a holy
war.  Sometimes there is&mdash;in the holy wars I've participated
in, it's always been my side, of course.  But it doesn't matter,
because there's no algorithm for convincingly demonstrating that one
side or the other is right.</para>

<para>A common, but unsatisfactory, way people try to resolve holy
wars is to say "We've already spent far more time and energy
discussing this than it's worth!  Can we please just drop it?"  There
are two problems with this.  First, that time and energy has already
been spent and can never be retrieved&mdash;the only question now
is, how much <emphasis>more</emphasis> effort remains?  If some people
feel that just a little more discussion will bring the issue to a
close, then it still makes sense (from their point of view) to
continue.</para>

<para>The other problem with asking for the matter to be dropped is
that this is often equivalent to allowing one side, the status quo, to
declare victory by inaction.  And in some cases, the status quo is
known to be unacceptable anyway: everyone agrees that some decision
must be made, some action taken.  Dropping the subject would be worse
for everyone than simply giving up the argument would be for anyone.
But since that dilemma applies to all equally, it's still possible to
end up arguing forever about what to do.</para>

<para>So how should you handle a holy war?</para>

<para>The first answer is, try to set things up so they don't happen.
This is not as hopeless as it sounds:</para>

<para><remark>(finish) This is done by anticipating standard holy
wars: languages, licences (<xref linkend="pfs-avoiding-license-wars"/>),
reply-to munging.  Regarding language holy wars: most important thing
is, choose a language that you and the the other initial developers
are comfortable with, and defend the language on *those* grounds,
*not* on the grounds that it's better than some other possible
language.  Never ever let the conversation degenerate into an academic
comparison of programming languages (this seems to happen especially
often when someone brings up Perl); that's one of many examples of a
death topic that should be stopped before it gets
started.</remark></para>

<para><remark>When a holy war can't be avoided, decide early how much
you care, and then be willing to publicly give up.  When you do so,
say that you're backing out because the holy war isn't worth it, but
don't be bitter and <emphasis>don't</emphasis> take the opportunity
for a last parting shot at the opposing side's arguments.  Giving up
is only effective when done gracefully.</remark></para>

<para>For more historical background on holy wars, see <ulink
url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, and the
paper by Danny Cohen that popularized the term, <ulink
url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
