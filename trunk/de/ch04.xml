<chapter id="social-infrastructure">

<!--
<title>Social and Political Infrastructure</title>
-->
<title>Soziale und politische Infrastruktur</title>

<simplesect>

<!--
<para>The first questions people usually ask about free software are
"How does it work?  What keeps a project running?  Who makes the
decisions?"  I'm always dissatisfied with bland responses about
meritocracy, the spirit of cooperation, code speaking for itself, etc.
The fact is, the question is not easy to answer.  Meritocracy,
cooperation, and running code are all part of it, but they do little
to explain how projects actually run on a day-to-day basis, and say
nothing about how conflicts are resolved.</para>
-->
<para>Das erste, was viele über freie Software wissen wollen, ist
meist: "Wie funktioniert das? Was hält ein Projekt am Laufen? Wer
trifft die Entscheidungen?". Ich bin immer unzufrieden mit dem faden
Geschmack der Antworten über Meritokratie, den Geist der 
Zusammenarbeit, Code der für sich selbst spricht, usw. Tatsache ist,
die Frage ist nicht so leicht zu beantworten. Leistung, Zusammenarbeit
und laufender Code gehören zwar alle dazu, sagen aber nichts über den
täglichen Ablauf in einem Projekt, oder wie Konflikte gelöst 
werden.</para>

<!--
<para>This chapter tries to show the structural underpinnings
successful projects have in common.  I mean "successful" not just in
terms of technical quality, but also operational health and
survivability.  Operational health is the project's ongoing ability to
incorporate new code contributions and new developers, and to be
responsive to incoming bug reports.  Survivability is the project's
ability to exist independently of any individual participant or
sponsor&mdash;think of it as the likelihood that the project would
continue even if all of its founding members were to move on to other
things.  Technical success is not hard to achieve, but without a
robust developer base and social foundation, a project may be unable
to handle the growth that initial success brings, or the departure of
charismatic individuals.</para>
-->
<para>Dieses Kapitel soll zeigen, welche Grundbausteine zu einem
erfolgreichen Projekt gehören. Mit "erfolgreich" meine ich nicht nur
die technische Qualität, sondern auch die Gesundheit der Gemeinschaft
und seine Überlebensfähigkeit. Die Gesundheit bezieht sich auf die
Fähigkeit eines Projeks, neue Codebeiträge und Entwickler aufzunehmen,
sowie auf eingehende Bug-Meldungen zu reagieren. Überlebensfähigkeit
bedeutet, unabhängig von irgendeinem Beteiligten oder Geldgeber 
fortbestehen zu können &ndash; betrachten Sie es als die Wahrscheinlichkeit
für das Weiterleben eines Projekts, selbst wenn alle Gründungsmitglieder
ihre Sachen packen und sich etwas anderem widmen. Technischer Erfolg
ist leicht zu erreichen, aber ohne eine solide Entwicklergemeinschaft
wird ein Projekt scheitern, sobald es wächst, Erfolg hat oder ein
charismatisches Mitglied verliert.</para>

<!--
<para>There are various ways to achieve this kind of success.  Some
involve a formal governance structure, by which debates are resolved,
new developers are invited in (and sometimes out), new features
planned, and so on.  Others involve less formal structure, but more
conscious self-restraint, to produce an atmosphere of fairness that
people can rely on as a <foreignphrase>de facto</foreignphrase> form
of governance.  Both ways lead to the same result: a sense of
institutional permanence, supported by habits and procedures that are
well understood by everyone who participates.  These features are even
more important in self-organizing systems than in centrally-controlled
ones, because in self-organizing systems, everyone is conscious that a
few bad apples can spoil the whole barrel, at least for a while.</para>
-->
<para>Es gibt verschiedene Wege zu diesem Erfolg. Manche benutzen 
formelle Leitungsstrukturen um ihre Debatten zu lösen, 
neue Entwickler einzuladen (manchmal auch auszuladen), neue Funktionen
zu planen usw. Andere haben weniger formelle Strukturen, dafür halten
sich die Teilnehmer bewusst zurück, um eine gerechte Atmosphäre
herzustellen, in der sich Leute auf diese Quasi-Regierungsform
verlassen können. Beide Wege führen zum gleichen Ziel: das Gefühl einer
beständigen Institution, die durch Gewohnheiten und Abläufe unterstützt
wird, die alle Beteiligten gut verstehen. Diese Eigenschaften sind bei
selbstorganisierenden Systemen noch wichtiger, als bei solchen mit
einer zentralen Verwaltung, da jeder sich darüber im Klaren ist, dass
ein paar faule Äpfel die ganze Kiste verderben können, zumindest eine
Zeit lang.</para>

<sect1 id="forkability">
<!--
<title>Forkability</title>
-->
<title>Aufspaltbarkeit</title>

<!--
<para>The indispensable ingredient that binds developers together on a
free software project, and makes them willing to compromise when
necessary, is the code's <firstterm>forkability</firstterm>: the
ability of anyone to take a copy of the source code and use it to
start a competing project, known as a <firstterm>fork</firstterm>.
The paradoxical thing is that the <emphasis>possibility</emphasis> of
forks is usually a much greater force in free software projects than
actual forks, which are very rare.  Because a fork is bad for everyone
(for reasons examined in detail in
<xref linkend="forks"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>), the more serious
the threat of a fork becomes, the more willing people are to
compromise to avoid it.</para>
-->
<para>Entwickler in einem freien Softwareprojekt sind durch eine
unverzichtbare Zutat verbunden: die Möglichkeit, es zu
<firstterm>forken</firstterm><footnote><para>de. Gabel im Sinne einer
Gabelung</para></footnote>: jeder kann 
eine Kopie des Quellcodes nehmen und daraus ein neues Projekt starten.
Dieses wird als Fork bezeichnet und steht meistens in Konkurrenz zu dem
ursprünglichen Projekt. Das paradoxe
daran ist, dass die <emphasis>Möglichkeit</emphasis> von Forks zumeist
ein viel größerer Antrieb ist, als ein tatsächlich bestehender Fork,
der übrigens sehr selten eintritt. Ein Fork ist schlecht für alle
(die Gründe dafür werden in
<xref linkend="forks"/><phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> genauer untersucht),
je ernster die Gefahr eines Forks wird, desto größer ist die
Bereitschaft der Projektbeteiligten, Kompromisse einzugehen, um diese
Gefahr abzuwenden.</para>

<!--
<para>Forks, or rather the potential for forks, are the reason there
are no true dictators in free software projects.  This may seem like a
surprising claim, considering how common it is to hear someone called
the "dictator" or "tyrant" in a given open source project.  But this
kind of tyranny is special, quite different from the conventional
understanding of the word.  Imagine a king whose subjects could copy
his entire kingdom at any time and move to the copy to rule as they
see fit.  Would not such a king govern very differently from one whose
subjects were bound to stay under his rule no matter what he
did?</para>
-->
<para>Ein Fork, oder vielmehr das Potential dafür, ist der Grund, dass 
freie Software-Projekte keine wirklichen Diktatoren haben. Das klingt
überraschend, wenn man bedenkt, wie viele "Diktatoren" oder "Tyrannen"
es bei verschiedenen Open-Source-Projekten gibt. Diese Art der 
Tyrannei ist aber etwas Besonderes, völlig verschieden von dem
gewöhnlichen Verständnis des Wortes. Stellen Sie sich einen König vor,
dessen Untertanen jederzeit eine Kopie seines Königreichs machen
könnten, in dem sie selbst nach eigenem Ermessen regieren könnten. Würde
dieser König sich nicht völlig anders benehmen, als einer dessen
Untertanen auf Gedeih und Verderb an ihn gebunden sind?</para>

<!--
<para>This is why even projects that are not formally organized as
democracies are, in practice, democracies when it comes to important
decisions.  Replicability implies forkability; forkability implies
consensus.  It may well be that everyone is willing to defer to one
leader (the most famous example being Linus Torvalds in Linux kernel
development), but this is because they <emphasis>choose</emphasis> to
do so, in an entirely non-cynical and non-sinister way.  The dictator
has no magical hold over the project.  A key property of all open
source licenses is that they do not give one party more power than any
other in deciding how the code can be changed or used.  If the dictator
were to suddenly start making bad decisions, there would be
restlessness, followed eventually by revolt and a fork.  Except, of
course, things rarely get that far, because the dictator compromises
first.</para>
-->
<para>Projekte sind deshalb, auch ohne formal demokratische
Struktur, faktisch Demokratien, zumindest bei wichtigen Entscheidungen.
Die Kopierbarkeit von Projekten impliziert die Aufspaltbarkeit; 
diese wiederum impliziert Konsens. Möglich, dass eine große Bereitschaft
besteht, einem Anführer zu vertrauen (das bekannteste Beispiel ist
wohl Linus Torvalds bei der Entwicklung des Linux-Kernels), aber nur
deshalb, weil sie es sich so <emphasis>ausgesucht</emphasis> haben, und
das ist ganz und gar nicht ironisch oder zynisch gemeint. Der Diktator hat
keine magische Macht über das Projekt. Eine wesentliche Eigenschaft
aller Open-Source-Lizenzen ist, dass sie keiner einzelnen Partei die
Entscheidungsgewalt über Änderungen am Code oder seine Nutzung einräumen.
Wenn der Diktator plötzlich anfangen würde, schlechte Entscheidungen zu 
treffen, würde das Unruhe hervorrufen, gefolgt von einer Revolte
und einem Fork. Aber so weit kommt es meist nicht, da der Diktator
vorher Kompromisse eingeht.</para>

<!--
<para>But just because forkability puts an upper limit on how much
power anyone can exert in a project doesn't mean there aren't
important differences in how projects are governed.  You don't want
every decision to come down to the last-resort question of who is
considering a fork.  That would get tiresome very quickly, and sap
energy away from real work.  The next two sections examine different
ways to organize projects such that most decisions go smoothly.  These
two examples are somewhat idealized extremes; many projects fall
somewhere along a continuum between them.</para>
-->
<para>Aber auch wenn die Aufspaltbarkeit die Obergrenze für die Macht
Einzelner im Projekt bestimmt, heißt das nicht, dass es nicht große
Unterschiede in der Leitung von Projekten geben würde. Sie werden nicht 
jede einzelne Entscheidung auf die Frage hinauslaufen lassen wollen, ob
das jemanden zu einem Fork veranlassen könnte. Das würde ermüdend wirken 
und eine Menge Energie von der eigentlichen Arbeit abziehen. 
Die nächsten beiden Abschnitte untersuchen
die verschiedenen Wege, Projekte so zu organisieren, dass die 
meisten Entscheidungen reibungslos verlaufen. Diese beiden Beispiele 
sind zugegeben idealisierte Grenzfälle; viele Projekte bewegen sich 
irgendwo dazwischen.</para>

</sect1>

</simplesect>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator"></simplesect>
<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<!--
<title>Benevolent Dictators</title>
-->
<title>Gütige Diktatoren</title>

<!--
<para>The <firstterm>benevolent dictator</firstterm> model is exactly
what it sounds like: final decision-making authority rests with one
person, who, by virtue of personality and experience, is expected
to use it wisely.</para>
-->
<para>Das Modell des <firstterm>gütigen Diktators</firstterm>
entspricht genau dem, wonach es sich anhört: Die letzte
Entscheidungsgewalt liegt bei einer Person, von der man aufgrund ihrer
Persönlichkeit und Erfahrung erwartet, dass sie mit dieser weise 
umgeht.</para>

<!--
<para>Although "benevolent dictator" (or <firstterm>BD</firstterm>)is
the standard term for this role, it would be better to think of it as
"community-approved arbitrator" or "judge".  Generally, benevolent
dictators do not actually make all the decisions, or even most of the
decisions.  It's unlikely that one person could have enough expertise
to make consistently good decisions across all areas of the project,
and anyway, quality developers won't stay around unless they have some
influence on the project's direction.  Therefore, benevolent dictators
commonly do not dictate much.  Instead, they let things work
themselves out through discussion and experimentation whenever
possible.  They participate in those discussions themselves, but as
regular developers, often deferring to an area maintainer who has more
expertise.  Only when it is clear that no consensus can be reached,
and that most of the group <emphasis>wants</emphasis> someone to guide
the decision so that development can move on, do they put their foot
down and say "This is the way it's going to be."  Reluctance to make
decisions by fiat is a trait shared by virtually all successful
benevolent dictators; it is one of the reasons they manage to keep the
role.</para>
-->
<para>Auch wenn der Begriff "gütiger Diktator", im Englischen bekannt 
als "benevolent dictator" (oder <firstterm>BD</firstterm>), der übliche 
Begriff für diese Rolle ist, wäre es besser, ihn als einen von der
Gemeinschaft anerkannten Vermittler oder Richter zu betrachten. Im
allgemeinen treffen gütige Diktatoren nicht alle oder auch nur die
meisten Entscheidungen. Es ist ohnehin unwahrscheinlich, dass eine
einzelne Person genügend Kenntnisse hat, um in einem größeren Projekt
durchweg gute Entscheidungen treffen zu können. Hochrangige Entwickler
werden sich nicht lange am Projekt beteiligen, wenn sie nicht zumindest
ein Stückweit Einfluss auf seine Richtung haben. Deshalb diktieren
gütige Diktatoren nicht besonders viel. Stattdessen lassen sie möglichst
viel ohne ihr Zutun, durch Diskussionen oder Experimente entscheiden. Sie
nehmen zwar auch selber an diesen Diskussionen teil, jedoch nur als
gewöhnliche Entwickler, oftmals verweisen sie auf einen Zuständigen, mit
mehr Kenntnissen über einen bestimmten Bereich. Nur wenn offensichtlich 
wird, dass kein Konsens erreicht werden kann und dass der größte Teil der 
Gruppe eine Entscheidung haben <emphasis>will</emphasis>, damit die 
Entwicklung fortgesetzt werden kann, sprechen sie ein Machtwort. Der 
Widerwille gegen Entscheidungen von oben ist ein Wesenszug, 
den praktisch alle erfolgreichen gütigen Diktatoren teilen; er ist 
einer der Gründe, dass sie es schaffen, diese Rolle zu behalten.</para>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator-qualifications"></simplesect>
<sect2 id="benevolent-dictator-qualifications">
<!--
<title>Who Can Be a Good Benevolent Dictator?</title>
-->
<title>Wer kann ein gütiger Diktator sein?</title>

<!--
<para>Being a BD requires a combination of traits.  It needs, first of
all, a well-honed sensitivity to one's own influence in the project,
which in turn brings self-restraint.  In the early stages of a
discussion, one should not express opinions and conclusions with so
much certainty that others feel like it's pointless to dissent.
People must be free to air ideas, even stupid ideas.  It is inevitable
that the BD will post a stupid idea from time to time too, of course,
and therefore the role also requires an ability to recognize and
acknowledge when one has made a bad decision&mdash;though this is
simply a trait that <emphasis>any</emphasis> good developer should
have, especially if she stays with the project a long time.  But the
difference is that the BD can afford to slip from time to time without
worrying about long-term damage to her credibility.  Developers with
less seniority may not feel so secure, so the BD should phrase
critiques or contrary decisions with some sensitivity for how much
weight her words carry, both technically and psychologically.</para>
-->
<para>Ein gütiger Diktator braucht eine Kombination verschiedener 
Wesenszüge. Erstens bedarf es eines feinsinniges Gespürs für den 
eigenen Einfluss im Projekt, das wiederum Zurückhaltung mit sich 
bringt. In der frühen Phase einer Diskussion sollte man nicht seine
Meinungen und Folgerungen mit einer solchen Sicherheit ausdrücken, 
dass andere das Gefühl bekommen, es wäre sinnlos zu widersprechen. 
Menschen sollten die Freiheit haben, ihre Ideen auszudrücken, selbst 
blöde Ideen. Es lässt sich natürlich nicht vermeiden, dass der gütige 
Diktator ab und zu selber eine blöde Idee vorschlägt, weshalb die 
Rolle auch die Fähigkeit erfordert, die eigenen schlechten 
Entscheidungen zu erkennen und sie als solche zu akzeptieren &ndash; wobei 
das ein Wesenszug ist, den <emphasis>jeder</emphasis> gute Entwickler 
aufweisen sollte, insbesondere wenn er lange beim Projekt bleibt. Der 
Unterschied ist aber, dass der gütige Diktator sich ab und zu solche 
Patzer leisten kann, ohne sich über sein Ruf all zu viele Sorgen machen zu 
müssen. Neue Entwickler werden sich weniger selbstsicher fühlen, also 
sollte der gütige Diktator seine Kritik mit etwas Gespür, sowohl für 
das technische als auch das psychologische Gewicht seiner Worte 
formulieren.</para>

<!--
<para>The BD does <emphasis>not</emphasis> need to have the sharpest
technical skills of anyone in the project.  She must be skilled enough
to work on the code herself, and to understand and comment on any
change under consideration, but that's all.  The BD position is
neither acquired nor held by virtue of intimidating coding skills.
What <emphasis>is</emphasis> important is experience and overall
design sense&mdash;not necessarily the ability to produce good
design on demand, but the ability to recognize good design, whatever
its source.</para>
-->
<para>Der gütige Diktator muss <emphasis>nicht</emphasis> die besten
technischen Fähigkeiten im Projekt haben. Er muss lediglich gut genug 
sein, um selber am Code zu arbeiten und einen Kommentar zu einer in
Frage stehenden Änderung abgeben zu können, mehr aber nicht. Die 
Position des gütigen Diktators kann man sich weder durch
einschüchternd gute Programmierfähigkeiten aneignen noch behalten.
<emphasis>Wichtig</emphasis> ist vor allem Erfahrung und ein
allgemeines Gespür für die Architektur von Quellcode &ndash; nicht 
unbedingt die Fähigkeit, auf Befehl guten Code zu produzieren, wohl 
aber die Fähigkeit, guten Code unabhängig von der Quelle zu 
erkennen.</para>

<!--
<para>It is common for the benevolent dictator to be a founder of the
project, but this is more a correlation than a cause.  The sorts of
qualities that make one able to successfully start a
project&mdash;technical competence, ability to persuade other people
to join, etc.&mdash;are exactly the qualities any BD would need.  And
of course, founders start out with a sort of automatic seniority,
which can often be enough to make benevolent dictatorship appear the
path of least resistance for all concerned.</para>
-->
<para>Der gütige Diktator ist auch häufig der Gründer des Projekts, 
was sich aber eher so ergibt, als das es ein Grund 
wäre. Die Qualitäten die es ermöglichen, erfolgreich ein Projekt  
zu starten &ndash; technische Kompetenz, die Fähigkeit andere zur
Beteiligung überzeugen zu können, usw. &ndash; sind genau die 
Qualitäten, die jeder gütige Diktator besitzen muss. Natürlich besitzen
die Gründer auch automatisch eine gewisse Erfahrung mit dem Projekt, 
was ausreichen kann, allen Beteiligten eine gütige Diktatur 
als einfachsten Weg erscheinen zu lassen.</para>

<!--
<para>Remember that the potential to fork goes both ways.  A BD can
fork a project just as easily as anyone else, and some have
occasionally done so, when they felt that the direction they wanted to
take the project was different from where the majority of other
developers wanted to go.  Because of forkability, it does not matter
whether the benevolent dictator has root (system administrator
privileges) on the project's main servers or not.  People sometimes
talk of server control as though it were the ultimate source of power
in a project, but in fact it is irrelevant.  The ability to add or
remove people's commit passwords on one particular server affects only
the copy of the project that resides on that server.  Prolonged abuse
of that power, whether by the BD or someone else, would simply lead to
development moving to a different server.</para>
-->
<para>Bedenken Sie, dass ein Fork aus beiden Richtungen droht. Ein
gütiger Diktator kann genau so wie jeder andere einen Fork anfangen,
und das haben gelegentlich schon welche gemacht, sobald sie das Gefühl
hatten, das sie das Projekt in eine andere Richtung führen sollten,
als die Mehrheit der übrigen Entwickler. Da jeder die Möglichkeit zu 
einem Fork hat, ist es egal, ob der gütige Diktator vollen
Zugriff auf die Server des Projekts hat oder nicht. Die Leute reden 
mitunter vom Zugriff auf den Server, als sei er die ultimative 
Quelle der Macht in einem Projekt, tatsächlich ist er aber 
bedeutungslos. Die Fähigkeit, Benutzer zur Versionsverwaltung
hinzuzufügen oder zu entfernen, beeinflusst nur die Kopie des Projekts
die auf dem Server liegt. Anhaltender Missbrauch dieser Macht, ob vom 
gütigen Diktator oder jemand anderem, würde einfach zum Umzug der 
Entwicklung auf einem anderen Server führen.</para>

</sect2>

<!--
<para>Whether your project should have a benevolent dictator, or would
run better with some less centralized system, largely depends on who
is available to fill the role.  As a general rule, if it's simply
obvious to everyone who should be the BD, then that's the way to go.
But if no candidate for BD is immediately obvious, then the project
should probably use a decentralized decision-making process, as
described in the next section.</para>
-->
<para>Ob Ihr Projekt einen gütigen Diktator haben sollte oder mit 
einem weniger zentralisierten System besser laufen würde, hängt 
größtenteils davon ab, wer die Rolle einnehmen könnte. Eine gute 
Faustregel ist: wenn für alle klar ist, wer der gütige Diktator sein 
sollte, dann ist das der richtige Weg. Wenn es aber keinen
offensichtlichen Kandidaten gibt, sollte das Projekt wahrscheinlich ein 
dezentrales System für Entscheidungen benutzen, wie im nächsten 
Abschnitt beschrieben.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<!--
<title>Consensus-based Democracy</title>
-->
<title>Konsensbasierte Demokratie</title>

<!--
<para>As projects get older, they tend to move away from the
benevolent dictatorship model and toward more openly democratic
systems.  This is not necessarily out of dissatisfaction with a
particular BD.  It's simply that group-based governance is more
"evolutionarily stable", to borrow a biological metaphor.  Whenever a
benevolent dictator steps down, or attempts to spread decision-making
responsibility more evenly, it is an opportunity for the group to
settle on a new, non-dictatorial system&mdash;establish a
constitution, as it were.  The group may not take this opportunity the
first time, or the second, but eventually they will; once they do,
the decision is unlikely ever to be reversed.  Common sense explains
why: if a group of N people were to vest one person with special
power, it would mean that N&nbsp;-&nbsp;1 people were each agreeing to
decrease their individual influence.  People usually don't want to do
that.  Even if they did, the resulting dictatorship would still be
conditional: the group anointed the BD, clearly the group could depose
the BD.  Therefore, once a project has moved from leadership by a
charismatic individual to a more formal, group-based system, it rarely
moves back.</para>
-->
<para>Mit zunehmenden Alter neigen Projekte dazu, vom Modell des
gütigen Diktators zu offeneren demokratischen Systemen zu wechseln.
Das ist nicht zwangsläufig auf Unzufriedenheit mit einem bestimmten
gütigen Diktator zurückzuführen. Ein gemeinschaftliches
Regierungssystem ist auf Dauer einfach stabiler. Immer wenn ein
gütiger Diktator zurücktritt, oder versucht die Entscheidungsgewalt
gleichmäßiger zu verteilen, bekommt die Gruppe eine Gelegenheit, ein 
neues, nicht-diktatorisches System einzuführen &ndash; sich sozusagen
eine neue Verfassung zu geben. 
Die Gruppe wird diese Gelegenheit vielleicht nicht beim ersten oder 
zweiten Mal wahrnehmen, doch letztendlich wird sie es;
sobald sie es tut, ist es unwahrscheinlich, dass das jemals rückgängig
gemacht wird. Dieser Vorgang ist auch logisch: Wenn eine Gruppe
bestehend aus N Personen, einer bestimmten Person Macht zuspräche, 
würde das bedeuten, dass N&nbsp;-&nbsp;1 Personen damit einverstanden
wären, ihre eigene Macht zu verringern. Menschen können sich auf so etwas 
im Allgemeinen nicht einigen. Selbst wenn, wäre das entstandene System
auch nur bedingt eine Diktatur: Ein von der Gruppe erkorener gütiger
Diktator kann genau so gut durch die Gruppe wieder abgesetzt werden.
Sobald ein Projekt von der Führung durch eine einzelne charismatische
Person zu einem formaleren gemeinschaftlichen System wechselt, wird es
schwerlich einen Schritt zurück tun.</para>

<!--
<para>The details of how these systems work vary widely, but there are
two common elements: one, the group works by consensus most of the
time; two, there is a formal voting mechanism to fall back on when
consensus cannot be reached.</para>
-->
<para>Die Einzelheiten dieser Systeme variieren zwar erheblich, es
gibt aber zwei Gemeinsamkeiten: Erstens, die Gruppe arbeitet meist 
im Konsens; zweitens, es gibt eine formale Einrichtung zur 
Abstimmung, auf die man zurückgreifen kann, sobald kein Konsens 
erreicht werden kann.</para>

<!--
<para><firstterm>Consensus</firstterm> merely means an agreement that
everyone is willing to live with.  It is not an ambiguous state: a
group has reached consensus on a given question when someone proposes
that consensus has been reached, and no one contradicts the assertion.
The person proposing consensus should, of course, state specifically
what the consensus is, and what actions would be taken in consequence
of it, if they're not obvious.</para>
-->
<para><firstterm>Konsens</firstterm> bedeutet lediglich eine 
Vereinbarung, mit der jeder leben kann. Es ist kein unklarer Zustand:
Eine Gruppe hat Konsens erreicht, wenn jemand behauptet, man habe sich 
geeinigt und keiner widerspricht. Die Person, die den Konsens 
konstatiert, sollte natürlich genau formulieren worauf man sich einigt,
und welche konkreten Schritte sich daraus ergeben, falls diese nicht
offensichtlich sind.</para>

<!--
<para>Most conversation in a project is on technical topics, such as
the right way to fix a certain bug, whether or not to add a feature,
how strictly to document interfaces, etc.  Consensus-based governance
works well because it blends seamlessly with the technical discussion
itself.  By the end of a discussion, there is often general agreement
on what course to take.  Someone will usually make a concluding post,
which is simultaneously a summary of what has been decided and an
implicit proposal of consensus.  This provides a last chance for
someone else to say "Wait, I didn't agree to that.  We need to hash
this out some more."</para>
-->
<para>Die meisten Unterhaltungen in einem Projekt drehen sind um 
technische Themen, z.B. den besten Weg, einen Fehler zu beheben, ob eine
neue Funktion hinzugefügt werden soll oder nicht, wie streng 
Schnittstellen dokumentiert werden sollen, usw. Konsens-basierte
Entscheidungen funktionieren gut, weil sie nahtlos mit der technischen 
Diskussion verlaufen. Am Ende der Diskussion ist man sich meist 
über den richtigen Kurs einig. Oft schreibt jemand eine abschließende 
Zusammenfassung der Entscheidungen, und schlägt dadurch implizit 
den Konsens vor. So gibt es eine letzte Möglichkeit, Einspruch 
zu erheben, um das Thema gründlicher zu besprechen.</para>

<!--
<para>For small, uncontroversial decisions, the proposal of consensus
is implicit.  For example, when a developer spontaneously commits a
bugfix, the commit itself is a proposal of consensus: "I assume we all
agree that this bug needs to be fixed, and that this is the way to fix
it."  Of course, the developer does not actually say that; she just
commits the fix, and the others in the project do not bother to state
their agreement, because silence is consent.  If someone commits a
change that turns out <emphasis>not</emphasis> to have consensus, the
result is simply for the project to discuss the change as though it
had not already been committed.  The reason this works is the topic of
the next section.</para>
-->
<para>Bei kleinen, nicht kontroversen Entscheidungen ist der Konsensvorschlag 
implizit. Wenn ein Entwickler zum Beispiel spontan einen Commit macht, 
um einen Fehler zu beheben, ist das zugleich ein Konsensvorschlag: 
"Ich nehme an, dass wir alle darüber einstimmen, dass 
dieser Fehler behoben werden muss und dies der Weg dazu ist". 
Natürlich sagt das der Entwickler nicht tatsächlich; Er macht 
einfach den Commit, und die Anderen im Projekt machen sich nicht 
die Mühe, ihre Zustimmung zu geben, da Schweigen hier Zustimmung 
bedeutet. Wenn jemand einen Commit macht, bei dem sich herausstellt,
dass es <emphasis>keinen</emphasis> Konsens gab, wird die Änderung so 
besprochen, als wäre sie noch gar nicht gemacht. Der Grund dafür ist 
Thema des nächsten Abschnitts.</para>

<sect2 id="version-control-relaxation">
<!--
<title>Version Control Means You Can Relax</title>
-->
<title>Versionsverwaltung bedeutet Entspannung</title>

<!--
<para>The fact that the project's source code is kept under version
control means that most decisions can be easily unmade.  The most
common way this happens is that someone commits a change mistakenly
thinking everyone would be happy with it, only to be met with
objections after the fact.  It is typical for such objections to start
out with an obligatory apology for having missed out on prior
discussion, though this may be omitted if the objector finds no record
of such a discussion in the mailing list archives.  Either way, there
is no reason for the tone of the discussion to be different after the
change has been committed than before.  Any change can be reverted, at
least until dependent changes are introduced (i.e., new code that
would break if the original change were suddenly removed).  The
version control system gives the project a way to undo the effects of
bad or hasty judgement.  This, in turn, frees people to trust their
instincts about how much feedback is necessary before doing
something.</para>
-->
<para>Die Tatsache, dass der Quellcode des Projekts in der 
Versionsverwaltung gehalten wird, hat zur Folge, dass die meisten 
Entscheidungen leicht rückgängig gemacht werden können. Der häufigste
Fall ist, dass jemand einen Commit in der falschen Annahme ausführt,
dass alle einverstanden seien, und sich kurze Zeit später mit Einwänden 
konfrontiert zu sehen. Diese Einwände beginnen im Allgemeinen mit der
obligatorischen Entschuldigung dafür, dass man die vorangegangene
Diskussion verpasst habe, wobei man dies auslassen kann, falls in den
Archiven der Mailingliste keine Aufzeichnung der Diskussion zu
finden sind. So oder so sollte der Ton nach dem Commit nicht anders 
sein als davor. Jede Änderung kann rückgängig gemacht werden, 
zumindest solange, bis davon abhängige Änderungen eingeführt werden
(wie neuer Code, der nicht mehr funktionieren würde, wenn man die 
Änderung plötzlich herausnehmen würde). Die Versionsverwaltung eröffnet 
dem Projekt die Möglichkeit, Auswirkungen schlechter oder übereilter 
Entscheidungen rückgängig zu machen. Das wiederum gibt den Leuten 
die Freiheit, sich in der Frage auf ihren Instinkten zu verlassen, 
wie viel Rücksprache eine Aktion erfordert.</para>

<!--
<para>This also means that the process of establishing consensus need
not be very formal.  Most projects handle it by feel.  Minor changes
can go in with no discussion, or with minimal discussion followed by a
few nods of agreement.  For more significant changes, especially ones
with the potential to destabilize a lot of code, people should wait a
day or two before assuming there is consensus, the rationale being
that no one should be marginalized in an important conversation simply
because he didn't check email frequently enough.</para>
-->
<para>Der Vorgang der Konsenssuche muss deshalb auch nicht sonderlich 
formal sein. In den meisten Projekten läuft das nach Gefühl.
Kleine Änderungen können ohne Diskussion erledigt werden, oder nach
minimaler Diskussion und beiläufigem Abnicken. Bei größeren
Änderungen, besonders solchen die eine Menge Code instabil machen 
könnten, sollten die Beteiligten ein bis zwei Tage warten, bevor sie 
Konsens annehmen, denn bei einer so wichtigen Diskussion sollte 
niemand übergangen werden, nur weil er seine E-Mails nicht oft 
genug abgerufen hat.</para>

<!--
<para>Thus, when someone is confident he knows what needs to be done,
he should just go ahead and do it.  This applies not only to software
fixes, but to web site updates, documentation changes, and anything
else unlikely to be controversial.  Usually there will be only a few
instances where an action needs to be undone, and these can be handled on
a case-by-case basis.  Of course, one shouldn't encourage people to be
headstrong.  There is still a psychological difference between a
decision under discussion and one that has already taken effect, even
if it is technically reversible.  People always feel that momentum is
allied to action, and will be slightly more reluctant to revert a
change than to prevent it in the first place.  If a developer abuses
this fact by committing potentially controversial changes too quickly,
however, people can and should complain, and hold that developer to a
stricter standard until things improve.</para>
-->
<para>Wenn sich also jemand sicher ist, was getan werden muss, sollte er 
es einfach durchziehen. Das gilt nicht nur für Fehlerbehebungen, sondern 
auch für Aktualisierungen der Website, Änderungen an der Dokumentation 
und alles andere, für das Kontroversen unwahrscheinlich sind. Es 
gibt selten Fälle, bei denen etwas rückgängig gemacht werden muss, und 
diese können jeder für sich behandelt werden. Natürlich sollte man 
Menschen nicht zu Eigensinnigkeit ermutigen. Es gibt immer noch einen
psychologischen Unterschied zwischen einer Entscheidung, die zur 
Debatte steht und einer, die bereits getroffen wurde, selbst wenn sie 
technisch umkehrbar ist. Menschen haben das Gefühl, dass Bewegung
mit Tatkraft einhergeht, und sind deshalb seltener bereit eine Änderung
rückgängig zu machen, als sie von vornherein zu verhindern. Wenn ein
Entwickler diese Tatsache missbraucht, indem er eine potentiell
kontroverse Änderung zu schnell einpflegt, kann und sollte man sich 
beschweren und dem Entwickler engere Grenzen setzen, bis hier Besserung 
eintritt.</para>

</sect2>

<sect2 id="voting">
<!--
<title>When Consensus Cannot Be Reached, Vote</title>
-->
<title>Wenn kein Konsens möglich ist, stimme ab!</title>

<!--
<para>Inevitably, some debates just won't consense.  When all other
means of breaking a deadlock fail, the solution is to vote.  But
before a vote can be taken, there must be a clear set of choices on
the ballot.  Here, again, the normal process of technical discussion
blends serendipitously with the project's decision-making procedures.
The kinds of questions that come to a vote often involve complex,
multifaceted issues.  In any such complex discussion, there are
usually one or two people playing the role of <firstterm>honest
broker</firstterm>: posting periodic summaries of the various
arguments and keeping track of where the core points of disagreement
(and agreement) lie.  These summaries help everyone measure how much
progress has been made, and remind everyone of what issues remain to
be addressed.  Those same summaries can serve as prototypes for a
ballot sheet, should a vote become necessary.  If the honest brokers
have been doing their job well, they will be able to credibly call for
a vote when the time comes, and the group will be willing to use a
ballot sheet based on their summary of the issues.  The brokers
themselves may be participants in the debate; it is not necessary for
them to remain above the fray, as long as they can understand and
fairly represent others' views, and not let their partisan sentiments
prevent them from summarizing the state of the debate in a neutral
fashion.</para>
-->
<para>Zwangsläufig wird es Debatten geben, bei denen man sich einfach nicht 
einig wird. Wenn alle anderen Möglichkeiten fehlschlagen, einen 
Stillstand aufzulösen, sollte man abstimmen. Bevor aber eine Abstimmung 
stattfinden kann, muss es eine klare Auswahl auf dem Stimmzettel
geben. Auch hier läuft die technische Diskussion glücklicherweise mit den 
Entscheidungsabläufen des Projekts zusammen. Die Art von Fragen, die
zu einer Abstimmung führen, drehen sich oftmals um komplexe, 
mehrschichtige Angelegenheiten. Bei jeder dieser komplexen Diskussionen
gibt es meistens ein oder zwei Personen mit der Rolle des
<firstterm>ehrlichen Vermittlers</firstterm>: sie fassen periodisch 
die verschiedenen Argumente zusammen und behalten den Überblick über 
die zentralen Streitpunkte (und Übereinstimmungen). Diese Zusammenfassungen 
helfen allen, den Fortschritt einzuschätzen und erinnern daran, welche Punkte 
noch offen sind. Sie dienen auch als Prototypen für die Stimmzettel, 
sollte es zur Abstimmung kommen. Wenn die Vermittler ihre Arbeit gut 
machen, werden sie glaubhaft abstimmen können, sobald das nötig wird, 
und die Gruppe wird diese Stimmzettel akzeptieren. Die 
Vermittler können an der Debatte teilnehmen; es ist nicht nötig, dass 
sie sich aus dem Schlachtgetümmel heraushalten, solange sie die 
Ansichten Anderer verstehen und angemessen repräsentieren können, und 
die Meinungen ihrer Partei sie nicht daran hindert, den Stand der 
Diskussion auf eine neutrale Art zusammenzufassen.</para>

<!--
<para>The actual content of the ballot is usually not controversial.
By the time matters reach a vote, the disagreement has usually boiled
down to a few key issues, with recognizable labels and brief
descriptions.  Occasionally a developer will object to the form of the
ballot itself.  Sometimes his concern is legitimate, for example,
that an important choice was left off or not described accurately.
But other times a developer may be merely trying to stave off the
inevitable, perhaps knowing that the vote probably won't go his way.
See <xref linkend="difficult-people"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for how to deal with
this sort of obstructionism.</para>
-->
<para>Der tatsächliche Inhalt des Stimmzettels ist normalerweise nicht
kontrovers. Bis es zu einer Abstimmung kommt, hat sich die 
Meinungsverschiedenheit auf ein paar Kernpunkte reduziert, mit
erkennbaren Namen und kurzen Beschreibungen. Ab und zu wird ein
Entwickler die Form des Stimmzettels beanstanden. Manchmal sind diese
Bedenken gerechtfertigt, wenn beispielsweise ein wichtiger Punkt auf
dem Stimmzettel ausgelassen oder nicht richtig beschrieben wurde.
Zuweilen kann ein Entwickler aber auch lediglich die Absicht haben,
das Unausweichliche hinauszuschieben, vielleicht mit dem Wissen, dass
die Wahl nicht zu seinen Gunsten ausfallen wird. Siehe 
<xref linkend="difficult-people"/><phrase output="printed"> im Kapitel
<xref linkend="communications"/></phrase> für eine Beschreibung wie 
man mit solchen Quertreibern umgehen sollte.</para>

<!--
<para>Remember to specify the voting system, as there are many
different kinds, and people might make wrong assumptions about which
procedure is being used.  A good choice in most cases is
<firstterm>approval voting</firstterm>, whereby each voter can vote
for as many of the choices on the ballot as he likes.  Approval
voting is simple to explain and to count, and unlike some other
methods, it only involves one round of voting.  See <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> for
more details about approval voting and other voting systems, but try
to avoid getting into a long debate about which voting system to use
(because, of course, you will then find yourself in a debate about
which voting system to use to decide the voting system!).  One reason
approval voting is a good choice is that it's very hard for anyone to
object to&mdash;it's about as fair as a voting system can be.</para>
-->
<para>Denken Sie daran, die Wahlform festzulegen, da es viele
verschiedene gibt und es falsche Annahmen darüber geben könnte,
welche Form benutzt wird. Meistens ist eine
<firstterm>Zustimmungs-Wahl</firstterm> eine gute Entscheidung, bei 
der jeder Wähler für so viele der Kandidaten auf den Stimmzettel
stimmen kann wie er möchte. Zustimmungs-Wahlen sind einfach zu 
erklären und auszuzählen, und im Gegensatz zu anderen Wahlsystemen 
erfordern sie nur einen Wahlgang. Siehe 
<ulink url="http://de.wikipedia.org/wiki/Wahl_durch_Zustimmung"/>
für weitere Details über Zustimmungs-Wahlen. Lassen Sie sich aber
nicht zu einer Debatte verleiten, welches Wahlsystem benutzt werden
soll (dann fänden Sie sich schnell in einer Debatte über ein Wahlsystem, 
um über ein Wahlsystem abzustimmen!). Zustimmungs-Wahlen sind auch gut,
weil es sehr wenig an ihnen zu beanstanden gibt &ndash; sie
sind so gerecht, wie ein Wahlsystem nur sein kann.</para>

<!--
<para>Finally, conduct votes in public.  There is no need for secrecy
or anonymity in a vote on matters that have been debated publicly
anyway.  Have each participant post her votes to the project mailing
list, so that any observer can tally and check the results for
herself, and so that everything is recorded in the archives.</para>
-->
<para>Und schließlich sollten die Wahlen öffentlich gehalten werden. 
Es gibt keinen Grund für Geheimhaltung oder Anonymität bei einer Wahl, 
bei der zuvor sowieso öffentlich debattiert wurde. Lassen Sie jeden Beteiligten
seine Stimmen an die Mailingliste schicken, damit jeder Beobachter
selber die Ergebnisse nachrechnen und überprüfen kann, und alles in den
Archiven aufgezeichnet wird.</para>

</sect2>

<sect2 id="when-to-vote">
<!--
<title>When To Vote</title>
-->
<title>Wann sollte abgestimmt werden?</title>

<!--
<para>The hardest thing about voting is determining when to do it.  In
general, taking a vote should be very rare&mdash;a last resort for
when all other options have failed.  Don't think of voting as a great
way to resolve debates.  It isn't.  It ends discussion, and thereby
ends creative thinking about the problem.  As long as discussion
continues, there is the possibility that someone will come up with a
new solution everyone likes.  This happens surprisingly often: a
lively debate can produce a new way of thinking about the problem, and
lead to a proposal that eventually satisfies everyone.  Even when no
new proposal arises, it's still usually better to broker a compromise
than to hold a vote.  After a compromise, everyone is a little bit
unhappy, whereas after a vote, some people are unhappy while others
are happy.  From a political standpoint, the former situation is
preferable: at least each person can feel he extracted a price for his
unhappiness.  He may be dissatisfied, but so is everyone else.</para>
-->
<para>Das schwerste bei Wahlen ist zu bestimmen, wann es dafür Zeit
ist. Im allgemeinen sollten Wahlen sehr selten sein &ndash; als letztes
Mittel, wenn alle anderen fehlgeschlagen sind. Betrachten Sie Wahlen 
nicht als eine tolle Möglichkeit, Debatten zu klären. Das sind sie 
nicht. Sie beenden Diskussionen und dadurch auch kreative Überlegungen
zu dem Problem. So lange die Diskussion weitergeht, kann jemand auf
eine neue Lösung kommen, die allen gefällt. Das geschieht überraschend
oft: Eine lebhafte Debatte kann zu einer neuen Art führen, das Problem 
anzugehen und schließlich zu einer für alle zufriedenstellenden
Lösung. Selbst ohne solche Vorschläge ist es meist dennoch besser,
einen Kompromiss auszuhandeln als eine Wahl abzuhalten. Nach
einem Kompromiss ist keiner ganz glücklich, aber zumindest gibt es
anders als bei Wahlen keinen der völlig unzufrieden ist. Politisch
gesehen ist die erste Situation vorzuziehen: Zumindest bekommt jeder 
das Gefühl, etwas für seine Unzufriedenheit bekommen zu haben. Er mag
unzufrieden sein, aber das sind alle anderen auch.</para>

<!--
<para>Voting's main advantage is that it finally settles a question so
everyone can move on.  But it settles it by a head count, instead of
by rational dialogue leading everyone to the same conclusion.  The
more experienced people are with open source projects, the less eager
I find them to be to settle questions by vote.  Instead they will try
to explore previously unconsidered solutions, or compromise more
severely than they'd originally planned.  Various techniques are
available to prevent a premature vote.  The most obvious is simply to
say "I don't think we're ready for a vote yet," and explain why not.
Another is to ask for an informal (non-binding) show of hands.  If the
response clearly tends toward one side or another, this will make some
people suddenly more willing to compromise, obviating the need for a
formal vote.  But the most effective way is simply to offer a new
solution, or a new viewpoint on an old suggestion, so that people
re-engage with the issues instead of merely repeating the same
arguments.</para>
-->
<para>Der Hauptvorteil einer Abstimmung ist die Lösung der Frage, 
damit alle endlich weitermachen können. Es wird aber durch das Zählen
von Köpfen erledigt, anstatt durch einen vernünftigen Dialog, der alle
zum selben Ergebnis führt. Die Bereitschaft, Fragen durch Wahlen zu
lösen, scheint mir mit zunehmender Erfahrung der Teilnehmer bei 
Open-Source-Projekten abzunehmen. Stattdessen versuchen Sie, vorher
nicht in Erwägung gezogene Lösungen zu erkunden, oder größere
Kompromisse einzugehen, als sie ursprünglich geplant hatten. Es gibt
verschiedene Möglichkeiten, um eine voreilige Wahl zu verhindern. Die
offensichtlichste ist einfach zu sagen, "Ich denke nicht, dass wir
schon bereit für eine Wahl sind" und zu erklären warum. Eine weitere
ist, eine informelle (nicht bindende) Zählung durchzuführen. Wenn die
Reaktion klar in die eine oder andere Richtung tendiert, wird es 
manche Teilnehmer plötzlich kompromissbereiter und damit eine
formelle Wahl überflüssig machen. Die effektivste Lösung ist aber, 
einfach eine neue Lösung anzubieten, oder eine neue Sicht auf einen 
alten Vorschlag, damit Leute sich erneut mit dem Sachverhalt befassen,
anstatt immer wieder die gleichen Argumente zu wiederholen.</para>

<!--
<para>In certain rare cases, everyone may agree that all the
compromise solutions are worse than any of the non-compromise ones.
When that happens, voting is less objectionable, both because it is
more likely to lead to a superior solution and because people will not
be overly unhappy no matter how it turns out.  Even then, the vote
should not be rushed.  The discussion leading up to a vote is what
educates the electorate, so stopping that discussion early can lower
the quality of the result.</para>
-->
<para>Es gibt auch seltene Fälle, in denen alle sich einig sind, dass
jede Kompromisslösung schlimmer ist als jeder der Nicht-Kompromisse.
In einem solchen Fall gibt es weniger an einer 
Abstimmung auszusetzen, sowohl weil es wahrscheinlich zu einer 
besseren Lösung führt, als auch weil die Beteiligten nicht sonderlich
unglücklich mit der Lösung sein werden, egal wie es ausgeht. Auch dann
sollte man die Wahl nicht übereilen. Die Diskussion, die der Wahl 
vorausgeht, bildet die Wählerschaft auch weiter, also kann ein frühes
Ende dieser Diskussion die Qualität des Ergebnisses schmälern.</para>

<!--
<para>(Note that this advice to be reluctant to call votes does not
apply to the change-inclusion voting described in
<xref linkend="stabilizing-a-release"/><phrase output="printed">
in <xref linkend="development-cycle"/></phrase>.  There, voting
is more of a communications mechanism, a means of registering one's
involvement in the change review process so that everyone can tell how
much review a given change has received.)</para>
-->
<para>(Denken Sie daran, dass diese Empfehlung zur Zurückhaltung beim
Ausrufen von Wahlen nicht für Wahlen zur Aufnahme von Änderungen gilt,
die in 
<xref linkend="stabilizing-a-release"/><phrase output="printed"> im
Kapitel <xref linkend="development-cycle"/></phrase> beschrieben 
werden. Dort sind Wahlen eher ein Mittel zur Kommunikation, eine 
Möglichkeit seine Beteiligung an der Überprüfung einer Änderung 
kundzugeben, damit alle erkennen können ob eine Änderung ausreichend
überprüft wurde).</para>

</sect2>

<sect2 id="electorate">
<!--
<title>Who Votes?</title>
-->
<title>Wahlberechtigung</title>

<!--
<para>Having a voting system raises the question of electorate: who
gets to vote?  This has the potential to be a sensitive issue, because
it forces the project to officially recognize some people as being
more involved, or as having better judgement, than others.</para>
-->
<para>Bei einem Wahlsystem stellt sich die Frage nach der
Wählerschaft: Wer darf wählen? Das kann eine sensible Frage sein, da
es das Projekt zwingt, bestimmte Personen offiziell für ihre
Beteiligung anzuerkennen oder für ihr besseres Urteilsvermögen 
gegenüber anderen anzuerkennen.</para>

<!--
<para>The best solution is to simply take an existing distinction,
commit access, and attach voting privileges to it.  In projects that
offer both full and partial commit access, the question of whether
partial committers can vote largely depends on the process by which
partial commit access is granted.  If the project hands it out
liberally, for example as a way of maintaining many third-party
contributed tools in the repository, then it should be made clear that
partial commit access is really just about committing, not voting.
The reverse implication naturally holds as well: since full committers
<emphasis>will</emphasis> have voting privileges, they must be chosen
not only as programmers, but as members of the electorate.  If someone
shows disruptive or obstructionist tendencies on the mailing list, the
group should be very cautious about making him a committer, even if
the person is technically skilled.</para>
-->
<para>Die beste Lösung ist einfach eine vorhandene Unterscheidung wie
den Commit-Zugriff zu nehmen, und das Wahlrecht daran festzumachen.
Bei Projekten mit mehreren Ebenen für den Zugriff, hängt die Frage ob
Personen mit geringerem Zugriff wählen können, größtenteils von dem
Ablauf ab mit dem die Zugriffsrechte gewährt werden. Wenn ein Projekt
sie freizügig austeilt, um beispielsweise eine Vielzahl an Programmen 
von dritten Parteien im Projektarchiv zu pflegen, solle es klar 
gestellt werden, dass es bei eingeschränktem Commit-Zugriff wirklich
um die Pflege der Software geht und nicht um die Wahlberechtigung. Die
umgekehrte Implikation gilt natürlich auch: Da Personen mit vollem 
Commit-Zugriff Wahlberechtigte sind, müssen sie nicht nur als 
Programmierer, sondern als Mitglieder der Wählerschaft ausgesucht 
werden. Wenn jemand auf der Mailingliste dazu tendiert, Unruhe zu
stiften oder Behinderungen zu verursachen, sollte die Gruppe sich gut
überlegen ob er die Commit-Berechtigung bekommt, selbst wenn diese 
Person guten Code schreibt.</para>

<!--
<para>The voting system itself should be used to choose new
committers, both full and partial.  But here is one of the rare
instances where secrecy is appropriate.  You can't have votes about
potential committers posted to a public mailing list, because the
candidate's feelings (and reputation) could be hurt.  Instead, the
usual way is that an existing committer posts to a private mailing
list consisting only of the other committers, proposing that someone
be granted commit access.  The other committers speak their minds
freely, knowing the discussion is private.  Often there will be no
disagreement, and therefore no vote necessary.  After waiting a few
days to make sure every committer has had a chance to respond, the
proposer mails the candidate and offers him commit access.  If there
is disagreement, discussion ensues as for any other question, possibly
resulting in a vote.  For this process to be open and frank, the mere
fact that the discussion is taking place at all should be secret.  If
the person under consideration knew it was going on, and then were
never offered commit access, he could conclude that he had lost
the vote, and would likely feel hurt.  Of course, if someone
explicitly asks for commit access, then there is no choice but to
consider the proposal and explicitly accept or reject him.  If the
latter, then it should be done as politely as possible, with a clear
explanation: "We liked your patches, but haven't seen enough of them
yet," or "We appreciate all your patches, but they required
considerable adjustments before they could be applied, so we don't
feel comfortable giving you commit access yet.  We hope that this will
change over time, though."  Remember, what you're saying could come as
a blow, depending on the person's level of confidence.  Try to see it
from their point of view as you write the mail.</para>
-->
<para>Das Wahlsystem selbst, sollte benutzt werden um neue Commiter
zu wählen, sowohl Teil- als auch Vollberechtigte. Hier ist allerdings
eine der wenigen Stellen an denen Geheimhaltung angemessen ist. Sie
können keine Wahlen über Kandidaten auf der öffentlichen Mailingliste
halten, da es die Gefühle (und den Ruf) des Kandidaten 
verletzen könnte. Der übliche Weg ist stattdessen, dass bereits 
bestehende Commiter an einen privaten Verteiler schreiben, 
ausschließlich im Kreise der anderen Committer, mit dem Vorschlag 
für den neuen Kandidaten. Die anderen Committer geben ihre ehrliche 
Meinung, in dem Wissen, dass die Diskussion privat ist. Oft wird 
es keinen Einspruch geben und eine Wahl ist nicht notwendig. 
Nachdem man ein paar Tage gewartet hat, um allen Committern genügend 
Reaktionszeit zu geben, schreibt der Antragsteller dem neuen 
Kandidaten eine E-Mail indem ihm der Commit-Zugriff angeboten wird. 
Wenn es Einwände gibt, wird wie bei jeder anderen Frage eine 
Diskussion entstehen die möglicherweise mit einer Abstimmung endet. 
Damit diese Diskussion offen und ehrlich abläuft, sollte die 
bloße Tatsache, dass sie stattfindet geheim gehalten werden. 
Wenn die Person die in Betracht gezogen wird davon wüsste und 
niemals das Angebot bekäme, könnte er daraus schließen, dass er 
die Wahl verloren hat und wäre wahrscheinlich gekränkt. 
Wenn jemand natürlich explizit nach Commit-Zugriff 
fragt, dann gibt es keine andere Möglichkeit als den Vorschlag
in Betracht zu ziehen und ihn entweder anzunehmen oder abzuweisen. 
Wenn letzteres der Fall ist, dann sollte es so höflich wie möglich 
verlaufen, mit einer eindeutigen Erklärung: "Wir mögen deine Patches,
haben davon aber bisher nicht genug gesehen", oder "Wir mögen deine 
Patches, mussten aber wesentliche Anpassungen machen, damit sie 
angewandt werden konnten, also fühlen wir uns noch nicht Wohl dabei,
dir derzeit Commit-Zugriff zu geben. Wir hoffen allerdings, dass sich
das mit der Zeit ändert". Bedenken Sie, dass ihre Worte der Person 
einen Schlag versetzen könnte, je nachdem wie selbstsicher sie ist. 
Versuchen Sie aus der Sicht des Empfängers zu sehen wenn Sie die 
E-Mail schreiben.</para>

<!--
<para>Because adding a new committer is more consequential than most
other one-time decisions, some projects have special requirements for
the vote.  For example, they may require that the proposal receive at
least <emphasis>n</emphasis> positive votes and no negative votes, or
that a supermajority vote in favor.  The exact parameters are not
important; the main idea is to get the group to be careful about
adding new committers.  Similar, or even stricter, special requirements
can apply to votes to <emphasis>remove</emphasis> a committer, though
hopefully that will never be necessary.  See <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on the
non-voting aspects of adding and removing committers.</para>
-->
<para>Da es eine schwerwiegendere Entscheidung ist einen neuen 
Committer aufzunehmen als die meisten anderen einmaligen 
Entscheidungen, haben manche Projekte besondere Anforderungen für
solche Abstimmungen. Es kann beispielsweise erforderlich sein, 
<emphasis>n</emphasis> Stimmen für und keine gegen den Kandidaten zu 
bekommen, oder die Zustimmung einer qualifizierte Mehrheit. Die genaue
Grenze ist nicht wichtig; grunsätzlich geht es darum bei der Aufnahme
Vorsicht walten zu lassen. Ähnliche, oder noch strengere, spezielle 
Anforderungen können bei Abstimmungen über das 
<emphasis>Entfernen</emphasis> eines Committers, obgleich das 
hoffentlich niemals nötig sein wird. Siehe 
<xref linkend="committers"/><phrase output="printed"> im Kapitel
<xref linkend="managing-volunteers"/></phrase> für weiteres über 
Aspekte zu der Aufnahme und Entfernung neuer Committer, ohne
Zusammenhang mit Wahlen.</para>

</sect2>

<sect2 id="polls">
<!--
<title>Polls Versus Votes</title>
-->
<title>Meinungsumfragen contra Abstimmung</title>

<!--
<para>For certain kinds of votes, it may be useful to expand the
electorate. For example, if the developers simply can't figure out
whether a given interface choice matches the way people actually use
the software, one solution is to ask to all the subscribers of the
project's mailing lists to vote.  These are really
<firstterm>polls</firstterm> rather than votes, but the developers may
choose to treat the result as binding.  As with any poll, be sure to
make it clear to the participants that there's a write-in option: if
someone thinks of a better option not offered in the poll questions,
her response may turn out to be the most important result of the
poll.</para>
-->
<para>Für bestimmte Abstimmungen, kann es sich lohnen den Wahlkreis 
auszuweiten. Wenn die Entwickler beispielsweise einfach nicht
herausbekommen, ob eine bestimmte Schnittstelle zu der Art passt, in der
Leute die Software tatsächlich benutzen, ist eine Lösung, auf der 
Mailingliste des Projekts darüber abstimmen zu lassen. Dies sind
in Wirklichkeit eher <firstterm>Meinungsumfragen</firstterm> als 
Abstimmungen, aber die Entwickler können die Ergebnisse als bindend 
betrachten, wenn sie wollen. Wie bei jeder Meinungsumfrage
erklären Sie den Beteiligten, dass es eine Möglichkeit gibt, Vorschläge
zu machen: Wenn jemandem etwas besseres einfällt als bei der 
Umfrage angeboten wird, kann seine Reaktion zu dem wichtigsten Ergebnis
der Umfrage werden.</para>

</sect2>

<sect2 id="veto">
<!--
<title>Vetoes</title>
-->
<title>Vetos</title>

<!--
<para>Some projects allow a special kind of vote known as a
<firstterm>veto</firstterm>.  A veto is a way for a developer to put a
halt to a hasty or ill-considered change, at least long enough for
everyone to discuss it more.  Think of a veto as somewhere between a
very strong objection and a filibuster.  Its exact meaning varies from
one project to another.  Some projects make it very difficult to
override a veto; others allow them to be overridden by regular
majority vote, perhaps after an enforced delay for more discussion.
Any veto should be accompanied by a thorough explanation; a veto
without such an explanation should be considered invalid on
arrival.</para>
-->
<para>Manche Projekte erlauben besondere Stimmen, bekannt als 
<firstterm>Veto</firstterm>. Ein Veto ist ein Weg für einen Entwickler
eine übereilte oder schlecht überlegte Änderung aufzuhalten, zumindest
lange genug, um weiter darüber zu diskutieren. Sie können ein Veto
irgendwo zwischen starken Einspruch und handfester Obstruktion
einordnen. Seine genaue Bedeutung unterscheidet sich von einem Projekt
zu anderen. Manche Projekte machen es sehr schwer ein Veto aufzuheben;
andere erlauben ihre Aufhebung durch eine gewöhnliche Mehrheit, etwa 
nach einer erzwungenen Verzögerung für weitere Diskussion. Jedes Veto
sollte von einer ausführliche Erklärung begleitet werden; ein Veto
ohne Erklärung sollte gleich als ungültig erachtet werden.</para>

<!--
<para>With vetoes comes the problem of veto abuse.  Sometimes
developers are too eager to raise the stakes by casting a veto, when
really all that was called for was more discussion.  You can prevent
veto abuse by being very reluctant to use vetoes yourself, and by
gently calling it out when someone else uses her veto too often.  If
necessary, you can also remind the group that vetoes are binding for
only as long as the group agrees they are&mdash;after all, if a
clear majority of developers wants X, then X is going to happen one
way or another.  Either the vetoing developer will back down, or the
group will decide to weaken the meaning of a veto.</para>
-->
<para>Mit Vetos kommt das Problem des Missbrauchs. Manchmal sind
Entwickler zu begierig den Einsatz zu erhöhen indem Sie ein Veto
aussprechen. Sie können den Missbrauch von Vetos verhindern, indem Sie
selber nur widerstreben darauf zurückgreifen, sowie indem Sie sanft
darauf hinweisen wenn jemand anderes das Veto zu oft benutzt. Falls
nötig, können Sie die Gruppe auch daran erinnern, dass Vetos nur so
lange bindend sind, wie die Gruppe sich darüber einig
ist &ndash; schließlich wird sich Änderung X durchsetzten, wenn eine 
klare Mehrheit der Entwickler X machen will. Entweder wird das Veto 
zurückgezogen, oder die Gruppe wird sich entschließen seine Bedeutung
zu verringern.</para>

<!--
<para>You may see people write "-1" to express a veto.  This usage
comes from the Apache Software Foundation, which has a highly
structured voting and veto process, described at <ulink
url="http://www.apache.org/foundation/voting.html"
>apache.org/foundation/voting.html</ulink>.  The Apache
standards have spread to other projects, and you will see their
conventions used to varying degrees in a lot of places in the open
source world.  Technically, "-1" does not always indicate a formal
veto even according to the Apache standards, but informally it is
usually taken to mean a veto, or at least a very strong
objection.</para>
-->
<para>Sie werden Leute vielleicht "-1" schreiben sehen, um ein Veto
auszudrücken. Diese Nutzung kommt von der Apache Software Foundation,
die einen hochgradig strukturierten Ablauf für Abstimmungen und Vetos
hat, beschrieben bei
<ulink url="http://www.apache.org/foundation/voting.html"/>. Die
Apache-Normen haben sich auf andere Projekte übertragen und Sie werden
ihre Konventionen in unterschiedlichem Maße an vielen Stellen in der
Open-Source-Welt beobachten können. Technisch gesehen, bedeutet "-1"
nicht immer ein formelles Veto, selbst nach den Apache-Normen.
Informell wird es jedoch für gewöhnlich als solches betrachtet, oder
zumindest als starken Einspruch.</para>

<!--
<para>Like votes, vetoes can apply retroactively.  It's not okay to
object to a veto on the grounds that the change in question has
already been committed, or the action taken (unless it's something
irrevocable, like putting out a press release).  On the other hand, a
veto that arrives weeks or months late isn't likely to be taken very
seriously, nor should it be.</para>
-->
<para>Wie Stimmen bei einer Wahl, kann ein Veto auch im Nachhinein
ausgesprochen werden. Es ist nicht in Ordnung einem Veto mit der 
Begründung zu widersprechen, dass die zur Debatte stehende Änderung 
bereits durchgeführt oder die Aktion bereits getätigt wurde (es sei 
denn es handelt sich um etwas unumkehrbares, wie eine 
Pressemitteilung). Andererseits wird und sollte ein Veto welches 
Wochen oder Monate später ankommt wahrscheinlich nicht sonderlich 
Ernst genommen werden.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<!--
<title>Writing It All Down</title>
-->
<title>Schriftliche Regeln</title>

<!--
<para>At some point, the number of conventions and agreements floating
around in your project may become so great that you need to record it
somewhere.  In order to give such a document legitimacy, make it clear
that it is based on mailing list discussions and on agreements already
in effect.  As you compose it, refer to the relevant threads in the
mailing list archives, and whenever there's a point you're not sure
about, ask again.  The document should not contain any surprises: it
is not the source of the agreements, it is merely a description of
them.  Of course, if it is successful, people will start citing it as
a source of authority in itself, but that just means it reflects the
overall will of the group accurately.</para>
-->
<para>Irgendwann wird die Anzahl der Vereinbarungen und Übereinkünfte
die in Ihrem Projekt umhergehen derart groß werden, dass sie irgendwo
aufgezeichnet werden müssen. Damit ein solches Dokument rechtmäßig 
ist, sollten Sie klarstellen, dass es auf Diskussionen und 
Vereinbarungen auf den Mailinglisten beruht, die bereits in Kraft
sind. Wenn Sie es zusammenstellen, verweisen Sie auf die relevanten
Threads in den Archiven und immer wann Sie an einen Punkt erreichen,
bei dem Sie sich nicht sicher sind, fragen Sie nochmal nach. Das 
Dokument sollte keine Überraschungen enthalten: Es ist keine Quelle 
für Vereinbarungen sondern lediglich ihre Beschreibung. Wenn es 
Erfolg hat, werden Leute natürlich anfangen es zu Zitieren, als eine
Quelle für Autorität, was aber nur bedeutet, dass es den allgemeinen
Wille der Gruppe zutreffend widerspiegelt.</para>

<!--
<para>This is the document alluded to in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturally, when the
project is very young, you will have to lay down guidelines without
the benefit of a long project history to draw on.  But as the
development community matures, you can adjust the language to reflect
the way things actually turn out.</para>
-->
<para>Dieses ist das Dokument, welches in 
<xref linkend="developer-guidelines"/><phrase output="printed"> im 
Kapitel <xref linkend="getting-started"/></phrase> angespielt wird.
Wenn das Projekt noch sehr jung ist, werden Sie selbstverständlich die
Richtlinien auslegen müssen, ohne den Vorteil einer langen Historie im
Projekt, worauf Sie sich beziehen können. Mit zunehmender Reife der
Entwicklungergemeinschaft, können Sie die Sprache anpassen um 
widerzuspiegeln, welche Abläufe sich tatsächlich entwickelt
haben.</para>

<!--
<para>Don't try to be comprehensive.  No document can capture
everything people need to know about participating in a project.  Many
of the conventions a project evolves remain forever unspoken, never
mentioned explicitly, yet adhered to by all.  Other things are simply
too obvious to be mentioned, and would only distract from important
but non-obvious material.  For example, there's no point writing
guidelines like "Be polite and respectful to others on the mailing
lists, and don't start flame wars," or "Write clean, readable bug-free
code."  Of course these things are desirable, but since there's no
conceivable universe in which they might <emphasis>not</emphasis> be
desirable, they are not worth mentioning.  If people are being rude on
the mailing list, or writing buggy code, they're not going to stop
just because the project guidelines said to.  Such situations need to
be dealt with as they arise, not by blanket admonitions to be good.
On the other hand, if the project has specific guidelines about
<emphasis>how</emphasis> to write good code, such as rules about
documenting every API in a certain format, then those guidelines
should be written down as completely as possible.</para>
-->
<para>Versuchen Sie nicht alles abzudecken. Kein Dokument kann alles
umfassen, was Leute wissen müssen um an einem Projekt teilzunehmen.
Viele der Konventionen die ein Projekt entwickelt werden nie 
ausgesprochen oder explizit erwähnt und würden von dem wichtigen aber
nicht offensichtlichem Material ablenken. Es hat beispielsweise keinen
Sinn, Richtlinien wie folgende zu schreiben "Seien Sie höflich und
respektvoll zu anderen auf der Mailingliste und fangen Sie keine
Flamewars an", oder "Schreiben Sie sauberen, lesbaren, bugfreien Code".
Diese Sachen sind natürlich wünschenswert, da es allerdings kein 
denkbares Universum gibt, indem sie <emphasis>nicht</emphasis> 
wünschenswert wären, ist ihre Erwähnung der Mühe nicht wert. Wenn 
Leute auf der Mailingliste unhöflich sind oder fehlerhaften Code
schreiben, dann werden sie nicht damit aufhören, nur weil es die 
Richtlinien des Projekts es vorschreiben. Solche Situationen müssen
bei ihrem Auftreten behandelt werden, nicht durch pauschale
Ermahnungen sich gut zu benehmen. Wenn das Projekt andererseits 
spezifische Richtlinien hat <emphasis>wie</emphasis> man guten Code 
schreibt, z.B. Regeln über die Dokumentation jeder API in einem 
bestimmten Format, dann sollten diese Richtlinien so vollständig wie 
möglich niedergeschrieben werden.</para>

<!--
<para>A good way to determine what to include is to base the document
on the questions that newcomers ask most often, and on the complaints
experienced developers make most often.  This doesn't necessarily mean
it should turn into a FAQ sheet&mdash;it probably needs a more
coherent narrative structure than FAQs can offer.  But it should
follow the same reality-based principle of addressing the issues that
actually arise, rather than those you anticipate might arise.</para>
-->
<para>Der Inhalt des Dokuments lässt sich gut bestimmen, durch die
die Fragen von Neulingen sowie anhand der Beschwerden, denen erfahrene
Entwickler am häufigsten begegnen. Das bedeutet nicht zwangsläufig, 
dass es zu einer FAQ werden sollte &ndash; es braucht wahrscheinlich 
eine kohärentere erzählerische Struktur, als es eine FAQ bieten kann. 
Es sollte aber genauso auf tatsächlichen Fragen basieren, nicht 
auf solchen die Sie erwarten gestellt zu bekommen.</para>

<!--
<para>If the project is a benevolent dictatorship, or has officers
endowed with special powers (president, chair, whatever), then the
document is also a good opportunity to codify succession procedures.
Sometimes this can be as simple as naming specific people as
replacements in case the BD suddenly leaves the project for any
reason.  Generally, if there is a BD, only the BD can get away with
naming a successor.  If there are elected officers, then the
nomination and election procedure that was used to choose them in the
first place should be described in the document.  If there was no
procedure originally, then get consensus on a procedure on the mailing
lists <emphasis>before</emphasis> writing about it.  People can
sometimes be touchy about hierarchical structures, so the subject
needs to be approached with sensitivity.</para>
-->
<para>Ein Projekt mit einem gütigen Diktator, oder Mitglieder mit 
besonderen Vollmachten (Präsidenten, Vorsitzende, was auch immer),
sollte das Dokument als gute Gelegenheit betrachten, den Ablauf für 
Nachfolger festzulegen. Manchmal kann das so einfach sein wie 
bestimmte Personen als Ersatz zu benennen, sollte der gütige Diktator
das Projekt aus irgend einem Grund verlassen. Wenn es einen gütigen 
Diktator gibt, kann im allgemeinen nur der Diktator selber damit 
durchkommen einen Nachfolger zu benennen. Wenn es gewählte 
Vorstandsmitglieder hat, dann sollten die gleichen Abläufe die bei 
ihrer Wahl verwendet wurden in dem Dokument beschrieben werden. Wenn
es ursprünglich keinen Ablauf gab, dann sollten Sie sich innerhalb des
Projekts auf einen bestimmten Ablauf einigen 
<emphasis>bevor</emphasis> Sie darüber schreiben. Menschen können 
empfindlich sein, was hierarchische Strukturen angeht.</para>

<!--
<para>Perhaps the most important thing is to make it clear that the
rules can be reconsidered.  If the conventions described in the
document start to hamper the project, remind everyone that it is
supposed to be a living reflection of the group's intentions, not a
source of frustration and blockage.  If someone makes a habit of
inappropriately asking for rules to be reconsidered every time the
rules get in her way, you don't always need to debate it with
her&mdash;sometimes silence is the best tactic.  If other people
agree with the complaints, they'll chime in, and it will be obvious
that something needs to change.  If no one else agrees, then the
person won't get much response, and the rules will stay as they
are.</para>
-->
<para>Das wichtigste ist vielleicht klarzustellen, dass die Regeln
überdacht werden können. Sollten die Konventionen in dem Dokument 
anfangen das Projekt zu behindern, erinnern Sie alle daran, dass es
ein lebendes Spiegelbild der Absichten der Gruppe sein soll, und keine
Quelle für Frustration und Behinderung. Wenn jemand es sich zur
Gewohnheit macht, unangebrachterweise immer gerade dann wenn ihm Regeln 
im Weg stehen, darum zu bitten, diese neu zu überdenken &ndash; ist 
Schweigen manchmal die beste Taktik. Wenn andere mit den Beschwerden
übereinstimmen, werden sie auch das Wort ergreifen und es wird 
offensichtlich sein, dass sich etwas ändern muss. Wenn sonst keiner
zustimmt, dann wird die Person nicht sonderlich viel Resonanz
erhalten und die Regeln werden so stehenbleiben wie sie sind.</para>

<!--
<para>Two good examples of project guidelines are the Subversion
Community Guide, at <ulink
url="http://subversion.apache.org/docs/community-guide/"
>subversion.apache.org/docs/community-guide/</ulink>, and the
Apache Software Foundation governance documents, at <ulink
url="http://www.apache.org/foundation/how-it-works.html"
>apache.org/foundation/how-it-works.html</ulink> and <ulink
url="http://www.apache.org/foundation/voting.html"
>apache.org/foundation/voting.html</ulink>.  The ASF is
really a collection of software projects, legally organized as a
nonprofit corporation, so its documents tend to describe governance
procedures more than development conventions.  They're still worth
reading, though, because they represent the accumulated experience of
a lot of open source projects.</para>
-->
<para>Zwei gute Beispiele für Projekt-Richtlinien sind der 
Subversion Community Guide unter 
<ulink url="http://subversion.apache.org/docs/community-guide/"/>
und die Dokumente zur Organisation der Apache Software Foundation unter
<ulink url="http://www.apache.org/foundation/how-it-works.html"/> und
<ulink url="http://www.apache.org/foundation/voting.html"/>. Die ASF
ist in Wirklichkeit eine Sammlung von Software-Projekten, 
rechtlich als eine Gemeinnützige Organisation aufgestellt, also 
tendieren ihre Dokumente stärker dazu, Leitungsabläufe zu beschreiben als
Konventionen für Entwickler. Sie sind es trotzdem lesenswert,
denn sie stellen die gesammelte Erfahrung einer Vielzahl von
Open-Source-Projekten dar.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
