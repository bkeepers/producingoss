<chapter id="getting-started">

<title>Der Einstieg</title>

<simplesect>

<para>Den klassischen Verlauf eines freien Software-Projektes 
beschreibt Eric Raymond in seinem nunmehr berühmten Text über Open Source,
<citetitle>The Cathedral and the Bazaar</citetitle>:</para>

    <blockquote>
      <para><emphasis>Jede gute Software entsteht aus einem persönlichen
        Bedürfnis eines Programmierers.</emphasis></para>

      <para>(von <emphasis role="bold">
        <ulink url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Raymond sagte wohlgemerkt nicht, dass Open-Source-Projekte nur aus
dem persönlichen Bedürfnis eines Programmierers entsteht, sondern dass
<emphasis>gute</emphasis> Software dann entsteht, wenn der Programmierer
ein persönliches Interesse daran hat, ein Problem zu lösen; was insofern
für freie Software relevant ist, da sich herausstellte, dass die
meisten Open-Source-Projekte von Programmierern begonnen wurden, die
eines ihrer eigenen Probleme lösen wollten.</para>

<para>Die Motivation für die meisten freien Software-Projekte ist auch
heute noch dieselbe, wenn auch in geringerem Maße als um 1997, zu der Zeit als
Raymond diese Worte schrieb. Heute beobachten wir das Phänomen, dass 
Organisationen &ndash; auch gewinnorientierte Unternehmen &ndash; große, zentral 
organisierte Open-Source-Projekte anfangen. Der einsame Programmierer
der ein bisschen Code produziert, um ein lokales Problem zu lösen und dann
feststellt, dass das Ergebnis eine breitere Anwendbarkeit besitzt, ist 
immer noch die Quelle für vieles an freier Software, jedoch nicht
mehr die einzige.</para>

<para>Raymonds Sicht ist aber immer noch aufschlussreich.
Diejenigen die Software produzieren, müssen ein direktes Interesse an
ihrem Erfolg haben, weil sie auch Benutzer sind. Wenn die Software nicht
macht was es soll, wird die Person oder Organisation die sie produziert,
es bei der täglichen Arbeit merken. Ein gutes Beispiel ist das OpenAdapter
Projekt (<ulink url="http://www.openadapter.org/"/>) der 
Investmentbank Dresdner Kleinwort Wasserstein, das als Open-Source-Framework 
zur Integration unterschiedlicher finanzieller Informationssysteme 
begonnen wurde, es kann wohl kaum als Bedürfnis eines eines einzelnen 
Programmierers bezeichnet werden, sondern als institutionelles 
Bedürfnis. Dieses Bedürfnis entsteht aber direkt aus den Erfahrungen
der Institution und ihrer Partner, wenn die Software ihre Aufgabe nicht
erfüllt, wird es somit bemerkt. Aus diesem Arrangement entsteht gute
Software, da Rückmeldungen an der richtigen Stelle ankommen. Die 
Software muss nicht verkauft werden, also können sie sich auf
<emphasis>ihre</emphasis> Probleme konzentrieren. Sie wird geschrieben
um die <emphasis>eigenen</emphasis> Probleme zu lösen, um diese Lösung dann mit 
allen zu teilen. Es ist so ähnlich, als wäre das Problem eine Krankheit
und die Software die entsprechende Medizin um eine Epidemie in den Griff
zu bekommen.</para>

<para>In diesem Kapitel geht es um die Frage, wie man der Welt ein neues 
freies Software-Projekt vorstellt. Viele seiner Empfehlungen klingen sehr 
nach einer Gesundheitsorganisation, die Medizin verteilen will. Die Ziele 
sind sich sehr ähnlich: Man will klarstellen, was die Medizin macht, sie
in die Hände der richtigen Leute bringen und sicherstellen, dass 
diejenigen die es erhalten, damit umzugehen wissen. Bei freier
Software will man aber auch ein paar der Empfänger zu einer Beteiligung
an der fortwährenden Forschungsarbeit zur Verbesserung der Medizin
bewegen.</para>

<para>Beim Vertrieb freier Software gibt es zwei Ziele. Die Software
muss sowohl Nutzer als auch Entwickler anziehen. Diese beiden 
Anforderungen stehen zueinander nicht zwangsläufig im Widerspruch, aber sie 
machen die anfängliche Präsentation des Projekts etwas komplexer. 
Manche Informationen sind für beide Gruppen nützlich, manche nur für 
die eine oder die andere. Beide Arten der Information sollten das 
Prinzip der skalierenden Präsentation verfolgen; d.h. dass die Menge an
Informationen sich jederzeit mit der Zeit und Anstrengung decken sollte,
die vom Leser aufgebracht wird. Eine größere Anstrengung sollte auch 
immer eine größere Belohnung mit sich bringen. Wenn beides nicht eng
miteinander korreliert, werden die Leser schnell die Hoffnung aufgeben
und aufhören Zeit zu investieren.</para>

<para>Daraus folgt: <emphasis>das Erscheinungsbild ist 
wichtig</emphasis>. Programmierern fällt es besonders schwer, das zu
glauben. Ihre Liebe zum Inhalt gegenüber dem Äußeren gehört fast
schon zum Berufsethos. Es ist kein Zufall, dass so viele Programmierer
gegen Marketing und Public Relations eine Antipathie hegen, oder dass
professionelle Grafiker über so manches erschrocken sind, worauf 
Programmierer von sich aus kommen.</para>

<para>Das ist schade, denn es gibt Situationen, in denen das Aussehen
auch <emphasis>wirklich</emphasis> dem Inhalt entspricht. Die 
Präsentation eines Projekts ist genau solch ein Fall. Die erste
Information, die ein Besucher über ein Projekt erhält, ist die Gestaltung
seiner Webseite. Diese Information wird erfasst, bevor irgend ein
tatsächlicher Inhalt der Seite verstanden wird &ndash; bevor ein 
Text gelesen wurde oder auf einen Link geklickt wurde. Egal wie
ungerecht es sein mag, Menschen können sich nicht anders helfen, als sich
sofort einen ersten Eindruck zu verschaffen. Im Erscheinungsbild der
Seite wird deutlich, ob man sich beim Aufbau der Präsentation des
Projekts Mühe gemacht hat. Menschen haben eine extrem sensible Antenne
dafür, wieviel Mühe in etwas investiert wurde. Die meisten können mit
einem Blick erkennen, ob eine Seite eilig zusammengebastelt wurde oder
ob man sich ernsthafte Gedanken gemacht hat. Das ist die erste 
Information die Ihr Projekt nach außen gibt, und der hierdurch 
vermittelte Eindruck überträgt sich auf das übrige Projekt.</para>

<para>Auch wenn sich dieses Kapitel thematisch um inhaltliche Fragen dreht,
sollten sie daran denken, dass das Erscheinungsbild eine Rolle spielt.
Da die Webseite für zwei Arten von Besuchern geeignet sein muss
&ndash; Benutzer und Entwickler &ndash; muss besonders auf Klarheit und
Führung geachtet werden. Auch wenn hier nicht die richtige Stelle für
eine allgemeine Abhandlung über Web-Design ist, gibt es ein
erwähnenswertes Prinzip, insbesondere wenn die Seite mehrere 
(überlappende) Zielgruppen ansprechen soll: Besucher sollten eine grobe
Vorstellung haben, wo ein Link hinführt, bevor sie darauf klicken. Das
Ziel eines Links zur Benutzer-Dokumentation sollte <emphasis>allein vom 
Anblick her</emphasis> deutlich sein, und keine
Missverständnisse aufkommen lassen, ob es sich nicht etwa um die Dokumentation
für Entwickler handelt. Beim Betrieb eines Projekts geht es zu einem Teil
darum, Informationen bereitzustellen, aber auch darum, ein Gefühl der
Bequemlichkeit zu vermitteln. Allein schon die Verfügbarkeit bestimmter
grundsätzlicher Angebote an der richtigen Stelle gibt Benutzern und
Entwicklern eine Sicherheit bei ihrer Entscheidung, ob sie sich 
beteiligen wollen oder nicht. Es sagt ihnen, dieses Projekt hat seine
Siebensachen beisammen, Fragen erahnt, die gestellt werden, und sich die
Mühe gemacht diese so zu beantworten, dass Fragesteller möglichst wenig
Einsatz aufbringen müssen. Indem das Projekt eine Aura der Vorbereitetheit
ausstrahlt, sendet es die folgende Botschaft aus:
"Du verschwendest deine Zeit nicht, wenn du dich beteiligst", 
und das ist genau die Botschaft, die Menschen hören wollen.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Schauen Sie sich vorher um</title>

<para>Bevor Sie ein Open-Source-Projekt anfangen, gibt es noch eine 
wichtige Warnung:</para>

<para>Schauen Sie sich vorher um, ob nicht schon ein Projekt existiert,
das Ihre Anforderungen erfüllt. Die Wahrscheinlichkeit ist hoch, dass
unabhängig von dem Problem, das Sie lösen wollen, Ihnen jemand zuvorgekommen 
ist. Wenn das der Fall ist und der entsprechende Code unter eine freie
Lizenz gestellt wurde, gibt es keinen Grund das Rad neu zu erfinden. Es
gibt natürlich Ausnahmen: Falls Sie ein Projekt um der Lernerfahrung 
willen beginnen wollen, wird Ihnen bereits existierender Code nicht 
weiterhelfen. Vielleicht wissen Sie bereits von vornherein, dass Ihr
Problem so spezifisch ist, dass es mit Sicherheit noch von keinem
gelöst wurde. Im allgemeinen gibt es aber keinen Grund sich nicht 
umzuschauen, und der Lohn kann beträchtlich sein. Sollten die üblichen 
Suchmaschinen keine brauchbaren Ergebnisse liefern, sollte Sie es bei
<ulink url="http://freshmeat.net/"/> (eine Nachrichtenseite über 
Open-Source-Projekte (zu dieser Seite, später mehr), bei 
<ulink url="http://www.sourceforge.net/"/> oder beim Verzeichnis 
freier Software der Free Software Foundation 
<ulink url="http://directory.fsf.org/"/> versuchen.</para>

<para>Selbst wenn Sie nicht genau das finden, wonach Sie suchen,
könnten Sie etwas derart ähnliches finden, dass es sinnvoller ist,
sich an diesem Projekt zu beteiligen und es um die fehlenden Funktionen
zu erweitern, als komplett von vorne anzufangen.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Mit dem Vorhandenen beginnen</title>

<para>Sie haben sich umgeschaut, herausgefunden dass nichts Ihre 
Anforderungen erfüllt und sich entschlossen, ein neues Projekt zu
starten.</para>

<para>Was jetzt?</para>

<para>Das Schwierigste beim Start eines neuen freien Software-Projekts 
ist die Verwandlung einer persönlichen Vision in eine öffentliche. Sie
oder Ihre Organisation mögen sehr wohl wissen was Sie wollen. Dieses
Ziel so auszudrücken, dass die Welt es versteht, ist erfordert ein 
beträchtliches Maß an Arbeit. Allerdings ist es von so grundsätzlicher
Bedeutung, dass Sie sich die Zeit dazu nehmen sollten. Sie und die anderen
Gründer müssen entscheiden, worum es in dem Projekt wirklich geht &ndash;
so müssen Sie über seine Grenzen entscheiden, was es abdecken wird und was
<emphasis>nicht</emphasis> &ndash; und ein Missionsziel 
(engl. mission statement) verfassen. Dieser Teil ist für
gewöhnlich nicht allzu schwer, auch wenn es manchmal unerwähnt 
gebliebene Annahmen, sogar Meinungsverschiedenheiten über die Natur des
Projekts aufdecken kann, was sogar gut ist:
Es ist besser diese jetzt auszuräumen als später. Der
nächste Schritt ist das Projekt für die öffentliche Wahrnehmung
aufzubereiten, was im Grunde genommen eine Schinderei ist.</para>

<para>Diese Arbeit ist deshalb so mühselig, weil man hauptsächlich 
Dinge organisiert und dokumentiert, die jeder bereits kennt &ndash; 
d.h "jeder" der bislang am Projekt beteiligt ist. Für diejenigen die
die Arbeit machen, gibt es deshalb keinen direkten Nutzen. Sie
brauchen weder die <filename>README</filename>-Datei für einen Überblick
über das Projekt, noch Entwurfsdokumente oder Benutzerhandbücher.
Sie brauchen keine sorgsam aufbereitete Code-Struktur die mit den
zwar informellen aber verbreiteten Normen zur Veröffentlichung
von Quellen konform ist. Wie auch immer der Quellcode strukturiert ist,
es ist ihnen recht; sie sind ja bereits daran gewöhnt, und solange der 
Code läuft, wissen sie wie man ihn benutzt. Es macht ihnen
nicht einmal etwas aus, wenn grundlegende Annahmen über die 
Architektur des Projekts undokumentiert bleiben; auch mit ihnen sind
sie ja bereits vertraut.</para>

<para>Neulinge andererseits brauchen all diese Dinge.
Glücklicherweise jedoch nicht alle auf einmal. Sie müssen nicht jede
erdenklich Ressource gleich parat haben, bevor Sie mit einem Projekt an die
Öffentlichkeit gehen. In einer perfekten Welt wäre ein neues
Open-Source-Projekt von Beginn an ausgestattet mit einem ausführlichen 
Entwurfsdokument, einem vollständigen Benutzerhandbuch (inklusive der
Hinweise auf Funktionen, die zwar geplant, aber noch nicht implementiert 
sind), wunderschönem und portabel gegliedertem Code, der auf jeder
Plattform läuft, usw. In Wirklichkeit wäre es unvertretbar zeitaufwendig,
auf all diese Dinge zu achten; und überhaupt sind das Arbeiten, bei
denen man davon ausgehen kann, dass sich Freiwillige beteiligen,
sobald das Projekt läuft.</para>

<para><emphasis>Wirklich</emphasis> notwendig ist jedoch, so viel in die
Präsentation zu investieren, dass Neulinge die ersten Hürden des 
Unbekannten überwinden können. Stellen Sie sich das wie den ersten 
Schritt beim Hochfahren vor, um dem Projekt zu einer Art minimaler
Aktivierungsenergie zu verhelfen. Dieser Grenzbereich wird mitunter
<firstterm>Hacktivierungs-Energie</firstterm> genannt: Die 
Energie, die Neulinge investieren müssen, bevor sie etwas zurückbekommen.
Je geringer die Hacktivierungs-Energie ist, desto besser. Ihre erste 
Aufgabe ist es, die Hacktivierungs-Energie auf ein Niveau zu senken,
das Leute dazu ermutigt, sich zu beteiligen.</para>

<para>Jeder der folgenden Unterabschnitte, beschreibt einen wichtigen
Aspekt beim Start eines neuen Projekts. Sie werden ungefähr in der
Reihenfolge präsentiert, in der neue Besucher sie wahrnehmen werden,
natürlich kann die tatsächliche Reihenfolge auch abweichen.
Betrachten Sie sie als Checkliste.
Wenn Sie ein Projekt starten, gehen Sie die Liste durch und stellen Sie
sicher, dass alle Punkte erledigt sind oder zumindest dass Sie mit den 
möglichen Folgen zurechtkommen, wenn Sie einen Punkt auslassen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Wählen Sie einen guten Namen</title>

<para>Versetzen Sie sich in die Lage von jemandem, der gerade von Ihrem 
Projekt erfahren hat, vielleicht ganz zufällig, bei der Suche nach einer 
Software, um ein irgendein Problem zu lösen. Das erste, womit er in 
Berührung kommen wird, ist der Name Ihres Projekts.</para>

<para>Ein guter Name wird Ihr Projekt nicht automatisch erfolgreich
machen, und ein schlechter Name wird nicht seinen Untergang besiegeln &ndash;
nun ja, ein <emphasis>wirklich</emphasis> schlechter Name könnte das 
vielleicht tatsächlich, aber wir gehen davon aus, dass niemand versuchen 
wird, sein Projekt aktiv zu sabotieren. Allerdings kann ein schlechter
Name die Aufmerksamkeit für das Projekts schmälern, entweder weil die
Leute ihn nicht ernst nehmen oder schlicht deshalb, weil Sie ihn sich
nicht merken können.</para>

<para>Ein guter Name:

<itemizedlist>
  <listitem><para>Gibt eine ungefähre Vorstellung davon, was das Projekt
            tut oder steht zumindest in einer so offensichtlichen 
            Beziehung dazu, dass man weiß was das Projekt tut, wenn man 
            den Namen kennt, und es deshalb später leicht hat, sich an 
            den Namen zu erinnern.</para>
  </listitem>
  <listitem><para>Ist einfach zu behalten. Man kommt hier nicht um die
            Tatsache herum, dass Englisch zur Standardsprache im 
            Internet geworden ist: "einfach zu behalten" bedeutet in
            diesem Fall "Einfach zu behalten für jemanden, der Englisch
            lesen kann". Wortspiele, die auf der einheimischen Aussprache 
            beruhen, werden vielen Menschen, deren Muttersprache nicht 
            Englisch ist, unverständlich bleiben. Ist das Wortspiel
            besonders verlockend und einprägsam, kann es das wert
            sein; denken Sie aber daran, dass viele, die den Namen sehen,
            nicht dasselbe heraushören werden wie ein englischer 
            Muttersprachler.</para>
  </listitem>
  <listitem><para>Gleicht nicht dem eines anderen Projekts und verletzt 
            auch kein Markenrecht. Das ist einerseits höflich und 
            andererseits auch rechtlich sinnvoll, denn Sie wollen keine 
            Verwirrung über Identitäten anstiften. Es ist schwierig 
            genug, im Blick zu behalten, was das Netz zu bieten hat, auch
            ohne unterschiedliche Dinge mit demselben Namen.</para>

            <para>Die zuvor in <xref linkend="look-around"/> erwähnten 
            Quellen können Ihnen dabei helfen herauszufinden, ob ein
            anderes Projekt bereits den Namen trägt, den Sie im Sinn 
            haben. Die kostenlose Suche nach Markenzeichen ist über
            <ulink url="http://www.nameprotect.org/"/> und
            <ulink url="http://www.uspto.gov/"/> verfügbar.</para>
  </listitem>
  <listitem><para>Ist idealerweise als Domain-Name verfügbar in den
            Top-Level-Domeins
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, und
            <systemitem>.org</systemitem>.
            Sie sollten eine von ihnen auswählen, vielleicht 
            <systemitem>.org</systemitem>, um sie als offizielle Seite
            des Projekts zu bewerben; die anderen beiden sollten darauf
            verweisen und einfach nur dazu dienen, andere zu hindern, 
            Verwirrung bezüglich Ihres Projektnamens zu stiften.
            Selbst wenn Sie vorhaben, das Projekt auf einer anderen Seite
            zu betreiben (siehe 
            <xref linkend="starting-with-canned-hosting"/>), können Sie
            immer noch die Projekt-spezifische URL registrieren und 
            diese auf die Seiten des Betreibers weiterleiten. Es hilft 
            dem Nutzer ungemein, nur eine einfache URL im Kopf behalten
            zu müssen.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Formulieren Sie ein klares Missionsziel</title>

<para>Sobald Besucher ihre Projektseite gefunden haben, werden sie nach
einer kurzen Beschreibung, dem Ziel des Projekts suchen, um (innerhalb
von 30 Sekunden) entscheiden zu können, ob sie interessiert daran sind,
mehr zu erfahren. Das Ziel sollte auf der Frontseite einen auffälligen
Platz einnehmen, vorzugsweise gleich unter dem Projektnamen.</para>

<para>Die Formulierung des Missionsziels sollte anschaulich, klar
umrissen und vor allem kurz sein. Hier ist ein gutes Beispiel von
<ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Gemeinschaftlich die führende internationale 
  Office-Lösung erschaffen, die auf allen wichtigen Plattformen läuft und 
  den Zugriff auf alle Funktionen und Daten durch offene Schnittstellen
  und ein XML-basiertes Dateiformat erlaubt.</emphasis></para>
  </blockquote>

<para>In nur wenigen Worten haben sie alle wichtigen Punkte erfasst,
hauptsächlich indem sie sich auf das Vorwissen der Leser stützen.
Mit "<emphasis>Gemeinschaftlich</emphasis>", 
signalisieren sie, dass keine einzelne Firma die Entwicklung dominieren
wird; "<emphasis>international</emphasis>" bedeutet, dass die Software
es Menschen erlauben wird, in mehreren Sprachen zu arbeiten; 
"<emphasis>alle wichtigen Plattformen</emphasis>" heißt für Unix, 
Macintosh und Windows. Das Übrige signalisiert, dass offene 
Schnittstellen und leicht verständliche Dateiformate ein wichtiger Teil
ihres Ziels sind. Sie sagen nicht offen, dass sie eine freie Alternative
zu Microsoft Office sein wollen, aber die meisten Menschen können zwischen 
den Zeilen lesen. Auch wenn dieser Satz auf den ersten Blick weitgreifend
erscheint, ist es tatsächlich recht begrenzt: Der Begriff
"<emphasis>Office-Lösung</emphasis>" bedeutet etwas ganz bestimmtes für 
diejenigen, die mit solcher Software vertraut sind. Die mutmaßlichen
Vorkenntnisse der Leser (in diesem Fall wahrscheinlich mit MS Office) 
werden ausgenutzt, um das Missionsziel kompakt zu halten.</para>

<para>Die Gestaltung des Missionsziels hängt teilweise davon ab, wer es 
schreibt und nicht von der Software die es beschreibt. So ist es für
Open Office beispielsweise sinnstiftend, das Wort
"<emphasis>gemeinschaftlich</emphasis>" zu verwenden, denn das Projekt
wurde gestartet und noch immer großteils gesponsort von Sun Microsystems.
Mit dieser Wortwahl zeigt man sich sensibel gegenüber Befürchtungen, die
Entwicklung könne einmal seitens Sun dominiert werden. In einer solchen 
Angelegenheit kann schon allein der Hinweis auf die 
<emphasis>Möglichkeit</emphasis> eines Problems einen wesentlichen 
Schritt für seine Ausräumung darstellen. 

Andererseits können Projekte, die nicht durch eine einzige Firma 
unterstützt werden, auf solche Formulierungen verzichten; schließlich 
ist die Entwicklung durch eine Gemeinschaft das Übliche, es gibt also 
normalerweise keinen Grund, dies im Missionsziel aufzuführen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Sagen Sie, dass das Projekt frei ist</title>

<para>Wer die Missionziele gelesen hat und noch interessiert ist, wird
nun weitere Einzelheiten erfahren wollen, vielleicht durch die
Benutzer- oder Entwicklerdokumentation, schließlich wird er
etwas herunterladen wollen. Doch vor alledem will er sicher sein,
dass es sich um Open Source handelt.</para>

<para><emphasis>Die Hauptseite muss unmissverständlich klar machen,
dass das Projekt Open Source ist.</emphasis> Das mag offensichtlich
klingen, Sie wären aber überrascht darüber, wie viele Projekte es 
vergessen. Ich habe schon Projekte gesehen, deren Hauptseite nicht nur 
versäumte zu sagen, unter welcher Lizenz ihre Software veröffentlicht
wurde, sondern nicht einmal erwähnte, dass es sich um freie Software 
handelt. Manchmal erschien die entscheidende Information erst auf der 
Download-Seite, der Entwickler-Seite oder irgend einer andere Stelle die
einen Klick mehr erforderte. Im Extremfall wurde die Lizenz überhaupt
nicht auf der Site angegeben &ndash; die einzige Möglichkeit sie 
herauszufinden war, die Software herunterzuladen und hineinzuschauen.</para>

<para>Vermeiden Sie diesen Fehler. Durch solch ein Versäumnis können 
Ihnen viele potentieller Entwickler und Nutzer verloren gehen. Sagen Sie 
gleich vorweg, direkt unterhalb des Missionsziels, dass das Projekt 
freie Software oder Open-Source-Software ist, und geben Sie die genaue
Lizenz an. Eine kurze Anleitung zur Wahl einer Lizenz bietet der Abschnitt 
<xref linkend="license-quickstart"/><phrase output="printed">später in 
diesem Kapitel</phrase>; Lizenzfragen werden ausführlich im Kapitel
<xref linkend="legal"/> behandelt.</para>

<para>Bis hierhin hat sich unser hypothetischer Besucher entschieden 
&ndash; wahrscheinlich innerhalb der ersten Minute oder schon vorher 
&ndash; ob er interessiert ist, sagen wir, zumindest weitere fünf
Minuten in das Projekt zu investieren. Der nächste Abschnitt beschreibt,
was er innerhalb dieser fünf Minuten vorfinden sollte.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Funktionen und Anforderungen</title>

<para>Es sollte eine kurze Liste der Funktionen geben, die von der 
Software unterstützt werden (Wenn etwas noch nicht fertig ist, können 
Sie es trotzdem auflisten, schreiben Sie aber
"<emphasis>geplant</emphasis>" oder "<emphasis>in&nbsp;Arbeit</emphasis>"
daneben), und der Anforderungen, die die Software an die Hardware stellt. 
Stellen Sie sich die Liste der Funktionen/Anforderungen wie etwas vor, 
das Sie jemandem geben würden, der eine Kurzzusammenfassung zu dieser 
Software wünscht. Oft ist sie einfach nur eine logische Erweiterung der 
Missionsziele. Das Missionsziel könnte zum Beispiel folgendes
beinhalten:</para>

  <blockquote>
  <para><emphasis>Erstellung einer Volltext-Indexierungs- und 
  -Suchmaschine mit einer umfangreichen Schnittstelle (rich API) für 
  Programmierer, die Suchdienste über große Mengen von Text anbieten
  wollen.</emphasis></para>
  </blockquote>

<para>Die Liste der Funktionen und Anforderungen würde Details 
bieten, um das Missionsziel zu verdeutlichen:</para>

  <blockquote>
    <para><emphasis>Funktionen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Durchsucht Klartext, HTML, und
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Suche nach Wörtern oder 
                Ausdrücke</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Unscharfe Suche</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Inkrementelle Aktualisierung
                der Indexe</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(geplant) Indexierung von Ressourcen im
                Netzwerk</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Anforderungen:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 oder höher</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Genug Festplattenspeicher für die Indexe
                (ungefähr. doppelte Menge der
                Originaldaten)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Durch diese Informationen gewinnen Leser schnell ein Gefühl dafür,
ob ihnen diese Software etwas nützen könnte, und sie können gleichzeitig
überlegen, ob sie sich als Entwickler beteiligen wollen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Stand der Entwicklung</title>

<para>Leute wollen immer wissen wie es einem Projekt geht. Bei neuen
Projekten wollen sie wissen wie weit seine Versprechen und sein 
derzeitiger Stand auseinanderliegen. Bei einem ausgereiften Projekt 
wollen sie wissen, wie aktiv es gepflegt wird, wie oft neue Versionen 
veröffentlicht werden, wie schnell es wahrscheinlich auf Bug-Meldungen
reagieren wird usw.</para>

<para>Um diese Fragen zu beantworten, sollten Sie eine Seite zum
Fortschritt der Entwicklung einrichten, auf der die kurzfristigen Ziele
und Anfragen des Projekts aufgelistet werden (es könnte z.B. auf der 
Suche nach Entwicklern mit bestimmten Fachkenntnissen sein). Die Seite
kann auch eine Übersicht vergangener Versionen haben, mit einer 
Auflistung der jeweiligen Funktionen, damit Besucher sich ein Bild 
machen können, was in diesem Projekt unter "Fortschritt" verstanden wird
und wie schnell es nach diesem Verständnis vorankommt.</para>

<para>Fürchten Sie sich nicht davor, einen unfertigen Eindruck zu 
vermitteln und widerstehen Sie der Versuchung, den Entwicklungsstand 
besser darzustellen als er wirklich ist. Jeder weiß, dass sich Software in
Schritten entwickelt; es ist keine Schande zu sagen "Es ist Alpha-Software
und sie hat bekannte Fehler. Sie läuft zwar und funktioniert 
zumindest teilweise, trotzdem gilt: Nutzung auf eigene Gefahr". Diese
Ausdrucksweise wird nicht die Art von Entwicklern verschrecken, die Sie zu
dieser Zeit brauchen. Was die Nutzer angeht: Einer der schlimmsten 
Fehler, die ein Projekt machen kann, ist Nutzer anzulocken, für die die
Software noch nicht bereit ist. Der Ruf, instabil oder fehlerträchtig zu
sein, ist schwer wieder loszuwerden, wenn er dem Projekt einmal anhaftet. 
Auf lange Sicht zahlt es sich aus, konservativ zu sein; es ist besser 
wenn die Software <emphasis>stabiler</emphasis> läuft als erwartet,
und angenehme Überraschungen sorgen für die beste Mundpropaganda.</para>

<sidebar id="alpha-and-beta">
  <title>Alpha und Beta</title>
  <para>Der Begriff <firstterm>alpha</firstterm> bedeutet für gewöhnlich
  eine erste Version, mit der Benutzer echte Arbeit erledigen können, die
  alle geplante Funktionen hat, aber auch bekannte Fehler. Der vorrangige
  Sinn von Alpha-Software ist, Rückmeldungen zu erhalten, damit die 
  Entwickler wissen, woran sie arbeiten sollen. Die nächste Stufe 
  <firstterm>beta</firstterm> bedeutet, dass in der Software alle groben 
  Fehler behoben wurden, aber noch nicht genug getestet wurde, um als zur 
  Herausgabe geeignet zu gelten. Der Sinn von Beta-Software ist entweder
  zur offiziellen Version zu werden, wenn keine Fehler gefunden wurden, 
  oder detailierte Rückmeldungen an die Entwickler zu geben, um die zügige 
  Fertigstellung der Version zu unterstützen. Der Unterschied zwischen 
  alpha und beta ist zum größten Teil eine Sache der Einschätzung.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Downloads</title>

<para>Man sollte die Software als Quelltext in den üblichen Formaten 
herunterladen können. Wenn ein Projekt noch am Anfang ist, sind
binäre (ausführbare) Dateien nicht nötig, es sei denn der
Build-Vorgang ist derart kompliziert und voller Abhängigkeiten, dass
es für die meisten Leute einen Menge Arbeit wäre, die Software
überhaupt zum Laufen zu bringen. (Wenn das aber der Fall ist, wird 
das Projekt sowieso Schwierigkeiten haben, Entwickler 
anzuziehen.</para>

<para>Die veröffentlichten Dateien herunterzuladen, sollte so bequem, 
standardkonform und mühelos sein wie möglich. Um eine Krankheit 
auszurotten, würden Sie die Medizin nicht so verteilen, dass man zur 
Anwendung eine unüblich Spritzengröße bräuchte. Ebenso sollte Software 
die üblichen Build- und Installationsmethoden beachten, denn je mehr
sie von diesen Standards abweicht, desto mehr potenzielle Benutzer und
Entwickler werden aufgeben und sich verwirrt abwenden.</para>

<para>Das hört sich offensichtlich an, aber viele Projekte machen sich
diese Mühe sehr lange Zeit nicht in der Annahme, dass sie es jederzeit
tun könnten: <emphasis>"Wir erledigen den Kram sobald der Code näher
an der Fertigstellung ist.".</emphasis> Hierbei übersehen sie jedoch,
dass das Hinausschieben der langweiligen Arbeiten an Build- und
Installations-Vorgängen auch die Fertigstellung vom Code hinausschiebt
&ndash; denn sie entmutigen Entwickler, die ansonsten etwas 
zum Code beigetragen hätten. Das Heimtückische daran ist, 
dass nicht einmal jemand davon <emphasis>erfährt</emphasis>, dass
Entwickler verlorengegangenen sind, denn der Vorgang ist eine 
Ansammlung von Nicht-Ereignissen: Jemand geht auf die Webseite, lädt 
die Software herunter, versucht einen Build zu machen, scheitert, gibt auf 
und geht seiner Wege. Wer außer der Person selbst wird jemals davon 
erfahren? Keiner im Projekt wird je bemerken, wie Interesse und 
Wohlwollen von jemanden lautlos verschwendet wurde.</para>

<para>Langweilige Arbeit mit einem hohen Nutzen sollte immer frühzeitig
erledigt werden, und das Herabsetzen der Einstiegshürden für ein Projekt
durch zahlt sich mit vielfachem Gewinn aus.</para>

<para>Wenn Sie ein Paket zum Herunterladen freigeben ist es wichtig, eine
eindeutige Versionsnummer zu vergeben, damit die Ausgaben unterschieden
werden können und sehen welche die aktuellere ist. Eine 
ausführliche Diskussion über Versionsnummern finden Sie in 
<xref linkend="release-numbering"/>, und Details zur Standardisierung
von Build- und Installations-Vorgängen werden im Abschnitt 
<xref linkend="packaging"/><phrase output="printed">, sowie in
<xref linkend="development-cycle"/></phrase> behandelt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Zugriff auf Versionsverwaltung und Bugtracker</title>

<para>Den Quellcode herunterzuladen, mag für diejenigen ausreichend sein, 
die lediglich die Software installieren und benutzen wollen, das genügt
jedoch nicht für diejenigen, die sie weiterentwickeln wollen. Nächtliche 
Quelltext-Schnappschüsse können helfen, sind aber nicht ausreichend
fein für eine lebendige Entwicklergemeinschaft. Diese Leute brauchen 
Echtzeit-Zugriff auf den neusten Quellcode; ihn bereitzustellen, wird erst
durch die Benutzung einer Versionsverwaltung möglich. Anonymer Zugriff auf
den Quellcode, der unter Versionsverwaltung steht, ist ein Zeichen 
&ndash; für Entwickler wie auch für Nutzer &ndash; dass das Projekt sich 
Mühe gibt, den Leuten das für eine Beteiligung Nötige zu geben. Wenn
Sie nicht sofort eine Versionsverwaltung bereitstellen können, sollten
Sie zumindest darauf hinweisen, dass Sie dies demnächst vorhaben. Das
Thema Infrastruktur der Versionsverwaltung wird ausführlich in
<xref linkend="vc"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> behandelt.</para>

<para>Gleiches gilt für den Bugtracker. Die Bedeutung des Bugtracker liegt
nicht allein in seinem Nutzen für die Entwickler, sondern er ist auch ein
Signal an Außenstehende. Für viele ist eine öffentliche Bug-Datenbank
eines der stärksten Anzeichen dafür, dass ein Projekt ernstgenommen werden
sollte. Desweiteren ist ein Projekt um so besser, je mehr Fehler darin 
protokolliert sind. Auch wenn es sich widersprüchlich anhört, sollte man
bedenken, dass die Anzahl der erfassten Fehler von drei Dingen abhängt: 
Die absolute Anzahl in der Software enthaltene Fehler, die Anzahl seiner 
Benutzer und wie bequem es für diese Benutzer ist, neue Fehler
einzutragen. Von diesen dreien sind die letzten beiden wesentlich. Jede
ausreichen große und komplexe Software, enthält eine im Grunde genommen
beliebige Menge an Fehlern, die nur darauf warten, entdeckt zu werden. 
Die eigentliche Frage ist, wie gut kann das Projekt diese Fehler erfassen
und priorisieren? Ein Projekt mit einer großen und gut gepflegten 
Fehler-Datenbank (ein Zeichen dafür, dass schnell auf Bugs reagiert wird, 
Duplikate markiert werden, usw.) macht deshalb einen besseren Eindruck 
als ein Projekt ohne oder mit einer fast leeren Fehler-Datenbank.</para>

<para>Am Anfang des Projekts wird die Fehler-Datenbank natürlich nur sehr
wenige Meldungen enthalten und es gibt nicht viel, das Sie dagegen 
tun könnten. Wenn die Statusseite aber das junge Alter hervorhebt
und wenn Leute, die die Bug-Datenbank betrachten, sehen können, dass
die meisten Einträge vor kurzem gemacht wurden, können sie leicht 
schlussfolgern, dass das Projekt immer noch eine gesunde 
<emphasis>Rate</emphasis> an Einträgen hat und werden dementsprechend 
über die niedrige absolute Anzahl an Bug-Meldungen nicht wirklich
beunruhigt sein .</para>

<para>Man sollte auch beachten, dass Bugtracker oft nicht nur zur 
Verfolgung von Bugs, sondern auch für Verbesserungen an der Software, 
Änderungen an der Dokumentation, ausstehende Aufgaben und mehr benutzt
werden. Weiteres zum Betrieb eines Bugtrackers, wird in 
<xref linkend="bug-tracker"/><phrase output="printed"> im Kapitel 
<xref linkend="technical-infrastructure"/></phrase> behandelt, also 
werde ich hier nicht näher darauf eingehen. Das Wichtige aus Sicht der 
Präsentation ist überhaupt einen Bugtracker zu
<emphasis>haben</emphasis> und sicherzustellen, dass dieser Umstand
bereits auf der Hauptseite deutlich wird.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Kommunikationswege</title>

<para>Besucher wollen oft wissen, wie sie am Projekt beteiligte 
Menschen erreichen können. Veröffentlichen Sie deshalb Adressen von 
Mailinglisten, Chat-Räumen, IRC-Kanälen und anderen Foren, auf denen 
Beteiligte erreicht werden können. Stellen Sie klar, 
dass Sie und die anderen Autoren des Projekts auf diesen Listen
eingetragen sind, um den Besuchern zu zeigen , dass sie Rückmeldungen 
an die Entwickler richten können. Eine Anmeldung auf den
Mailinglisten beinhaltet für Sie nicht die Verpflichtung, alle Fragen 
zu beantworten oder alle Wünsche nach neuen Funktionen zu verwirklichen.
Auf lange Sicht betrachtet, nutzt die Mehrheit diese Foren sowieso nie,
aber es wird sie ermutigen zu wissen, dass sie es 
<emphasis>könnten</emphasis>, sollte es einmal nötig sein.</para>

<para>Am Anfang eines Projekts hat es keinen Sinn, die Foren für Benutzer
und Entwickler getrennt zu halten. Es ist viel besser, wenn alle 
Projektbeteiligten miteinander reden: in einem "Raum". Unter den ersten
Interessenten eines Projekts ist die Unterscheidung zwischen Entwickler 
und Nutzer oft verwaschen. Sofern sie überhaupt gemacht werden kann, gibt 
es in den frühen Tagen wesentlich mehr Entwickler im Verhältnis zu 
Nutzern als es später der Fall ist. Obwohl Sie nicht annehmen können,
dass jeder, der sich früh für das Projekt interessiert, ein Programmierer
ist, der am Quelltext der Software arbeiten will, können Sie annehmen, 
dass sie zumindest daran interessiert sind, die Diskussionen um die 
Entwicklung mitzuverfolgen und ein Gefühl für die Richtung des Projekts
zu entwickeln.</para>
   
<para>Da es in diesem Kapitel nur darum geht wie man ein Projekt startet,
belassen wir es dabei zu sagen, dass diese Foren existieren sollten. 
Später, in <xref linkend="growth"/><phrase output="printed"> im Kapitel 
<xref linkend="communications"/></phrase>, werden wir untersuchen, wo 
und wie man diese Foren aufbaut, inwiefern Sie möglicherweise
Moderation erfordern und wie man Foren für Nutzer und Foren für 
Entwickler voneinander löst wenn es nötig wird, ohne eine
unüberwindliche Kluft aufzureißen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Richtlinien für Entwickler</title>

<para>Wenn jemand sich überlegt, etwas zu einem Projekt beizutragen, 
wird er sich nach Richtlinien für Entwickler umschauen. Diese sind 
weniger technischer, als viel mehr sozialer Natur: Sie erklären, wie
Entwickler miteinander und mit Benutzern umgehen, also letzlich
wie die Dinge laufen sollten.</para>

<para>Dieses Thema wird ausführlich in
<xref linkend="written-rules"/><phrase output="printed"> im Kapitel
<xref linkend="social-infrastructure"/></phrase> behandelt, aber die 
wesentlichen Elemente der Richtlinien sind:

<itemizedlist>
  <listitem><para>Hinweise auf Foren für die Zusammenarbeit mit
            anderen Entwicklern.</para> 
  </listitem>
  <listitem><para>Anleitungen wie man Fehler meldet und Patches 
            einreicht.</para>
  </listitem>
  <listitem><para>Einige Hinweise darauf <emphasis>wie</emphasis>
            die Entwicklung für gewöhnlich abläuft &ndash; ob das Projekt
            eine gütige Diktatur, eine Demokratie oder etwas anderes
            ist.</para>
  </listitem>
</itemizedlist>

Übrigens soll "Diktatur" in keiner Weise herabsetzend wirken. Es ist
völlig in Ordnung eine Tyrannei zu betreiben, bei dem ein bestimmter 
Entwickler das letzte Wort über alle Änderungen haben kann: viele 
erfolgreiche Projekte arbeiten in dieser Weise. Das Wichtige dabei ist,
dass das Projekt dies von vornherein klarstellt. Eine Tyrannei, die 
vorgibt eine Demokratie zu sein, wird sich Menschen abspenstig machen; 
eine Tyrannei die klar sagt was sie ist, wird gut zurecht kommen, sofern
der Tyrann kompetent und vertrauenswürdig ist.</para>
  
<para>Siehe 
<ulink url="http://subversion.apache.org/docs/community-guide/"/>
für ein Beispiel besonders gründlicher Richtlinien für Entwickler oder
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> für
allgemeinere Richtlinien, die sich mehr auf die Steuerung und Teilnahme
am Projekt, als auf technische Angelegenheiten konzentrieren.</para>

<para>Das etwas andere Thema, die Bereitstellung einer Projekt-Einführung
für Programmierer, wird im Abschnitt
<xref linkend="developer-documentation"/><phrase output="printed">
später in diesem Kapitel behandelt</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Dokumentation</title>

<para>Dokumentation ist unerlässlich. Es muss <emphasis>irgend
etwas</emphasis> zum Lesen geben, selbst wenn es nur rudimentär und 
unvollständig ist. Die Dokumentation ist ganz klar ein Teil der vorhin
erwähnten "Plackerei" und sie ist oft das erste, das in einem neuen 
Open-Source-Projekt zu kurz kommt. Die Missionsziele und eine Liste von 
Funktionen zu schreiben, die Wahl einer Lizenz, den Stand der Entwicklung
zusammenzufassen &ndash; das sind alles relativ kleine Aufgaben, die mit 
einem Schlag erledigt werden können; und wenn sie erledigt sind, muss man
sich normalerweise nicht weiter damit beschäftigen. Die Dokumentation
hingegen ist nie wirklich fertig, was vielleicht ein Grund dafür ist, 
dass man es manchmal hinauszögert, sie überhaupt in Angriff zu 
nehmen.</para>

<para>Das heimtückischste daran ist, dass die Autoren der Dokumentation
keinen direkten Nutzen aus ihr ziehen, während sie für neue Nutzer
unerlässlich ist. Die wichtigste Dokumentation für neue Benutzer sind die
Grundlagen: Wie richte ich die Software zügig ein, eine Übersicht über
ihre Funktionsweise, vielleicht auch Anleitungen für häufige Aufgaben.
All dies ist den <emphasis>Autoren</emphasis> nur allzu gut
bekannt &ndash; so bekannt, dass es für sie schwierig sein kann, sich in 
die Lage der Leser zu versetzen, und mühsam die offensichtlichen
Einzelschritte zu buchstabieren, die aus ihrem Blickwinkel kaum der
Erwähnung wert scheinen.</para>

<para>Es gibt keine magische Lösung für dieses Problem. Es muss sich nur
jemand die Zeit nehmen, alles aufzuschreiben und die Brauchbarkeit der 
Dokumentation dann an neuen Nutzern zu testen. Benutzen Sie ein
einfaches, leicht zu bearbeitendes Format wie HTML, Klartext oder eine
XML-Variante &ndash; etwas geeignetes für kleine und spontane
Verbesserungen. Das reduziert nicht nur den Aufwand für die ersten
Autoren, die Dokumentation schrittweise zu verbessern, sondern auch 
allen, die später zum Projekt hinzukommen.</para>

<para>Eine Möglichkeit, eine erste grundlegende Dokumentation abzusichern
ist es, ihren Umfang von vornherein einzuschränken. So erscheint die
Aufgabe zumindest nicht bodenlos. Als Richtlinie könnte gelten, dass
folgende minimale Bedingungen erfüllt werden:</para>

<itemizedlist>
  <listitem><para>Sagen Sie dem Leser klar, welche technischen
            Kenntnisse erwartet werden.</para>
  </listitem>
  <listitem><para>Beschreiben sie klar und deutlich, wie man die
            Software einrichtet, und nennen Sie dem Benutzer irgendwo am
            Anfang der Dokumentation, ein Merkmal oder einen Befehl, mit
            dem man prüfen kann, ob sie richtig eingerichtet wurde. Die
            erste Dokumentation ist in mancherlei Hinsicht wichtiger als
            eine echte Bedienungsanleitung. Je mehr Mühe jemand in die
            Installation und Einrichtung der Software investiert hat,
            desto beharrlicher wird er darin sein, fortgeschrittene, 
            unzureichend dokumentierte Funktionen zu erfassen. Wenn Leute 
            aufgeben, passiert es meistens gleich am Anfang; deshalb sind
            es die frühsten Phasen wie die Installation, bei der man die
            meiste Unterstützung braucht.</para>
  </listitem>
  <listitem><para>Geben Sie Tutorial-artige Beispiele für typische
            Aufgaben. Natürlich sind viele Beispiele für viele
            Aufgaben noch besser, aber wenn die Zeit knapp ist, wählen
            Sie einen Punkt aus und schreiben Sie dazu eine ausführliche
            Anleitung. Sobald jemand sieht, dass die Software für eine
            Sache benutzt werden <emphasis>kann</emphasis>, wird er
            beginnen alleine herauszufinden, wofür sie noch zu gebrauchen
            ist &ndash; und wenn Sie Glück haben, dazu übergehen, die 
            Dokumentation selbst zu erweitern. Was uns zum nächsten Punkt 
            bringt...</para>
  </listitem>
  <listitem><para>Kennzeichnen Sie unvollständige Bereiche der 
            Dokumentation als solche. Indem Sie dem Leser zeigen, dass 
            Sie sich über die Defizite im Klaren sind, stellen Sie sich 
            auf seine Sicht ein. Durch Einfühlungsvermögen geben Sie zu
            ihm verstehen, dass das Projekt nicht erst überzeugt werden
            muss, was wichtig ist. Solche Kennzeichen entsprechen keiner
            Verpflichtung, die Lücken bis zu einem bestimmten Datum
            auszufüllen &ndash; sie können auch als offenen Anfragen um
            Hilfe von Freiwilligen betrachtet werden.</para>
  </listitem>
</itemizedlist>

<para>Der letzt Punkt hat tatsächlich umfassendere Bedeutung und kann auf 
das ganze Projekt angewendet werden, nicht nur auf die Dokumentation. Eine 
genaue Buchführung über bekannte Defizite ist in der Open-Source-Welt die 
Norm. Sie müssen die Mängel des Projekts nicht hochspielen, sondern
einfach gewissenhaft und leidenschaftslos aufzählen, wo die Veranlassung
gegeben ist (Das kann in der Dokumentation, im Bugtracker oder in einer 
Diskussion auf einer Mailingliste geschehen). Keiner wird das als vom
Projekt ausgehende Miesmacherei ansehen, oder als Verpflichtung die 
Probleme bis zu einem bestimmten Datum zu lösen, es sei denn, das Projekt
geht ausdrücklich eine solche Verpflichtung ein. Da jeder Nutzer diese 
Mängel selbst finden wird, ist es besser, sie psychologisch darauf 
vorbereiten &ndash; das gibt den Eindruck, dass im Projekt ein 
Bewusstsein über seinen Zustand besteht.</para>

<sidebar id="starting-a-faq">
  <title>Die Pflege einer FAQ-Liste</title>

  <para>Eine <firstterm>FAQ</firstterm> ("Frequently Asked 
  Questions"<footnote><para>Häufig gestellte Fragen</para></footnote>) 
  kann eine der besten Investitionen des Projekts hinsichtlich ihres
  Informationsgehalts sein. Eine FAQ ist auf 
  Fragen abgestimmt, die von Benutzern und 
  Entwickler wirklich gestellt werden &ndash; nicht auf Fragen die Sie
  vielleicht <emphasis>erwarten</emphasis> würden &ndash; und
  deshalb neigt eine gut gepflegte FAQ dazu, denjenigen die sie zu Rate
  ziehen, genau das zu geben, wonach sie suchen. Die FAQ ist oft die 
  erste Stelle, die Benutzer durchsuchen, wenn sie auf ein Problem 
  stoßen, sie ziehen es oft sogar dem offiziellen Handbuch vor und es 
  ist wahrscheinlich das Dokument in ihrem Projekt, worauf andere 
  Seiten am ehesten verweisen.</para>

  <para>Leider können Sie die FAQ nicht am Anfang eines Projekts
  schreiben. Eine gute FAQ schreibt man nicht, man lässt sie wachsen.
  Sie sind schon per Definition auf Rückmeldungen angewiesen. FAQs 
  entwickeln sich erst mit der Zeit, durch die täglichen Nutzung der 
  Software. Da es unmöglich ist, die Fragen der Benutzer zu erahnen,
  ist es unmöglich sich hinzusetzen und von Grund auf eine nützliche
  FAQ zu schreiben.</para>

  <para>Verschwenden Sie also nicht Ihre Zeit damit, es zu versuchen.
  Sie können jedoch eine größtenteils leere FAQ einrichten, als Vorlage
  und offensichtlichen Ort, an dem Leute Fragen und Antworten eintragen
  können, wenn das Projekt erst einmal läuft. Zunächst ist wichtigste 
  Eigenschaft einer FAQ aber nicht ihre Vollständigkeit, sondern ihre
  Einfachheit: Wenn es einfach ist, neue Einträge zu anzufügen, wird dies
  auch getan werden. (Die vernünftige Pflege einer FAQ ist eine nicht
  ganz triviale, aber faszinierende Angelegenheit, die in 
  <xref linkend="faq-manager"/><phrase output="printed"> im Kapitel
  <xref linkend="managing-volunteers"/></phrase> weiter behandelt 
  wird.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Erreichbarkeit der Dokumentation</title>

<para>Die Dokumentation sollte an zwei Stellen erreichbar sein: Online
(direkt auf der Website) <emphasis>und</emphasis> in der zum Download
verfügbaren Ausgabe der Software (siehe 
<xref linkend="packaging"/><phrase output="printed"> im Kapitel
<xref linkend="development-cycle"/></phrase>). Sie sollte online in 
durchsuchbarer Form vorliegen, weil Interessierte die Dokumentation oft 
lesen, <emphasis>bevor</emphasis> sie die Software zum ersten Mal 
herunterladen, um besser entscheiden zu können, ob sie dies überhaupt
tun sollen. Prinzipiell, sollte die Dokumentation aber auch der Software
beiliegen, denn ein veröffentlichtes Paket sollte alles enthalten
(d.h. lokal verfügbar machen), was man braucht um die Software zu
benutzen.</para>

<para>Im Falle der Online-Dokumentation sollten Sie für einen Link sorgen,
der auf <emphasis>vollständige</emphasis> Dokumentation auf einer einzigen 
HTML-Seite verweist (schreiben Sie einen Hinweis wie "monolitisch" oder
"umfangreiche Einzelseite" daneben, damit die Leser nicht überrascht sind
wenn es beim Laden etwas Zeit braucht). Das ist nützlich, da Leute oft die 
ganze Dokumentation nach einem bestimmten Wort oder eine Wendung absuchen 
wollen. Im Allgemeinen wissen sie schon, wonach sie suchen, können sich 
nur nicht an welcher Stelle es stand. In dieser Situation gibt es nichts
frustrierenderes, als je eine HTML-Seite für Inhaltsangabe, eine für die
Einleitung, eine weitere für die Installationsanleitung, usw zu haben. 
Wenn die Seiten so aufgeteilt sind, machen sie die Suchfunktion des 
Browsers wertlos. Eine in mehrere Seiten aufgebrochene Dokumentation ist
gut, wenn man weiß, welchen Abschnitt man braucht oder die ganze 
Dokumentation von vorne nach hinten durchlesen möchte. Das ist aber 
<emphasis>nicht</emphasis> die häufigste Art auf die Dokumentation 
zuzugreifen. Viel häufiger kennt sich jemand im Grunde genommen mit
der Software aus und kehrt zurück, um nach einem bestimmten Wort oder
Ausdruck zu suchen. Keine monolitische Datei bereitzustellen, würde in 
solchen Fällen das Leben unnötig erschweren.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Entwickler-Dokumentation</title>

<para>Die Entwickler-Dokumentation wird geschrieben, damit Programmierer 
den Code verstehen, um ihn reparieren und erweitern zu können. Sie
unterscheidet sich ein wenig zu den vorhin erwähnten 
<emphasis>Richtlinien für Entwickler</emphasis>, die eher sozialer als
technischer Natur sind. Entwickler-Richtlinien sagen den Programmierern,
wie sie miteinander zurecht kommen; die Entwickler-Dokumentation 
hingegen sagt ihnen, wie sie mit dem Code zurechtkommen. Beide werden 
oft der Bequemlichkeit halber gemeinsam in einem Dokument angeboten
(wie im oben erwähnten Beispiel
<ulink url="http://subversion.apache.org/docs/community-guide/"/>), 
müssen dies jedoch nicht.</para>

<para>Obwohl die Entwickler-Dokumentation sehr hilfreich sein kann,
gibt es keinen Grund, um ihretwillen eine Freigabe zu verzögern. So 
lange die ursprünglichen Autoren verfügbar (und bereit) sind, Fragen zum
Code zu beantworten, genügt das für den Anfang. Tatsächlich ist eine 
häufige Motivation zum Schreiben der Dokumentation, dass man wieder und 
wieder die immer gleichen Fragen beantworten muss. Aber selbst bevor sie 
geschrieben ist, wird es entschlossene Freiwillige gelingen, sich einen
Weg durch den Code zu bahnen. Was Menschen dazu treibt, ihre Zeit mit
dem Erarbeiten einer Codebasis zu verbringen, ist das der Code aus
ihrer Sicht etwas Nützliches tut. Solange sie sich dessen gewiss sind,
nehmen sich die Zeit, Probleme zu lösen; ohne diese Zuversicht wird sie
keine auch noch so gute Dokumentation anlocken oder halten
können.</para>

<para>Wenn Sie also nur die Zeit zum Schreiben einer Dokumentation haben,
so schreiben Sie eine für Benutzer. Jede Dokumentation für Benutzer ist
auch für die Entwickler effektiv; jeder Programmierer, der an einer 
Software arbeitet, muss auch damit vertraut sein, wie man sie benutzt.
Wenn Sie später sehen, wie Programmierer andauernd die gleichen Fragen 
stellen, nehmen Sie sich die Zeit, eine paar separate Dokumente eigens
für sie zu schreiben.</para>

<para>Manche Projekte nutzen Wikis für die allererste Dokumentation, oder 
sogar für die Hauptdokumentation. Nach meiner Erfahrung funktioniert das 
nur dann, wenn das Wiki aktiv von einer Handvoll Leuten bearbeitet wird, 
die hinsichtlich der Organisation und des Tonfalls der Dokumentation
einig sind. Mehr dazu steht in 
<xref linkend="wikis"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase>.
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Beispiel-Ausgaben und Screenshots</title>

<para>Ein Projekt mit graphischer Benutzeroberfläche oder graphischen
oder anderen markanten Ausgaben sollte Beispiele auf der Website des 
Projekts anbieten. Im Fall einer Benutzeroberfläche wären es Screenshots;
für Ausgaben können es Screenshots oder vielleicht nur Dateien sein.
Beide befriedigen das Bedürfnis des Menschen nach direkter Belohnung:
Ein einziges Bild kann überzeugender sein, als ganze Abstätze von
Beschreibungen oder Geplapper auf Mailinglisten, denn ein Bild 
ist ein unverkennbarer Beweis dafür, dass die Software 
<emphasis>funktioniert</emphasis>. Sie mag ihre Fehler haben, schwer 
zu installieren und unvollständig dokumentiert sein, aber ein Bild ist
immerhin ein Beweis, dass man sie zum Laufen bringen kann,
wenn man sich nur genug Mühe gibt.</para>

<sidebar id="screenshots">
  <title>Screenshots</title>
  <para>Screenshots können einschüchtern, wenn man noch nie welche 
  gemacht hat, deshalb hier ein kleine Anleitung. Mit "The Gimp"
  (<ulink url="http://www.gimp.org/"/>), öffne 
  <guimenu>Datei</guimenu>-&gt;<guimenu>Erstellen</guimenu>-&gt;
  <guimenu>Bildschirmfoto...</guimenu>, wähle 
  <guimenuitem>Ein&nbsp;einzelnes&nbsp;Fenster&nbsp;aufnehmen</guimenuitem> oder 
  <guimenuitem>Den&nbsp;ganzen&nbsp;Bildschirm&nbsp;aufnehmen</guimenuitem>, klicken Sie dann
  auf <guimenuitem>Aufnehmen</guimenuitem>. Ziehen Sie nun den 
  Kreuz-Cursor auf das gewünschte Fenster (dieser Schritt entfällt bei
  ganzem Bildschirm) um das Bild in The Gimp aufzunehmen. 
  Ändern und schneiden Sie anschließend das Bild bei Bedarf 
  nach den Anweisungen auf <ulink 
  url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Sie können der Website des Projekts noch vieles mehr hinzufügen,
wenn die Zeit dazu reicht, oder wenn es aus irgend einem Grund besonders
passend erscheint: Eine Seite mit Neuigkeiten, eine Seite mit der 
Historie des Projekts, eine Seite mit verwandten Links, eine 
Suchfunktion, ein Link für Spenden, usw. Nichts davon ist am Anfang 
notwendig, aber man sollte es für später im Hinterkopf behalten.</para>

<sect2 id="starting-with-canned-hosting">
<title>Hosting-Pakete</title>
<!-- Schreibmarke für Peu -->
<para>Es gibt ein paar Sites die kostenlos die Infrastruktur für 
Open-Source-Projekte bereitstellen: Einen Web-Bereich, Versionsverwaltung, 
einen Bugtracker, einen Download-Bereich, Chat-Foren, regelmäßiges Backup
usw. Die Details sind zwar von Site zu Site unterschiedlich, aber das
Wesentliche wird bei allen angeboten. Durch die Nutzung dieser Sites
erhalten Sie vieles umsonst, müssen dafür aber die Kontrolle über die
Benutzerführung teilweise aufgeben. Der Hosting-Dienst entscheidet 
darüber, welche Software die Site benutzt, und kann das Aussehen der
Projektseite und das Gefühl, dass es vermittelt, kontrollieren oder
zumindest beeinflussen.</para>

<para>Siehe
<xref linkend="canned-hosting"/><phrase output="printed"> im Kapitel
<xref linkend="technical-infrastructure"/></phrase> für eine 
detailliertere Diskussion über die Vor- und Nachteile von Hosting 
Bündel und eine Liste von Seiten die sie anbieten.</para> 
</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Die Wahl einer Lizenz</title>

<para>Dieser Abschnitt soll eine schnelle und sehr grobe Anleitung sein
zur Wahl einer Lizenz. Lesen Sie <xref linkend="legal"/> für ein
besseres Verständnis über die genauen rechtlichen Folgen der verschieden
Lizenzen, und wie Ihre Wahl beeinflussen kann, wie Ihre Software mit 
anderer freier Software gemischt werden kann.</para>

<para>Sie können unter einer Menge Lizenzen für freien Software wählen.
Die meisten müssen wir hier nicht beachten, da Sie für die speziellen
rechtlichen Bedürfnisse einer bestimmten Firma oder Person geschrieben
wurden und für Ihr Projekt nicht angemessen wären. Wir beschränken uns
auf die am häufigsten benutzten Lizenzen von denen Sie am ehesten eine
wählen wollen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>"Alles ist erlaubt"-Lizenzen</title>

<para>Wenn Sie kein Problem damit haben, dass der Code in Ihrem Projekt
in proprietären Anwendungen benutzt wird, können Sie eine 
<firstterm>MIT/X</firstterm> ähnlich Lizenz nehmen. Es ist die 
einfachste der verschiedenen Lizenzen die nicht viel mehr machen, als 
Vervielfältigungsrechte durchzusetzen (ohne dabei wirklich die 
Vervielfältigung einzuschränken) und spezifizieren, dass keiner für den
Code haftet. Weiteres darüber finden Sie in 
<xref linkend="license-choosing-mit-x"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>Die GPL</title>

<para>Wenn Sie nicht wollen, dass Ihr Code in proprietären Anwendungen
verwendet wird, benutzen Sie die GNU General Public 
License<footnote><para>Allgemeine Öffentliche Lizenz</para></footnote>
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>). Die GPL ist 
heute die wahrscheinlich bekannteste Lizenz für freie Software der 
Welt. Das ist an und für sich schon ein großer Vorteil, da viele 
potentielle Benutzer und Teilnehmer bereits mit ihr vertraut sein 
werden und deshalb keine zusätzliche Zeit aufbringen müssen um Ihre 
Lizenz zu lesen und zu verstehen. Für weiter Details siehe
<xref linkend="license-choosing-gpl"/><phrase output="printed">
im Kapitel<xref linkend="legal"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Anwendung einer Lizenz</title>

<para>Wenn Sie sich für eine Lizenz entschieden haben, sollten Sie es
auf Ihre Hauptseite sagen. Sie brauchen nicht den kompletten Text der
Lizenz dort anzugeben; der Name und ein Verweis auf den vollständigen
Text reichen vollkommen aus.</para>

<para>Damit sagen Sie der Öffentlichkeit mit welcher Lizenz Sie 
<emphasis>vorhaben</emphasis> die Software zu veröffentlichen, 
rechtliche gesehen reicht dass aber nicht. Dafür muss die Software
selbst die Lizenz enthalten. Meißtens wird das gemacht, indem der
komplette Text der Lizenz in einer Datei namens 
<filename>COPYING</filename> (oder <filename>LICENSE</filename>)
gestellt wird, und am Anfang jeder Quellcode-Datei wird dann einen 
darauf verwiesen, zusammen mit dem Datum der Erhebung, die Urheber,
die Lizenz und eine Angabe wo der komplette Text der Lizenz zu finden
ist.</para>

<para>Davon gibt es viele Variationen, also werden wir uns hier nur
ein Beispiel anschauen. Die GNU GPL sagt, dass man einen Hinweis wie
diesen am Anfang jeder Datei des Quellcodes setzen sollte.</para>

<screen> 
Copyright (C) [Jahr]  [Name des Autors]

Dieses Programm ist freie Software. Sie können es unter den 
Bedingungen der GNU General Public License, wie von der Free Software
Foundation veröffentlicht, weitergeben und/oder modifizieren, entweder
gemäß Version 2 der Lizenz oder (nach Ihrer Option) jeder späteren 
Version.

Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es
Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne
die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR 
EINEN BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public
License.

Sie sollten ein Exemplar der GNU General Public License zusammen mit
diesem Programm erhalten haben. Falls nicht, schreiben Sie an die Free
Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110, USA.<footnote><para>Diese Übersetzung von Katja Lachmann im 
Auftrag der S.u.S.E. GmbH – <ulink url="http://www.suse.de"/> und 
überarbeitet von <ulink url="http://www.peter.gerwinski.de/">Peter 
Gerwinski</ulink>, G-N-U GmbH – <ulink url="http://www.g-n-u.de"/>, 
wird hier zum besseren Verständnis verwendet. In Ihrer
Anwendung sollten Sie jedoch die Englische Originalfassung benutzen die
Sie hier <ulink url="http://www.gnu.org/licenses/gpl.html#SEC4"/> 
finden, da diese Übersetzung nicht offiziell oder im rechtlichen Sinne 
Anerkannt ist. Die vollständige Übersetzung der GPL finden Sie hier
<ulink url="http://www.gnu.de/documents/gpl.de.html"/></para></footnote> 
</screen>

<para>Es wird nicht explizit erwähnt, dass der vollständige Text der
Lizenz in der Datei <filename>COPYING</filename> steht, dass ist aber
meistens der Fall. (Sie könnten den obigen Hinweis abändern um die 
Quelle direkt anzugeben.) Diese Vorlage gibt Ihnen auch eine 
geographische Adresse von der Sie eine Kopie der Lizenz erhalten 
können. Noch häufiger, wird auf die Lizenz mit der URL einer Webseite
mit dem kompletten Text der Lizenz verwiesen. Die Entscheidung, wo
die beständigste Kopie dieser Lizenz gepflegt wird, sei Ihnen
überlassen, vielleicht ist es auch einfach die Webseite Ihres Projekts.
Im Allgemeinen muss der Hinweis am Anfang jeder Datei nicht genau so
aussehen wie der obige, sofern es mit dem gleichen Hinweis auf den 
Halter des Urheberrechts und das Datum, sowie die Lizenz angibt und
angibt wo die komplette Lizenz zu finden ist.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Den Ton angeben</title>

<para>Bis jetzt haben wir Aufgaben behandelt die beim Aufbau des
Projekts einmal erledigt werden müssen: Eine Lizenz wählen, die 
Webseite einrichten, usw. Die wichtigsten Aspekte bei der Gründung 
eines Projekts sind aber dynamisch. Eine Adresse für eine Mailingliste
zu wählen ist einfach; dafür zu sorgen, dass die Listenkommunikation
beim Thema bleibt und produktiv, ist eine
ganz und gar andere Angelegenheit. Wenn das Projekt nach Jahren der
geschlossenen Entwicklung geöffnet wird, ändert sich der
Entwicklungsprozess und Sie werden die bestehenden Entwickler auf diesen
Wandel vorbereiten müssen.</para>

<para>Die ersten Schritte sind die schwersten, da es für zukünftiges
Verhalten noch keine Beispiele oder Erwartungen gibt, nach denen man 
sich richten kann. Beständigkeit in einem Projekt, entsteht nicht durch
formale Richtlinien, sondern durch eine von allen geteilte, schwer 
greifbare, kollektive Weisheit, die sich mit der Zeit entwickelt. Oft 
gibt es auch geschriebene Regeln, die aber im wesentlichen eine 
Zusammenfassung der sich fortwährend weiterentwickelnde Vereinbarungen
sind, nach denen das Projekt sich wirklich richtet. Die 
niedergeschriebenen Richtlinien definieren nicht so sehr die Kultur des
Projekts, als das sie davon eine Beschreibung sind und selbst das nur
näherungsweise.</para>

<para>Es gibt ein paar Gründe diese Entwicklung. Wachstum und
Betriebsamkeit sind nicht so schädlich für die Anhäufung sozialer 
Normen, wie man vielleicht denken würde. So lange Veränderungen nicht
<emphasis>zu</emphasis> schnell ablaufen, gibt es Zeit für Neulinge,
Abläufe zu lernen und nachher selber diese Regeln anzuwenden und 
durchsetzen. Bedenken Sie, wie Kinderlieder Jahrhunderte überdauern. Es
gibt heute Kinder die ungefähr die gleichen Lieder singen wie Kinder
vor hunderten von Jahren, auch wenn keiner von ihnen heute noch am
leben ist. Jüngere Kinder hören die Lieder, wie sie von den Älteren
gesungen werden und wenn sie wiederum älter sind, singen sie vor den
anderen jüngeren Kindern. Dabei geben sie die Lieder natürlich nicht
bewussten weiter, aber die Lieder überleben trotzdem, weil sie 
regelmäßig und weitergegeben werden. Freie Software-Projekte werden
vielleicht nicht im Bereich von Jahrhunderten gemessen (zumindest bis
jetzt noch nicht), aber die Dynamik der Übertragung ist in vielerlei
Hinsicht die gleiche. Die Umsatzrate ist allerdings viel höher und 
muss bei der Weitergabe, durch eine aktivere und bedachtere 
Anstrengung, ausgeglichen werden.</para>

<para>Diese Anstrengung wird unterstützt durch die Tatsache, dass neue
Leute für gewöhnlich bei ihrer Ankunft, soziale Normen erwarten und
suchen werden. Das liegt einfach in der Natur des Menschen. In einer
Gruppe die durch ein gemeinsames Bestreben geeinigt ist, sucht man
instinktiv nach Verhaltensmuster, um sich als Mitglied dieser Gruppe
zu kennzeichnen. Sie sollten früh Beispiele setzen, um das Verhalten
der Mitglieder so zu beeinflussen, dass es für das Projekt nützlich
ist; denn einmal Etabliert, werden sie überwiegend von selbst
weiterbestehen.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Es folgen ein paar Beispiele, um gute Präzedenzfälle zu setzen.
Es ist keine ausführliche Liste, sondern lediglich einige Darstellung
der Idee, dass es enorm hilfreich ist, die Stimmung für die 
Zusammenarbeit im Projekt schon früh vorzugeben. Physikalisch mag es
sein, dass jeder Entwickler für sich, alleine in einem Raum arbeitet,
Sie können aber eine Menge machen, um ihnen das 
<emphasis>Gefühl</emphasis> zu geben, als würden alle zusammen in einem
Raum arbeiten. Je mehr sie sich so fühlen, desto mehr Zeit werden sie 
an dem Projekt verbringen wollen. Ich habe diese Beispiele gewählt, da
sie in dem Subversion-Projekt aufkamen, 
(<ulink url="http://subversion.tigris.org/"/>), an dem ich mich seit
seiner Gründung beteilige und mitverfolge. Sie gelten aber nicht 
alleine für Subversion; diese Situationen werden in den meiste 
Open-Source-Projekten aufkommen und sollten als Gelegenheiten gesehen
werden, einen guten Anfang zu machen.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Private Diskussionen vermeiden</title>

<para>Selbst nachdem Sie ein Projekt an die Öffentlichkeit gebracht
haben, werden Sie und die anderen Gründungsmitglieder manchmal damit
konfrontiert werden, schwierige Fragen innerhalb eines kleineren
Kreises durch private Kommunikation lösen zu wollen. Das gilt besonders
am Anfang des Projekts, wo viele wichtige Entscheidungen zu treffen 
sind und es meist nur wenige Freiwillige gibt, die qualifiziert wären 
sie zu treffen. All die offensichtlichen Nachteile öffentlicher 
Diskussionen auf Mailinglisten werden greifbar vor Ihnen liegen: 
Die bei E-Mail-Diskussionen unvermeidbare Verzögerung, die für einen
Konsens erforderliche Zeit, die Mühe sich mit naiven Freiwilligen
auseinandersetzen zu müssen die meinen, alles zu verstehen (solche gibt
es in jedem Projekt; manchmal bringen sie im nächsten Jahr die besten 
Beiträge, manchmal bleiben sie ewig naiv), die Person die nicht 
versteht, warum Sie nur das Problem X lösen wollen, wenn es 
offensichtlich eine Untermenge des größeren Problems Y ist, usw. Die 
Verlockung, diese Unterhaltungen hinter verschlossenen Türen zu führen 
und sie als vollendete Tatsache zu präsentieren oder zumindest als 
nachdrückliche Empfehlung einer vereinigten und einflussreichen 
Wählergruppe, ist tatsächlich groß.</para>

<para>Tun Sie's nicht.</para>

<para>So langsam und mühselig öffentliche Diskussionen auch sein mögen,
sie sind auf lange Sicht trotzdem vorzuziehen. Wichtige Entscheidungen
privat zu treffen, ist Gift für Freiwillige. Kein Freiwilliger der 
seine Sache ernst meint, würde lange in einer Umgebung bleiben, in dem
alle wichtigen Entscheidungen, von einer geheimen Versammlung getroffen
werden. Desweiteren hat die öffentliche Diskussion den Vorteil, dass
ihre positiven Nebenwirkungen viel länger fortbestehen als die
kurzlebige technische Frage um die es geht:

<itemizedlist>
  <listitem>
  <para>Die Diskussion wird dabei helfen, neue Entwickler auszubilden
        und zu unterrichten. Sie können nie wissen, wie viele Augen die
		Diskussion beobachten; selbst wenn die Meisten sich nicht 
		beteiligen, kann es sein, dass viele sie im Stillen mitverfolgen,
		um Informationen über das Projekt zu sammeln.</para>
  </listitem>
  <listitem>
  <para>Bei der Diskussion werden <emphasis>Sie</emphasis> die Kunst
		lernen, technische Angelegenheiten für Leute zu erklären die 
        mit der Software nicht so vertraut sind wie Sie. Das ist eine 
        Fähigkeit, die Übung erfordert und nicht durch die Unterhaltung
		mit Ebenbürtigen erlangt werden kann.</para>
  </listitem>
  <listitem>
  <para>Die Diskussion und ihre Ergebnisse werden auf ewig in den 
  		öffentlichen Archiven verfügbar sein und es zukünftigen 
		Diskussionen ermöglichen Wiederholungen zu vermeiden. Siehe
        <xref linkend="using-archives"/><phrase output="printed"> im 
        Kapitel<xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Zuletzt gibt es noch die Möglichkeit, dass jemand auf der 
Mailingliste einen echten Beitrag zu der Diskussion leisten könnte, indem
er eine Idee aufbringt, an die Sie nie gedacht hätten. Es ist schwer zu 
sagen, wie wahrscheinlich das ist; es hängt schlicht von der Komplexität
des Problems und dem erforderlichen Grad der Spezialisierung ab.
Wenn ich aber ein Beispiel anführen darf, wage ich zu behaupten, dass 
es viel wahrscheinlicher ist, als man es intuitiv erwarten würde. Im
Subversion-Projekt glaubten wir (die Gründer) mit einer tiefen und
komplexen Problematik konfrontiert zu sein, über die wir uns
seit ein paar Monaten viele Gedanken gemacht hatten, und offen gesagt
zweifelten wir daran, dass irgendjemand auf der kürzlich eingerichteten
Mailingliste etwas wertvolles zu der Diskussion beizutragen hatte.
Wir nahmen also den einfachen Weg und begannen, unsere technischen
Ideen in privaten E-Mails untereinander auszutauschen, bis ein 
Beobachter des Projekts<footnote><para>Wir haben zwar noch nicht das
Thema der Namensnennung und Anerkennung angesprochen, aber um auch zu
praktizieren was ich später predigen werde: Der Name des Beobachters
war Brian Behlendorf, und er war es der darauf hingedeutet hat, wie
wichtig es ist, alle Diskussionen öffentlich zu halten, es sei denn es
gibt einen bestimmten Grund für Geheimhaltung.</para></footnote> davon
Wind bekam und uns bat, die Diskussion auf die öffentliche Mailingliste
zu verlagern. Wir verdrehten zwar ein bisschen die Augen, taten es 
aber &ndash; und waren völlig erstaunt über die Anzahl aufschlussreicher
Kommentare und Vorschläge die schnell daraus resultierten. In vielen
Fällen boten Leute Ideen an, die uns nie in den Sinn gekommen waren. Es
stellte sich heraus, dass ein paar <emphasis>sehr</emphasis> kluge Köpfe
auf dieser Liste waren; sie hatten nur auf den richtigen Köder 
gewartet. Es ist wahr, dass die resultierenden Diskussionen länger 
dauerten, als wenn wir sie privat gehalten hätten, allerdings waren sie
um vieles produktiver, was die zusätzliche Zeit in jedem Fall wert
war.</para>

<para>Ohne in allzu verallgemeinernde Aussagen, wie "Die Gruppe ist
immer schlauer als der Einzelne" abzugleiten (wir kennen alle genügend
Gruppen, die daran zweifeln lassen), muss man doch anerkennen, dass es 
bestimmte Aktivitäten gibt, für die Gruppen besonders geeignet sind. 
Ausführliche Gutachten sind eines; schnell auf viele Ideen zu kommen
ein Weiteres. Die Qualität dieser Ideen hängt natürlich davon ab,
wie hochwertig die Gedanken waren, die man hineingesteckt hat. Sie
werden aber nie erfahren, was für geistreiche Denker da draußen sind,
solange Sie ihnen keine Herausforderungen bieten.</para>

<para>Es gibt natürlich auch Diskussionen die man im Privaten führen
muss; im Verlauf des Buches werden wir Beispiele dafür sehen. Das leitende 
Prinzip sollte aber sein: <emphasis>Solange es keinen Grund gibt, etwas
privat zu regeln, sollte es öffentlich geschehen.</emphasis></para>

<para>Um das in Gang zu setzen, müssen Sie aber Einfluss üben. Es 
reicht nicht lediglich sicherzustellen, dass Ihre eigenen Nachrichten
an die öffentliche Mailingliste gehen; Sie müssen auch andere dazu 
bewegen ihre unnötig privaten Unterhaltungen öffentlich zu halten. Wenn
jemand versucht eine private Diskussion anzufangen, und es keinen Grund
gibt sie privat zu halten, sollten Sie sich verpflichtet fühlen sofort
eine angemessene übergeordnete Diskussion zu eröffnen. Sie sollten nicht 
einmal direkt auf das Thema eingehen, bevor Sie nicht entweder die 
Diskussion erfolgreich an einem öffentlichen Ort gelenkt haben oder 
sichergestellt haben, dass sie doch privat gehalten werden sollte. Wenn 
Sie sich konsequent so verhalten, werden Leute es ziemlich schnell 
mitbekommen und gleich die öffentlichen Foren benutzen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Unhöflichkeit im Keim ersticken</title>

<para>Sie sollten von Anfang an, gleich nachdem Ihr Projekte an die 
Öffentlichen geht, null Toleranz gegenüber unhöfliches oder 
beleidigendes Verhalten in ihren Foren zeigen. Keine Toleranz heißt 
nicht unbedingt diese technisch durchzusetzen. Diese Leute sollten Sie 
nicht aus der Liste entfernen, wenn sie einen anderen Teilnehmer 
"flamen", oder ihnen wegen abfällige Bemerkungen den Commit-Zugriff
entziehen. (Theoretisch müssten Sie eventuell auf solche Mittel 
zurückgreifen, aber erst nachdem alle anderen erschöpft sind &ndash; was 
am Anfang eines Projekts per Definition noch nicht der Fall ist.) Null 
Toleranz bedeutet, niemals schlechtes Benehmen einfach unbemerkt
vorbeiziehen zu lassen. Wenn jemand zum Beispiel eine technische
Bemerkung zusammen mit einem <foreignphrase>argumentum ad 
hominem</foreignphrase> gegen einem anderen Entwickler macht, ist es
zwingend notwendig, dass Ihre Reaktion als <emphasis>erstes</emphasis>
den persönlichen Angriff anspricht, als separate Angelegenheit, und erst 
dann auf den technischen Inhalt eingeht.</para>

<para>Leider ist es sehr leicht und allzu üblich, dass konstruktive
Diskussionen in destruktive "flame wars" ausarten. Menschen werden
Sachen sagen, die sie nie von Angesicht zu Angesicht sagen würden. Die
Themen dieser Diskussionen verstärken nur diesen Effekt: Bei
technischen Angelegenheiten, fühlen Menschen oft, dass es nur eine
richtige Antwort zu den meisten Fragen gibt und dass eine
Meinungsverschiedenheit zu ihrer Antwort, nur durch die Ignoranz oder
Dummheit des Anderen erklärt werden kann. Es ist ein kurzer Weg den
technischen Vorschlag einer Person als bescheuert zu bezeichnen, bis man 
die Person selber bescheuert nennt. Tatsächlich ist es oft schwer zu
unterscheiden, wo die technische Diskussion aufhört und die persönliche
Beleidigung anfängt, was auch ein Grund ist warum drastische Maßnahmen 
oder Bestrafungen nicht angebracht sind. Sie sollten statt dessen wenn
Sie darauf stoßen, eine Nachricht schreiben die nachdrücklich darauf 
hinweist wie wichtig es ist die Unterhaltung in einem freundlichen Ton 
zu führen, ohne dabei jemand zu beschuldigen absichtlich giftig gewesen 
zu sein. Leider hören sich diese "Guter Bulle" Nachrichten meistens
wie die Predigt einer Lehrerin aus der Vorschule an, die ihre Klasse 
über gutes Benehmen belehrt:</para>

    <blockquote>
      <para><emphasis>Lasst uns bitte zuerst mit den u.U. ad hominem
      Bemerkungen aufhören; den Entwurf der Sicherheitsschicht von J 
      als "naiv und ignorant gegenüber allen Grundprinzipien der 
      Sicherheit in der Informatik" zu bezeichnen. Ob das so stimmt 
      oder nicht, es ist in jedem Fall keine Art eine Diskussion zu 
      führen. J hat seinen Entwurf mit guter Absicht vorgeschlagen. 
      Wenn es Fehler aufweist, weise darauf hin und wir werden sie 
      beheben oder einen neuen Entwurf suchen. Ich bin mir sicher, dass
      M niemand persönlich beleidigen wollte, aber er hat sich
      unglücklich ausgedrückt, und wir wollen versuchen hier 
	  konstruktiv zu bleiben.</emphasis></para>

      <para><emphasis>Und jetzt zu dem Entwurf. Ich denke M hatte recht 
      als er sagte, ...</emphasis></para>
    </blockquote>

<para>So gestelzt sich solche Antworten auch anhören, sie haben doch
eine messbare Wirkung. Wenn Sie immer wieder auf solches Verhalten 
hindeuten aber keine Entschuldigung von der angreifenden Partei 
fordern, lassen Sie ihnen die Möglichkeit sich abzuregen und ihre 
bessere Seite zu zeigen, indem sie sich beim nächsten mal anständiger 
benehmen &ndash; und das werden sie. Einer der Geheimnisse erfolgreich 
gegen solches Verhalten vorzugehen, ist niemals die untergeordnete 
Diskussion zum Hauptthema werden zu lassen. Es sollte immer nur
nebenbei erwähnt werden, ein kurzes Vorwort zu der eigentlichen Antwort. 
Weisen Sie im vorbeigehen darauf hin, dass "so arbeiten wir hier nicht", 
aber gehen Sie dann weiter zum echten Inhalt, damit Leuten immer zum 
Thema haben, worauf sie Antworten können. Wenn jemand Protest einlegt,
dass sie die zu Unrecht zurechtgewiesen wurde, sollten Sie sich nicht
in ein Streit verzetteln lassen. Antworten Sie entweder garnicht (wenn 
Sie denken, die Person will nur Dampf ablassen und es ist keine Antwort 
erforderlich), oder entschuldigen Sie sich für die übertriebene
Reaktion und schreiben Sie, dass es schwer ist Nuancen aus einer E-Mail
herauszulesen. Gehen Sie danach aber wieder zum eigentlichen Thema
über. Bestehen Sie niemals auf einer Antwort, privat oder öffentlich, 
von jemand der sich unangemessen verhalten hat. Wenn er sich von
allein entschuldigt, ist das großartig, aber es von ihm zu verlangen,
würde nur Verbitterung heraufbeschwören.</para>

<para>Das übergeordnete Ziel ist, gute Umgangsformen zu einem
wesentlichen Merkmal in der Kerngruppe wird. Das hilft dem Projekt, da
Entwickler durch "flame wars" vertrieben werden können (sogar von 
Projekten die sie mögen und unterstützen). Es kann passieren, dass Sie
ihre Vertreibung nicht einmal mitbekommen; Mancher könnte sich die Liste
anschauen, erkennen dass er ein dickes Fell bräuchte um an diesem 
Projekt teilzunehmen und verzichtet daraufhin besser gleich ganz auf die
Teilnahme. Foren freundlich zu halten, ist auf
lange Sicht eine Überlebenstaktik und das ist einfacher, 
wenn das Projekt noch klein ist. Ist es erst zu einem Teil der Kultur 
geworden, werden Sie nicht mehr der einzige sein der sich darum bemüht. 
Jeder wird daran arbeiten.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Code Review</title>

<para>Eine der besten Möglichkeiten eine produktive 
Entwicklergemeinschaft zu fördern ist es Leute zu überreden, sich
gegenseitig Ihren Code anzuschauen. Das effektiv zu gewährleisten, 
erfordert ein wenig technische Infrastruktur &ndash; insbesondere sollten 
Commit-E-Mails angeschaltet werden; siehe 
<xref linkend="commit-emails"/> für Details hierzu. Commit-E-Mails 
sorgen dafür, dass auf jede Änderung am Quellcode eine E-Mail 
folgt mit dem zugehörigen Kommentar des Autors und den Diffs (siehe
<xref linkend="vc-vocabulary-diff"/> im Kapitel 
<xref linkend="vc-vocabulary"/>). <firstterm>Code Review</firstterm> 
heißt diese Commit-E-Mails beim Eintreffen auch durchzulesen und nach 
Fehlern sowie möglichen Verbesserungen zu suchen. <footnote><para>So 
wird Review zumindest in Open-Source-Projekten praktiziert. Für
zentralisierte Projekte kann "Code Review" auch bedeuten, dass mehrere
Personen gemeinsam den ausgedruckten Code durchgehen und nach 
bestimmten Problemen und Mustern suchen.</para></footnote></para>

<para>Code Review dient mehreren Zwecken gleichzeitig. Es ist das
offensichtlichste Beispiel für "Peer Review" in der Open-Source-Welt
und hilft unmittelbar die Qualität der Software zu erhalten. Jeder
Fehler, der in einer Software ausgeliefert wird, kam durch einen Commit
zustande der übersehen wurde; es werden umso weniger Fehler in einer
veröffentlichten Version sein, je mehr Augen auf jeden Commit
gerichtet sind. Code Review dient aber auch einem indirekten Zweck: Es 
bestätigt Leuten, dass ihre Arbeit Bedeutung hat, man würde sich 
schließlich nicht die Zeit nehmen über einen Commit zu schauen, wenn es 
einem nicht interessieren würde, welche Auswirkungen er hat. Menschen 
leisten dann die beste Arbeit wenn sie wissen, dass andere sich 
die Zeit nehmen sie zu bewerten.</para>

<para>Jeder Review sollte öffentlich durchgeführt werden. Selbst wenn
ich im selben Raum mit anderen Entwicklern bin und einer
von uns einen Commit macht, achten wir darauf, den Review nicht verbal
im Raum zu führen, sondern ihn über den Entwickler-Liste zu schicken. 
Jeder profitiert davon wenn der Review sichtbar ist. Leute folgen den
Erläuterungen und finden darin manchmal Mängel und selbst wenn nicht,
erinnert es sie zumindest daran, dass Code Review eine erwartete
regelmäßige Aktivität ist, wie Geschirrspülen oder Rasenmähen.</para>

<para>Im Subversion-Projekt hatten wir am Anfang nicht diese
Angewohnheit. Es gab keine Garantie, dass jeder Commit überprüft wurde, 
wir schauten zwar manchmal über bestimmte Änderungen, wenn ein
bestimmter Bereich im Quellcode einen besonders interessierte. Es
schlichen sich Fehler ein, die man eigentlich hätte sehen sollen und
müssen. Ein Entwickler namens Greg Stein, der aus seiner vorherigen
Arbeit den Wert von Code Review kannte, entschied sich, ein Beispiel zu
setzen, indem er sich jede Zeile von <emphasis>jedem einzelnen
Commit</emphasis> anschaute. Auf jedem Commit, den irgendjemand machte,
folgte bald eine E-Mail von Greg an den Entwickler-Liste, indem er
den Commit sezierte, mögliche Probleme analysierte und ab und zu, für
besonders cleveren Code, ein Lob aussprach. Sofort begann er, Fehler
und nicht optimale Programmierpraktiken zu entdecken, die ansonsten
durchgerutscht wären, ohne je bemerkt zu werden. Er beschwerte sich
wohlgemerkt nie, dass er der einzige war der Code Review betrieb, auch
wenn es keinen unwesentlichen Teil seiner Zeit in Anspruch nahm, er
lobte bei jeder Gelegenheit die Vorteile von Code Review. Ziemlich bald
fingen andere an, ich eingeschlossen, regelmäßig Commits zu überprüfen.
Was war unsere Motivation? Greg hatte uns nicht bewusst durch Schande
dazu gebracht. Er hatte bewiesen, dass Code Review eine wertvolle
Investition von Zeit ist und dass man genau soviel zu einem Projekt
beitragen kann, indem man die Änderungen anderer durchsieht, wie wenn
man selber neuen Code schreibt. Als er das demonstriert hatte, wurde
es zum erwarteten Verhalten. Das ging sogar soweit, dass wenn auf einem
Commit keine Reaktion folgte, man sich als Committer Sorgen machte und
sogar auf der Liste nachfragte, ob denn niemand die Zeit gefunden
hätte es sich anzuschauen. Später bekam Greg eine Arbeit, die ihm nicht
so viel Zeit für Subversion ließ, und er musste mit dem regelmäßigen
Code Review aufhören. Aber inzwischen war die Angewohnheit unter uns 
anderen bereits so weit verbreitet, als sei es nie anders gewesen.</para>

<para>Beginnen Sie mit Code Reviews vom allerersten Commit an. Probleme 
die man am einfachsten bei der Durchsicht von Diffs erkennt, sind 
Sicherheitslücken, Speicherlecks, ungenügende Kommentare oder 
Dokumentation von Schnittstellen, off-by-one Fehler, 
Caller/Callee-Divergenzen 
und andere Probleme, deren Entdeckung keinen großen 
umgebenden Kontext erfordern. Selbst Angelegenheiten größeren Umfangs, 
wie z.B. häufig auftauchende Muster nicht an einer gemeinsamen
Stelle zu abstrahieren, werden leichter erkennbar, nachdem man Code 
Review regelmäßig betreibt, da man sich an vergangene Diffs 
erinnert.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Machen Sie sich keine Sorgen, dass Sie nichts finden, worüber es 
etwas zu sagen gäbe, oder dass Sie nicht genug über alle Bereiche im
Code wissen. Es gibt meistens irgendetwas über jeden beliebigen Commit 
zu sagen; selbst wenn Sie nichts bedenkliches finden, kann es sein, dass 
Sie etwas Lobenswertes finden. Das wichtige ist, jedem der Committer 
klar zu machen, dass ihre Arbeit gesehen und verstanden wird. Natürlich 
befreit Code Review die Programmierer nicht von der Verantwortung, ihre 
Änderungen vor dem Commit zu überprüfen und zu testen; niemand sollte 
sich auf Code Review verlassen, um Fehler zu finden, die er selbst 
hätte finden müssen.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>Der Übergang geschlossener Projekte nach Open Source</title>

<para>Sorgen Sie beim Öffnen eines bestehenden Projekts mit aktiven 
Entwicklern, die eine Umgebung mit geschlossenem Code gewohnt sind,
für Klarheit über den Umfang der Änderungen, die auf die Entwickler
zukommen &ndash; und versuchen Sie sich so weit wie möglich in ihre Lage
zu versetzen.</para>

<para>Versuchen Sie sich die Situation aus ihrer Sicht vorzustellen: 
vorher wurden Entscheidungen über Code und Architektur in einer Gruppe 
von Programmierern getroffen, die sich alle mehr oder weniger gleich 
gut mit der Software auskannten, die alle den gleichen Druck von oben
zu spüren bekamen und die alle ihre gegenseitigen Stärken und 
Schwächen kannten. Jetzt verlangen Sie von ihnen, ihren Code 
freizugeben, nur damit irgendwelche Fremden ihn auseinandernehmen,
untersuchen und sich eine Meinungen über ihn bilden, allein anhand des
Quellcodes den sie sehen, ohne zu wissen, welcher geschäftlicher Druck
Sie zu bestimmten Entscheidungen gezwungen hat. Diese Fremden werden
viele Fragen stellen, Fragen die vorhandene Entwickler aufrütteln 
werden, wenn Sie feststellen müssen, dass die Dokumentation an der sie
so hart gearbeitet haben <emphasis>immer noch</emphasis> lückenhaft
ist (das ist unvermeidbar). Um dem ganzen noch ein Sahnehäubchen zu
geben, sind die Neulinge unbekannte, gesichtslose Wesen. Wenn einer
Ihrer Entwickler sich seiner Fähigkeiten als Programmierer unsicher
ist, stellen Sie sich vor, wie es ihn erst verbittern wird, wenn die
Neulinge auf Mängel in seinem Code hinweisen, noch dazu vor
seinen Kollegen. Wenn Sie kein Team von perfekten Programmierern
haben, ist sowas unvermeidlich &ndash; tatsächlich wird es am Anfang
wahrscheinlich allen passieren. Nicht weil sie schlechte 
Programmierer sind; sondern weil jedes Projekt oberhalb einer bestimmten
Größe zwangsläufig Fehler beinhaltet, und die Überprüfung durch eine
Gemeinschaft wird manche dieser Fehler aufdecken (siehe 
<xref linkend="code-review"/> <phrase output="printed"> früher in
diesem Kapitel</phrase>). Gleichzeitig werden die neuen Freiwilligen 
selber nicht so sehr dieser Prüfung unterliegen, da sie selber noch 
keinen Code beisteuern können, bis sie mehr mit dem Projekt vertraut 
sind. Für Ihre Entwickler kann das erscheinen, als ob die ganze Kritik 
immer nur auf sie gerichtet ist und nie nach außen geht. Es besteht 
deshalb die Gefahr, dass sich unter den alten Hasen eine  
Belagerungsmentalität einstellt.</para>

<para>Am besten kann man das verhindern, indem man alle vorwarnt, was 
auf Sie zukommt, es ihnen erklärt, ihnen sagt, dass ein anfängliches
Unbehagen völlig normal ist, und ihnen versichert, dass es mit der Zeit
besser wird. Manche dieser Warnungen sollten privat geschehen, vor das 
Projekt geöffnet wird. Es könnte aber auch hilfreich sein, die Leute 
auf der Mailingliste zu erinnern, dass es für das Projekt eine neue 
Art der Entwicklung ist und dass die Anpassung eine gewisse Zeit
brauchen werden. Das beste was Sie machen können, ist als gutes Beispiel
voranzugehen. Wenn Sie sehen, dass Ihre Entwickler nicht genügend 
Fragen der neuen Freiwilligen beantworten, nützt es nichts, ihnen zu 
sagen, dass sie mehr antworten sollten. Es mag sein, dass sie kein gutes 
Gefühl dafür haben, wann eine Reaktion gerechtfertigt ist, oder es kann 
sein, dass sie nicht wissen, welche Priorität die eigentliche Arbeit am
Code gegenüber der neuen Bürde mit Außenstehende zu kommunizieren
einnimmt. Man kann sie am ehesten dazu überreden sich zu beteiligen, 
indem man sich selbst beteiligt. Beobachten Sie die öffentliche 
Mailingliste und beantworten Sie ein paar Fragen. Wenn Sie nicht genügend
Erfahrung haben um die Fragen zu beantworten, sollten Sie es für alle
sichtbar an einem anderen Entwickler weitergeben, der die nötige
Erfahrung hat &ndash; und achten Sie darauf, dass er eine Antwort oder
zumindest eine Reaktion gibt. Natürlich wird es für die älteren 
Entwickler verlockend sein, in private Diskussionen zu verfallen,
schließlich sind sie daran gewohnt. Beobachten Sie deshalb auch die 
interne Mailingliste und bitten Sie ggf. darum, bestimmte Diskussionen
besser gleich auf die öffentliche Liste zu verlagern.</para>

<para>Es gibt andere, langfristige Bedenken beim Öffnen vorher
geschlossener Projekte. <xref linkend="social-infrastructure"/> 
untersucht Techniken um bezahlte und unbezahlte Entwickler erfolgreich
zu mischen und <xref linkend="legal"/> behandelt die nötige rechtliche
Sorgfalt beim öffnen von privatem Code, mit bestimmten Komponenten,
die einer anderen Partei "gehört", bzw. von ihnen geschrieben 
wurde.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Bekanntmachung</title>

<para>Sobald das Projekt in einem vorzeigbarem Zustand ist &ndash; nicht 
perfekt, lediglich vorzeigbar &ndash; ist es bereit der Welt
bekanntgemacht zu werden. Tatsächlich geht das relativ einfach: Gehen
Sie auf <ulink url="http://freshmeat.net/"/>, klicken Sie in der oberen 
Navigationsleiste auf <guimenuitem>Submit</guimenuitem> und füllen Sie
das Formular aus um Ihr Projekt bekanntzumachen. Freshmeat ist der Ort 
auf dem alle schauen, für Ankündigungen über neue Projekte. Sie müssen 
dort nur ein paar Augen erwischen und ihre Nachricht wird sich von da
aus, über Mundpropaganda weiterverbreiten.</para>

<para>Wenn Sie Mailinglisten oder Newsgroups kennen, auf denen eine
Ankündigung Ihres Projekts thematisch passen würde und von Interesse
wäre, sollten Sie dort einen Eintrag machen, achten Sie aber darauf
genau <emphasis>einen</emphasis> Eintrag pro Forum zu machen, und 
verweisen Sie dabei auf Ihre eigenen Foren für weitere anschließende 
Diskussionen (indem Sie den <systemitem>Reply-to</systemitem>
Header setzen). Die Einträge sollten kurz und prägnant sein:</para>

<screen>
An: discuss@lists.example.org
Betreff: [ANN] Das Scanley-Projekt für Volltext-Indizierung 
Antwort-An: dev@scanley.org

Diese Nachricht ist ein einmaliger Eintrag über die Gründung des 
Scanly-Projekts, eine Open-Source-Volltextindizierungs- und Suchmaschine, mit 
einer reichen API für Programmierer die Suchfunktionen für große Mengen
an Text implementieren wollen. Der Code von Scanley läuft, wird aktiv 
entwickelt und wir suchen sowohl nach Entwickler als auch Beteiligte 
die Testen wollen.

Webseite: http://www.scanley.org/

Funktionen:
   - Durchsucht Klartext, HTML, und XML
   - Suche nach Wörter oder Ausdrücken
   - (geplant) Unscharfe suche
   - (geplant) Inkrementelle Aktualisierung der Indizes
   - (geplant) Indizierung von Webseiten

Voraussetzungen:
   - Python 2.2 oder neuer 
   - Genügend Festplattenplatz für die Indizes (ca. 2x die Größe der 
     ursprünglichen Daten)

Weiteres finden Sie auf scanley.org.

Vielen Dank,
-H. Mustermann
</screen>

<para>(Siehe <xref linkend="publicity"/><phrase output="printed">
im Kapitel <xref linkend="communications"/></phrase> für Ratschläge
über die Bekanntmachung neuer Versionen und andere Ereignisse im
Projekt.)</para>

<para>Es gibt eine noch laufende Diskussion in der 
Open-Source-Gemeinschaft, 
ob ein Projekt schon am Anfang laufenden Code haben muss,
oder ob es einem Projekt hilft, selbst in den frühen Phasen des 
Entwurfs offen zu sein. Ich dachte früher, dass es am aller wichtigsten
war mit laufendem Code anzufangen, dass man so erfolgreiche Projekte 
vom Spielzeug unterscheiden konnte und ernstzunehmende Entwickler nur 
etwas anfassen würden, was auch schon etwas handfestes machte.</para>

<para>Wie es sich herausstellte, war das nicht der Fall. Beim 
Subversion-Projekt, fingen wir mit einem Entwurf an, ein Kern 
interessierter und miteinander vertrauter Entwickler, viel Fanfare und
<emphasis>keine einzige Zeile</emphasis> lauffähiger Code. Zu meiner
völligen Überraschung, schaffte es das Projekt von Anfang an, aktive
Freiwillige anzulocken und bis wir tatsächlich etwas laufendes hatten,
waren bereits eine ziemliche Menge freiwilliger Entwickler beteiligt.
Subversion ist da nicht das einzige Beispiel; das Mozilla-Projekt fing
auch ohne laufenden Code an und ist heute ein erfolgreicher und
beliebter Web-Browser.</para>

<para>Angesichts solcher Beweise, muss ich von meiner ursprünglichen
Behauptung zurücktreten, dass laufender Code absolut notwendig ist um 
ein Projekt anzufangen. Trotzdem ist laufender Code immer noch eines 
der besten Grundlagen für Erfolg, und eine gute Grundregel wäre mit
der Bekanntgabe zu warten, bis Sie welchen haben. Es mag allerdings 
Umstände geben bei denen eine frühere Bekanntmachung Sinn macht. Ich 
denke, dass zumindest eine gut ausgearbeiteter Entwurf, oder irgend 
ein Grundgerüst für den Code notwendig ist &ndash; dieser kann natürlich
wegen öffentliche Rückmeldungen überarbeitet werden müssen, aber es
muss etwas handfestes und greifbares geben, etwas mehr als gute 
Absichten, wovon Leute ausgehen und weiterarbeiten können.</para>

<para>Wenn Sie die Ankündigung machen, sollten Sie jedoch nicht gleich 
darauf ein Schar Freiwilliger erwarten. Für gewöhnlich ist das Resultat
einer Bekanntmachung, dass Sie nebenbei ein paar Anfragen bekommen, es
melden sich ein paar Leute auf der Mailingliste an, abgesehen davon geht
so ziemlich alles weiter wie bisher. Mit der Zeit werden Sie aber eine 
stete Zunahme von Beiträgen neuen Mitarbeiter und Benutzer bemerken. 
Die Ankündigung ist lediglich das Pflanzen eines Samenkorns. 
Es braucht Zeit, bis die Nachricht sich fortpflanzt. Wenn 
das Projekt beständig diejenigen honoriert, die sich beteiligen, wird 
sich die Nachricht verbreiten, denn Menschen teilen einander mit, wenn
sie etwas Gutes entdecken. Wenn alles gut läuft, wird die Dynamik der 
exponenziellen Kommunikationsnetze das Projekt langsam in eine komplexe 
Gemeinschaft verwandeln, in der Sie nicht unbedingt jeden Namen 
kennen und nicht länger jede Unterhaltung mitverfolgen können. Die 
nächsten Kapiteln handeln vom Arbeiten in einer solchen Umgebung.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
