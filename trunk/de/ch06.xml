<chapter id="communications">

<title>Kommunikation</title>

<simplesect>

<para>Die Fähigkeit klar zu schreiben ist vieleicht die wichtigste die
man in einer Open Source Umgebung haben kann. Auf lange Sicht, hat es
mehr zubedeuten als Programmier Begabung. Ein sehr guter Programierer
mit schlechten kommunikations Fähigkeiten kann nur eines nach dem
anderen erledigt bekommen, und selbst dann vieleicht Schwierigkeiten
haben andere zu überzeugen. Ein schlechter Programmierer der aber gut
kommunizieren kann, kann viele Leute koordinieren und überzeugen viele
verschiedene Sachen zu machen und dadurch einen wesentlichen Einfluss
auf die Richtung und Geschwindikeit des Projekts.</para>

<para>Es scheint keinen großen Zusammenhang, in die eine oder andere
Richtung, zwischen der Fähigkeit guten Code zu schreiben und der
Fähigkeit mit seinen Mitmenschen zu kommunizieren. Es gibt einen
gewissen Zusammenhang zwischen der Fähigkeit zu Programmieren und
teschnische Angelegenheiten gut zu beschreiben, aber das ist nur ein
winziger Teil der Kommunikation in einem Projekt. Viel wichtiger ist
die Fähigkeit mit seinem Publikum einfühlsam umzugehen, seine 
Nachrichten und Kommentare aus der sicht anderer zu sehen, und andere
dazu zu bringen ihre eigene Nachrichten mit einer ähnlichen 
objektivität zu sehen. Gleichermaßen wichtig ist es zu bemerken wenn
ein bestimmtes Nachrichtenmedium oder Kommunikationsmethode nicht
mehr gut funktioniert, vielleicht weil es nicht mit einer zunehmenden 
Anzahl an Nutzern skaliert, und sich die Zeit zu nehmen dagegen etwas
zu tun.</para>

<para>Hiervon ist alles in der Theorie offensichtlich&mdash;was in
der Praxis schwierig macht, ist dass in Umgebungen der Entwicklung
freier Software eine verblüffend viele verschiedene Mechanismen gibt,
sowohl was das Publikum angeht als auch bei der Kommunikation. Soll
eine gegebener Gedanke in einer Email an den Verteiler verfasst
werden, als Anmerkung in dem Bug Tracker oder als Kommentar in dem
Quellcode? Wenn man eine Frage in einem öffentlichem Forum
beantowortet, wie viel Wissen kann man von "dem Lesenden" erwarten,
vor dem Hintergrund das derjenige der die Frage gestellt hat nicht
der einzige ist der die Rückmeldung lesen könnte? Wie können die
Entwickler eine konstruktive Verbindung mit den Nutzern aufrecht
erhalten, ohne von Anfragen für Funktionen, fälschliche Bug Meldungen,
und allgemeinem Geschwätz überschwemmt zu werden? Woran kann man
erkennen, wann ein Medium die Grenzen seiner Kapazität erreicht hat,
und was man dagegen machen kann?</para>

<para>Lösungen zu diesen Problemen sind für gewöhnlich nur Teillösungen,
das jede bestimmte Lösung letztendlich durch Wachstum oder Änderungen
an der Struktur des Projekts, obsolet gemacht wird. Sie sind oftmals 
auch <foreignphrase>ad hoc</foreignphrase>, da sie improvisierte 
Reaktinen auf dynamische Situationen sind. Alle Beteiligten müssen sich
darüber im klaren sein, wann und wie Kommunikationen festgefahren werden
können, und an Lösungen beteiligt sein. Leute zu helfen das zu erreichen
ist ein großer Teil der Verwaltung eines Open Source Projekts. Die 
Abschnitte die folgen behandeln sowohl wie Sie Ihre eigene Kommunikation
abwickeln, als auch wie Sie die Aufrechthaltung der Kommunikationsmittel
eine Priorität für alle im Projekt machen können.<footnote><para>Es hat
im bezug auf dieses Thema viel akademische Untersuchung gegeben; siehe
zum Beispiel <citetitle>Group Awareness in Distributed Software
Development</citetitle> von Gutwin, Penner, und Schneider (diese waren
ehemals online verfügbar, scheinen aber mittlerweile zumindest zeitweise
verschwunden zu sein; benutzen Sie eine Suchmaschine um es zu finden).
</para></footnote></para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="you-are-what-you-write">
<title>Du bist was du schreibst</title>

<para>Bedenken Sie folgendes: Das einzige was irgend jemand über Sie
im Internet weiß, kommt von dem was Sie schreiben, oder was andere
über Sie schreiben. Es mag sein, dass Sie als Person geistreich, 
scharfsinnig und karismatisch sind&mdash;wenn Ihre Emails aber
ausschweifend und unstrukturiert sind, wird man von Ihnen annehmen,
dass Sie wirklich so sind. Oder vieleicht sind Sie wirklich persönlich
wirklich ausschweifend und unstrukturier, aber keiner muss das je
erfahren, wenn Ihre Nachrichten deutlich und informativ sind.</para>

<para>Ihre Nachrichten ein wenig Mühe zu widmen kann sich in großem
Maße auszahlen. Langjähriger Hacker an freier Software Jim Blandy
erzählt folgende Geschichte:</para>

<blockquote>
  <para>Damals 1993, arbeitete ich für die Free Software Foundation,
  und wir machten gerade Beta Tests der Version 19 von GNU Emacs.
  Wir machten ungefähr jede Woche einen Release, und Leute probierten
  es aus und reichten Bug Meldungen bei uns ein. Es gab einen Kerl den
  keiner von uns vorher persönlich getroffen hatte, der aber tolle 
  Arbeit leistete: Siene Meldungen waren immer klar und brachten uns
  direkt zum Problemm, und wenn er selber einen Fix anbot, war er fast
  immer richtig. Er war einfach erstklassig.</para>

  <para>Nun, vor die FSF Code welcher von jemand anderem geschrieben
  wurde benutzen kann, lassen wir sie etwas Papierkram erledigen, um
  ihre Urheberrechtlichen Interessen an dem Code der FSF zu zuweisen.
  Einfach den Code von komplett Fremden einzusetzen lädt geradezu auf
  eine Rechtliche Katastrophe ein.</para>

  <para>Also sandte ich dem Kerl die Formulare per Email zu und sagte
  ihm, "Hier ist ein bisschen Papierkram den wir brauchen, es hat 
  folgendes zu bedeuten, Du unterschreibst hier, dein Arbeitgeber den
  hier, und dann können wir anfangen deine Fixes einzusetzen. Vielen
  Dank."</para>

  <para>Er sickte mir eine Antwort zurück, indem er sagte, "Ich habe
  keinen Arbeitgeber."</para>

  <para>Also sagte ich, "In Ordnung, das macht nichts, lass es einfach
  von deiner Universität Stempeln und schicke es zurück."</para>

  <para>Nach einer gewissen Zeit, schrieb er mir wieder zurück und 
  sagte, "Naja, eigentlich... bin ich dreizehn Jahre alt und lebe noch
  bei meinen Eltern".</para>
</blockquote>

<para>Da der Junge nicht wie ein dreizehn Jähriger schrieb, wusste
keiner das er einer war. Im folgenenden sind ein paar Möglichkeiten,
mit denen Ihre Schriftverkehr auch einen guten eindruck hinterlassen
kann.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="structure-and-formatting">
<title>Struktur und Formatierung</title>

<para>Treten Sie nicht in die Falle alles so zu schreiben als wäre es
eine SMS. Schreiben Sie vollständige Sätze, mit Punkt und Komma und
benutzen Sie wo nötig Absatz Umbrüche. Am wichtigsten ist das bei 
Emails und anderen komponierten Nachrichten. Im IRC oder andere
ähnliche flüchtigen Foren, ist es im allgemeinen in Ordnung wenn man
nicht auf Großkleinschreibung achtet, sich komprimiert ausdrückt, usw.
Lassen Sie nur nicht zu, dass sich diese Angewohnheiten auf die 
formaleren langlebigeren Foren über geht. Emails, Dokumentation, Bug
Meldungen, und andere Schriftstücke für die man eine lägere Lebensdauer
vorsieht sollten mit normaler Grammatik, Rechtschreibung und einer
zusammenhängenden Struktur geschrieben werden. Das liegt nicht nur 
daran, dass es an und für sich irgend etwas gutes gibt willkürliche
Regeln zu befolgen, sondern dass diese Regeln eben <emphasis>nicht
</emphasis> willkürlich sind: Sie haben sich zu ihrer heutigen Form
entwicklet, weil sie Text lesbarer machen, und Sie sollten sich 
desshalb daran halten. Lesbarkeit ist nicht nur desshalb erwünscht,
weil es Sie wie eine Person erscheinen lässt, der sich die Zeit nimmt
auf eine klare Art zu kommunizieren: mit anderen Worten, jemand der es
wert ist seine Aufmerksamkeit zu widmen.</para>

<para>Insbesondere für Email, haben sich Erfahrene Open Source 
Entwickler auf folgende Konvntionen geeinigt:</para>

<para>Schicken Sie Emails ausschließlich im Klartext, nicht HTML,
RichText, oder andere Formate die undurchsichtig wären, für Email 
Programme die nur Text lesen. Formatieren Sie Ihre Zeilen, so dass
sie in etwa 72 Spalten lang sind. Überschreiten Sie nicht 80 Spalten,
was zur <foreignphrase>de facto</foreignphrase> Standardbreite für
Terminals geworden ist (d.H. dass manche breitere Terminals benutzen
werden, aber keiner benutzt ein schmaleres). Indem Sie Ihre Zeilen
auf etwas <emphasis>weniger</emphasis> als 80 Spalten fassen, lassen
Sie Platz für eingie Ebenen von Zeichen für Zitierungen in den
Rückmeldungen anderer, ohne Zeilenumbrüche in Ihrem Text zu
erzwingen.</para>

<para><emphasis>Benutzen Sie echte Zeilenumbrüche. </emphasis>Manche
Mail Programme machen eine Art fälchlichen Zeilenumbruch, bei dem wenn
Sie eine Email schreiben, es Zeilenumbrüche anzeigt, die nicht wirklich
da sind. Wenn die Email abgeschickt wird, kann es sein, dass es nicht
die Zeilenumbrüche hat, die Sie erwartet hatten, und es wird an
ungünstigen Stellen auf manchen Bildschirmen umbrechen. Wenn Ihr Email
Programm welche vielleicht fälchliche Zeilenumbrüche hat, suchen Sie
nach einer Einstellung bei der Sie die echten sehen, während Sie Emails
verfassen.</para>

<para>Wenn Sie Bildschirm Ausgaben, Code Abschnitte, oder anderen
vorformatierten Text mit einbeziehen, setzen Sie es eindeutig von dem
Rest Ihres Textes ab, so dass selbst ein träge Augen leicht die
Grenzen zwischen dem was Sie schreiben und dem was Sie zitieren 
erkennen können. (Ich hätte nie erwartet diesen Ratschlag zu schreiben
als ich mit diesem Buch anfing, ich habe aber eine gewisse Anzahl an 
Open Source Email Verteiler gesehen, auf denen Leute, Texte aus
verschiedenen Quellen mit einander vermischen, ohne klarzustelen was
was ist. Die Auswirkungen sind sehr frustrierend. Es macht ihre
Nachrichten wesentlich schwerer zu verstehen, und offen gesagt lässt
es diese Personen auch ein wenig schlecht organiziert aussehen.)</para>

<para>Wenn Sie Emails von anderen zitieren, fürgen Sie Ihre 
Stellungnahmen dort ein, wo sie am ehesten angemessen sind, an 
verschiedenen Stellen falls nötig, und Schneiden Sie die Teile heraus,
die Sie nicht verwendet haben. Wenn Sie einen kurzen Kommentar
schreiben, welcher sich auf die ganze vorherige Email bezieht,
ist es in Ordnung einen <firstterm>top-post</firstterm> zu machen
(das heißt, Ihren Kommentar über den Zitierten Text zu stellen); 
ansonsten sollten Sie die relevanten Stellen des ursprünglichen
Texts zitieren, gefolgt von Ihrer Rückmeldung.</para>

<para>Verfassen Sie die Überschrifts Zeilen neuer Emails mit Sorgfalt.
Es ist die wichtigste Zeile in Ihrer Email, da es jede andere Person
im Projekt erlaubt, zu entscheiden, ob sie mehr lesen sollen oder nicht.
Moderne Email Software ordnet zusammenhängende Emails in Threads, die
nicht nur durch die Überschrift definiert sein können, sondern auch 
durch andere Email-Header (wleche manchmal nicht angezeigt werden).
Daraus folgt, dass wenn das Thema des Threads zu abschweift, Sie die
Überschriften Ihrer Emails entsprechend anpassen können&mdash;und 
sollten&mdash; wenn Sie antworten. Der Thread wird durch die anderen
Header intakt bleiben, die neue Überschrift wird Leute die auf die
Übersicht des Threads schauen aber helfen, zu erkennen, dass das Thema
verschoben hat. Gleichermaßen, wenn Sie wirklich ein neues Thema 
anfangen wollen, machen Sie es, indem Sie eine frische Email schreiben,
und nicht auf eine bestehende Antworten und die Überschrift ändern. 
Ansonsten würde Ihre neue Email mit dem selben Thread gruppiert werden
wie dem an dem Sie antworten, und dadurch Leute Täuschen würde zu 
denken, dass es um etwas geht was nicht der Fall ist. Wieder, wäre die
Strafe nicht nur eine verschwendung ihrer Zeit, sondern auch ein 
kleiner kratzer in Ihrer Glaubwürdigkeit als jemand der sicher mit
diesen Kommunikationsmitteln umgehen kann.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-content">
<title>Inhalt</title>

<para>Wohl formatierte Emails locken Leser an, aber ihr Inhalt hällt
sie. Natürlich kann kein Satz festgelegter Richtlinien kann guten Inhalt
garantieren, es gibt aber ein paar Prinzipien die es etwas 
wahrscheinlicher machen.</para>

<para>Machen Sie Sachen für Ihre Leser leicht. Es gibt einen Haufen an
Informatienen die in jedem beliebeigen aktive Open Source Projekt 
herumschwirren, und Leser können nicht erwarten, mit einem großteil
davon vertraut zu sein&mdash;In der Tat, können Sie nicht immer
erwarten zu wissen wie Sie dich damit vertraut machen können. An jeder
möglichen Stelle, sollten Ihre Nachrichten Informationen so bereit 
stellen, wie es für die Leser am bequemsten ist. Wenn Sie zwei 
zusätzliche Minuten damit verbringen müssen, die URL zu einem 
bestimmten Thread in den Archiven des Verteilers heraus zu graben, um
es den Lesern Ihrer Email es zu ersparen, ist es das wert. Wenn Sie
5 bis 10 zusätzliche Minuten damit verbringen die Ergebnisse eines
komplexen Threads zusammen zu fassen, um Leuten einen Kontext zu geben,
in dem sie Ihre Nachricht verstehen können, dann machen Sie das. Sehen
Sie es mal so: Je erfolgreicher ein Projekt ist, desto höher ist das
verhältniss von Leser zu Authoren, egal bei welchem Forum. Wenn jede
Nachricht die Sie machenvon <emphasis>n</emphasis> Personen gelesen
wird, dann wird bei zunehmendem <emphasis>n</emphasis> der Wert 
zunehmen, sich die Zusätzliche Zeit zu nehmen um es anderen zu ersparen.
Und wenn Leute sehen, wie Sie sich selber diese Kriterien auferlegen,
werden sie ihre eigenen Kommunikationen dem anpassen. Das Ergebnis ist,
im Idealfall, eine Zunahme der allgemeinen Effizienz in dem Projekt:
Wenn es die Wahl gibt zwischen der Zeit von <emphasis>n</emphasis>
Personen und einer Person, wird das Projekt letzteres vorziehen.</para>

<para>Übertreiben Sie nicht. Hochspielungen in Online Nachrichten ist
ein klassischer Fall von Wettrüsten. Zum Beispiel kann eine Person
die einen Bug meldet, sich sorgen machen, dass die Entwickler nicht
genügend Aufmerksamkeit aufbringen werden, also wird sie den Bug als
einen schwehrwiegenden Fehler beschreiben, ein Problem welches sie
(und all ihre Freunde/Mitarbeiter/Verwandte) daran hindert die
Software produktiv zu nutzen, wenn es in Wirklichkeit nur ein kleines
Ärgerniss ist. Übertreibungen beschränken sich aber nicht nur auf die
Nutzer&mdash;Programmierer machen bei technischen Disskusionen oft das
gleich, insbesondere wenn sich die Auseinandersetzung um eine
Geschmackssache dreht als um eine der Korrektheit:</para>

  <blockquote>
     <para>"Das zu machen würde den Code völlig unlesbar machen. Es
	wäre ein Albtraum es zu warten, im Vergleich zu dem Vorschlag
	von H. Mustermann..."</para>
  </blockquote>

<para>Der gleiche Gedanke wird sogar <emphasis>stärker</emphasis> wenn
man ihn weniger scharf formuliert:</para>

  <blockquote>
     <para>"Das Funktioniert zwar, aber ich denke es ist was Lesbarkeit
	und Wartbarkeit betrifft nicht so optimal. Der Vorschlag von
	H. Mustermann vermeidet diese Probleme da es..."</para>
  </blockquote>

<para>Sie werden Übertreibungen nicht völlig vermeiden können, und im
Allgemeinen ist das auch nicht nötig. Im Vergleich zu anderen Formen
der Fehlkommunikation, ist Übertreiben nicht für die allgemeinheit
schädlich&mdash;es schadet hauptsächlich den Ausübenden. Die Empfänger
können kompensieren, es ist nur dass der Sender mit jeder Nachricht
ein wenig an glaubwürdigkeit verliert. Sie sollten desshalb im 
Interesse von Ihrem Einfluss im Projekt, versuchen in die moderatere
Richtung zu gehen. Auf diese Art können Sie wenn Sie <emphasis>wirklich
</emphasis> einen wichtigen Hinweis machen müssen, werden Leute Sie
ernst nehmen.</para>

<para>Bearbeiten Sie zwei mal. Bei jeder Nachricht die länger ist als
ein mittel langer Pargraph, sollten Sie nachdem Sie der Meinung sind, dass
es fertig ist, es von oben bis unten erneut durchlesen vor Sie es 
verschicken. Dieser Ratschlag wird jedem bekannt vorkommen, der mal
Unterricht in Schriftgestaltung genommen hat, ist aber bei online
Diskussionen besonders wichtig. Da das Verfassen von Online Nachrichten
von ständigen Unterbrechungen begleitet wird (während Sie schreiben,
müssen Sie vielleicht in andere Emails nachschauen, bestimmte Webseiten
besuchen, einen Befehl ausführen um seine Ausgaben zu verwerten, usw.),
passiert es besonders schnell, dass man den erzählerichen Faden verliert.
Nachrichten die bei denen das Schreiben unterbrochen wurde und vor dem
Abschicken nicht überprüft wurden, kann man, zum Verdruss der Authoren
(möchte man zumindest hoffen), oft als solche erkennen. Nehmen Sie sich
die Zeit das zu überprüfen, was Sie abschicken. Je besser der 
strukturelle Zusammenhalt Ihrer Nachrichten desto mehr werden Sie
gelesen.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-tone">
<title>Tonfall</title>

<para>Nachdem Sie thausende Nachrichten geschrieben haben, werden Sie
bemerken, dass Ihr schreibstil zum knappen neigt. Das scheint die in
den meisten technischen Foren der Normalfall zu sein, und an und gibt
es daran nichts falsches. Ein Grad an Knappheit, welcher im normalen
sozialen Umgang unzumutbar wäre ist für Hacker freier Software einfach
der Standard. Hier ist eine vollständig zitierte Reaktion, welche ich
einmal von einem Email Verteiler über freie Content Management Software
erhielt:</para>

<screen>
Können Sie möglicherweise etwas näher auf die Probleme auf der Sie 
gestoßen sind, usw. eingehen? 

Desweiteren:

Welche Version von Slash benutzen Sie? Das konnte ich aus Ihrer
ursprünglichen Nachricht nicht erkennen.

Wie genau haben Sie den apache/mod_perl Quellcode gebuildet?

Haben Sie den Apache 2.0 Patch worüber auf slashcode.com berichtet
wurde ausprobiert?

  Shane
</screen>

<para><emphasis>Das</emphasis> ist jetzt mal knapp! Keine Begrüßung, 
abgesehen vom Namen keine Abmeldung, und die Nachricht selbst ist 
lediglich eine Aneinanderreihung von Fragen die so kompakt wie
möglich formuliert sind. Sein einziger Satz mit einer Aussage war eine
implizite Kritik an meine ursprüngliche Nachricht. Trotzdem war ich
glücklich darüber die Nachricht von Shane zu sehen, und ich fasste
die Knappheit seiner Antwort nicht als ein Anzeichen für irgend etwas
anderes als das er eine beschäftigte Person ist. Alleine die Tatsache,
dass er Fragen stellte, anstatt meine Nachricht zu ignorieren 
bedeutete, dass er bereit war etwas Zeit für meinem Problem 
aufzubringen.</para>

<para>Werden alle Leser auf diesen Schreibsitl positiv reagieren? 
Nicht unbedignt; es kommt auf die Person und den Kontext an. Wenn
Jemand zum Beispiel eben erst geschrieben hat das sie einen Fehler
gemacht hat (vieleicht hat sie einen Bug geschrieben), und Sie aus
vergangener Erfahrung wissen, dass diese Person dazu neigt etwas
Unsicher zu sein, auch wenn Sie trotzdem noch eine knappe Antwort
schreiben, sollten Sie es durch etwas aufwiegen was ihre Gefühle
anerkennt. Der größte Teil Ihrer Antwort mag kurz gehalten sein,
eine Analyse der Situation aus sicht eines Ingenieurs, so kurz wie
Sie wollen. Melden Sie sich aber zum Schluss mit etwas ab, dass es
nicht als Kälte aufgefasst werden soll. Wenn Sie zum Beispiel der
Person eben erst eine Unmenge an Ratschläge gegeben haben wie sie
einen Bug beheben soll, dann melden Sie sich mit "Viel Glück, &lt;hier
Ihr Name&gt;" um anzudeuten, dass Sie ihnen gutes wünschen und nicht
Sauer sind. Ein strategisch platzierter Smiley oder ein anderer 
Hinweis auf die Gefühlslage kann oft auch ausreichen um den 
Gesprächspartner zu beruhigen.</para>

<para>Es mag komisch erscheinen derart auf die Gefühle des Beteiligten
zu achten, als daraf was sie sagen, aber um es kahl zu sagen, 
beeinflussen Gefühle die Produktivität. Gefühle sind auch aus anderen
Gründen wichtig, selbst uns aber ausschließlich auf nutzungsbezogene 
Gebiete zu beschränken, können wir anmerken, dass unglöckliche Menschen
schlechtere Software schreiben, und weniger davon. Angesichtes der 
begrenzten Natur der meisten elektronischen Medien, wird es jedoch
keine offensichtliche offensichtlichen Hinweis darauf geben, in welcher
Stimmung sich die Person befindet. Sie werden eine wohlbegründetet 
Vermutung darüber anstellen müssen basierend auf a) wie die meisten
Menschen sich in einer solchen Situation fühlen, und b) was Sie über
diese Person aus vergangenen Dialogen wissen. Manche Menschen
bevorzugen eine eher unpersönliche Einstellung, und behandeln all
gelichermaßen nach ihrer oberflächlichen Erscheinung, wobei die Idee
die dahintersteckt ist, dass wenn die Beteiligte nicht offen sagt,
dass sie sich irgendwie fühlt, hat man kein Recht sie so zu behandeln
als ob das der Fall wäre. Ich mag diese Herangehensweise aus mehreren
Gründen nicht. Erstens, verhalten sich Menschen im echten Leben nicht
so, also warum sollten Sie es online machen? Zweitens, da die meisten
Interaktionen in öffentlichen Foren stattfinden, neigen Leute dazu
sich noch mehr zurück zu halten als das im privaten der Fall wäre.
Um es genauer zu sagen, sie sind oft bereit auf andere gerichtete
Gefühle auszudrücken, wie Dankbarkeit oder Unmut, nicht jedoch nach
innen gerrichtete Gefühle wie Unsicherheit oder Stolz. Trotzdem
arbeiten die meisten Menschen besser, wenn sie wissen, dass andere
über ihre Verfassung im klaren sind. Indem Sie auf kleine Hinweise
achten, können Sie die meiste Zeit für gewöhnlich richtig raten,
und andere Personen motivieren weiterhin in größeren Maße beteiligt zu
bleiben als es sonst der Fall wäre.</para>

<para>Damit meine ich natürlich nicht, dass Sie die Rolle des
Gruppentherapeuten einnehmen sollen, der andauernd jeden dabei helfen
soll, sich über seine Gefühle im klaren zu sein. Indem Sie aber 
sorgfältig auf Muster im langfristigen Verhalten von Personen achten,
werden Sie ein Gespür für sie als Individuen bekommen, selbst wenn Sie
nie von Angesicht zu Angesicht treffen. Und indem Sie auf den Ton Ihrer
Nachrichten achten, können Sie einen überraschenden Einfluss darauf 
haben wie sich andere fühlen, was letztendlich dem Projekt zugute 
kommt.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="rudeness">
<title>Erkennung von Unhöflichkeit</title>

<para>Einer der bestimmenden Eigenschaften von Open Source Kultur ist
seine markanten Vorstellungen was Unhöflichkeit ausmacht und was nicht.
Obwohl die unten beschriebenen Grundsätze nicht alleine für die
Entwicklung freier Software gelten, oder auch für Software im 
allgemeinen&mdash;sie wären jedem bekannt der im Bereich der Mathematik,
der technischen Wissenschaften oder im Ingeneurswesen arbeitet&mdash;ist
freie Software, mit seinen offenen Grenzen und ständigen Fluss an 
Einwanderern, eine Umgebung indem diese Grundsätze besonders häufig von 
Personen begegnet wird, die mit Ihnen nicht vertraut sind.</para>

<para>Lass uns damit anfangen, was <emphasis>nicht</emphasis>
unhöflich ist:</para>

<para>Technische Kritik, selbst direkte und ungepolsterte ist nicht
unhöflich. Es kann sogar eine Art von Kompliment sein: Der Kritiker
sagt implizit, dass die Zielperson es wert ist ernst genommen zu
werden, und Zeit mit auf zu bringen. Das heißt, je atraktiver es
gewesen wäre die Nachricht von jemand zu ignorieren, desto eher ist es
ein Kompliment sich die Zeit zu nehmen es zu kritisieren (natürlich
ausgeschlossen ist wenn die Kritik zu einem persönlichen Angriff 
oder einer anderen Form von Unhöflichkeit verfällt).</para>

<para>Knappe, ungeschmückte Fragen, wie die in der vorhin zitierten
Email von Shane an mir, sind auch nicht unhöflich. Fragen die in einem
anderen Kontext kalt oder rhetorisch, selbst verspottend erscheinen
könnten, sind oft ernst gemeint, und haben kein Hintergendanke außer
die Informationen so schnell wie möglich zu herauszulocken. Die
berühmte Frage von technischen Support "Ist Ihr Computer angeschlossen?"
ist ein klassisches Beispiel hierfür. Die Person von Support muss
wirklich wissen, ob Ihr Computer angeschlissen ist, und nach den ersten
paar Tagen bei dieser Arbeit, ist sie müde geworden höflichen 
Schmeicheleien ihren Fragen voranzustellen ("Entschuldigen Sie, ich
möchte lediglich ein paar einfache Fragen vorher stellen um ein paar
Möglichkeiten aus dem Weg zu räumen. Manche davon mögen sich ziemlich
einfach anhören, haben Sie aber bitte Nachsicht..."). Mittlerweile
macht sie sich aber nicht mehr die Mühe mit der höflichkeit, sie fragt
einfach gerade heraus: Ist es angeschlossen oder nicht? Die gleichen 
Fragen werden andauernt auf den Email Verteilern freier Software 
gestellt. Die Absicht ist nicht den Empfänger zu beleidigen, sondern
schnell einige der offensichtlichsten (und möglicherweise häufigsten)
Erklärungen auszuschließen. Empfänger die das verstehen und 
entsprechend reagieren ernten Punkte dafür eine aufgeschlossene Sicht,
ohne Wiederrede, eingenommen zu haben. Es ist einfach ein 
Aufeinandertreffen verschiedener Kulturen, und nicht die Schlud von
irgendjemand. Erklären Sie freundlich, dass Ihre Frage (oder Kritik)
keine versteckte Bedeutung hatte; es war lediglich gedacht die
Information so schnell und effizient wie möglich zu bekommen (oder
übertragen) und sonst nichts.</para>

<para>Was ist als Unhöflich?</para>

<para>Nach dem gleichen Prinzip womit detaillierte technische Kritik
als Kompliment aufgefasst werden kann, kann das Weglassen von
hochwertiger Kritik eine Art von Beleidigung. Ich meine nicht nur die
Arbeit von jemand zu ignorieren, sei es ein Vorschlag, eine Änderung
am Code oder ein die Meldung von einem Issue oder sonstwas. Wenn Sie
nicht vorher explizit eine detaillierte Antwort versprochen haben, ist
es gewöhnlich in Ordnung einfach überhaupt nicht zu reagieren. Man wird
annehmen, dass Sie einfach keine Zeit hatten etwas zu sagen. Wenn Sie
aber <emphasis>doch</emphasis> eine Antwort geben, sollten Sie knausern:
nehmen Sie sich die Zeit die Sachen wirklich zu untersuchen, geben Sie
konkrete Beispiele an wo angemessen, wühlen Sie in den Archiven herum
um verwandte Nachrichten zu finden, usw. Oder wenn Sie nicht die Zeit
haben eine solche Mühe aufzubringen, aber trotzdem irgend eine kurze
Antwort geben müssen, dann erklären Sie den Defizit offen in Ihrer
Nachricht ("Entschuldigung, ich denke es gibt hierzu eine Meldung, 
hatte aber leider nicht die Zeit um danach zu suchen"). Die Hauptsache
ist die kulturelle Norm anzuerkennen, entweder indem man sie erfüllt,
oder offen zuzugeben, dass man dieses mal ihr nicht gerecht geworden
ist. In beiden Fällen wird die Norm verstärkt. Der Norm aber nicht
gerecht zu werden und gleichzeitig nicht zu erklären <emphasis>warum
</emphasis>, Sie es nicht geschafft haben Ihnen gerecht zu werden,
ist das gleiche, als ob Sie sagen würden, dass das Thema (und die
daran Beteiligten) nicht viel Ihrer Zeit wert war. Es ist besser zu
zeigen, dass Ihre Zeit wertvoll ist, indem Sie sich kurz halten als
indem Sie faul sind.</para>

<para>Es gibt viele andere Formen der Unhöflichkeit, und der gesunde
Menschenverstand ist ein guter Führer um sie zu vermeiden. Siehe auch
<xref linkend="prevent-rudeness"/><phrase output="printed"> im Kapitel
<xref linkend="getting-started"/></phrase>, wenn Sie es noch nicht
gemacht haben.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="face">
<title>Gesicht</title>

<para>Es gibt einen Bereich im Menschlichen Gehirn, welches speziell
für erkennung von Gesichtern gewidmet. Es ist als "fusiformes 
Gesichtsareal" (en. fusiform face area) bezeichnet wird und seine
Fähigkeiten sind größtenteils angeboren und nicht angelernt. Es hat
sich herausgestellt, dass die Erkennung von Gesichtern eine derart
wichtige Fähigkeit ist um zu überleben, dass wir spezielle Hardware
dafür entwickelt haben.</para>

<para>Internet basierende Zusammenarbeit ist desshalb psychologisch 
etwas merkwürdig, da es eine enge Mitarbeit zwischen Menschen 
erfordert, die fast nie die Gelegenheit bekommen einander mit den
intuitivsten Methoden zu identifizieren: erstens durch Gesichter,
aber auch durch Stimme, Haltung, usw. Um das zu kompensieren, sollten
Sie versuchen überall den selben <firstterm>Bildschirm Namen
</firstterm> verwenden. Es sollte der vordere Teil Ihrer Email
Addresse sein (der Teil vor dem @-Zeichen), Ihr Nutzername im IRC,
der Name Ihres Kontos in der Repository, im Bug Tracker usw. Dieser
Name ist Ihr online "Gesicht": Ein kürzel um Sie zu identifizieren,
welches manche der gleichen Funktionen erfüllt wie Ihr Gesicht,
auch wenn es leider nicht die eingebaute Hardware im Gehirn anregt.
</para>

<para>Der Bildschirm Name sollte eine intuitive Permutation Ihres
echten Namens sein (meiner, zum Beispiel ist "kfogel"). In manchen
Situationen wird es sowieso von Ihrem kompletten Namen begleitet,
zum Beispiel im Kopf einer Email:</para>

<screen>
Von: "Karl Fogel" &lt;kfogel@irgendeinedomain.com&gt;
</screen>

<para>Tatsächlich gibt es zwei Sachen in dem Beispiel auf die man
achten sollte. Wie vorhin erwähnt, gleicht der Bildschirm Name dem 
echten auf eine intuitive Art. Der echte Name ist aber auch 
<emphasis>echt</emphasis>. Also kein erfundener wie:</para>

<screen>
Von: "Super Hacker" &lt;superhacker@irgendeinedomain.com&gt;
</screen>

<para>Es gibt einen berühmten von Paul Steiner, in der Ausgabe vom
5 Juli 1993 der Zeitung <citetitle>The New Yorker</citetitle>, welches
einen Hund an einem Terminel zeigt, der zu einem anderen 
verschwörerisch herunterschaut und sagt: "Im Internet weiß keiner das
man ein Hund ist". Diese Gedankenart ist es wahrscheinlich, die hinter
einer vielzahl an selbstverherlichenden soll-wohl-cool-sein online
Identitäten liegen, die Leute sich selber geben&mdash;als ob sich einen
"Super Hacker" zu nennen Leute glauben machen würde man wäre
<emphasis>tatsächlich</emphasis> ein tollter Hacker. Tatsache bleibt
aber: Selbst wenn keiner weiß das Sie ein Hund sind, sind Sie immer
noch ein Hund. Eine glorreische online Identität beeindruckt nie die
Leser. Statt dessen, gibt es ihnen den Eindruck, als würden Sie eher
auf das Erscheinungsbild achten als auf den Inhalt, oder dass Sie 
einfach nur unsicher sind. Benutzen Sie Ihren echten Namen für alle
Dialoge, oder wenn Sie aus irgend einem Grund anonym bleiben müssen,
dann erfinden Sie einen Namen der sich wie ein gewöhnlicher anhört 
und bleiben Sie ab da bei ihm.</para>

<para>Es gibt noch ein paar weitere Sachen die Sie machen können um
Ihr Online Gesicht attraktiver zu machen, abgesehen davon, dass Sie es
konsistent halten. Wenn Sie einen Titel haben (wie "Doktor" oder 
"Professor"), sollten Sie nicht mit Ihm herum stolzieren, oder auch nur
erwähnen, außer wenn es direkt für die Diskussion bedeutend ist. Im
Allgemeinen neigt die Kultur von Hacker und der freien Software dazu,
das vorzeigen von Titel als etwas ausschließendes und ein Zeichen von
Unsicherheit zu betrachten. Es ist in Ordnung wenn Ihr Titel als Teil
Ihrer Signatur am ende jeder Email die Sie abschicken erscheint,
benutzen Sie es jedoch niemals als um Ihre Position in einer Diskussion
zu verstärken&mdash;der Versuch wird garantiert zurückschlagen. Sie
wollen, dass man die Person respektiert, nicht den Titel.</para>

<para>Wo wir gerade von Signaturen sprechen: halten Sie sie kurz und
geschmackvoll, oder lassen Sie sie besser gleich weg. Vermeiden Sie
lange rechtliche Klausel für den Haftugsausschluss die an jeder Email
angehängt werden, insbesondere wenn Sie eine Stimmung ausdrücken die
nicht mit der Beteiligung an einem freien Software Projekt vereinbar
sind. Der folgende Klassiker dieser Gattung erscheint zum Beispiel am
Ende jeder Nachricht von einem bestimmter Nutzer, auf einem 
öffentlichen Verteiler bei dem ich angemeldet bin:</para>

<screen>
WICHTIGER HINWEIS

Wenn Sie diese Email fehlerhafterweise erhalten haben oder den
Hauftungsausschluss unserer Emails lesen wollen, wenden Sie sich bitte
an die folgende Erklärung under nehmen Sie mit dem Absender Kontakt
auf.

This communication is from Deloitte &amp; Touche LLP.  Deloitte &amp;
Touche LLP is a limited liability partnership registered in England
and Wales with registered number OC303675.  A list of members' names
is available for inspection at Stonecutter Court, 1 Stonecutter
Street, London EC4A 4TR, United Kingdom, the firm's principal place of
business and registered office.  Deloitte &amp; Touche LLP is
authorised and regulated by the Financial Services Authority.

This communication and any attachments contain information which is
confidential and may also be privileged.  It is for the exclusive use
of the intended recipient(s).  If you are not the intended
recipient(s) please note that any form of disclosure, distribution,
copying or use of this communication or the information in it or in
any attachments is strictly prohibited and may be unlawful.  If you
have received this communication in error, please return it with the
title "received in error" to IT.SECURITY.UK@deloitte.co.uk then delete
the email and destroy any copies of it.

E-mail communications cannot be guaranteed to be secure or error free,
as information could be intercepted, corrupted, amended, lost,
destroyed, arrive late or incomplete, or contain viruses.  We do not
accept liability for any such matters or their consequences.  Anyone
who communicates with us by e-mail is taken to accept the risks in
doing so.

When addressed to our clients, any opinions or advice contained in
this e-mail and any attachments are subject to the terms and
conditions expressed in the governing Deloitte &amp; Touche LLP client
engagement letter.

Opinions, conclusions and other information in this e-mail and any
attachments which do not relate to the official business of the firm
are neither given nor endorsed by it.
</screen>

<para>Bei jemand der lediglich ab und an ein paar Fragen stellen möchte,
erscheint dieser riesige Haftungsausschluss etwas albern verursacht 
aber wahrscheinlich keinen dauerhaften Schaden. Wenn diese Person sich
jedoch aktiv an dem Projekt beteiligen wollte, würde dieser Rechtliche
Textblock eine heimtückischere Wirkung haben. Es würde mindestens zwei
möglicherweise schädliche Signal aussenden: Erstens, dass diese Person
nicht die komplette Kontrolle über seine Werkzeuge hat&mdash;er ist in
irgend einem Email System von einem Unternehmen, welches an jeder Email
eine nerfige Botschaft anhängt, und er hat keine Möglichkeit es zu
umgehen&mdash;und zweitens, dass er wenig oder keine unterstützung von
seiner Organisation für seine aktivitäten bei freier Software hat.
Zugegeben, die Organisation hat ihm ganz klar nicht direkt verboten an
öffentliche Verteiler zu schreiben, aber sie lässt seine Nachrichten
eindeutig unfreundlich aussehen, als ob das Risiko vertrauliche
Informationen herauszulassen über alle anderen Prioritäten steht.</para>

<para>Wenn Sie für eine Organisation arbeiten, welche darauf besteht,
soche Signaturen an alle abgehenden Emails anzuhängen, dann sollten
Sie in Betracht ziehen, sich eine kostenlose Email Adresse anzulegen,
zum Beispiel bei <ulink url="gmail.google.com"/>,
<ulink url="www.hotmail.com"/>, oder <ulink url="www.yahoo.com"/>, und
benutzen Sie diese Adresse für das Projekt.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->

<sect1 id="common-pitfalls">
<title>Vermeidung Häufiger Fallstricke</title>

<!-- ======================== subsection ============================== -->

<sect2 id="post-with-purpose">
<title>Schreiben Sie Nicht Ohne Sinn</title>

<para>Eine häufiger Fehler bei der Beteiligung an einem Online Projekt
ist zu denken, dass Sie auf alles reagieren müssen. Das müssen Sie 
nicht. Erstens wird es für gewöhnlich mehr Threads geben, als worüber
Sie den Überblick behalten können, zumindest nachdem das Projekt die
ersten paar Monate überschritten hat. Zweitens wird das meiste von dem
was in den Threads geschrieben wird, für die Sie sich entschieden haben
sie mit zu verfolgen, keine Antwort erfordern. Gerade Entwicklerforen
neigen dazu von drei Arten von Nachrichten beherrscht zu werden:</para>

<orderedlist>
  <listitem><para>Nachrichten die etwas nicht triviales vorschlagen
                  </para></listitem>
  <listitem><para>Nachrichten die Unterstützung oder Wiederstand für
                  oder gegen etwas ausdrücken was jemand anderes
                  gesagt hat</para></listitem>
  <listitem><para>Zusammenfassende Nachrichten</para></listitem>
</orderedlist>

<para>Von diesen erfordert keiner <emphasis>an und für sich</emphasis>
eine Rückmeldung, insbesondere wenn Sie sich auf der Grundlage von dem
was Sie bissher in dem Thread gesehen haben, sicher sein können, dass
jemand anderes wahrscheinlich sowieso das sagen wird, was Sie eh gesagt
hätten. (Wenn Sie sich sorgen machen, dass Sie in einer Schleife 
gefangen werden, bei dem jeder auf den anderen wartet, weil sie die
gleiche Taktik verfolgen, sollten Sie es nicht; es gibt fast immer
<emphasis>irgend jemand</emphasis> der das Bedürfniss hat sich in die
Schlacht zu stürzen. Fragen Sie sich erstens: Wissen Sie was
Sie erreichen wollen? Und zweitens: Wird dieses Ziel nicht erreicht
werden, ohne dass Sie etwas sagen?</para>

<para>Zwei gute Gründe Ihre Stimme bei einem Thread einzulegen, sind a)
wenn Sie einen Fehler in einem Vorschlag sehen, und vermuten, dass Sie
die einzige sind, die es sieht, und b) wenn Sie sehen, dass in der
Kommunikation etwas schief läuft und Sie wissen, dass Sie es richten
können indem Sie eine klärende Nachricht schreiben. Es ist im 
allgemeinen auch in Ordnung eine Nachricht zu schicken, nur um jemanden
für etwas zu danken, oder um "Ich auch!" zu sagen, da ein Leser bei
solchen Nachrichten sofort erkennen kann, dass sie keiner weiteren
Antwort oder Handlung bedüfen und desshalb endet die geistige Anstrenungn
die sie erfordern sauber mit der letzten Zeile der Email. Selbst dann
sollten Sie zwei mal darüber nachdenken, vor Sie etwas sagen; es ist
immer besser Menschen wünschen zu lassen, dass Sie mehr schreiben, als
dass die weniger schreiben. (Siehe den zweiten Teil von <xref
linkend="bikeshed-full"/> für weiteres darüber wie man sich auf
betriebsammen Email Vertreilern verhalten soll.)</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="productive-threads">
<title>Produktive kontra Unproduktive Threads</title>

<para>Auf einem betriebsammen Email Verteiler haben Sie zwei Pflichten.
Eines ist offensichtlich herauszufinden, worauf Sie achten müssen und
was Sie ignorieren können. Das andere ist, sich derart zu verhalten,
dass Sie es vermeiden Rauschen zu <emphasis>erzeugen</emphasis>: Sie
wollen nicht nur, dass Ihre eigene Nachrichten ein hohes Signal/Rausch
Verhälltniss haben, sondern, dass Sie die Art von Nachrichten sind, die
<emphasis>andere</emphasis> dazu anregen entweter Nachrichten mit einem
ähnlich hohen Signal/Rausch Verhältniss zu schreiben, oder überhaupt
nicht zu schreiben.</para>

<para>Um zu sehen wie Sie das erreichen können, lass uns den Kontext
bedenken in dem es gemacht wird. Was sind einige der Ecksteine von
unproduktiven Threads?</para>

<itemizedlist>
  <listitem><para>Argumente die bereits aufgeworfen wurden fangen an
	wiederholt zu werden, als ob der Absender denkt, dass keiner
	sie beim erstem mal gehört hat.</para>
  </listitem>
  <listitem><para>Eine Zunahme an Übertreibung und Beteiligung während
	die der Einsatz immer kleiner wird.</para>
  </listitem>
  <listitem><para>Eine Mehrheit der Kommentare stammt von Personen die
	wenig oder garnichts machen, während diejenigen die dazu neigen
	Sachen erledigt zu bekommen ruhig sind.</para>
  </listitem>
  <listitem><para>Viele Ideen werden diskutiert, ohne dass klare 
	Vorschläge gemacht werden. (Natürlich fängt jede interesante
	Idee als eine ungenaue Vision an; die wichtige Frage ist welche
	Richtung sie von da an einschlägt. Erscheint es so als ob der
	Thread die Vision in etwas konkreteres verwandelt, oder
	schweift es ab in unter visionen, neben visionen und 
	Auseinandersetzungen über Grundsatzfragen?)</para>
  </listitem>
</itemizedlist>

<para>Nur weil ein Thread an Anfang nicht produktiv ist, bedeutet es 
nicht, das es eine Zeitverschwendung ist. Es kann sich um ein wichtiges
Thema drehen, bei dem die Tatsache, dass es nicht vorrankommt um so
beunruhigender ist.</para>

<para>Einen Thread in eine nützliche Richtung zu führen, ohne aggresiv
zu sein, ist eine Kunst. Es wird nicht funktionieren, Leute einfach
abzumahnen, ihre Zeit nicht zu verschwenden, oder Sie darum zu bitten
nicht zu schreiben, es sei denn Sie haben etwas konstruktives
beizutragen. Es mag natürlich sein, dass Sie das privat denken, aber
wenn Sie es laut sagen, werden Sie beleidigend sein. Statt dessen,
müssen Sie Bedingungen für den weiteren Vorschritt vorschlagen&mdash;
geben Sie den Leuten eine Route, einen Weg welcher zu den Ergebnissen
führt, die Sie haben wollen, jedoch ohne dass Sie sich anhören, als
würden Sie das Verhalten Diktieren. Der Unterschied liegt größtenteils
im Ton. Folgendes ist zum Beispiel schlecht:</para>

  <blockquote>
     <para><emphasis>Diese Diskussion führt nirgendwo hin. Können wir
	bitte dieses Thema so lange fallen lassen, bis jemand einen
	Patch hat, um einen der Vorschläge zu implementieren? Es hat
	kienen Sinn immer wieder die gleichen Sachen zu sagen. Code
	spricht lauter als Worte, Leute.</emphasis></para>
  </blockquote>

<para>Wohingegen folgendes gut ist:</para>

  <blockquote>
     <para><emphasis>Verschiedene Vorschläge wurden in diesem Thread
	gemacht, bei keinem wurden aber die Details ausgearbeitet,
	zumindest nicht so weit um darüber abzustimmen. Trotzdem sagen
	wir derzeit nichts neues; wir wiederholen einfach nur was 
	vorher schon gesagt wurde. Derzeit wäre es also wahrscheinlich
	das beste, wenn die folgenden Nachrichten entweder 
	ausgearbeitete Vorschläge beinhalten, oder einen Patch. Dann
	hätten wir wenigstens etwas festes worauf wir reagieren könnten
	(d.H. Konsens über den Vorschlag erreichen oder den Patch
	anwenden und Testen).</emphasis></para>
  </blockquote>

<para>Vergleichen Sie die zweite Herangehensweise mit der ersten. Die
Zweite zieht keinen Strich zwischen Ihnen und die anderen, noch
beschuldigt es Sie die Diskussion zu verzetteln. Es ist die Rede von
"wir", was wichtig ist, ob Sie vorher tatsächlich an dem Thread
beteiligt waren oder nicht, da es alle daran erinnert, dass selbst
diejenigen die bisher ruhig gebliben sind, trotzdem noch einen
Anteil an seinem Ausgang haben. Sie beschreibt warum der Thread
nirgendwo hinführt, macht es aber ohne abwertungen oder verurteilungen
&mdash;es hällt lediglich leideschaftslos einige Tatsachen fest. Am
wichtigsten, bietet es eine positive Vorgehensweise an, damit die Leute
nicht das Gefühl bekommen, als würde die Diskussion abgebrochen werden
(eine Maßnahme gegen der man nur versucht sein kann zu rebelieren),
sondern als ob Ihnen eine Möglichkeit angeboten wird die Unterhaltung
auf eine konstruktivere Ebene zu führen. Das ist ein Standard den 
Leute natürlich erfüllen werden wollen.</para>

<para>Sie werden nicht immer wollen, dass ein Thread es auf die nächste
höhere konstruktive Ebene schafft&mdash;manchmal werden Sie einfach nur
wollen das er verschwindet. Der Sinn von Ihrer Nachricht ist dann, das
eine oder das andere herbeizuführen. Wenn Sie schon an der Art wie der
Thread bisher verlaufen ist, erkennen können, dass keiner die von Ihnen
vorgeschlagenen Maßnahmen wirklich <emphasis>machen</emphasis> wird,
haben Sie den Thread effektiv beendet ohne dass es danach aussieht. Es
gibt natürlich keinen narrensicheren Weg einen Thread zu beenden, und
selbst wenn es den gäbe, würden Sie ihn nicht einsetzen wollen. Die
Beteiligten aber darum zu bitten, entweder sichtbaren Fortschritt zu
machen, oder aufzuhören Nachrichten zu schicken, ist wenn Sie es
diplomatisch anstellen, ohne weiteres vertretbar. Hüten Sie sich jedoch
davor Threads voreilig zu schließen. Eine gewisse Menge an spekulativem
Gerede kann, je nach Thema, produktiv sein, und darum zu bitten, dass
man es zu schnell klärt, wird den kreativen Ablauf ersticken, und Sie
zusätzlich als ungeduldig erscheinen lassen.</para>

<para>Erwarten Sie von keinem Thread, dass er sofort aufhört. Es wird
wahrscheinlich immer noch ein paar Nachrichten nach Ihrem geben, 
entweder weil sie sich in der Leitung begegnet sind, oder weil Leute
immer das letzte Wort haben wollen. Das ist nichts, worüber Sie sich
sotrgen machen müssten und Sie müssen nicht erneut ein Schreiben
schicken. Lassen Sie den Thread einfach auslaufen, oder nicht auslaufen
wie immer der Fall auch sein mag. Sie können nicht die absolute 
Kontrolle haben; andererseits, können Sie über viele Threads gesehen, 
eine statistisch signifikante Wirkung zu haben.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="bikeshed">
<title>Je Weicher Das Thema, Desto Länger Die Debatte</title>

<para>Obwohl Diskusionen bei jedem Thema mäandrieren können, geht die
Wahrscheinlichkeit dafür hoch wenn die technische Schwiergikeit runter
geht. Schließlich ist die Anzahl der Teilnehmner die mitkommen können
um so kleiner, je schwieriger das Thema ist. Diejenigen die es können,
sind wahrscheinlich die erfahrensten Entwickler, die bereits tausende
male vorher an solchen Diskussionen teilgenommen haben, und wissen,
welches Verhalten wahrscheinlich zu einem Konsens fürt, mit dem alle
leben können.</para>

<para>Konsens ist desshalb am schwersten zu erreichen bei technischen
Fragen die einfach zu verstehen sind und bei dem man leicht eine
Meinung haben kann, sowei bei "weichen" Themen, wie Organisation,
Öffentlichkeitsarbeit, Finanzierung, usw. Menschen können sich ewig
über solche Themen unterhalten, da es keine nötige Qualifikationen 
dafür gibt, keine klaren Möglichkeiten um zu entscheiden (selbst im
Nachhinein) ob eine Entscheidung richtig war oder falsch, und weil
es manchmal eine erfolgreiche Taktik ist einfach länger zu warten
als andere Diskussionsteilnehmer.</para>

<para>Das Prinzip, dass die Menge an Diskussion umgekehrt proportional
dazu ist, wie komplex das Thema ist, hat es schon lange gegeben, und
ist informell unter dem Begriff <firstterm>Bikeshed Effect</firstterm>
(de. Fahrrad Schuppen Effekt) bekannt. Hier ist die Erklärung von 
Poul-Henning Kamp davon, aus einem nunmehr berühmten Email an BSD 
Entwickelr:</para>

<blockquote>

<para>Es ist eine lange Geschichte, bzw. eher eine alte Geschichte,
aber sie ist in wirklichkei ziemlich kurz. C. Northcote Parkinson 
schrieb anfang der 1960'er ein Buch namens "Parkinsons Gesetz", 
welches eine Menge Einblicke in die dynamik von Verwaltung beinhaltet.
</para>

<para>[...]</para>

<para>Bei dem spezifischen Beispiel welches mit einem Fahrrad Schuppen
zu tun hat, ist die andere entscheidene Komponente ein Atomkraftwerk,
was schätze ich die Zeit in der das Buch geschrieben wurde 
wiederspiegelt.</para>

<para>Parkinson zeigt, wie Sie zu einem Vorstand gehen können und
Zustimmung fpr den Bau einer multi-millionen oder gar milliarden
Euro teueren Atomkraftwerk bekommen können, wenn Sie aber einen
Fahrradschuppen bauen wollen, werden Sie sich in endlosen Diskussionen
verzetteln.</para>

<para>Parkinson erklärt, dass das daran liegt, dass ein Atomkraftwerk
so gewaltig, so kostspieleig und so kompliziert ist, das Menschen es
nicht begreifen können, und eher als es zu versuchen, fallen Sie auf
die Annahme zurück, dass jemand anderes bereits alle Details
überprüft hat vor es so weit gekommen ist. Richard P. Feynmann gibt
in seinen Büchern ein paar interesante und treffende Beispiele die
mit Los Alamos zu tun haben.</para>

<para>Ein Fahhradschuppen andererseits kann jeder übers Wochenende 
bauen und trotzdem noch genügend Zeit übrig haben um das Spiel im
Fernsehen zu schauen. Egal wie gut Sie sich vorbereiten, egal wie
vernünftig Sie bei Ihrem Vorschlag also sind, irgend jemand wird die
chance ergreifen um Ihnen zu zeigen, dass er seine Arbeit macht, dass
er aufpasst, dass er <emphasis>da</emphasis> ist.</para>

<para>In Dänemark nennen wir das "seinen Fingerabdruck hinterlassen".
Es geht um den persönlichen Stolz und Ansehen, es geht darum irgendwo
drauf zeigen zu können und zu sagen "Da! Das habe <emphasis>ich
</emphasis> gemacht". Es ist ein starker Wesenszug bei politikern,
aber auch in den meisten Menschen vorhanden, wenn sie dazu die
Gelegenheit bekommen. Denken Sie einfach an Fußabdrücke im nassen
Zement.</para>

</blockquote>

<para>(Seine komplette Nachricht ist auch sehr leseswert. Siehe <xref
linkend="bikeshed-full"/>; siehe auch 
<ulink url="http://bikeshed.com"/>.)</para>

<para>Jeder der jemals an der Entscheidungsfingung in einer Gruppe
beteiligt war, wird erkennen worüber Kamp redet. Es ist jedoch für
gewöhnlich unmöglich <emphasis>alle</emphasis> zu überreden es zu
vermeiden Fahrradschuppen anzumalen. Das beste was Sie machen können,
ist darauf hinzuweisen, dass das Problem existiert sobald es auftaucht,
und Ihre höher rangigen Entwickler&mdash;die Personen dessen 
Nachrichten am meisten Gewicht tragen&mdash; dazu überreden frühzeitig
Ihre Pinsel nieder zu legen, damit zumindest sie nicht zum Rauschen
beitragen. Fahrrad anmal Feten werden nie komplett weggehen, aber Sie
können sie verkürzen und weniger häufig machen, indem Sie das
Bewustsein in der Kultur des Projekts über das Problem vergrößern.
</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="holy-wars">
<title>Vermeiden Sie Heilige Kriege</title>

<para>Ein <firstterm>heiliger Krieg</firstterm> ist eine Debatte, die
oft aber nicht immer über eine relativ unbedeutende Angelegenheit
geführt wird, welche nich anhand der Vozüge verschiedener Argumente
zu klären ist, bei dem aber Leute leidenschaftlich genug sind um
trotzdem weiter darüber zu argumentieren, in der Hoffnung das ihre
seite sich durchsetzen wird. Heilige Kriege sind nicht ganz das selbe
wie das Anmalen von Fahrradschuppen. Leute die Fahrradschuppen anmalen
sprechen für gewöhnlich schnell Ihre Meinung (weil sie es können), 
fühlen sich aber nicht sonderlich stark an diese Meinung gebunden,
und werden manchmal sogar ander, nicht kompatibele Meinungen äußern,
um zu zeigen, dass Sie all Seiten der Angelegenheit verstehen. Bei
einem heiligen Krieg hingegen, wird Verständniss für andere Seiten
als Schwäche aufgefasst. Bei einem heiligen Krieg, weiß jeder, dass
es eine richtige Antwort gibt; sie sind sich nur nicht darüber einig
welche es ist.</para>

<para>Wenn ein heiliger Krieg erst einmal angefangen hat, kann es im
allgemeinen nicht zur Zufriedenheit von allen aufgelöst werden. Es
nützt nichts während einem heiligen Krieg darauf hinzuweisen, dass
man sich in einem heiligen Krieg befindet. Jeder weiß das schon. Ein
leider häufiges Merkmal von heiligen Kriegen sind 
Meinungsverschiedenheiten über die Frage <emphasis>ob</emphasis> die
Debatte sich überhaupt durch weitere Diskussion auflösen lässt. Von
außen betrachtet, ist es klar, dass keine Seite die Meinung der anderen
ändert. Von innen betrachtet, benimmt sich die andere Seite 
stumpfsinnig und denkt nicht ganz klar, sie kommt aber vieleicht zur
Besinnung, wenn mann sie nur genügend einschüchtert. Ich sage jetzt
<emphasis>nicht</emphasis>, dass es nie eine richtige Seite bei einem
heiligen Krieg gibt. Manchmal gibtes eine&mdash;und natürlich ist es
bei denen an den ich bissher teilgenommen habe immer meine gewesen. Das
macht aber keinen Unterschied, weil es kein Algorhytmus gibt, um
überzeugend zu demonstrieren, dass die eine oder andere Seite richtig
ist.</para>

<para>Eine verbreitte, aber nicht zufriedenstellende Art, indem Leute
vesuchen heilige Kriege zu lösen, ist zu sagen "Wir haben bereits viel
mehr Zeit und Energie bei der Diskussion hiervon verbraucht, als es
wert ist! Können wir es bitte einfach fallen lassen"? Es gibt dabei
zwei Probleme. Erstens wurde diese Zeit und Energie bereits aufgebracht,
und sie kann nie wieder zurückgewonnen werden&mdash;die einzige Frage
die jetzt noch übrig bleibt ist, wieviel <emphasis>mehr</emphasis> man
investieren muss? Wenn einige Personen der Meinung sind, dass nur ein 
wenig mehr Diskussion das Thema zum Abschluss bringen wird, dann macht
es immer noch Sinn (aus ihrer Sicht) weiter zu machen.</para>

<para>Das andere Problem bei der Bitte das Thema fallen zu lassen ist,
dass es gleich das gleiche ist als würde man eine Seite, den Status Quo,
erlauben den Sieg durch Untätigkeit erklären zu lassen. Und in manchen
Fällen, weiß man schon, dass der Status Quo sowieso nicht akzeptabel 
ist: Alle sind sich darüber einig, dass irgend eine Entscheidung
getroffen, irgend eine Maßnahme ergriffen werden muss. Das Thema
fallen zu lassen, wäre schlimmer für alle als es für irgendjemand wäre
den Streit aufzugeben. Da das Dilemma aber für alle gleichermaßen gilt,
ist es immer noch möglich ewig darüber zu streiten, was getan werden 
soll.</para>

<para>Wie sollten Sie als heilige Kriege handhaben?</para>

<para>Die erste Antwort ist, die Dinge so einzurichten, dass sie gar
nicht erst passieren. Das ist nicht so hoffnungslos wie es sich anhört:
</para>

<para>Sie können einige immer wiederkehrende heilige Kriege 
vorausahnen: Sie neigen über Themen wie Programiersprachen, Lizenzen
(siehe <xref linkend="license-compatibility"/><phrase 
output="printed"> im Kapitel <xref linkend="legal"/></phrase>), Änderung
des reply-to Feldes (siehe <xref linkend="reply-to"/><phrase 
output="printed"> im Kapitel <xref 
linkend="technical-infrastructure"/></phrase>), und ein paar andere
Themen auf zu tauchen. Jedes Projekt hat auch ein oder zwei ganz eigene
heilige Kriege, womit langjährige Entwickler schnell vertraut werden.
Die technken um heilige Kriege aufzuhalten, oder zumindest ihren 
Schaden zu begrenzen, sind überall ziemlich die gleichen. Selbst wenn
Sie sich sicher sind, dass Ihre Seite recht hat, versuchen Sie 
<emphasis>irgend eine</emphasis> Möglichkeit zu finden um Mitgefühl
und Verständniss für die Argumente die die anderen Seite macht
auszudrücken. Oftmals ist das Problem bei einem heiligen Krieg, dass
weil jede Seite ihre Mauern so hoch wie möglich gebaut hat, und klar
gemacht hat, dass jede ander Meinung schlichtweg albern ist, wird 
Kapitulation oder die Änderung seiner Meinung psychologisch
unerträglich: Es wäre nicht nur ein Geständniss, dass man falsch lag,
sondern sich <emphasis>sicher</emphasis> gewesen zu sein und trotzdem
falsch. Sie können dieses Geständniss für die andere Seite schmackhaft
machen können, ist indem Sie selber Ungewissheit zeigen&mdash;gerade
indem Sie zeigen, dass Sie die Argumente die sie machen verstehen und
sie zumindest vernünftig finden, wenn auchnicht ganz überzeugend.
Zeigen Sie eine Geste, welche Raum lässt, für eine gegenseitige
Geste lässt, und die Situation wird sich gewöhnlich verbessern. Es ist
nicht mehr oder weniger wahrscheinlich, dass Sie das Ergebniss welches
Sie haben wollen, zumindest können Sie dadurch aber unnötigen 
Kollateralschaden an der Moral des Projekts vermeiden.</para>

<para>Wenn ein heiliger Krieg nicht vermieden werden kann, entscheiden
Sie sich frühzeitig wie sehr sie die Sache kümmert, und seien Sie
bereit öffentlich aufzugeben. Wenn Sie das tun, können Sie sagen, dass
Sie aussteigen, weil ein heiliger Krieg es nicht wert ist, drücken Sie
dabei aber keine bitterkeit aus und nutzen Sie die Gelegenheit
<emphasis>nicht</emphasis> als eine letzte Gelegenheit auf die
Argumente der Gegenseite. Aufzugeben ist nur effektiv wenn es
taktvoll gemacht wird.</para>

<para>Heilige Kriege über Programiersprachen sind ein Spezialfall, da
dazu neigen sehr technisch zu sein, dennoch fühlen sich viele Leute 
qualifiziert an Ihnen teil zu nehmen, und der Einsatz ist sehr hoch,
da das Resultat bestimmen kann, in welcher Sprache ein Großteil des
Codes vom Projekt geschrieben wird. Die beste Lösung ist es, die 
Sprache frühzeitig zu wählen, mit Unterstützung durch einflussreiche
Entwickler, und es dann auf der Grundlage zu verteidigen, dass sie
sich alle wohl fühlen in dieser Sprache zu schreiben, 
<emphasis>nicht</emphasis> auf der Grundlage, dass es besser ist als
irgend eine andere Sprach, die man sich statt dessen hätte aussuchen
können. Lassen Sie die Unterhaltung nie zu einem akademischen Vergleich
verschiedener Programiersprachen verfallen (das scheint, aus irgend ein
Grund, besonders of zu passieren, wenn jemand Perl aufbringt); das ist
einfach ein Thema des Todes in welches Sie sich weigern müssen 
hineingezogen zu werden.</para>

<para>Für ein eher historischen Hintergrund über heilige Kriege, siehe
<ulink url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, und
die Veröffentlichung von Danny Cohen welches den Begriff populär <ulink
url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="noisy-minority">
<title>Der "Lauten Minderheit" Effekt</title>

<para>Bei jedem Email Verteiler ist es leicht für eine kleine 
Minderheit den Eindruck zu erwecken, dass eine Menge Dissens gibt,
indem Sie den Verteiler mit einer Menge langer Emails überfluten.
Es ist ein eine art Obstruktionspolitik, mit dem Unterschied, dass
der Eindruck von ausgedehntem dissens noch stärker ist, da es auf eine
beliebige Anzahl einzelner Nachrichten aufgeteilt ist und die meißten
Leute werden sich nicht die Mühe mache mitzuverfolgen wer was wann
gesagt hat. Sie werden nur den instinktiven Eindruck haben, dass das
Thema sehr kontrovers ist, und warten biss die Aufregung sich gelegt
hat.</para>

<para>Die beste Art gegen diesen Effekt anzukommen sehr klar zu 
Belegen, wie klein die tatsächliche Anzahl der Dissidenten ist im
Vergleich zu denen die zustimmen. Um die Ungleichheit zu vergrößern,
sollten Sie im privaten Leute ansprechen die größtenteils ruhig
geblieben sind, von denen Sie aber vermuten, dass Sie der Mehrheit 
zustimmen. Sagen Sie nichts, was darauf hindeutet, dass die Dissidenten
absichtlich versucht hatten den Eindruck den sie hinterlassen zu
verstärken. Wahrscheinlich war das nicht der Fall, und selbst wenn,
gäbe es keinen strategischen Vorteil darauf hinzuweisen. Alles was Sie
tun müssen, ist eine Gegenüberstellung der echten Zahlen, und Leute
werden erkennen, dass ihr intuitiver Eindruck der Situation nicht der
Wirklichkeit entspricht.</para>

<para>Dieser Ratschlag gilt nicht nur für Angelegenheiten mit klaren
Positionen für oder gegen etwas. Sondern für jede Diskussion bei dem
viel Lärm gemacht wird, aber nicht klar ist, dass die meißten die
Angelegenheit die zur Debatte steht als echtes Problem ansieht. Nach
einer gewissen Zeit, wenn Sie darüber einstimmen, dass die Meldung
keine Reaktion wert ist, und sehen können, dass es es nicht geschafft
hat an Zug zu gewinnen (selbst wenn es eine Menge Emails hervorgebracht
hat), können Sie einfach öffentlich feststellen, dass es keinen Zug
gewinnt. Wenn der "Laute Minderheit" Effekt aufgetreten war, wird Ihre
Nachricht wie eine Ahtemzug frischer Luft wirken. Der Eindruck den die
meißten Leute bissher von der Diskussion hatten, wird etwas düster
gewesen sein: "Hmm, is scheint eine große Sache zu sein, weil es
wirklich eine Menge Nachrichten gibt, aber ich sehe keinen echten
Fortschritt". Indem Sie erklären, wie die Art der Diskussion es hat
scheinen lassen, als wäre es stürmischer als in Wirklichkeit, werden
Sie es im Nachhinein eine neue Gestalt geben, wodurch Leute ihr
Verständniss von dem was passiert ist neu gestalten können.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="difficult-people">
<title>Schwierige Leute</title>

<para>Scheirige Leute sind nicht einfacher im Umgang in elekronischen
Foren als im echten Leben. Mit "schwierig" meine ich nicht "unhöflich".
Unhöfliche Leute nerfen, aber sie sind nicht unbedingt schwierig. 
Dieses Buch hat bereits behandelt, wie man mit denen umgeht: Machen Sie
eine Bemerkung beim ersten mal, und ab dann, sollten Sie sie entweder 
ignorieren oder sie wie alle anderen behandeln. Wenn sie weiterhin
unhöflich sind, werden sie sich meißtens derart unbeliebt machen, dass
sie keinen Einfluss auf andere im Projekt haben, also sind sie ein in 
sich abgeschlossenes Problem.</para>

<para>Die wirklich schierigen Fälle sind Leute die nicht sonderlich
unhöflich sind, die aber die Arbeitsabläufe im Projekt derart
manipulieren oder misbrauchen, dass es die Zeit und Energie anderer
auffrisst, dem Projekt jedoch keinen Nutzen bringen. Solche Menschen
suchen oft nach Lücken in den Abläufen des Projekts, um sich selber
mehr Einfluss zu verschaffen als es sonst der Fall wäre. Das ist viel
heimtückischer als schlichte Unhöflichkeit, weil weder das Verhalten
noch der Schaden für einen beiläufigen Beobachter offensichtlich ist.
Ein klassisches Beispiel ist die Verschleppungstaktik bei dem
jemand (der sich natürlich immer so vernünftig wie möglich anhort)
immer wieder behauptet, dass die Angelegenheit die zur Debatte steht,
nicht für eine klärung bereit ist und weitere mögliche Lösungen
anbietet, oder neue Sichten auf alte Lösungen, wenn in wirklich
derjenige merkt, dass ein Konsens oder eine Wahl sich langsam anbahnt,
und ihm gefällt die Richtung nicht in der sie wahrscheinlich geht. Ein
weiteres Beispiel ist, wenn eine Debatte die sich keinem Konsens
annähert, die Gruppe aber versucht wenigstens die Eckpunkte der
Meinungsverschiedenheit klar zu stellen und eine Zusammenfassung für
alle zu produzieren, auf der sich alle von da an beziehen können. Der
Quertreiber, der weiß, dass die Zusammenfassung zu einem Ergebniss 
führen könnte, welches ihm nicht gefällt, wird oft versuchen selbst
die Zusammenfassung hinauszuzögern, indem er schonungslos die Fragen
verkompliziert, was darin beinhaltet sein soll, entweder indem er
Einspruch erhebt oder indem er unerwartete neue Punkte vorstellt.</para>

<sect2 id="handling-difficult-people">
<title>Handhabung Schwieriger Leute</title>

<para>Um solches Verhalten entgegenzuwirken hilft es, die Mentalität
derjenigen zu verstehen, die es ergreifen. Menschen machen es im
Allgemeinen nicht bewust. Keiner wacht morgens auf und sagt sich:
"Heute werde ich Verwaltungsverfahren zynisch manipulieren, um ein
irritierender Quertreiber zu sein". Statt dessen, geht solches
Verhalten oftmals ein halb paranoides Gefühl vorraus, von den der
Interaktion und den Entscheidungen in der Gruppe ausgeschlossen zu
werden. Die Person fühlt sich nicht ernst genommen, oder (in
schwehrwiegenderen Fällen), dass es fast schon eine Verschwörung gegen
ihn ist&mdash;dass die anderen Mitglieder des Projekts siche 
entschieden haben, einen exklusiven Club zu bilden, in dem er kein 
Mitglied ist. Das rechtfertigt dann, in seinen Augen, die Regeln 
wörtlich zu nehmen und anzufangen die Abläufe des Projekts formal zu
manipulieren, um alle anderen zu <emphasis>zwingen</emphasis> Ihn
ernst zu nehmen. Im Extremfall, kann die Person sogar glauben, dass
er einen Einsamen kampf ausfechtet um das Projekt vor sich selbst zu
retten.</para>

<para>It is the nature of such an attack from within that not everyone
will notice it at the same time, and some people may not see it at all
unless presented with very strong evidence.  This means that
neutralizing it can be quite a bit of work.  It's not enough to
persuade yourself that it's happening; you have to marshal enough
evidence to persuade others too, and then you have to distribute that
evidence in a thoughtful way.</para>

<para>Given that it's so much work to fight, it's often better just to
tolerate it for a while.  Think of it like a parasitic but mild
disease: if it's not too debilitating, the project can afford to
remain infected, and medicine might have harmful side effects.
However, if it gets too damaging to tolerate, then it's time for
action.  Start gathering notes on the patterns you see.  Make sure to
include references to public archives&mdash;this is one of the reasons
the project keeps records, so you might as well use them.  Once you've
got a good case built, start having private conversations with other
project participants.  Don't tell them what you've observed; instead,
first ask them what they've observed.  This may be your last chance to
get unfiltered feedback about how others see the troublemaker's
behavior; once you start openly talking about it, opinion will
become polarized and no one will be able to remember what he
formerly thought about the matter.</para>

<para>If private discussions indicate that at least some others see
the problem too, then it's time to do something.  That's when you
have to get <emphasis>really</emphasis> cautious, because it's very
easy for this sort of person to try to make it appear as though you're
picking on them unfairly.  Whatever you do, never accuse them of
maliciously abusing the project's procedures, of being paranoid, or, in
general, of any of the other things that you suspect are probably
true.  Your strategy should be to look both more reasonable and more
concerned with the overall welfare of the project, with the goal of
either reforming the person's behavior, or getting them to go away
permanently.  Depending on the other developers, and your relationship
with them, it may be advantageous to gather allies privately first.
Or it may not; that might just create ill will behind the scenes, if
people think you're engaging in an improper whispering
campaign.</para>

<para>Remember that although the other person may be the one behaving
destructively, <emphasis>you</emphasis> will be the one who appears
destructive if you make a public charge that you can't back up.  Be
sure to have plenty of examples to demonstrate what you're saying, and
say it as gently as possible while still being direct.  You may not
persuade the person in question, but that's okay as long as you
persuade everyone else.</para>

</sect2>

<sect2 id="difficult-people-case-study">
<title>Case study</title>

<para>I remember only one situation, in more than 10 years of working
in free software, where things got so bad that we actually had to ask
someone to stop posting altogether.  As is so often the case, he was
not rude, and sincerely wanted only to be helpful.  He just didn't
know when to post and when not to post.  Our lists were open to the
public, and he was posting so often, and asking questions on so many
different topics, that it was getting to be a noise problem for the
community.  We'd already tried asking him nicely to do a little more
research for answers before posting, but that had no effect.</para>

<para>The strategy that finally worked is a perfect example of how to
build a strong case on neutral, quantitative data.  One of our
developers did some digging in the archives, and then sent the
following message privately to a few developers.  The offender (the
third name on the list below, shown here as "J. Random") had very
little history with the project, and had contributed no code or
documentation.  Yet he was the third most active poster on the mailing
lists:</para>

<screen>
From: "Brian W. Fitzpatrick" &lt;fitz@collab.net&gt;
To: [... recipient list omitted for anonymity ...]
Subject: The Subversion Energy Sink
Date: Wed, 12 Nov 2003 23:37:47 -0600

In the last 25 days, the top 6 posters to the svn [dev|users] list have
been:

    294  kfogel@collab.net
    236  "C. Michael Pilato" &lt;cmpilato@collab.net&gt;
    220  "J. Random" &lt;jrandom@problematic-poster.com&gt;
    176  Branko &Ccaron;ibej &lt;brane@xbc.nu&gt;
    130  Philip Martin &lt;philip@codematters.co.uk&gt;
    126  Ben Collins-Sussman &lt;sussman@collab.net&gt;

I would say that five of these people are contributing to Subversion
hitting 1.0 in the near future.

I would also say that one of these people is consistently drawing time
and energy from the other 5, not to mention the list as a whole, thus
(albeit unintentionally) slowing the development of Subversion.  I did
not do a threaded analysis, but vgrepping my Subversion mail spool tells
me that every mail from this person is responded to at least once by at
least 2 of the other 5 people on the above list.

I think some sort of radical intervention is necessary here, even if we
do scare the aforementioned person away.  Niceties and kindness have
already proven to have no effect.

dev@subversion is a mailing list to facilitate development of a version
control system, not a group therapy session.

-Fitz, attempting to wade through three days of svn mail that he let
 pile up
</screen>

<para>Though it might not seem so at first, J. Random's behavior was a
classic case of abusing project procedures.  He wasn't doing something
obvious like trying to filibuster a vote, but he was taking advantage
of the mailing list's policy of relying on self-moderation by its
members.  We left it to each individual's judgement when to post and
on what topics.  Thus, we had no procedural recourse for dealing with
someone who either did not have, or would not exercise, such judgement.
There was no rule one could point to and say the fellow was violating
it, yet everyone knew that his frequent posting was getting to be a
serious problem.</para>

<para>Fitz's strategy was, in retrospect, masterful.  He gathered
damning quantitative evidence, but then distributed it discreetly,
sending it first to a few people whose support would be key in any
drastic action.  They agreed that some sort of action was necessary,
and in the end we called J. Random on the phone, described the problem
to him directly, and asked him to simply stop posting.  He never
really did understand the reasons why; if he had been capable
of understanding, he probably would have exercised appropriate
judgement in the first place.  But he agreed to stop posting, and the
mailing lists became useable again.  Part of the reason this strategy
worked was, perhaps, the implicit threat that we could start
restricting his posts via the moderation software normally used for
preventing spam (see
<xref linkend="spam-prevention"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>).  But the
reason we were able to have that option in reserve was that Fitz had
gathered the necessary support from key people first.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="growth">
<title>Handling Growth</title>

<para>The price of success is heavy in the open source world.  As your
software gets more popular, the number of people who show up looking
for information increases dramatically, while the number of people
able to provide information increases much more slowly.  Furthermore,
even if the ratio were evenly balanced, there is still a fundamental
scalability problem with the way most open source projects handle
communications.  Consider mailing lists, for example.  Most projects
have a mailing list for general user questions&mdash;sometimes the
list's name is "users", "discuss", "help", or something else.
Whatever its name, the purpose of the list is always the same: to
provide a place where people can get their questions answered, while
others watch and (presumably) absorb knowledge from observing these
exchanges.</para>

<para>These mailing lists work very well up to a few thousand users
and/or a couple of hundred posts a day.  But somewhere after that, the
system starts to break down, because every subscriber sees every post;
if the number of posts to the list begins to exceed what any
individual reader can process in a day, the list becomes a burden to
its members.  Imagine, for instance, if Microsoft had such a mailing
list for Windows XP.  Windows XP has hundreds of millions of users; if
even one-tenth of one percent of them had questions in a given
twenty-four hour period, then this hypothetical list would get
hundreds of thousands of posts per day!  Such a list could never
exist, of course, because no one would stay subscribed to it.
This problem is not limited to mailing lists; the same logic applies
to IRC channels, online discussion forums, indeed to any system in
which a group hears questions from individuals.  The implications are
ominous: the usual open source model of massively parallelized support
simply does not scale to the levels needed for world
domination.</para>

<para>There will be no explosion when forums reach the breaking point.
There is just a quiet negative feedback effect: people unsubscribe
from the lists, or leave the IRC channel, or at any rate stop
bothering to ask questions, because they can see they won't be heard
in all the noise.  As more and more people make this highly rational
choice, the forum's activity will seem to stay at a manageable level.
But it is staying manageable precisely because the rational (or at
least experienced) people have started looking elsewhere for
information&mdash;while the inexperienced people stay behind and
continue posting.  In other words, one side effect of continuing to
use unscalable communications models as the project grows is that the
average quality of both questions and answers tends to go down, which
makes it look like new users are dumber than they used to be, when in
fact they're probably not.  It's just that the benefit/cost ratio of
using those high-population forums goes down, so naturally those with
the experience to do so start to look elsewhere for answers first.
Adjusting communications mechanisms to cope with project growth
therefore involves two related strategies:</para>

<orderedlist>
  <listitem><para>Recognizing when particular parts of a forum are
            <emphasis>not</emphasis> suffering unbounded growth, even
            if the forum as a whole is, and separating those parts
            off into new, more specialized forums (i.e., don't let
            the good be dragged down by the bad).</para>
  </listitem>
  <listitem><para>Making sure there are many automated sources
            of information available, and that they are kept
            organized, up-to-date, and easy to find.</para>
  </listitem>
</orderedlist>

<para>Strategy (1) is usually not too hard.  Most projects start out
with one main forum: a general discussion mailing list, on which
feature ideas, design questions, and coding problems can all be hashed
out.  Everyone involved with the project is on the list.  After a
while, it usually becomes clear that the list has evolved into several
distinct topic-based sublists.  For example, some threads are clearly
about development and design; others are user questions of the "How do
I do X?" variety; maybe there's a third topic family centered around
processing bug reports and enhancement requests; and so on.  A given
individual, of course, might participate in many different thread
types, but the important thing is that there is not a lot of overlap
between the types themselves.  They could be divided into separate
lists without causing any harmful balkanization, because the threads
rarely cross topic boundaries.</para>

<para>Actually doing this division is a two-step process.  You create
the new list (or IRC channel, or whatever it is to be), and then you
spend whatever time is necessary gently nagging and reminding people
to <emphasis>use</emphasis> the new forums appropriately.  That latter
step can last for weeks, but eventually people will get the idea.  You
simply have to make a point of always telling the sender when a post
is sent to the wrong destination, and do so visibly, so that other
people are encouraged to help out with routing.  It's also useful to
have a web page providing a guide to all the lists available; your
responses can simply reference that web page and, as a bonus, the
recipient may learn something about looking for guidelines before
posting.</para>

<para>Strategy (2) is an ongoing process, lasting the lifetime of the
project and involving many participants.  Of course it is partly a
matter of having up-to-date documentation (see
<xref linkend="documentation"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>) and making sure to
point people there.  But it is also much more than that; the sections
that follow discuss this strategy in detail.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="using-archives">
<title>Conspicuous Use of Archives</title>

<para>Typically, all communications in an open source project (except
sometimes IRC conversations) are archived.  The archives are public
and searchable, and have referential stability: that is, once a given
piece of information is recorded at a particular address, it stays at
that address forever.</para>

<para>Use those archives as much as possible, and as conspicuously as
possible.  Even when you know the answer to some question off the top
of your head, if you think there's a reference in the archives that
contains the answer, spend the time to dig it up and present it.
Every time you do that in a publicly visible way, some people learn
for the first time that the archives are there, and that searching in
them can produce answers.  Also, by referring to the archives instead
of rewriting the advice, you reinforce the social norm against
duplicating information.  Why have the same answer in two different
places?  When the number of places it can be found is kept to a
minimum, people who have found it before are more likely to remember
what to search for to find it again.  Well-placed references also
contribute to the quality of search results in general, because they
strengthen the targeted resource's ranking in Internet search
engines.</para>

<para>There are times when duplicating information makes sense,
however.  For example, suppose there's a response already in the
archives, not from you, saying:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  To
unfrobnicate them, run these steps:

1. Shut down the Scanley server.
2. Run the 'defrobnicate' program that ships with Scanley.
3. Start up the server.
</screen>

<para>Then, months later, you see another post indicating that
someone's indexes have become frobnicated.  You search the archives
and come up with the old response above, but you realize it's missing
some steps (perhaps by mistake, or perhaps because the software has
changed since that post was written).  The classiest way to handle
this is to post a new, more complete set of instructions, and
explicitly obsolete the old post by mentioning it:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  We
saw this problem back in July, and J. Random posted a solution at
http://blahblahblah/blah.  Below is a more complete description of
how to unfrobnicate your indexes, based on J. Random's instructions
but extending them a bit:

1. Shut down the Scanley server.
2. Become the user the Scanley server normally runs as.
3. As that user, run the 'defrobnicate' program on the indexes.
4. Run Scanley by hand to see if the indexes work now.
5. Restart the server.
</screen>

<para>(In an ideal world, it would be possible to attach a note to the
old post, saying that there is newer information available and
pointing to the new post.  However, I don't know of any archiving
software that offers an "obsoleted by" feature, perhaps because it
would be mildly tricky to implement in a way that doesn't violate the
archives' integrity as a verbatim record.  This is another reason why
creating dedicated web pages with answers to common questions is a
good idea.)</para>

<para>Archives are probably most often searched for answers to
technical questions, but their importance to the project goes well
beyond that.  If a project's formal guidelines are its statutory law,
the archives are its common law: a record of all decisions made and
how they were arrived at.  In any recurring discussion, it's pretty
much obligatory nowadays to start with an archive search.  This allows
you to begin the discussion with a summary of the current state of
things, anticipate objections, prepare rebuttals, and possibly
discover angles you hadn't thought of.  Also, the other participants
will <emphasis>expect</emphasis> you to have done an archive search.
Even if the previous discussions went nowhere, you should include
pointers to them when you re-raise the topic, so people can see for
themselves a) that they went nowhere, and b) that you did your
homework, and therefore are probably saying something now that has not
been said before.</para>

<sect3 id="all-as-archives">
<title>Treat all resources like archives</title>

<para>All of the preceding advice applies to more than just mailing
list archives.  Having particular pieces of information at stable,
conveniently findable addresses should be an organizing principle for
all of the project's information.  Let's take the project FAQ as a
case study.</para>

<para>How do people use a FAQ?</para>

<orderedlist>
  <listitem>
    <para>They want to search in it for specific words and phrases.</para>
  </listitem>
  <listitem>
    <para>They want to browse it, soaking up information without
          necessarily looking for answers to specific questions.</para>
  </listitem>
  <listitem>
    <para>They expect search engines such as Google to know about the
          FAQ's content, so that searches can result in FAQ entries.</para>
  </listitem>
  <listitem>
    <para>They want to be able to refer other people directly to specific
          items in the FAQ.</para>
  </listitem>
  <listitem>
    <para>They want to be able to add new material to the FAQ, but
          note that this happens much less often than answers are
          looked up&mdash;FAQs are far more often read from than
          written to.</para>
  </listitem>
</orderedlist>

<para>Point 1 implies that the FAQ should be available in some sort of
textual format.  Points 2 and 3 imply that the FAQ should be available
as an HTML page, with point 2 additionally indicating that the HTML
should be designed for readability (i.e., you'll want some control
over its look and feel), and should have a table of contents.  Point 4
means that each individual entry in the FAQ should be assigned an HTML
<firstterm>named anchor</firstterm>, a tag that allows people to reach
a particular location on the page.  Point 5 means the source files for
the FAQ should be available in a convenient way (see <xref
linkend="version-everything"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), in a format
that's easy to edit.</para>

  <sidebar id="html-named-anchors-and-ids">
  <title>Named Anchors and ID Attributes</title>

  <para>There are two ways to get a browser to jump to a specific
  location within a web page: named anchors and id attributes.</para>

  <para>A <firstterm>named anchor</firstterm> is just a normal HTML
  anchor element (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), but with
  a "name" attribute:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>More recent versions of HTML support a generic <firstterm>id
  attribute</firstterm>, which can be attached to any HTML element,
  not just to <literal>&lt;a&gt;</literal>.  For example:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Both named anchors and id attributes are used in the same
  way.  One appends a hash mark and the label to a URL, to cause the
  browser to jump straight to that spot in the page:</para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtually all browsers support named anchors; most modern
  browsers support the id attribute.  To play it safe, I would
  recommend using either named anchors alone, or named anchors
  <emphasis>and</emphasis> id attributes together (with the same label
  for both in a given pair, of course).  Named anchors cannot be
  self-closing&mdash;even if there's no text inside the element, you
  must still write it in two-sided form:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...though normally there would be some text, such as the title
  of a section.</para>

  <para>Whether you use a named anchor, or an id attribute, or both,
  remember that the label will not be visible to someone who browses
  to that location without using the label.  But such a person might
  want to discover the label for a particular location, so they can
  mail the URL for a FAQ answer to a friend, for example.  To help
  them do this, add a <firstterm>title attribute</firstterm> to the
  same element(s) where you added the "name" and/or "id" attribute,
  for example:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>When the mouse pointer is held over the text inside the
  title-attributed element, most browsers will pop up a tiny box
  showing the title.  I usually include the hash-sign, to remind the
  user that this is what she would put at the end of the URL to jump
  straight to this location next time.</para>

  </sidebar>

<para>Formatting the FAQ like this is just one example of how to make
a resource presentable.  The same properties&mdash;direct
searchability, availability to major Internet search engines,
browsability, referential stability, and (where applicable)
editability&mdash;apply to other web pages, the source code tree, the
bug tracker, etc.  It just happens that most mailing list archiving
software long ago recognized the importance of these properties, which
is why mailing lists tend to have this functionality natively, while
other formats may require some extra effort on the maintainer's part
(<xref linkend="managing-volunteers"/> discusses how to spread
that maintenance burden across many volunteers).</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="codifying-tradition">
<title>Codifying Tradition</title>

<para>As a project acquires history and complexity, the amount of data
each incoming participant must absorb increases.  Those who have been
with the project a long time were able to learn, and invent, the
project's conventions as they went along.  They will often not be
consciously aware of what a huge body of tradition has accumulated, and
may be surprised at how many missteps recent newcomers seem to make.
Of course, the issue is not that the newcomers are of any lower
quality than before; it's that they face a bigger acculturation burden
than newcomers did in the past.</para>

<para>The traditions a project accumulates are as much about how to
communicate and preserve information as they are about coding
standards and other technical minutae.  We've already looked at both
sorts of standards, in
<xref linkend="developer-documentation"/><phrase output="printed"> 
in <xref linkend="getting-started"/></phrase> and
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase> respectively, and
examples are given there.  What this section is about is how to keep
such guidelines up-to-date as the project evolves, especially
guidelines about how communications are managed, because those are the
ones that change the most as the project grows in size and
complexity.</para>

<para>First, watch for patterns in how people get confused.  If you
see the same situations coming up over and over, especially with new
participants, chances are there is a guideline that needs to be
documented but isn't.  Second, don't get tired of saying the same
things over and over again, and don't <emphasis>sound</emphasis> like
you're tired of saying them.  You and other project veterans will have
to repeat yourselves often; this is an inevitable side effect of the
arrival of newcomers.</para>

<para>Every web page, every mailing list message, and every IRC channel
should be considered advertising space&mdash;not for commercial
advertisements, but for ads about your project's own resources.  What
you put in that space depends on the demographics of those likely to
read it.  An IRC channel for user questions, for example, is likely to
get people who have never interacted with the project
before&mdash;often someone who has just installed the software, and
has a question he'd like answered immediately (after all, if it
could wait, he'd have sent it to a mailing list instead, which would
probably use less of his total time, although it would take longer
for an answer to come back).  People usually don't make a permanent
investment in the IRC channel; they'll show up, ask their question,
and leave.</para>

<para>Therefore, the channel topic should be aimed at people looking
for technical answers about the software <emphasis>right
now</emphasis>, rather than at, say, people who might get involved
with the project in a long term way and for whom community interaction
guidelines might be more appropriate.  Here's how a really busy
channel handles it (compare this with the earlier example in
<xref linkend="irc"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>):</para>

<screen>
You are now talking on #linuxhelp

Topic for #linuxhelp is Please READ
http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
rules are at http://www.nerdfest.org/lh_rules.html | Please consult
http://kerneltrap.org/node/view/799 before asking about upgrading to a
2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc -&gt;
update to 2.6.8.1 or 2.4.27 | hash algo disaster: http://tinyurl.com/6w8rf
| reiser4 out
</screen>

<para>With mailing lists, the "ad space" is a tiny footer appended to
every message.  Most projects put subscription/unsubscription
instructions there, and perhaps a pointer to the project's home page
or FAQ page as well.  You might think that anyone subscribed to the
list would know where to find those things, and they probably
do&mdash;but many more people than just subscribers see those mailing
list messages.  An archived post may be linked to from many places;
indeed, some posts become so widely known that they eventually have
more readers off the list than on it.</para>

<para>Formatting can make a big difference.  For example, in the
Subversion project, we were having limited success using the
bug-filtering technique described in
<xref linkend="bug-filtering"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.  Many bogus
bug reports were still being filed by inexperienced people, and each
time it happened, the filer had to be educated in exactly the same way
as the 500 people before him.  One day, after one of our developers had
finally gotten to the end of his rope and flamed some poor user who
didn't read the issue tracker guidelines carefully enough, another
developer decided this pattern had gone on long enough.  He suggested
that we reformat the issue tracker front page so that the most
important part, the injunction to discuss the bug on the mailing lists
or IRC channels before filing, would stand out in huge, bold red
letters, on a bright yellow background, centered prominently above
everything else on the page.  We did so (you can see the results at
<ulink url="http://subversion.tigris.org/project_issues.html"/>), and
the result was a noticeable drop in the rate of bogus issue filings.
We still get them, of course&mdash;we always will&mdash;but the rate
has slowed considerably, even as the number of users increases.  The
outcome is not only that the bug database contains less junk, but that
those who respond to issue filings stay in a better mood, and are more
likely to remain friendly when responding to one of the now-rare bogus
filings.  This improves both the project's image and the mental health
of its volunteers.</para>

<para>The lesson for us was that merely writing up the guidelines was
not enough.  We also had to put them where they'd be seen by those who
need them most, and format them in such a way that their status as
introductory material would be immediately clear to people unfamiliar
with the project.</para>

<para>Static web pages are not the only venue for advertising the
project's customs.  A certain amount of interactive policing (in the
friendly-reminder sense, not the handcuffs-and-jail sense) is also
required.  All peer review, even the commit reviews described in
<xref linkend="code-review"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>, should include review
of people's conformance or non-conformance with project norms,
especially with regard to communications conventions.</para>

<para>Another example from the Subversion project: we settled on a
convention of "r12908" to mean "revision 12908 in the version control
repository."  The lower-case "r" prefix is easy to type, and because
it's half the height of the digits, it makes an easily-recognizable
block of text when combined with the digits.  Of course, settling on
the convention doesn't mean that everyone will begin using it
consistently right away.  Thus, when a commit mail comes in with a log
message like this:</para>

<screen>
------------------------------------------------------------------------
r12908 | qsimon | 2005-02-02 14:15:06 -0600 (Wed, 02 Feb 2005) | 4 lines

Patch from J. Random Contributor &lt;jrcontrib@gmail.com&gt;

* trunk/contrib/client-side/psvn/psvn.el:
  Fixed some typos from revision 12828.
------------------------------------------------------------------------
</screen>

<para>...part of reviewing that commit is to say "By the way, please
use 'r12828', not 'revision 12828' when referring to past changes."
This isn't just pedantry; it's important as much for automatic
parsability as for human readership.</para>

<para>By following the general principle that there should be
canonical referral methods for common entities, and that these
referral methods should be used consistently everywhere, the project
in effect exports certain standards.  Those standards enable people to
write tools that present the project's communications in more useable
ways&mdash;for example, a revision formatted as "r12828" could be
transformed into a live link into the repository browsing system.
This would be harder to do if the revision were written as "revision
12828", both because that form could be divided across a line break,
and because it's less distinct (the word "revision" will often appear
alone, and groups of numbers will often appear alone, whereas the
combination "r12828" can only mean a revision number).  Similar
concerns apply to issue numbers, FAQ items (hint: use a URL with a
named anchor, as described in
<xref linkend="html-named-anchors-and-ids"/>), etc.</para>

<para>Even for entities where there is not an obvious short, canonical
form, people should still be encouraged to provide key pieces of
information consistently.  For example, when referring to a mailing
list message, don't just give the sender and subject; also give the
archive URL <emphasis>and</emphasis> the Message-ID header.  The last
allows people who have their own copy of the mailing list (people
sometimes keep offline copies, for example to use on a laptop while
traveling) to unambiguously identify the right message even if they
don't have access to the archives.  The sender and subject wouldn't be
enough, because the same person might make several posts in the same
thread, even on the same day.</para>

<para>The more a project grows, the more important this sort of
consistency becomes.  Consistency means that everywhere people look,
they see the same patterns being followed, so they know to follow
those patterns themselves.  This, in turn, reduces the number of
questions they need to ask.  The burden of having a million readers is
no greater than that of having one; scalability problems start to
arise only when a certain percentage of those readers ask questions.
As a project grows, therefore, it must reduce that percentage by
increasing the density and accessibility of information, so that any
given person is more likely to find what he needs without having to
ask.</para>

<!--

<para><remark>See
<ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate concern.  Log message
templates.  Make sure that commit reviews apply to log messages and
other "meta" aspects of the commit as well as to the code
itself.</remark></para>

-->

</sect2>

<!-- todo: A lot of projects have designated summarizers, like the
Zack Brown (?) for the Linux kernel, and I think I've seen similar
stuff at DebianPlanet as well.  That's another thing to talk about in
this discussion of "Strategy (2)", and maybe something to add to the
Project Roles examples in <xref linkend="share-management"/>.
-->

</sect1>

<sect1 id="bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para>In any project that's making active use of its bug tracker,
there is always a danger of the tracker turning into a discussion
forum itself, even though the mailing lists would really be better.
Usually it starts off innocently enough: someone annotates an issue
with, say, a proposed solution, or a partial patch.  Someone else sees
this, realizes there are problems with the solution, and attaches
another annotation pointing out the problems.  The first person
responds, again by appending to the issue...and so it goes.</para>

<para>The problem with this is, first, that the bug tracker is a
pretty cumbersome place to have a discussion, and second, that other
people may not be paying attention&mdash;after all, they expect
development discussion to happen on the development mailing list, so
that's where they look for it.  They may not be subscribed to the
issue changes list at all, and even if they are, they may not follow it
very closely.</para>

<para>But exactly where in the process did something go wrong?  Was it
when the original person attached her solution to the
issue&mdash;should she have posted it to the list instead?  Or was it
when the second person responded in the issue, instead of on the
list?</para>

<para>There isn't one right answer, but there is a general principle:
if you're just adding data to an issue, then do it in the tracker, but
if you're starting a <emphasis>conversation</emphasis>, then do it on
the mailing list.  You may not always be able to tell which is the
case, but just use your best judgement.  For example, when attaching a
patch that contains a potentially controversial solution, you might be
able to anticipate that people are going to have questions about it.
So even though you would normally attach the patch to the issue
(assuming you don't want to or can't commit the change directly), in
this case you might choose to post it to a mailing list instead.  At
any rate, there eventually will come a point in the exchange where one
party or the other can tell that it is about to go from mere appending
of data to an actual conversation&mdash;in the example that started
this section, that would be the second respondent, who on realizing
that there were problems with the patch, could predict that a real
conversation is about to ensue, and therefore that it should be held
in the appropriate medium.</para>

<para>To use a mathematical analogy, if the information looks like it
will be quickly convergent, then put it directly in the bug tracker;
if it looks like it will be divergent, then a mailing list or IRC
channel would be a better place.</para>

<para>This doesn't mean there should never be any exchanges in the
bug tracker.  Asking for more details of the reproduction recipe
from the original reporter tends to be a highly convergent process,
for instance.  The person's response is unlikely to raise new issues;
it's simply going to flesh out information already filed.  There's no
need to distract the mailing list with that process; by all means,
take care of it with a series of comments in the tracker.  Likewise,
if you're fairly sure that the bug has been misreported (i.e., is not
a bug), then you can simply say so right in the issue.  Even pointing
out a minor problem with a proposed solution is fine, assuming the
problem is not a showstopper for the entire solution.</para>

<para>On the other hand, if you're raising philosophical issues about
the bug's scope or the software's proper behavior, you can be pretty
sure other developers will want to be involved.  The discussion is
likely to diverge for a while before it converges, so do it on the
mailing list.</para>

<para>Always link to the mailing list thread from the issue, when you
choose to post to the mailing list.  It's still important for someone
following the issue to be able to reach the discussion, even if the
issue itself isn't the forum of discussion.  The person who starts the
thread may find this laborious, but open source is fundamentally a
writer-responsible culture: it's much more important to make things
easy for the tens or hundreds of people who may read the bug than for
the three or five people writing about it.</para>

<para>It's fine to take important conclusions or summaries from the
list discussion and paste them into the issue, if that will make
things convenient for readers.  A common idiom is to start a list
discussion, put a link to the thread in the issue, and then when the
discussion finishes, paste the final summary into the issue (along
with a link to the message containing that summary), so someone
browsing the issue can easily see what conclusion was reached without
having to click to somewhere else.  Note that the usual "two masters"
data duplication problem does not exist here, because both archives
and issue comments are usually static, unchangeable data
anyway.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="publicity">
<title>Publicity</title>

<para>In free software, there is a fairly smooth continuum between
purely internal discussions and public relations statements.  This is
partly because the target audience is always ill-defined: given that
most or all posts are publicly accessible, the project doesn't have
full control over the impression the world gets.  Someone&mdash;say, a
<ulink url="slashdot.org"/> editor&mdash;may draw millions of readers'
attention to a post that no one ever expected to be seen outside the
project.  This is a fact of life that all open source projects live
with, but in practice, the risk is usually small.  In general, the
announcements that the project most wants publicized are the ones that
will be most publicized, assuming you use the right mechanisms to
indicate relative newsworthiness to the outside world.</para>

<para>For major announcements, there tend to be four or five main
channels of distribution, on which announcements should be made as
nearly simultaneously as possible:</para>

<orderedlist>

  <listitem><para>Your project's front page is probably seen by more
            people than any other part of the project.  If you have a
            really major announcement, put a blurb there.  The blurb
            should be a very brief synopsis that links to the press
            release (see below) for more information.</para>
  </listitem>

  <listitem><para>At the same time, you should also have a "News" or
            "Press Releases" area of the web site, where the
            announcement can be written up in detail.  Part of the
            purpose of a press release is to provide a single,
            canonical "announcement object" that other sites can link
            to, so make sure it is structured accordingly: either as
            one web page per release, as a discrete blog entry, or
            as some other kind of entity that can be linked to while
            still being kept distinct from other press releases in the
            same area.</para>
  </listitem>

  <listitem><para>If your project has an RSS feed, make sure the
            announcement goes out there too.  This may happen
            automatically when you create the press release, depending
            on how things are set up at your site.
            (<firstterm>RSS</firstterm> is a mechanism for
            distributing meta-data-rich news summaries to
            "subscribers", that is, people who have indicated an
            interest in receiving those summaries.  See
     <ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html"/>
            for more information about RSS.)</para>
  </listitem>

  <listitem><para>If the announcement is about a new release of the
            software, then update your project's entry on
            <ulink url="http://freshmeat.net/"/> (see
            <xref linkend="announcing"/> about creating the entry
            in the first place).  Every time you update a Freshmeat
            entry, that entry goes onto the Freshmeat change list
            for the day.  The change list is updated not only on
            Freshmeat itself, but on various portal sites (including
            <ulink url="slashdot.org"/>) which are watched eagerly by
            hordes of people.  Freshmeat also offers the same data via
            RSS feed, so people who are not subscribed to your
            project's own RSS feed might still see the announcement
            via Freshmeat's.</para>
  </listitem>

  <listitem><para>Send a mail to your project's announcement mailing
            list.  This list's name should actually be "announce",
            that is, <literal>announce@yourprojectdomain.org</literal>,
            because that's a fairly standard convention now, and the
            list's charter should make it clear that it is very
            low-traffic, reserved for major project announcements.
            Most of those announcements will be about new releases of
            the software, but occasionally other events, such as a
            fundraising drive, the discovery of a security
            vulnerability (see
            <xref linkend="security"/>)<phrase output="printed">
            later in this chapter</phrase>, or a
            major shift in project direction may be posted there as
            well.  Because it is low traffic and used only for
            important things, the <literal>announce</literal> list
            typically has the highest subscribership of any mailing
            list in the project (of course, this means you shouldn't
            abuse it&mdash;consider carefully before posting).  To
            avoid random people making announcements, or worse, spam
            getting through, the <literal>announce</literal> list must
            always be moderated.</para>
  </listitem>

</orderedlist>

<para>Try to make the announcements in all these places at the same
time, as nearly as possible.  People might get confused if they see an
announcement on the mailing list but then don't see it reflected on
the project's home page or in its press releases area.  If you get the
various changes (emails, web page edits, etc.) queued up and
then send them all in a row, you can keep the window of inconsistency
very small.</para>

<para>For a less important event, you can eliminate some or all of the
above outlets.  The event will still be noticed by the outside world
in direct proportion to its importance.  For example, while a new
release of the software is a major event, merely setting the date of
the next release, while still somewhat newsworthy, is not nearly as
important as the release itself.  Setting a date is worth an email to
the daily mailing lists (not the announce list), and an update of the
project's timeline or status web page, but no more.</para>

<para>However, you might still see that date appearing in discussions
elsewhere on the Internet, wherever there are people interested in the
project.  People who are lurkers on your mailing lists, just listening
and never saying anything, are not necessarily silent elsewhere.  Word
of mouth gives very broad distribution; you should count on it, and
construct even minor announcements in such a way as to encourage
accurate informal transmission.  Specifically, posts that you expect
to be quoted should have a clearly meant-to-be-quoted portion, just as
though you were writing a formal press release.  For example:</para>

  <blockquote>
     <para><emphasis>Just a progress update: we're planning to release
     version 2.0 of Scanley in mid-August 2005.  You can always check
     http://www.scanley.org/status.html for updates.  The major new
     feature will be regular-expression searches.</emphasis></para>

     <para><emphasis>Other new features include:&nbsp;... There will
     also be various bugfixes, including:&nbsp;...</emphasis></para>
  </blockquote>

<para>The first paragraph is short, gives the two most important
pieces of information (the release date and the major new feature),
and a URL to visit for further news.  If that paragraph is the only
thing that crosses someone's screen, you're still doing pretty well.
The rest of the mail could be lost without affecting the gist of the
content.  Of course, sometimes people will link to the entire mail
anyway, but just as often, they'll quote only a small part.  Given that
the latter is a possibility, you might as well make it easy for them,
and in the bargain get some influence over what gets quoted.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="security">
<title>Announcing Security Vulnerabilities</title>

<para>Handling a security vulnerability is different from handling any
other kind of bug report.  In free software, doing things openly and
transparently is normally almost a religious credo.  Every step of the
standard bug-handling process is visible to all who care to watch: the
arrival of the initial report, the ensuing discussion, and the
eventual fix.</para>

<para>Security bugs are different.  They can compromise users' data,
and possibly users' entire computers.  To discuss such a problem
openly would be to advertise its existence to the entire
world&mdash;including to all the parties who might make malicious use
of the bug.  Even merely committing a fix effectively announces the
bug's existence (there are potential attackers who watch the commit
logs of public projects, systematically looking for changes that
indicate security problems in the pre-change code).  Most open source
projects have settled on approximately the same set of steps to handle
this conflict between openness and secrecy, based on the these basic
guidelines:</para>

<orderedlist>
  <listitem><para>Don't talk about the bug publicly until a fix is
            available; then supply the fix at exactly the same moment
            you announce the bug.</para> 
  </listitem>
  <listitem><para>Come up with that fix as fast as you
            can&mdash;especially if someone outside the project
            reported the bug, because then you know there's at least
            one person outside the project who is able to exploit the
            vulnerability.</para>
  </listitem>
</orderedlist>

<para>In practice, those principles lead to a fairly standardized
series of steps, which are described in the sections below.</para>

<sect3 id="security-receiving">
<title>Receive the report</title>

<para>Obviously, a project needs the ability to receive security bug
reports from anyone.  But the regular bug reporting address won't do,
because it can be watched by anyone too.  Therefore, have a separate
mailing list for receiving security bug reports.  That mailing list
must not have publicly readable archives, and its subscribership must
be strictly controlled&mdash;only long-time, trusted developers can be
on the list.  If you need a formal definition of "trusted", you can
use "anyone who has had commit access for two years or more" or
something like that, to avoid favoritism.  This is the group that will
handle security bugs.</para>

<para>Ideally, the security list should not be spam-protected or
moderated, since you don't want an important report to get filtered
out or delayed just because no moderators happened to be online that
weekend.  If you do use automated spam-protection software, try to
configure it with high-tolerance settings; it's better to let a few spams
through than to miss a report.  For the list to be effective, you must
advertise its address, of course; but given that it will be unmoderated
and, at most, lightly spam-protected, try to never to post its address
without some sort of address hiding transformation, as described in
<xref linkend="address-hiding"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.
Fortunately, address-hiding need not make the address illegible; see
<ulink url="http://subversion.tigris.org/security.html"/>, and view
that page's HTML source, for an example.</para>

</sect3>

<sect3 id="security-finding-a-fix">
<title>Develop the fix quietly</title>

<para>So what does the security list do when it receives a report?
The first task is to evaluate the problem's severity and
urgency:</para>

<orderedlist>
  <listitem><para>How serious is the vulnerability?  Does it allow a
            malicious attacker to take over the computer of someone
            who uses your software?  Or does it, say, merely leak
            information about the sizes of some of their files?</para>
  </listitem>

  <listitem><para>How easy is it to exploit the vulnerability?  Can
            an attack be scripted, or does it require circumstantial
            knowledge, educated guessing, and luck?</para>
  </listitem>

  <listitem><para><emphasis>Who</emphasis> reported the problem to
            you?  The answer to this question doesn't change the
            nature of the vulnerability, of course, but it does give
            you an idea of how many other people might know about it.
            If the report comes from one of the project's own
            developers, you can breathe a little easier (but only a
            little), because you can trust them not to have told
            anyone else about it.  On the other hand, if it came in an
            email from <literal>anonymous14@globalhackerz.net</literal>,
            then you'd better act as fast as you can.  The person did
            you a favor by informing you of the problem at all, but you
            have no idea how many other people she's told, or how long
            she'll wait before exploiting the vulnerability on live
            installations.</para>
  </listitem>
</orderedlist>

<para>Note that the difference we're talking about here is often just
a narrow range between <emphasis>urgent</emphasis>
and <emphasis>extremely&nbsp;urgent</emphasis>.  Even when the report
comes from a known, friendly source, there could be other people on
the Net who discovered the bug long ago and just haven't reported it.
The only time things aren't urgent is when the bug inherently does not
compromise security very severely.</para>

<para>The "<literal>anonymous14@globalhackerz.net</literal>" example
is not facetious, by the way.  You really may get bug reports from
identity-cloaked people who, by their words and behavior, never quite
clarify whether they're on your side or not.  It doesn't matter: if
they've reported the security hole to you, they'll feel they've done
you a good turn, and you should respond in kind.  Thank them for the
report, give them a date on or before which you plan to release a
public fix, and keep them in the loop.  Sometimes they may
give <emphasis>you</emphasis> a date&mdash;that is, an implicit threat
to publicize the bug on a certain date, whether you're ready or not.
This may feel like a bullying power play, but it's more likely a
pre&euml;mptive action resulting from past disappointment with
unresponsive software producers who didn't take security reports
seriously enough.  Either way, you can't afford to tick this person
off.  After all, if the bug is severe, he has knowledge that could
cause your users big problems.  Treat such reporters well, and hope
that they treat you well.</para>

<para>Another frequent reporter of security bugs is the security
professional, someone who audits code for a living and keeps up on the
latest news of software vulnerabilities.  These people usually have
experience on both sides of the fence&mdash;they've both received and
sent reports, probably more than most developers in your project have.
They too will usually give a deadline for fixing a vulnerability
before going public.  The deadline may be somewhat negotiable, but
that's up to the reporter; deadlines have become recognized among
security professionals as pretty much the only reliable way to get
organizations to address security problems promptly.  So don't treat
the deadline as rude; it's a time-honored tradition, and there are
good reasons for it.</para>

<para>Once you know the severity and urgency, you can start working on
a fix.  There is sometimes a tradeoff between doing a fix elegantly
and doing it speedily; this is why you must agree on the urgency
before you start.  Keep discussion of the fix restricted to the
security list members, of course, plus the original reporter (if she
wants to be involved) and any developers who need to be brought in for
technical reasons.</para>

<para>Do not commit the fix to the repository.  Keep it in patch form
until the go-public date.  If you were to commit it, even with an
innocent-looking log message, someone might notice and understand the
change.  You never know who is watching your repository and why they
might be interested.  Turning off commit emails wouldn't help; first
of all, the gap in the commit mail sequence would itself look
suspicious, and anyway, the data would still be in the repository.
Just do all development in a patch and keep the patch in some private
place, perhaps a separate, private repository known only to the people
already aware of the bug.  (If you use a decentralized version control
system like Arch or SVK, you can do the work under full version
control, and just keep that repository inaccessible to
outsiders.)</para>

</sect3>

<sect3 id="security-cve">
<title>CAN/CVE numbers</title>

<para>You may have seen a <firstterm>CAN number</firstterm> or
a <firstterm>CVE number</firstterm> associated with security problems.
These numbers usually look like "CAN-2004-0397" or
"CVE-2002-0092", for example.</para>

<para>Both kinds of numbers represent the same type of entity: an
entry in the list of "Common Vulnerabilities and Exposures" list
maintained at <ulink url="http://cve.mitre.org/"/>.  The purpose of
the list is to provide standardized names for all known security
problems, so that everyone has a unique, canonical name to use when
discussing one, and a central place to go to find out more
information.  The only difference between a "CAN" number and a "CVE"
number is that the former represents a candidate entry, not yet
approved for inclusion in the official list by the CVE Editorial
Board, and the latter represents an approved entry.  However, both
types of entries are visible to the public, and an entry's number does
not change when it is approved&mdash;the "CAN" prefix is simply
replaced with "CVE".</para>

<para>A CAN/CVE entry does not itself contain a full description of
the bug and how to protect against it.  Instead, it contains a brief
summary, and a list of references to external resources (such as
mailing list archives) where people can go to get more detailed
information.  The real purpose of <ulink url="http://cve.mitre.org/"/>
is to provide a well-organized space in which every vulnerability can
have a name and a clear route to more data.  See
<ulink url="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2002-0092"/>
for an example of an entry.  Note that the references can be very
terse, with sources appearing as cryptic abbreviations.  A key to
those abbreviations is at
<ulink url="http://cve.mitre.org/cve/refs/refkey.html"/>.</para>

<para>If your vulnerability meets the CVE criteria, you may wish to
acquire it a CAN number.  The process for doing so is deliberately
gated: basically, you have to know someone, or know someone who knows
someone.  This is not as crazy as it might sound.  In order for the
CVE Editorial Board to avoid being overwhelmed with spurious or
poorly written submissions, they take submissions only from sources
they already know and trust.  In order to get your vulnerability
listed, therefore, you need to find a path of acquaintance from your
project to the CVE Editorial Board.  Ask around among your developers;
one of them will probably know someone else who has either done the
CAN process before, or knows someone who has, etc.  The advantage of
doing it this way is also that somewhere along the chain, someone may
know enough to tell you that a) it wouldn't count as a vulnerability
or exposure according to MITRE's criteria, so there is no point
submitting it, or b) the vulnerability already
<emphasis>has</emphasis> a CAN or CVE number.  The latter can happen
if the bug has already been published on another security advisory
list, for example at <ulink url="http://www.cert.org/"/> or on the
BugTraq mailing list at <ulink url="http://www.securityfocus.com/"/>.
(If that happened without your project hearing about it, then you
should worry what else might be going on that you don't know
about.)</para>

<para>If you get a CAN/CVE number at all, you usually want to get it
in the early stages of your bug investigation, so that all further
communications can refer to that number.  CAN entries are embargoed
until the go-public date; the entry will exist as an empty placeholder
(so you don't lose the name), but it won't reveal any information
about the vulnerability until the date on which you will be announcing
the bug and the fix.</para>

<para>More information about the CAN/CVE process may be found at
<ulink url="http://cve.mitre.org/about/candidates.html"/>, and a
particularly clear exposition of one open source project's use of
CAN/CVE numbers is at
<ulink
url="http://www.debian.org/security/cve-compatibility"/>.</para>

</sect3>

<sect3 id="security-prenotification">
<title>Pre-notification</title>

<para>Once your security response team (that is, those developers who
are on the security mailing list, or who have been brought in to deal
with a particular report) has a fix ready, you need to decide how to
distribute it.</para>

<para>If you simply commit the fix to your repository, or otherwise
announce it to the world, you effectively force everyone using your
software to upgrade immediately or risk being hacked.  It is sometimes
appropriate, therefore, to do <firstterm>pre-notification</firstterm>
for certain important users.  This is particularly true with
client/server software, where there may be well-known servers that are
tempting targets for attackers.  Those servers' administrators would
appreciate having an extra day or two to do the upgrade, so that they
are already protected by the time the exploit becomes public
knowledge.</para>

<para>Pre-notification simply means sending mails to those
administrators before the go-public date, telling them of the
vulnerability and how to fix it.  You should send pre-notification
only to people you trust to be discreet with the information.  That
is, the qualification for receiving pre-notification is twofold: the
recipient must run a large, important server where a compromise would
be a serious matter, <emphasis>and</emphasis> the recipient must be
known to be someone who won't blab about the security problem before
the go-public date.</para>

<para>Send each pre-notification mail individually (one at a time) to
each recipient.  Do <emphasis>not</emphasis> send to the entire list
of recipients at once, because then they would see each others'
names&mdash;meaning that you would essentially be alerting each
recipient to the fact that each <emphasis>other</emphasis> recipient
may have a security hole in her server.  Sending it to them all via
blind CC (BCC) isn't a good solution either, because some admins
protect their inboxes with spam filters that either block or reduce
the priority of BCC'd mail, since so much spam is sent via BCC these
days.</para>

<para>Here's a sample pre-notification mail:</para>

<screen>
From: Your Name Here
To: admin@large-famous-server.com
Reply-to: Your Name Here (not the security list's address)
Subject: Confidential Scanley vulnerability notification.


This email is a confidential pre-notification of a security alert
in the Scanley server.

Please *do not forward* any part of this mail to anyone.  The public
announcement is not until May 19th, and we'd like to keep the
information embargoed until then.

You are receiving this mail because (we think) you run a Scanley
server, and would want to have it patched before this security hole is
made public on May 19th.

References:
===========

   CAN-2004-1771: Scanley stack overflow in queries

Vulnerability:
==============

   The server can be made to run arbitrary commands if the server's
   locale is misconfigured and the client sends a malformed query.

Severity:
=========

   Very severe, can involve arbitrary code execution on the server.

Workarounds:
============

   Setting the 'natural-language-processing' option to 'off' in
   scanley.conf closes this vulnerability.

Patch:
======

   The patch below applies to Scanley 3.0, 3.1, and 3.2.

   A new public release (Scanley 3.2.1) will be made on or just before
   May 19th, so that it is available at the same time as this
   vulnerability is made public.  You can patch now, or just wait for
   the public release.  The only difference between 3.2 and 3.2.1 will
   be this patch.

[...patch goes here...]
</screen>

<para>If you have a CAN number, include it in the pre-notification (as
shown above), even though the information is still embargoed and
therefore the MITRE page will show nothing.  Including the CAN number
allows the recipient to know with certainty that the bug they were
pre-notified about is the same one they later hear about through
public channels, so they don't have to worry whether further action is
necessary or not, which is precisely the point of CAN/CVE
numbers.</para>

</sect3>

<sect3 id="security-announcing">
<title>Distribute the fix publicly</title>

<para>The last step in handling a security bug is to distribute the
fix publicly.  In a single, comprehensive announcement, you should
describe the problem, give the CAN/CVE number if any, describe how to
work around it, and how to permanently fix it.  Usually "fix" means
upgrading to a new version of the software, though sometimes it can
mean applying a patch, particularly if the software is normally run in
source form anyway.  If you do make a new release, it should differ
from some existing release by exactly the security patch.  That way,
conservative admins can upgrade without worrying about what else they
might be affecting; they also don't have to worry about future upgrades,
because the security fix will be in all future releases as a matter of
course.  (Details of release procedures are discussed in
<xref linkend="security-releases"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>.)</para>

<para>Whether or not the public fix involves a new release, do the
announcement with roughly the same priority as you would a new
release: send a mail to the project's <literal>announce</literal>
list, make a new press release, update the Freshmeat entry, etc.
While you should never try to play down the existence of a security
bug out of concern for the project's reputation, you may certainly set
the tone and prominence of a security announcement to match the actual
severity of the problem.  If the security hole is just a minor
information exposure, not an exploit that allows the user's entire
computer to be taken over, then it may not warrant a lot of fuss.  You
may even decide not to distract the <literal>announce</literal> list
with it.  After all, if the project cries wolf every time, users might
end up thinking the software is less secure than it actually is, and
also might not believe you when you have a really big problem to
announce.  See
<ulink url="http://cve.mitre.org/about/terminology.html"/> for a good
introduction to the problem of judging severity.</para>

<para>In general, if you're unsure how to treat a security problem,
find someone with experience and talk to them about it.  Assessing and
handling vulnerabilities is very much an acquired skill, and it's easy
to make missteps the first few times.</para>

</sect3>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
