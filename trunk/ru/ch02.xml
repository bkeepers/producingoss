<chapter id="getting-started">

<title>Начало работы</title>

<simplesect>

<para>Классическая модель того, как начинаются проекты бесплатного 
программного обеспечения, предоставлена Эриком Раймондом, в теперь уже знаменитой
статье о процессах разработки с открытым исходным кодом, озаглавленной
<citetitle> Собор и Базар</citetitle>. Он писал:</para>

    <blockquote>
      <para><emphasis>Любое хорошее программное обеспечение начинается с 
	  расцарапывания личного зуда разработчика.</emphasis></para>

      <para>(из <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Обратите внимание, на то, что Раймонд не говорил, что
проекты с открытым исходным кодом получаются только тогда, когда у кого-нибудь
начинается зуд. Скорее он говорил, что <emphasis>хорошее</emphasis>, программное обеспечение 
получается, когда у программиста есть личный интерес в том, чтобы увидеть задачу решенной;
значимость этого для свободного программномого обеспечения в том, что личный зуд,
стал самым частым побуждением для начала работы над свободным программным проектом.</para>

<para>Большинство свободных проектов все еще начинаются именно так, но
сейчас реже, чем в 1997, когда Раймонд написал эти слова. Сегодня у нас 
есть явление организаций&mdash; включая коммерческие корпорации&mdash;
начинающих большие, централизованно управляемые проекты с открытым исходным
кодом, с нуля. Одинокий программист, строча код для решения локальной
задачи и потом понимая, что результат работы имеет более широкую применимость,
все еще является источником большого количества нового свободного программного 
обеспечения, но не единственным</para>

<para>Тем не менее, точка зрения Раймонда все еще проницательна. Основным 
условием является то, что производители программного обеспечения напрямую
заинтересованы в его успехе, потому что они сами его используют.
Если программное обеспечение не делает того, что оно, как предполагается,
должно делать, то человек или организация его производящая, будет 
чувствовать неудовлетворенность своей ежедневной работой. Например, проект
OpenAdapter (<ulink url = "http://www.openadapter.org /"/>), который был 
начат инвестиционным банком Дресднер Клеинуорт Уоссерштеин 
(Dresdner Kleinwort Wasserstein) как ифраструктура с открытым  исходным 
кодом, предназначенная для интеграции несовместимых финансовых информационных
систем, едва ли способен вызвать зуд у любого самостоятельного разработчика.
Она вызывает организационный зуд. Но этот зуд возникает непосредственно из 
опыта организации и ее партнеров,и поэтому если проект будет не в состоянии
вылечить его, они об этом узнают. Такое положение дел способствует производству
хорошего программного обеспечения, потому что цикл обратной связи идет в нужном
направлении. Программа не писалась для того, чтобы быть проданной кому-то другому,
так чтобы они могли решить <emphasis>их</emphasis> задачу.  Она писалась для того,
чтобы решить свою <emphasis>собственную</emphasis> задачу, а затем поделиться
со всеми, как будто задача была болезнью, а программное обеспечение было лекарством,
чье распространение означает полное истребление эпидемии.</para>

<para>Эта глава о том, как представить новый свободный программный проект миру,
но многие из его рекомендаций, показались бы знакомыми органам здравоохранения,
распространяющим лекарства. Цели очень похожи: вы хотите объяснить, что делает
лекарство, отдаете его в руки нужных людей, и убеждаетесь в том, что тот кто его
получил, знает как его использовать. Но в случае с программным обеспечением,
вы также хотите соблазнить некоторых получателей присоединиться к продолжающейся
исследовательской деятельности по улучшению лекарства.</para>

<para>Распространение свободного программного обеспечения, это двойная
задача. Программное обеспечение должно привлекать пользователей, и привлекать
разработчиков. Эти две потребности не обязательно конфликтуют, но они действительно
добавляют некоторую сложность к начальному представлению проекта. Какая-то информация
полезна для обоих групп, некоторая полезна только для одной или другой. Оба вида 
информации должны подписаться под принципом расширяемого представления; то есть,
степень детализации, представленная на каждом отрезке, должна прямо соответствовать
количеству времени и усилий, вложенных читателем. Больше усилий всегда должно
быть равно большему вознаграждению. Когда эти два показателя не связаны прочно,
люди могут быстро потерять веру и прекратить вкладывать свои силы.</para>

<para>Из этого следует вывод о том, что <emphasis>внешний вид имеет
значение</emphasis>.  Программисты, в частности, часто не склонны в это
верить. Их любовь к содержанию, а не к форме является почти профессиональной
гордостью.Поэтому не случайно, что так много программистов проявляют неприязнь
к работе в отделе продаж или связей с общественностью, а профессиональные
дизайнеры часто приходят в ужас от того, что программисты придумывают самостоятельно.</para>

<para>Это достойно сожаления, потому что встречаются ситуации, где форма
<emphasis>является</emphasis> содержанием, и презентация проекта - одна из них.
Например, самое первое, что посетитель узнает о проекте, это то, как выглядит 
его веб-сайт. Эта информация воспринимается раньше, чем любое информационное 
содержание сайта будет понято&mdash; до того, как будет прочитан любой текст или 
нажата любая ссылка. Как бы это ни было несправедливо, люди не могут удержать себя
от немедленного формирования первого впечатления. Появление сайта указывает на то,
позаботитлись ли разработчики об организации внешнего представления проекта.
У людей имеются чрезвычайно чувствительные антенны для обнаружения усилий, 
потраченных на заботу о проекте. Большинство из нас может сказать с первого взгляда,
был ли веб-сайт быстро набросан совместными усилиями или серьезно проработан. 
Это начальная информация, которую выдает ваш проект, и впечатление, которая она
создает, по аналогии перенесется на остальную часть проекта.</para>

<para>Итак, хотя большая часть этой главы рассказывает о наполнении,
с которого должен начинаться ваш проект, помните, что впечатление 
и ощущение от использования программы тоже важны. Так как веб-сайт
проекта должен функционировать для двух разных категорий посетителей &mdash;
пользователей и разработчиков&mdash;особое внимание должно быть уделено
ясности и направленности. Хотя здесь не место для общего трактата по веб-дизайну,
один принцип достаточно важен,и заслуживает упоминания, особенно когда сайт 
предназначен для  множества (перекрывающихся) групп: люди должны иметь общее 
представление о том, куда ведет ссылка до того как они нажимают на нее. 
Например, должно быть очевидно <emphasis>смотря на ссылки </emphasis> на 
пользовательскую документацию, что они ведут к пользовательской документации,
а не, скажем, к документации разработчика. Реализация проекта это, частично, 
предоставление информации, но также и предоставление удобства. Простое присутствие
некоторых стандартных предложений в нужных местах, убеждает пользователей и
разработчиков, решающих, хотят ли они принять участие в проекте. Это означает,
что проекта есть своя совместная деятельность, что проект предвидел вопросы,
которые люди будут задавать и приложил усилия для ответа на них, таким способом,
который требует минимального напряжения со стороны спрашивающего. Окружившись 
этой аурой подготовленности, проект посылает сообщение: "Ваше время не будет потрачено 
впустую, если вы присоединитесь", которое является именно тем, что люди хотят
услышать.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Но сначала оглянитесь</title>

<para>Прежде чем начинать проект с открытым исходным кодом обратите внимание
на одно важное предостережение:</para>

<para>Всегда осмотритесь вокруг, чтобы узнать нет ли уже существующего проекта,
который делает то, что вы хотите. Существует большая вероятность того, что
какую бы задачу вы не хотели решить сейчас, кто-то хотел решить ее до вас.
И если они решили ее и выпустили свой код под свободной лицензией, тогда
сегодня для вас нет причины снова изобретать колесо. Конечно есть исключчения:
если вы хотите начать проекта в учебных целях, то уже существующий код не поможет;
или, может быть, проект о котором вы думаете настолько узкоспециален, что вы
знаете о нулевой вероятности того, что кто-то еще это делал. Но в общем,
нет смысла не поискать и отдача может быть огромной. Если обычные поисковые
службы ничего не находят, попробуйте поискать на <ulink url="http://freshmeat.net/"/> 
(сайт новостей о проектах с открытым исходным кодом, подробнее о котором будет 
сказано позднее), на <ulink url="http://www.sourceforge.net/"/> и в разделе свободных
программн Фонда свободного программного обеспечения <ulink url="http://directory.fsf.org/"/>.</para>

<para>Даже если вы не нашли именно то, что искали, вы можете найти что-нибудь настолько
близкое, что будет больше смысла присоединиться к этому проекту и добавить функциональности,
чем самому начинать с нуля.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Начните с того, что у вас уже есть</title>

<para>Вы осмотрелись, поняли, что ничего вокруг действительно
вам не подходит и решили начать новый проект.</para>

<para>И что теперь?</para>

<para>Самая трудная часть в запуске проекта свободного программного обеспечения
заключается в преобразовании личного взгляда в общественный. Вы или ваша организация 
можете хорошо представлять, чего вы хотите, но описание вашей цели таким образом, чтобы она была
понятна всему миру требует изрядного количества работы. Самое главное, однако&mdash;найти время 
заняться этим. Вы и другие основатели проекта должны решить, что проект действительно 
должен сделать&mdash; то есть, примите решение о его ограничениях, о том, что он 
<emphasis>не будет</emphasis> делать, так же, как и о том, что он будет делать&mdash; 
и напишите программое заявление. Эта часть обычно не слишком сложна, хотя иногда она может
выявить невысказанные предположения и даже разногласия о природе проекта, что прекрасно:
лучше решить их сейчас, чем позднее. Следующий шаг&mdash;упаковать проект для общественного 
употребления, и это, в основном, тяжелая работа в чистом виде.</para>

<para>Что делает ее такой утомительной, так это то, что главным образом она состоит
из организации и описания вещей, которые остальные уже знаютs&mdash; "остальные",
то есть те, кто уже принимает участие в проекте. Таким образом, для людей, делающих 
эту  работу, нет никакой немедленной отдачи. Они не нуждаются в файле <filename>README</filename>
дающем краткий обзор проекта, ни в документе о дизайне или руководстве пользователя.
Они не нуждаются в тщательно организованном дереве кода, соответствующем неофициальным,
но широко распространенным стандартам распространения исходных кодов программного обеспечения.
Каким бы способом ни был организован исходный код, он прекрасно им подходит, потому что они,
в любом случае, уже привыкли к нему, и если код в принципе работает, они знают как его
использовать. Для них даже не имеет значения, если фундаментальные архитектурные 
решения проекта остаются не описанными; с ними они также уже знакомы.</para>

<para>Новички, с другой стороны, нуждаются в подобных вещах. К счастью, они не нуждаются 
во всем сразу. Вам не обязательно предоставлять каждый возможный документ, прежде чем 
проект станет доступен общественности. В идеальном  мире, возможно, каждый новый проект с
открытым кодом начинал бы жизнь с исчерпывающим документом о дизайне, полным руководством
пользователя (со специальными отметками о запланированных, но еще не реализованных функциях),
с красиво и переносимо упакованным кодом, способном выполняться на любой вычислительной платформе,
и так далее. В действительности, забота обо всех этих белых пятнах была бы отнимающей
недопустимо много времени, и, в любом случае, это такой тип работы, что можно обоснованно надеяться
на то, что добровольцы помогут с ней, как только проект пойдет полным ходом.</para>

<para>Что, однако, <emphasis>действительно</emphasis> необходимо, это достаточное количество
усилий, вложенных во внешний вид, так, чтобы новички преодолели изначальное препятствие 
неизвестности. Думайте об этом как о первом шаге процесса загрузки, чтобы довести проект
до минимальных затрат энергии на запуск. Я слышал, что этот порог называют <firstterm>энергией 
преодоления препятствий (хакстартом - hacktivation)</firstterm>: количество энергии, которое
должен потратить новичок, до того, как он начнет получать что-либо от проекта обратно.
Чем ниже энергия преодоления препятствий, тем лучше. Ваша первая задача состоит в том, чтобы
опустить энергию преодоления препятствий до такого уровня, который бы содействовал
привлечению людей.</para>

<para>Каждый из следующих подразделов описывает один важный аспект начала нового проекта.
Они представлены примерно в том порядке, в котором новый посетитель столкнулся бы с ними,
хотя, конечно, порядок в котором вы действительно их выполняете, может быть другим.
Вы можете рассматривать их как контрольный перечень. Начиная проект, просто пробегайте
список и удостоверьтесь, что каждый пункт проработан, или, по крайней мере,
что вас устраивают потенциальные последствия, если вы что-то пропустили.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Выберите хорошее название</title>

<para>Поставьте себя на место того, кто только что услышал о вашем проекте, 
возможно, наткнулвшись на него, в поисках программного обеспечения, решающего 
некоторую задачу. Первое, с чем они столкнутся, это название проекта.</para>

<para>Хорошее название автоматически не сделает ваш проект успешным, и плохое
название не приговорит его&mdash; ну, <emphasis>действительно</emphasis> 
плохое имя, вероятно сможет это сделать, но мы начнем с предположения о том,
что здесь никто активно не пытается провалить свой проект. Однако, плохое
имя может замедлить понимание проекта, или потому что люди не отнесутся 
к нему серьезно, или потому что им будет трудно его запомнить. </para>

<para>Хорошее название:

<itemizedlist>
  <listitem><para>Дает какое-то представление о том, что проект делает,
      или, хотя бы, четко указывает, с чем он связан, таким образом, что
      если кто-либо знает название и знает, что делает проект, имя очень
      легко вспоминается.</para>
  </listitem>
  <listitem><para>Легко запоминается. Никуда не денешься от того факта,
      что английский стал языком интернета по умолчанию: "просто запомнить"
      означает "просто для того, кто может читать по английски, чтобы запомнить".
      Названия, которые являются игрой слов, зависящей от произношения носителя
      языка, например, будут непонятны многим читателям, для которых английский
      не является родным. Если игра слов особенно хороша и незабываема,
      она, может быть, все еще стоит того; только имейте в виду, что многие люди,
      видя название, не услышат его в своей голове так же, как услышит его носитель
      языка.</para>
  </listitem>
  <listitem><para>Не такое же, как название какого-либо другого проекта, и не нарушает
      никакие торговые марки. Это просто хорошие манеры, так же как и хороший юридический
      ход. Вы же не хотите устроить путаницу в определениях. Достаточно сложно следить
      следить за всем, что уже доступно в сети и без того, чтобы разные вещи имели
      одно и тоже название.</para>

            <para>Ссылки, упомянутые ранее в <xref linkend="look-around"/> полезны для
	      полезны для нахождения проектов, уже имеющих то имя, о котором вы 
	      думали. Свободный поиск торговых марок доступен на
	      <ulink url="http://www.nameprotect.org/"/> и <ulink url="http://www.uspto.gov/"/>.</para>
  </listitem>
  <listitem><para>Если возможно, доступно как доменное имя в 
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, и
            <systemitem>.org</systemitem> доменах вержнего уровня. Вам нужно выбрать один,
	    вероятнее <systemitem>.org</systemitem>, и сделать его официальным сайтом проекта;
	    два других должны перенаправлять туда и должны просто препятствовать тому,
	    чтобы посторонние лица создавали путанницу с именами вокруг проекта. Даже
	    если вы хотите держать проект на другом сайте 
	    (см.  <xref linkend="starting-with-canned-hosting"/>), вы все еще можете
	    зарегистрировать определенные домены для проекта и перенаправлять с них на
	    сайт проекта. Это очень помогает пользователям иметь простой для запоминания
	    URL-адрес.</para>
    </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Разработайте четкое программное заявление</title>

<para>Как только они нашли веб-сайт проекта, следующей вещью, которую будут искать люди, станет
краткое описание, программное заявление, и таким образом они смогут решить (в течение 30 секунд),
интересно ли им узнать о проекте подробнее. Заявление должно быть обязательно располагаться на
главной странице, предпочтительно сразу под названием проекта.</para>

<para>Программное заявление должно быть конкректным, устанавливающим четкие границы,
и, прежде всего, коротким. Вот пример одного хорошего, от <ulink url="http://www.openoffice.org/"/>:</para>

  <blockquote>
  <para><emphasis>Для создания, в сообществе, лидирующего международного программного 
      пакета для офиса, который будет работать на всех распространенных платформах и предоставлять
      доступ ко всем функциям и данным при помощи API (Application Programming Interface - 
      интерфейс прикладного программирования), основанном на открытых компонентах и формате
      файлов, основанном на XML.</emphasis></para>
  </blockquote>

<para>Всего в нескольких словах они указали на ключевые точки, широко
основываясь на предыдущих знаниях читателя. Говоря "<emphasis>в сообществе</emphasis>",
они указывают, что никакая корпорация не будет руководить
разработкой; "<emphasis>международный</emphasis>" означает, что
программное обеспечение позволит людям работать на разных языках
и с различнимы региональными настройками; "<emphasis>все распространенные
платформы</emphasis>" означает, что оно будет пренесено на Unix, Macintosh и Windows.
Остальное говорит о том, что открытые интерфейсы и легко понимаемые форматы файлов
являются важной частью намеченной цели. Они не выходят и не говорят прямо, что пытаются
стать свободной альтернативой Microsoft Office, но многие люди, вероятно смогут
прочитать это между строк. Хотя это программное заявление кажется слишком общим на 
первый взгляд, в действительности оно четко очерчивает круг задач: слова "<emphasis>пакет
для офиса</emphasis>" означает предельно конкретную вещь для тех, кто хорошо знаком
с подобным программным обеспечением. Опять, предполагаемые предыдущие знания читателя 
(в данном случае, вероятно, из MS Office) используются для сохранения краткости
программного заявления.</para>

<para>Природа программного заявления зависит частично от того, кто его пишет
а не только от программного обеспечения, которое оно описывает. Например, для OpenOffice.org 
есть смысл использовать слова "<emphasis>в сообществе</emphasis>", потому что проект был начат,
и все еще в значительной степени спонсируется компанией Sun Microsystems.
Включая эти слова Sun указывает на свое внимание к тревогам о том, что она могла бы попытаться
руководить процессом разработки. При обращении с подобными вещами, простая демонстрация понимания
<emphasis>возможного</emphasis> возникновения проблемы, ведет по пути полного ухода от нее.
С другой стороны, проекты, которые не спонсируются одной единственной корпорацией вероятно,
не нуждаются в таком указании; в конце концов, разработка сообществом &mdash; норма, и таким образом,
обычно не бывает никакой причины указывать на это, как на часть программного заявления.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Подтвердите Что Проект Свободный</title>

<para>Те, кто остается заинтересованными после прочтения программного заявленя, потом зохотят  
посмотреть подробнее, возможно некоторую документацию пользователя или разработчика, и в конечном счете,
захотят что-нибудь скачать. Но, до всего этого, они должны быть уверенны, что это открытый исходный
код.</para>

<para><emphasis>Главная страница должна однозначно ясно указывать на то,
что это проект с открытым исходным кодом.</emphasis> Это может показаться
очевидным, но вы были бы удивлены, насколько много проектов забывают это 
сделать. Я видел вебсайты проектов свободного программного обеспечения,
где главная страница не только не говорила, под какой именно
конкретной свободной лицензией распространяется программное обеспечение,
но и вообще не указывала напрямую, что это свободное программное обеспечение.
Иногда, решающий бит информации отправлялся в изгнание на страницу Загрузки,
или на страницу для Разработчиков, или в любое другое место, которое требует
лишнего щелчка мыши, чтобы до него добраться. В крайних случаях лицензия
вообщен не была указана нигде на сайте &mdash; единственный способ найти
ее состоял в том, чтобы загрузить программное обеспечение и посмотреть внутри.</para>

<para>Не совершайте такой ошибки. Подобное упущение  может привести к потере
многих потенциальных разработчиков и пользователей. Укажите наверху, сразу под
программным заявлением, что проект является "свободным программным обеспечением"
или "программным обеспечением с открытым исходным кодом", и предоставьте 
точную лицензию. Быстрое руководство по выбору лицензии дается в
<xref linkend="license-quickstart"/><phrase output="printed"> далее в этой главе</phrase>,
а возможные проблемы с лицензиями подробно обсуждаются в <xref
linkend="legal"/>.</para>

<para>В этот момент наш гипотетический посетитель определил, вероятно
в течение минуты или меньше, что он заинтересован потратить, скажем, еще
по крайней мере пять минут, исследуя этот проект. Следующие разделы описывают,
что он должен увидеть в эти пять минут.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Функциональные возможности и Список требований</title>

<para>Там должен быть краткий список функций, которые поддерживает программное
обеспечение (если что-то еще не закончено, вы можете включить это в список,
но поместить  "<emphasis>запланировано</emphasis>" или "<emphasis>в&nbsp;разработке</emphasis>"
рядом с ними), и тип вычислительной среды, требуеющейся для работы программного
обеспечения. Подумайте о списке функций/требований как о чем-то, что вы предоставили
кому-нибудь, попросившему краткое описание программного обеспечения. Это, часто, всего лишь
логическое развитие программного заявления. Например, программное заявление могло бы сказать: </para>

  <blockquote>
  <para><emphasis>Создать полнотекстовый индексатор и поисковый механизм
      с богатым API, для использования программистами, предоставляющими
      службы поиска по большим коллекциям текстовых файлов.</emphasis></para>
  </blockquote>

<para>Список функциональных возможностей и требований давал бы подробные
объяснения, проясняя область применения, описанную в программном заявлении:</para>

  <blockquote>
    <para><emphasis>Функциональные возможности:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Поиск в простом тексте, HTML и
                XML</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Поиск слова и предложения</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(запланировано) Нечеткое совпадение</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(запланировано) Инкрементное обновление
                индексов</emphasis></para>
      </listitem>
      <listitem><para><emphasis>(запланировано) Индексирование удаленных
                веб-сайтов</emphasis></para>
      </listitem>
    </itemizedlist>
    <para><emphasis>Требования:</emphasis></para>
    <itemizedlist>
      <listitem><para><emphasis>Python 2.2 или выше</emphasis></para>
      </listitem>
      <listitem><para><emphasis>Достаточное дисковое пространство для хранения
                индексов (примерно в два раза больше изначального
                объема данных)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<para>Обладая этой информацией, читатели могут быстро почувствовать, есть ли у этого программного
обеспечения перспектива поработать у них, и могут рассмотреть возможность тоже поучавствовать
в качестве разработчиков.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Текущее состояние разработки</title>

<para>Люди всегда хотят знать, как живет проект. Для новых проектов, они хотят знать разницу между 
обещанием и реальной действительностью. Для зрелых проектов, они хотят знать, как активно
он поддерживается, как часто выпускаются новые версии, насколько быстро реагирует на сообщения
об ошибках и т.д.</para>

<para>Чтобы ответить на эти вопросы, вы должны предоставить страницу текущего состояния разработки,
перечисляя краткосрочные цели проекта и его нужды (например, проект может искать разработчиков 
со специфическими знаниями). Страница может также предоставить хронологию предыдущих версий
со списками функциональных особенностей, и, таким образом, посетители смогут понять, что значит
для проекта "развитие" и как быстро он развивается согласно своему собственному определению.</para>

<para>Не бойтесь выглядеть неготовым и не поддавайтесь искушению раздуть текущее состояние. Все 
знают, что программное обеспечение развивается постепенно; нет ничего постыдного в том, чтобы
сказать "Это - альфа-версия программного обеспечения, содержащая известные ошибки. Оно выполняется,
и работает, по крайней мере, время от времени, но используйте его на ваш собственный риск."
Такое заявление не будет отпугивать тот тип разработчиков,которые нужны вам на этой стадии.
Что касается пользователей, одна из самых плохих вещей, которые может сделать проект - это
привлекть пользователей прежде, чем программное обеспечение для них будет готово. Очень трудно 
отделаться от приобретенной когда-то репутации неустойчивого или нестабильного проекта. 
Консерватизм окупается в долгосрочной перспективе; для программного обеспечения всегда
лучше быть <emphasis>более</emphasis> стабильным, чем ожидает пользователь, чем менее,
и приятные неожиданности способствуют лучшим отзывам.</para>

<sidebar id="alpha-and-beta">
  <title>Альфа и Бета</title>
  <para>Термин  <firstterm>alpha</firstterm> обычно означает первую выпущенную версию,
    с помощью которой пользователи могут выполнить реальную работу и у которой есть
    все заявленная функциональность, но и известные ошибки. Основной задачей альфа-версии
    программного обеспечения является получение отзывов, что бы разработчики узнали,
    над чем еще нужно поработать. Следующий этап, <firstterm>бета-версия</firstterm>,
    означает, что все серьезные ошибки в программном обеспечении исправлены, но не 
    достаточно протестированы, чтобы удовлетворить условиям выпуска окончательной
    версии. Целью бета-версии программного обеспечения является или стать окончательной
    версией, при условии что ошибок не найдено, или предоставить программистам детальные
    отзывы, с тем, чтобы они быстро доработали программу до финальной версии.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Загрузки</title>

<para>Программное обеспечение должен быть доступно для загрузки в виде исходного кода в стандартных
форматах. Когда проект только начинается, двоичные (исполняемые) файлы не являются необходимыми,
кроме случаев, когда у программного обеспечения существуют настолько сложные требования к компиляции или 
зависимости, что просто заставить его заработать потребовало бы значительных усилий для большинства людей.
(Но если дело обстоит именно так, то проекту в любом случае будет очень нелегко привлечь разработчиков!)</para>

<para>Механизм распространения должен быть настолько же удобным, стандартным, и нетрудоемким насколько
это возможно. Если бы вы пытались вылечить болезнь, то вы не распространяли бы лекарство таким образом,
который требовал бы применения нестандартного размера шприца. Точно так же и программное обеспечение
должно соответствовать стандартным методам сборки и установки; чем больше оно отклоняется от стандартов,
тем больше потенциальные пользователи и разработчики будут сдаваться и уходить в замешательстве.</para>

<para>Это кажется очевидным, но многие проекты не потрудились стандартизировать свои операции по установке
почти до окончания игры, говоря самим себе, что они могут это сделать в любое время: <emphasis> "Мы уладим 
все это когда код будет близок к завершению." </emphasis> Чего они не понимают, так это того, что
откладывая скучную работу по доведению до ума процедур сборки и установки, они фактически увеличивают время на 
завершение кода&mdash; потому что они отпугивают разработчиков, которые, в ином случае,дополнили бы код.
Но самое коварство заключается в том, что они<emphasis> не знают </emphasis>, что они теряют всех этих
разработчиков, потому что этот процесс - накопление непримечательных событий: кто-то посещает веб-сайт,
загружает программное обеспечение, пытается его собрать, терпит неудачу, сдается и уходит. 
Узнает ли кто-нибудь когда-нибудь, что это случилось, кроме самого этого человека? Никто работающий над 
проектом не поймет, что чей-то интерес и добрая воля были тихо растрачены.</para>

<para>Скучная работа, хорошо оправдывающая себя, всегда должна быть выполнена на 
ранней стадии, а значительное понижение понятийного барьера при помощи хорошей подготовки
пакетов очень хорошо себя оправдывает.</para>

<para>Когда вы выпускаете пакет, доступный для скачивания, жизненно важно присвоить уникальный номер версиии
этому выпуску, чтобы люди могли сравнить два любых пакета и узнать какой из них заменяет другой.
Подробное обсуждение нумерования версий можно найти в <xref linkend="release-numbering"/>, а подробности
стандартизации процессов сборки и установки в <xref linkend="packaging"/><phrase output="printed">, оба в
<xref linkend="development-cycle"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Контроль версий и доступ к системе учета ошибок.</title>

<para>Скачивание исходных пакетов прекрасно подходит для тех, кто хочет просто установить и 
использовать программное обеспечение, но этого недостаточно для тех, кто хочет его отладить или добавить
новые возможности. Ночные версии кода могут помочь, но они все еще не являются достаточно разделенными 
на модули для бурно развивающегося сообщества разработчиков. Людям нужен доступ к последним версиям кода
в реальном времени, и средством обеспечения такого доступа является использование системы управления версиями.
Наличие анонимно доступных исходных кодов с контролируемыми версиями, это указание&mdash; и пользователям и 
разработчикам&mdash; на то, что проект позаботился о том, чтобы дать людям все что им нужно для учестия
в проекте. Если вы не можете предложить систему управления версиями сразу же, то сделайте пометку, указывающую
на то, что вы намерены вскоре ее настроить. Инфраструктура управления версиями подробно обсуждается в
<xref linkend="vc"/><phrase output="printed"> в <xref linkend="technical-infrastructure"/></phrase>.</para>

<para>Тоже самое каксается и проектной системы отслеживания ошибок. Важность системы отслеживания ошибок
заключается не только в ее полезности для разработчиков, но и в том, что она значит для тех, кто наблюдает
за проектом. Для многих людей, доступная база данных об ошибках является лучшим показателем того, что к 
проекту можно относиться серьезно. Более того, чем большее количество ошибок содержится в базе данных,
тем лучше выглядит проект. Это может показаться парадоксальным, но вспомните, что количество зарегистрированных
ошибок зависит от трех факторов: абсолютного числа ошибок, содержащихся в программном
обеспечении, числа пользователей, работающих с программным обеспечением и удобства, с которым
эти пользователи могут регистрировать эти ошибки. Из этих трех факторов два последних более
значимы, чем первый. Любое программное обеспечение достаточного объема и сложности, содержит
в высшей степени случайное число ошибок, ожидающих, чтобы их нашли. Настоящий вопрос в том,
насколько хорошо проект регистрирует и выставляет приоритеты этим ошибкам? Проект с большой
и хорошо поддерживаемой базой данных об ошибках (это значит, что реакция на ошибки своевременна,
дублирующиеся ошибки сведены к одной и т.д.), таким образом, производит лучшее впечатление, чем
проект совсем без базы данных об ошибках и с почти пустой базой данных.</para>

<para>Конечно, если ваш проект только начинается, то база данных об ошибках будет содержать очень мало
ошибок, и вы мало что можете с этим поделать. Но если страница статуса подчеркивает молодость
проекта, и если люди, смотрящие на базу данных об ошибках, могут увидеть, что большинство
записей было сделано недавно, они смогут на этом основании экстраполировать, что у проекта
уже есть соответсвующая <emphasis>норма</emphasis> записей, и они не будут чрезмерно встревожены
малым абсолютным количеством зарегистрированных ошибок.</para>

<para>Заметьте, что системы учета ошибок используются для слежения не только за ошибками в
программном обеспечении, но и для заявок на расширение функциональных возможностей, изменений
в документации, ожидающих реализации заданий и многого другого. Подробности работы с системой
учета ошибок описаны в <xref linkend="bug-tracker"/><phrase output="printed"> в
<xref linkend="technical-infrastructure"/></phrase>, так что здесь я не буду рассматривать ее здесь.
С точки зрения представления проекта важно просто <emphasis>иметь</emphasis> систему слежения за
ошибками и убедиться в том, что факт ее наличия отражен на главной странице проекта.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Каналы связи</title>

<para>Посетители обычно хотят знать, как добраться до людей, связанных с проектом. Предоставьте
адреса списков рассылки,  дискуссионных групп, и каналов IRC, и любых других форумов, где
можно добраться до других людей, связанных с этим программным обеспечением. Поясните, что вы
и другие авторы проекта подписаны на эти списки рассылки, таким образом, чтобы люди видели,
что есть обратной связи, которая дойдет до разработчиков. Ваше присутствие в списках не подразумевает
стремления ответить на все вопросы или реализовать все заявки на расширение функциональных возможностей.
В конечном счете, большинство пользователей в любом случае никогда не присоединится к форумам,
но они будут спокойны, зная, что они <emphasis>могут</emphasis>, если когда-нибудь им это понадобится.</para>

<para>На ранних стадиях проекта, нет никакой необходимости иметь отдельные форумы для пользователей
и разработчиков. Гораздо лучше сделать так, чтобы все люди, связанные с программным обеспечением
разговаривали вместе, в одной "комнате". Среди тех, кто с ранних стадий принимает участия в проекте,
различия между разработчиком и пользователем часто расплывчато, до тех пор, пока не настанет время их различать;
соотношение разработчиков к пользователям обычно намного выше на ранних стадиях проекта, чем на поздних.
Пока вы не можете быть уверены, что каждый заинтересовавшийся продуктом на ранней стадии - программист,
который хочет залезть внутрь программы, вы можете предположить, что они по крайней мере интересуются
последующими обсуждениями хода разработки и пониманием направлений развития проекта.</para>
   
<para>Так как эта глава только о том, как начать проект, то достаточно сказать, что эти
форумы для общения должны существовать. Позже, в <xref linkend="growth"/><phrase output="printed"> в
<xref linkend="communications"/></phrase>, мы рассмотрим где и как устанавливать такие форумы,
случаи, в которых они могут нуждаться в модерировании и другом обслуживании, и как отделить
форумы для разработчиков от форумов для пользователей, когда придет время, избежав создания
непреодолимой пропасти.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Руководство разработчика</title>

<para>Если кто-то рассматривает возможность поучавствовать в  проекте, он будет искать руководство
разработчика. Руководство разработчика является не столько техническим, сколько социальным: оно объясняет,
как разработчики взаимодействуют с друг другом и с пользователями, и,в конечном счете, как все делать.</para>

<para>Эта тема подробно рассматривается в
<xref linkend="written-rules"/><phrase output="printed"> в
<xref linkend="social-infrastructure"/></phrase>, но основнымми элементами
руководства разработчика являются:

<itemizedlist>
  <listitem><para>указатели на форумы для взаимодействия с другими
            разработчиками</para> 
  </listitem>
  <listitem><para>инструкции о том, как сообщать об ошибках и присылать
            исправления</para>
  </listitem>
  <listitem><para>некоторые советы по тому,  <emphasis>как</emphasis>
            обычно ведется разработка &mdash; является ли проект
            добровольным диктаторством, демократией, или чем-нибудь
            другим</para>
  </listitem>
</itemizedlist>

Между прочим, "диктатура" не несет никакого отрицательного смыслового оттенка. Это совершенно нормально
работать в режиме тирании, где у одного определенного разработчика есть право вето на любые изменения.
Много успешных проектов работают в таком режиме. Важная вещь - то, что проект идет этим путем
и говорит об этом. Тирания, стремящаяся казаться демократией, отпугнет людей; тирания, которая говорит,
что это - тирания, будет чувствовать себя прекрасно, пока тиран компетентен и ему доверяют.</para>
  
<para>Смотрите <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
как пример очень досконального руководства разработчика или
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> как 
более свободного руководства, которое больше сосредоточено на направлении и духе участия, и 
меньше на технических тонкостях.</para>

<para>Проблема предоставления программисту введения в программный проект
отдельно обсуждается в <xref
linkend="developer-documentation"/><phrase output="printed">
далее в жтой главе</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Документация</title>

<para>Документация жизненно необходима. Должно быть хоть <emphasis>что-нибудь</emphasis>, что можно
прочитать, даже если оно является элементарным и неполным. Это попадает прямо в категорию
"тяжелая работа", упомянутую ранее, и часто является первой областью, в которой погибают новые проекты
с открытым кодом. Выработка программного заявления и списока функций, выбор лицензии, обобщение статуса
разработки &mdash; все это относительно небольшие задачи, которые могут быть окончательно завершены,
и к которым нет нужды возвращаться, завершив их один раз. Документация, с другой стороны, в 
действительности никогда не может быть закончена, что может являетьс одной из причин того, что люди
иногда насовсем откладывают эту задачу.</para>

<para>Самая коварная вещь, это то, что польза документации для тех, кто ее пишет, обратно пропорциональна
пользе для тех, кто будет ее читать. Самая важная документация для начинающих пользователей - это основы:
как быстро установить программу, краткий обзор того, как она работает, возможно, некоторое руководство
по выполнению основных операций. Все это как раз является теми вещами, которые  <emphasis>авторы</emphasis>
документации знают слишком хорошо&mdash; настолько хорошо, что для них может быть сложно увидеть 
эти вещи с точки зрения читателя, и обстоятельно объяснить те шаги, которые (для авторов) кажутся
настолько очевидными, что не достойны даже упоминания.</para>

<para>Нет никакого волшебного решения этой проблемы. Кто-то просто должен сесть и написать текст,
а затем следовать ему, как типичный новый пользователь, чтобы проверить его качество. Используйте простой,
легкий в редактировании формат, такой как HTML, простой текст, Texinfo, или какой-то вариант XML&mdash; 
что-нибудь, что удобно для легковесных, быстрых, моментальных исправлений. Это нужно не только для того,
чтобы исключить любые лишние трудности, которые могли бы препятствовать первоначальным авторам
вносить последующие изменения, но также и для тех, кто присоединяется к проекту позже и хочет
работать над документацией.</para>

<para>Один способ гарантировать наличие начальной документации по основным моментам, это заранее
ограничить область ее применения. Таким образом, ее написание, по крайней мере, не будет
видеться как бесконечная задача. Хорошее эмпирическое правило заключается в том, что она должна
соответствовать следующим минимальным требованиям:</para>

<itemizedlist>
  <listitem><para>Четко объясните читателям какой уровень технических
            знаний от них ожидается.</para>
  </listitem>
  <listitem><para>Ясно и точно опишите как установить программну, и где-нибудь 
      в начале документа, укажите пользователю, как выполнить своего рода
      диагностический тест или простую операцию, чтобы убедиться, что они
      все настроили правильно. Документация по запуску в некоторой степени
      является более важной, чем документация по использованию. Чем больше 
      усилий кто-нибудь затратил на установку и начало работы с программой,
      тем настойчивей он будет выяснять, как работают более сложные функциональные
      возможности, которые задокументированны не так хорошо. Когда люди отказываются,
      от программы, они отказываются на ранних этапах; поэтому, самые ранние стадии,
      такие как установка, больше всего нуждаются в поддержке.</para>
  </listitem>
  <listitem><para>Предоставьте в стиле обучающей методики пример того,
      как выполнить одну частоиспользуемую операцию. Очевидно, что множество
      примеров для множества задач было бы еще лучше, но если время 
      ограниченно, выберите одну задачу и тщательно пройдитесь по ней.
      Как только кто-нибудь увидит, что программа <emphasis>может</emphasis> быть
      использованна для одного действия, они начнут изучать, что еще
      она может делать сама по себе&mdash;и, если вам повезет, станут
      дополнять документацию сами. Что приводит нас к следующему пункту...</para>
  </listitem>
  <listitem><para>Пометьте те области, где документация, как вы знаете, 
      незакончена. Показывая читателям, что вы беспокоитесь о ее неточностях,
      вы приравниваете себя к их точке зрения. Ваше сопереживание
      убеждает их, что они не столкнуться с сопротивлением, убеждая
      проект в важности какого-либо аспекта. Эти пометки не должны
      представлять обещания заполнить недостающие части к какой-то
      указанной дате &mdash; вполне законно считать их открытыми
      запросами о помощи к добровольцам.</para>
  </listitem>
</itemizedlist>

<para>Последний пункт, на самом деле, имеет более широкое значение, и может быть применен ко всему проекту,
а не только к документации. Точный учет известных недостатков, это норма в мире открытого исходного кода.
Вам не нужно преувеличивать недостатки проекта, просто указать на них, тщательно и беспристрастно,
когда этого требует контекст (или в документации, или в базе данных об ошибках, или в обсуждении в списке
рассылки). Никто не будет рассматривать это ни как пораженческое настроение со стороны проекта, ни как стремление,
решить проблему к определенной дате, если только проект явно не заявит о подобной цели. Так как каждый, кто использует
программное обеспечение, сам по себе обнаружит неточности, для них намного лучше быть психологически 
подготовленными&mdash; тогда будет похоже на то, что проект обладает точным знанием того, как он себя чувствует.</para>

<sidebar id="starting-a-faq">
  <title>Ведение FAQ</title>

  <para><firstterm>FAQ</firstterm> (документ "Часто задаваемые вопросы") может быть одной из лучших инвестиций,
которую осуществляет проект, в терминах обратной отдачи при обучении. Часто задаваемые вопросы очень точно настроены
на те вопросы, которые фактически задают пользователи и разработчики &mdash; в противоположность вопросам, которые
как вы <emphasis>ожидали</emphasis> они зададут &mdash; и поэтому, хорошо поддерживаемый FAQ предназначен давать тем,
кто его читает, именно то, что они ищут. FAQ часто является самым первым местом, куда заглядывает пользователи, когда
они сталкиваются с проблемой, часто даже предпочитая его официальному руководству, и, вероятно, это то документ 
в вашем проекте, на который вероятнее всего есть ссылки с других сайтов.</para>

  <para>К сожалению, вы не можете создать FAQ с самого начала проекта. Хорошие FAQ не пишутся, они вырастают.
Они по определению являются документами реагирующими, развивающимися со временем, в ответ на каждодневное
использование людьми программного обеспечения. Из-зи того, что невозможно точно предвидеть вопросы, которые
люди будут задавать, невозможно сесть и написать полезный FAQ с нуля.</para>

  <para>Таким образом, не растрачивайте впустую свое время, пытаясь это сделать. Вы можете, однако, найти полезным,
создать почти пустой шаблон FAQ, так, чтобы у людей было очевидное место, куда добавлять вопросы и ответы, после
того как проект заработает. На этой стадии, самым важным свойством является не полнота, а соответствие: если к
FAQ легко что-то добавить, люди будут добавлять. (Правильная поддержка FAQ является нетривиальной и интригующей 
задачей, и подробнее обсуждается в <xref linkend="faq-manager"/><phrase output="printed"> в <xref linkend="managing-volunteers"/></phrase>.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Доступность документации</title>

<para>Документация должна быть доступна в двух местах: в интернете (напрямую с сайта), <emphasis>и</emphasis> в загружаемом
пакете программного обеспечения (см. <xref linkend="packaging"/><phrase output="printed"> в <xref linkend="development-cycle"/></phrase>).
Она должна быть в интернете в виде просматриваемого списка, потому что люди часто читают документацию <emphasis>до того</emphasis> 
как скачивают программу первый раз, рассматривая ее, как подсказку, чтобы решить стоит ли ее загружать вообще. Но она 
также должна сопровождать программу, по принципу того, что загружаемый пакет должен предоставлять (т.е. делать локально
доступным) все что нужно человеку для использования пакета.</para>

<para>Для документации в интернете, убедитесь, что присутствует ссылка, которая ведет к <emphasis>полной</emphasis> 
документации на одной HTML странице (сделайте пометку "единая" или "все-в-одном" или "одна большая страница"
рядом со ссылкой, чтобы люди знали, что загрузка может занять некоторое время). Это полезно, потому что люди часто
хотят поискать определенное слово или фразу по всей документации. В общем, они уже знают, что они ищут; они просто
не помнят в какой секции это оно находится. Для таких людей, не ничего более разочаровывающего, чем увидеть одну
HTML страницу для оглавления, затем другую для вступления, затем другую для для инструкций по установке и т.д.
Когда страницы разбиты таким образом, функция поиска в их браузере бесполезна. Стиль раздельных страниц полезен
для тех, кто знает, какая секция им нужна или тем, кто хочет прочитать последовательно всю документацию от начала
до конца. Но это <emphasis>не</emphasis> самый распространенный способ, которым используют документацию.
Гораздо чаще, кто-либо, знакомый с основами программы возвращается, чтобы поискать отпределенное слово или фразу.
Отказать им в предоставлении единого, доступного для поиска документа, сделает их жизнь только тяжелее.</para>

</sect3>

<sect3 id="developer-documentation">
<title>Документация разработчика</title>

<para>Документация разработчика пишется для того, чтобы помочь программистам понять код, и чтобы они
могли исправлять и расширять его. Она несколько отличается от <emphasis>руководства разработчика</emphasis>,
обсуждавшегося ранее, которое более социальное, чем техническое. Руководство разработчика говорит программистам,
как взаимодействовать друг с другом; документация разработчика говорит как взаимодействовать с самим кодом.
Оба вида документов часто складываются вместе в один документ для удобства (как, например, в <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> указанном ранее), но это не обязательно.</para>

<para>Хотя документация разработчика может быть очень полезной, нет никакой причины задерживать выпуск продукта,
чтобы ее доделать. До тех пор, пока изначальные авторы документации могут (и хотят) отвечать на вопросы о
коде, этого достаточно для начала. Фактически, необходимость отвечать на те же самые вопросы снова и снова
является самой частой причиной для написания документации. Но даже до того, как она написана, определенным
участникам проекта удается пробираться через код. Сила, заставляющая людей тратить время, изучая основы кода,
это то, что код делает для них что-то полезное. Если у людей есть такая вера, они найдут время чтобы разобраться;
если у них этой веры нет, никакое количество документации для разработчика их не привлечет и не удержит.</para>

<para>Таким образом, если у вас есть время, чтобы написать документацию только для одной целевой аудитории, 
напишите ее для пользователей. Вся пользовательская документация - в действительности - также является и документацией 
разработчика; любой программист, который собирается работать над определенной частью программы, должен знать с и то,
как его использовать. Позже, когда вы увидите, что программисты задают одни и те же вопросы снова и снова,
выделите время, чтобы написать отдельную документацию специально для них.</para>

<para>Некоторые проекты используют wiki как начальную документацию, или даже как основную документацию. По моему
опыту, в действительности это работает только если wiki активно редактируется несколькими людьми, которые
договорились, как документация должна быть организована и какой "голос" должен у нее быть. Смотрите
<xref linkend="wikis"/><phrase output="printed"> в
<xref linkend="technical-infrastructure"/></phrase> подробнее.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<title>Примеры выходных данных и снимки экранов</title>

<para>Если проект включает в себя графический интерфейс пользователя или если он выдает графические или 
любые другие видимые данные, разместите несколько примеров на сайте проекта. В случае интерфейса, это
снимки экрана; для выходных данных это могут быть снимки экрана или просто файлы. Все они работают на
человеческое желание получения немедленного вознаграждения: единственный снимок экрана может быть более 
убедителен, чем множество абзацев описания и болтовни в листе рассылки, потому что снимок экрана
является неопровержимым доказательством того, что программа <emphasis>работает</emphasis>. В ней может
быть много ошибок, ее может быть трудно установить, она може быть не полностью документирована, но снимки
экрана все еще являются доказательством того, что если кто-либо приложит достаточно усилий, то он сможет
заставить ее работать.</para>

<sidebar id="screenshots">
  <title>Снимки экрана</title>
  <para>Так как снимки экрана могут вас обескуражить, пока вы на самом деле не сделаете 
    несколько штук, вот основные советы, как их делать. Используя Gimp
  (<ulink url="http://www.gimp.org/"/>), откройте
  <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
  выберите <guimenuitem>Single&nbsp;Window</guimenuitem> или
  <guimenuitem>Whole&nbsp;Screen</guimenuitem>, затем щелкните
  <guimenuitem>OK</guimenuitem>. Теперь, следующий щелчок мыши
  сделает снимок окна или экрана, по которому вы щелкнули в виде
  картинки в Gimp. Обрежте и измените размер картинки по необходимости,
  используя инструкции в <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
</sidebar>
  
</sect2>

<para>Существует множество других вещей, которые вы можете разместить на сайте проекта, если у вас есть время,
или если по той или иной причине они являются достаточно существенными: страница новостей, страница хронологии проекта,
страница ссылок по теме, возможность поиска по сайту, ссылка для добровольных пожертвований, и т.д. Ничего из этого
не является необходимым в самом начале, но помните об этом для будущего.</para>

<sect2 id="starting-with-canned-hosting">
<title>Постоянный хостинг</title>

<para>Существует несколько сайтов, которые предоставляют бесплатный хостинг и инфраструктуру для проектов с открытым
кодом: место для сайта, система контроля версий, система учета ошибок, место для загрузки файлов, чат, регулярные
резервные копии, и т.д. Детали изменяются от сайта к сайту, но самый основной набор услуг предлагаются на всех.
При использовании одного из этих сайтов вы бесплатно получаете довольно многое; то, что вы отдаете -  как очевидно - это
всесторонний контроль пользователя. Службы хостинга решает, какое программное обеспечение размещено на сайте и может 
управлять или, по крайней мере, влиять на внешний вид и наполнение веб-страниц проекта.</para>

<para>Смотрите
<xref linkend="canned-hosting"/><phrase output="printed"> в
<xref linkend="technical-infrastructure"/></phrase> где более детально
обсуждаутся преимущества и недостатки постоянного хостинга и приводится
список сайтов, которые его предлагают.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Выбор лицензии и ее применение</title>

<para>Этот раздел задуман как очень общее, очень поверхностное руководство по выбору лицензии.
Прочитайте  <xref linkend="legal"/> для детального понимания законной силы различных лицензий,
и того, как выбранная вами лицензия может затронуть возможности людей совместить ваше программное
обеспечение с другими свободными программами.</para>

<para>Существует огромное множество лицензий на свободное программное обеспечение на ваш выбор.
Большинство из них нет необходимости здесь рассматривать, так как они написаны для удовлетворения
определенных юридических нужд некоторых корпораций или людей, и будут неподходящими для вашего
проекта. Мы ограничимся только самыми частоиспользуемыми лицензиями; в большинстве случаев
вы захотите выбрать одну из них.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>Лицензии "Делай что угодно"</title>

<para>Если вы спокойно относитесь к тому, что код вашего проекта потенциально будет использован
в проприетарном программном обеспечении, тогда используйте лицензию семейства<firstterm>MIT/X</firstterm>.
Она самая простая из нескольких минималистических лицензий, которая делает чуть больше, чем просто
утверждает номинальное авторское право (в действительности не запрещая копирования) и указывает на
то, что код поставляется без гарантии. Смотрите <xref linkend="license-choosing-mit-x"/> 
для более подробной информации.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>GPL</title>

<para>Если вы не хотите, чтобы ваш код был использован в проприетарных программах, используйте 
Открытую лицензию GNU. (<ulink url="http://www.gnu.org/licenses/gpl.html"/>).  Открытая лицензия (GPL),
возможно, является самой признанной в мире свободной лицензией на программы. Это само по себе большое
преимущество, так как многие потенциальные пользователи и участники будут с ней знакомы, и, таким образом,
не будут тратить дополнительное время на чтение и понимание вашей лицензии. Смотрите
<xref linkend="license-choosing-gpl"/><phrase output="printed">
в <xref linkend="legal"/></phrase> для подробного описания.</para>

<sidebar>
<para>Если пользователи работают с вашим кодом в первую очередь через сеть&mdash;то есть программа является
частью сетевой службы &mdash; тогда рассмотрите возможность использования <firstterm>GNU Affero GPL</firstterm>вместо
GNU. Смотрите <xref linkend="gnu-affero-gpl"/><phrase output="printed"> в <xref linkend="legal"/></phrase> для подробного
описания.</para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Как применять лицензию к вашему программному обеспечению</title>

<para>Как только вы выбрали лицензию, вы должны заявить об этом на главной странице сайта проекта. Здень не нужно
приводить полный текст лицензии; дайте только название лицензии и привяжите к нему ссылку на полный текст
лицензии на другой странице.</para>

<para>Это укажет людям на то, под каким типом лицензии вы <emphasis>намерены</emphasis> выпустить программное обеспечение,
но этого не достаточно для соблюдения законных прав. Для этого, сама программа должна содержать лицензию. Обычным способом
это сделать является помещение полного текста лицензии в файл с названием <filename>COPYING</filename> (или <filename>LICENSE</filename>),
и наличие маленькой метки в начале каждого файла исходного кода, указывающей на дату, владельца прав и лицензию, и информирующего,
где найти полный текст лицензии.>

<para>Существует множество вариантов этого шаблона, так что здесь мы рассмотрим только один пример. Открытая лицензия GNU
предписывает поместить следующую метку в начале каждого файла исходного кода:</para>

<screen>
Copyright (C) &lt;год&gt;  &lt;имя автора&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;
</screen>

<para>Здесь специально не указывается, что копия лицензии, которую вы получили вместе с программой
находится в файле <filename>COPYING</filename>, но обычно ее помещают именно туда. (Вы можете изменить
приведенную выше метку, чтобы прямо указать на это.) Этот шаблон, также предоставляет географический
адрес, по которому можно запросить копию лицензии. Другой часто используемый способ заключается в 
размещении на веб-странице ссылки на лицензию. Решите сами и ссылайтесь на то место, которое вы считаете
самым надежным хранилищем копии лицензии, и которое может находиться на сайте вашего проекта. 
В общем, метка, которую вы помещаете в каждый файл с исходным кодом, не обязательно должна выглядеть точно
также как указанная выше, пока она начинается с той же информации об обладателе авторского права и даты,
указывает имя лицензии и четко определяет, где можно увидеть полную лицензию.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Задавая тон</title>

<para>Пока мы описали одноразовые задачи, которые вы решаете во время подготовки проекта: выбор лицензии,
размещение начального вебсайта, и т.д. Но самые важные аспекты начинания нового проекта являются динамическими.
Выбор адреса списка рассылки прост; обеспечение того, что разговоры в листе рассылки остаются в границах темы
и продуктивны является совсем другим вопросом. Если проект становится открытым после нескольких лет закрытой,
внутренней разработки, его процессы разработки изменятся и вам будет нужно подготовить уже существующих
разработчиков к этому изменению.</para>

<para>Первые шаги &mdash самые сложные, потому что еще не определены предварительные условия и ожидаемое
в будущем поведение. Стабильность внутри проекта создается не с помощью формальных соглашений, а с помощью
принятой всеми и трудноопределимой коллективной мудрости, которая формируется со временем. Часто встречаются
и записанные правила, но они являются, в сущности, дистилляцией нематериальных, неизменно присутствующих соглашений,
которые направляют проект на самом деле. Записанные правила не столько определяют культуру проекта, сколько
описывают ее, и даже описывают только приблизительно.</para>

<para>Существует несколько причин того, что работа строится именно так. Рост и высокая текучесть кадров
не столь разрушительны для накопления поведенческих норм, как можно было бы подумать. Пока изменения 
не происходят <emphasis>слишком</emphasis> быстро, для вновь прибывших есть время узнать, как все сделано,
и после того, как они  узнают, они сами будут помогать укреплению этого стиля. Посмотрите, как детские песни
переживают столетия. И сегодня есть дети, напевающие примерно те же самые рифмы, что и дети сотни лет назад,
даже при том, что сейчас нет в живых ни одного ребенка, жившего тогда. Младшие дети слышат песни, спетые старшими,
и когда они становятся старшими, они в свою очередь, споют их перед другими младшими. Конечно, дети не участвуют в сознательной
программе по передаче, но причина, по которой песни выживают, тем не менее, в том, что они передаются регулярно и многократно.
Временные рамки проектов свободного программного обеспечения не могут быть измерены столетиями (мы еще об этом не знаем),
но движущие силы передачи во многом аналогичны. Степень текучести кадров, однако, выше и должна быть компенсирована 
за счет более активных и тщательно спланированных усилий по передаче.</para>

<para>Это усилие поддерживается тем фактом, что, обычно, люди склонны к ожиданию и поиску социальных норм. Так уж
устроены люди. В любой группе, объединенной общим делом, люди, присоединяющиеся к ней, инстинктивно ищут модели
поведения, которые сделают их частью группы. Целью создания прецедентов в ранний период является установление
этих "внутри-групповых" моделей поведения, которые будут полезны для проекта; установленные однажды, они будут
в значительной степени жить сами по себе.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<para>Далее следует несколько конкретных примеров того, что вы можете сделать, чтобы создать хорошие прецеденты.
Они не представляют собой исчерпывающий список, это просто иллюстрация мысли о том, что установление духа
сотрудничества на ранней стадии чрезвычайно помогает проекту. Физически, каждый разработчик может работать в комнате сам
по себе в одиночестве, но вы можете многое сделать, чтобы дать им <emphasis>почувствовать</emphasis>, будто все они работают вместе
в одной комнате. Чем больше они будут себя так чувствовать, тем больше времени они захотят посвятить проекту. Я выбрал именно эти примеры,
потому что они всплыли на проекте Subversion (<ulink url="http://subversion.tigris.org/"/>), в котором я учавствовал и
который наблюдал с самого начала. Но они верны не только для Subversion; подобные ситуации возникнут на большинстве открытых проектов, и
они должны быть рассмотрены как возможность встать с той ноги.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Избегайте закрытых обсуждений</title>

<para>Даже после того, как вы сделали проект общим, вы и другие основатели, будете частенько хотеть, разрешить трудные вопросы
в процессе закрытого обсуждения в своем внутреннем круге. Это особенно верно в начале проекта, когда нужно принять очень много 
важных решений, и, обычно, мало добровольцев достаточно квалифицированы, чтобы их принять. Все очевидные недостатки 
обсуждения с помощью публичного листа рассылки будут ясно вырисовываться перед вами: задержка,как неотъемлемая часть разговоров
по электронной почте, потребность оставить достаточное количество времени для согласования, споры с наивными добровольцами,
которые думают, что понимают все проблемы, но на самом деле не понимают (такие есть в каждом проекте; иногда
это лучшие программисты будущего года, иногда они остаются наивными навсегда), кто-то, кто не может понять, почему вы хотите решить
только задачу X, в то время как очевидно, что это подмножество большей проблемы Y и так далее. Искушение принять решения за закрытыми
дверьми и представить их как <foreignphrase> faits accomplis (свершившиеся факты) </foreignphrase>, или, по крайней мере, как прямые
рекомендации объединенного и влиятельного большинства, вместо всего этого, будет очень большим. 

<para>Не делайте этого</para>

<para>Какими медленными и тягостными ни были публичные обсуждения, они почти всегда предпочтительнее в конечном итоге. Принятие важных решений
частным образом похоже на распыление репеллента от участников на вашем проекте. Никакой серьезный доброволец не захотел бы долгое время слоняться
поблизости в окружении, где тайный совет принимает все важные решения. Кроме того, у общественного обсуждения есть благотворные побочные эффекты,
которые распространятся далеко за рамки любого эфемерного технического вопроса, который был спорным моментом:

<itemizedlist>
  <listitem>
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be tracking
        silently, gleaning information about the software.</para>
  </listitem>
  <listitem>
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
  </listitem>
  <listitem>
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than one would intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>

<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>

<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>

<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion, and there's
no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Nip Rudeness in the Bud</title>

<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack <emphasis>first</emphasis>, as a
separate issue unto itself, and only afterward move on to the
technical content.</para>

<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>

    <blockquote>
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>

      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
    </blockquote>

<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>

<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practice Conspicuous Code Review</title>

<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>

<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>

<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>

<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>

<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>

<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>

<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>

<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>

<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="money"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Announcing</title>

<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freshmeat.net/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freshmeat is the place
everyone watches for new project announcements.  You only have to
catch a few eyes there for news of your project to spread by word of
mouth.</para>

<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>

<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>

<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>

<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>

<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>

<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>

<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

