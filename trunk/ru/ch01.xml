<chapter id="introduction">

<title>Введение</title>

<simplesect>

<para>Большенство проектов с открытыми исходным кодом гибнут.(оказываются неудачными(проваливаются)).</para>

<para>Мы не склонны слышать слишком часто о провалах. Только успешные проекты
привлекают всеобщее внимание, но общее количество свободных проектов настолько 
велико<footnote><para>На SourceForge.net, одном из известных провайдеров хостинга для 
таких проектов, их было зарегестрировано 79,225, по данным от середины Апреля 2004 года.
И это даже не близко к общему числу свободных проектов в интернете, а лишь количество 
тех что избрали своим хостингом SourceForge</para></footnote>, что даже несмотря на 
низкий процет выживаемости, все еще остается внушительное число заметных проектов.
Также мы не слышим о провалах, потому что провал это не событие. Нет такого
единственного момента, когда проект вдруг внезапно перестает быть жизнеспособным;
по просту люди начинают потихоньку расходится, перестают над ним работать.
Бывают случаи, когда было внесено последнее изменение, но люди сделавшие
его зачастую не подозревали об этом на тот момент. Нет даже четкого 
определения когда можно начинать считать проект потухшим. Тогда ли это, когда над
проектом никто активно не работал на протяжении шести месяцев? Или же когда,
количество пользователей перестает расти, не успев перевалить за количество
разработчиков? А что если разработчики одного проекта забросили его после того
как обнаружили, что все это время они дублировали работу другого проекта &mdash; 
и что если они решили присоединиться к тому другому проекту, чтобы расширить его, 
вложив в него плоды своего прежнего труда?
Исчез ли прежний проект на совсем или просто поменял место жительства?
</para>


<para>Из-за этих сложностей, становится невозможно определить точное соотношение числа
успехов к числу провалов(процент, пропорция, отношение).
Но чуть ли не смешная статистика за десятилетнюю историю свободного ПО, 
немного копания на SourceForge.net и несколько поисков в гугле, все приводит
к одному и тому же выводу: процент провалов черезвычайнно велик, что-то
около(в пределах) 90&ndash;95 процентов. Это число подпрыгнет еще выше если учитывать
выжевшие, но дисфункциональные проекты: такие, которые вроде бы и производят рабочий
 код, но и не самые благоприятные места для существования разработчиков, или проекты 
не совершающие прогресса достаточно расторопно или настолько стабильно(надежно, регулярно), как могли бы.
</para>

<para>Эта книга посвящена тому как избежать провала.  В ней описано не только
как нужно правильно делать что-либо, но и как <emphasis>не</emphasis> делать, так чтобы
 вы научились распознавать и разрешать проблемы на раннем этапе их появления. Я надеюсь, что после прочтения этой книги, вы обзаведетесь
 большим арсеналом методов, которые позволят вам не только не наступать на наиболее частые 
 грабли разработки свободного ПО,  но и также, как считаться с ростом и поддержкой успешного открытого проекта. Успех проекта это не игра со счетом в ничью, и эта книга вовсе не о том как выйграть 
или выйти вперед в конкуренции. Наоборот, важной частью ведения открытого проекта
 является крепкое сотруднечество с остальными, связанными или похожими(!) проектами.
В конечном счете, каждый успешный проект делает вклад в благополучие всецелого, мирового фонда свободного програмного обеспечения.   
</para>

</simplesect>

<simplesect>

<para>
Было бы заманчивым(tempting) сказать, что причины неудач свободного ПО те же что и у коммерческих проектов. 
Разработка свободного ПО не означает отсутствие таких проблем, как 
завышенные требования, расплывчатые спецификации, неэффективное управление кадрами и других сложностнй давно известных индустрии 
разработки ПО.
 На эти темы уже написаны горы литературы и, в своей книге, я постараюсь избежать повторений ранее известного.
Вместо этого, я хочу 
описать проблемы характерые только для свободного ПО. 
Когда свободный програмный проект начинает рушиться, это часто потому что разработчики 
(или мененджеры) не учли уникальных проблем открытого програмного обеспечения, даже будучи
 основательно подготовленными к более известным проблеммам присущим коммерческому ПО. 
</para>

<para>Одной из наиболее распрастраненных ошибок является слишком большие надежды возлагаемые
на достоинства открытого ПО. Использование открытой лицензии не гарантирует, что орды активных
разработчиков неожиданно изволят  потратить свое драгоценное время на ваш проект, не решить 
проблем затрудненного проекта и простым открытием его исходников. Как раз наоборот: раскрытие проекта
может принести целую кучу дополнительных сложностей, и дороже стоить, с расчетом на короткий срок, 
чем было бы, оставайся он закрытым. Раскрыть проект означает переорганизовать код так, чтобы он был 
понятен новым разработчикам, незнакомым с вашим проектом, создать официальный веб сайт проекта и настроить 
списки рассылки(email lists), а также нередко впервые взяться за написание документации. Все это 
много работы. И если и появятся заинтересованные разработчики, еще к этому добавится и бремя отвечать на
кучи их вопросов, прежде чем от них будем какая-то польза от их присутствия.
Как выразился Jamie Zawinski о ранних турдных временах проекта Mozilla:
</para>

    <blockquote>
      <para><emphasis>Концепция свободного ПО и вправду работает, но не является лекарством от всех болезней. Если здесь и есть слово предосторожности, лишь можно сказать что нельзя просто взять чахнущий проект, присыпать его волшебной пылью "открытого ПО" и по волшебству разрешить все проблемы. Програмное обеспечение трудно. Проблемы(issues) не так просты.  </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

	
<para>
Также распространённой ошибкой является экономия на презентации и комплектации, наивно полагая 
что это всегда можно оставить на потом, уже задолго после начала проекта. Презентация и комплектация
заключают в себе широкий круг задач, посвященных теме упростить вступление в проект потенциальным 
разработчикам.
Сделать проект более привлекательным можно при помощи написания руководств для пользователей, 
документации разработчикам, созданием сайта проекта содержащего информацию для новичков, насколько 
возможно автоматизировать процессы компиляции установки и т.д.
Многие программисты к сожалению считают это второстепенной задачей после написания кода.
Есть несколько причин почему. Во первых, это может показаться трудной работой, потому что 
преимущества от этого заметны(ощутимы) лишь тем, кто меньше всего знаком с проектом и наоборот. 
В конце концов, людям написавшим код не нужна никакая комплектация.
Им уже известно как устанавливать, администрировать и использовать их 
собственное ПО. Во-вторых, умения необходимые для того чтобы завершить презентацию и комплектацию,
далеко отличны от тех что нужны для написания кода.
Люди склонны концентрироваться на том, что они лучше знают, даже
если немного времени проведенного над тем, что им кажется менее важным, помогло бы проекту гораздо больше.

В главе 
<xref
linkend="getting-started"/>, презентация и комплектация обсуждаются в подробностях и объясняется почему так важно чтобы они были приоритетом
с самого начала проекта. 

</para>


<para>
Следующим идет заблуждение, что свободному проекту нужно мало либо не нужно 
совсем никакого руководства, или наоборот, что теже принципы управления, используемые
для разработки впределах коммерческой организации, могут быть применены с тем же 
успехом и в открытом проекте. Управление внутри свободного проекта не всегда
так уж заметно, но в успешных проектах, оно обычно происходит за сценой
в той или иной форме. Достаточно небольшого мысленого эксперимента, чтобы увидеть почему.
Типичный свободный проект состоит из произвольного набора программистов&mdash;что уже заведомо
непредубежденная группа людей&mdash;, скорее всего незнакомых лично друг с другом,
каждый из которых, возможно преследует собственные личные цели в работе над проектом.
Представьте себе чтобы произошло с такой группой людей <emphasis>безо всякого</emphasis> руководства.
Если только не чудо, они бы претерпели крах либо разошлась кто куда довольно быстро. 
Дела не будут вестись сами собой, насколько нам того бы ни хотелось.
Но руководство в открытом проекте, даже будучи активным, зачастую лишь информотивно, неуловимо и неброско.
Единственное, что держит группу разработчиков вместе так это их раздельное
убеждение, что они могут достигнуть большего согласованной группой, нежели по отдельности.
Таким образом целью руководства, по большей мере является, поддерживать это
убеждение, устанавливая стандарты коммуникации, следя чтобы полезные разработчики <emphasis>не</emphasis>
оказывались изолироваными вследствии личных особенностей их характеров, и вообщем просто делая 
проект таким местом, куда бы хотелось возвращаться снова и снова. Конкретные способы достижения
этого и рассмотрены на протяжении всего остатка этой книги.
</para>


<para>
Наконец, существует общая категория проблем, которые можно классифицировать
как "ошибки культурного значения"(навигации). Лет десять назад или даже
пять, было бы преждевременно говорить о всемерной культуре свободного програмного 
обеспечения, но не теперь. Постепенно возникла значительная культура 
свободного ПО, и даже не будучи единой и монолитной, она все еще имеет единый общий 
фундамент(!core) и по меньшей мере настолько же склонна к внутренним разногласиям и партийным расколам как и любая
географически основанная(привязанная) культура.
Большинство успешных открытых проектов проявляют кое-что или все из этих фундаментальных
характеристик. Они вознаграждают определенные типы поведений и наказуют другие;
создают атмосферу, которая поощряет внеплановое участие, иногда в ущерб
центральной координации; у них есть понятия грубости и вежливости, которые 
могут значительно разниться с общепринятыми где-либо еще. И важнее всего, 
долгосрочные учасники усвоили основы этих неписанных(+) стандартов и 
пришли к взаимному единодушию о моральных принципах, которые следует ожидать от 
остальных учасников. Безуспешные проекты обычно,хотя и не намеренно, отклоняются в 
значительной степени от этих фундаментальных стандартов, и зачастую не имеют 
единогласного соглашения о том, что же представляет собой допустимое поведение.
Это означает, что когда возникают проблемы, ситуация может быстро ухудшиться, из-за что
учасники не обладают запасом общекультурных знаний(рефлексов) на которые бы можно было положиться в разрешении
сложностей.
</para>

<para>
Эта книга практическое руководство, а не курс антропологии или истории.
Тем не менее, понимание истоков современной культуры свободного ПО необходимо,
чтобы подкрепить любой практический совет. Человек, который понимает эту культуру,
пойдет далеко и широко в мире свободного ПО, встречая на своем пути местные
различия в обычаях и диалекте, и не смотря на это быть способным быстро и без
проблем втянуться в любой проект. Для контраста, человек, который эту культуру не
усвоил, найдет для себя процесс организации или участия в проекте сложным и полным
сюрпризов.
Так как количество людей разрабатывающих свободное ПО все еще растет
скачками и рывками, многие из них находятся в этой последней категории&mdash;
это по большинству культура недавних имигрантов и будет продолжать оставаться таковой
некоторое время. Если вы считаете себя одним из них, следующий раздел послужит
вам уроком истории и подготовит к дальнейшим дискуссиям, которые вы встретите позже, 
как в этой книге, так и в интернете. (С другой стороны, если вы уже работали над 
свободным проектом достаточно долго, вам уже наверно известна большая часть истории,
и вы можете пропустить следующий раздел.)
</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>История</title>

<para>
Обмен програмным обеспечением существовал столько же долго сколько и
сами програмы. В первые дни компьютеров, производители считали, что 
конкурентноспособные преимущества главным образом быть могут лишь извлечены 
от совершенствования аппаратных средств и следовательно не относились(уделяли
внимания) к программному обеспечению как к корпоротивному имуществу. 
Множество пользователей тех первых машин были учеными или техниками, 
способными изменить или расширить, поставляемое вместе с компьютерами,
програмное обеспечение самостоятельно. Иногда пользователи отправляли
свои програмные патчи не только обратно изготовителю, но и другим 
владельцам совместимых компьютеров. Компании изготовители очень часто
дозволяли это и даже поощряли:
в их глазах, усовершенствования сделанные над их ПО, без разницы чьи и откуда,
только делали машину более привлекательной для потенциальных покупателей.
</para>

<para>
Хотя этот ранний период и напоминает современную культуру свободного 
програмного обеспечения, он отличялся в двух ключевых моментах.
Во-первых, на тот момент не существовало почти никакой
стандартизации среди аппаратных средств&mdash;это было врменя
процветающей инновации в компьютерном дизайне, но разнообразие
компьютерных архетектур означало, что все было несовместимо 
со всем остальным. Таким образом, программы, написанные для одной машины
обычно было не возможно использовать на другой. Программисты были склонны
специализироваться в одной какой-либо архитектуре или семействе архитектур
(также как сегодня програмисты скорее специализируются в определенном 
языке прогаммирования или их семействе, в полной уверенности, что их знания 
можно будет перенести на любую вычислительную платформу, с которой им придется 
работать). Из-за того, что личные знания человека обычно относятся к одному виду компьютеров,
накопление знаний приводит к тому, что эти компьютеры становятся более привлекательными
для него и его коллег. Следовательно, в интересах производителя было распространять
машинно-зависимый код и знания как можно шире.</para>

<para>
Во-вторых, тогда небыло Интернета. И хотя в те времена было меньше
юридических ограничений на распространение чем сегодня, 
было гораздо больше технических: средства для получения данных из того
или другого источника были относительно неудобными и громоздкими.
Существовали некоторые маленькие, локальные сети, которые были хороши для 
обмена информацией между сотрудниками внутри одной исследовательской лаборатории
или предприятия. Но оставались преграды, которые нужно было преодолеть, если кто-то 
хотел обменяться информацием с кем-нибудь другим, не зависимо от того, 
где они находились.  Эти преграды <emphasis>преодолевались</emphasis> во многих случаях.
Иногда, различные группы вступали в контакт друг с другом независимо,
посылая диски или магнитные ленты с обычной почтой, а иногда сами производители 
служили центральным информационным центром для обновлений. Еще помогало и то,
что многие из разработчиков компьютеров раннего периода  работали в университетах,
где публикация чьих-либо знаний была ожидаемым явлением. Но реалии физической передачи данных означали, 
что всегда существовало сопротивление при обмене, сопротивление, пропорциональное
расстоянию (реальному или организационному), которое должно было преодолеть программное
обеспечение. Широко распространенный, свободный от трения обмен, каким мы знаем его сейчас,
был невозможен.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>Восход Проприетарного Программного обеспечения и Свободного Программного обеспечения</title>

<para>С развитием отрасли, одновременно произошло несколько взаимосвязанных изменений. 
Ужасающее разнообразие аппартных платформ, постепенно уступило место
нескольким бесспорным победителям - победителям, обладавшим лучшей технологией,
лучшим маркетингом или некоторй комбинацией обоих. В тоже время, и не совсем случайно,
разработка так называемых языков программирования "высокого уровня", означала, что, кто угодно
мог один раз написать программу, на одном языке, и потом автоматически перевести ("скомпилировать"),
на язык, который выполняется на другом типе компьютеров. Последствия коснулись и производителей 
аппартных платформ: теперь клиент мог приложить значительные усилия по проектированию 
и разработке программного обеспечения, без необходимости привязать себя к определенной
компьютерной архитектуре. Вместе с постепенным стиранием разницы в производительности 
различных компьютеров, происходившем из-за вытеснения менее эффективных архитектур, производители,
которые  рассматривали свое оборудование как единственный актив, могли предвидеть будущее падение прибыли.
Чистая вычислительная мощность стала взаимозаменяемым товаром, тогда как программное обеспечение
превратилось в отличительную черту. Продажа программного обеспечения, или, хотя бы, рассмотрение его как
неотъемлемой части продажи оборудования, становилось хорошей стратегией.</para>

<para>Это означало, что производители стали намного строже охранять авторские права
на свой код. Если пользователи просто продолжали бы свободно обмениваться между собой и
изменять код , они могли бы независимо реализовать какие-нибудь усовершенствования,
который теперь продавались поставщиком как "добавочная ценность". Еще хуже, свободный код мог бы попасть 
в руки конкурентов. Ирония в том, что все это происходило примернов то же время,
когда Интернет вставал на ноги. Как раз тогда, когда действительно беспрепятственный
обмен программным обеспечением стал наконец технически возможным, изменения в компьютерном бизнесе
сделали его экономчески нежелательным, как минимум с точки зрения каждой отдельной компании.
Поставщики предприняли меры, либо запрещающие пользователю доступ к коду, выполняющемуся на его
машине, либо настаивающие на соглашении о неразглашении, которые сделали обмен полезной информацией
невозможным.</para>

<sect3 id="history-conscious-resistance">
<title>Осознанное сопротивление</title>

<para>С медленным падением мира неограниченного обмена кодом, контрреакция 
выкристаллизовалась в уме минимум одного программиста. Ричард Столлмэн работал
в лаборатории Искусственного Интеллекта в Массачусетском Технологическом Институте
в 1970-х и в начале 80-х, в земле обетованной и в золотом веке свободного обмена кодом.
В лаборатории ИИ существовала строгая "этика хакеров",<footnote><para>Столлмэн использовал
слово "хакер", подразумевая под ним "любого, кто любит программировать и получает
удовольствие от того, что хорошо в этом разбирается", а не в относительно новом смысле
"любой, кто вторгается в компьютеры"</para></footnote>  и людям не только позволяли, но и ждали от них,
что любое изменение, внесенное в систему, станет достоянием общественности. Как Столлмэн
писал позже:</para>

    <blockquote>
      <para><emphasis>Мы не называли наше программное обеспечение "свободным программным
	  обеспечением", потому что тогда этого термина еще не было; но именно этим оно и было.
	  Когда человек из другого университета или компании хотел портировать и использовать
	  программу, мы охотно позволяли ему это сделать. Если ты видишь кого-нибудь, использующего
	  неизвестную и интересную программу, ты всегда можешь попросить посмотреть на исходный
	  код, так что ты можешь читать его, менять его или вырезать из него части, чтобы
	  создать новую программу.
      </emphasis></para>

      <para>(из <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Это райское сообщество, окружавшее Столлмэна, распалось очень быстро после 1980 года,
когда изменения, происходившие во всей остальной индустрии, в конце концов докатились 
и до лаборатории ИИ. Начинающая компания, наняла многих из программистов, работавших
в лаборатории, для разработки операционной системы, похожей на ту, над которой они
работали в лаборатории, только под полной лицензией. В тоже время, лаборатория ИИ получила 
новое оборудование, в состав которого входила проприетарная операционнная система.</para>

<para>В том, что происходило, Столлмэн увидел общую тенденцию:</para>

    <blockquote>
      <para><emphasis>Современные компьютеры того времени, такие, как VAX или 68020,
	  имели свои собственные операционные системы, но ни одна из них не была
	  свободным программным обеспечением: вам надо было подписать соглашение 
	  о неразглашении даже для того, чтобы получить работающую копию.</emphasis> </para>

      <para><emphasis>Это означало, что первым шагом в использовании компьютера
	  было обещание не помогать соседу. Совместная работа была запрещена. Правило, созданное
	  владельцами проприетарного программного обеспечения, гласило: "Если ты поделился
	  с соседом, то ты пират. Если ты хочешь что-то изменить, умоляй нас, чтобы мы это сделали."
      </emphasis> </para>

    </blockquote>

<para>По своему личному капризу, он решил сопротивляться общему течению.
Вместо продолжения работы в теперь уже опустошенной лаборатории ИИ,
или устройства на работу по написанию кода в одну из новых компаний, где 
результаты его труда были бы заперты в ящике, он отказался от лаборатории и начал проект
 GNU, а также основал Фонд бесплатного программного обеспечения (FSF). Целью GNU
<footnote><para>Это означает "GNU не Unix", и "GNU" в этом определении
означает...тоже самое</para></footnote> было разработать абсолютно бесплатную и открытую 
компьютерную операционную систему, и набор прикладных программ, где пользователю
никогда не запрещалось исследовать код или распространять свои изменения. Это, в сущности, было
попыткой воссоздать то, что было разрушено в лаборатории ИИ, но в масштабе всего мира и без
тех слабых мест, которые сделали сообщество лаборатории ИИ способным распасться на части.</para>

<para>Вместе с работой над новой операционной системой, Столлмэн 
разработал авторскую лицензию, чьи условия гарантировали,
что его код будет бесплатным всегда. Открытая лицензия (GPL) фонда бесплатного программного обеспечения от GNU,
была очень умным образцом дзюдо в юридическом пространстве: в ней говорилось, 
что код может быть скопирован и изменен безо всяких ограничений, и что и копии
и работы, основанные на данном коде (например, измененные версии) должны 
распространяться по той же лицензии как и оригинал, без каких либо дополнительных 
ограничений. Таким образом, она использует закон об авторском праве, для достижения
эффекта, противоположного традиционному авторскому праву: вместо того, чтобы
ограничить распространение программного обеспечения, она не позволяет<emphasis>никому</emphasis>,
даже автору, ставить какие-либо ограничения. Для Столлмэна, это было даже лучше, чем просто
выкладывать код в общий доступ. Если бы он находился в общем доступе, любая отдельная 
копия могла бы быть встроена в проприетарную програму (такое, как  известно, случалось
с кодом, распространяемым по разрещающим правовым лицензиям).
Пока такое использование никаким образом не уменьшало существующую доступность оригинального кода,
 но оно могло значить, что усилия Столлмэна могли пойти на пользу врагу &mdash; проприетарному
 программному обеспечению. GPL может быть рассмотрена как вид протекционизма для бесплатного
 программного обеспечения, так как она не позволяет не-бесплатному программному обеспечению полностью
 воспользоваться преимуществами кода, доступного по GPL. GPL и ее отношения с другими лицензиями
 на бесплатное программное обеспечение подробно обсуждается в
<xref linkend="legal"/>.</para>

<para>С помощью многих программистов, некоторые из которых разделяли
идеи Столлмэна, а некоторые просто хотели увидеть некоторое количесво доступного
бесплатного кода, проект GNU начал выпускать бесплатные замены большинства
самых важных компонентов операционной системы. В связи с уже широкораспространенной 
стандартизацией в компьютерном аппаратном и программном обеспечении, стало возможным
использовать замены от GNU для не-бесплатных систем, и многие так и поступали. Текстовый
редактор от GNU (Emacs) и компилятор Си (GCC) были особенно успешны, получив большую 
и преданную армию поклонников не на идеологической основе, но просто из-за их технических
характеристик. Примерно к 1990 году, GNU создало большую часть бесплатной операционной
системы, за исключением ядра &mdash; части, с которой начинается загрузка компьютера, и которая
отвечает за управление памятью, диском и другими системными ресурсами.</para>

<para>К несчастью, проект GNU выбрал архитектуру ядра, которую оказалось
реализовать труднее, чем предполагалось. Получившаяся задержка не позволила 
Фонду бесплатного программного обеспечения выпустить первую версию полностью
бесплатной операционной системы. Вместо них, заключительная часть была 
вставлена на свое место Линусом Торвальдсом, финским студентом факультета компьютерных 
наук, который, с помощью добровольцев со всего мира, закончил ядро, использовав более
консервативный дизайн. Он назвал его Linux, и когда оно было соединено с существующими
GNU программами, результатом была полностью бесплатная операционная система.
В первый раз вы могли запустить компьютер и работать без использования какого-то ни было
проприетарного програмного обеспечения.<footnote><para>

Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>

<para>Much of the software on this new operating system was not
produced by the GNU project.  In fact, GNU wasn't even the only group
working on producing a free operating system (for example, the code
that eventually became NetBSD and FreeBSD was already under
development by this time).  The importance of the Free Software
Foundation was not only in the code they wrote, but in their political
rhetoric.  By talking about free software as a cause instead of a
convenience, they made it difficult for
programmers <emphasis>not</emphasis> to have a political consciousness
about it.  Even those who disagreed with the FSF had to engage the
issue, if only to stake out a different position.  The FSF's
effectiveness as propagandists lay in tying their code to a message,
by means of the GPL and other texts.  As their code spread widely,
that message spread as well.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Accidental resistance</title>

<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
programmers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->


