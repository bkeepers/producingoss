<chapter id="introduction">

<title>Introducción</title>

<simplesect>

<para>La mayoría del software libre suele fracasar.</para>

<para>Tratamos de no prestar mucha atención a los fracasos.  Solamente los proyectos exitosos llaman la atención, y hay tantos proyectos de software en total<footnote><para>El sitio de hosting SourceForge.net, tiene 79 225 proyectos registrados a mediados de abril de 2004. Por supuesto que este número no se acerca para nada al número total de proyectos en Internet, sólo el número que usa SourceForge.</para></footnote> que aún cuando solamente un pequeño porcentaje tenga éxito, el resultado es de una apreciable cantidad de proyectos.  Pero tampoco prestamos atención a los fracasos porque no los contamos como un evento. No existe un momento puntual en el que un proyecto deja de ser viable; simplemente se los deja de lado y se deja de trabajar en ellos.  Puede haber un momento en que se hace un cambio final al proyecto, pero quienquiera lo haga, normalmente no sabe en ese momento que ese cambio fue el último.  Tampoco hay una definición clara del momento en que un proyecto se acaba.  ¿Podrá ser cuando se haya dejado de trabajar en él por seis meses?  ¿O cuando su base de usuario deja de crecer, sin antes haber excedido la base del programador?  ¿Y qué pasaría si los programadores de un proyecto lo abandonan porque se dan cuenta que estaban duplicando el trabajo de algún otro&mdash; y si se unen todos en el otro proyecto, y lo amplían para incluir ahí su esfuerzo realizado? ¿Acaso el primer proyecto finalizó, o simplemente cambió de lugar de residencia?</para>

<para>Por estas razones complejas es imposible obtener un número preciso para un promedio de fallas.  Pero la evidencia de lo que ha ocurrido en más de un decenio con proyectos con fuente abierta y curioseando un poco en SourceForge.net y otro poco en Google, se llega siempre a la misma conclusión: el porcentaje es muy alto, probablemente algo así como el 90&ndash;95%.  Este numero crece aún más si se incluyen los proyectos que sobreviven pero son disfuncionales: aquellos que <emphasis>producen</emphasis> un código que funciona, pero no son placenteros ni amigables, o no progresan tan rápidamente ni son tan confiables como tendrían que ser.</para>

<para>En este libro se habla de cómo evitar los fracasos.  Se examina no solamente cómo se hacen bien las cosas, sino también cómo se hacen mal, para que se puedan reconocer desde el comienzo, y se corrijan los problemas.  Tengo la esperanza que después de que se lea este libro, se adquiera un repertorio de técnicas no sólo para evitar los errores comunes en el desarrollo de programas de fuente abierta, sino también para manejar el crecimiento y el mantenimiento de un proyecto exitoso.  El éxito no es un juego para que haya un solo ganador, y este libro no busca producir un solo ganador que salga airoso de una competición.  Así pues, una parte importante de impulsar un proyecto de fuente abierta es trabajar en armonía con otros proyectos relacionados entre si.  Y a la larga, cada proyecto exitoso contribuye al bienestar de todo el mundo del software libre.</para>

</simplesect>

<simplesect>

<para>Sería muy tentador afirmar que los proyectos de software libre fracasan por las mismas razones que los proyectos del software propietario. Ciertamente que el software libre no tiene el monopolio de los requisitos descabellados, las especificaciones vagas, del manejo pobre de los recursos, las fases del diseño insuficientes, y tantas otras complicaciones ya conocidas en la industria del software.  Se va a hablar mucho de estos asuntos en este libro, y ahora hay que tratar de no multiplicar las referencias a dichos asuntos.  Más bien se intentará ahora una descripción de los problemas peculiares del software libre.  Cuando un proyecto de software libre se estanca, a menudo es porque los programadores (o el administrador) no caen en cuenta de los problemas típicos del desarrollo de software de fuente abierta, aunque pareciera que estan muy bien preparados para las dificultades más conocidas del desarrollo de software de fuente cerrada.</para>

<para>Uno de los errores más comunes es tener expectativas desproporcionadas sobre los beneficios propios de la fuente abierta.  Una licencia abierta no es una garantía de tener una legión de programadores activos que de repente se ofrecen para el proyecto, ni tampoco un proyecto con problemas se cura por el sólo hecho de pasarlo a fuente abierta.  De hecho es todo lo contrario: abrir un proyecto puede agregar una serie de complicaciones, y resultar a corto plazo <emphasis>más</emphasis> costoso que manejarlo dentro de casa.  Abrirlo va a significar acomodar el código para que sea comprensible a gente extraña, estableciendo un sito en la red y una lista de e-mails, y a menudo redactando la documentación del proyecto por primera vez.  Todo esto significa mucho trabajo.  Y además, si <emphasis>aparece</emphasis> algún programador interesado, habrá que soportar el peso agreqado de contestar sus preguntas por un tiempo, antes de ver el beneficio que se recibe por su presencia.  Como dijo el programador Jaime Zawinski comentando los días ajetreados cuando se lanzaba el proyecto Mozilla:</para>

    <blockquote>
      <para><emphasis>La fuente abierta anda, pero no es definitivamente la panacea.  Hay que advertir con cautela que no se puede encarar un proyecto moribundo, rociarlo con el polvo mágico de la “fuente abierta” y tener de repente todo en funcionamiento. El software es difícil  Las cosas no son tan simples.</emphasis></para>

      <para>(de<emphasis role="bold"><ulink url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>Un error relacionado es el de saltear la presentación y el empaquetado, creyendo que esto se puede hacer después, cuando el proyecto esté encaminado.  La presentación y el empaquetado comprenden una serie amplia de tareas, todas alrededor del tema de reducir la barrera de ingreso.  Hacer un proyecto atractivo para un no iniciado significa documentarlo para el usuario y el programador, instalar una página web que sea informativa para los nuevos, automatizar cuanto sea posible la compilación e instalación del software, etc. Desgraciadamente muchos programadores dan a este trabajo una importancia secundaria comparado con el código.  Hay un par de razones para esto.  De entrada se lo puede percibir como trabajo no productivo, porque aparentemente beneficia más a los que no están familiarizados con el proyecto. De cualquier modo, los que desarrollan el código no necesitan realmente del empaquetado.  Ya conocen como instalar, administrar y usar el software, porque ellos lo escribieron.  En segundo lugar, los conocimientos para hacer bien la presentación y el empaquetado son a menudo completamente diferentes a los que se requieren para escribir el código.  La gente tiende a concentrarse en lo que más sabe, aún cuando podría ser más útil al proyecto que se dediquen un poco a lo que no les resulta tan familiar. <xref linkend="getting-started"/> El capìtulo 2 trata de la presentación y el empaquetado en detalle, y explica por qué es importante que sean una prioridad desde el comienzo mismo del proyecto.</para>

<para>Después se introduce la falacia de que no se requiere una administración del proyecto cuando es una fuente abierta, o a la inversa, que las mismas prácticas de administración usadas para un proyecto hecho en casa van a funcionar bien en un proyecto de fuente abierta.  El manejo de un proyecto de fuente abierta no siempre resulta visible, pero cuando éste es exitoso tiene lugar detrás de las bambalinas de una u otra forma.  Un pequeño experimento mental será suficiente para mostrar por qué.  Un proyecto de fuente abierta consiste en una colección de programadores al azar &mdash;los que ya de por sí son gente con categorías independientes&mdash; que muy probablemente nunca se van a encontrar juntos, y que quizás tienen objetivos personales muy diferentes para trabajar en el proyecto.  El experimento consiste en imaginar sencillamente qué va a pasarle a dicho grupo <emphasis>sin</emphasis> un trabajo de administración. Si no creemos en milagros, la cosa va a colapsar y diluirse muy rápidamente. Las cosas no funcionarán simplemente por si solas, por más que los deseos sean grandes. Pero la administración, aún cuando sea muy activa, es a menudo informal, sutil, y de bajo perfil.  Lo único que mantiene unido al grupo de desarrollo es el convencimiento compartido de que juntos pueden hacer más que individualmente.  Entonces el objetivo de la administración es mayormente asegurar que continúen en ese convencimiento, estableciendo estándares de comunicación, cuidando que los programadores útiles no queden marginados debido a idiosincrasias personales, y en general procurando que el proyecto sea un lugar acogedor para los programadores.  Las técnicas específicas para realizar esto se discuten a lo largo de este libro.</para>

<para>Finalmente, hay una categoría general de los problemas que podría llamarse “fallas de orientación cultural.”  Hace diez años, o quizás solamente cinco, hubiera sido prematuro hablar de una cultura global de software libre, pero ahora ya no es así.  Lentamente ha emergido una cultura detectable, y aún cuando esta no es monolítica &mdash;por lo menos es tan propensa al disentimiento interno y al corporativismo como cualquier cultura limitada geográficamente&mdash; tiene ciertamente un núcleo básico consistente.  Los proyectos de fuente abierta más exitosos muestran algo o el total de las características de ese núcleo. Se premian ciertos tipos de conductas y se castigan otros.  Se crea una atmósfera que incita a la participación espontánea, a veces a expensas de una coordinación central. Se tienen conceptos de lo que es ser amable o ser rudo que difieren substancialmente de lo que prevalece afuera.  Lo más importante es que los participantes que son asiduos tienen ya internalizados esos conceptos y comparten un cierto consenso sobre la conducta que es aceptable.  Los proyectos no exitosos a menudo se desvían apreciablemente de ese núcleo, a veces intencionalmente, y no tienen un consenso sobre lo que razonablemente constituye una conducta predeterminada.  Esto quiere decir que cuando surgen los problemas la situación se viene abajo rápidamente, porque los participantes carecen de un conjunto de reflejos culturales determinados que les permita resolver sus diferencias. </para>

<para>Este libro es una guía práctica, no un estudio antropológico o un libro de historia.  Sin embargo, un conocimiento efectivo de los orígenes del software libre actual es una base esencial para cualquier consejo práctico.  Una persona que entienda esta cultura puede viajar sin límites en este mundo de la fuente abierta, encontrándose con muchas variaciones en costumbres y dialectos, y a la vez estar en condiciones de participar cómoda y efectivamente en cualquier lado.  Por el contrario, una persona que no entiende esta cultura encontrará que el proceso de organizar y participar en un proyecto es algo difícil y lleno de sorpresas.  Puesto que el número de gente que desarrolla software libre sigue creciendo a grandes saltos, habrá muchos en ésta última categoría&mdash; ésta es mayormente una cultura de inmigrantes recientes, y continuará así por mucho tiempo.  Si tú piensas que pudieras estar entre ellos, en el próximo título se presentarán algunos antecedentes útiles para las discusiones que vendrán después, tanto en este libro como en Internet.  (Por otro lado, si ya has trabajado en proyectos de fuente abierta por algún tiempo, puede ser que conozcas mucho sobre esta historia, y puedes saltear la sección siguiente.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>La Historia</title>

<para>Compartir el software tiene tanta historia como el software mismo.  En los primeros tiempos de los ordenadores, los fabricantes se dieron cuenta que vendrían avances competitivos en la innovación del hardware y no prestaron mucha atención al software como una ventaja para el desarrollo de sus negocios.  Muchos de los usuarios de las primeras máquinas eran científicos o técnicos que podían modificar y ampliar el software que incluía la máquina.  A veces los usuarios distribuían sus aportes no solamente al fabricante, sino también a otros usuarios que teníam máquinas similares.  A menudo los fabricantes toleraban esto, o todavía más, lo estimulaban: para ellos cualquier mejora en el software, venga de donde viniere, contribuía a que las máquinas resulten más atractivas para otros usuarios potenciales.</para>

<para>Auque esta primera época se parece de muchas maneras a la cultura actual del software libre, difiere fundamentalmente en dos aspectos:  primero que había poca estandarización del hardware&mdash; era un momento de mucha innovación en el diseño de los ordenadores, pero la diversidad en las arquitecturas hacía que cualquier cosa resultara incompatible con la otra.  Así que el software que se escribía para una máquina generalmente no servía para otra.  Los programadores se inclinaban hacia una arquitectura en particular o familia de arquitecturas y en ellas se hacían expertos (mientras que hoy se adquiere experiencia en un lenguaje de programación o una familia de lenguajes y se espera que esa experiencia se pueda luego transferir a cualquier hardware en que se vaya a trabajar).  Puesto que un experto se inclinaba a sólo un tipo de ordenador, la acumulación de sus conocimientos tenía el efecto que hacer más atractivo ese ordenador tanto para él como para sus colegas.  Por lo que los fabricantes tenían gran interés en difundir tanto como pudieran  la codificación y el conocimiento de alguna máquina específica.</para>

<para>En segundo lugar Internet no existía.  Aunque tenían menos restricciones legales que hoy para compartir, había más restricciones técnicas: Hablando comparativamente, los medios para transmitir datos de un lado para otro era difícil y trabajoso.  Había algunas pequeñas redes locales, aptas para compartir información entre empleados del mismo laboratorio de investigación o compañía.  Pero quedaban por superar una serie de trabas si se quería compartir con alguien, estuviere donde estuviere.  Estas trabas se <emphasis>superaban</emphasis> en muchos casos.  A veces eran grupos varios que se contactaban independientemente, enviándose discos o cintas por correo, y a veces eran los fabricantes mismos que servían como centrales de intercambio de los aportes individuales.  También ayudaba que muchos de los que desarrollaban los primeros ordenadores trabajaban en las universidades, en donde era costumbre publicar los avances.  Pero la realidad de la transmisión de datos implicaba que siempre que se los quería compartir se topaba con un impedimento que era proporcional a la distancia (física u organizacional) que el software tenía que viajar.  Era imposible compartir algo con todo el mundo y sin resistencias, tal como hoy se puede hacer.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>El Florecimiento del Software Propietario y del Software Libre</title>

<para>A medida que maduraba la industria ocurrían simultáneamente algunos cambios  interrelacionados.  La gran diversidad de los diseños del hardware finalmente cedieron el paso a unos pocos ganadores &mdash;ganadores por tener una tecnología superior, o una comercialización superior, o una combinación de ambas cosas.  Al mismo tiempo, no coincidente en su totalidad, el desarrollo de los así llamados lenguajes de programación de “alto nivel” significaba que se podía escribir un programa de una sóla vez en un lenguaje, y luego traducirlo automáticamente (“compilarlo”) para que corra en diferentes tipos de ordenadores.  Las consecuencias de esto no se quedaron perdidas en los fabricantes de hardware: un usuario podía ahora emprender un mayor esfuerzo de ingeniería de software sin encerrarse en una arquitectura particular de ordenadores.  Cuando esto se combinaba con la disminución gradual de las diferencias en la calidad de funcionamiento entre los ordenadores, y mientras los diseños menos eficientes eran eliminados, un fabricante que se centraba en el hardware como único beneficio podía avizorar una disminución de sus ganancias en su futuro.  La potencia de computación pura se convertía en un bien fungible, mientras que el software se convertía en el diferenciador.  Aparecía como una buena estrategia vender software, o al menos, tratarlo como parte integral de las ventas del hardware.</para>

<para>Esto significó que los productores tuvieron que ser más estrictos en defender los derechos de copia de los códigos.  Si los usuarios hubieran continuado simplemente con su costumbre de compartir y modificar los códigos de manera libre y gratis, hubieran instalado en forma independiente las mejoras que ahora empezaban a ser vendidas como “valor agregado” por los proveedores.  Peor aún, el código compartido podría haber caído en las manos de los competidores.  La ironía de esto es que ocurría al mismo tiempo que Internet estaba ganando terreno.  Justamente, cuando se hacía técnicamente posible compartir el software y se caían los obstáculos, los cambios en el mundo de los negocios hacían del compartir algo económicamente indeseable, por lo menos desde el punto de vista propio de una compañía. Los proveedores imponían sus controles, ya sea negando el acceso al código a los usuarios que corrían el programa en sus máquinas, o mediante acuerdos de no difundir el código, lo que hacía que el compartir fuera imposible.</para>

<sect3 id="history-conscious-resistance">
<title>Una resistencia conciente</title>

<para>Mientras se extinguía el mundo del intercambio de códigos se cristalizaba una contra reacción al menos en la mente de un programador. Richard Stallman trabajaba en el laboratorio de inteligencia artificial en el Instituto Tecnológico de Massachussets en la década de 1970 e inicios de 1980, la época y el lugar de oro para la costumbre de compartir los códigos.  El laboratorio de IA tenía una fuerte &quot;ética de hackers&quot;<footnote><para>Stallman usa la palabra &quot;hacker&quot; con el significado de &quot;alguien que ama la programación y disfruta si hace algo inteligente&quot; y no con el sentido más reciente de &quot;alguien que se conecta como un intruso en los ordenadores&quot;</para></footnote> y no sólo se estimulaba al personal de los proyectos sino que era de esperar que todos los avances hechos en el sistema fueran compartidos.  Como luego escribía Stallman:</para>

    <blockquote>
      <para><emphasis>No le llamábamos “software libre” a nuestro software porque ese término no existía; pero era precisamente eso. Toda vez que alguien de otra universidad quería llevar y usar un programa, nosotros se lo ofrecíamos con gusto.  Si se veía que alguien usaba un programa distinto e interesante, se le podía pedir el código fuente, para poder leerlo, cambiarlo o fusionar partes de él en un programa nuevo.</emphasis></para>

      <para>(de<emphasis role="bold"><ulink url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Esta comunidad edénica colapsó con Stallman poco después de 1980, cuando los cambios que venían ocurriendo en el resto de la industria finalmente alcanzaron al laboratorio de IA.  Una compañía que se iniciaba incorporaba a muchos de los programadores del laboratorio para trabajar en un sistema operativo similar al que habían desarrollado allí, pero ahora bajo una licencia exclusiva.  Al mismo tiempo, el laboratorio de IA adquiría nuevos equipos que llegaban con un sistema operativo de marca registrada.</para>

<para>Stallman vio la gran trama de lo que estaba sucediendo:</para>

    <blockquote>
      <para><emphasis>Los ordenadores modernos de la época, como el VAX o el 68020, venían con sus sistemas operativos propios, pero ninguno era un software libre: se debía firmar un acuerdo de no revelar los contenidos para poder recibir una copia ejecutable.</emphasis> </para>

      <para><emphasis>Lo cual significaba que el primer paso para usar un ordenador era prometer que no había que ayudar al vecino. La comunidad de cooperación estaba prohibida. La regla que establecían los dueños del software propietario era: &quot;si compartes con tu vecino, eres un pirata. Si quieres cambios, nosotros los haremos, si nos lo pides.”</emphasis> </para>

    </blockquote>

<para>Y por su personalidad peculiar decidió ofrecer resistencia a esta nueva ola. En lugar de continuar trabajando en el diezmado laboratorio de IA, o aceptar el trabajo de escribir códigos en alguna de las compañías nuevas, en las que su trabajo iba a quedar encerrado en una caja, renunció al laboratorio y comenzó el proyecto GNU y la Fundación de Software Libre (FSF por su sigla en inglés).  El objetivo del GNU<footnote><para>Sigla que significa &quot;GNU No es Unix&quot; donde GNU significa... lo mismo.</para></footnote>  En esencia, estaba empeñado en recrear lo que se había destruido del laboratorio de IA, pero en una escala globalizada, y sin las vulnerabilidades que ponían a la cultura del laboratorio de IA en un estado de posible desintegración.</para>

<para>Además de trabajar en el nuevo sistema operativo, Stallman inventó una licencia de copyright cuyos términos garantizaban que los códigos permanecerían gratis en perpetuidad.  La Licencia Pública General GNU es una ingeniosa pieza de judo legal: dice que los códigos pueden ser copiados y modificados sin ninguna restricción y que ambas copias y trabajos derivados (a saber. las versiones modificadas) deben ser distribuidas bajo la misma licencia que el original, sin poner restricciones adicionales.  En efecto, se usan las leyes del copyright para conseguir un efecto contrario al que apunta el copyright tradicional: en lugar de limitar la distribución del software, prohíbe que <emphasis>nadie</emphasis>, ni siquiera el autor, lo limite.  Para Stallman, esto era mejor que si hubiera puesto su código en el dominio público.  Si hubiera estado en el dominio público, cualquier copia podría haber sido incorporada a los programas propietarios (como ya se sabía que había sucedido con códigos que tenían licencias permisivas).  Aunque una incorporación como éstas no hubiera disminuido la disponibilidad de los códigos originales, hubiera significado que los esfuerzos de Stallman iban a beneficiar al enemigo&mdash; al software propietario. La Licencia Pública General puede entenderse como una forma de proteccionismo del software libre, porque impide que el software no-libre se aproveche de los códigos que están bajo esta licencia.  La Licencia Pública General y su relación con otras licencias del software libre se discuten en detalle en el <xref linkend="legal"/>.</para>

<para>Con la ayuda de nuevos programadores, alguno de los cuales compartían la ideología de Stallman y otros que simplemente querían ver abundante código disponible en forma gratuita, el Proyecto GNU comenzó entregando versiones libres para reemplazar muchos de los componentes críticos de sistemas operativos. Gracias a la estandarización expandida del hardware y software para ordenadores, se hizo posible usar los reemplazos GNU en sistemas no-libres, y mucha gente lo hizo.  El editor de texto de GNU (Emacs) y el compilador C (GCC) tuvieron especial éxito, ganando muchos seguidores leales, no por términos ideológicos, sino simplemente por los méritos técnicos.  Para alrededor de 1990, GNU había producido la mayor parte de un sistema operativo libre, con excepción del núcleo &mdash;la parte por la que realmente la máquina arranca y se hace responsable de manejar la memoria, el disco y otros recursos del sistema.</para>

<para>Desafortunadamente el proyecto GNU había elegido un diseño de núcleo que resultó más difícil de implementar que lo esperado.  La consiguiente demora impedía que la Fundación de Software Libre ofreciera la primera versión de un sistema operativo enteramente libre.  La pieza final fue instalada en su lugar por Linus Torvalds, un estudiante de computación finlandés quien con la ayuda de voluntarios de todo el mundo había completado un núcleo libre usando un diseño más conservador.  Le llamó Linux, y cuando fue combinado con los programas GNU existentes tuvo como resultado un sistema operativo completamente libre.  Por primera vez se podía arrancar un ordenador y hacerlo trabajar sin usar ningún software propietario.<footnote><para>  Un sistema operativo libre para ordenadores compatibles con IBM, llamado 386BSD, había aparecido poco antes que Linux.  Sin embargo, era mucho mas difícil conseguir un 386BSD y hacerlo funcionar.  Linux tuvo tanta resonancia so solo porque era libre, sino porque realmente tenía una probabilidad alta de hacer arrancar al ordenador una vez que se lo instalaba.</para></footnote></para>

<para>Muchas partes del software de este nuevo sistema operativo no fueron producidas por el proyecto GNU.  De hecho, el GNU no fue el único grupo que trabajaba para producir un sistema operativo libre (por ejemplo, el código que luego fue NetBSD y FreeBSD estaba ya en desarrollo en ese momento).  La importancia de la Fundación de Software libre no solamente residía en los códigos que se escribían, sino en el tratamiento político del tema.  Al hablar del software libre como una causa en lugar de una conveniencia, era casi imposible que los programadores <emphasis>no</emphasis> tomen una postura política de ello.  Aún los que no estaban de acuerdo con la Fundación de Software Libre tuvieron que enfrentar la causa, aunque más no sea para proponer una posisión diferente.  La efectividad que tuvo la Fundación de Software Libre en el proceso de difusión residió en la vinculación del código al mensaje, por medio de la Licencia Pública General y de otros textos.  Al mismo tiempo que se difundían los códigos, se distribuía también el mensaje.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Resistencia accidental</title>

<para>Había muchas otras cosas en la escena naciente del software libre, sin embargo, pocas eran tan explícitas ideológicamente como el Proyecto GNU de Stallman.  Una de las cosas mas importantes fue la <firstterm>Berkeley softwareDistribution</firstterm> (<firstterm>BSD</firstterm>), una reimplementación gradual del sistema operativo Unix, que hasta fines del decenio de 1970 había sido un proyecto de investigación sin restricciones de AT&amp;T&mdash; hecho por programadores de la Universidad de Berkeley en California.  Este grupo BSD no hizo una declaración política sobre la necesidad de que los programadores se unan y compartan unos con otros, pero <emphasis>practicaron</emphasis> la idea con talento y entusiasmo, coordinando un esfuerzo de desarrollo distribuido masivamente en el cual fueron reescritos los recursos de línea de comando y las bibliotecas del Unix y eventualmente también el núcleo del sistema operativo, en su mayoría por voluntarios que los tomaban de borradores.  El proyecto BSD resultó un primer ejemplo de desarrollo de un software libre no-ideológico, y también sirvió como campo de entrenamiento para muchos desarrolladores que continuarían activos en el mundo del software libre.</para>

<para>Otro emprendimiento de desarrollo cooperativo fue el <firstterm>X Window System</firstterm>, un entorno gráfico de computación libre y transparente en la red, desarrollado en el MIT a mediados de la década de 1980 en coparticipación con empresas que tenían el interés común de estar en condiciones de ofrecer a sus clientes un sistema operativo con ventanas.  Lejos de oponerse al software propietario, la licencia X permitía deliberadamente que se hicieran extensiones propietarias encima del nucleo libre &mdash; cada miembro del consorcio quería tener la oportunidad de mejorar la distribucion X predeterminada y consiguientemente ganar una ventaja competitiva con respecto a los otros miembros.  El X Windows<footnote><para>Preferían que se llamara &quot;X windows System&quot;, pero en la práctica se le llamaba comunmente &quot;X Windows&quot;, porque tres palabras es demasiado complicado.</para></footnote> era un software libre, pero fundamentalmente como una manera de nivelar el campo de juego entre intereses de las empresas competidoras, y no por el deseo de poner fin a la dominación del software propietario.  Todavía hay otro ejemplo, el TeX de Donald Knuth, un sistema de calidad de ediciones, que se alimentaban del proyecto GNU.  Ofreció una versión baja una licencia que permitía que cualquiera modifique y distribuya el código, pero que no se llamara &quot;TeX&quot;  a no ser que superara una serie de tests de compatibilidad muy estrictos (este es un ejemplo de una clase de licencias libres &quot;protectoras de marcas registradas&quot; de las que se hablará más en el <xref linkend="legal"/>)  Knuth no estaba tomando partido para un lado ni para el otro en la cuestión del software libre contra el propietario, solo necesitaba un sistema mejor de impresión para cumplir con su objetivo <emphasis>real</emphasis> &mdash;un libro sobre programación de ordenadores&mdash; y no encontró escollos para presentar al mundo su sistema una vez que estuvo hecho.</para>

</sect3>

<para>Aún sin tener un listado completo de proyectos y licencias se puede afirmar con seguridad que para el fin de la década de 1980 había una buena cantidad de software libre y una amplia variedad de licencias.  La diversidad de licencias reflejaba una diversidad de motivaciones correspondientes.  Incluso algunos de los programadores que eligieron el GNU de la Licencia Pública General estaban mucho menos motivados ideológicamente que el mismo proyecto GNU.  Aunque disfrutaban trabajando en el software libre, muchos desarrolladores no consideraron que el software propietario era una lacra social.  Había quienes sentían un impulso moral de liberar al mundo del “acaparamiento de software” (un término que usaba Stallman para el software no libre), pero otros estaban más motivados por un entusiasmo técnico, o por el placer de trabajar con colaboradores de pensamiento afín, o simplemente por el deseo humano de la gloria.  Pero las motivaciones disparatadas no intervinieron en forma destructiva en todo este confín.  Esto se explica en parte porque, en oposición a los que acontece en otras formas creativas como la prosa o las artes visuales, el software debe superar pruebas semi-objetivas para ser considerado un éxito: debe funcionar y estar razonablemente libre de errores.  Esto otorga a todos los participantes del proyecto una especie de pie de igualdad común, una razón y un encuadre para trabajar juntos sin preocuparse mucho de otros títulos que no sean los conocimientos técnicos.</para>

<para>Además, los desarrolladores tenían otra razón para permanecer juntos: acontecía que el mundo del software libre estaba produciendo códigos de muy alta calidad.  En algunos casos se podía demostrar que eran técnicamente superiores a las alternativas del software no libre que se le acercaban; en otros casos eran al menos comparables y por supuesto, costaban menos.  Mientras que solo unos pocos pudieron estar motivados para usar software libre por razones estrictamente filosóficas, la gran mayoría se sentía feliz de usarlos porque cumplían mejor con las tareas.  Y entre los usuarios, algún porcentaje estaba siempre listo para donar su tiempo y habilidad para ayudar a mantener y mejorar el software.</para>

<para>Esta tendencia de producir buenos códigos no era ciertamente universal, pero se repetía por todas partes con frecuencia en aumento en los proyectos de software libre.  Las empresas que dependían fuertemente del software lo empezaron a notar gradualmente.  Muchos de ellos descubrieron que ya estaban usando software libre en las operaciones de todos los días, sólo que no lo sabían (los gerentes de alto rango no siempre saben todo lo que ocurre en las dependencias de la tecnología informática).  Las corporaciones comenzaron a tomar cartas activas en los proyectos del software libre, contribuyendo con tiempo y equipos, y a veces subvencionando directamente al desarrollo de programas libres.  Estas inversiones podían, en el mejor de los casos, devolverles muchas horas de tiempo extra.  Las subvenciones solo pagaban a una cantidad pequeña de programadores expertos para que dedicaran su trabajo de tiempo completo, pero cosechaban los beneficios de las contribuciones de <emphasis>todos</emphasis>, incluso de voluntarios no pagos, y programadores pagados por otras corporaciones.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>“Libre” contra “Fuente abierta”</title>

<para>Cuando las corporaciones prestaron mayor atención a los programadores de software libre se enfrentaron con nuevas formas de presentación.  Una de ellas fue la palabra “libre”.  Al escuchar por primera vez el término “software libre” muchos pensaron erróneamente que solamente significaba “software de costo cero”.  Es verdad que todo software libre tiene un costo cero, <footnote><para>Se podría cobrar algo por repartir las copias del softwre libre, pero puesto que no se puede parar a los que lo reciben si éstos quieren ofrecerlo gratis después, el precio vuelve a cero inmediatamente.</para></footnote> pero no todo el software gratis es libre.  Por ejemplo, durante la guerra de los navegadores de la década del &apos;90 Netscape y Microsoft repartían gratis sus navegadores en la disputa de ganar la mayor participación en el mercado.  Ninguno de estos navegadores era libre en el sentido que tiene el &quot;software libre&quot;. No se dispone del código fuente, y si se lo tuviera, no se tiene el derecho de modificarlo o redistribuirlo.<footnote><para> El código fuente del Navegador de Netscape <emphasis>apareció</emphasis> eventualmente bajo una licencia de fuente abierta, en 1998, vino a ser la base del navegador de la red Mozilla.  Ver<ulink url="http://www.mozilla.org/"/>.</para></footnote>  Lo único permitido era bajar los programas ejecutables y hacerlos funcionar.  Los navegadores no eran más libres que los softwares empaquetados y comprimidos que se compran en un negocio; sólo que el precio era mas bajo.</para>

<para>Esta confusión en la palabra “libre” se debe a una desafortunada ambigüedad de lenguaje, en este caso del inglés.  En otras lenguas romances aparece la diferencia entre precio bajo y libertad porque existen las palabras <emphasis>gratis</emphasis> y <emphasis>libre</emphasis> que se distinguen con facilidad.  Pero siendo el inglés el lenguaje puente dentro de Internet, pasó esto a significar que un problema con el inglés era también un problema para los demás.  Este malentendido suscitado por la palabra “libre” era tan penetrante para los angloparlantes que los programadores de software desarrollaron una formula estándar que repetían: &quot;Es <emphasis>libre</emphasis> (free) como la <emphasis>libertad</emphasis>, no como la cerveza <emphasis>gratis</emphasis> (free)&quot;  Aún ahora, tener que explicar esto una y otra vez resulta fatigante.  Muchos programadores sentían, no sin razón, que la palabra ambigua (en inglés) “libre” (free) estaba obstaculizando la comprensión del público en relacón a este software.</para>

<para>Pero este problema se profundizó más aún.  La palabra “libre” llevaba consigo una inevitable connotación moral: si la libertad era un bien en si mismo, no era importante si el software era mejor o más conveniente para ciertos asuntos o ciertas circunstancias.  Estos últimos efectos aparecían como unos secundarios, por otras motivaciones que no eran en el fondo ni técnicas ni comerciales, sino morales. Más todavía, la postura de “libre como la libertad” llevaba a una flagrante incoherencia de las corporaciones que subvencionaban algunos programas libres para algunas áreas de sus negocios, pero continuaban comercializando software propietario en otras.</para>

<para>Estos dilemas llovían sobre de una comunidad que ya estaba aplastada por una crisis de identidad.  Los programadores que <emphasis>escriben</emphasis> actualmente el software libre no se sienten necesariamente identificados con el objetivo central –si lo hay- del movimiento del software libre.  Sería engañoso decir que las opiniones van de un extremo al otro, porque esto implicaría la falsedad de imaginar que nos movemos en una línea de pensamiento, cuando en realidad es una distribución multidimensional.  Sin embargo, si estamos dispuestos de obviar las sutilezas, por el momento pueden diferenciarse dos categorías amplias.  Un grupo se alinea en el punto de vista de Stallman, para quien la libertad de participar y modificar es lo mas importante, y por lo tanto si no se habla de libertad se está esquivando el núcleo principal de la cuestión.  Otros piensan que el software es el argumento más importante a su favor, y se sienten incómodos con la proclamación del software propietario como algo inherentemente malo.  Algunos de los programadores de software, auque no todos, creen que el autor (o el empleador, en el caso de trabajo pagado) <emphasis>debería</emphasis> tener el derecho de controlar las cláusulas de la distribución y que no se necesita agregar un juicio moral en la selección de algunas cláusulas particulares.</para>

<para>Por mucho tiempo no se necesitó examinar o articular estas diferencias, pero el éxito floreciente del software libre hizo que esta cuestión fuera inevitable.  En 1998 un grupo de programadores creó el término <firstterm>fuente&nbsp; abierta</firstterm> como una alternativa para la &quot;libre&quot; y fueron ellos quienes crearon la Iniciativa de la Fuente abierta (OSI en inglés). <footnote><para>La página web de OSI es <ulink url="http://www.opensource.org/"/>.</para></footnote>  La Iniciativa de Fuente Abierta creía que el término &quot;software libre&quot; llevaba a una confusión potencial, y que la palabra &quot;libre&quot; era justamente un síntoma del problema general: que el movimiento necesitaba un programa de mercado para lanzarlo en el mundo de las grandes empresas, y que hablar de moral y de los beneficios sociales del compartir no iba a tener vuelo en las salas de las empresas.  Tomando sus propias palabras:</para>

    <blockquote>
      <para><emphasis>La Iniciativa de la Fuente Abierta es un programa de mercado para el software libre. Significa fundar el “software libre” sobre bases sólidas y prácticas más que en una discusión acalorada. La sustancia ganadora no ha cambiado, sí en cambio la actitud de perdedores y su simbolismo.&nbsp;...</emphasis></para>

      <para><emphasis>La aclaración que debe hacerse a muchos técnicos no es acerca del concepto de fuente abierta, sino sobre el nombre. ¿Por qué no llamarle, como se ha hecho tradicionalmente, software libre?</emphasis></para>

      <para><emphasis>Una razón definitiva es que el término “software libre” se confunde fácilmente de manera que lleva a terrenos conflictivos.&nbsp;... </emphasis></para>

      <para><emphasis>Pero la verdadera razón del cambio de cartel es una razón de comercialización. Estamos ahora tratando de lanzar nuestro concepto al mundo corporativo. Tenemos un producto ganador, pero nuestra posición, en el pasado, ha sido terrible. El término &quot;software libre&quot; se ha malentendido entre las personas de negocios, quienes confunden el seseo de compartir con una conducta anticomercial, o peor todavía, con un robo.</emphasis></para>

      <para><emphasis>La alta plana directiva de las empresas nunca compraría un &quot;software libre.&quot; Si seguimos la misma tradición, la misma gente y las mismas licencias de software libre y le cambiáramos el nombre poniéndole “fuente abierta”, entonces sí lo comprarían.</emphasis></para>

      <para><emphasis>Algunos hackers encuentran esto difícil de creer, porque son técnicos que piensan en concreto, con términos substanciales, y no entienden la importancia de la imagen de algo cuando uno lo está vendiendo.</emphasis></para>

      <para><emphasis>Para el mercado la apariencia es la realidad. La apariencia de que estamos dispuestos a bajarnos de nuestras barricadas y a trabajar con el mundo corporativo importa tanto como la realidad de nuestras conductas o convicciones, y de nuestro software.</emphasis></para>

      <para>(de<emphasis role="bold"><ulink url="http://www.opensource.org/advocacy/faq.php"/></emphasis> y<emphasis role="bold"><ulink url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"/></emphasis>)</para>
    </blockquote>

<para>En este texto aparece la punta de muchos icebergs de la controversia.  Se refiere a “nuestras convicciones”, pero discretamente evita decir con exactitud de que convicciones se trata.  Para algunos, puede ser la convicción de que el código desarrollado en concordancia con un proceso abierto será un código mejor; para otros pudiera ser la convicción de que toda información debiera ser compartida.  Aparece el uso del término “robo” para referirse (posiblemente) al copiado ilegal &mdash;una costumbre que muchos objetan alegando que pese a todo no es un robo si el propietario original todavía tiene el artículo.  Hay una sospecha inquietante que el movimiento de software libre podría ser acusado por equivocación de anticomercialismo, aunque queda por examinar detenidamente la cuestión si esta acusación tendría alguna base en los hechos.</para>

<para>Lo que no quiere decir que el sitio web OSI es incoherente o engañoso.  No lo es.  Más bien es exactamente un ejemplo de lo que OSI reclama como perdido en el movimiento de software libre. Una buena comercialización, en donde “buena” significa viable en el mundo de los negocios.  La Iniciativa de Fuente Abierta brindó a mucha gente exactamente lo que buscaban &mdash;un vocabulario para referirse al software libre como una metodología de desarrollo y una estrategia para los negocios, en lugar de una cruzada moral.</para>

</sect2>

<para>La aparición de la Iniciativa de Fuente Libre cambió el panorama del software libre.  Formalizó una dicotomía que por mucho tiempo no tuvo un nombre, y al hacerlo forzaba al movimiento a reconocer que tenía una política interna al mismo tiempo que una externa.  Hoy, el efecto es que ambos lados han tenido que encontrar un terreno común, puesto que la mayoría de los proyectos incluye a programadores de ambos campos, como también otros participantes que no encajan claramente en una categoría.  Esto no impide que se hable de motivaciones morales &mdash;por ejemplo a veces aparecen convocatorias con recaídas en la tradicional “ética de hackers”.  Pero es raro que un desarrollador de software libre / fuente abierta entre a cuestionar abiertamente las motivaciones básicas de otros.  La contribución encubre al contribuidor.  Si alguien escribe un buen código, no se le pregunta si lo hace por razones morales o porque su empleador le paga, o porque está engrosando su currículum, o lo que sea.  Se evalúa la contribución en términos técnicos, y se responde con fundamentos técnicos.  Inclusive organizaciones políticas como el proyecto Debian, cuyo objetivo es ofrecer un entorno computacional 100% libre (“libre como la libertad”), no tienen peros para integrarse con el código no libre y cooperar con programadores que no comparten exactamente los mismos objetivos.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>La situación de Hoy</title>

<para>Cuando se maneja un proyecto libre, no se necesita hablar todos los días sobre esos enfoques filosóficos. Los programadores no pretenden que todos los integrantes del proyecto estén de acuerdo con sus puntos de vista en todos los aspectos (aquellos que insisten en hacerlo se encuentran rápidamente incapacitados para trabajar en cualquier proyecto).  Pero se necesita estar advertido que la cuestión de “libre” contra “fuente abierta” existe, en parte para evitar decir cosas que pueden enemistarlo a uno con algún otro participante, y en parte porque un entendimiento con los demás y sus motivaciones es la mejor manera, y &mdash;en cierto sentido&mdash; la <emphasis>única</emphasis> manera de llevar adelante el proyecto.</para>

<para>El software libre es una cultura por elección.  Para trabajar con éxito en esta cultura hay que entender por qué hay personas que la eligen en primer lugar.  Las técnicas coercitivas no tienen efecto.  Si hay alguien que no se siente cómodo en un proyecto, recurre a otro.  El software libre se distingue incluso entre las comunidades de voluntarios por sus inversiones limitadas.  Muchos de los participantes nunca se encuentran cara a cara, y simplemente hacen donación de algún tiempo cada vez que se sienten motivados.  Los conductos normales que conectan a los seres humanos entre si y se concretan en grupos duraderos se reducen a un pequeño canal: la palabra escrita, trasmitida por cables eléctricos.  Por esto puede llevar mucho tiempo para formar un grupo dedicado y unido.  Y a la inversa, es muy fácil que un proyecto pierda un voluntario potencial en los cinco primeros minutos de haberse encontrado.  Si el proyecto no impacta con una buena impresión, los recién llegados no ofrecen otra oportunidad.</para>

<para>La transitoriedad real o <emphasis>potencial</emphasis> de las relaciones es quizás la tarea más desalentadora que se debe enfrentar en un nuevo proyecto.  ¿Qué va a persuadir a toda esa gente a permanecer juntos el tiempo suficiente necesario para producir algo útil?  La respuesta es tan compleja como para ocupar el resto de este libro, pero si se tiene que expresar en una sola frase, sería la siguiente:</para>

    <blockquote>
      <para><emphasis>Las personas deben sentir que su conexión con un proyecto, y su influencia sobre él, es directamente proporcional a sus contribuciones.</emphasis></para> 
    </blockquote>

<para>Ningún desarrollador, real o potencial, debe sentir que no es tenido en cuenta o es discriminado por razones que no sean técnicas. Con claridad, los proyectos con apoyo de empresas y/o desarrolladores pagos tienen que ser especialmente cuidadosos en este aspecto, como se expresa en detalle en el <xref linkend="money"/>.  Por supuesto, esto no quiere decir que si no hay apoyo de empresas no hay nada de que preocuparse.  El dinero es sólo uno de los tantos factores que pueden afectar el éxito de un proyecto.  Otras cuestiones son el lenguaje que se va a elegir, la licencia, cuál será el proceso de desarrollo, qué tipo de infraestructura hay que instalar, cómo promocionar efectivamente el arranque del proyecto, y muchas otras cosas más.  El contenido del <link linkend="getting-started">próximo capítulo</link> será cómo dar el primer paso con el pié derecho al comenzar un proyecto.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
