<chapter id="introduction">

<title>Einleitung</title>

<simplesect>

<para>Die meisten Freien Sofawre Projekte Versagen.</para>

<para>Für gewöhnlich hören wir nicht sonderlich viel von 
fehlgeschlagenen Projekten. Nur erfolgreiche Projekte sammeln 
Aufmerksamkeit, und es gibt so viele Open Source Projekte insgesamt
<footnote><para>SourceForge.net, eine beliebte Hosting Seite, hatte
79,225 registrierte Projekts mitte April 2004. Natürlich ist das nicht 
einmal annähernd die gesamte Anzahl freier Software Projekte im 
Internet, sondern lediglich die Menge die Sourceforge alsPlatform 
gewählt haben.</para></footnote> sodas obwohl nur ein Bruchteil
erfolgreich sind, das Ergebniss immernoch eine Menge sichtbarer
Projekte sind. Wir hören auch nicht von den Fehlschlägen, weil 
Versagen kein Ereignis ist. Es gibt keinen einzelnen Zeitpunkt an dem
ein Projekt aufhört realisierbar zu werden, leute gleiten irgendwie
langsam davon und hören auf daran zu arbeiten. Es gibt vieleicht ein
Moment an dem die letzte Änderung gemacht wird, aber diejenigen die
sie durchführen, wissen für gewöhnlich nicht zu dem Zeitpunkt, dass
es die Letzte war. Es gibt nicht einmal eine klare Definition wann
ein Projekt abgelaufen ist. Ist es wenn an einem Projekt seit sechs 
Monaten nicht Aktive gearbeitet wurde? Sobald seine Nutzergemeinde
aufhrt zu wachsen, ohne die Entwicklergemeinde übertroffen zu haben?
Was ist wenn die Entwickler eines Projekts es verlassen, weil sie
gemerkt haben das sie die selbe Arbeit wie ein anderes nur doppelt
machen, und wenn sie sich diesem anderen Projekt anschließen und dann
erweitern um ihre früheren Anstrengungen mit einzubeziehen? Hörte das
erste Projekt auf, oder ist es nur umgezogen?</para>

<para>Auf grund solcher komplexitäten, ist es unmöglich ein genaue 
Ziffer zur Ausfallquote zu geben. Einzelberichte aus über ein 
Jahrzehnt Freier Software, ein wenig Stöbern auf SourceForge.net und
ein wenig Googeln, deuten jedoch alle auf den gleichen Schluss: die
Rate ist extrem hoch, warscheinlich in der Größenordnung von 90%-95%.
Die Zahl wird größer wenn mann überlebende aber nicht vernünftig 
laufende Projekte mit ein bezieht: solche die zwar laufenden Code
prodozieren, aber weder ein angenehmer Aufenthaltsort sind noch
Fortschritte so schnell oder zuverlässig wie sie es könnten.</para>

<para>In diesem Buch geht es darum Versagen zu vermeiden. Es untersucht
nicht nur wie man sachen richtig macht, sondern wie man sachen falsch 
macht, so dass Sie frühzeitig Probleme erkennen und berichtigen können.
Es ist meine hoffnung, dass nachdem Sie es gelesen haben, Sie ein 
Repertoir an Techniken, nicht nur um häufige Stolperfallen zu vermeiden,
sondern auch um mit Wachstum und wartung eines Projekts erfolgreich 
umzugehen, haben werden. Erfolg ist kein Nullsummenspiel, und in diesem
Buch geht es nicht ums gewinnen oder darum der Konkurenz vorraus zu 
sein. Tatsächlich ist ein wichtiger Teil beim betreiben eines Open 
Source Projekts die reibungslose Zusammenarbeit mit anderen, verwandten
Projekten. Auf lange Sicht betrachtet, trägt jedes erfolgreiche Open
Source Projekt zu dem Wohl des Körpers der weltweiten Freien Software.
</para>

</simplesect>

<simplesect>

<para>Es wäre verlockend zu sagen, dass Freie Software Projekte aus den
selben Gründen fehl schlagen wie proprietären Softare Projekte. Freie 
Software hat sicherlich kein Monopol auf unrealistische Anforderungen,
vage Spezifikationen, unzureichende Reorcenverwaltung, zu kurze 
Entwurfsphase, oder irgend eines der anderen Koblode die bereits der
Software Industrie gut bekannt sind. Es gibt einen gewaltigen Körper an
Schriftstücken zu diesem Thema und ich werde sie in diesem Buch nicht
versuchen zu duplizieren. Statt dessen werde ich versuchen die Probleme
die Spezifisch zu Freier Software sind zu beschreiben. Wenn ein Freies
Software Projekt in den Boden gefahren wird dann ist es oft weil die 
Entwickler (oder Manager) nicht die einzigartige Probleme von Open
Source Software zu würdigen wussten, auch wenn sie durchaus auf die 
bekannteren Probleme der closed-source Entwicklung vorbereitet waren.
</para>

<para>Einer der häufigsten Fehler sind unrealistische Erwartungen über
die Vorteile von Open Source selbst. Eine offene Lizens garantiert weder,
dass eine Horde aktiver Entwickler urplötzlich anfangen werden 
freiwillig Zeit in Ihr Projekt zu investieren, noch wird die 
Offenlegung die Krankheiten des Projekts automatisch heilen. Tatsächlich
kann es sogar genau das Gegenteil bewirken: Es kann eine ganze Reihe
neuer komplexitäten, und kann auf kurze sicht <emphasis>mehr</emphasis>
kosten als es winfach im Betrieb zu behalten. Das Projekt zu öffnen,
bedeutet, den Quellcode so um zu strukturieren, dass er für völlig 
Fremde verständlich ist, eine Entwicklungs Seite und Mailing listen auf
zu stellen und oft auch zum erstem mal eine Dokumentation zu schreiben.
All das, ist ein Haufen Arbeit. Und <emphasis>falls</emphasis> 
interesierte Entwickler auftauchen, gibt es die zusätzliche Bürde ihre
Fragen, eine Wiele lang, zu beantworten, vor man eine vor man einen
Nutzen aus ihrer Anwesenheit sieht. Wie es Entwickler Jamie Zawinski
über die Anfangstage des Mozilla Projekts sagte: </para>

    <blockquote>
      <para><emphasis>Open Source funktioniert zwar, aber es ist ganz
	sicherlich kein Allheilmittel. Falls es ein warnende Lehre hier
	gibt, dann die, dass man nicht ein sterbendes Projekt nehmen
	kann, es mit dem magischen Elfenstaub des "Open Source" 
	bestreuen kann und erwarten, dass alles auf ein mal magisch 
	funktioniert. Die Angelegenheiten sind nicht so einfach.
      </emphasis></para>

      <para>(aus <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>Ein verwandter Fehler ist an der Aufmachung und Packaging zu 
knausern, in der Annahme, dass diese sachen immernoch später, sobald
das Projekt unterwegs ist, gemacht werden können. Aufmachung und
Packaging beinhalten eine weite Reihe an Aufgaben, die sich alle darum
drehen die Einstiegshürden niedriger zu legen. Das Projekt für nicht
Eingeweihte einladend zu machen bedeutet eine Nutzer und Entwickler
Anleitung zu schreiben, eine Projektseite aufzustellen die für 
Neuankömmlinge informativ ist, so viel der Kompalierungs und 
Instalations Vorgänge der software zu automatisieren, usw. Viele
Entwickler behandeln diese Aufgaben leider so als wären sie nur von
sekundärer Wichtigkeit zu dem Quellcode selbst. Es gibt hierfür ein 
paar Gründe. Erstens, kann es sich nach Fleißarbeit anfühlen, weil die
Vorteile zumeist nur für diejenige sichtbar ist die am wenigsten mit dem
Projekt zu tun haben und umgekehrt. Schließlich brauchen diejenigen die
beireits mit dem Projekt vertraut sind das Packaging nicht unbedingt.
Sie wissen bereits wie man die Software installiert, administriert und
benutzt, schließlich haben sie es ja geschrieben. Zwietens, sind die
Fähigkeiten die Aufmachung und Packaging vernünftig zu machen 
unterschiedlich zu denen die fürs Quellcode schreiben benötigt werden. 
Menschen neigen dazu sich auf das zu konzentrieren was sie gut können,
selbst wenn es für das Projekt besser wäre ein wenig Zeit in etwas zu
investieren, was ihnen weniger passt. <xref
linkend="getting-started"/> Behandelt Aufmachung und Packaging im 
Detail, und erklärt warum es entscheidend ist, dass sie gleich vom 
Anfang des Projekts an eine Priorität sein sollten.</para>

<para>Der nächste Trugschluss ist das bei Freier Software wenig bis
gar kein Projektmanagement benötigt wird, bzw umgekehrt, dass die
selben management Verfahren die für die Entwicklung im Betrieb
benuzt werden, genau so gut auf einem Open Source Projekt
Anwendbar sind. Die Verwaltung ist in einem Open Source Projekt,
nicht immer sonderlich sichtbar, aber bei erfolgreichen Projekten
geschied sie in der einen oder anderen Form im Hintergrund. Ein
kleines Gedankenexperiment reicht um zu zeigen warum. Ein Open Source
Projekt besteht aus einer zufällig zusammengewürfeltem Haufen
Programierer - die an und für sich schon ein notorische eigensinnige
Gruppe - die sich warscheinlich noch nie begegnet sind, und von denen
jeder unter umständen verschieden eigene persönliche Ziele, bei der
Arbeit am Projekt verfolgen. Der Gedankenexperiment ist einfach
derjenige, sich vorzustellen was mit einer solchen Gruppe passieren
würde, <emphasis>ohne</emphasis> eine Verwaltung. Wenn man Wunder
ausschließt, würden sie sehr schnell außeinander driften. Auch wenn
wir es uns anders wünschen, laufen die sachen nicht einfach von
selbst. Die Verwaltung aber, auch wenn sie ziemlich aktiv ist, ist
zumeist informell, subtil und unauffällig. Das einzige was die
Entwickler zusammenhällt ist, dass sie mehr zusammen erreichen
können, als jeder für sich. Desshalb muss die Aufgabe einer
Verwaltung größtenteils sein, dass sie dies weiterhin glauben,
indem sie standarts für kommunikation auferlegt, indem sie dafür
sorgt, dass brauchbare Entwickler nicht auf grund persönlicher 
Eigenheiten an den Rand gedrängt werden, und allgemein dafür sorgen,
dass das Projekt ein Ort ist an dem Entwickler zurückkeheren wollen.
Bestimmte techniken um dies zu erreichen, werden durchweg im Buch
behandelt.</para>

<para>Zuletzt, gibt es noch die generelle Problem Kategorie die man
"Versagen kultureller Navigation" nennen könnte. Vor zehn jahren,
selbst vor fünf, wäre es vorschnell gewesen, von einer globalen Kultur
der freien Software zu reden, jetzt aber nicht mehr. Eine erkennbare
Kultur ist langsam aufgetaucht, und obwohl sie sicherlich nicht
monolitisch ist - sie ist mindesten so anfällig für interne 
Meinungsverschiedenheiten und Parteigeist wie jede geographisch
gebundene Kultur - hat sie doch einen im grunde genommen 
beständigen Kern. Die meisten erfolgreichen Open Source Projekte,
weisen einen alle oder zumindest einen großen Teil der 
Merkmale dieses Kerns auf. Sie belohnen bestimmte verhaltensweisen
und bestrafen andere; sie schaffen eine Atmosphäre, welches ungeplante
Teilnahme anregt, manchmal zu kosten zentraler Koordination; Sie haben
Konzepte von Unhölflichkeit und Hölflichkeit, die von den anderswo
vorherschenden erheblich abweichen können. Am wichtigsten, erfahrene
Teilnehmer haben für gewöhnlich diese Standards verinerlicht, so
dass sie einen groben Konsens über das zu erwartenden Benehmne teilen. 
Nicht erfolgreiche Projekte weichen für gewöhnlich von diesem Kern 
wesentlich ab, obgleich unbeabsichtigt, und haben oft keinen Konsens,
was eine angemessenes Grundbenehmen ausmacht. Das hat zur folge, dass
sobald Probleme auftreten, sich die Situation schnell verschlechtern
kann, da den Teilnehmern eine bereits etablierter Grundbestand
kultureller Reflexe, auf die sie zurück fallen können, fehlt.</para>

<para>Dieses Buch ist ein praktischer Führer, nicht eine 
anthropologische Studie oder Historie. Grundgentnisse über die 
Herkunft der freien software Kultur ist dennoch, eine erforderliche
Grundlage für jeden praktischen Ratschlag. Eine Person die die
Kultur versteht, kann lang und weit in der Open Source welt reisen,
viele lokale variationen von Gebräuchen und Dialekten begegnen und
trotzdem in der lage sein, sich überall komfortabel und effektiv zu
beteiligen. Im gegensatz dazu, wird eine Person die nicht die Kultur
versteht, die Organizations- und Beteiligungsvorgänge in einem
Projekt als schwierig und voller überaschungen empfinden. Da sich
die Anzahl der Menschen die freie Software entwickeln immernoch
stark am ansteigen ist, gibt es viele in der letzten Kategorie-diese
sind zum größten Teil eine Kultur neulich Eingewanderter und wird es
auch eine weile bleiben. Wenn Sie denken Sie könnten vieleicht eine
von ihnen sein, stellt Ihnen der nächste Abschnitt einen Hintergrund
für spätere Diskussionen, sowohl im Buch als auch im Internet, zur
verfügung. (Wenn Sie andererseits bereits eine Weile lang mit Open
Source arbeiten, werden Sie unter Umständen bereits eine Menge seiner
Geschichte kennen, können Sie den nächsten Abschnitt ruhig
überspringen.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>Geschichte</title>

<para>Software mit einander zu teilen wird schon seit dem es Software 
gibt, gemacht. In den Anfangstagen der Computer, waren Hersteller der
Meinung, dass Wettbewerbsvorteile, vor allem durch inovationen in der
Hardware zu erreichen waren, und schenkten der Software als geschäfts-
vorteil, wenig Aufmerksamkeit. Viele Kunden dieser frühen Maschinen
waren Wissenschaftler oder Techniker, die in der lage waren die
Software die mit der Machine selbst ausgeliefert wurde auch selber zu
modifizieren und zu erweitern. Kunden verteilten manchmal ihre Patches
nicht nur zurück an den Hersteller, sondern auch an andere Besitzer
ähnlicher Machinen. Die Hersteller duldeten dies und ermutigten sogar
oft dazu: aus ihrer Sicht, machten verbesserungen an der Software, egal
aus welcher Quelle, ihre Machine attraktiver für andere potenzielle
Kunden.</para>

<para>Obwohl diese frühe Periode in vielerlei Hinsicht der heutigen
freien Software Kultur ähnelte, unterschied es sich in zwei 
wesentlichen Gesichtspunkten. Erstens, gab es noch wenig 
standardization der Hardware - es war eine Zeit florrierender 
Innovation im Bereich Computer Design, aber die Vielfalt der
Computer Architekturen bedeutete, dass alles inkompatible mit
allem anderen war. Dessalb würde Software die für eine Maschine 
geschrieben wurde, im allgemeinen nicht auf eine andere laufen.
Programmierer brauchten generell Fachkentnisse in einer bestimmten
Architektur oder Familie von Architekturen(im gegensatz dazu, würden 
sie heute eher Fachkentnisse in einer Programiersprache oder Familie
von Programiersprachen sammeln, mit der Zuversicht, dass ihre 
Kentnisse auf welche Hardware sie auch arbeiten mögen, übertragbar 
ist). Weil die Erfahrungen einer Person dazu neigten spezifisch auf 
eine Art von Computer beschränkt zu sein, hatte ihre Ansammlung an
Erfahrung den Effekt, den Computer für sie und ihre Kollegen 
attraktiver zu machen. Desshalb war es im Interesse des Herstellers,
dass Wissen und Code spezifisch zu ihren Machinen sich so weit wie 
möglich verbreitete.</para>

<para>Zweitens, gab es das Internet nicht. Obwohl es weniger 
rechtliche Einschränkungen bezüglich Tauschen gab als heute, gab es
mehr teschniche. Es gab ein ein paar wenige, lokale Netzwerke, gut um
Informationen mit Mitarbeiter der gleichen Forschungseinrichtung zu
tauschen. Aber es blieben Barrieren die es zuüberwinden galt, wenn man
mit jedem, unabhängig vom Standort teilen wollte. Diese Barrieren
<emphasis>wurden</emphasis> in vielen Fällen überwunden. Manchmal
stellten verschiedene Gruppen unabhängig von einander im einander
Kontakt her, durch Sendung von Disketten oder Magnetbänder mittels 
Post, und manchmal fungierten die Hersteller selbst als zentrale 
Anlaufstelle für patches. Es half auch das viele frühe Computer
Entwickler an Universitäten arbeiteten, wo die Veröffentlichung des
eigenen Wissens erwartet wurde. Die Physikalischen realitäten des
Datentransfers, bedeuteten jedoch, dass das Tauschen immer einen
Wiederstand mit sich brachte, die proportional zu der Entfernung
(echt oder organizatorisch) die die Software überwinden musste,
anwuchs. Weitverbreitete reibungsloses Tauschen, wie wir sie heute
kennen, war nicht möglich.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>Der Aufstieg Proprietärer Software und Freier Software</title>

<para>Mit der Reifung der Industrie, traten gleichzeitig mehrere 
zusammenhängende Veränderungen auf. Die wilde Vielfalt an Hardware
Designs wich langsam einige wenige Gewinner - Gewinnder durch 
überlegene Technologie, überlegenes Marketing, oder eine Kombination
beider. Gleichzeitig, und nicht ganz zufällig, bedeutete die 
Entwicklung sogenanter "höherer" Programiersprachen , dass man eine
Anwendung einmal schreiben konnte, in einer Sprache, und es 
automatisch übersetzen ("Kompilieren") lassen konnte, um es auf
verschiedene Arten von Computern laufen lassen zu können. Die Folgen
hiervon, blieben den Hardware Herstellern nicht verborgen: Ein Kunde
konnte jetzt eine große Software Ingenieurs Anstrenung unternehmen,
ohne sich zwangsläufig auf eine bestimmte Computer Architektur
festzulegen. Dies zusammen mit den allmälich enger werden 
Leisungsunterschieden zwischen verschiedenen Computern, da weniger
effiziente Bauweisen ausgelesen wurden, führte dazu, dass ein 
Hersteller der Hardware als seine einziges Gut behandelte, sich auf
sinkende Gewinnemargen freuen konnte. Rohe Rechenleistung wurde ein
ersetzbares Gut, während Software zum Unterscheidungsmerkmal wurde. 
Software zu verkaufen, oder zumindest es als ein integrierten
Bestandteil von Hardware verkäufen zu behandeln, fing an nach einer
guten Strategie auszusehen.</para>

<para>Dies bedeutete, dass Hersteller anfangen mussten ihre 
Urheberrechte auf ihren Quellcode strenger durchzusetzen. Wenn 
Nutzer einfach weiterhin frei mit einander tauschten und modifizierten
würden sie vieleicht manche der Verbesserungen die vom Hersteller als 
"mehrwert" verkauft wurden, reimplementieren. Schlimmer noch,
getauschter Quellcode, könnte in den Hände der Konkurrenz gelangen.
Ironisch dabei ist, dass die alles zur selben Zeit geschah, als das 
Internet endlich anfing vom Boden ab zu heben. Gerade als echte
Reibungsloses Tauschen von Software endlich teschnich machbar wurde,
machten es veränderungen in Computergeschäft wirtschaftlich nicht
wünschenswert, zumindest aus sicht eines einzelnen Unternehmens. Die
Lieferanten wurden strikter, entweder verwehrten Sie den Nutzern den
Zugriff auf den Quellcode der auf ihren Maschinen lief, oder sie
bestanden auf Vertraulichkeitsvereinbarungen die effektiv das Tauschen
unmöglich machte.</para>

<sect3 id="history-conscious-resistance">
<title>Bewusster Wiederstand</title>

<para>Wärend die Welt des unbeschränkten Tauschen von Quellcode 
langsam nachließ, kristallizierte sich eine Gegenreaktion im Kopf von
mindestens einem Programmierer. Richard Stallman arbeitete im Labor
für künstliche Intelligenz an der Massachusetts Institute of Technology
in den 1970ern und frühen '80ern, während was sich als goldene Zeit und
als goldener Ort für das Tauschen von Quellcode, herrausstellen sollte.
Das KI Labor hatte eine starke "Hacker Ethik", <footnote><para>Stallman
benutzt das Word "Hacker" im sinnevon "Jemand der es liebt zu 
Programmieren und spass daran hat sich dabei geschickt anzustellen",
nicht im sinne der relativ neuen Bedeutung "Jemand der in Computer
einbricht"</para></footnote> und Leute wurden nicht nur dazu ermutigt
sondern es wurde von ihnen erwartet, dass sie Verbesserungen am System,
egal welche, teilten. Wie Stallman später schrieb:

    <blockquote>
      <para><emphasis>Wir nannten unsere Software nicht "Freie Software"
	weil es diesen Begriff noch nicht gab; aber das ist es, was es
	war. Immer wann Leute von anderen Universitäten oder Firmen eine
	Anwendung benutzen und portieren wollte, ließen wir sie es 
	freudig machen. Falls du jemand eine unbekannte und interesante 
	AnwendungaWhenever verwenden sahst, konntest du immer danach
	fragen, den Quellcode zu sehen, um es zu lesen, zu verändern
	oder Teile davon auszuschlachten um eine neue Anwendung zu
	Erstellen.</emphasis></para>

      <para>(von<emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Diese Edenische Gemeinschaft brach kurz nach 1980 um Stallman,
als die Veränderungen die Veränderungen die in der restliche Industrie
geschahen, endlich das KI Labor aufholten. Eine startup Firma stellte
viele Programmierer des Labors ein, um an ein Betriebssystem ähnlich zu
dem an dem sie im Labor gearbeitet hatten, zu arbeiten, nur jetzt unter
einer exclusiven Lizens. Zur gleichen Zeit, schaffte sich das KI Labor
neue Ausrüstung an, welches mit einem propretären Betriebssystem kam.
</para>

<para>Stallman sah in den Geschehnissen ein größeres Muster:</para>

    <blockquote>
      <para><emphasis>Die modernen Computer dieser Ära, wie z.B. der
	VAX oder die 68020, hatten ihre eigene Betriebssysteme, aber
	keine von ihnen waren Freie Software: Man musste eine
	Vertraulichkeitsvereinbarung unterzeichnen, nur um eine
	ausfürhbare Kopie zu bekommen.
      </emphasis></para>

      <para><emphasis>Dies bedeutete, dass der erste Schritt einen
	neuen Computer zu benutzen, war zu versprech seinen eigenen
	Nachbarn nicht zu helfen. Eine zusammenarbeitende Gemeinschaft
	war verboten. Die Regel die von den Besitzern propretärer
	Software gemacht wurde war, "Wenn du mit deinem Nachbarn
	Teilst, bist du ein Pirat. Wenn du irgend etwas verändert
	haben möchtest, dann musst du uns darum betteln sie zu machen".
      </emphasis></para>

    </blockquote>

<para>Durch irgend eine Eigenart seiner Persönlichkeit, entschied er
sich gegen diesen Trend zu wehren. Anstatt für das nunmehr dezimierte
KI Labor weiter zu arbeiten, oder eine Arbeit an einer der neuen 
Firmen an zu nehmen, wo die Ergebnisse seiner Arbeit verschlossen in
einer Kiste sein würden, Kündigte er dem Labor und startete das GNU
Projekt und die Free Software Foundation (FSF). Das Ziel von GNU
<footnote><para>Steht für "GNU's Not Unix", und das "GNU" in dieser
Erweiterung steht...für das gleiche.</para></footnote> war es ein
komplett freies und offenes Betriebssystem und einen Körper an
Anwendungen zu entwickeln, an denen Benutzer niemals daran gehindert
werden sollten zu hacken noch ihre Modifikationen mit einander zu 
tauschen. Im wesentlichen, machte er sich auf dem Weg, dass wieder
her zu stellen, was im KI Labor zerstört worden war, aber auf einer
Welt umspannenden Größenordnung und ohne die Schwachstellen die die
Kultur des KI Labors verwundbar für zersetzung gemacht hatte.</para>

<para>Zusätzlich zur Arbeit am neuen Betriebssystem, entwarf er eine
Urheberrechts Lizens, dessen Bedingungen garantierten, dass sein Code
fortwährend frei bleiben würde. Die GNU General Public License (GPL)
ist ein klevers Stück juristisches Judo: Es besagtm dass der Code
ohne Beschränkungen kopiert und verändert werden darf, und dass
wowohl Kopieen sowie abgeleitete Werke (das heißt modifizierte
Versionen) unter der selben Lizens des Originals verbreitet werden
müssen, ohne weitere Beschränkungen. Tatsächlich, benutzt es das
Urheberrecht um einen gegenteiligen Effekt zu erzielen, für welches
das üblich Urheberrecht benutzt wird: Statt die Verbreitung der
Software ein zu schränken, hindert es <emphasis>jeden</emphasis>, 
selbst den Author, daran es einzuschränken. Für Stallman war dies
besser als seinen Code einfach im öffentlichem Besitz zu geben. Wenn
es lizensfrei wäre, könnte irgend eine beliebige Kopie in einer
Propitären Anwendung aufgenommen werden(ein bekanntes Phänomen, für
Code welches unter einem toleranten Lizensen veröfentlicht wird).
Obwohl solche eine einbindung in keiner Weise die weiter Verfügbarkeit
des Codes einschränken würde, würde es bedeuten, dass die Anstrengungen
von Stallman dem Feind-Proprietäre Software- zum Vorteil gerreichen
könnte. Die GPL kann als ein art Schutz für freie Software gedacht
werden, da es nicht freie Software daran hindert unter ihr 
veröfentlichtem Code komplett auszunutzen Die GPL und ihre Beziehung
zu anderen Freie Software Lizensen werden in <xref linked="legal" />
ausführlich behandelt.</para>

<para>Mit Hilfe vieler Programmierer, von dem ein Teil die
Ideologie von Stallman teilte und von dem ein Andere einfach nur eine
Menge Freien Codes sehen wollte, begann das GNU Projekt Freien Ersatz
für viele der wichtigsten Komponenten eines Betriebssystems zu
veröfentlichen. Auf Grund der nunmehr weit verbreiteten
Standardisierung von Hardware und Software, war es möglich GNU Ersatz
in ansonsten nicht Freie Systeme zu verwenden, was viele auch machten.
Der GNU Text-Editor (Emacs) und C Compiler GCC, die großen anklang
fanden, nicht aufgrund der Ideologie, sondern einfach auf Grund ihrer
teschnischen Vorzüge, waren besonders erfolgreich. Bis ca. 1990, hatte
GNU hatte GNU den größten Teil eines freien Betriebssystems
fertiggestellt, bis auf den Kernal - den Teil den die Maschine
tatsächlich hochfährt und der dafür zuständig ist Haup-Speicher
Fest-Speicher und andere Resourcen des Systems zu verwalten.</para>

<para>Leider hatte das GNU Projekt ein Kernel Entwurf gewählt, der
schwieriger zu implementieren war, als erwartet. Die dadurch
entstandene Verzögerung, hinderte die Free Software Foundation daran
die erste Veröffentlichung eines komplett freien Betriebssystems zu
machen. Das letzte Stück wurde statt dessen von Linus Torvalds, ein
Finischer Computer Student, hervorgebracht, der mit der Hilfe von 
vielen Freiwilligen verteilt auf der ganzen Welt, einen freien Kernel
fertig gestellt hatte, basierend auf einem viel konservativerem
Entwurf. Er nannte es Linux, und als es mit den bereits existierenden
GNU Anwendungen kombiniert wurde, war das Resultat ein komplett freies
Betriebssystem. Zum ersten Mal konnte man seinen Computer hoch fahren
und ohne proprietärer Software arbeiten. <footnote><para>Rein 
Teschnisch gesehen war Linux nicht das erste. Ein freies 
Betriebssystem für IBM-kompatibele Computer namens 386BSD kam kurz vor
Linux. Es war jedoch viel schwieriger 386BSD zum laufen zu bringen.
Linux machte einen solch einen gutet Anfang, nicht nur weil es frei 
war, sondern weil man tatsächlich eine hohe warsheinlichkeit hatte, 
seinen Computer hoch zu fahren wenn man es instalierte.</para>
</footnote></para>

<para>Vieles der Software diese neuen Betriebssystems wurde nicht
vom GNU Projekt produziert. In der Tat war GNU nicht einmal die
einzige Gruppe die daran arbeitete ein freies Betriebssystem
herzzustellen (z.B der Code der letztendlich NetBSD und FreeBSD wurde, 
befand sich zu dieser Zeit bereits in der Entwicklung). Die Free 
Software Foundation war nicht nur auf Grund des Codes welches sie
Prodozierten von bedeutung, sondern auch wegen ihrer Rethorik. Indem
sie von freier Software als Ursach für das es sich zu kämpfen lohnt 
sprachen und nicht nur als Bequemlichkeit, machten sie es für 
Programierer schwierig <emphasis>nicht</emphasis> ein politisches
Bewustsein darüber zu haben. Selbst diejenigen, die der FSF nicht
zustimmten mussten das Thema angehen, wenn auch nur um eine andere
Position auszustechen. Die effectivität der FSF's als Propagandisten,
bestand darin, ihren Code mittels der GPL und anderer Texte an ein 
Botschaft zu schnüren. Mit der weiten verbreitung ihres Codes
verbreitete sich auch ihre Botschaft.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Versehentlicher Wiederstand</title>

<para>Es gab jedoch viele andere Vorgänge in der aufkeimenden
freien Software Scene und wenige waren so explizit ideologisch wie
das GNU Projekt von Stallman. Einer der wichtigsten war die 
<firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), eine schrittweise neu-implementierung
des Unix Betriebsystems - welches bis in den späten 1970ern ein
lose propretäres Forschungsprojekt bei AT&T von Programmierer
an der Universität von Californien in Berkly war. Die BSD Gruppe
machte keine offenkundige politische Äußerungen über die
Notwendigkeit, das Programiere sich verbinden und mit einander Teilen,
aber sie <emphasis>praktizierten</emphasis> die Idee mit Gespür und
Enthusiasmus, indem sie eine massive verteilte Entwicklungs
Anstrenung koordinierten, bei dem die Unix Konsolen Anwendungen und
Code Bibliotheken und schließlich das Betriebssystem selbst wurde von
Grund auf neu geschrieben zumeistens von Freiwilligen. Das BSD Projekt
wurde zu einem vorzeige Beispiel für nicht ideologische freie Software
Entwicklung und diente als Ausbildungsstätte für viele Enwickler die
späder weiterhin in der Open Source Welt aktiv bleiben sollten.</para>

<para>Eine weitere Feuerprobe der kooperativen Entwicklung war das
<firstterm>X Window System</firstterm>, eine freie, nezwerktransparente
graphische EDV Umgebung, welches an der MIT mitte der 1980er in
Zusammenarbeit mit Hardware Anbietern, die ein gemeinsammes
Interesse daran hatten ihren Kunden ein Fenstersystem anbieten zu
können, entwicklet wurde. Weit ab davon sich propritäre Software
entgegen zu stellen, erlaubte die X Lizens ganz bewust proprietäre
Erweiterungen auf dem freien Kern-alle Beteiligten des Consortiums
wollten die Gelegenheit die standart X Distribution zu verbessern und
sich dadurch von den anderen Mitgliedern abzuheben. X Windows
<footnote><para>Sie bevorzugen es das "X Window System", genannt zu
werden, aber praktisch nennt man es für gewöhnlich "X Windows", da
drei wörter einfach zu schwerfällig sind.</para></footnote> selbst
war freie Software, aber hauptsächlich als Mittel das Spielfeld zu
ebnen für sich konkurierende Wirtschaftliche Interessen, nicht als
Wunsch die Vormacht propritärer Software zu brechen. Noch ein weiteres
Beispiel welches dem GNU Projekt ein paar Jahre vorrausging war Tex, 
ein freie Textsatzsystem für Verlagsfertige Dokumente von Donald Knuth.
Er veröffentlichte es unter einer Lizens, welches jedem erlaubte es zu
modifizieren und zu verteilen, das Resultat aber nicht "Tex" zu 
nennen, wenn es nicht einen strikten Satz an Kompatibilitätsprüfungen
bestand (dies ist ein Beispiel für eine Klasse von freie Software
Lizensen die ein Markenzeichen schützen sollen, welches in
<xref linkend="legal"/>) ausführlicher behandelt wird. Kunth nahm 
nicht Stellung für die eine oder andere Partei bezüglich der Frage
nach freier gegen propritärer Software, er brauchte nur ein besseres
Textsatzsystem um sein <emphasis>echtes</emphasis> Ziel zu erreichen-
ein Buch über Programmieren zu schreiben- und sah keinen Grund sein
System nicht der Welt zu veröffentlichen als er fertig war.</para>

</sect3>

<para>Ohne hier jedes Projekt und jede Lizens aufzulisten, kann man
doch mit sicherheit sagen, dass bis zu den späten 1980's eine Menge
freier Software unter eine breiten Auswahl an Lizensen zu verfügung
stand. Die Vielfalt an Lizensen spiegelte eine entsprechende
Vielfalt an Moivationen wieder. Selbst einige der Programierer die
die GNU GPL wählten waren viel weniger ideologisch getrieben als
das GNU Projekt selbst. Obwohl sie es genossen an freier Software zu
arbeiten, betrachteten viele Entwickler propritäre Software, nicht
als soziales Übel. Es gab Menschen die einen moralischen Drang spürten
die Welt von "der Hortung von Software"(der Begriff den Stallman für
nicht freie Software benutzt) zu befreien, andere aber waren eher
motiviert durch technischer Begeisterung, durch die Freude daran
mit Gleichgesinnten zusammen zu arbeiten sogar durch das einfache
menschliche Verlangen nach Ruhm. Dennoch beeinflussten sich diese
ungleichen Motivationen größtenteils nicht negativ. Zum Teil liegt dies
daran, dass Software im Gegensatz zu anderen kreativen Formen wie
Prosa oder die Bildende Kunst einige mehr oder weniger objektive
Prüfungen bestehen muss um als erfolgreich in anbetracht gezogen zu
werden: Es muss Laufen und zu einem gewissen Maß frei von Bugs sein.
Hierdurch haben automatisch alle Teilnehmer eines Projekts eine Art
gemeinsames Interesse, ein Grund und ein Rahmenwerk um zusammen zu
arbeiten, ohne sich all zu viele Sorgen um qualifizierung außerhalb
des technischen zu machen.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
