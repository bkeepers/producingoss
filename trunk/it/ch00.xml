<preface id="preface">
<title>Prefazione</title>
  
<!-- ======================== SECTION ============================== -->
<sect1 id="why">
<title>Perché ho scritto questo libro?</title>

<para>A volte, partecipando ad una festa, mi capita di pronunciare la
frase "Io scrivo software libero". I primi tempi la gente mi guardava
con aria perplessa, adesso rispondono "Ah, si, a codice aperto come Linux?"
Annuisco compiaciuto. "Sì, esattamente! Ecco cosa faccio." Provo una
piacevole sensazione nel non essere più considerato un alieno. In passato,
la domanda successiva era generalmente scontata: "Come fai a guadagnare
in questo modo?" Per rispondere, mi toccava riassumere l'economia dello
sviluppo a codice aperto (meglio noto come <foreignphrase>open source</foreignphrase>):
spiegavo che ci sono organizzazioni il cui interesse è di risolvere un
problema attraverso un dato software, ma alle quali non serve venderne
nemmeno una copia, basta che il programma sia disponibile e aggiornato,
più come strumento che come merce.</para>

<para>Ultimamente, tuttavia, questa domanda successiva non è sempre stata
legata al denaro. Il modello di <foreignphrase>business</foreignphrase> dei
programmi a codice aperto<footnote><para>I termini "codice aperto" e "libero"
sono essenzialmente dei sinonimi in questo contesto, saranno discussi con
maggior dettaglio in <xref linkend="free-vs-open-source"/><phrase output="printed">
nel <xref linkend="introduction"/></phrase>.</para></footnote> non è più
così misterioso, ed un numero sempre maggiore di non addetti ai lavori già
comprende &mdash; o per lo meno non rimane sconvolto &mdash; che alcune
persone vi lavorano a tempo pieno. Invece la domanda che iniziano a pormi
con maggior frequenza è "<emphasis>Interessante, ma come funziona?</emphasis>"</para>

<para>In principio non avevo una risposta soddisfacente a portata di mano,
e più mi sforzavo di trovarne una, più mi rendevo conto quanto fosse
difficile l'argomento. Dar vita ad un software libero non è esattamente come
dirigere un'impresa (immagina di dover costantemente negoziare la natura
del tuo prodotto con un gruppo di volontari, la maggior parte dei quali
non li hai mai neppure visti in faccia). Tantomeno si può paragonare,
per varie ragioni, ad organizzare e gestire un'associazione senza fini di
lucro di tipo tradizionale, oppure governativa. Ci sono similitudini con tutte,
ma alla fine sono lentamente giunto alla conclusione che il software libero
è una cosa <foreignphrase>sui generis</foreignphrase>. I settori ai quali
paragonarlo sono tanti, ma nessuno di questi è perfettamente uguale. A dirla
tutta, persino l'assunzione che il software libero può essere "diretto",
è una specie di forzatura. Un software libero può certamente essere 
<emphasis>avviato</emphasis>, ed il suo sviluppo può subire l'influenza
di collaboratori interessati, anche in maniera forte. Ma le sue fondamenta
non possono essere proprietà di un singolo, e finché ci sono persone in
giro &mdash; ovunque &mdash; interessate nel suo sviluppo, non esiste modo
unilaterale per cessarne la diffusione. Ognuno coinvolto ha un potere infinito,
ed allo stesso tempo non ha nessun potere specifico. Dando vita ad una
dinamica interessante.</para>

<para>Ecco il motivo per cui ho deciso di scrivere questo libro. I progetti che
sviluppano software libero hanno fatto nascere una cultura differente, un'etica
nella quale la libertà di creare programmi che facciano qualsiasi cosa si abbia
in mente è al centro di tutto, e dove il risultato di questa libertà non sono
individui sparpagliati che decidono separatamente come far evolvere il codice,
ma è una collaborazione piena di entusiasmo. Proprio il "saper collaborare" diventa
quindi una delle competenze di maggior valore, nel software libero. Gestire
questi progetti vuol dire entrare a far parte di una specie di cooperazione
ipertrofica, in cui l'abilità del singolo è di scoprire nuove metodologie per
lavorare insieme, al fine di fornire tangibili benefici al software stesso.
Questo libro vuol provare a descrivere le tecniche attraverso le quali tale
processo può essere portato avanti. Non ha la pretesa di trattare l'argomento
in maniera esaustiva, ma è pur sempre un inizio.</para>

<para>Fare del <emphasis>buon</emphasis> software libero è un obiettivo valido
già di per sé. Spero quindi che il lettore desideroso di scoprire nuovi modi
per raggiungere quest'obiettivo, si senta soddisfatto di ciò che troverà in
questo libro. Ma soprattutto spero di trasmettere parte del puro piacere che
si prova a lavorare con una squadra motivata di sviluppatori 
<foreignphrase>open source</foreignphrase>, e ad interagire con gli utenti
nel modo meraviglioso che il software libero incoraggia. Partecipare alla
progettazione di un programma aperto di successo è <emphasis>divertente</emphasis>,
ed in definitiva è ciò che consente all'intero sistema di continuare ad esistere.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="audience">
<title>Chi dovrebbe leggere questo libro?</title>

<para>Questo libro è pensato per gli sviluppatori di software e per i dirigenti
che stanno pensando di far partire un progetto open source, o che ne hanno già
avviato uno, chiedendosi come andare avanti. I concetti illustrati potrebbero
anche tornare utili per coloro che desiderano partecipare ad un progetto open
source, ma non ne hanno mai avuto l'occasione</para>

<para>Il livello di difficoltà non richiede che il lettore sia un programmatore,
ma dovrebbero essere noti i concetti di basi dell'ingegneria del software come
il codice sorgente, il compilatore e le <foreignphrase>patch</foreignphrase>.</para>

<para>Una precedente esperienza sull'open source, sia come utente che come 
sviluppatore, non è necessaria. Coloro che hanno invece lavorato in progetti
relativi al software libero, troveranno probabilmente alcune parti del libro
un tantino noiose e scontate, e potranno decidere di saltarle senza alcun
problema per la comprensione dei concetti seguenti. Proprio a tal proposito,
ho posto particolare attenzione nell'attribuzione dei titoli alle sezioni in
maniera chiara, indicando quando qualcosa può essere saltata da chi ha già
dimestichezza con l'argomento trattato.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="sources">
<title>Fonti e riferimenti</title>

<para>Buona parte del materiale grezzo che ha dato vita a questo libro,
proviene da cinque anni di lavoro al progetto Subversion
(<ulink url="http://subversion.tigris.org/"/>). Subversion è un sistema
open source per il versionamento di un insieme di cartelle e documenti,
scritto da zero, al fine di sostituire CVS come standard 
<foreignphrase>de facto</foreignphrase> tra i prodotti della categoria,
nella comunità degli sviluppatori open source. Il progetto fu avviato dal
mio datore di lavoro, CollabNet (<ulink url="http://www.collab.net/"/>),
all'inizio del 2000. Grazie al cielo CollabNet capì sin dall'inizio come
portarlo avanti in maniera veramente collaborativa, come l'unione di tanti
contributi distribuiti. Si presentarono molti volontari sin da subito; oggi
siamo arrivati a circa 50 sviluppatori attivi sul progetto, dei quali solo
una minoranza sono impiegati di CollabNet.</para>

<para>Subversion è per molti versi un classico esempio di un progetto open source,
e ho finito per impegnarmi su di esso più di quanto originariamente avessi previsto.
In parte è stata una questione di praticità: ogni volta che avevo bisogno di
un esempio di una situazione particolare, potevo richiamarne di solito uno relativo
a Subversion dalla memoria. Ma è stata anche una questione di verifica.
Benché io sia impegnato in altri progetti di software libero a vari livelli,
e parli con amici e conoscenti coinvolti in molti altri, ho scoperto ben presto
che scrivendo articoli era necessario accompagnare la teoria con la pratica.
Non volevo fare affermazioni su eventi di altri progetti basandomi solo su
ciò che mi era capitato di leggere nelle liste di discussione. Con Subversion,
ad esempio, un approccio del genere fornirebbe soltanto la metà delle risposte
giuste. Così quando raccolgo ispirazioni o esempi su un progetto del quale
non ho una particolare esperienza diretta, ho imparato a parlare prima con
qualcuno che possa chiarirmi i dubbi, per acquisire confidenza sull'argomento
ed essere in grado di spiegare come vanno le cose.</para>

<para>Subversion è stato il mio lavoro per gli ultimi 5 anni, ma mi occupo
di software libero da 12. Tra gli altri progetti che mi hanno ispirato per la
stesura di questo libro, mi piace ricordare:</para>

<itemizedlist>
  <listitem><para>L'editor di testo GNU Emacs, ed il relativo progetto della Free
            Software Foundation, all'interno del quale ho gestito alcuni piccoli
			pacchetti.</para>
  </listitem>
  <listitem><para>Il Concurrent Versions System (CVS), al quale ho lavorato 
            intensamente nel 1994 &ndash; 1995 con Jim Blandy, continuando
			ad essere sporadicamente coinvolto da allora.</para>
  </listitem>
  <listitem><para>La collezione di progetti open source nota come Apache
            Software Foundation, in particolare l'Ambiente Portabile di Apache
            (APR) ed il server HTTP Apache.</para> 
  </listitem>
  <listitem><para>OpenOffice.org, il sistema di basi di dati della Berkeley,
			il sistema MySQL; non sono stato coinvolto in questi progetti
			personalmente, ma li ho osservati e, in alcuni casi, ho avuto
			l'occasione di parlare direttamente con gli sviluppatori.</para> 
  </listitem>
  <listitem><para>Il debugger GNU (GDB) (in generale).</para>
  </listitem>
  <listitem><para>Il progetto Debian (in generale).</para>
  </listitem>
</itemizedlist>

<para>Quest'elenco non è certo completo. Un po' come la maggior parte dei
programmatori open source, mantengo dei legami "deboli" con molti progetti
differenti,giusto per avere un senso dello stato generale delle cose. Di
sicuro non potrei elencarli qui tutti, ma non trascurerò di citarli ove
opportuno, durante la trattazione.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="acknowledgments">
<title>Acknowledgments</title>

<para>This book took four times longer to write than I thought it
would, and for much of that time felt rather like a grand piano
suspended above my head wherever I went.  Without help from many
people, I would not have been able to complete it while staying
sane.</para>

<para>Andy Oram, my editor at O'Reilly, was a writer's dream.  Aside
from knowing the field intimately (he suggested many of the topics),
he has the rare gift of knowing what one meant to say and helping one
find the right way to say it.  It has been an honor to work with him.
Thanks also to Chuck Toporek for steering this proposal to Andy right
away.</para>

<para>Brian Fitzpatrick reviewed almost all of the material as I wrote
it, which not only made the book better, but kept me writing when I
wanted to be anywhere in the world but in front of the computer.  Ben
Collins-Sussman and Mike Pilato also checked up on progress, and were
always happy to discuss&mdash;sometimes at length&mdash;whatever topic
I was trying to cover that week.  They also noticed when I slowed
down, and gently nagged when necessary.  Thanks, guys.</para>

<para>Biella Coleman was writing her dissertation at the same time
I was writing this book.  She knows what it means to sit down and
write every day, and provided an inspiring example as well as a
sympathetic ear.  She also has a fascinating anthropologist's-eye view
of the free software movement, giving both ideas and references that I
was able use in the book.  Alex Golub&mdash;another anthropologist
with one foot in the free software world, and also finishing his
dissertation at the same time&mdash;was exceptionally supportive early
on, which helped a great deal.</para>

<para>Micah Anderson somehow never seemed too oppressed by his own
writing gig, which was inspiring in a sick, envy-generating sort of
way, but he was ever ready with friendship, conversation, and (on at
least one occasion) technical support.  Thanks, Micah!</para>

<para>Jon Trowbridge and Sander Striker gave both encouragement and
concrete help&mdash;their broad experience in free software provided
material I couldn't have gotten any other way.</para>

<para>Thanks to Greg Stein not only for friendship and well-timed
encouragement, but for showing the Subversion project how important
regular code review is in building a programming community.  Thanks
also to Brian Behlendorf, who tactfully drummed into our heads the
importance of having discussions publicly; I hope that principle is
reflected throughout this book.</para>

<para>Thanks to Benjamin "Mako" Hill and Seth Schoen, for various
conversations about free software and its politics; to Zack Urlocker
and Louis Suarez-Potts for taking time out of their busy schedules to
be interviewed; to Shane on the Slashcode list for allowing his post
to be quoted; and to Haggen So for his enormously helpful comparison
of canned hosting sites.</para>

<para>Thanks to Alla Dekhtyar, Polina, and Sonya for their unflagging
and patient encouragement.  I'm very glad that I will no longer have
to end (or rather, try unsuccessfully to end) our evenings early to go
home and work on "The Book."</para>

<para>Thanks to Jack Repenning for friendship, conversation, and a
stubborn refusal to ever accept an easy wrong analysis when a harder
right one is available.  I hope that some of his long experience with
both software development and the software industry rubbed off on this
book.</para>

<para>CollabNet was exceptionally generous in allowing me a flexible
schedule to write, and didn't complain when it went on far longer than
originally planned.  I don't know all the intricacies of how
management arrives at such decisions, but I suspect Sandhya Klute, and
later Mahesh Murthy, had something to do with it&mdash;my thanks to
them both.</para>

<para>The entire Subversion development team has been an inspiration
for the past five years, and much of what is in this book I learned
from working with them.  I won't thank them all by name here, because
there are too many, but I implore any reader who runs into a
Subversion committer to immediately buy that committer the drink of
his choice&mdash;I certainly plan to.</para>

<para>Many times I ranted to Rachel Scollon about the state of the
book; she was always willing to listen, and somehow managed to make
the problems seem smaller than before we talked.  That helped a
lot&mdash;thanks.</para>

<para>Thanks (again) to Noel Taylor, who must surely have wondered why
I wanted to write another book given how much I complained the last
time, but whose friendship and leadership of Golos&aacute; helped keep
music and good fellowship in my life even in the busiest times.
Thanks also to Matthew Dean and Dorothea Samtleben, friends and
long-suffering musical partners, who were very understanding as my
excuses for not practicing piled up.  Megan Jennings was constantly
supportive, and genuinely interested in the topic even though it was
unfamiliar to her&mdash;a great tonic for an insecure writer.  Thanks,
pal!</para>

<para>I had four knowledgeable and diligent reviewers for this book:
Yoav Shapira, Andrew Stellman, Davanum Srinivas, and Ben Hyde.  If I
had been able to incorporate all of their excellent suggestions, this
would be a better book.  As it was, time constraints forced me to pick
and choose, but the improvements were still significant.  Any errors
that remain are entirely my own.</para>

<para>My parents, Frances and Henry, were wonderfully supportive as
always, and as this book is less technical than the previous one, I
hope they'll find it somewhat more readable.</para>

<para>Finally, I would like to thank the dedicatees, Karen Underhill
and Jim Blandy.  Karen's friendship and understanding have meant
everything to me, not only during the writing of this book but for the
last seven years.  I simply would not have finished without her help.
Likewise for Jim, a true friend and a hacker's hacker, who first
taught me about free software, much as a bird might teach an airplane
about flying.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="disclaimer">
<title>Disclaimer</title>

<para>The thoughts and opinions expressed in this book are my own.
They do not necessarily represent the views of CollabNet or of the
Subversion project.</para>

</sect1>

</preface>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
