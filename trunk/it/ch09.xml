<chapter id="legal">

<title>Licenze, Diritti d'Autore e Brevetti</title>

<simplesect>

<para>La licenza che scegliete probabilmente non avrà grande impatto sull'adozione del vostro progetto, finché è open source. Gli utilizzatori scelgono generalmente software basato su qualità e funzionalità, non sui dettagli della licenza. Nondimeno, avete bisogno di una comprensione dei problemi delle licenze del software libero, compresa l'assicurazione che la licenza sia compatibile con i suoi obiettivi, e che siate capaci di discutere le decisioni sulla licenza con altre persone. Prego notate, che io non sono un legale, e che niente in questo capitolo dovrebbe essere costituito come un consiglio legale. Per quello avrete bisogno di impiegare un un legale o di essere un legale.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="licenses-terminology">
<title>La Terminologia</title>

<para>In una discussione su licenze open source, la prima cosa che balza all'evidenza è che sembrano esserci varie parole per la medesima cosa: <firstterm>software&nbsp;libero</firstterm>,
<firstterm>open&nbsp;source</firstterm>,
<firstterm>FOSS</firstterm>, <firstterm>F/OSS</firstterm>, and
<firstterm>FLOSS</firstterm>.  Partite con l'ordinarle, insieme ad altri pochi termini</para>

<variablelist>
  <varlistentry><term><firstterm>software libero</firstterm></term>
    <listitem><para>Il software può essere liberamente condiviso e modificato, includendolo in qualche forma di codice.  Il termine fu coniato per prima da Richard Stallman, che lo codificò nella GNU
              General Public License (GPL), e fondò la Free
              Software Foundation (<ulink url="http://www.fsf.org/"/>)
              per promuoverne il concetto.</para>

              <para>Sebbene il “software libero” copra quasi esattamente la stessa estensione dell'”open source”, la FSF, fra gli altri, preferisce il primo termine perché esso enfatizza l'idea di libertà e di software redistribuibile liberamente soprattutto come movimento sociale piuttosto che tecnico. La FSF riconosce che il termine è ambiguo&mdash;esso significherebbe “libero” nel senso di “a costo zero”, invece che “libero nel senso di “in libertà” ma ritiene che esso sia ancora il miglior termine, tutto considerato, e che le altre possibilità in inglese hanno le loro ambiguità. (In questo libro “free” è usato nel senso di “in libertà” non nel senso di “a costo zero”).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>software open source</firstterm></term>

    <listitem><para>Software libero sotto altro nome. Ma il nome differente riflette una importante differenza filosofica: open source fu coniato dall'Open Source Initiative (<ulink url="http://www.opensource.org/"/>)
              come una voluta alternativa al “software libero”, per rendere tale software una scelta più gradita per le grandi imprese, presentandola come una metodologia di sviluppo, piuttosto che un movimento politico. Essi anche avevano voluto smontare un altro marchio: quello che ogni cosa “libera” debba essere di bassa qualità.</para>

              <para>Mentre una licenza che sia libera è anche open source, e viceversa, (con piccole trascurabili eccezioni), la gente tende a raccogliere un termine e incollarlo ad essa. In generale quelli che preferiscono  “software libero”, molto verosimilmente sono per avere un atteggiamento morale verso il problema, mentre coloro che preferiscono “open source”, o non la vedono come una questione di libertà, o non sono interessati a metter in mostra il fatto che lo fanno.  Vedere 
              <xref linkend="free-vs-open-source"/><phrase
              output="printed"> in
              <xref linkend="introduction"/></phrase> per una storia più dettagliata dello scisma.</para>

              <para>La Free Software Foundation fa una eccellente&mdash;assolutamente non oggettiva, ma sottile e completamente corretta&mdash;esegesi dei due termini, a <ulink
   url="http://www.fsf.org/licensing/essays/free-software-for-freedom.html"/>.
              la copia dell' Open Source Initiative su questa cosa è divulgata in due pagine: <ulink
   url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"/>
              and <ulink
   url="http://www.opensource.org/advocacy/free-notfree.php"/>.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>FOSS</firstterm>,
                      <firstterm>F/OSS</firstterm>,
                      <firstterm>FLOSS</firstterm></term>

    <listitem><para>Dove ce ne sono due di ogni cosa, lì ce ne saranno presto tre, e questo è esattamente ciò che sta avvenendo con i termini per il software libero. Il mondo accademico, forse volendo la precisione e la comprensione al di sopra dell'eleganza, sembra aver deciso per  FOSS o talvolta per F/OSS che sta per "Free / Open Source Software". Un'altra variante che sta guadagnando slancio è FLOSS che sta per "Free / Libre Open Source Software"
              (<foreignphrase>libre</foreignphrase> è familiare in molte lingue e non soffre dell'ambiguità di “free”; vedere
              <ulink url="http://en.wikipedia.org/wiki/FLOSS"/> per sapere di più).</para>

              <para>Tutti questi termini significano essenzialmente la stessa cosa: software che può essere modificato e redistribuito da chiunque, a volte ma non sempre col requisito che i lavori derivati siano liberamente redistribuibili sotto gli stessi termini.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>DFSG-compliant</firstterm></term>
    <listitem><para>Conforme elle linee guida della  Debian Free Software
              (<ulink
              url="http://www.debian.org/social_contract#guidelines"/>).
              Questo è il testo largamente usato per indicare se una data licenza è veramente open source
              (free, <foreignphrase>libre</foreignphrase>, etc.). La missione del Progetto Debian è quella di mantenere un sistema operativo completamente libero, dimodochè non ci sia bisogno per uno che lo installa di avere il dubbio se abbia il diritto di modificare o redistribuire in parte o del tutto il sistema. Le linee guida Debian Free Software sono il requisito che la licenza di un pacchetto di software deve avere per essere incluso in Debian. Poichè il progetto Debian spese una buona quantità di tempo a pensare come costruire questo testo, le linee guida cui si pervenne si dimostrarono molto robuste
              (vedere <ulink url="http://en.wikipedia.org/wiki/DFSG"/>),
              e da quanto mi risulta, nessuna seria obiezione è stata sollevata su di esse sia dalla Free Software Foundation, sia dalla Open Source Initiative. Se sapete che una licenza è DFSG-conforme, sapete che essa garantisce tutte le importanti libertà (come l'autirizzazione a iniziare un nuovo progetto partendo dal progetto sorgente, anche contro i desideri dell'autore originale) richiesta per sostenere le dinamiche di un progetto open source. Tutte le licenze discusse in questo capitolo sono DFSG-conformi.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>OSI-approved</firstterm></term>
    <listitem><para>Approvata dall'Open Source Initiative.  Questo è un altro testo largamente usato per dire se una liacenza permette tutte le necessarie libertà. La definizione di software open source si basa sulle linee guida del Debian Free Software, e una licenza che ha una definizione quasi sempre ha l'altra. Ci sono state poche eccezioni negli anni, ma riguardanti solo particolari licenze e nessuna di qualche rilevanza qui. Diversamente dal progetto Debian, l'OSI conserva un elenco di tutte le licenze che ha approvato, a
              <ulink url="http://www.opensource.org/licenses/"/>, cosicché "approvata-OSI" è uno stato non ambiguo: una licenza c'è o non c'è nella lista.</para>

              <para>Anche la Free Software Foundation tiene aggiornata una lista delle  licenza a La FSF classifica le licenza a <ulink
              url="http://www.fsf.org/licensing/licenses/license-list.html"/>.
              La FSF classifica le licenza non solo in base al fatto se sono libere, ma se sono compatibili con la GNU General Public License.
La compatibilità GPL è un importante argomento, trattato in
              <xref
              linkend="license-compatibility"/><phrase
              output="printed"> più avanti in questo capitolo</phrase>.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>proprietario</firstterm>,
                      <firstterm>closed-source</firstterm></term>
    <listitem><para>L'opposto di “free” e “open source”. Ciò significa distribuito sotto i termini delle licenze tradizionali, basate sul costo, dove gli utilizzatori pagano per una copia, o sotto altri termini restrittivi sufficienti per impedire alle dinamiche open source di operare. Anche il software distribuito gratis può essere proprietario, se la sua licenza non permette la libera redistribuzione e modifica.</para>

              <para>Generalmente “proprietario” e “closed source” sono sinonimi. Comunque in più “closed source” implica che il codice sorgente non può persino essere visto: poiché il codice sorgente non può essere visto nella maggior parte dei software proprietari, questa è normalmente una differenza senza distinzioni. Comunque, a volte, qualcuno rilascia del software proprietario sotto una licenza che permette ad altri di vedere il codice sorgente. Con confusione essi lo chiamano “open source” o “quasi open source”, ecc.. , ma ciò è ingannevole. La 
              <emphasis>visibilità</emphasis> del codice sorgente non è il problema; la domanda importante è cosa potete fare con esso. Così la differenza fra proprietario e closed source è in gran parte irrilevante e i due termini possono essere trattati come sinonimi.</para>

              <para>A volte <firstterm>commerciale</firstterm> è usato come sinonimo di “proprietario”, ma, parlando appropriatamente, i due termini non sono la stessa cosa. Il software libero può essere software commerciale. Dopotutto il software libero può essere venduto, fin tanto che agli acquirenti non è impedito di dar via copie essi stessi. Esso può essere commercializzato in altre maniere, per esempio vendendo assistenza, servizi, e certificazione. Ci sono compagnie miliardarie in dollari costruite sul software libero oggi, cosicché esso non è né in modo innato anti-commerciale né anti-compagnia. D'altra parte esso <emphasis>è</emphasis> anti-proprietario per natura, e questa è la chiave per cui differisce dai modelli di licenza per-copia</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>di pubblico dominio</firstterm></term>
    <listitem><para>Non avente un intestatario di copyright, nel senso che non c'è nessuno che abbia i diritto di limitare la copia dell'opera. Essere di pubblico dominio non è la stessa cosa di non avere un autore, e, anche se l'autore o gli autori dell'opera hanno deciso di metterla in pubblico dominio, questo non cambia il fatto che essi la hanno scritta.</para>

              <para>Quando un'opera è di pubblico dominio, del materiale facente parte di essa può essere incorporato in un'opera protetta da diritto d'autore, e quindi <emphasis>quella copia</emphasis> di materiale è coperta da diritto d'autore come l'intera opera. Ma ciò non cambia la disponibilità del lavoro originale, che rimane di pubblico dominio. Quindi il rilasciare qualcosa come di pubblico dominio è tecnicamente un modo per renderla “libera”, in accordo con la maggior parte delle organizzazioni che certificano software libero. Comunque usualmente ci sono buone ragioni per usare una licenza invece di rendere di pubblico dominio: anche con il software libero certe limitazioni possono essere utili non solo all'intestatario del copyright, ma anche ai destinatari, come chiarisce la prossima sezione.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term><firstterm>copyleft</firstterm></term>
    <listitem><para>Una licenza che usa la legge sul copyright per ottenere un risultato opposto al copyright tradizionale. A seconda di quello che chiedete, questo significa sia licenze che permettono le libertà in discussione qui, sia, più strettamente, licenze che non solo permettono quelle libertà, ma che
              <emphasis>le obbligano</emphasis>, con lo stipulare che le libertà devono viaggiare con l'opera. La Free Software Foundation usa esclusivamente la seconda definizione; altrove è uguale: la maggior parte delle persone usano il termine allo stesso modo della  Free Software Foundation;&mdash;ma altre, inclusi coloro ohe scrivono per i media prevalenti, tendono ad usare la prima definizione. Non è chiaro che chiunque usi il termine sia cosciente che bisogna fare la distinzione.</para>

              <para>L'esempio canonico di più stretta e decisa definizione è la GNU General Public License che stabilisce che ogni lavoro derivato deve essere rilasciato sotto la GPL; vedere
              <xref
              linkend="license-compatibility"/><phrase
              output="printed"> più avanti in questo capitolo</phrase> per maggiori ragguagli.</para>
    </listitem>
  </varlistentry>

</variablelist>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-aspects">
<title>Aspetti Delle Licenze</title>

<para>Sebbene ci siano molte licenze di software libero disponibili, nei punti più importati esse dicono la stessa cosa: che chiunque può modificare il codice, che chiunque può redistribuirlo sia nella forma originale che in quella modificata, e che i detentori del copyright non forniscono alcuna garanzia (evitare responsabilità dato che le persone potrebbero far girare versioni modificate senza conoscerle).  La differenza fra le licenze si riassume in due spesso-ricorrenti questioni:</para>

<variablelist>
  <varlistentry><term>compatibilità con licenze proprietarie</term>
    <listitem><para>Alcune licenze libere permettono al codice da esse coperto di essere usato in programmi proprietari. Ciò non intacca i termini della licenza del software proprietario: è sempre proprietaria, succede solo che contiene del software non proprietario. La licenza Apache, la licenza X Consortium, la licenza stile-BSD e la licenza stile MIT sono tutte licenze proprietarie-compatibili.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>compatibilità con altre licenze libere</term>
    <listitem><para>La maggior parte delle licenze libere sono compatibili l'una con l'altra, nel senso che il codice sotto una licenza può essere combinato con il codice sotto un'altra licenza, e il risultato distribuito sotto un'altra licenza senza violare i termini delle altre. La principale eccezione a queste è la GNU General Public License che richiede che ogni opera che usa un codice rilasciato sotto la GPL sia distribuito sotto la GPL e senza che si aggiunga ulteriore restrizione oltre quello che la GPL richiede. La GPL è compatibile con alcune licenze libere, ma non con altre.  Ciò è discusso con maggiori dettagli in
              <xref linkend="license-compatibility"/><phrase
              output="printed"> più avanti in questo capitolo</phrase>.</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>imposizione del riconoscimento</term>
    <listitem><para>Alcune licenze libere stabiliscono che un uso del codice protetto sia accompagnato da una nota, la cui posizione e presentazione sono usualmente specificate, che dà il riconoscimento agli autori o ai detentori del copyright. Queste licenze sono tuttavia proprietario-compatibili: esse non richiedono che il lavoro derivato sia libero, solamente che sia dato il riconoscimento al codice libero.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Protezione del marchio</term>
    <listitem><para>Una variante dell'obbligo del riconoscimento. Le licenze a-protezione-del-marchio specificano che il nome del software originale(il suo detentore di copyright, o la loro istituzione, ecc..) può non essere usata dai lavori derivati senza previa autorizzazione scritta. Sebbene l'obbligo del riconoscimento insista sul fatto che siano usati certi nomi, e la protezione del marchio sul fatto che non siano usati, essi sono ambedue espressione dello stesso desiderio: che la reputazione del codice originale sia tutelata e trasmessa, senza essere offuscata dall'associazione. </para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Protezione dell'”integrità artistica”"</term>
    <listitem><para>Certe licenze (La Licenza Artistica, usata nella maggior parte dell'implementazione del linguaggio Perl e la licenza TeX di Donald Knut, per esempio) richiedono che la modifica e la redistribuzione siano fatte in modo da distinguere chiaramente fra la versione originaria del codice e qualunque modificazione. Esse permettono essenzialmente alcune libertà ma impongono certi requisiti che permettono facilmente di verificare l'integrità del codice originale. Queste licenze non si sono diffuse molto oltre gli specifici programmi per i quali erano state create e non saranno trattate in questo capitolo; sono menzionate qui per ragioni di completezza.</para> 
    </listitem>
  </varlistentry>
</variablelist>

<para>La maggior parte di questi contratti non sono mutuamente esclusivi e alcune licenze ne includono diverse. L'argomento comune a esse è che esse pongono richieste al destinatario in cambio del diritto del destinatario di usare e/o distribuire il codice. Per esempio, alcuni progetti vogliono che il proprio nome e reputazione si trasmettano con il codice, e questo ha il valore di imporre il carico extra di un riconoscimento o una clausola di marchio; a seconda della sua onerosità, questo carico può far nascere nell'utilizzatore un scelta di una licenza che chieda meno. </para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-compatibility">
<title>La GPL e la compatibilità di Licenza</title>

<para>La linea divisoria di gran lunga più netta in fatto di licenze è quella fra proprietarie-compatibili e proprietarie-incompatibili, cioè fra la GNU General Public License e tutte le altre. Poiché il principale obiettivo dei creatori della GPL è la promozione del software libero, essi hanno deliberatamente creato la licenza per rendere impossibile mischiare il codice sotto licenza GPL con programmi proprietari. Specificatamente, fra i requisiti della GPL (vedere
<ulink url="http://www.fsf.org/licensing/licenses/gpl.html"/> per il suo testo completo ) ci sono questi due:</para>

<orderedlist>
  <listitem><para>Ogni lavoro derivato&mdash; cioè ogni lavoro che contenga una quantità di codice non facile sotto licenza GPL deve essere distribuito sotto licenza GPL.</para> 
  </listitem>
  <listitem><para>Non ulteriori restrizioni devono essere poste sulla redistribuzione sia del codice originale sia di quello derivato. (L'espressione esatta è: "You may not impose any further restrictions on the recipients' exercise of the rights granted herein.")</para>
  </listitem>
</orderedlist>

<para>Con queste condizioni la GPL riesce a rendere la libertà contagiosa. Una volta che il programma sia protetto dalla GPL, i suoi termini di redistribuzione sono <firstterm>virali</firstterm>&mdash;essi passano avanti a ogni altra cosa  in cui il codice è incorporato, rendendo praticamente impossibile usare il codice sotto GPL in programmi closed-source. Comunque le stesse clausole rendono la GPL incompatibile con altre licenze libere. Il modo solito in cui ciò avviene è quello in cui altre licenze impongono un requisito&mdash;per esempio una clausola di riconoscimento che richiede che l'autore originale sia menzionato in qualche modo&mdash; che è incompatibile con il “Non potete imporre interiori restrizioni..” della GPL. Dal punto di vista della Free Software Fondativo, queste conseguenze di second'ordine son auspicabili, o almeno non spiacevoli. La GPL non solo mantiene il suo software libero, ma in pratica fa in modo che il vostro software sia un agente che spinge
<emphasis>altri</emphasis> software a far valere la libertà.</para>

<para>La domanda se sia questo un buon modo di promuovere il software libero è una delle più continue guerre sante in Internet (vedere <xref linkend="holy-wars"/><phrase output="printed">
in <xref linkend="communications"/></phrase>), non vogliamo andare a fondo su questo. La cosa più importante per i nostri propositi è che la compatibilità GPL è un importante problema quando si sceglie una licenza. La GPL è di gran lunga la più importante licenza open source; a <ulink
url="http://freshmeat.net/stats/#license"/>, È al 68% e la successiva licenza più importante  è al 6%. Se volete che il vostro codice sia mescolato liberamete con codice sotto GPL&mdash; e c'è una gran quantità di codice sotto GPL là&mdash;allora potete scegliere una licenza GPL compatibile. La gran parte delle licenze GPL compatibili sono anche proprietarie compatibili: cioè codice sotto una tale licenza può può essere usato sotto una licenza GPL, e può essere usata in un programma proprietario. Certamente, il <emphasis>risultato</emphasis> di questo mixing non sarebbe compatibile con qualsiasi altra licenza, poiché uno sarebbe sotto la GPL e un altro sarebbe sotto una licenza closed source. Ma quello che interessa è che si applica solo ai lavori derivati e non al codice che voi che distribuite per cominciare.</para>

<para>Fortunatamente la Free Software Foundation tiene aggiornata una lista delle licenze compatibili con la GPL e di quelle non compatibili,
a <ulink url="http://www.gnu.org/licenses/license-list.html"/>.  Tutte le licenze discusse in questo capitolo sono in quella lista, da una parte o dall'altra.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="license-choosing">
<title>Scegliere una Licenza</title>

<para>Quando scegliete una licenza per il vostro progetto, per quanto possibile, usate una licenza esistente invece di crearne un'altra. Ci sono due ragioni per cui le licenze esistenti sono le migliori:</para>

<itemizedlist>
  <listitem><para>La familiarità.  Se usate una delle tre o quattro licenze più popolari, la gente non avrà la sensazione di leggere roba giuridica per usare il vostro codice, perché lo ha già fatto per quella licenza da tempo.</para>
  </listitem>
  <listitem><para>La qualità. A meno che non abbiate un team di legali a disposizione, è improbabile che voi spuntiate con una licenza legalmente solida.
Le licenze menzionate sono il frutto di tanto pensare e di tanta esperienza; a meno che il vostro progetto non abbia bisogno di cose speciali, è improbabile che voi fareste di meglio.</para> 
  </listitem>
</itemizedlist>
   
<para> Per applicare una di queste licenze al vostro progetto, vedete
<xref linkend="license-quickstart-applying"/><phrase output="printed">
in <xref linkend="getting-started"/></phrase>.</para>

<sect2 id="license-choosing-mit-x">
<title>La licenza MIT / X Window System </title>

<para>Se il vostro obiettivo è quello che il vostro codice sia accessibile dal più grande numero di sviluppatori e di lavori derivati e non date importanza al fatto che sia usato in programmi proprietari, scegliete la licenza MIT / X Window System (così chiamata perché è la licenza sotto la quale il Massachusetts Institute of Technology rilasciò il codice del sistema X Window). Il messaggio fondamentale di questa licenza è “Siete liberi di usare questo codice in qualunque modo vogliate”. Essa è compatibile con la GNU GPL, ed è breve, semplice e facile da capire:</para>

<screen><para>Copyright (c) &lt;anno&gt; &lt;detentori del copyright&gt;

Il permesso è così garantito, gratuito, a qualunque persona che ottenga una copia di questo software e i file associati di documentazione (il “Software”), per commerciare col Software senza restrizioni, inclusi i diritti illimitati all'uso, alla copia, alla modifica, all'unione, alla pubblicazione, alle sotto licenze e/o a vendere copie del Software, e a permettere a persone alle quali il Software è fornito a fare lo stesso, soggetto alle seguenti condizioni:

L'avviso di copyright summenzionato e questo avviso di permesso devono essere inclusi in tutte le copie o porzioni del Software sottostante.

IL SOFTWARE E' FORNITO “COSI' COM'E'”, SENZA GARANZIA DI ALCUN GENERE, ESPRESSA O IMPLICITA, INCLUDENDO E SENZA ESSERE LIMITATO ALLE GARANZIE DI POTER ESSERE VENDUTO, L'IDONEITA' A UN PARTICOLARE FINE E LA NON VIOLAZIONE DEI DIRITTI ALTRUI. IN NESSUN CASO GLI AUTORI O I DETENTORI DEL COPYRIGHT SARANNO RESPONSABILI PER QUALSIASI RECLAMO, DANNO O ALTRA RESPONSABILITA', SIA IN FORZA DEL CONTRATTO, IN SITUAZIONE NON CONTEMPLATE NEL CONTRATTO O ALTRO, CHE NASCA DA, AL DI FUORI O IN RIFERIMENTO AL SOFTWARE O ALL'USO O AD ALTRE QUESTIONI RIGUARDANTI IL SOFTWARE.</para></screen>

<para>(Presa da <ulink
url="http://www.opensource.org/licenses/mit-license.php"/>.)</para>

</sect2>

<sect2 id="license-choosing-gpl">
<title>La GNU General Public License</title>

<para>Se preferite che il codice del vostro progetto non sia usato in programmi proprietari o se almeno non vi interessa se venga usato o no in programmi proprietari, scegliete la GNU General Public
License
(<ulink url="http://www.fsf.org/licensing/licenses/gpl.html"/>).  La GPL è probabilmente la licenza più ,largamente usata nel mondo oggi. Questo fatto di essere riconosciuta all'istante è di per se stesso uno dei più importanti vantaggi della GPL.</para>

<para>Quando scrivete una libreria con l'intendimento che sia usata come parte di altri programmi, considerate attentamente se le restrizioni imposte dalla GPL siano in linea con gli obiettivi del vostro progetto. In alcuni casi, per esempio, quando state cercando di sostituire una libreria proprietaria concorrente che fa le stesse cose&mdash;può essere molto più strategico licenziare il vostro codice in modo che possa mescolato con programmi proprietari, anche se invece non vorreste ciò. La Free Software Foundation ha anche foggiato una alternativa alla GPL in queste circostanze: la <firstterm>GNU GPL per librerie</firstterm>, più avanti rinominata <firstterm> GNU GPL Minore</firstterm> (la maggior parte della gente usa l'acronimo
<firstterm>LGPL</firstterm>, in ogni caso).  La  LGPL ha meno stringenti restrizioni della GPL, e può essere mescolata facilmente con codice non libero. Comunque, è un po' più complessa e ha bisogno di qualche tempo per essere compresa, cosicché se vi state orientando per usare la GPL, vi consiglio di usare la licenza tipo MIT/X. </para>

<sect3 id="is-the-gpl-free">
<title>La GPL è libera o non libera?</title>

<para>Una conseguenza della scelta della GPL è la possibilità&mdash;piccola ma non infinitamente piccola che voi stessi siate invischiati nella disputa se la GPL sia “libera” o meno, dato che essa pone delle restrizioni su ciò che potete fare con il codice&mdash;cioè la restrizione che il codice non può essere redistribuito sotto ogni altra licenza. Per qualcuno, l'esistenza di questa restrizione significa che la GPL è “meno libera” di licenze più permissive come la licenza MIT/X. Dove questo argomento funziona, certamente, è che, poiché “più libero” è meglio che “meno libero” (dopotutto chi non è a favore della libertà?), conseguentemente queste licenze sono migliori della GPL.</para>

<para>Questo dibattito è un'altra popolare guerra santa (vedere
<xref linkend="holy-wars"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>).  Evitate di parteciparvi, almeno nei forum di progetto. Non tentate di provare che la GPL è meno libera, altrettanto libera, o più libera di altre licenze. Piuttosto mettete l'accento sulle ragioni per cui il vostro progetto ha scelto la GPL. Se il fatto di essere riconosciuta per una licenza è una ragione, ditelo. Se l'obbligo di una licenza libera per lavori derivati è anche un ragione, dite anche questo, ma rifiutatevi di essere coinvolti sulla discussione se ciò rende il codice più o meno "libero". La libertà è un argomento complesso e serve a poco  parlare di esso se la terminologia sta per essere usata come pretesto al posto della sostanza.</para>

<para>Poiché questo è un libro e non argomento di mailing list, comunque ammetterò di non aver mai capito l'argomento “La GPL non è libera”. La sola restrizione che essa impone è che la gente non imponga <emphasis>ulteriori</emphasis> restrizioni.  Dire che ciò dà luogo a minore libertà a me è sempre sembrato come dire che bandire la schiavitù riduce la libertà, perché impedisce a certa gente di possedere schiavi.</para>

<para>(Oh, se siete coinvolti in un a discussione su questo, non rilanciate facendo  analogie incendiarie.)</para>

</sect3>

</sect2>

<sect2 id="license-bsd">
<title>Cosa sulla Licenza BSD?</title>

<para>Una discreta quantità di software open source è distribuito sotto <firstterm>la licenza BSD</firstterm> (o, a volte
una <firstterm>licenza stile BSD</firstterm>). La  licenza originale BSD fu usata dalla Berkeley Software Distribution, con essa l'Università della California rilasciò importanti parti dell'implementazione Unix. La licenza (il testo esatto può essere visto nella sezione 2.2.2. di
<ulink url="http://www.xfree86.org/3.3.6/COPYRIGHT2.html#6"/>) era simile nello spirito alla licenza MIT/X, eccetto che in una clausola:</para>

<blockquote>
<para><emphasis>Tutti i materiali pubblicitari devono mostrare il seguente riconoscimento: Questo prodotto include software sviluppato dall'Università della California, Laboratorio Lawrence Berkeley. </emphasis></para>
</blockquote>

<para>La presenza di quella clausola non solo rese la licenza originale BSD incompatibile con la GPL, ma stabilì anche un pericoloso precedente: che altre organizzazioni mettono simili clausole pubblicitarie nel
<emphasis>loro</emphasis> software libero&mdash;mettendo il nome della propria organizzazione al posto della "l'Università della California,
Lawrence Berkeley Laboratory"&mdash;e i ridistributori di software furono investiti da un sempre crescente carico su quello che a loro era richiesto di esibire. Fortunatamente molti dei progetti che usarono quella licenza diventarono consci del problema, e semplicemente eliminarono la clausola pubblicitaria. Nel 1999 anche l'Università della California fece lo stesso. </para>

<para>Il risultato fu una licenza BSD rivisitata, che è semplicemente una licenza originale BSD con la clausola pubblicitaria rimossa. Comunque, questa storia rende la frase “licenza BSD” un po' ambigua: si riferisce alla licenza revisionata o alla originale? Questo è il motivo per i quale io preferisco la licenza MIT/X, che è essenzialmente equivalente, e che non soffre di nessuna ambiguità. Comunque c'è forse un motivo per preferire la licenza BSD alla MIT/X, ed è quello che la licenza BSD include questa clausola:</para>

<blockquote>
<para><emphasis>Né il nome dell' &lt;ORGANIZZAZIONE&gt; né il nome dei suoi collaboratori può essere usato per sottoscrivere o promuovere prodotti derivati da questo software senza precedente autorizzazione scritta.</emphasis></para>
</blockquote>

<para>Non è chiaro il fatto che senza una tale clausola un destinatario avrebbe avuto i diritti di usare il nome del licenziatario in qualche modo, ma la clausola rimuove ogni possibile dubbio. Per organizzazioni preoccupate del controllo del marchio, quindi, la licenza BSD può essere di poco preferibile alla MIT/X. In generale, comunque, una licenza liberale di copyright non implica che il destinatario abbia il diritto di usare o indebolire il vostro marchio&mdash;  la legge sul copyright e quella sul marchio sono due bestie differenti.</para>

<para>Se volete usare un licenza BSD revisionata, un modello è disponibile a<ulink
url="http://www.opensource.org/licenses/bsd-license.php"/>.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="copyright-assignment">
<title>L'Assegnazione del Copyright e la Proprietà</title>

<para>Ci sono tre modi per maneggiare la proprietà del copyright per il codice libero e la documentazione che sono stati forniti da molta gente. Il primo è ignorare la questione del copyright completamente (io non lo raccomando).
Il secondo è raccogliere un <firstterm>contratto legale di collaborazione</firstterm> (<firstterm>CLA</firstterm>) da ogni persona che lavora al progetto, che garantisce esplicitamente al progetto il diritto di usare quel contributo della persona. Questo e usualmente sufficiente per la maggior parte dei progetti, e la cosa simpatica è che in qualche giurisdizione i CLA possono essere inviati per email. Il terzo è acquisire le vere cessioni dei diritti dai collaboratori, di modo che il progetto (cioè qualche entità legale, nonprofit) sia il possessore legale del copyright per ogni cosa. Questo è il modo legalmente più inattaccabile, ma è anche il più gravoso per i collaboratori; solo pochi progetti insistono su di esso.</para>

<para>Note that even under centralized copyright ownership, the
code<footnote><para>I'll use "code" to refer to both code and
documentation, from now on.</para></footnote> remains free, because
open source licenses do not give the copyright holder the right to
retroactively proprietize all copies of the code.  So even if the
project, as a legal entity, were to suddenly turn around and started
distributing all the code under a restrictive license, that wouldn't
cause a problem for the public community.  The other developers would
simply start a fork based on the latest free copy of the code, and
continue as if nothing had happened.  Because they know they can do
this, most contributors cooperate when asked to sign a CLA or an
assignment of copyright.</para>

<sect2 id="copyright-assignment-none">
<title>Doing Nothing</title>

<para>Most projects never collect CLAs or copyright assignments from
their contributors.  Instead, they accept code whenever it seems
reasonably clear that the contributor intended it to be incorporated
into the project.</para>

<para>Under normal circumstances, this is okay.  But every now and
then, someone may decide to sue for copyright infringement, alleging
that they are the true owner of the code in question and that they
never agreed to its being distributed by the project under an open
source license.  For example, the SCO Group did something like this to
the Linux project, see
<ulink url="http://en.wikipedia.org/wiki/SCO-Linux_controversies"/>
for details.  When this happens, the project will have no
documentation showing that the contributor formally granted the right
to use the code, which could make some legal defenses more
difficult.</para>

</sect2>

<sect2 id="copyright-assignment-cla">
<title>Contributor License Agreements</title>

<para>CLAs probably offer the best tradeoff between safety and
convenience.  A CLA is typically an electronic form that a developer
fills out and sends in to the project.  In many jurisdictions, email
submission is enough.  A secure digital signature may or may not be
required; consult a lawyer to find out what method would be best for
your project.</para>

<para>Most projects use two slightly different CLAs, one for
individuals, and one for corporate contributors.  But in both types,
the core language is the same: the contributor grants the
project <emphasis>"...perpetual, worldwide, non-exclusive, no-charge,
royalty-free, irrevocable copyright license to reproduce, prepare
derivative works of, publicly display, publicly perform, sublicense,
and distribute [the] Contributions and such derivative
works."</emphasis> Again, you should have a lawyer approve any CLA,
but if you get all those adjectives into it, you're probably
fine.</para>

<para>When you request CLAs from contributors, make sure to emphasize
that you are <emphasis>not</emphasis> asking for actual copyright
assignment.  In fact, many CLAs start out by reminding the reader of
this:</para>

<blockquote>
<para><emphasis>This is a license agreement only; it does not transfer
copyright ownership and does not change your rights to use your own
Contributions for any other purpose.</emphasis></para>
</blockquote>

<para>Here are some examples:</para>

<itemizedlist>
  <listitem><para>Individual contributor CLAs:</para>
    <itemizedlist>
      <listitem><para><ulink
        url="http://apache.org/licenses/icla.txt"/>
      </para></listitem>
      <listitem><para><ulink
        url="http://code.google.com/legal/individual-cla-v1.0.html"/>
      </para></listitem>
<!--  <listitem><para><ulink
 url="http://svn.collab.net/repos/svn-org/trunk/documents/individual-cla.txt"/>
      </para></listitem>  -->
    </itemizedlist>
  </listitem>
  <listitem><para>Corporate contributor CLAs:</para>
    <itemizedlist>
      <listitem><para><ulink
        url="http://apache.org/licenses/cla-corporate.txt"/>
      </para></listitem>
      <listitem><para><ulink
        url="http://code.google.com/legal/corporate-cla-v1.0.html"/>
      </para></listitem>
<!--  <listitem><para><ulink
 url="http://svn.collab.net/repos/svn-org/trunk/documents/corporate-cla.txt"/>
      </para></listitem>  -->
    </itemizedlist>
  </listitem>
</itemizedlist>

</sect2>

<sect2 id="copyright-assignment-transfer">
<title>Transfer of Copyright</title>

<para>Copyright transfer means that the contributor assigns to the
project copyright ownership on her contributions.  Ideally, this is
done on paper and either faxed or snail-mailed to the project.</para>

<para>Some projects insist on full assignment because having a single
legal entity own the copyright on the entire code base can be useful
if the terms of the open source license ever need to be enforced in
court.  If no single entity has the right to do it, all the
contributors might have to cooperate, but some might not have time or
even be reachable when the issue arises.</para>

<para>Different organizations apply different amounts of rigor to the
task of collecting assignments.  Some simply get an informal statement
from a contributor on a public list mailing list&mdash;something to
the effect of "I hereby assign copyright in this code to the project,
to be licensed under the same terms as the rest of the code."  At
least one lawyer I've talked to says that's really enough, presumably
because it happens in a context where copyright assignment is normal
and expected anyway, and because it represents a <foreignphrase>bona
fide</foreignphrase> effort on the project's part to ascertain the
developer's true intentions.  On the other hand, the Free Software
Foundation goes to the opposite extreme: they require contributors to
physically sign and mail in a piece of paper containing a formal
statement of copyright assignment, sometimes for just one
contribution, sometimes for current and future contributions.  If the
developer is employed, the FSF asks that the employer sign it
too.</para>

<para>The FSF's paranoia is understandable.  If someone violates the
terms of the GPL by incorporating some of their software into a
proprietary program, the FSF will need to fight that in court, and
they want their copyrights to be as airtight as possible when that
happens.  Since the FSF is copyright holder for a lot of popular
software, they view this as a real possibility.  Whether your
organization needs to be similarly scrupulous is something only you
can decide, in consultation with lawyers.  In general, unless there's
some specific reason why your project needs full copyright assignment,
just go with CLAs; they're easier for everyone.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="dual-licensing">
<title>Dual Licensing Schemes</title>

<para>Some projects try to fund themselves by using a dual licensing
scheme, in which proprietary derivative works may pay the copyright
holder for the right to use the code, but the code still remains free
for use by open source projects.  This tends to work better with code
libraries than with standalone applications, naturally.  The exact
terms differ from case to case.  Often the license for the free side
is the GNU GPL, since it already bars others from incorporating the
covered code into their proprietary product without permission from
the copyright holder, but sometimes it is a custom license that has
the same effect.  An example of the former is the MySQL license,
described at
<ulink url="http://www.mysql.com/company/legal/licensing/"/>; an
example of the latter is Sleepycat Software's licensing strategy,
described at
<ulink
url="http://www.sleepycat.com/download/licensinginfo.shtml"/>.</para>

<para>You might be wondering: how can the copyright holder offer
proprietary licensing for a mandatory fee if the terms of the GNU GPL
stipulate that the code must be available under less restrictive
terms?  The answer is that the GPL's terms are something the copyright
holder imposes on everyone else; the owner is therefore free to
decide <emphasis>not</emphasis> to apply those terms to itself.  A
good way to think of it is to imagine that the copyright owner has an
infinite number of copies of the software stored in a bucket.  Each
time it takes one out of the bucket to send into the world, it can
decide what license to put on it: GPL, proprietary, or something else.
Its right to do this is not tied to the GPL or any other open source
license; it is simply a power granted by copyright law.</para>

<para>The attractiveness of dual licensing is that, at its best, it
provides a way for a free software project to get a reliable income
stream.  Unfortunately, it can also interfere with the normal dynamics
of open source projects.  The problem is that any volunteer who makes
a code contribution is now contributing to two distinct entities: the
free version of the code and the proprietary version.  While the
contributor will be comfortable contributing to the free version,
since that's the norm in open source projects, she may feel funny
about contributing to someone else's semi-proprietary revenue stream.
The awkwardness is exacerbated by the fact that in dual licensing, the
copyright owner really needs to gather formal, signed copyright
assignments from all contributors, in order to protect itself from a
disgruntled contributor later claiming a percentage of royalties from
the proprietary stream.  The process of collecting these assignment
papers means that contributors are starkly confronted with the fact
that they are doing work that makes money for someone else.</para>

<para>Not all volunteers will be bothered by this; after all, their
contributions go into the open source edition as well, and that may be
where their main interest lies.  Nevertheless, dual licensing is an
instance of the copyright holder assigning itself a special right that
others in the project do not have, and is thus bound to raise
tensions at some point, at least with some volunteers.</para>

<para>What seems to happen in practice is that companies based on
dual licensed software do not have truly egalitarian development
communities.  They get small-scale bug fixes and cleanup patches from
external sources, but end up doing most of the hard work with internal
resources.  For example, Zack Urlocker, vice president of marketing at
MySQL, told me that the company generally ends up hiring the most
active volunteers anyway.  Thus, although the product itself is open
source, licensed under the GPL, its development is more or less
controlled by the company, albeit with the (extremely unlikely)
possibility that someone truly dissatisfied with the company's
handling of the software could fork the project.  To what degree this
threat pre&euml;mptively shapes the company's policies I don't know,
but at any rate, MySQL does not seem to be having acceptance problems
either in the open source world or beyond.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="patents">
<title>Patents</title>

<para>Software patents are the lightning rod issue of the moment in
free software, because they pose the only real threat against which
the free software community cannot defend itself.  Copyright and
trademark problems can always be gotten around.  If part of your code
looks like it may infringe on someone else's copyright, you can just
rewrite that part.  If it turns out someone has a trademark on your
project's name, at the very worst you can just rename the project.
Although changing names would be a temporary inconvenience, it
wouldn't matter in the long run, since the code itself would still do
what it always did.</para>

<para>But a patent is a blanket injunction against implementing a
certain idea.  It doesn't matter who writes the code, nor even what
programming language is used.  Once someone has accused a free
software project of infringing a patent, the project must either stop
implementing that particular feature, or face an expensive and
time-consuming lawsuit.  Since the instigators of such lawsuits are
usually corporations with deep pockets&mdash;that's who has the
resources and inclination to acquire patents in the first
place&mdash;most free software projects cannot afford the latter
possibility, and must capitulate immediately even if they think it
highly likely that the patent would be unenforceable in court.  To
avoid getting into such a situation in the first place, free software
projects are starting to code defensively, avoiding patented
algorithms in advance even when they are the best or only available
solution to a programming problem.<footnote><para>Sun Microsystems and
IBM have also made at least a gesture at the problem from the other
direction, by freeing large numbers of software patents&mdash;1600 and
500 respectively&mdash;for use by the open source community.  I am not
a lawyer and thus can't evaluate the real utility of these grants, but
even if they are all important patents, and the terms of the grants
make them truly free for use by any open source project, it would
still be only a drop in the bucket.</para></footnote></para>

<para>Surveys and anecdotal evidence show that not only the vast
majority of open source programmers, but a majority
of <emphasis>all</emphasis> programmers, think that software patents
should be abolished entirely.<footnote><para>See
<ulink url="http://lpf.ai.mit.edu/Whatsnew/survey.html"/> for one such
survey.</para></footnote> Open source programmers tend to feel
particularly strongly about it, and may refuse to work on projects
that are too closely associated with the collection or enforcement of
software patents.  If your organization collects software patents,
then make it clear, in a public and irrevocable way, that the patents
would never be enforced on open source projects, and that they are
only to be used as a defense in case some other party initiates an
infringement suit against your organization.  This is not only the
right thing to do, it's also good open source public relations.<footnote>
<para>For example, RedHat has pledged that open source projects are
safe from its patents, see
<ulink url="http://www.redhat.com/legal/patent_policy.html"/>.</para>
</footnote></para>

<para>Unfortunately, collecting patents for defensive purposes is a
rational action.  The current patent system, at least in the United
States, is by its nature an arms race: if your competitors have
acquired a lot of patents, then your best defense is to acquire a lot
of patents yourself, so that if you're ever hit with a patent
infringement suit you can respond with a similar threat&mdash;then the
two parties usually sit down and work out a cross-licensing deal so
that neither of them has to pay anything, except to their intellectual
property lawyers of course.</para>

<para>The harm done to free software by software patents is more
insidious than just direct threats to code development, however.
Software patents encourage an atmosphere of secrecy among firmware
designers, who justifiably worry that by publishing details of their
interfaces they will be giving technical help to competitors seeking
to slap them with patent infringement suits.  This is not just a
theoretical danger; it has apparently been happening for a long time
in the video card industry, for example.  Many video card
manufacturers are reluctant to release the detailed programming
specifications needed to produce high-performance open source drivers
for their cards, thus making it impossible for free operating systems
to support those cards to their full potential.  Why would the
manufacturers do this?  It doesn't make sense for them to
work <emphasis>against</emphasis> software support; after all,
compatibility with more operating systems can only mean more card
sales.  But it turns out that, behind the design room door, these
shops are all violating one another's patents, sometimes knowingly and
sometimes accidentally.  The patents are so unpredictable and so
potentially broad that no card manufacturer can ever be certain it's
safe, even after doing a patent search.  Thus, manufacturers dare not
publish their full interface specifications, since that would make it
much easier for competitors to figure out whether any patents are
being infringed.  (Of course, the nature of this situation is such
that you will not find a written admission from a primary source that
it is going on; I learned it through a personal communication.)</para>

<para>Some free software licenses have special clauses to combat, or at
least discourage, software patents.  The GNU GPL, for example, contains
this language:</para>

<screen>
  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

[...]

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.
</screen>

<para>The Apache License, Version 2.0
(<ulink url="http://www.apache.org/licenses/LICENSE-2.0"/>) also
contains anti-patent requirements.  First, it stipulates that anyone
distributing code under the license must implicitly include a
royalty-free patent license for any patents they might hold that could
apply to the code.  Second, and most ingeniously, it punishes anyone
who initiates a patent infringement claim on the covered work, by
automatically terminating their implicit patent license the moment
such a claim is made:</para>

<screen>
3. Grant of Patent License. Subject to the terms and conditions of
this License, each Contributor hereby grants to You a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except
as stated in this section) patent license to make, have made, use,
offer to sell, sell, import, and otherwise transfer the Work, where
such license applies only to those patent claims licensable by such
Contributor that are necessarily infringed by their Contribution(s)
alone or by combination of their Contribution(s) with the Work to
which such Contribution(s) was submitted. If You institute patent
litigation against any entity (including a cross-claim or counterclaim
in a lawsuit) alleging that the Work or a Contribution incorporated
within the Work constitutes direct or contributory patent
infringement, then any patent licenses granted to You under this
License for that Work shall terminate as of the date such litigation
is filed.
</screen>

<para>Although it is useful, both legally and politically, to build
patent defenses into free software licenses this way, in the end these
steps will not be enough to dispel the chilling effect that the threat
of patent lawsuits has on free software.  Only changes in the
substance or interpretation of international patent law will do that.
To learn more about the problem, and how it's being fought, go to
<ulink url="http://www.nosoftwarepatents.com/"/>.  The Wikipedia
article <ulink url="http://en.wikipedia.org/wiki/Software_patent"/>
also has a lot of useful information on software patents.  I've also
written a blog post summarizing the arguments against software
patents, at
<ulink url="http://www.rants.org/2007/05/01/how-to-tell-that-software-patents-are-a-bad-idea/"/>.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="licensing-further-resources">
<title>Further Resources</title>

<para>This chapter has only been an introduction to free software
licensing issues.  Although I hope it contains enough information to
get you started on your own open source project, any serious
investigation of licensing issues will quickly exhaust what this book
can provide.  Here is a list of further resources on open source
licensing:</para>

<itemizedlist>
  <listitem><para><citetitle>Understanding Open Source and Free
            Software Licensing</citetitle> by Andrew M. St. Laurent.
            Published by O'Reilly Media, first edition August 2004,
            ISBN:&nbsp;0-596-00581-4.</para>

            <para>This is a full-length book on open source licensing
            in all its complexity, including many topics omitted from
            this chapter.  See
            <ulink url="http://www.oreilly.com/catalog/osfreesoft/"/>
            for details.</para>
  </listitem>

  <listitem><para><citetitle>Make Your Open Source Software
            GPL-Compatible.  Or Else.</citetitle> by David
            A. Wheeler, at
            <ulink
            url="http://www.dwheeler.com/essays/gpl-compatible.html"/>.</para>

            <para>This is a detailed and well-written article on why
            it is important to use a GPL-compatible license even if
            you don't use the GPL itself.  The article also touches on
            many other licensing questions, and has a high density of
            excellent links.</para>
  </listitem>

  <listitem><para><ulink url="http://creativecommons.org/"/></para>

            <para>Creative Commons is an organization that promotes a
            range of more flexible and liberal copyrights than
            traditional copyright practice encourages.  They offer
            licenses not just for software, but for text, art, and
            music as well, all accessible via a user-friendly license
            selector; some of the licenses are copylefts, some are
            non-copyleft but still free, others are simply traditional
            copyrights but with some restrictions relaxed.  The
            Creative Commons web site gives extremely clear
            explanations of what it's about.  If I had to pick one
            site to demonstrate the broader philosophical implications
            of the free software movement, this would be it.</para>
  </listitem>

</itemizedlist>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

