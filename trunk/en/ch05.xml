<chapter id="money">

<title>Organizations, Money, and Business</title>

<simplesect>

<para>This chapter examines how to use money constructively in a free
software environment, and some of the adjustments your organization
might want to consider as it gets involved in free software projects.
This chapter is aimed partly at developers who are paid to work on
open source projects, but even more at their managers and even at the
executives making strategic decisions.  When an organization makes an
investment in open source, people at all levels have to understand not
just how best to structure that investment, but the effects that
long-term open source engagement will have on the organization itself.
Open source can be transformative&nbsp;&mdash;&nbsp;at least when done
right.</para>

<para>This chapter is <emphasis>not</emphasis> primarily about how to
find funding sources for your open source project, though I hope it
will usefully inform that topic.  There are many different ways open
source projects are funded <footnote><para>See <ulink
url="https://en.wikipedia.org/wiki/Business_models_for_open-source_software"
>en.wikipedia.org/wiki/Business_models_for_open-source_software</ulink>
for an incomplete list.</para></footnote>, just as there are many ways
all human endeavors are funded.  While open source is incompatible
with one particular business
model&nbsp;&mdash;&nbsp;monopoly-controlled royalty streams based on
per-copy sales&nbsp;&mdash;&nbsp;it is compatible with all the others,
and indeed is better suited to some of them than proprietary software
is.</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="economics-of-open-source">
<title>The Economics of Open Source</title>

<para>People are still sometimes surprised to learn that most free
software is written by paid developers, not by volunteers.  But the
economics that drive open source are actually quite straightforward: a
company often needs a particular piece of software to be maintained
and developed, and yet does not need a monopoly on that software.
Indeed, it would often be disadvantageous to have a monopoly, because
then the entire burden of maintenance would fall on that one company,
instead of being shared with others who have the same needs.  For
example, most companies have web sites and therefore need a web
server, but almost no companies need exclusive control over the
development of their web server, or intend to sell copies of it on a
proprietary basis.  The same is true of office software suites,
operating system kernels, network connectivity tools, educational
programs, etc&nbsp;&mdash;&nbsp;just as historically it has been true
of electric grids, roads, sewer systems, and other goods that everyone
needs but no one needs to own.  Just as we expect road workers to be
paid, we should expect software developers to be paid as well.</para>

<para>Even in the early days of free software, when the proportion of
truly unpaid volunteers was probably higher than it is now, there were
already developers who were paid for their work.  There was also a lot
of informal subsidy, as there continues to be today.  When a system
administrator writes a network analysis tool to help her do her job,
then posts it online and gets bug fixes and feature contributions from
other system administrators, what's happened is that an unofficial
consortium has been formed.  The consortium's funding comes from the
sysadmins' salaries; its office space and network bandwidth are
donated, albeit unknowingly, by the organizations those people work
for.  Those organizations also benefit from the investment, of course,
although they may or may not be institutionally aware of it.</para>

<para>Today such efforts are often more
formalized.  Corporations have become conscious of the benefits of
open source software, and now involve themselves intentionally in its
development.  Developers too have come to expect that really important
projects will attract funding in one way or another.  The key question
is how the hierarchical command structures of corporations and the
semi-decentralized, non-coercive communities of free software projects
can work productively with each other, and how they can more or
less agree on what "productively" means.</para>

<para>Financial backing is generally welcomed by open source
development communities.  Having paid developers mean that bug reports
are more likely to be listened to, that needed work is more likely to
get done, and that the project will be less vulnerable to the Forces
of Chaos (e.g., a key founding developer suddenly losing interest)
lurking at the edges of every collaborative endeavor.  One key dynamic
is that credibility is contagious, to a point.  When, for example,
Google backs an open source project, people assume the project will
have the chance to succeed or fail on its long-term merits, while
receiving adequate support in its early stages; other participants'
resultant willingness to devote effort to it can then make this a
self-fulfilling prophecy.</para>

<para>However, funding can also bring a perception of control.  If not
handled carefully, money can divide a project into in-group and
out-group developers.  If developers who aren't officially paid to
work on the project get the feeling that design decisions or feature
additions are simply available to the highest bidder, they'll head off
to a project that seems more like a meritocracy and less like unpaid
labor for someone else's benefit.  They may never complain overtly on
the mailing lists.  Instead, there will simply be less and less noise
from external sources, as the "out" developers gradually stop trying
to be taken seriously.  The buzz of small-scale activity will
continue, in the form of bug reports and occasional small fixes.  But
there will be fewer and fewer large code contributions from unexpected
sources, fewer unexpected opinions voiced in design discussions, and
so on.  People sense what's expected of them, and live up (or down) to
those expectations.</para>

<para>Although money needs to be used carefully, that doesn't mean it
can't buy influence.  It most certainly can.  The trick is that it
doesn't buy influence directly&nbsp;&mdash;&nbsp;instead, it buys
development credibility, which is convertible to influence through the
project's decision-making processes.  In a straightforward commercial
transaction, you trade money for what you want.  If you need a feature
added, you sign a contract, pay for it, and (if all goes well) the
work gets done and the feature eventually lands in the product.  In an
open source project, it's not so simple.  You may sign a contract with
some developers, but they'd be fooling themselves&mdash;and
you&mdash;if they guaranteed that the work you paid for would be
accepted by the development community simply because you paid for it.
The work can only be accepted on its own merits and on how it fits
into the community's vision for the software (see <xref
linkend="contracting"/>). You may have some say in that vision, but
you won't be the only voice.</para>

<para>So money can't purchase influence directly, but it can purchase things
that <emphasis>lead to</emphasis> influence.  The most obvious example
is programmers.  If you hire good programmers, and they stick around
long enough to get experience with the software and credibility in the
community, then they can influence the project by the same means as
any other member.  They will have a vote, or if there are many of
them, they will have a voting block<footnote><para>Even though actual
votes may be rare, as noted in <xref linkend="consensus-democracy"/>,
the <emphasis>possibility</emphasis> of a vote has great implicit
power, so membership in the electorate is still important even if no
vote is ever held.</para></footnote>.  If they are respected in the
project, they will have influence beyond just their votes.  There is
no need for paid developers to disguise their motives, either.  After
all, everyone who wants a change made to the software wants it for a
reason.  Your company's reasons are no less legitimate than anyone
else's.  It's just that the weight given to your company's goals will
be determined by its representatives' status in the project, not by
your company's size, budget, or business plan.<footnote><para>When
companies need to guarantee that certain features and bug fixes land
in a specified amount of time, they accomplish this by keeping their
own copy (which may be partially or wholly public) of the project, and
merging it from time to time with a separate public copy that has its
own governance.  Google's Android operating system is a classic
example: Google maintains its own copy of Android, which it governs as it
pleases, and from time to time merges changes between that copy and
the <ulink
url="https://en.wikipedia.org/wiki/Android_%28operating_system%29#Open-source_community"
>Android Open Source Project</ulink>.  Essentially, Google is on a
very long copy-modify-merge loop with respect to the open source
project, and vice versa.  It is in neither side's interests to
permanently diverge from the other.</para></footnote></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="types-of-corporate-involvement">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="types-of-involvement" />
<title>Types of Corporate Involvement</title>

<para>There are many different reasons open source projects get
corporate support.  This list is just a high-level survey.  The items
in it aren't mutually exclusive; often a project's financial backing
will result from several, or even all, of these motivations:</para>

<variablelist>

   <varlistentry><term>Sharing the burden</term>
     <listitem>
     <para>Separate organizations with related software needs often
     find themselves duplicating effort, either by redundantly writing
     similar code in-house, or by purchasing similar products from
     proprietary vendors.  As the inefficiency becomes clear to the
     different parties, they may pool their
     resources&nbsp;&mdash;&nbsp;often gradually, without at first
     realizing the overall trajectory of the
     process&nbsp;&mdash;&nbsp;and create (or join) an open source
     project tailored to their needs.  The advantages are obvious: the
     costs of development are divided, but the benefits accrue to all.
     Although this scenario might seem most intuitive for nonprofits,
     in practice it often happens even among for-profit
     competitors.</para></listitem> 
   </varlistentry>

   <varlistentry><term>Augmenting services</term>
     <listitem>
     <para>When a company sells services which depend on, or are made
     more attractive by, particular open source programs, it is
     naturally in that company's interests to ensure those programs
     are actively maintained.</para></listitem>
   </varlistentry>

   <varlistentry><term>Creating an ecosystem</term>
     <listitem>
     <para>For investors who like to think big, the right open source
     effort can create a new ecosystem&nbsp;&mdash;&nbsp;one in which
     those investors are more likely to flourish.  A good example of
     this kind of investment, as of this writing in 2014, is the
     <ulink url="https://www.meteor.com/" >Meteor.com</ulink>
     project.</para>  
     </listitem>
   </varlistentry>

   <varlistentry><term>Supporting hardware sales</term>
     <listitem>
     <para>The value of computers and computer components is directly
     related to the amount of software available for them.  Hardware
     vendors&mdash;not just whole-machine vendors, but also makers
     of peripheral devices and microchips&mdash;have found that
     having high-quality free software to run on their hardware is
     important to customers.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Undermining a competitor</term>
     <listitem>
     <para>Sometimes companies support a particular open source
     project as a means of undermining a competitor's product, which
     may or may not be open source itself.  Eating away at a
     competitor's market share is usually not the sole reason for
     getting involved with an open source project, but it can be a
     factor.</para></listitem>
   </varlistentry>

   <varlistentry><term>Marketing</term>
     <listitem>
     <para>Having your company associated with a popular open source
     application can be good brand management, not just in the eyes of
     customers but in the eyes of potential employees.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Proprietary relicensing</term>
     <listitem>
     <para><firstterm>Proprietary relicensing</firstterm> is the practice of
     offering software under a traditional proprietary license for
     customers who want to resell it as part of a proprietary
     application of their own, and simultaneously under a free license
     for those willing to use it under open source terms (see <xref
     linkend="proprietary-relicensing"/><phrase output="printed"> in <xref
     linkend="legal"/></phrase>).  If the open source developer
     community is active, the software gets the benefits of wide-area
     debugging and development, yet the company still gets a royalty
     stream to support some full-time programmers.</para>

     <para>Proprietary relicensing is controversial because it is not a "pure
     open source play" (as we say in business-speak), but rather yokes
     funding for open source development to a monopoly-based revenue
     stream.  Whether this is a problem for you depends on where you
     fall on the "open source is just a way of software development"
     to "open source is a way of life" spectrum.  The presence of
     revenue from a proprietary version does not <emphasis>necessarily</emphasis>
     mean that the free software version is worse off, and some very well-known
     and widely-used free software has had corresponding proprietary
     versions (<ulink url="https://en.wikipedia.org/wiki/MySQL"
     >MySQL</ulink> is probably the most famous example).  However,
     some developers dislike the thought that their contributions may
     end up in the proprietary version.  Also, the mere presence of
     the proprietary version suggests the possibility that some of the
     best salaried developers' attention is going to the proprietary
     code, not the open source code.  This tends to undermine other
     developers' faith in the open source project, which in turn makes
     it difficult to develop a truly flourishing ecosystem around the
     open source version.</para>

     <para>None of is meant to persuade you not to do proprietary relicensing.
     You should just be aware that this strategy is unlike the other
     business approaches I've listed here, that it requires more care
     and sophistication to manage successfully, and that it is usually
     incompatible with the presence of a committed and involved
     ecosystem of developers from outside your organization,
     particularly developers who might have their own commercial
     motivations.</para></listitem>
   </varlistentry>

   <varlistentry><term>Donations</term>
     <listitem>
     <para>A widely-used project can sometimes get significant
     contributions, from both individuals and organizations, just by
     soliciting donations, or by doing an organized crowdfunding
     campaign.  See <xref linkend="crowdfunding-and-bounties"/> for a
     detailed discussion of this approach.</para></listitem>
   </varlistentry>

</variablelist>

<para>A funder's business model is not the only factor in how that
funder relates to an open source community.  The historical relationship
between the two also matters: did the company start the project, or is
it joining an existing development effort?  In both cases, the funder
will have to earn credibility, but, not surprisingly, there's a bit
more earning to be done in the latter case.  The organization needs to
have clear goals with respect to the project.  Is the company trying
to keep a position of leadership, or simply trying to be one voice in
the community, to guide but not necessarily govern the project's
direction?  Or does it just want to have a couple of committers
around, able to fix customers' bugs and get the changes into the
public distribution without any fuss?</para>

<para>Keep these questions in mind as you read the guidelines that
follow.  They are meant to apply to any sort of organizational
involvement in a free software project, but every project is a human
environment, and therefore no two are exactly alike.  To some degree,
you will always have to play by ear, but following these principles
will increase the likelihood of things turning out the way you
want.</para>

</sect1>

<!-- ========================== subsection =========================== -->
<sect1 id="governments-and-open-source">
<title>Governments and Open Source</title>

<para>Since the first edition of this book came out in 2005, I've worked with
various U.S. government agencies, at the federal, state, and municipal
levels, to help them develop and release open source software.  I've also been
lucky enough to observe, and in a few cases work with, some government
agencies outside the U.S.  These experiences have convinced me of one
thing: <emphasis>government is different</emphasis>.  If you work at a government agency
and the material in this book so far has made you shake your head and
think "Sure, but it'll never work here", you have my sympathy
&nbsp;&mdash;&nbsp;I know exactly what you mean.  Governments differ
from individuals and from private-sector organizations in some
fundamental ways:

<itemizedlist>
  <listitem>Governments often aren't trying to retain technical
  expertise in-house.  That's what contractors are for, after all.</listitem>
  <listitem>Governments have labyrinthine and in certain ways
  inflexible procurement and employment policies.  These policies can
  make it difficult for a government agency to be nimbly responsive in
  an open source development community.</listitem>
  <listitem>Government agencies tend to be unusually risk-averse.
  Somewhere at the top there's an elected official who, reasonably,
  sees an open source project as just one more surface area for
  opponents to attack.  After all, when development happens in public,
  the inevitable false starts and wrong turns are also public; if
  development were internal, no one else would know about it when
  those things happen.</listitem>
  <listitem>Government officials hunger for well-timed and
  well-controlled publicity events.  This has certain benefits, but it
  can sometimes come at the expense of overall project health.
  This need for publicity is the complement of being risk-averse:
  elected officials and those who work for them understand that most
  people aren't paying much attention most of the
  time&nbsp;&mdash;&nbsp;therefore, those who work in government want
  to ensure that in the few moments when people
  <emphasis>are</emphasis> paying attention, they see something
  good.  This is understandable, but it can cause them to delay
  certain actions&nbsp;&mdash;&nbsp;or, in some cases, do them too
  soon&nbsp;&mdash;&nbsp;based on external publicity implications
  rather than on what's best for the project technically and
  socially.</listitem>
</itemizedlist>

</para>

<para>There are good reasons for all of these things; they've been
true for decades if not centuries, and they're not going to change.
So if you're a government agency and you want to start a successful
open source project, certain adjustments will be necessary to
compensate for the structural idiosyncracies mentioned above.  Much of
that advice is also applicable to non-governmental organizations, and
is already present elsewhere in this chapter, so what I'll do here is
simply list the sections that I think are <emphasis>most</emphasis>
important for a government agency:</para>

<itemizedlist>
  <listitem><xref linkend="rfi-rfp-contract-language"/></listitem>
  <listitem><xref linkend="third-party-review"/></listitem>
  <listitem><xref linkend="lawyers-no-surprises"/></listitem>
  <listitem><xref linkend="lock-in-vs-freedom"/></listitem>
  <listitem><xref linkend="myths-to-dispel"/></listitem>
  <listitem><xref linkend="publicity-events-vs-project-events"/></listitem>
  <listitem><xref linkend="middle-management"/></listitem>
</itemizedlist>

<para>There is one issue in particular that I have encountered over
and over again in government-initiated open source projects.  It is so
common, and so potentially damaging to a project, that I have given it
its own subsection below.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="starting-open-for-govs">
<title>Being Open Source From Day One is Especially Important for
Government Projects</title>

<para>In <xref linkend="be-open-from-day-one" /><phrase
output="printed" > in <xref linkend="getting-started" /></phrase>, I
explained why it's best for an open source project to be run in the
open from the very beginning.  That advice, particularly <xref
linkend="avoid-exposure-events"/>, is if anything even more true for
government code.</para>

<para>Government projects have greater potential to be harmed by a
needless exposure event than private-sector projects have.  Elected
officials and those who work for them are understandably sensitive to
negative public comments.  Thus even for the most conscientious team,
a worrying cloud of uncertainty will surround everything by the time
you're ready to open up hitherto closed code.  How can you ever know
you've got it all cleaned up?  You do your best, but you can never be
totally sure some hawk-eyed hacker out there won't spot something
embarrassing after the release.  The team worries, and worry is an
energy drain: it causes them to spend time chasing down ghosts, and at
the same time can cause them to unconsciously avoid steps that might
risk revealing real problems.</para>

<para>This concern doesn't only apply to government software, of
course.  But in the private sector, businesses sometimes have
competitive reasons to stay behind the curtain until their first
release, even if they intend for the project to be open source in the
long run.  Government projects should not have that motivation to
start out closed, at least in theory, and they have even more to
lose.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="gov-oss-resources">
<title>Resources for Governments Making Open Source Software</title>

<para>There are many organizations and resources meant to help
government agencies do open source development effectively.  In fact,
their number is increasing steadily, as open source becomes more
mainstream and more and more governments realize how much it could
improve their software procurement processes.  I won't even try to
include a complete list of everything out
there&nbsp;&mdash;&nbsp;there is too much, and it changes too quickly.
However, there are a few resources that have been valuable for a few
years already and look likely to remain so for a while.  They are at
least a good set of starting points, especially for agencies in the
United States and in countries with similar systems of government and
civil service.</para>

<para><emphasis>poss2 todo: also: mil-oss, 18F, Gunnar's timeline,
procurement &amp; the question of where expertise should reside; how
to write a contract; liability; ownership; where to host; use vs
creation; be open source from day one.  Mention ORM, CfA.  What other
orgs?  EU?  Open source policies vs open data
policies.</emphasis></para>

<variablelist>
   <varlistentry>
     <term><ulink url="https://18f.gsa.gov/" >18f.gsa.gov</ulink></term>
     <listitem><para>commentary tk</para></listitem>
   </varlistentry>
   <varlistentry>
     <term><ulink url="https://playbook.cio.gov/" >playbook.cio.gov</ulink></term>
     <listitem><para></para></listitem>
   </varlistentry>
   <varlistentry>
     <term><ulink url="http://mil-oss.org/" >mil-oss.org</ulink></term>
     <listitem><para>commentary tk</para></listitem>
   </varlistentry>
   <varlistentry>
     <term><ulink url="http://www.codeforamerica.org/" >codeforamerica.org</ulink></term>
     <listitem><para>commentary tk</para></listitem>
   </varlistentry>
   <varlistentry>
     <term><ulink url="http://www.dwheeler.com/" >dwheeler.com</ulink></term>
     <listitem><para>commentary tk</para></listitem>
   </varlistentry>
</variablelist>

</sect2>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="long-term-developers">
<title>Hire for the Long Term</title>

<para>If you're managing programmers on an open source project, keep
them there long enough that they acquire both technical and political
expertise&mdash;a couple of years, at a minimum.  Of course, no
project, whether open or closed-source, benefits from swapping
programmers in and out too often.  The need for a newcomer to learn
the ropes each time would be a deterrent in any environment.  But the
penalty is even stronger in open source projects, because outgoing
developers take with them not only their knowledge of the code, but
also their status in the community and the human relationships they
have made there.</para>

<para>The credibility a developer has accumulated cannot be
transferred.  To pick the most obvious example, an incoming developer
can't inherit commit access from an outgoing one (see
<xref linkend="money-vs-love"/> later in this chapter), so if the
new developer doesn't already have commit access, he will have to
submit patches until he does.  But commit access is only the most
easily quantifiable manifestation of lost influence.  A long-time developer
also knows all the old arguments that have been hashed and rehashed on
the discussion lists.  A new developer, having no memory of those
conversations, may try to raise the topics again, leading to a loss of
credibility for your organization; the others might wonder "Can't
they remember anything?"  A new developer will also have no political
feel for the project's personalities, and will not be able to
influence development directions as quickly or as smoothly as one
who's been around a long time.</para>

<para>Train newcomers through a program of supervised engagement.  The
new developer should be in direct contact with the public development
community from the very first day, starting off with bug fixes and
cleanup tasks, so he can learn the code base and acquire a reputation
in the community, yet not spark any long and involved design
discussions.  All the while, one or more experienced developers should
be available for questioning, and should be reading every post the
newcomer makes to the development lists, even if they're in threads
that the experienced developers normally wouldn't pay attention to.
This will help the group spot potential rocks before the newcomer runs
aground.  Private, behind-the-scenes encouragement and pointers can
also help a lot, especially if the newcomer is not accustomed to
massively parallel peer review of his code.</para>

<sect2 id="integrating-new-paid-dev">
<title>Case study</title>

<para>At CollabNet, when we hired a new developer to work on
Subversion, we would sit down together and pick some open bugs for the
new person to cut his teeth on.  We'd discuss the technical outlines
of the solutions, and then assign at least one experienced developer
to (publicly) review the patches that the new developer would (also
publicly) post.  We typically didn't even look at the patch before the
main development list saw it, although we could if there were some
reason to.  The important thing is that the new developer goes through
the process of public review, learning the code base while
simultaneously becoming accustomed to receiving critiques from
complete strangers.  But we also tried to coordinate the timing so
that our own review came immediately after the posting of the patch.
That way the first review the list sees is ours, which can help set
the tone for the others' reviews.  It also contributes to the idea
that this new person is to be taken seriously: if others see that
we're putting in the time to give detailed reviews, with thorough
explanations and references into the archives where appropriate,
they'll appreciate that a form of training is going on, and that it
probably signifies a long-term investment.  This can make them more
positively disposed toward the developer, to the degree of spending a
little extra time answering questions and reviewing patches
themselves.</para>
</sect2>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="appear-as-many">
<title>Appear as Many, Not as One</title>

<para>Your developers should strive to appear in the project's public
forums as individual participants, rather than as a monolithic
corporate presence.  This is not because there is some negative
connotation inherent in monolithic corporate presences (well, perhaps
there is, but that's not what this book is about).  Rather, it's
because individuals are the only sort of entity open source projects
are structurally equipped to deal with.  An individual contributor can
have discussions, submit patches, acquire credibility, vote, and so
forth.  A company cannot.</para>

<para>Furthermore, by behaving in a decentralized manner, you avoid
stimulating centralization of opposition.  Let your developers
disagree with each other on the mailing lists.  Encourage them to
review each other's code as often, and as publicly, as they would
anyone else's.  Discourage them from always voting as a bloc, because
if they do, others may start to feel that, just on general principles,
there should be an organized effort to keep them in check.</para>

<para>There's a difference between actually being decentralized and
simply striving to appear that way.  Under certain circumstances,
having your developers behave in concert can be quite useful, and they
should be prepared to coordinate behind the scenes when necessary.
For example, when making a proposal, having several people chime in
with agreement early on can help it along, by giving the impression of
a growing consensus.  Others will feel that the proposal has momentum,
and that if they were to object, they'd be stopping that momentum.
Thus, people will object only if they have a good reason to do so.
There's nothing wrong with orchestrating agreement like this, as long
as objections are still taken seriously.  The public manifestations of
a private agreement are no less sincere for having been coordinated
beforehand, and are not harmful as long as they are not used to
prejudicially snuff out opposing arguments.  Their purpose is merely
to inhibit the sort of people who like to object just to stay in
shape; see <xref linkend="bikeshed"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for more about
them.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="open-motives">
<title>Be Open About Your Motivations</title>

<para>Be as open about your organization's goals as you can without
compromising business secrets.  If you want the project to acquire a
certain feature because, say, your customers have been clamoring for
it, just say so outright on the mailing lists.  If the customers wish
to remain anonymous, as is sometimes the case, then at least ask them
if they can be used as unnamed examples.  The more the public
development community knows about <emphasis>why</emphasis> you want
what you want, the more comfortable they'll be with whatever you're
proposing.</para>

<para>This runs counter to the instinct&mdash;so easy to acquire, so
hard to shake off&mdash;that knowledge is power, and that the more
others know about your goals, the more control they have over you.
But that instinct would be wrong here.  By publicly advocating the
feature (or bugfix, or whatever it is), you have
<emphasis>already</emphasis> laid your cards on the table.  The only
question now is whether you will succeed in guiding the community to
share your goal.  If you merely state that you want it, but can't
provide concrete examples of why, your argument is weak, and people
will start to suspect a hidden agenda.  But if you give just a few
real-world scenarios showing why the proposed feature is important,
that can have a dramatic effect on the debate.</para>

<para>To see why this is so, consider the alternative.  Too
frequently, debates about new features or new directions are long and
tiresome.  The arguments people advance often reduce to "I personally
want X," or the ever-popular "In my years of experience as a software
designer, X is extremely important to users" or "...is a useless frill
that will please no one."  Predictably, the absence of real-world usage
data neither shortens nor tempers such debates, but instead allows
them to drift farther and farther from any mooring in actual user
experience.  Without some countervailing force, the end result is
likely to be determined by whoever was the most articulate, or
the most persistent, or the most senior.</para>

<para>As an organization with plentiful customer data available, you
have the opportunity to provide just such a countervailing force.  You
can be a conduit for information that might otherwise have no means of
reaching the development community.  The fact that the information
supports your desires is nothing to be embarrassed about.  Most
developers don't individually have very broad experience with how the
software they write is used.  Each developer uses the software in
her own idiosyncratic way; as far as other usage patterns go, she's
relying on intuition and guesswork, and deep down, she knows
this.  By providing credible data about a significant number of users,
you are giving the public development community something akin to
oxygen.  As long as you present it right, they will welcome it
enthusiastically, and it will propel things in the direction you want
to go.</para>

<para>The key, of course, is presenting it right.  It will never do to
insist that simply because you deal with a large number of users, and
because they need (or think they need) a given feature, therefore
your solution ought to be implemented.  Instead, you should focus your
initial posts on the problem, rather than on one particular solution.
Describe in great detail the experiences your customers are
encountering, offer as much analysis as you have available, and as
many reasonable solutions as you can think of.  When people start
speculating about the effectiveness of various solutions, you can
continue to draw on your data to support or refute what they say.  You
may have one particular solution in mind all along, but don't single
it out for special consideration at first.  This is not deception, it
is simply standard "honest broker" behavior.  After all, your true
goal is to solve the problem; a solution is merely a means to that
end.  If the solution you prefer really is superior, other developers
will recognize that on their own eventually&mdash;and then they will
get behind it of their own free will, which is much better than you
browbeating them into implementing it.  (There is also the possibility
that they will think of a better solution.)</para>

<para>This is not to say that you can't ever come out in favor of a
specific solution.  But you must have the patience to see the analysis
you've already done internally repeated on the public development
lists.  Don't post saying "Yes, we've been over all that here, but it
doesn't work for reasons A, B, and C.  When you get right down to it,
the only way to solve this is Q."  The problem is not so much that it
sounds arrogant as that it gives the impression that you have
<emphasis>already</emphasis> devoted some unknown (but, people will
presume, large) amount of analytical resources to the problem, behind
closed doors.  It makes it seem as though efforts have been going on,
and perhaps decisions made, that the public is not privy to&mdash;and
that is a recipe for resentment.</para>

<para>Naturally, <emphasis>you</emphasis> know how much effort you've
devoted to the problem internally, and that knowledge is, in a way, a
disadvantage.  It puts your developers in a slightly different mental
space than everyone else on the mailing lists, reducing their ability
to see things from the point of view of those who haven't yet thought
about the problem as much.  The earlier you can get everyone else
thinking about things in the same terms as you do, the smaller this
distancing effect will be.  This logic applies not only to individual
technical situations, but to the broader mandate of making your goals
as clear as you can.  The unknown is always more destabilizing than
the known.  If people understand why you want what you want, they'll
feel comfortable talking to you even when they disagree.  If they
can't figure out what makes you tick, they'll assume the worst, at
least some of the time.</para>

<para>You won't be able to publicize everything, of course, and people
won't expect you to.  All organizations have secrets; perhaps
for-profits have more of them, but nonprofits have them too.  If you
must advocate a certain course, but can't reveal anything about why,
then simply offer the best arguments you can under that handicap, and
accept the fact that you may not have as much influence as you want in
the discussion.  This is one of the compromises you make in order to
have a development community not on your payroll.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="money-vs-love">
<title>Money Can't Buy You Love</title>

<para>If you're a paid developer on a project, then set guidelines
early on about what the money can and cannot buy.  This does not mean
you need to post twice a day to the mailing lists reiterating your
noble and incorruptible nature.  It merely means that you should be on
the lookout for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you do need to
demonstrate an awareness that they have the potential to arise.</para>

<para>A perfect example of this came up early in the Subversion project.
Subversion was started in 2000 by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which has been the
project's primary funder since its inception, paying the salaries of
several developers (disclaimer: I was one of them for six years).  Soon after the
project began, we hired another developer, Mike Pilato, to join the
effort.  By then, coding had already started.  Although Subversion was
still very much in the early stages, it already had a development
community with a set of basic ground rules.</para>

<para>Mike's arrival raised an interesting question.  Subversion
already had a policy about how a new developer gets commit access.
First, he submits some patches to the development mailing list.  After
enough patches have gone by for the other committers to see that the
new contributor knows what he's doing, someone proposes that he just
commit directly (that proposal is private, as described in <xref
linkend="committers"/>).  Assuming the committers agree, one of
them mails the new developer and offers him direct commit access to
the project's repository.</para>

<para>CollabNet had hired Mike specifically to work on Subversion.
Among those who already knew him, there was no doubt about his coding
skills or his readiness to work on the project.  Furthermore, the
other developers had a very good relationship with the CollabNet
employees, and most likely would not have objected if we'd just given
Mike commit access the day he was hired.  But we knew we'd be setting
a precedent.  If we granted Mike commit access by fiat, we'd be saying
that CollabNet had the right to ignore project guidelines, simply
because it was the primary funder.  While the damage from this would
not necessarily be immediately apparent, it would gradually result in
the non-salaried developers feeling disenfranchised.  Other people
have to earn their commit access&mdash;CollabNet just buys
it.</para>

<para>So Mike agreed to start out his employment at CollabNet like any
other new developer, without commit access.  He sent patches to
the public mailing list, where they could be, and were, reviewed by
everyone.  We also said on the list that we were doing things this way
deliberately, so there could be no missing the point.  After a couple
of weeks of solid activity by Mike, someone (I can't remember if it
was a CollabNet developer or not) proposed him for commit access, and
he was accepted, as we knew he would be.</para>

<!--

The relevant dates for Mike Pilato are:

   http://subversion.tigris.org/servlets/ReadMsg?list=dev&msgNo=2943

   From: "C. Michael Pilato" <cmpilato@collab.net>
   To: "dev@subversion.tigris.org" <dev@subversion.tigris.org>
   Subject: Introducing...me.
   Message-ID: <Pine.LNX.4.21.0101121604240.1653-100000@pascal>
   Date: Fri, 12 Jan 2001 16:04:44 -0800 (PST)

followed by:

   2001-01-30 15:35  C. Michael Pilato <cmpilato@collab.net>

        * configure.in (1.49), subversion/clients/win32/svn_com/svn_com.dsp
        (1.3), subversion/include/svn_path.h (1.26),
        subversion/libsvn_subr/path.c (1.29):

        Fixes path inconsistencies on Windows.  More generally, actually
        makes use of the "style" parameter passed to the path library
        functions to choose the right path delimeter ('/' or '\' at this
        time).  
        
        * config.hw (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for Windows usage.  
        
        * configure.in (SVN_PATH_LOCAL_SEPARATOR): 
          Added this #define for those systems that use autoconf.  
        
        * svn_com.dsp: 
          Added the subversion root directory to the include path so
          config.h can be found by the inclusion of the path headers.  
        
        * svn_path.h (SVN_PATH_REPOS_SEPARATOR, SVN_PATH_URL_SEPARATOR): 
          Added url separator define, and changed naming of repos to be an
          exported symbol.  
        
        * path.c (get_separator_from_style): 
          Added new function for choosing an appropriate path separator,
          given a subversion path style.  Also changed a variety of
          functions in this module to make use of this new function instead of
          simply using SVN_PATH_REPOS_SEPARATOR.  

   2001-01-30 12:23   Karl Fogel <kfogel@collab.net>

        * AUTHORS (1.9):

        Added Mark Murphy, Bill Tutt, C. Michael Pilato.  
-->

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having one's motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes itself the same size as everyone else.</para>

<para>(See also Danese Cooper's blog post, preserved in the Internet
Archive's Wayback Machine at
<ulink url="http://web.archive.org/web/20050227033105/http://blogs.sun.com/roller/page/DaneseCooper/20040916"
       >web.archive.org/web/20050227033105/http://blogs.sun.com/roller/page/DaneseCooper/20040916</ulink>,
for a similar story about commit access.  Cooper was then Sun
Microsystem's "Open Source Diva"&mdash;I believe that was her official
title&mdash;and in the blog entry, she describes how the Tomcat
development community got Sun to hold its own developers to the same
commit-access standards as the non-Sun developers.)</para>

<para>The need for the funders to play by the same rules as everyone
else means that the Benevolent Dictatorship governance model (see
<xref linkend="benevolent-dictator"/><phrase output="printed">
in <xref linkend="social-infrastructure"/></phrase>) is slightly
harder to pull
off in the presence of funding, particularly if the dictator works for
the primary funder.  Since a dictatorship has few rules, it is hard
for the funder to prove that it's abiding by community standards, even
when it is.  It's certainly not impossible; it just requires a project
leader who is able to see things from the point of view of the outside
developers, as well as that of the funder, and act accordingly.  Even
then, it's probably a good idea to have a proposal for non-dictatorial
governance sitting in your back pocket, ready to be brought out the
moment there are any indications of widespread dissatisfaction in the
community.</para>

</sect1>

<!-- ======================== subsection ============================== -->
<sect1 id="contracting">
<title>Contracting</title>

<para>Contracted work needs to be handled carefully in free software
projects.  Ideally, if you hire a contractor you want her work to be
accepted by the community and folded into the public distribution.  In
theory, it wouldn't matter who the contractor is, as long as her work
is good and meets the project's guidelines.  Theory and practice can
sometimes match, too: a complete stranger who shows up with a good
patch <emphasis>will</emphasis> generally be able to get it into the
software.  The trouble is, it's very hard to produce an acceptable
patch for a non-trivial enhancement or new feature while truly being a
complete stranger; one must first discuss it with the rest of the
project.  The duration of that discussion cannot be precisely
predicted.  If the contractor is paid by the hour, you may end up
paying more than you expected; if she is paid a flat sum, she may end
up doing more work than she can afford.</para>

<para>There are two ways around this.  The preferred way is to make an
educated guess about the length of the discussion process, based on
past experience, add in some padding for error, and base the contract
on that.  It also helps to divide the problem into as many small,
independent chunks as possible, to increase the predictability of each
chunk.  The other way is to contract solely for delivery of a patch,
and treat the patch's acceptance into the public project as a separate
matter.  Then it becomes much easier to write the contract, but you're
stuck with the burden of maintaining a private patch for either as
long as you depend on the software or for as long as it takes you to
get that patch into the upstream codebase.</para>

<para>Even with the preferred way, the contract itself cannot require
that the patch be accepted by the upstream project, because that would
involve selling something that's not for sale.  (What if the rest of
the project unexpectedly decides not to support the feature?)
However, the contract can require a <foreignphrase>bona
fide</foreignphrase> effort to get the change accepted by the
community, and that it be committed to the repository if the community
agrees with it.  For example, if the project has written standards
(e.g., about coding conventions, documentation, writing regression
tests, submitting patches, etc), the contract can reference those
standards and specify that the contracted work must meet them.  In
practice, this usually works out the way everyone hopes.</para>

<para>The best tactic for successful contracting is to hire one of the
project's developers&mdash;preferably a committer&mdash;as the
contractor.  This may seem like a form of purchasing influence, and,
well, it is.  But it's not as corrupt as it might seem.  A developer's
influence in the project is due mainly to the quality of her code and
to her interactions with other developers.  The fact that she has a
contract to get certain things done doesn't raise her status in any
way, and doesn't lower it either, though it may make people scrutinize
her more carefully.  Most developers would not risk their long-term
position in the project by backing an inappropriate or widely disliked
new feature.  In fact, part of what you get, or should get, when you
hire such a contractor is advice about what sorts of changes are
likely to be accepted by the community.  You also get a slight shift
in the project's priorities.  Because prioritization is just a matter
of who has time to work on what, when you pay for someone's time, you
cause their work to move up in the priority queue a bit.  This is a
well-understood fact of life among experienced open source developers,
and at least some of them will devote attention to the contractor's
work simply because it looks like it's going to <emphasis>get
done</emphasis>, so they want to help it get done right.  Perhaps they
won't write any of the code, but they'll still discuss the design and
review the code, both of which can be very useful.  For all these
reasons, the contractor is best drawn from the ranks of those already
involved with the project.</para>

<para>This immediately raises two questions: Should contracts ever be
private?  And when they're not, should you worry about creating
tensions in the community by the fact that you've contracted with some
developers and not others?</para>

<para>It's best to be open about contracts when you can.  Otherwise,
the contractor's behavior may seem strange to others in the
community&mdash;perhaps she's suddenly giving inexplicably high
priority to features she's never shown interest in the past.  When
people ask her why she wants them now, how can she answer convincingly
if she can't talk about the fact that she's been contracted to write
them?</para>

<para>At the same time, neither you nor the contractor should act as
though others should treat your arrangement as a big deal.  Too often
I've seen contractors waltz onto a development list with the attitude
that their posts should be taken more seriously simply because they're
being paid.  That kind of attitude signals to the rest of the project
that the contractor regards the fact of the contract&mdash;as opposed
to the code <emphasis>resulting</emphasis> from the contract&mdash;to
be the important thing.  But from the other developers' point of view,
only the code matters.  At all times, the focus of attention should be
kept on technical issues, not on the details of who is paying whom.
For example, one of the developers in the Subversion community handles
contracting in a particularly graceful way.  While discussing his code
changes in IRC, he'll mention as an aside (often in a private remark,
an IRC <firstterm>privmsg</firstterm>, to one of the other committers)
that he's being paid for his work on this particular bug or feature.
But he also consistently gives the impression that he'd want to be
working on that change anyway, and that he's happy the money is making
it possible for him to do that.  He may or may not reveal his
customer's identity, but in any case he doesn't dwell on the contract.
His remarks about it are just an ornament to an otherwise technical
discussion about how to get something done.</para>

<para>That example shows another reason why it's good to be open about
contracts.  There may be multiple organizations sponsoring contracts
on a given open source project, and if each knows what the others are
trying to do, they may be able to pool their resources.  In the above
case, the project's largest funder (CollabNet) was not involved with
these piecework contracts, but knowing that someone else was
sponsoring certain bug fixes allowed CollabNet to redirect its
resources to other bugs, resulting in greater efficiency for the
project as a whole.</para>

<para>Will other developers resent that some are paid for working on
the project?  In general, no, particularly when those who are paid are
established, well-respected members of the community anyway.  No one
expects contract work to be distributed equally among all the
committers.  People understand the importance of long-term
relationships: the uncertainties involved in contracting are such that
once you find someone you can work reliably with, you would be
reluctant to switch to a different person just for the sake of
evenhandedness.  Think of it this way: the first time you hire, there
will be no complaints, because clearly you had to pick
<emphasis>someone</emphasis>&mdash;it's not your fault you can't hire
everyone.  Later, when you hire the same person a second time, that's
just common sense: you already know her, the last time was
successful, so why take unnecessary risks?  Thus, it's perfectly
natural to have a few go-to people in the community, instead of
spreading the work around evenly.</para>

<sect2 id="community-review-acceptance">
<title>Review and Acceptance of Changes</title>

<para>The project's community will always be important to the
long-term success of contract work.  Their involvement in the design
and review process for sizeable changes cannot be an afterthought; It
must be considered part of the work, and fully embraced by the
contractor.  Don't think of community scrutiny as an obstacle to be
overcome&mdash;think of it as a free design board and QA department.
It is a benefit to be aggressively pursued, not merely endured.</para>

<sect3 id="cvs-pserver">
<title>Case study: the CVS password-authentication protocol</title>

<para>In 1995, I was one half of a partnership that provided support
and enhancements for CVS (the Concurrent Versions System; see <ulink
url="http://nongnu.org/cvs" >nongnu.org/cvs</ulink>).  My partner Jim
Blandy and I were, informally, the maintainers of CVS by that point.  But
we'd never thought carefully about how we ought to relate to the
existing mostly part-time and volunteer CVS development community.  We
just assumed that they'd send in patches, and we'd apply them, and
that was pretty much how it worked.</para>

<para>Back then, networked CVS could be done only over a remote login
program such as <literal>rsh</literal>.  Using the same password for
CVS access as for login access was an obvious security risk, and many
organizations were put off by it.  A major investment bank hired us to
add a new authentication mechanism, so they could safely use networked
CVS with their remote offices.</para>

<para>Jim and I took the contract and sat down to design the new
authentication system.  What we came up with was pretty simple (the
United States had export controls on cryptographic code at the time,
so the customer understood that we couldn't implement strong
authentication), but as we were not experienced in designing such
protocols, we still made a few gaffes that would have been obvious to
an expert.  These mistakes would easily have been caught had we taken
the time to write up a proposal and run it by the other developers for
review.  But we never did so, because it didn't occur to us to think
of the development list as a resource to be used to improve our
contracted work.  We knew that people
were probably going to accept whatever we committed, and&mdash;because
we didn't know what we didn't know&mdash;we didn't bother to do the
work in a visible way, e.g., posting patches frequently, making small,
easily digestible commits to a special branch, etc.  The resulting
authentication protocol was not very good, and of course, once it
became established, it was difficult to improve, because of
compatibility concerns.</para>

<para>The root of the problem was not lack of experience; we could
easily have learned what we needed to know.  The problem was our
attitude toward the rest of the development community.  We regarded
acceptance of the changes as a hurdle to leap, rather than as a
process by which the quality of the changes could be improved.  Since
we were confident that almost anything we did would be accepted (as it
was), we made little effort to get others involved.</para>

</sect3>

<para>Obviously, when you're choosing a contractor, you want someone
with the right technical skills and experience for the job.  But it's
also important to choose someone with a track record of constructive
interaction with the other developers in the community.  That way
you're getting more than just a single person; you're getting an agent
who will be able to draw on a network of expertise to make sure the
work is done in a robust and maintainable way.</para>

</sect2>

<!-- 
<para><remark>Contractors as the route to expansion of services and
support.  Businesses who are deeply involved in the development of an
open source program, and who also sell support and customization
services, are in a resource bind.  The more their business grows, the
more strain they are under, trying to stay involved in the open
source side while using those same developers for in-house work.
Contracting with existing developers is one way out of this bind,
but it has to managed carefully (and openly, as far as
possible).</remark></para>
-->

<!-- ========================== subsection =========================== -->
<sect2 id="rfi-rfp-contract-language">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="rfi-rfp-contract-review" />
<title>Update Your RFI, RFP and Contract Language</title>

<para>If you're hiring outside contractors to create software for you,
the language you put in your Requests For Information (RFIs), Requests
For Proposals (RFPs), and contracts becomes crucially
important.</para>

<para>There is one key thing you must understand at the outset: the
decision makers at most large-scale vendors don't really want their
work to be open source.  (The programming staff may feel differently,
of course, but the path to the executive suite is usually smoother
for those with an instinct for monopoly.)  Instead, the vendors would
prefer that a customer contract with them to produce bespoke software
that, under the hood, shares many components with the
<emphasis>other</emphasis> bespoke software they're producing for
other customers.<footnote><para>By the way, those common components
are quite often open source libraries themselves.  These days, it's
typical for a proprietary software product to contain a lot of open
source code, with a layer of proprietary custom code wrapped around
the outside.</para></footnote> That way the vendor can sell mostly the
same product at full price many times.  This is especially
true of vendors to government agencies, because the needs of
government agencies are so similar, and because jurisdictional
boundaries create an artificial multiplicity of customers who all have
pretty much the same needs.  Only minor customizations may be needed
for each instance, but the different customers will pay full price
each time.</para>

<para>As a customer, then, your starting point for a successful
large-scale open source project is to set clear, explicit requirements
about open source development from the beginning.  From the RFI or RFP
stage, all the way through the contract and into delivery and
maintenance, you must require behaviors and deliverables that will
result in a truly open source product&nbsp;&mdash;&nbsp;meaning, among
other things, a product that has the potential to be supported and
customized by vendors other than the one who originally developed it.
Some of those requirements are:</para>

<itemizedlist>
  <listitem>Design and development must be done in the open from the
            start of the project (see <xref
            linkend="be-open-from-day-one" /><phrase output="printed"
            > in <xref linkend="getting-started" /></phrase></listitem>
  <listitem>The code shall be licensed for open source distribution
            from the start of development through delivery and
            deployment.</listitem> 
  <listitem>If the same vendor is both writing the software and
            deploying the production instances, require that deployed
            code must match the open source code.  Don't let
            proprietary tweaks&nbsp;&mdash;&nbsp;and thus vendor
            lock-in&nbsp;&mdash;&nbsp;slip in via the back door.</listitem> 
  <listitem>The product should have no dependencies on proprietary
            software modules; written permission from you must be
            obtained before any such dependencies are
            introduced.</listitem> 
  <listitem>Documentation must be sufficient to allow third parties to
            understand, configure, and deploy the software.</listitem>
  <listitem>The vendor's engagement with third parties who become
            involved in the project should be described and budgeted
            for.  If it is a successful open source project, there
            will eventually be community management overhead, so
            anticipate it: e.g., specify that the vendor must
            establish a participation workflow, review and prioritize
            contributions, etc.</listitem>
  <listitem>Describe the extent to which the vendor is expected to
            participate in publicity about the project, both among
            technical developer communities and among potential
            users.</listitem>
  <listitem>You, the customer, should be the copyright owner of the
            code written by the vendor.</listitem>
  <listitem>For any patents controlled by the vendor and affecting the
            project, there must be an unambiguous, non-restrictive
            patent grant not just to you but to everyone who receives
            the code.</listitem>
</itemizedlist>

<para>Although this is not a complete list&nbsp;&mdash;&nbsp;every
project is different&nbsp;&mdash;&nbsp;it should give you some idea of
how to set expectations with your partners.  The ability to recognize
whether these expectations are being met, in spirit not just in
letter, is also important of course, and is the subject of the next
section.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="third-party-review">
<title>Get Third-Party Review During Development</title>

<para>When a vendor who normally does proprietary development is hired
to do open source development, by default the result is almost always
be a product that is not truly open source and that no third party can
actually deploy<footnote><para>While some selection bias no doubt
informs my experience&nbsp;&mdash;&nbsp;after all, the consultant
tends to get brought in when things are going wrong, not when they're
going right&nbsp;&mdash;&nbsp;my assertion that proprietary vendors
don't get open source right if left to their own habits is based not
just on my own experiences but also on reports from many other people,
who report the same finding with remarkable
consistency.</para></footnote>.  This section is about how to avoid
that problem.  While in some instances the vendor&nbsp;&mdash;&nbsp;or
at least factions within the vendor&nbsp;&mdash;&nbsp;may be
deliberately obstructive, more often it is that they simply don't know
what they don't know, and have no internal source for the knowledge
they need.  Thus the most effective solutions is to bring in that
knowledge from the outside: have a separate contract with a different
company, one entirely independent of the primary vendor, to play the
role of third-party open source participant.</para>

<para>The cost of this kind of independent review is much smaller than
the main contract&nbsp;&mdash;&nbsp;generally, expect on the order of
5% to 10%&nbsp;&mdash;&nbsp;and the benefit can be large: the
difference between an end product that is not useably open source and
one that is truly open source and deployable by anyone.</para>

<para>During development, the reviewers participate the way any third
party would, posting in the project's public discussion forums, using
the installation documentation to try to get the software up and
running, reporting bugs, supplying bugfixes and expecting them to be
responded to, submitting pull requests, and so on.  As the project
nears completion, the
reviewer's job is to confirm that the software can be deployed without
reliance on proprietary dependencies or undocumented environmental
conditions, that any necessary per-deployment configurations can be
made and sample data loaded, that there exist documented paths by
which third parties can participate in the project, and so
on&nbsp;&mdash;&nbsp;in other words, that all the expectations one
would have of an open source project are truly met.</para>

<para>The reviewer's job is not simply to review.  The reviewer is
there to <emphasis>help</emphasis> the primary vendor meet these
expectations throughout development, and to report back to you, the
customer, as to whether the vendor is doing so.  In far too many
cases, I have seen a nominally open source project be contracted for
and developed, only for the customer to discover at the
end&nbsp;&mdash;&nbsp;too late to do anything about
it&nbsp;&mdash;&nbsp;that literally no party besides than the original
vendor can actually deploy, maintain, or extend the software, because
the vendor never came close to meeting normal open source standards.
Had parallel, independent review been built into the process from the
start, the problems would have been detected early, and an
unsatisfactory outcome prevented.  (Relatedly, see <xref
linkend="be-open-from-day-one"/><phrase output="printed"> in <xref
linkend="getting-started"/></phrase>.)</para>

<para>Note that the primary vendor may often be quite unconscious of
this failure.  In their mind, they developed and delivered software
the way they usually do, so what's the problem?  The fact that no one
other than them can deploy or modify the end result doesn't register
as a failure, because in all their other projects that was never
expected anyway.  The fact that the contract requires it is
meaningless unless the customer has some way to test and enforce the
requirement.  Most customers do not have the technical capability
in-house to do that, so without some kind of external review process,
the open source clauses in the contract are effectively void.</para>

<para>Independent review is not merely a sort of open source
insurance, however, though it would be worthwhile even if it were only
that.  It is also an investment in the success of future partnerships
with the primary vendor.  The vendor becomes more inherently capable
of performing quality open source work in the future, because the
reviewer's participation provides a practical education in open source
development.  Thus, done right, third-party review results in both a healthier
long-term relationship with the primary vendor and a healthier open
source project.  It is also part of the process of fostering
concentrations of expertise outside that primary contractor right from
the start, as discussed in <xref
linkend="foster-expertise-diversity"/>.  Although some contractors are
able and willing to do that as part of the contract, many are not.
They either don't have the experience to do it well, or simply don't
want to.  It is up to you, the customer, to make sure it happens.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="lawyers-no-surprises">
<title>Don't Surprise Your Lawyers</title>

<para>Corporate lawyers (and to a lesser degree lawyers in the
non-profit world and in government) sometimes have an uneasy
relationship with free software.  They have often spent their careers
diligently seeking to maximize the control and exclusivity their
clients have over everything the clients
produce&nbsp;&mdash;&nbsp;including software.  A good lawyer will
understand why their client is choosing to deliberately give up that
control for some larger purpose, when it is explained, but even then
may still be unfamiliar with the factors that go into choosing an open
source license for the project, the interaction of the license with
trademarks and patents, the legal technicalities of how to accept
contributed code such that it can be redistributed, etc.  (See <xref
linkend="legal"/> for a deeper discussion of legal issues.)</para>

<para>The ideal course is to make sure your lawyers first understand
<emphasis>why</emphasis> you are running an open source project, and
give them a chance to familiarize themselves with open source in
general, before you bring the particulars of the project to them.  If
the lawyers are good, they will know when they should seek help from
outside counsel and will not hesitate to do so.  By the time the
project is under way, the lawyers should have enough familiarity with
open source legal issues to make basic decisions with confidence, and
to know when and where they need help.</para>

<para>Do not assume that open source is part of a standard legal
education.  It is not, at least as of this writing in 2015.  If you
wait until development is already under way and code is starting to be
published before consulting your legal team, they may be forced to
scramble and make under-researched decisions hastily.  This will not
be good for either the project or the organization, in the long
run.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="funding-non-programming">
<title>Funding Non-Programming Activities</title>

<para>Programming is only part of the work that goes on in an open
source project.  From the point of view of the project's participants,
it's the most visible and glamorous part.  This unfortunately means
that other activities, such as documentation, formal testing, etc., can
sometimes be neglected, at least compared to the amount of attention
they often receive in proprietary software.  Corporate organizations
are sometimes able to make up for this, by devoting some of their
internal software development infrastructure to open source
projects.</para>

<para>The key to doing this successfully is to translate between the
company's internal processes and those of the public development
community.  Such translation is not effortless: often the two are not
a close match, and the differences can only be bridged via human
intervention.  For example, the company may use a different bug
tracker than the public project.  Even if they use the same tracking
software, the data stored in it will be very different, because the
bug-tracking needs of a company are very different from those of a
free software community.  A piece of information that starts in one
tracker may need to be reflected in the other, with confidential
portions removed or, in the other direction, added.</para>

<para>The sections that follow are about how to build and maintain
such bridges.  The end result should be that the open source project
runs more smoothly, the community recognizes the company's investment
of resources, and yet does not feel that the company is
inappropriately steering things toward its own goals.</para>

<!-- integrate the internal into the development community.  If you
     have salaried developers, for example, use them as a liason.
     Don't just have the marketing department send out papers, get
     them fact-checked and also *politics*-checked first.  Make sure
     the QA people know how to use the project's public bug tracker,
     and make sure the community sees that these resources are being
     devoted to the project. -->

<!-- ======================== subsection =========================== -->
<sect2 id="fund-qa">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="subsidize-qa" />
<title>Quality Assurance (i.e., Professional Testing)</title>

<para>In proprietary software development, it is normal to have teams
of people dedicated solely to quality assurance: bug hunting,
performance and scalability testing, interface and documentation
checking, etc.  As a rule, these activities are not pursued as
vigorously by the development community on a free software project.
This is partly because it's hard to get highly-motivated labor for
unglamorous work like testing (committers have their names inscribed
for all time in the history of the project, but there are fewer
mechanisms for remembering the tester who found the bug a committer
fixed), partly because people tend to assume that having a large user
community gives the project good testing coverage, and, in the case of
performance and scalability testing, partly because not all developers
have access to the necessary hardware resources anyway.</para>

<para>The assumption that having many users is equivalent to having
many testers is not entirely baseless.  Certainly there's little point
assigning testers for basic functionality in common environments: bugs
there will quickly be found by users in the natural course of things.
But because users are just trying to get work done, they do not
consciously set out to explore uncharted edge cases in the program's
functionality, and are likely to leave certain classes of bugs
unfound.  Furthermore, when they discover a bug with an easy
workaround, they often silently implement the workaround without
bothering to report the bug.  Most insidiously, the usage patterns of
your customers (the people who drive <emphasis>your</emphasis>
interest in the software) may differ in statistically significant ways
from the usage patterns of the Average User In The Street.</para>

<para>A professional testing team can uncover these sorts of bugs, and
can do so as easily with free software as with proprietary software.
The challenge is to convey the testing team's results back to the
public in a useful form.  In-house testing departments usually have
their own way of reporting test results to their own developers,
involving company-specific
jargon, or specialized knowledge about particular customers and their
data sets.  Such reports would be inappropriate for the public bug
tracker, both because of their form and because of confidentiality
concerns.  Even if your company's internal bug tracking software
were the same as that used by the public project, management might
need to make company-specific comments and metadata changes to the
tickets (for example, to raise an ticket's internal priority, or
schedule its resolution for a particular customer).  Usually such
notes are confidential&mdash;sometimes they're not even shown to the
customer.  But even when they're not confidential, they're not very
helpful to the public project.</para>

<para>Yet the core bug report itself <emphasis>is</emphasis> important
to the public.  In fact, a bug report from your testing department is
in some ways more valuable than one received from users at large,
since the testing department probes for things that other users won't.
Given that you're unlikely to get that particular bug report from any
other source, you definitely want to preserve it and make it
available to the public project.</para>

<para>To do this, either the QA department can file tickets directly in
the public ticket tracker, if they're comfortable with that, or an
intermediary (usually one of the developers) can "translate" the
testing department's internal reports into new tickets in the public
tracker.  Translation simply means describing the bug in a way that
makes no reference to customer-specific information (the reproduction
recipe may use customer data, assuming the customer approves it, of
course).</para>

<para>It is definitely preferable to have the QA department filing
tickets in the public tracker directly.  That gives the public a more
direct appreciation of your company's involvement with the project:
useful bug reports add to your organization's credibility just as any
technical contribution would.  It also gives developers a direct line
of communication to the testing team.  For example, if the internal QA
team is monitoring the public ticket tracker, a developer can commit a
fix for a scalability bug (which the developer may not have the
resources to test herself), and then add a note to the ticket asking
the QA team to see if the fix had the desired effect.  Expect a bit of
resistance from some of the developers; programmers have a tendency to
regard QA as, at best, a necessary evil.  The QA team can easily
overcome this by finding significant bugs and filing comprehensible
reports; on the other hand, if their reports are not at least as good
as those coming from the regular user community, then there's no point
having them interact directly with the development team.</para>

<para>Either way, once a public ticket exists, the original internal
ticket should simply reference the public ticket for technical content.
Management and paid developers may continue to annotate the internal
ticket with company-specific comments as necessary, but use the public
ticket for information that should be available to everyone.</para>

<para>You should go into this process expecting extra overhead.
Maintaining two tickets for one bug is, naturally, more work than
maintaining one ticket.  The benefit is that many more coders will see
the report and be able to contribute to a solution.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="fund-legal-work">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="subsidize-legal" />
<title>Legal Advice and Protection</title>

<para>Corporations, for-profit or nonprofit, are almost the only
entities that ever pay attention to complex legal issues in free
software.  Individual developers often understand the nuances of
various open source licenses, but they generally do not have the time
or resources to competently handle legal issues themselves.  If your
company has a legal department, it can help a project by assisting
with trademark issues, copyright license ownership and compatibility
questions, defense against patent trolls, etc.  If the project decides
to organize formally, or to join an existing umbrella organization,
your legal department can help with issues of corporate law, asset
transfer, reviewing agreements, and other due diligence
matters.</para>

<para>Some more concrete ideas of what sorts of legal help might be
useful are discussed in <xref linkend="legal"/>.  The main thing is to
make sure that communications between the legal department and the
development community, if they happen at all, happen with a mutual
appreciation of the very different universes the parties are coming
from.  On occasion, these two groups talk past each other, each side
assuming domain-specific knowledge that the other does not have.  A
good strategy is to have a liaison (usually a developer, or else a
lawyer with technical expertise) stand in the middle and translate for
as long as needed.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="fund-documentation-usability">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="subsidize-documentation-usability" />
<title>Documentation and Usability</title>

<para>Documentation and usability are both famous weak spots in open
source projects, although I think, at least in the case of
documentation, that the difference between free and proprietary
software is frequently exaggerated.  Nevertheless, it is empirically
true that much open source software lacks first-class documentation
and usability research.</para>

<para>If your organization wants to help fill these gaps for a
project, probably the best thing it can do is hire people who
are <emphasis>not</emphasis> regular developers on the project, but
who will be able to interact productively with the developers.
Not hiring regular developers is good for two reasons: one, that way
you don't take development time away from the project; two, those
closest to the software are usually the wrong people to write
documentation or investigate usability anyway, because they have
trouble seeing the software from an outsider's point of view.</para>

<para>However, it will still be necessary for whoever works on these
problems to communicate with the developers.  Find people who are
technical enough to talk to the coding team, but not so expert in the
software that they can't empathize with regular users anymore.</para>

<para>A medium-level user is probably the right person to write good
documentation.  In fact, after the first edition of this book was
published, I received the following email from an open source
developer named Dirk Reiners:</para>

<blockquote>
<para>One comment on Money::Documentation and Usability: when we had some 
money to spend and decided that a beginner's tutorial was the most 
critical piece that we needed we hired a medium-level user to write it. 
He had gone through the induction to the system recently enough to 
remember the problems, but he had gotten past them so he knew how to 
describe them. That allowed him to write something that needed only 
minor fixes by the core developers for the things that he hadn't gotten 
right, but still covering the 'obvious' stuff devs would have missed.</para>

<para>His case was even better, as it had been his job to introduce a bunch of 
other people (students) to the system, so he combined the experience of 
many people, which is something that was just a lucky occurrence and is 
probably hard to get in most cases.</para>
</blockquote>

<sect3 id="fund-usability">
<title>Funding User Experience (UX) Work</title>

<para>The field of user experience (<firstterm>UX</firstterm>) design
has lately (as of this writing in early 2014) begun to acquire a new
seriousness of purpose and consistency of professional standards.
Naturally, one thing many companies think of when they want to help
improve an open source project is to fund UX work, since that's just
the sort of thing that projects often overlook or, in some cases,
don't even know they need.</para>

<para>As with many other types of engagement, do not assume that a UX
expert can be parachuted into the project.  User experience design is
not a checkbox.  It is an attitude taken by a team throughout
development, and one of the primary qualifications to look for in UX
contractors is their ability to gain long-term credibility with the
developers, and to help developers pay attention to user experience
goals.  For example, in addition to their innate domain knowledge, UX
designers often know how to set up and incorporate feedback from user
trials&nbsp;&mdash;&nbsp;but those trials will only be effective if
the results are presented to the development team in a way that makes
it easy for the developers to take the results seriously.  This can
only happen through a sustained, two-way interaction, in which UX
experts are subscribed to the appropriate project forums and take the
attitude that they are a kind of specialized developer on the project,
rather than an outside expert providing advice.  Use UX experts who
have worked with open source projects before, if possible.</para>

</sect3>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="fund-hosting">
<!-- For link compatibility with a previous misconceived ID. -->
<anchor id="subsidize-hosting" />
<title>Providing Hosting/Bandwidth</title>

<para>The inexorable rise of zero-cost canned hosting sites (see <xref
linkend="canned-hosting" /><phrase output="printed"> in <xref
linkend="technical-infrastructure"/></phrase>) for open source
projects has meant that it is increasingly unnecessary for projects to
get corporate support for basic project-hosting infrastructure.  It
still happens sometimes, usually in cases where the company itself
started the project, and is trying to create or keep an association in
the public's mind between the project and the company.  The most
common technique for creating this association is for the company to
host the project's resources under the company's domain name, thus
getting association through the project's URLs.</para>

<para>While this will cause most users to think of the software as
having <emphasis>something</emphasis> to do with your company, it can
also cause a problem: developers are aware of this associative
tendency too, and may not be very comfortable with having the project
hosted under your domain unless you're seriously contributing to the
project&mdash;not just bandwidth and server space, but significant
amounts of development time.  After all, there are a lot of free
places to host these days.  The community may eventually feel that the
implied misallocation of credit is not worth the minor convenience
brought by donated hosting, and may even attempt to take the project
elsewhere.  So if you want to provide hosting, do so&mdash;but if you
are actually trying to create a public association between your
company and the project, make sure that the level of support you
provide is matched to the amount of credit you claim, whether you
claim it via URL, banner ads, or some other means.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="fund-servers">
<title>Providing Build Farms and Development Servers</title>

<para>Many projects have infrastructure needs beyond just hosting of
code, bug tracker, etc.  For example, projects often use
<firstterm>continuous integration</firstterm> (CI) testing
(a.k.a. <firstterm>build farms</firstterm>) to automatically ensure
that the changes developers are committing both integrate into the
mainline trunk and pass all regression tests<footnote><para>The
Wikipedia page <ulink
url="https://en.wikipedia.org/wiki/Continuous_integration"
>en.wikipedia.org/wiki/Continuous_integration</ulink> has a good
description of this practice and its variants.</para></footnote>.
However, depending on the size and complexity of the codebase, the
number of developers checking in changes, and other factors, running a
responsive build farm can cost more money than any individual
developer has at their disposal.  A good way to help, and gain some
goodwill in the process, is to donate the server space and bandwidth
<emphasis>and</emphasis> the technical expertise to set up the
continuous integration and automated testing.  If you don't have the
technical expertise available on staff, you could hire someone from
the project to do it, or at the very least give some of the project's
developers administrative access to the CI servers so they can set
things up themselves.</para>

</sect2>

<!-- ======================== subsection =========================== -->
<sect2 id="fund-meetings">
<title>Sponsoring Conferences, Hackathons, and other Developer Meetings</title>

<para>A very effective use of funds is to sponsor in-person contact
between developers who might not otherwise meet.  The usefulness of
in-person meetings&nbsp;&mdash;&nbsp;e.g., conferences, hackathons,
smaller informal meetups, etc&nbsp;&mdash;&nbsp;is mainly discussed in
<xref linkend="meeting-in-person"/><phrase output="printed"> in <xref
linkend="managing-participants"/></phrase>.  Here I will simply mention
that encouraging such encounters is a very good use of money in an
open source project.  From a corporate sponsorship point of view,
nothing creates good will like a plane ticket and a hotel room.  From
a personnel management point of view, it is healthy for your own
developers to have in-person contact with their peers in the open
source projects they work on, and when those peers work at at other
companies, project-centric meetups are the perfect neutral ground for
such meetings.</para>

<para>Sending your developers to conferences is also a good way to
signal commitment to a project.  When others meet your developers at a
conference the first time, it is a signal that your company has a real
investment in the project.  But when your developers show up again at
the same conference the next year, still working on the same project,
that's a very powerful signal that your organizational commitment to
the project is long-term and strategic.  This gives your developers an
advantage in influencing the direction of the project, because they
are seen as people who will be around for the long term, and it of
course gives your company a recruiting advantage when you are looking
for new developers to work on the same project.</para>

<para>Even when you don't have people traveling to a meetup, you can
still sponsor some of the meetup's expenses.  Everyone remembers
fondly the company that sponsors the pizza, or lunch, or drinks or
dinner for one night of the meetup.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="marketing">
<title>Marketing</title>

<para>Although most open source developers would probably hate to
admit it, marketing works.  Good marketing <emphasis>can</emphasis>
create buzz around an open source product, even to the point where
hardheaded coders find themselves having vaguely positive thoughts
about the software for reasons they can't quite put their finger on.
It is not my purpose here to dissect the arms-race dynamics of
marketing in general.  Any corporation involved in free software will
eventually find itself considering how to market themselves, the
software, or their relationship to the software.</para>

<para>Much of the advice
in this section is simply about how to avoid common pitfalls in
marketing open source products (see also <xref
linkend="publicity"/><phrase output="printed"> in <xref
linkend="communications"/></phrase>), although we will start by
examining a major marketing advantage that open source products enjoy
over proprietary products, and that open source businesses should
promote as often as possible: the lack of vendor lock-in.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="lock-in-vs-freedom">
<title>Open Source and Freedom from Vendor Lock-In</title>

<para><firstterm>Vendor lock-in</firstterm> is what happens when a
vendor sells a service or product to a customer, perhaps at a cheap
up-front price, but the customer has to make certain further
investments in order to <emphasis>use</emphasis> the
product&nbsp;&mdash;&nbsp;e.g., infrastructure changes, workflow and
other process changes, data reformatting, retraining, etc.  The cost
to the customer of switching <emphasis>away</emphasis> from that
vendor's product is now the strength with which the vendor has the
customer locked in.  Even if the customer is eventually unhappy with the
vendor, by that point the total cost of moving to someone else may
be quite high, and that cost is independent of whatever licensing or
service fees the vendor charges.</para>

<para>The great commercial strength of open source is that product and
vendor are not the same.  In open source, you can switch to another
vendor, or to a combination of vendors, or even a combination of
vendor and in-house support, all while continuing to use the same
product in more or less the same way.</para>

<para>So if you sell open source, make sure your potential customers
are clear on this point, and give them as many concrete examples as
you can.  It may, in some circumstances, even be useful to point out
the existence of some of your competitors, because their presence
paradoxically reassures the customer that choosing you is a safe
decision&nbsp;&mdash;&nbsp;if things don't work out, there are other
options.  If you just make sure things work out, then the customer
will never need to seek out those other options.</para>

<para>Proprietary vendors often compete against open source by talking
about the "<emphasis>total cost of ownership</emphasis>", that is,
they sell against open source's up-front cost of
zero&nbsp;&mdash;&nbsp;no per-copy royalties, no per-seat license
fees&nbsp;&mdash;&nbsp;by pointing out, reasonably enough, that
although there may be no licensing fees, in practice software
integration involves organizational and technical costs that can be
quite significant.  This is quite true, as far as it goes.  What they
don't say is that this argument works against them as much as it works
for them: to the extent that there <emphasis>are</emphasis> such
costs&nbsp;&mdash;&nbsp;and there really are&nbsp;&mdash;&nbsp;the
danger to the customer of vendor lock-in is directly proportional to
them.  I would love to see open source sales representatives talk more
about the "<emphasis>cost of total ownership</emphasis>", that is, how
much does it cost a company to be totally owned by its software
vendors?  With open source, customers are not
owned&nbsp;&mdash;&nbsp;they are the owners, to exactly the degree
that they want to be, and they can outsource as much of that
responsibility to outside vendors as they want.  Their relationships
with those vendors are thus more likely to be based on mutual
satisfaction and mutual benefit, not on an asymmetrical monopoly that
gives existing vendors undue inertia in customers' procurement
decisions.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="goldfish-bowl">
<title>Remember That You Are Being Watched</title>

<para>For the sake of keeping the developer community on
your side, it is <emphasis>very</emphasis> important not to say
anything that isn't demonstrably true.  Audit all claims carefully
before making them, and give the public the means to check your claims
on their own.  Independent fact checking is a major part of open
source, and it applies to more than just the code.</para>

<para>Naturally no one would advise companies to make unverifiable
claims anyway.  But with open source activities, there is an unusually
high quantity of people with the expertise to verify
claims&mdash;people who are also likely to have high-bandwidth
Internet access and the right social contacts to publicize their
findings in a damaging way, should they choose to.  When Global
Megacorp Chemical Industries pollutes a stream, that's verifiable, but
only by trained scientists, who can then be refuted by Global
Megacorp's scientists, leaving the public scratching their heads and
wondering what to think.  On the other hand, your behavior in the open
source world is not only visible and recorded, it is also easy for
many people to check it independently, come to their own conclusions,
and spread those conclusions by word of mouth.  These communications
networks are already in place; they are the essence of how open source
operates, and they can be used to transmit any sort of information.
Refutation is usually difficult, if not impossible&mdash;especially
when what people are saying is true.</para>

<para>For example, it's okay to refer to your organization as having
"founded project X" if you really did.  But don't refer to yourself as
the "makers of X" if most of the code was written by outsiders.
Conversely, don't claim to have a deeply involved, broad-based developer
community if anyone can look at your repository and see that there are
few or no code changes coming from outside your organization.</para>

<sect3 id="activity-cannot-be-faked">
<title>Case study: You can't fake activity, so don't try</title>

<para>Once I saw an announcement by a very well-known computer
company, stating that they were releasing an important software
package under an open source license.  When the initial announcement
came out, I took a look at their now-public version control repository
and saw that it contained only three revisions.  In other words, they
had done an initial import of the source code, but hardly anything had
happened since then.  That in itself was not worrying&mdash;they'd
just made the announcement, after all.  There was no reason to expect
a lot of development activity right away.</para>

<para>Some time later, they made another announcement.  Here is what
it said, with the name and release number replaced by pseudonyms:</para>

  <blockquote>
    <para><emphasis>We are pleased to announce that following
    rigorous testing by the Singer Community, Singer&nbsp;5 for Linux
    and Windows are now ready for production use.</emphasis></para>
  </blockquote>

<para>Curious to know what the community had uncovered in "rigorous
testing," I went back to the repository to look at its recent change
history.  The project was still on revision 3.  Apparently, they
hadn't found a <emphasis>single</emphasis> bug worth fixing before the
release!  Thinking that the results of the community testing must have
been recorded elsewhere, I next examined the bug tracker.  There were
exactly six open tickets, four of which had been open for several months
already.</para>

<para>This beggars belief, of course.  When testers pound on a large
and complex piece of software for any length of time, they will find
bugs.  Even if the fixes for those bugs don't make it into the
upcoming release, one would still expect some version control activity
as a result of the testing process, or at least some new tickets.  Yet
to all appearances, nothing had happened between the announcement of
the open source license and the first open source release.</para>

<para>The point is not that the company was lying about the "rigorous
testing" by the community (though I suspect they were).  The point is
that they were oblivious to how much it <emphasis>looked</emphasis> like
they were lying.  Since neither the version control repository nor the
ticket tracker gave any indication that the alleged rigorous testing
had occurred, the company should either not have made the claim in the
first place, or should have provided a clear link to some tangible
result of that testing ("We found 278 bugs; click here for details").
The latter would have allowed anyone to get a handle on the level of
community activity very quickly.  As it was, it only took me a few
minutes to determine that whatever this community testing was, it had
not left traces in any of the usual places.  That's not a lot of
effort, and I'm sure I'm not the only one who took the trouble.</para>

<para>Transparency and verifiability are also an important part of
accurate crediting, of course.  See
<xref linkend="credit"/><phrase output="printed"> in
<xref linkend="managing-participants"/></phrase> for more on this.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-products">
<title>Don't Bash Competing Open Source Products</title>

<para>Refrain from giving negative opinions about competing open
source software.  It's perfectly okay to give negative
<emphasis>facts</emphasis>&mdash;that is, easily confirmable
assertions of the sort often seen in good comparison charts.  But
negative characterizations of a less rigorous nature are best avoided,
for two reasons.  First, they are liable to start flame wars that
detract from productive discussion.  Second, and more importantly,
some of the developers in <emphasis>your</emphasis> project
may turn out to work on the competing project as well.  This is more
likely than it at first might seem: the projects are already in the
same domain (that's why they're in competition), and developers with
expertise in that domain may make contributions wherever their
expertise is applicable.  Even when there is no direct developer
overlap, it is likely that developers on your project are at least
acquainted with developers on related projects.  Their ability to
maintain constructive personal ties could be hampered by
overly negative marketing messages.</para>

<para>Bashing competing closed-source products seems to be more widely
accepted in the open source world, especially when those products are
made by Microsoft.  Personally, I deplore this tendency (though again,
there's nothing wrong with straightforward factual comparisons), not
merely because it's rude, but also because it's dangerous for a
project to start believing its own hype and thereby ignore the ways in
which the competition may actually be superior.  In general, watch out
for the effect that marketing statements can have on your own
development community.  People may be so excited at being backed by
marketing dollars that they lose objectivity about their software's
true strengths and weaknesses.  It is normal, and even expected, for a
company's developers to exhibit a certain detachment toward marketing
statements, even in public forums.  Clearly, they should not come out
and contradict the marketing message directly (unless it's actually
wrong, though one hopes that sort of thing would have been caught
earlier).  But they may poke fun at it from time to time, as a way of
bringing the rest of the development community back down to
earth.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="competing-developers">
<title>Don't Bash Competing Vendors' Developers</title>

<para>Another situation companies find themselves in, when selling
services based on open source software, is that they have competitors
in the marketplace who may be selling services based on the
<emphasis>same</emphasis> software.</para>

<para>If you're going to sell your company's services, you inevitably
will need to compare your company against others selling the same or
similar things.  This is expected, and in many ways healthy.  However,
be careful to avoid straying into public criticism of the other
development teams or even, to a degree, of their development
priorities.  Your own developers have to work directly with those
competitors' developers in the open source project, and they often
have friendly relations, show up at the same conferences, etc.  Even
if that's not the case today, it may be tomorrow.  Furthermore, you
may find yourself <emphasis>hiring</emphasis> developers from your
competitors; if you burn up available goodwill in advance, you may not
get the best candidates.</para>

<para>Without mentioning names, in part because the situation
eventually got better and I don't want to rekindle the flames now, I
will say that I saw exactly this happen between two companies (one of
whom was my employer at the time) who were competing to sell services
based on the same open source software.  The ill will stirred up among
the project's developers by the marketing statements of one company
(not my employer) had real consequences, and that company lost out on
retaining the services of some excellent developers because it failed
to think through the fact that their marketing in the commercial realm
was also visible and had effects in the development community.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="commercial-vs-proprietary">
<title>"Commercial" vs "Proprietary"</title>

<para>One common pattern among companies involved in open source
software is to market a fully open source version of their product
alongside, and in direct comparison to, an enhanced proprietary
version.  Since the open source version is free software, you
<emphasis>could</emphasis> in theory add those enhancements yourself,
or collaborate with others to do so, but in practice, the effort
required to do that (and to maintain a now separate fork of the
project) is, for each collaborator, much greater than the cost of just
paying for the proprietary version, so it rarely happens.</para>

<para>This sales model is often referred to as "open core", that is, a
core set of functionality that is available as open source software,
with a more featureful application wrapped around it as proprietary
software.  This usually depends on the core open source code having a
non-copyleft license, of course, and is discussed in more detail in
<xref linkend="proprietary-relicensing"/><phrase output="printed"> in
<xref linkend="legal"/></phrase>.</para>

<para>Open core is somewhat controversial among open source
developers, but it has been successful strictly from a business point
of view: companies that do it make money in the way that they expect
to make money.  However, there is bit of marketing slippage that many
of these companies fall into, and I would like to point it out here so
I can try to convince you not to be part of the problem.</para>

<para>If you sell a free software version and an enhanced proprietary
version of your product, please use the words "open source" and
"proprietary" to refer to them, respectively.  Do
<emphasis>not</emphasis> call the open source version the "Community
Edition" and the proprietary version the "Commercial Edition" (or
"Enterprise Edition").  Aside from the fact that everyone knows there
is very little "community" around these so-called "Community
Editions", there is a deeper problem here.  Calling the proprietary
version the "Commercial Edition" implies that open source software is
not commercial, which is completely untrue; calling it the "Enterprise
Edition" implies that open source software is not suitable for
enterprise-level use.  The former is untrue because open source
software is commercial by definition: the license guarantees the
freedom to use the software for any commercial purpose.  (Open source
is <emphasis>anti-monopoly</emphasis>, of course, but that's separate
from commerciality.)  The latter is demonstrably untrue: open source
is widely used at enterprise scale, with and without third-party
support.</para>

<para>This kind of misleading marketing particularly hurts efforts
by open source companies to get their software accepted by governments
and by other buyers who have sophisticated procurement requirements.
These procurement regulations often include stipulations that
purchased software must be "commercial", "commercial off-the-shelf",
or "commercially available"&nbsp;&mdash;&nbsp;definitions that all
open source software meets&nbsp;&mdash;&nbsp;and portraying open
source as non-commercial gives purchasing officers a misimpression.
The extent to which those decision-makers think of open source as
inherently non-commercial hurts open source software as a whole, by
stymieing those who are doing their best to make inroads in these
kinds of procurement environments.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="open-source-and-the-organization">
<title>Open Source and the Organization</title>

<para>Through the consulting work I've done in the years since the
first edition of this book was published, it's become clear to me that
there are special concerns that apply to organizations launching or 
participating in open source projects.  Organizations contain formal
management structures and informal social structures: both are
affected by engagement with open source projects, and both sometimes
need to be changed to better support open source activity by the
individuals within the organization.  In particular, government
agencies have special pitfalls to watch out for when working with open
source projects.</para>

<para>This section therefore examines organizational issues generally,
and some issues specific to government agencies, and offers some
advice about how to make organizational engagement with open source
more likely to succeed.  Many of these recommendations will be brief
and somewhat generalized, not because there isn't more depth to go
into, but because the specifics can vary so much from organization to
organization that exploring all the possibilities here would require
too much space.  Please treat these bits of advice as starting points,
not as complete recipes in themselves.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="myths-to-dispel">
<title>Dispel Myths Within Your Organization</title>

<para>In organizations that have been producing or using proprietary
software for a long time, certain myths about open source software
sometimes circulate.  One traditional source of such myths is, of
course, sales representatives from vendors of proprietary systems.
But one can't attribute it all to them.  It's just as often the case
that someone had some bad experiences in an open source project, or
used open source in the past without ensuring proper support channels,
and since that was their first experience in an unfamiliar territory,
the entire territory is now tainted.</para>

<para>Here are some of the myths I've encountered most frequently:</para>

<variablelist>

   <varlistentry><term><emphasis>If it's open, that means anyone can
   change our code.</emphasis></term>
     <listitem>
     <para>Believe it or not, you need to be prepared to respond to
     this.  Sometimes people&nbsp;&mdash;&nbsp;particularly senior
     decision-makers who have limited technical
     experience&nbsp;&mdash;&nbsp;don't understand the difference
     between an upstream code base allowing anyone to make and modify
     copies, and someone modifying the <emphasis>particular copy you
     deployed</emphasis>.  The former is just the definition of open
     source, of course; the latter would be a security vulnerability
     if it happened, but it has nothing to do with the license on the
     code.  I mention this myth merely to prepare you for encountering
     it, because otherwise you might not expect that anyone could hold
     this particular misunderstanding.  Trust me, they
     <emphasis>can</emphasis>, and you need to be ready to answer
     it.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>Open source software is insecure,
   because anyone can change the code.</emphasis></term>
     <listitem>
     <para>This is so easy to answer that I won't give a detailed
     refutation here; again, I merely note it so you can be prepared
     for it.  If you find yourself having to explain why open source
     software is at least as secure as any other kind of software, if
     not more secure, you may wish to use the excellent resources
     provided by Dr. David A. Wheeler at <ulink
     url="http://www.dwheeler.com/#oss" >dwheeler.com/#oss</ulink>,
     and the arguments at <ulink
         url="http://www.mil-oss.org/learn-more/security-model-misconceptions"
         >mil-oss.org/learn-more/security-model-misconceptions</ulink>.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>Open source comes with no
   support.</emphasis></term>
     <listitem>
     <para>There are plenty of companies that sell support for open
     source software, and they're not hard to find.  There are also
     wonderfully helpful unofficial support communities on the
     Internet for different open source packages, of course, but often
     what organizations are looking for is a phone number to call, or
     a support chat room, that has a guaranteed response time.  These
     are available, it's just that the source from which you
     procure the software may be unrelated to the source from which
     you procure the support.  The best way to respond to this myth is
     to ask specifically for what packages support is desired, and
     then show some sources of support available for
     them.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>Open source is cheaper.</emphasis></term>
     <listitem>
     <para>Licensing costs are often not the largest cost with
     proprietary software; they are often outweight by training costs,
     installation and configuration costs, and other factors that make
     up the "total cost of ownership".  But all of those other costs
     are, on average, the same for open source software.  Don't make
     the mistake of pitching your organization on open source software
     on the grounds that it is cheaper.  At least in terms of the most
     easily quantified costs, it is not.  It is often cheaper in the
     long run, because it frees your organization from proprietary
     vendor lock-in, reduces training costs for new employees (because
     they arrive already familiar with the software), gives you
     greater ability to customize software to your needs, etc.  But
     these are long-term benefits that may not even show up directly
     on a balance sheet unless you take steps to make your accounting
     reveal them.  In the short term, open source generally isn't
     cheaper than proprietary software, and shouldn't be sold that
     way.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>If we open source this project, we'll
   have to spend a lot of time interacting with outside
   developers.</emphasis></term>
     <listitem>
     <para>You open source your code, not your time.  You are never
     under any obligation to respond at all to outside parties, let
     alone engage substantively with them.  You should only do so when
     engaging will benefit
     <emphasis>you</emphasis>&nbsp;&mdash;&nbsp;which it often will;
     after all, one of the key strengths of open source is that it
     enlarges the collective brain of your development team in direct
     proportion to how much they interact with other developers who
     become interested in the code.  But that engagement is always
     under your control and at your discretion.  If you don't want
     your team's attention going to bug reports or development
     questions from the outside, that's fine.  Just be up front about
     that in the project's documentation, so that others can take that
     into account before they put a lot of energy into trying to
     communicate with your developers, and so they can decide whether
     forking to create a more open community would make sense for them
     (indeed, sometimes it might even be to your advantage for them to
     do that).</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>If we open source this project, then
   we'll have to release all our other stuff as open source
   too.</emphasis></term>
     <listitem>
       <para>This myth usually results from a misunderstanding of
       copyleft licenses and the GNU General Public License (GPL) in
       particular.  I won't go into detail here; see <xref
       linkend="legal"/> for a discussion of what the GPL actually
       stipulates.  After reading that chapter, especially
       <xref linkend="copyright-holder-is-special"/>, you will be able
       to explain why this belief is incorrect.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>Developers will devote attention to
   this code just because we released it.</emphasis></term>
     <listitem>
     <para>People with little experience in open source sometimes
     assume that the mere act of releasing code to the public will
     result in a flurry of attention from other
     developers&nbsp;&mdash;&nbsp;questions, patches, high-quality
     code review, bug reports, etc.  But what actually happens, in
     most cases, is silence.  Most good developers are busy people,
     and they're not going to pay attention to your project until they
     have some reason to.  If your code is good and solves a real
     problem, you can expect word to travel to the right places
     eventually, and of course you can help that word along with
     tactically smart announcements and posts (see <xref
     linkend="publicity"/><phrase output="printed"> in <xref
     linkend="communications"/></phrase>).  But until your code has
     had time to naturally accumulate credibility and mindshare, most
     people won't pay any attention, so you shouldn't expect that
     first release to be a big deal for anyone but you.</para>

     <para>There is a situation in which this myth is not a myth.  A
     large organization with a reputation and a dedicated public
     relations team <emphasis>can</emphasis> create buzz around an
     initial open source release.  If you do this, then make sure not
     to squander that buzz: be ready to constructively engage the
     developer attention you attract right away.</para></listitem>
   </varlistentry>

   <varlistentry><term><emphasis>Other companies / cities / whatever
   will pick up this software and start using it right
   away.</emphasis></term>
     <listitem>
     <para>Adopting any software involves costs.  Indeed, merely
     <emphasis>evaluating</emphasis> software involves costs.  So when
     you release a new open source project that you and your team are
     excited about, that doesn't necessarily mean other entities are
     going to pick it up right away and run with it.  Many of them may
     notice it, if you've done your announcement process well, but
     but that just means they'll put it on their list of things to
     investigate based on organization-wide
     priorities&nbsp;&mdash;&nbsp;in other words, they'll take a
     closer look based on <emphasis>their</emphasis> schedule, not
     yours.  So don't expect a flood of early adopters.  You may get a
     few, and they should definitely be cultivated because they will
     provide the word-of-mouth that gets you more adopters.  But in
     general you're more likely to see a trickle of early adopters
     over the first year or so after your initial release, than to see
     a flood of them immediately when the release is
     made.</para></listitem>
   </varlistentry>

</variablelist>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="foster-expertise-diversity">
<title>Foster Pools of Expertise in Multiple Places</title>

<para>Sometimes organizations that are accustomed to procuring
proprietary software treat open source software as if it were
proprietary, in the sense that they assume there is exactly one
authoritative provider of expert support, and that therefore it is
necessary to have a commercial relationship with that provider.</para>

<para>That's not how open source works.  One of the great strengths of
open source is the availability of support from multiple, competing
providers.  It's perfectly fine, and often advisable, to have a
commercial relationship with just one of those sources, but you must
remember that support in open source is fundamentally a
<emphasis>marketplace</emphasis>, not an add-on feature that just
happens to come with the software license, as is often the case with
proprietary software.  Actually, even proprietary software sometimes
has a competitive support marketplace&nbsp;&mdash;&nbsp;think for
example of the third-party support providers for Oracle databases and
Microsoft operating systems&nbsp;&mdash;&nbsp;but in open source these
marketplaces tend to be more fluid and not as dominated by single,
easily-recognizeable giants, because there isn't necessarily one
commercial outfit that automatically assumes a place at the top of
the hierarchy to sell gold-label support (e.g., as Oracle or Microsoft
themselves would be, in the example just given).</para>

<para>Ideally, the goal of fostering independent pools of expertise
should even affect how you structure contracts to develop the software
in the first place.  If you hire a firm to develop new open source
software, have a few of your own programmers working alongside them if
possible, so that you accumulate some in-house expertise.  This is not
necessarily because you won't want to use the same firm for future
maintenance&nbsp;&mdash;&nbsp;they might be a great
choice&nbsp;&mdash;&nbsp;but just so that you'll have a better
bargaining position and not be locked in.  Essentially, the more people
<emphasis>in different organizations</emphasis> who know the code, the
better position that code is in, and the better position you are in.
This is also one of the side benefits of holding hackathons, as
discussed in <xref linkend="fund-meetings"/>.</para>

<para>If your organization does not have enough in-house technical
ability to participate in the development process directly alongside
your contractor, or at least to perform knowledgeable review, then I
strongly recommend finding a third-party to provide
<emphasis>independent</emphasis> deployability and maintainability
review while the project is under way, as described in
<xref linkend="third-party-review"/>.</para>

<sect3 id="talk-to-relevant-communities-early">
<title>Establish contact early with relevant communities</title>

<para>Another way to foster independent sources of expertise is to
establish contact with potentially interested technical communities
early and often during development.  They're almost always out there.
For example, if you're developing software with geospatial
functionality, there is an open source geospatial community that
probably wants to hear about it; if you're developing software to
process financial data, or medical data, there are open source
<firstterm>fintech</firstterm> and medical data communities.</para>

<para>You may even have already announced your project to those people
when you began, as discussed in <xref linkend="announcing"/><phrase
output="printed"> in <xref linkend="getting-started" /></phrase>.  But
there's more you can do to create external reservoirs of knowledge.
When your project runs across a design issue that you suspect others
may have encountered before, it's fine to ask them how they handled
it, as long as you do your homework by first finding out what you can
from their code and documentation and then asking any remaining
questions.  You can also arrange small-scale contracts with developers
who are active in related projects, to serve two goals at once:
improving your project's quality while establishing mindshare in
places that may be strategically useful later.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="publicity-events-vs-project-events">
<title>Don't Let Publicity Events Drive Project Schedule</title>

<para>Although open source projects are amenable to software project
management techniques, in general if you have an active developer
community you do lose some control over the exact timing of events in
the life of the project, especially the scheduling of releases.  Or
rather, you can still have as much control as you want, but now there
are other things you can lose if you exercise that control
in the wrong way.  For example, if the release manager (see <xref
linkend="release-manager"/><phrase output="printed" > in <xref
linkend="development-cycle" /></phrase>) is someone from outside your
organization, and she's doing a good job, then if you try to force the
release to be on a certain precise date, you may cause her and many of
the developers participating in release-specific work to give up and
devote their attention to something else.  You'd gain fine-grained
control of the release schedule, but at the cost of lower quality
releases and the possible loss of some of your development
community.</para>

<para>This is just one example illustrating the general principle that
if you have publicity needs related to an open source project, you
shouldn't let those needs drive the project's schedule.  If you
arrange a press conference for the project reaching 1.0 and being
deployed live, but then the developers decide on an extra two weeks of
testing because of some last-minute bugs, you'll have some improvising
to do.  (This example is drawn from real life, by the way.)</para>

<para>There are two ways to achieve this independence, and they are
not mutually exclusive.  One way is to just let project events drive
publicity instead of the other way around, such as by preparing
release announcements ahead of time but being ready to publish them
based on when the release is actually done.  The other way is to
create publicity events that are not bound to development milestones,
but are rather associated with project-related things that
<emphasis>are</emphasis> able to be scheduled,
such as conference appearances, hackathons, major deployments,
etc.</para>

<para>You might be tempted to try a third way: to bring the
development community into the scheduling process, so that through
consensus you are able schedule certain milestones accurately enough
to tie timed publicity to them.  While that may sound like a good
idea, in practice it rarely works.  An open source development
community's first priority is the software itself, and making sure it
meets the needs its participants are working toward.  Of course the
community wants releases and other deadlines to be met with reasonable
regularity, and every development community makes tradeoffs for that.
But even with the best of intentions among all
parties, you can never guarantee how that tradeoff will be decided in
a particular case, when things get down to the wire.  The outcome of a
community's decision-making process cannot be anticipated with perfect
accuracy, by definition&nbsp;&mdash;&nbsp;if it could, there would be
no need for a decision-making process.  So while it's fine to try to
influence the community's priorities in ways that work to your
advantage, you should avoid relying on that for scheduling purposes,
because you won't succeed at it every time.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="middle-management">
<title>The Key Role of Middle Management</title>

<para>If you intend to have long-term organizational engagement with
open source software projects, the people in your middle layer of
management will play a key role in determining whether you succeed or
fail.  Supervising programmers who spend part or all of their time on
open source projects is more complex than supervising programmers on
purely internal projects.  Many aspects of the developers' work and
schedule will be strongly influenced by external factors not under the
control of management, and in any case the developers' own desires may
not always perfectly line up with the employer's.  After all, each
developer now has two unrelated audiences to satisfy: her employer, as
embodied by her direct manager, and her colleagues in the open source
project, many of whom may work for other employers.  If a manager is
not sufficiently sensitive to this dynamic, then developers can start
to feel as though they serve two conflicting masters.  Sometimes this
conflict is the result of poor planning, and other times it is real
and unavoidable.  Good management can prevent the former situation
from happening in the first place, and in the latter situation, good
management is essential for recognizing it and addressing it in some
way that gives the developer clarity and a way to handle the
conflicted situation.</para>

<para>Middle managers also have not only the usual upward and lateral
internal reporting responsibilities, but are to some degree
responsible for the image&nbsp;&mdash;&nbsp;the open source brand
identity&nbsp;&mdash;&nbsp;of the organization in the projects where
its developers participate.  This is a lot like having an entire extra
constituency to satisfy, and managers who have no experience with open
source participation themselves are unlikely to have a solid
understanding of how to position the organization and its developers
within the project.</para>

<para>Furthemore, the middle layer of management is often best
positioned to serve as a communications conduit and information filter
between the project (that is, the whole project including all its
other participants) and the company.  The wealth of information
available from the activity in an open source project is most useful
to the organization if there is a filtered channel by which the most
interesting activities can be communicated to the relevant
stakeholders within the organization&nbsp;&mdash;&nbsp;stakeholders
who might include other technical staff, executives, and sales team
members.  But both by their position and their temperament, the
programmers themselves are often not best suited to serve as this
conduit.  They may have a very deep understanding of the particular
projects they work on, but they often have a less complete view of the
organization's interests&nbsp;&mdash;&nbsp;for example, in a
commercial environment, the programmers often do not have a clear idea
of how the project fits into the company's various lines of business
or into its sales processes.  Middle managers are better positioned to
maintain the requisite bidirectional sensitivity: aware enough of the
project to ask the programmers for more information when necessary,
and aware enough of the organization to have a sense of what in the
project might be unexpectedly relevant to the organization.</para>

<para>Think carefully about who occupies the middle management
positions that serve as the interface between the organizations's
priorities and the open source project's development direction, and
provide them with extra training if necessary.  It is best if the
managers themselves have had direct experience as participants in some
open source project.  This doesn't have to be the same project as the
one for which they are now managing developers; the situations and
tensions that arise in open source projects tend to be similar, so
experience from one project will generally translate well to other
projects.  But a manager who has never dealt with open source projects
first-hand at all will start with limited ability to understand the
various pressures faced by the organization's developers operating in
open source environments, and limited ability to play the role of
communications conduit between the organization and the
project.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="hiring">
<title>Hiring Open Source Developers</title>

<para>If you're trying to hire developers who have open source
experience, you have a big advantage compared to hiring other kinds of
developers.  Most of the résumé of an open source developer is
public&nbsp;&mdash;&nbsp;it's everything they've ever done in every
open source project they've ever worked on, because all of that
activity is publicly archived.<footnote><para>Brian Fitzpatrick has
written about the usefulness of having an open source résumé in two
articles, <citetitle>The Virtual Referral</citetitle> (<ulink
url="http://www.onlamp.com/pub/a/onlamp/2005/07/14/osdevelopers.html"
>onlamp.com/pub/a/onlamp/2005/07/14/osdevelopers.html</ulink>) and
<citetitle>The Virtual Internship</citetitle> (<ulink
url="http://www.onlamp.com/pub/a/onlamp/2005/08/01/opensourcedevelopers.html"
>onlamp.com/pub/a/onlamp/2005/08/01/opensourcedevelopers.html</ulink>).</para></footnote>
But you shouldn't need to go searching for all of it.  When you put
out a job posting, tell prospective candidates directly that the
résumé they send in should include references to their open source
profile.  This means their committer accounts on the projects where
they've been active (or their account names at the overall project
hosting sites where they're been active, e.g., their GitHub.com
username), the email addresses or usernames they have used when
posting in discussion forums, documentation they have written, and
anything else that would lead you to places where you can see their
open source project activity.</para>

<para>The kind of activity to look for is not only their direct
technical activity, but also their relations with the other developers
in the project.  So look at the candidates commits, but look also at
the frequency with which they reviewed <emphasis>others'</emphasis>
commits, and at their reaction to reviews of their own commits.  In
the project's issue tracker, how often did the candidate respond
constructively to incoming bug reports or contribute useful
information to a bug ticket?  Visit a threaded view of the project's
discussion forums and see how often the candidate's posts were
responded to, and what the general tone of the responses was.  Someone
who consistently causes negative reactions from others in the project
may have social problems as a collaborator, which is important to know
independently of the candidate's raw technical ability.</para>

<para>If candidate is applying for a position that would involve
working on an open source project, but seems to have little or no open
source experience themselves, this is not necessarily a showstopper,
but it's a sign that you should ask some probing questions, and that
you should expect some ramp-up time if you hire them.  If the
candidate is young and inexperienced in general, then lack of
participation in open source is easy to understand.  However, if the
candidate has been a programmer for a while, and especially if they
already have experience as a user of some of the open source software
you'd be hiring them to work on, and yet they have never participated
much in that project except to download and use it, then you should
ask them questions about why.  There is nothing wrong with being
uninvolved as a participant in software that one uses.  However, if
you're hiring someone to <emphasis>be</emphasis> a participant in a
project, and they already had a chance to be and chose not to, that
implies a lack of intrinsic motivation to participate and may indicate
that this person's temperament is not what you're looking for.  Or
there may be other reasons&nbsp;&mdash;&nbsp;for example, the
candidate's prior management forbade them from participating.
Whatever the reasons are, you should make sure you find out.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="crowdfunding-and-bounties">
<title>Crowdfunding and Bounties</title>

<para>Perhaps unfairly, I will group crowdfunding campaigns and
bounty-based development incentives together here, not because they
are the same thing, but because to the extent that they are
problematic as ways of funding free software development, their
problems are similar.</para>

<para><firstterm>Crowdfunding</firstterm> refers to many
funders&nbsp;&mdash;&nbsp;often mostly
individuals&nbsp;&mdash;&nbsp;coming together to fund a particular
piece of development.  Crowdfunding campaigns are usually either "all
or nothing", meaning that each funder pledges money toward a total
threshold and the pledges are collected only if the threshold is met,
or "keep it all", which is essentially traditional donation: funds go
immediately to the recipient whether or not a stated goal amount is
ever met.  <ulink url="http://goteo.org/" >Goteo.org</ulink> and
<ulink url="https://Kickstarter.com/" >Kickstarter.com</ulink> are
probably the best-known examples of all-or-nothing crowdfunding
services, though there are many others (I like Goteo because their
platform is itself free software, and because it is meant specifically
for freely-licensed projects, whereas Kickstarter does not take a
position on restrictiveness of licensing).  There are also sites like
<ulink url="https://www.indiegogo.com/" >Indiegogo</ulink> that
support both models<footnote><para><ulink
url="https://en.wikipedia.org/wiki/Comparison_of_crowdfunding_services"
>en.wikipedia.org/wiki/Comparison_of_crowdfunding_services</ulink>.</para></footnote></para>

<para><firstterm>Bounties</firstterm> are one-time rewards for
completing specific tasks, such as fixing a bug or implementing a new
feature.  Bounties are often offered directly by the interested
parties, since there is no need for a pledge-collecting system, but
the site <ulink url="https://www.bountysource.com/"
>BountySource.com</ulink> also serves as a clearinghouse for open
source development bounties.</para>

<para>While both crowdfunding and bounties have funded some open
source work, they have not been a major economic force compared to
salaried or contracted development.  This does not mean you shouldn't
consider them: depending on the problem you're trying to solve, and on
the shapes of solutions you're willing to accept, crowdfunding or
bounty funding might be a good answer.  The problem they share is that
they are structured around development as a <emphasis>one-time
event</emphasis> rather than as an ongoing process.  This would be
problematic for any kind of software development, but is especially so
for open source development, which if anything is is optimized more
for low-intensity, long-term investment rather than for high-intensity
burst investment.  Both crowdfunding campaigns and bounty prizes are
more compatible with high-intensity, one-time bursts of activity, and
do not provide for ongoing maintenance or investment past the
completion of the campaign goal or prize condition.<footnote><para>One
service trying to solve that problem is <ulink
url="https://snowdrift.coop/" >Snowdrift.coop</ulink>, which aims to
provide sustainable funding for freely-licensed works using a
carefully designed matching pledge model.  Whether Snowdrift will
succeed is unknowable as of this writing in mid-2015, since the
service is still in a preliminary stage, but I am watching it with
interest.  Snowdrift also did a thorough survey, in the Fall of 2013,
of funding platforms for free software, and posted their results at
<ulink url="https://snowdrift.coop/p/snowdrift/w/en/othercrowdfunding"
>snowdrift.coop/p/snowdrift/w/en/othercrowdfunding</ulink>; it's worth
a read if you're interested in this topic.</para></footnote></para>

<para>A crowdfunding campaign can sometimes be a good way to get a
project launched, but generally is not a way to fund development after
the initial launch.  Successive crowdfunding campaigns for later
stages of development or for releases will inevitably tire out even a
willing and supportive audience.  There is a reason why long-running
charities, for example the public radio network in the United States,
seek to develop sustaining funders (euphemistically called "members"
even though they often have no governance role) to provide a
long-term, stable revenue stream, and then raise funds for specific
one-time efforts separately from that.</para>

<para>If you do launch a crowdfunding campaign, take a close look at
how other open source projects have run theirs.  There are a number of
useful techniques that can be learned from the successful ones.  For
example, most campaign sites have a mechanism for offering different
rewards to backers at different monetary levels.  You could offer a
mention in a <filename>SUPPORTERS</filename> file in the project, and
perhaps at higher levels a mention on a thank-you page on the
project's web site.  But more creatively&nbsp;&mdash;&nbsp;I first
heard this idea from Michael Bernstein, and used
it&nbsp;&mdash;&nbsp;you can offer to dedicate a commit to each backer
at or above a certain level, by thanking the backer directly in the
commit's log message.  The nice thing about this is that it's
decentralized and easy to administer: any developer on the project can
help fulfill that reward.  Individual developers can also offer free
or discounted consulting about the project as a reward, though be
careful not to sell too much of your time: the point of the campaign
is to raise funds for development, not to turn the development team
into a consulting team.</para>

<para>One thing that many crowdfunding campaigns do that I think is
not appropriate for free software projects is to sell early access.
That is, one of the rewards will be a "sneak preview" or "beta access"
to in-progress versions, before the public release.  The problem with
this is that, for open source projects, the public is supposed to
already have access to in-progress work.  Access to an open source
project should be limited by the time and interest of the parties
<emphasis>seeking</emphasis> the access, not by the project.  So learn
what you can from other crowdfunding campaigns, but remember that some
of the techniques used by most campaigns may not be suitable for an
open source project that wants to keep the good will of its users and
development community.</para>

<para>Finally, word of caution: if your project accepts donations, do
some public planning of how the money will be used
<emphasis>before</emphasis> it comes in.  Discussions about how to
allocate money tend to go a lot more smoothly when held before there's
actual money to spend; and anyway, if there are significant
disagreements, it's better to find that out when the money is still
theoretical than when it's real.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
