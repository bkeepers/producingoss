<chapter id="communications">

<title>Communications</title>

<simplesect>

<para>La capacidad de escribir claramente es quizás la más importante habilidad
que se puede tener en un ambiente de código abierto.  A largo plazo
es más importante que el talento para programar.  Un gran programador con pocas
habilidades comunicativas puede realizar sólo una cosa a la vez, y
puede tener problemas convenciendo a otros para que le presten atención.  Pero un mal
programador con buenas habilidades de comunicación puede coordinar y persuadir
mucha gente para realizar diferentes cosas, y de tal modo tener un
efecto significativo sobre la dirección y el ímpetu de un proyecto.</para>

<para>No parece haber mucha correlación, en cualquier sentido,
entre la capacidad de escribir buen código y la capacidad de comunicarse
con sus compañeros.  Hay cierta correlación entre
programar bien y describir bien cuestiones técnicas, pero describir
asuntos técnicos es sólo una pequeña parte de las comunicaciones en un
proyecto.  Más importante es la capacidad de enfatizar con su
audiencia, ver sus propios correos y comentarios como lo ven los demás, y
hacer que los demás vean sus propios correos con objetividad similar.
Igualmente importante es notificar cuando un medio o método
de comunicación determinado no está funcionando bien, quizás porque no escala al ritmo que
incrementa el número de usuarios, y tomar el tiempo para hacer algo
al respecto.</para>

<para>Aquello que es obvio en teoría y que se hace duro en la
práctica es que los ambientes de desarrollo de software libre son
desconcertadamente diversos tanto en audiencias como en mecanismos de
comunicación.  ¿Debería una opinión dada ser expresada en un mensaje a la
lista de correo, como una anotación en el gestor de fallos, o como un comentario
en el código?  Al contestar una pregunta en un foro público, ¿cuánto
conocimiento puedes asumir por parte del lector?, en primer lugar dado que "el
lector" no es el único que hizo la pregunta,
¿pueden todos ver tú respuesta?  ¿Como pueden los desarrolladores
permanecer en contacto constructivo con los usuarios, sin ser ahogado
por peticiones de características, informes falsos de fallos, y charla en general?  ¿Cómo
dices cuando un medio ha alcanzado los límites de su capacidad, y
que harías al respecto?</para>

<para>Las soluciones a estos problemas son usualmente parciales, ya que cualquier
solucion particular se vuelve finalmente obsoleta por el crecimiento del proyecto o 
los cambios en la estructura del mismo.  Son a menudo <foreignphrase>ad
hoc</foreignphrase>, ya que son respuestas improvisadas a situaciones 
dinámicas.  Todos los participantes necesitan darse cuenta de como y cuando
la comunicacion puede volverse farragosa, y deben estar implicados en 
buscar soluciones. Ayudar a la gente a hacer esto es una gran parte de la direccion en un proyecto
open source. Las secciones siguientes tratan sobre como conducir 
tu propia comunicacion y como hacer el mantenimiento de los mecanismos de 
comunicacion una prioridad para todo el mundo en el proyecto.<footnote><para>Se ha 
hecho alguna investigacion academica interesante en esta materia; por ejemplo,
vease <citetitle>Group Awareness in Distributed Software
Development</citetitle> por Gutwin, Penner, y Schneider (solia estar 
disponible on-line, pero parece que ha desaparecido, al menos
temporalmente; utiliza una herramienta de busqueda encontrarla).</para></footnote></para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="you-are-what-you-write">
<title>Tú eres lo que escribes</title>

<para>Considera esto: la única cosa que cualquier persona sabe de ti en
Internet viene de lo que tú escribes, o de lo que otros escriben acerca de ti.
Puedes ser brillante, perceptivo, y carismático en persona pero
si tus correos electrónicos son incoherentes y no estructurados, la gente asumirá
que esé es el verdadero tú.  O quizás realmente eres incoherente y
no estructurado en persona, pero nadie tiene por que saberlo, si tus mensajes
son claros e informativos.</para>

<para>Dedicar cierto cuidado a tu escritura valdrá enormemente la pena.
El veterano hacker de software libre Jim Blandy narra la siguiente
historia:</para>

<blockquote>
  <para>Por el año 1993 trabajaba para la Fundación de Software Libre,
  y estábamos llevando a cabo el beta-testing de la versión 19 de GNU Emacs.  Haríamos una 
  publicación beta más o menos cada semana, y la gente la probaría y nos enviaría 
  informes de error.  Había un chico que ninguno de nosotros conocía en 
  persona pero que hizo un gran trabajo: sus informes de error siempre fueron claros y 
  nos enfocaba hacia el problema y, cuando nos proporcionaba una corrección,
  casi siempre tenía razón.  Era un fuera de serie.</para>

  <para>Ahora, antes que la FSF pueda utilizar código escrito por alguien, hay que 
  realizar un papeleo legal para que el interés de esa persona hacia el copyright 
  del código pase a la FSF. Simplemente tomando el código de completos extraños 
  dejándolo dentro es una receta para el desastre legal.</para>

  <para>Por lo que le envié un correo al chico con los formularios diciéndole "Te envío algo de papeleo
  que necesitamos, esto es lo que significa, firmas este, haces que quien te tiene contratado 
  firme este otro y, entonces podemos comenzar a utilizar tus correcciones.  Muchas
  gracias."</para>

  <para>Me envió un mensaje de vuelta diciendo: "No trabajo para
  nadie."</para>

  <para>Por lo que le dije: "Bien, eso está bien, simplemente haz que firme tu universidad
  y envíamelo de vuelta."</para>

  <para>Después de un poco, me escribió de nuevo y me dijo: "Verás,
  realmente...  tengo trece años y vivo con mis padres."</para>
</blockquote>

<para>Debido a que ese chico no escribía como si tuviera trece años nadie
supuso que los tuviera. A continuación se exponen también algunas cosas que
conseguirán además que tu escritura de una buena impresión.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="structure-and-formatting">
<title>Estructura y formato</title>

<para>No caigas en la trampa de escribir todo como si fuera 
un mensaje de teléfono móvil.  Escribe frases completas, poniendo en mayúsculas 
la primera palabra de cada frase, y usando separaciones de párrafo donde 
sea necesario. Esto es lo más importante en correos electrónicos y otras composiciones.
En el IRC u otros foros efímeros similares, generalmente es correcto dejar de poner
mayúsculas, utilizar formas comprimidas o expresiones comunes, etc. Simplemente
no lleves esos hábitos a foros más formales o persistentes.
Correos electrónicos, documentación, informes de error y otras piezas de escritura que
suelen tener una larga vida deberían escribirse usando una gramática y 
una spelling estándar, y tener una estructura narrativa coherente. Esto 
no se debe a que haya algo inherentemente bueno siguiendo 
reglas arbitrarias, sino a que estas reglas 
<emphasis>no</emphasis> son arbitrarias: evolucionan en las formas presentes 
ya que hacen que el texto sea más leíble y, por esa razón, deberías 
seguirlas. La legibilidad no sólo es deseable para que 
la mayoría de gente entienda lo que escribes, sino porque hace que 
que parezcas la clase de persona que se toma su tiempo en comunicarse de una forma
clara: es decir, alguien a quien vale la pena prestar atención.</para>

<para>En particular, para correos electrónicos, desarrolladores experimientados de open source 
han decidido ciertas convenciones:</para>

<para>Envía correos solo de texto plano, no en HTML, texto enriquecido u otros formatos 
ya que podrían no ser leidos por lectores que leen sólo texto plano.  Formatea las líneas para 
que estén sobre las 72 columnas de largo.  No excedas las 80 columnas, que ha sido 
<foreignphrase>de facto</foreignphrase> el ancho estándar del terminal
(es decir, hay gente que utiliza terminales más anchos, pero nadie utiliza 
terminales no más estrechos).  Al hacer las líneas un poco 
<emphasis>menores</emphasis> de 80 columnas da cabida a unos cuantos 
niveles de caracteres de citado para ser añadidos en otras respuestas sin 
forzar un estrechamiento de tu texto.</para>

<para><emphasis>Utiliza saltos de línea reales.</emphasis> Algunos clientes de correo muestran
un falso formateo de línea, mientras estás escribiendo un correo, 
viéndose en la pantalla saltos de línea donde en realidad no los hay. Cuando se 
envía el correo, no tendrá los saltos de línea que se pensaba y se presentará
con un formato horroroso en la pantalla de la gente.  Si tu cliente de correo  
muestra falsos saltos de línea, busca posibilidad de quitar la opción para ver 
los saltos de línea reales a medida que escribes el correo.</para>

<para>Cuando incluyas salida de pantalla, trozos de código u otro 
texto preformateado, desplázalo claramente, de forma que a simple vista se pueda 
fácilmente ver los límites entre tu texto y el material que estés 
incluyendo.  (Nunca esperé escribir este consejo cuando comencé el
libro, pero en un número de listas de correo de código abierto posterior, he visto 
gente mezclando textos de diferentes fuentes sin dejar claro qué es 
qué. El efecto es muy frustante.  Hacen los correos
bastante difíciles de entender y, francamente, hace que esas personas
parezcan un poco desorganizadas).</para>

<para>Cuando cites el correo de alguien, inserta tus repuestas donde 
sea más apropiado, en diferentes lugares si es necesario,
y elimina las partes de su correo que no utilices.  Si estás
escribiendo un comentario rápido con referencia a todo el correo, es correcto
hacerlo <firstterm>top-post</firstterm> (Es decir, poner tu respuesta
encima del texto citado; de lo contrario, deberías citar primero
la parte relevante del texto original, seguido de tu
respuesta.</para>

<para>Construye el asunto de los nuevos correos con cuidado.  Es la
línea más importante de un correo, ya que permite a cualquier otra persona
del proyecto decidir si leer más o no.  Los lectores de 
correo modernos organizan los grupos de mensajes relacionados en 
hilos, que pueden no solo definirse por un asunto común sino por 
otras cabeceras (que a menudo no se muestran).  Entienden
que si un hilo comienza a derivar hacia un nuevo tema, puedes y 
debes ajustar el asunto adecuadamente cuando respondas.  La
integridad del hilo persistirá, debido a aquellas otras cabeceras, pero
el nuevo asunto ayudará a la gente que mira un resumen del hilo a
saber que el tema ha derivado.  Asimismo, si realmente quieres
comenzar un nuevo tema, hazlo creando un nuevo mensaje y no respondiendo uno
ya existente y cambiándole el asunto.  De esta forma, tu correo podría
estar agrupado en el mismo hilo del correo que estás respondiendo y
así volver loca a la gente pensando sobre algo que no es.  Recuerda: 
la penalización no será la pérdida de tiempo, sino la pequeña
hendidura en tu credibilidad como alguien fluido en el uso de las 
herramientas de comunicación.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-content">
<title>Contenido</title>

<para>Correos electrónicos bien formateados atraen a los lectores, pero el contenido los mantiene.
Ningún conjunto fijo de reglas puede garantizar el buen contenido, por supuesto, hay
algunos principios que lo hacen más prometedor.</para>

<para>Hacer las cosas fáciles para tus lectores.  Hay una tonelada de información
flotando alrededor en cualquier proyecto activo de software libre, y los lectores no
pueden esperar estar al corriente de la mayor parte de ella, de hecho, no
siempre pueden esperar familiarizarse.  En lo posible,
tus correos deben sumunistrar información en la forma más conveniente para
los lectores.  Si tienes que pasar unos dos minutos extra buscando el URL
de un hilo particular en los archivos de la lista de correo, atendiendo al objetivo de
librar a tus lectores de hacerlo, vale la pena.  Si tienes que
pasar unos 5 o 10 minutos extra resumiendo las conclusiones de
un hilo complejo, con la intención de brindarle a las personas el contexto en el cual
comprederán tu correo, entonces hazlo. Piénsalo de esta manera: el mayor
éxito en un proyecto, es aumentar el cociente lector-a-escritor en cualquier
foro dado.  Si cada correo tuyo es visto por <emphasis>n</emphasis>
personas, entonces como <emphasis>n</emphasis> aumenta, la utilidad de
realizar un esfuerzo adicional para ayudar a aquellas personas aumenta con el tiempo.  Y
como las personas te verán imponer este estándar, trabajarán
imitándolo en sus propias comunicaciones.  El resultado es, idealmente, un
incremento en la eficiencia global del proyecto: cuando hay una
elección entre <emphasis>n</emphasis> personas realizando un esfuerzo y una
persona haciendolo, el proyecto prefiere el segundo.</para>

<para>No acostumbrarse a la hipérbole. La exageración de correos online es una
clásica competencia de armamento.  Por ejemplo, a una persona que reporta un fallo puede preocuparle
que los desarrolladores no le presten la suficiente atención, así que lo
describirá como grave, gran problema que es prevenirle
(y a todos sus amigos/compañeros de trabajo/primos) de la utilización del software
productivamente, cuando es solamente una molestia leve.  Pero
la exageración no está limitada a los usuarios; los programadores frecuentemente
hacen lo mismo durante debates técnicos, especialmente cuando el
desacuerdo es una cuestión de gustos más que de corección:</para>

  <blockquote>
     <para>"Hacerlo de esa manera haría el código totalmente
     ilegible.  Sería una pesadilla para el mantenimiento, comparado a la
     propuesta de J. Random..."</para>
  </blockquote>

<para>El mismo sentimiento se vuelve más
<emphasis>fuerte</emphasis> cuando está expresado de una forma menos brusca:</para>

  <blockquote>
     <para>"Pienso que eso funciona, pero menos de lo ideal en términos de
     legibilidad y mantenimiento. La propuesta de J. Random
     evita esos problemas ya que..."</para>
  </blockquote>

<para>No podrás librarte completamente de la hipérbole, y en
general no es necesario hacerlo.  Comparada con otras formas
retóricas, la hipérbole no es globalmente dañina y perjudica 
principalmente al autor.  Los destinatarios pueden comprender, solamente que
el remitente pierde un poco más de credibilidad cada vez.  Por lo tanto, para
bien de tu influencia en el proyecto, intenta proceder
con moderación.  De esa manera, cuando  <emphasis>necesitas</emphasis>
presentar un punto fuerte, las personas te tomarán con seriedad.</para>

<para>Corregir dos veces.  Para cualquier mensaje más largo que el tamaño medio
de un párrafo, se recomienda volver a leerlo de arriba a abajo antes de enviarlo pero después de que
lo tengas listo.  Éste es un conocido consejo para cualquiera
que haya tomado una clase de composición, pero es especialmente importante para
las discusiones en línea.  Ya que el proceso de composición en línea tiende a
ser altamente discontinuo (en el transcurso de escritura de un mensaje, podrías
necesitar retroceder y revisar otros correos, visitar ciertas páginas web, ejecutar un
comando para capturar su salida de depuración, etc.), es especialmente fácil
perder el sentido de tu papel narrativo.  Mensajes que fueron escritos
discontinuamente y no fueron revisados antes de ser enviados son frecuentemente
reconocibles como tal, mucho el disgusto (o uno esperaría) de
sus autores.  Tómate el tiempo para examinar lo que envías.  Cuanto más
estructurados sean tus mensajes, más leidos serán.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-tone">
<title>Tono</title>

<para>Después de escribir miles de mensajes, probablemente notarás
que tu estilo tiende a ser extremadamente conciso.  Esto parece ser la norma en la mayoría
de los foros técnicos, y no hay nada malo con ello. Un nivel
de brevedad que sería inaceptable en interacciones sociales normales
es sencillamente el común para los hackers de software libre.  Aquí está una respuesta a la que
yo recurrí una vez en una lista de correo acerca de cierto software gratuito de administración
de contenido, citado en su totalidad:</para>

<screen>
¿Puedes explicar exactamente con que problema
te enfrentas?

Además:

¿Qué versión de Slash estás usando? No pude encontrarlo en
tu mensaje original.

¿Exactamente como compilaste el código de apache/mod_perl?

¿Probaste el parche de Apache 2.0 que fue colocado en
slashcode.com?

  Shane
</screen>

<para><emphasis>Eso</emphasis> es ser conciso!  No tiene bienvenida, ni despedida 
con excepción de su nombre, y el mensaje en sí es solamente una serie de
preguntas expresadas de la forma más compacta.  Su oración
declarativa fue una crítica implícita de mi mensaje original.  Aunque, me
alegra ver el correo de Shane, y no tomar su brevedad como un producto
de cualquier otro motivo que no sea el de ser una persona ocupada.  El mero hecho de que él
haga preguntas, en vez de ignorar mi mensaje, significa que él es
esta dispuesto a dedicarle cierto tiempo a mi problema.</para>

<para>¿Reaccionarán positivamente todos los lectores a este estilo?  No
necesariamente; depende de la persona y el contexto.  Por ejemplo,
si una persona envía un correo reconociendo que cometió un error
(quizás codificó un fallo), y sabes por experiencias pasadas que
esta persona tiende a ser un poco insegura, entonces mientras puedas escribir
una respuesta compacta, deberías asegurarte de dejarlo con algo de mención
hacia sus sentimientos.  La mayor parte de tu respuesta puede
ser un breve análisis de la situación desde el punto de vista del ingeniero, tan conciso como
quieras.  Pero al final, deberías despedirte con algo que indique que
la brevedad no debe ser tomada como frialdad.  Por ejemplo, si sólo
escribiste montones de consejos indicando exactamente como la persona debería corregir el fallo,
entonces debes despedirte con "Buena suerte, NOMBRE_DE_LA_PERSONA" para indicar
que le deseas suerte y que no eres malgeniado.  Una carita sonriente
colocada estratégicamente u otro emoticón, también puede con frecuencia ser suficiente para tranquilizar a un
interlocutor.</para>

<para>Puede resultar un tanto extraño centrarse en el sentimiento de los
colaboradores, asi como tambien en lo superficial de lo que dicen
por decirlo de alguna manera sin rodeos, los sentimientos afectan a la productividad.
Los sentimientos tambien son importantes por otras razones,
porque incluso confinandonos a nosotros mismos a razones puramente utilitarias, podemos notar
que la gente infeliz escribe peor software, y/o menos.  Dada la naturaleza
restrictiva de la mayoria de los medios electronicos, aunque, a menudo no habra
indicios patentes de como se siente una persona. Tendras que realizar una adecuada
suposicion basandote en a) como se sentiria la mayoria de la gente en
esa situacion, y b) que es lo que conoces de esa persona particular a partir
de interacciones pasadas. Algunas personas prefieren una actitud mas pasiva, y
simplemente estan de acuerdo con todo el mundo sin cuestionarlos, la idea tras esto
es que si un participante no dice abiertamente que es lo que piensa, entonces
uno no tiene nada que hacer tratandole como pensaba que lo hacia. No comparto este
enfoque, por un par de razones. Una, la gente no se comporta de esa manera
en la vida real, asi que porque deberian hacerlo online?  Dos, dado que la mayoria de las
interacciones tienen lugar en foros publicos, la gente tiende a ser incluso mas moderada expresando
las emociones que lo podrian ser en privado. Para ser mas preciso, a menudo estan deseando expresar
emociones directamente a otros, tales como de agradecimiento o indignacion,
pero no emociones directamente intimas como inseguridad u orgullo.
Todavía, la mayoría de los humanos trabajan mejor cuando saben que los demás son
conscientes de su estado de ánimo. Prestando atención a a pequeñas pistas, normalmente
podrás suponerlo acertadamente la mayoría del tiempo, y motivar a la gente a estar involucrada
con un mayor grado que de otra manera no podrían.</para>

<para>Por supuesto no quiero decir que, tú rol sea el de un terapeuta de grupo, ayudando
constantemente a todo el mundo a estar al corriente de sus sentimientos. Pero poniendo una
especial atención a patrones a largo-plazo en el comportamiento de la gente, empezarás a
tener una sensación de ellos como individuos incluso aunque nunca los hayas conocido cara a 
cara. Y siendo sensible en el tono de tus mensajes escritos, podrás tener una cantidad
sorprendente de influencia sobre los sentimientos de los demás, que es el último beneficio
del proyecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="rudeness">
<title>Reconociendo la grosería</title>

<para>Una de las características que definen la cultura del código abierto son
son las nociones distintivas de qué constituye grosería y qué no.
Mientras que los convenios que se describen debajo no son únicos para el desarrollo de 
software libre, ni tampoco para el software en general debería ser 
familiar para cualquiera que trabaje en disciplinas de las matemáticas, ciencias puras o
la ingeniería el software libre, con sus porosos
límites y un constante influjo de recién llegados, es un entorno donde
es especialmente probable encontrar estas convenciones por gente
no familiarizada con ellas.</para>

<para>Comencemos con las cosas que <emphasis>no</emphasis> son
groseras (maleducadas):</para>

<para>La crítica técnica, incluso cuando es directa y sin tacto, no es una grosería.
De hecho, puede ser una forma de adulación: la crítica es decir, por
implicación, que vale la pena tomarse en serio el destinatario,y vale la pena 
invertir tiempo en él.  Es decir, cuanto más viable fuera simplemente 
ignorar  el mensaje de alguien, se entiende más por un cumplido 
molestarse en criticarlo (a no ser que la crítica se convierta, por su puesto, en un 
ataque <foreignphrase>ad hominem</foreignphrase> o alguna otra forma de 
grosería obvia).</para>

<para>Preguntas directas, sin adornos, como la que Shane me hizo en 
el correo anterior tampoco es grosería.  Preguntas que, en 
otros contextos, pueden parecer frias, retóricas e incluso a modo de burla, son formuladas
a menudo de una forma seria, y no tienen más intención que obtener
información lo más rápido posible.  La famosa pregunta del soporte
técnico "¿Está su ordenador conectado?" es un ejemplo clásico de esto.
La persona de soporte realmente necesita saber si tu ordenador está
contectado y, después de unos pocos días en el trabajo, se ha cansado
de adornar su pregunta de florituras ("Le pido
disculpas, quisiera que me contestara unas simples preguntas para descartar algunas
posibilidades.  Algunas pueden parecer muy básicas, pero tenga
paciencia...").  En este punto, no le importa seguir adornando más 
simplemente pregunta directamente: ¿está o no está conectado?  Preguntas
similares se hacen en todo momento en las lista de distribución del software libre.  La
intención no es insultar al destinatario, sino descartar rápidamente las 
explicaciones más obvias (y quizás más comunes).  Los destinatarios que 
lo entiendan y reaccionen de ese modo ganarán puntos en tener una 
visión tolerante sin provocarse.  Pero los destinatarios que reaccionen mal
tampoco deberían ser reprendidos.  Es simplemente una colisión de culturas,
no es culpa de nadie.  Explica amablemente que tu pregunta (o crítica)
no tiene significados ocultos; que solo significaba obtener (o transmitir)
la información de la forma más eficientemente posible, nada más.</para>

<para>Entonces, ¿qué es grosería?</para>

<para>Bajo el mismo principo por el cual las críticas a detalles técnicos es una forma
de halago, no proporcionar críticas de calidad puede ser un tipo de insulto. No quiero
decir simplemente que ignorando el trabajo de alguien, sea una propuesta, cambio en el
código, nuevas informaciones o cualquier cosa. A menos que explicitamente prometas
una reacción detallada más adelante, normalmente es OK simplemente no reaccionando de
ninguna manera. La gente asumirá así que no tuviste tiempo de decir nada.
Pero si tu <emphasis>reaccionas</emphasis> , no escatimes: tómate el tiempo para analizar detalladamente las
cosas, proporcionar ejemplos concretos allá donde sea apropiado, rebuscar a través de los
archivos para encontrar información relacionada del pasado, etc. O si no tienes tiempo
para realizar todo ese esfuerzo, pero todavía necesitas escribir algún tipo de respuesta
corta, entonces exponlo de manera abierta y breve en tu mensaje ("Creo que hay un tema
abierto para esto, pero desafortunadamente no tuve tiempo para buscarlo, lo siento").
Lo principal es reconocer la existencia de la norma cultural, ya sea algo satisfactorio
o reconociendo abiertamente que ha fallado ligeramente esta vez. Sea lo que sea, la norma
es reforzar. Pero el no cumplir esta norma mientras que al mismo tiempo no se explica
el <emphasis>porque</emphasis> fallaste en conecerlo, es lo mismo que decir el tópico
(y aquellos que participan en ello) no mereció tu tiempo. Es mejor mostrar que tu tiempo
es muy valioso siendo seco que siendo vago.</para>

<para>Hay muchas otras formas de grosería, por supuesto, pero la mayoría no
es específica del desarrollo de software libre, y el sentido común 
es una buena forma de evitarlas.  Véase también
<xref linkend="prevent-rudeness"></xref><phrase output="printed"> en
<xref linkend="getting-started"></xref></phrase>, si lo has hecho
todavía.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="face">
<title>Caras</title>

<para>Hay una parte en el cerebro humano dedicada específicamente a reconocer caras. Es conocida
informalmente como "área de fusión de caras", y sus capacidades son mayoritariamente innatas
, no se han aprendido. Resulta que reconocer a las personas individualmente es una técnica
tan crucial de supervivencia que hemos desarrollado un hardware especializado para ello..</para>

<para>La colaboración basada en Internet es por ello psicologicamente curiosa
porque implica una estrecha colaboración entre seres humanos que nunca se identificarían entre ellos por los
más naturales e intuitivos métodos: reconocimiento facial el primero de todos, pero tambien
por el sonido de la voz, postura, etc. Para compensar esto, intenta usar un consistente 
<firstterm>Nombre</firstterm> en todas partes. Debería ser la primera parte de tu dirección de
email (la parte antes de el signo @), tu nombre del IRC, tu nombre para hacer commit en los
repositorios, tu marca de nombre en cualquier lado y así. Este nombre es tu "cara" online
: un tipo de cadena de identificación que sirve el mismo propósito que tu cara real, aunque
no lo es, desafortunadamente, estimula el mismo hardware consitutido en el cerebro.</para>

<para>El nombre que muestras debería ser una permutación intuitiva de tu nombre real (el mío por
ejemplo, es "kfogel"). En algunas situaciones estará acompañado de tu nombre completo, por 
ejemplo en las cabeceras del correo:</para>

<screen>
From: "Karl Fogel" &lt;kfogel@whateverdomain.com&gt;
</screen>

<para>Actualmente, hay dos puntos a tener en cuenta en ese ejemplo. Como ya he mencionado
anteriormente, el nombre que mostraremos coincidirá con el nombre real de una manera 
intuitiva. Pero tambien, el nombre real es <emphasis>real</emphasis>.
Esto es, no se compone de una denominación como:</para>

<screen>
From: "Wonder Hacker" &lt;wonderhacker@whateverdomain.com&gt;
</screen>

<para>Hay una famosa tira cómica de Paul Steiner, del 5 de Julio de 1993
publicada en <citetitle>The New Yorker</citetitle>, que muestra a un perro que ha iniciado
sesión en un terminal de ordenador, menospreciando y contando a los demás de manera
conspiratoria: "En Internet, nadie sabe que tú eres un perro."  Este tipo de pensamiento
es una mentira detrás de tanto ensalzamiento propio, significado de estar a la moda con
las identidades online que la gente se atribuye a ellos mismos; como llamándose uno mismo
"Wonder Hacker" causará que la gente piense que uno <emphasis>es</emphasis> un maravilloso
hacker. Pero los hechos permanecen:
incluso si nadie sabe que tu eres un perro, todavía seras un perro. Una fantástica identidad
online nunca impresiona a los lectores. En vez de esto, les hace creer que eres más una
imagen que una persona con fundamento, o que simplemente eres inseguro. Utiliza tu nombre
real para todas las interacciones, o si por alguna razón necesitas un anónimo, entonces crea
un nombre que se parezca perfectamente a un nombre real, y úsalo consistentemente.</para>

<para>Además de mantener tu imagen online consistente, hay algunas cosas más que puedes
hacer para que resulte más atractiva. Si posees un título oficial
(ejem., "doctor", "profesor", "director"), no hagas obstentación de ello, no lo menciones a menos que sea directamente
relevante a la conversación. El mundo hacker en general y la cultura del Software Libre
en particular, tienden a ver la muestra de títulos como un signo de exclusión y de inseguridad.
Esta bien si tu título aparece como parte de un bloque de firma standard al final de cada
mail que envías, pero no lo utilices como una herramienta para reforzar tu posición en una
discusión; al intentarlo está garantizado el fracaso. Tu quieres que la gente te respete
como persona, no por el título.</para>

<para>Hablando de bloques de firma: mantelos pequeños y con buen gusto, o mejor todavía,
inexistentes. Evita largas responsabilidades legales fijadas al final de cada mail, 
especialmente cuando estos expresen sentimientos incompatibles con la participación en
un proyecto de software libre. Por ejemplo, el siguiente clásico del género aparece al
final de cada post que un usuario particular hace en una lista de mail pública donde
yo estoy:</para>

<screen>
IMPORTANT NOTICE

If you have received this e-mail in error or wish to read our e-mail
disclaimer statement and monitoring policy, please refer to the
statement below or contact the sender.

This communication is from Deloitte &amp; Touche LLP.  Deloitte &amp;
Touche LLP is a limited liability partnership registered in England
and Wales with registered number OC303675.  A list of members' names
is available for inspection at Stonecutter Court, 1 Stonecutter
Street, London EC4A 4TR, United Kingdom, the firm's principal place of
business and registered office.  Deloitte &amp; Touche LLP is
authorised and regulated by the Financial Services Authority.

This communication and any attachments contain information which is
confidential and may also be privileged.  It is for the exclusive use
of the intended recipient(s).  If you are not the intended
recipient(s) please note that any form of disclosure, distribution,
copying or use of this communication or the information in it or in
any attachments is strictly prohibited and may be unlawful.  If you
have received this communication in error, please return it with the
title "received in error" to IT.SECURITY.UK@deloitte.co.uk then delete
the email and destroy any copies of it.

E-mail communications cannot be guaranteed to be secure or error free,
as information could be intercepted, corrupted, amended, lost,
destroyed, arrive late or incomplete, or contain viruses.  We do not
accept liability for any such matters or their consequences.  Anyone
who communicates with us by e-mail is taken to accept the risks in
doing so.

When addressed to our clients, any opinions or advice contained in
this e-mail and any attachments are subject to the terms and
conditions expressed in the governing Deloitte &amp; Touche LLP client
engagement letter.

Opinions, conclusions and other information in this e-mail and any
attachments which do not relate to the official business of the firm
are neither given nor endorsed by it.
</screen>

<para>Para alguien que únicamente se quiere presentar para preguntar alguna
cuestión ahora y entonces, esta gran "renuncia" parece un poco fuera de lugar
pero probablemente no hace ningún daño. Sin embargo, si esta persona quería participar
activamente en el proyecto, este formalismo-legal empezaría a tener un efecto más
insidioso. Enviaría al menos dos señales potencialmente destructivas: primero, qué esta
persona no tiene un control total sobre sus herramientas; está atrapado dentro de una
cuenta de correo corporativa que acarrea un mensaje molesto al final de cada mail, y el
no tiene ningúna manera de evitarlo; y segundo, que tiene poco o ningún apoyo de su 
organización para contribuir en las actividades del software libre. Cierto, que la
organización claramente no le ha prohibido completamente de postear en listas públicas,
pero hace que sus posts se distingan con un mensaje frío, ya que el riesgo de dejar
información confidencial debe figurarse sobre las demás prioridades.</para>

<para>Si trabajas para una organización que insiste en añadir tales bloques de firma
en todos los mail salientes, entonces considera tener una cuenta de correo gratuito de,
por ejemplo, <ulink url="gmail.google.com"></ulink>,
<ulink url="www.hotmail.com"></ulink>, or <ulink url="www.yahoo.com"></ulink>, y utilizar
esta dirección para el proyecto.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->

<sect1 id="common-pitfalls">
<title>Evitando los obstáculos corrientes</title>

<!-- ======================== subsection ============================== -->

<sect2 id="post-with-purpose">
<title>No envíes un correo sin un propósito</title>

<para>Un obstáculo común en la participación de un proyecto online es pensar que tú
tienes que responder a todo. No tienes que hacerlo. Lo primero de todo, normalmente
se generarán más hilos de correo de los que tú puedas manejar, al menos después de que
el proyecto ha pasado sus primeros meses. Segundo, incluso en los hilos de correo en los
que has decidido tomar parte, mucho de lo que comenta la gente no requerirá una respuesta.
Los foros de desarrollo en particular tiendes a ser dominados por tres tipos de mensajes:</para>

<orderedlist>
  <listitem><para>Mensajes proponiendo algo que -no es trivial-</para></listitem>
  <listitem><para>Mensajes mostrando apoyo u oposición a algo o a lo que alguien ha dicho.</para></listitem>
  <listitem><para>Mensajes de recapitulación</para></listitem>
</orderedlist>

<para>Ninguno de esos<emphasis>de manera inherente</emphasis> requerirá una respuesta, 
particularmente si puedes ser justamente seguro, basándote en revisar el hilo desde el
principio, que alguien más probablemente dirá lo que tu ibas a decir de cualquier manera.
(Si te preocupa que te tomen en un bucle de esperar-esperar porque todos los demás están
usando esta táctica tambien, no lo hagas; casi siempre habrá <emphasis>alguien</emphasis> 
por ahí que se tenderá a crisparse.) Una respuesta debería ser motivada por un propósito
definitivo. Pregúntate a ti mismo primero: ¿Sabes que es lo que quieres conseguir? Y segundo: ¿no 
se conseguirá a menos que digas algo?</para>

<para>Dos buenas razones para añadir tu voz a un hilo de corre son a) cuando veas un
movimiento de proposición y sospeches que tú eres el único que así lo percibe, y b) cuando veas
que no hay entendimiento entre otros, y sepas que puedes solucionarlo con un correo 
clarificándolo todo. Tambien generalmente está bien escribir únicamente para dar las gracias
a alguien por algo, o para decir "Yo tambien!", porque un lector puede decir en seguida
que tal correo no requiere ninguna respuesta ni acción adicional, y por lo tanto el esfuerzo
mental demnadado por el post termina limpliamente cuando el lector llega a la última línea
de el correo. Pero incluso entonces, piensalo dos veces antes de decir algo; es siempre mejor
dejar a la gente deseando que escribas más a menudo que deseando que escribas menos. (Consulta la 
segunda parte de <xref linkend="bikeshed-full"></xref> para ver más ideas sobre como portarse
en una lista de correo muy concurrida.)</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="productive-threads">
<title>Hilos productivos vs Hilos Improductivos</title>

<para>En una lista de correo muy concurrida, tienes dos imperativos. Uno,
obviamente es comprender en que es lo que necesitas poner tu atención y que es lo
que puedes ignorar. El otro es evitar de alguna manera 
el <emphasis>causar</emphasis> ruido: no sólo quieres que tus propios posts
tengan un ratio de gran ruido/señal,  sino que tambien quieres que sean el tipo de
mensajes que estimulan a <emphasis>otra</emphasis> gente a escribir mails con un ratio
similar de señal/ruido, o no escribir nada.</para>

<para>Para ver como hacer eso, vamos a considerar el contexto en el cual se hace. 
¿Cuales son algunos de los sellos de un hilo improductivo?</para>

<itemizedlist>
  <listitem><para>Argumentos que ya se han hecho antes se empiezan a repetir, porque
	  el que los hace piensa que nadie le ha escuchado la primera vez.</para>
  </listitem>
  <listitem><para>Se incrementan los níveles de exageración y participación mientras el
  	  interés se hace cada vez más pequeño.</para>
  </listitem>
  <listitem><para>Una mayoría de comentarios que provienen de gente que hablan poco o nada,
  	  mientras que la gente que tiene a hacer las cosas permanece en silencio.</para>
  </listitem>
  <listitem><para>Muchas ideas se discuten sin un propósito claro de que hacer con ellas.
  	  Por supuesto, cualquier idea interesante empieza con una visión imprecisa; la cuestión
  	  importante es que dirección tomará a partir de ahí. Parece que el hilo empieza a convertir
  	  la visión en algo más concreto, o está derivando en sub-visiones y disputas ontológicas?)</para>
  </listitem>
</itemizedlist>

<para>Sólo porque un hilo de correo no sea productivo al principio no significa que sea
una perdida de tiempo. Puede tratar sobre un tema importante, en cuyo caso el hecho de
que no se está produciendo ningún progreseo es todo lo más molesto.</para>

<para>Guiar un hilo de correo hacia la utilidad sin ser agresivo es todo un arte. No 
funcionará simplemente amonestando a la gente para que pare de gastar su tiempo, o 
preguntándoles que no escriban a menos que tengan algo constructivo que decir. Por supuesto
puedes pensar en esas cosas en privado, pero si lo dices en la lista de correo sonará 
ofensivo. En lugar de eso, tienes que sugerir condiciones para promover progresos; guía a
la gente, un camino a seguir que lleve a los resultados que quieres, y todo ello sin que
tu conducta parezca dictatoria. La distinción es en gran parte el tono. Por ejemplo, esto
esta mal:</para>

  <blockquote>
     <para><emphasis>Esta discusión no va a ningún lado. Por favor podemos dejar este
     tema hasta que alguien tenga un parche que implemente una de esas proposiciones?
     No hay razón para mantenernos en ello todo el rato diciendo las mismas cosas. El código
     hace más ruido que las palabras, chicos.</emphasis></para>
  </blockquote>

<para>Donde esto esta bien:</para>

  <blockquote>
     <para><emphasis>Varias propuestas han estado flotando en este hilo, pero ninguno ha
     tenido todos los detalles completos, al menos no demasiados como para hacer una
     votación arriba-o-abajo. Y todavía no estamos diciendo nada nuevo; estamos simplemente
     reiterando lo que ya se ha dicho anteriormente. Así que lo mejor a partir de este punto
     será probablemente para posteriores correos contener tanto una especificación completa
     para la característica propuesta, o un parche. Entonces al menos tendríamos una acción
     definitiva que tomar (ejem, tener un consenso en la especificación, o aplicar el 
     parche).</emphasis></para>
  </blockquote>

<para>Compara la segunda propuesta con la primera. La segunda manera no traza una línea
entre tú y los demás, ni les acusa de mantener la discusión en una espiral. Habla sobre
"nosotros", que es lo importante hayas participado o no en el hilo de correo anteriormente, 
porque recuerada a todo el mundo que incluso aquellos que han estado en silencio hasta 
entonces en el hilo de correo todavía pueden participar en el resultado del hilo de correo.
Describe porque el hilo no va a ninguna parte, pero lo hace sin peyorativas ni juicios; 
simplemente muestra el estado de algunos hechos sin sentimiento. Lo más importante, ofrece
un curso de acción positivo, de manera que en vez de que la gente sienta que la discusión
esta siendo cerrada (una restricción contra la cual ellos pueden sólo estar tentados a rebelar),
se sentirán como si se les estuviera ofreciendo una manera de tomar parte en la conversación
a un nivel más constructivo. Este es un estándar con el cual la gente querrá quedarse.</para>

<para>Siempre no querrás convertir un hilo de correo en el siguiente nivel de construcción; 
otras veces querrás dejarlo pasar. El propósito de tu correo, entonces, es hacer una cosa o
la otra. Si puedes decir el camino que deberá tomar el hilo de correo de manera que nadie
lo está haciendo <emphasis>así</emphasis> para tomar los pasos que sugeriste, entonces tu
correo ha cerrado el hilo sin aparentar hacerlo. Por supuesto, no hay una manera infalibe
de cerrar un hilo, e incluso si la hubiera, no querrías usarla. Pero preguntando a los
participantes a crear progresos visibles o parar de escrbiri correos es perfectamente 
defendible, si se hace diplomáticamente. Sin embargo, se cauteloso de anular los hilos
de correo prematuramente. Alguna cantidad de charla especulativa puede llegar a ser
productiva, dependiendo del tema, y preguntando para que se resuelva demasiado rápida
apagará el proceso creativo, así como tambien te hara parecer impaciente.</para>

<para>Don't expect any thread to stop on a dime.  Probablemente habrá todavía unos
pocos correos despues del tuyo, ya sea porque los mails se cruzan en la red, o porque
la gente quiere tener la última palabra. Esto no es nada por lo que preocuparse, y no
necesitas escribir otro correo otra vez. Simplemente deja que el hilo se vaya esfumando o que no se
esfume como puede ser el caso. No puedes tener control completo; por otra parte, puedes 
esperar tener estadísticamente un efecto significativo a través de varios hilos de correo.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="bikeshed">
<title>Cuanto más blando sea el tema, más largo será el debate</title>

<para>Aunque las discusiones pueden extenderse a cualquier topico, la probabilidad de que se vayan extendiendo
va conforme la dificultad tecnica del tema disminuye. Despues de todo cuanta mas sea la dificultad tecnica,
menor sera el numero de participantes que realmente podran seguirla.
Aquellos quienes pueden ser los desarrolladores mas experimentados, quienes ya han tomado parte en esas
discusiones antes cientos de veces, y conocen el tipo de comportamiento es el que va a llevar a un
consenso con el cual todo el mundo este de acuerdo.</para>

<para>De esta manera, en cuestiones tecnicas que son simples de comprender y faciles de tener una opinion
sobre ellas, es dificil llegar a un consenso, y en temas "blandos" como organizacion, publicidad, ingresos, etc.
La gente puede participar en aquellos argumentos siempre, porque no es necesario ninguna cualificacion para
hacerlo, no hay un camino claro para decidir (incluso despues de todo) si una decision fue buena o mala, y porque
simplemente esperar a que otros discutan es a veces una tactica correcta. </para>

<para>El principio de que la cantidad de discusion es inversamente proporcional a la complejidad
del tema tratado, ha estado ahi durante algun tiempo, y es conocido informalmente como el 
<firstterm>Efecto Bikeshed </firstterm>. Aqui esta la explicacion de Poul-Henning Kamp's,
de un correo ahora famoso, hecho en la lista de desarrolladores de BSD:</para>

<blockquote>

<para>Es una larga historia o mas bien es una vieja historia, pero es bastante escasa actualmente.
C. Northcote Parkinson escribio un libro en los comienzoa de 1960 titulado "La ley de Parkinson", la cual 
contenia mucho entendimiento sobre la dinamica de la gestion.</para>

<para>[...]</para>

<para>En el ejemplo especifico cubriendo el refugio de bicicletas, el otro componente vital es una planta
de energia atomica, supongo que ilustra la epoca de el libro.
.</para>

<para>Parkinson nos muestra que puedes ir a un consejo de direccion y conseguir la aprobacion de un
edificio multi millonario o incluso de billones de dolares de una planta de energia atomica, pero si 
quieres construir un refugio de bicicletas te veras implicado en discusiones sin fin.</para>

<para>Parkinson explica que esto es porque una planta de energia atomica es tan enorme, tan cara y tan
complicada que la gente no tendra conocimiento de ello, y en lugar de intentarlo, recurriran al supuesto
de que alguien revisara todos los detalles antes de ir mas alla. 
Richard P.  Feynmann dio un par de interesantes, y muy cercanos a esto ejemplos en relacion a los Alamos
en sus libros.</para>

<para>Por otra parte, un refugio para bicletas. Cualquiera puede construir uno de esos en un fin de semana, y
todavia tendra tiempo para ver la TV. Asi que no importa lo bien preparado que estes, tampoco importa lo
razonable que seas en tu proposicion, alguien se hara con la oportunidad para demostrar que esta haciendo
su trabajo, que esta atento, que esta <emphasis>ahi</emphasis>.</para>

<para>En Dinamarca lo llamamos "deja tu huella". Trata sobre el orgullo personal y el prestigio, va sobre
ser capaz de señalar en algun sitio y decir "Hay! esto lo hice <emphasis>Yo</emphasis>."  Es fuerte, simplemente
piensa en las pisadas del semento mojado.</para>

</blockquote>

<para>(Su post completo es una lectura de mucho valor. Miralo.<xref linkend="bikeshed-full"></xref>; see also
<ulink url="http://bikeshed.com"></ulink>.)</para>

<para>Cualquiera que regularmente tome parte en decisiones hechas en grupo reconocera sobre que es lo que
esta hablando Kamp. Sin embargo, normalmente es imposible persuadir a <emphasis>todo el mundo</emphasis> a evitar
pintar un cobijo de bicis. Lo mejor que puedes hacer es señalar que el fenomeno existe, y cuando veas que esta
ocurriendo, persuadir al desarrollador senior; las personas cuyos mails llevan todo el peso; a soltar sus
brochas pronto, asi al menos no contribuiran al ruido. Las fiestas para pintar bicis nunca se esfumaran 
enteramente, pero puedes hacerlas mas cortas y menos frecuentes extendiendo una concienciacion del fenomeno en
la cultura del proyecto.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="holy-wars">
<title>Evitando las Guerras Santas</title>

<para>Una<firstterm>Guerra Santa</firstterm> es una disputa, a menudo pero no siempre sobre un tema relativamente
menor el cual no se puede resolver con los meritos de los argumentos, pero donde la gente se siente demasiado
apasionada para continuar discutiendo de cualquier manera con la esperanza de que su lado prevalecera.
Las Guerras Santas no son lo mismo que la pintura de un garaje de bicicletas. La gente de la pintura de bicicletas
normalmente salen rapido con una opinion (porque pueden), pero ellos, necesariamente no se sentiran demasiado
apasionados sobre ello, y por lo tanto, otras veces, expresaran opiniones incompatibles para mostrar que ellos
comprenden todas las caras del tema tratado. Por otra parte, en una Guerra Santa, comprender a las otras partes
es un signo de debilidad. En una Guerra Santa, todo el mundo sabe que hay UNA Respuesta Correcta; Per ellos no
estan de acuerdo con esta.</para>

<para>Una vez que una Guerra Santa ha empezado, generalmente no se puede resolver con la satisfaccion de todo
el mundo. No es bueno mostrar, en el medio de una Guerra Santa, que esta esta teniendo lugar. Todo el mundo
ya lo sabe. Desafortunadamente una caracteristica comun de las Guerra Santa es el desacuerdo en cada cuestion
<emphasis>si</emphasis> la disputa se puede resolver continuando la discusion. Visto desde fuera, esta claro que
ninguna parte va a cambiar la opinion de los otros. Visto desde dentro, la otra parte esta siendo obtusa y no esta
pensando claramente, pero pueden cambiar de opinion si las cosas se vuelven feas. Ahora,<emphasis>no</emphasis>
estoy diciendo que no haya una parte con razon en una guerra santa. A veces la hay en las Guerras Santas que yo he
participado, siempre ha sido mi bando, por supuesto. Pero no importa porque no hay algoritmo para demostrar convencidamente
que una parte o la otra estan en lo cierto.</para>

<para>Un comun, pero insatisfactorio modo de intentar solucinar una Guerra Santa es decir "Ya hemos gastado bastante
tiempo y energia de lo que vale discutiendo esto! Por favor, ¿podemos dejarlo? Hay dos problemas en esto. Primero, que 
el tiempo y la energia ya se han gastado y ya no se pueden recuperar; la unica cuestion ahora es, cuanto esfuerzo
<emphasis>mas</emphasis> permanecera?  Si todavia alguno siente que un poco mas de discusion resolvera la cuestion
pronto, entonces todavia tiene sentido (desde su punto de vista) continuar.</para>

<para>El otro problema en preguntar para que la cuestion sea zanjada  es que esto es a menudo equivalente a permitir
a una parte el status quo, a declarar la victoria por inaccion. Y en algunos casos, el status quo es conocido por ser
de cualquier forma inaceptable: todo el mundo esta de acuerdo en que se debe llegar a una decision, se debe tomar 
alguna accion. Dejar el tema seria peor para todo el mundo que simplemente apoyando el argumento que daria alguien.
Pero dado que el dilema se aplica igualmente a todo el mundo, todavia es posible terminar discutiendo por siempre sobre
que hacer.</para>

<para>¿Como deberias manejar una Guerra Santa?</para>


<para>Puedes anticipar ciertas Guerras Santa estandar: tienden a tratar sobre
lenguajes de programacion, licencias
(mira <xref linkend="license-compatibility"></xref><phrase output="printed"> in <xref linkend="legal"></xref></phrase>),
en respuesta a munging (mira <xref linkend="reply-to"></xref><phrase output="printed">
en <xref linkend="technical-infrastructure"></xref></phrase>), y algunos otros topicos.
Normalmente cada proyecto tiene una o dos Guerras Santas, tambien, las cuales los desarrolladores
mas experimentados estaran ya familiarizados. Las tecnicas para frenar las Guerras Santas, o al
menos limitar su daño, son casi las mismas en cualquier lugar. Incluso si eres positivo y tu parte es correcta, intenta
encontrar <emphasis>alguna</emphasis> manera de expresar simpatia y comprension hacia los puntos de vista que los otros
hacen. A menudo el problema en una Guerra Santa es porque cada parte ha construido sus muros
lo mas alto posible, y dejan claro que cualquier otra opinion es totalmente idiota, el acto de
rendirse o cambiar el pensamiento de alguien se hace psicologicamente insostenible: sería
un reconocimiento no solamente siendo erróneo, pero habiendo sido <emphasis>ciertamente</emphasis>y
todavia siendo erróneo. La manera en que puedes hacer este reconocimiento aceptable por la 
otra parte es expresar alguna duda tu mismo; precisamente mostrando que comprendes sus
argumentos y al menos eres sensible a ellos, si no persuasivo finalmente. Haz un gesto que
proporcione espacio para un gesto recíproco, y normalmente la situación mejorará. No es ni más
ni menos probable que consigas el resultado técnico que querías, pero al menos puedes evitar
el daño colateral innecesario a la moral del proyecto.</para>

<para>Cuando una Guerra Santa no se puede evitar, decide pronto cuanto la apoyas, y entonces
estáte dispuesto públicamente a ceder. Cuando hagas esto, puedes decir que no estás respaldándola
porque la Guerra Santa no lo vale, pero no expreses ningún rencor y <emphasis>no</emphasis> tomes
la oportunidad para una despedida disparando contra los argumentos de la otra parte. Darse por
vencido es efectivo sólo cuando se hace con elegancia.</para>

<para>Las Guerras Santas de lenguajes de programación son un caso especial, porque a menudo
son mayormente técnicas, todavía mucha gente se siente cualificada para tomar parte en ellas,
y el interes es muy alto, ya que el resultado puede determinar en gran medida en que lenguaje
se va a escribir el proyecto. La mejor solución es elegir el lenguaje pronto, con la influencia
de los desarrolladores iniciales, y entonces defenderlo en los terrenos en los que eres
comfortable escribiendo, <emphasis>no</emphasis> en el terreno que sería mejor en el que otro
lenguaje se pudiera utilizar. Nunca dejes que la conversación en una comparación académica de 
lenguajes de programación (esto parece ocurrir especialmente cuando alguien menciona Perl, por
alguna razón); éste es un tópico muerto en el que simplemente debes evitar caer.</para>

<para>Para consultar más fondo histórico de las Guerras Santas, mira
<ulink url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, y el artículo de Danny Cohen
que popularizó el término, <ulink url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="noisy-minority">
<title>El efecto "Ruido Minoritario"</title>

<para>En cualquier discusion de una lista de correo, es fácil para una pequeña minoría
dar la impresión de que hay un gran acuerdo de contrariead, esto es inundando la lista
con numerosos y largos emails. Es igual a hacer una maniobra obstruccionista, excepto que
la ilusión de la disensión general es incluso más poderosa, porque está dividida entre 
un número arbitrario de posts discretos y a la mayoría de la gente no le importa seguir
la pista de quién ha dicho que, cuando. Sólo tienen una impresión instintiva de que el 
tema es muy controvertido, y esperan a que el escándalo disminuya.
</para>

<para>La mejor manera de contrarrestar este efecto es indicarlo muy claramente 
y proporcionar pistas respaldadas mostrando cómo de pequeño es el número actual
de disidentes comparado a los que están en acuerdo. Para incrementar la disparidad,
puedes querer encuestar de manera privada a la gente que ha estado la mayor parte
del tiempo en silencio, pero que sospechas que estarán de acuerdo con la mayoría.
been mostly silent, but who you suspect would agree with the majority.
No digas nada que sugiera que los disidentes estaban intentando deliberadamente inflar
la impresión que estaban creando. Oportunidades que no tuvieron, e incluso si las tuvieron
no había una ventaja estratégica para señalarla. Todo lo que necesitas es mostrar el
número actual en una comparación cara-a-cara, y la gente se dara cuenta que su intuición
de la situación no coincidía con la realidad.
</para>

<para>Este consejo no sólo se aplica a temas con una clara posición a-favor-en-contra.
Se aplica a cualquier discusión donde hay un alboroto, pero no esta claro que la mayoría
de la gente considere ese tema bajo discusión que sea un problema real. Despues de todo,
si estas de acuerdo en que el tema no es digno de acción, y puedes ver que ha fallado
en atraer la atención (incluso si ha generado muchos mails), puedes observar públicamente
que no está teniendo tracción. Si el efecto "ruido minoritario" ha funcionado, tu post
parecerá un soplo de aire fresco. La mayoría de la impresión de la gente de la discusión
se dará cuenta de que ese punto habrá sido algo turbio: Huh, seguro que sienten como
que hay un gran acuerdo aqui, porque seguramente hay un montón de posts, pero no puedo
ver que esté habiendo ningún progreso claro." Explicando como la manera en que la discusión
se hizo parezca más turbulenta de lo que realmente es, tú retrospectivamente le darás una
nueva forma, a través de la cual la gente pueda recapitular su comprensión del resultado.
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="difficult-people">
<title>Gente difícil</title>

<para>No es tan fácil tratar con gente díficl en foros electrónicos como
lo sería en persona. Con "díficil" no me refiero a "maleducados". La gente
maleducada es molesta, pero no son necesariamente díficiles. En este libro ya
se ha discutido como manejarlos:comenta la grsoería la primera vez, y desde entonces
ignórales o tratalos como otro cualquiera. Si continuan siendo maleducados, ellos
mismos se haran tan impopulares que no tendrán influencia en nadie del proyecto,
por lo que serán un problema de ellos mismos.
</para>

<para>Los casos realmente difíciles son la gente que no son manifiestamente groseros,
pero que manipulan o abusan en los procesos del proyecto de una manera que termina
costando el tiempo y la energía de otras personas, y todo ello sin traer ningún 
beneficio al proyecto. Tales personas a menudo buscan puntos de presión en los 
procedimientos del proyecto, para darse a sí mismos más influencia que de otra manera
no tendrían. Esto es mucho más insidioso que la grosería meramente, porque ni el 
comportamiento ni el daño que causa es aparente a los observadores casuales.
Un ejemplo clásico es aquellos que realizan maniobras obstruccionistas, en la que
alguien (siempre sonando tan razonable como sea posible, por supuesto) viene 
demandando que la cuestión bajo discusión no esta lista para una solución, y ofrece
más y más posibles soluciones, o nuevos puntos de vista de viejas soluciones, cuando
lo que realmente está pasando es que el sentido de un consenso o votación está a punto
de ocurrir, y no le gusta por donde va encaminado. Otro ejemplo es cuando hay un 
debate que no converge en consenso, pero el grupo al menos intenta clarificar los
puntos en desacuerdo y produce un sumario para que todo el mundo se refiera a partir
de el. El obstruccionista, que sabe que el sumario puede llevar a un punto que a
el no le va a gustar, a menudo intentará retrasar el sumario, implacablemente 
mediante complicadas cuestiones que deberían estar ahí, u objetando sugerencias 
razonables, o mediante la introducción de nuevos asuntos.
</para>

<sect2 id="handling-difficult-people">
<title>Tratando con gente difícil</title>

<para>Para contrarrestar tal comportamiento, ayuda el comprender la mentalidad
de aquellos que caen en él. La gente generalmente no lo hara conscientemente.
Nadie se levanta por la mañana y se dice a sí mismo: "Hoy voy a manipular
cínicamente las formas y procedimientos para ser así un irritante obstruccionista."
En cambio, tales acciones están a menudo precedidas por un sentimiento de 
semi-paranoia de estar fuera de las interacciones y decisiones del grupo. La
persona piensa que no se le toma seriamente, o (en casos más severos), que existe
una conspiración contra él;y que los otros miembros del proyecto han decidido
formar un club exclusivo, del cual el no es miembro. Esto entonces justifica en
su mente, a tomar las reglas literalmente y encargándose de una manipulación
formal de los procedimientos del proyecto, para así <emphasis> hacer </emphasis>
que todo el mundo le tome en serio. En casos extremos, la persona puede incluso
pensar que está luchando una batalla solo para salvar el proyecto de sí mismo.
</para>

<para>Es la naturaleza del propio ataque la que hara que nadie se percate
de él al mismo tiempo, y mucha gente no lo notará, a menos que se presente
con evidencias muy fuertes. Esto significa que neutralizarlo puede llevar algo
de trabajo. No basta con persuadirse a sí mismo de que está ocurriendo; tendrás que
organizar muy bien las evidencias para persuadir a los demás de lo que está ocurriendo,
y entonces tendrás que distribuir estas evidencias de una manera atenta.
</para>

<para>Dado que hay mucho por lo que luchar, a menudo la mejor opción es tolerarlo
de vez en cuando. Piensa en esto como un parásito, esto es una dolencia suave: si no
es muy debilitante, el proyecto podrá afrontar el permanecer infectado, y la medicina
podría tener efectos perjudiciales. Sin embargo, si consigue más daño del que se pueda
tolerar, entonces es tiempo de entrar en acción. Empieza reuniendo notas de los patrones
que observas. Asegurate de incluir referencias a archivos públicos; esta es una de las
razones por la que los proyectos mantiene históricos, para que puedas usarlos tambien.
Una vez que tengas una buena recopilación, empieza a entablar conversaciones privadas
con otros participantes del proyecto. No les digas lo que has observado; en vez de eso,
pregúntales primero que es lo que observan ellos. Esta puede ser tu última oportunidad
de conseguir feedback sin filtrar sobre como los demás observan el comportamiento de
los que crean problemas; una vez que has empezado a hablar abiertamente, la opinión se
polarizará y nadie será capaz de recordar que es lo que anteriormente opinaba sobre el
tema en cuestión.
</para>

<para>Si las discusiones privadas indican que tambien hay otros que
perciben el problema, entonces es hora de hacer algo. Aquí es donde tienes que ser
<emphasis>realmente</emphasis> cauteloso, porque sera muy fácil para este tipo de 
persona hacer parecer como que tú eres el que actua injustamente. Hagas lo que hagas,
nunca acuses de abusar maliciosamente de los procedimientos del proyecto, o de ser
paranoico, o, en general, de cualquier otra cosa que sospeches que probablemente sea
cierta. Tu estrategia deberá mostrarse tanto razonable como consciente del bienestar
global del proyecto. Con el objetivo de reformar la actitud de la persona, o de expulsarla
del proyecto permanentemente. Dependiendo de los otros desarrolladores, y de tu relación
con ellos, puede ser ventajoso conseguir aliados de manera privada primero. O puede que no;
ya que puede dificultar el ambiente interno, si la gente piensa que te estas dedicando
a una campaña de falsos e impropios rumores.
</para>

<para>Recuerda que aunque la otra persona sea la que se este portando destructivamente
<emphasis>tu</emphasis> seras la que parezca destructiva si le culpas públicamente y no lo
puedes probar. Asegurate de tener varios ejemplos y demostrar lo que estas diciendo, y dilo
tan suave como puedes pero siendo directo. Puede que no persuadas a la persona en cuestión,
pero estará bien mientras puedas persuadir a los demás.
</para>

</sect2>

<sect2 id="difficult-people-case-study">
<title>Estudio del caso</title>

<para>Recuerdo sólo una situación, en más de 10 años trabajando en Software Libre,
donde las cosas fueron tan mal, que nosotros tuvimos que preguntar a alguien para
que parase de postear completamente. Como era tan a menudo el caso, el no era maleducado
y quería sinceramente ser de utilidad. Simplemente no sabía cuando escribir a la lista y
cuando no hacerlo. Nuestras listas estaban abiertas al público, y él escribía muy a menudo,
preguntando cuestiones de diferentes temas, que empezó a ser un problema de ruido para la
comunidad. Nosotros habíamos intentado preguntarle de buenas maneras para que hiciera un
poco más de investigación para las respuestas antes de escribir a la lista, pero no hizo efecto.
</para>

<para>La estrategia que al final funcionó es un ejemplo perfecto de como construir una situación
neutral, y con datos cuantitativos. Uno de los cuatro desarrolladores hizo una exploración en los
archivos, y envío entonces el siguiente mensaje de manera privada a unos pocos desarrolladores.
El ofendido (el tercer nombre en la lista de abajo, se muestra aquí como "J. Random") tenía muy
poca historia con el proyecto, y no había contribuido ni con código ni documentación. Y aún así
era el tercero más activo en escribir mensajes en la lista de correo:
</para>

<screen>
From: "Brian W. Fitzpatrick" &lt;fitz@collab.net&gt;
To: [... recipient list omitted for anonymity ...]
Subject: The Subversion Energy Sink
Date: Wed, 12 Nov 2003 23:37:47 -0600

En los últimos 25 días, el top de los 6 que más han escrito en la lista de svn [dev|users] han sido:

    294  kfogel@collab.net
    236  "C. Michael Pilato" &lt;cmpilato@collab.net&gt;
    220  "J. Random" &lt;jrandom@problematic-poster.com&gt;
    176  Branko &Ccaron;ibej &lt;brane@xbc.nu&gt;
    130  Philip Martin &lt;philip@codematters.co.uk&gt;
    126  Ben Collins-Sussman &lt;sussman@collab.net&gt;

Diría que cinco de esas personas están contribuyendo con éxito al desarrollo
de la versión 1.0 de subversión en un futuro cercano.

Tambien diría que una de esas personas está constantemente atrayendo tiempo y energía de las
otras cinco, sin mencionar a la lista como un todo, así, (aunque no intencionadamente) está frenando
el desarrollo de Subversion. No hice un análisis de los hilos de correo, pero haciendo una búsqueda
en mi archivo de correo me muestra que a cada correo de esta persona le responde al menos uno o
dos de los otros cinco de la lista anterior.

Creo que algún tipo de intervención radical es necesaria en esto, incluso si nos asusta que el
susodicho se marche. Se ha comprobado que la finura y amabilidad aquí no tienen efecto.

dev@subversion es una lista de correo para facilitar el desarrollo de un sistema de control de versiones,
no una sesión de terapia de grupo.

-Fitz, intentando abrir camino con dificultad por el correo de svn de tres días que había dejado apilado.
</screen>

<para>Aunque no pueda parecerlo al principio, el comportamiento de J. Random's era un clásico
de abuso de los procedimientos del proyecto. El no estaba haciendo nada obvio más que intentando
obstruccionar en los votos, y estaba aprovechándose de la ventaja de la política de la lista
de correo de depender en la propia moderación de sus miembros. Dejamos al juicio de cada 
individuo en lo que escribe y sobre que materias. De esta manera, no teníamos recursos de
procedimiento para tratar con aquellos que no tenían buen juicio, o que no lo practicaban.
No había ninguna regla que pudieras apuntar e indicar que se estaba violando, aunque todo
el mundo ya sabía que sus frecuentes correos se estaban convirtiendo en un problema serio.
</para>

<para>La estrategia de Fitz era retrospectivamente maestra. El recopilo una cantidad de evidencia
irrefutable, y entonces la distribuyo discretamente, enviándola primero a unas pocas personas 
cuyo soporte sería clave en una acción drástica. Ellos estuvieron de acuerdo en que era necesaria
algún tipo de acción, y al final llamamos a J. Random por teléfono, le describimos el problema
directamente, y le preguntamos para que simplemente parase de escribir correos a la lista. El
nunca comprendio realmente las razones de ello; si hubiera sido capaza de comprenderlo, probablemente
hubiera ejercido un juicio apropiado en primer lugar. Pero el acordó en parar de escribir correos,
y la lista de correo se convirtio en útil de nuevo. Una de las razones por las que esta estrategia
funcionó fue quizás, la amenaza implícita con la que hubieramos empezado a restringir sus posts
vía el software de moderación que normalmente se utiliza para prevenir el spam
(consulta
<xref linkend="spam-prevention"></xref><phrase output="printed"> en
<xref linkend="technical-infrastructure"></xref></phrase>).  Pero la
razón por la que fuimos capaces de aquella opción en reserva fue que Fitz había
recopilado el apoyo necesario de la gente clave en primer lugar.
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="growth">
<title>Manejando el crecimiento</title>

<para>El precio del éxito es muy pesado en el mundo del Open Source. Conforme
tu software se hace más popular, el número de gente que empieza a buscar información 
sobre él, se incrementa dramaticamente, mientras el número de gente capaza de proporcionar
información se incrementa mucho más despacio. Además, incluso si el ratio fuera uniformemente
balanceado, todavía existiría un problema de escalabilidad en la forma en que la mayoría de
los proyectos Open source manejan las comunicaciones. Considera por ejemplo las listas de correo.
La mayoría de los proyectos tienen una lista de correo para cuestiones generales de los usuarios; a
veces los nombres de estas listas son "usuarios", "discusiones", o "ayuda" o algo similar. Cualquiera
que sea su nombre, el propósito de esas listas es el mismo: proporcionar un lugar donde la gente pueda
resolver sus cuestiones, mientras otros observan y (presumiblemente) absorben conocimiento de la 
observación de ese intercambio de conocimiento.
</para>

<para>Estas listas de correo funcionan muy bien hasta unos pocos miles de usuarios
y/o un par de cientos de posts al día. Pero más o menos, a partir de ahí el sistema
empieza a romperse, porque cada suscriptor vee cada post; si el número de post a la lista
empieza a exceder lo que cualquier lector individual puede procesar en un día, la lista se
convierte en una carga para sus miembros. Imagina por ejemplo, si Microsoft tuviera tal
lista de correo para Windows XP. Windows XP tiene cientos de millones de usuarios; aún 
incluso si el uno por ciento de ellos tuviera cuestiones en un periodo de veinticuatro
horas, entonces esta lista hipotética cientos de miles de posts al día! Por supuesto, 
tal lista de correo no podría existir, porque nadie permanecería subscrito. Este problema
no esta limitado a las listas de correo; la misma lógica se aplica a los canales del IRC,
los foros de discusión online y por ende, a cualquier sistema en el cual un grupo escuche
preguntas de individuos. Las implicaciones son siniestras: el modelo usual del Open Source
del soporte masivamente paralelizado simplemente no escala los niveles necesarios para
la dominación mundial.
</para>

<para>No habrá una explosión cuando los foros alcancen su punto de ruptura.
Se trata simplemente de un efecto silencioso de feedback negativo: la gente se borrará de
las listas, o saldrán de los canales del IRC, o a cualquier ritmo cesaran de preocuparse
en preguntar cuestiones, porque verán que no se les escuchará entre tanta gente. Así
cuanta más gente haga de estas su principal elección racional, la actividad de los foros
empezará a permanecer a un nivel inmanejable precisamente porque la gente racional o 
(al menos experimentada), empezará a buscar información por otros medios, mientras la gente
sin experiencia permanecerá y continuará preguntando en foros y listas de correo.
En otras palabras, uno de los efectos de continuar con el uso de modelos de comunicación
que no son escalables mientras que el proyecto crece es que la calidad media tanto de preguntas
y respuestas tiene a disminuir, lo cual hace que los nuevos usuarios parezcan más tontos de 
lo que son, cuando de hecho probablemente no lo sean. Se trata simplemente de que el ratio
beneficio/costo de el uso de esos foros masificados, disminuye, por lo que de manera 
natural, aquellos con experiencia, empezarán a buscar respuestas en otros sitios.
Ajustar los mecanismos de comunicación para poder con el crecimiento del proyecto,
implicará dos estrategias relacionadas:</para>

<orderedlist>
  <listitem><para>Reconociendo cuando partes especiales de un foro
            <emphasis>no</emphasis> sufren un crecimiento desmesurado, incluso si el
	    foro se trata como un todo, y separando aquellas partes creando otras nuevas,
	    en foros más especializados (ejem., no dejes que los buenos se arrastren por
            los malos).</para>
  </listitem>
  <listitem><para>Asegurando que existen muchas fuentes de información automáticas 
	    disponibles, y que se mantienen organizadas, actualizadas y fáciles de localizar.</para>
  </listitem>
</orderedlist>

<para>La estrategia (1) normalmente no es muy dura. La mayoría de los proyectos
empiezan con un foro principal: y una lista de correo para discusiones generales,
en las cuales las ideas de características, cuestiones de diseño y problemas de 
codificación puedan ser discutidos. Todo el mundo involucrado en el proyecto está
en la lista. Despues de un tiempo, se comprueba que la lista ha evolucionado en
varias sublistas basadas en diferentes temáticas. Por ejemplo, algunos hilos son 
claramente sobre desarrollo y diseño; otros son dudad de usuarios del tipo ¿"Cómo
hago tal cosa"?; quizá exista una tercera temática centrada en el registro de procesar
los informes de bugs y peticiones de mejora; y así. Un individuo dado, por supuesto
puede participar en varios tipos diferentes de hilos, pero lo más importante de todo
es que no hay mucho solapamiento entre los diferentes tipos mismos. Pueden ser divididos
en listas separadas sin causar ningún perjuicio en el proyecto, porque los hilos se
mantienen repartidos por temáticas.</para>

<para>Actualmente, realizar esta división es un proceso de dos pasos. Creas la nueva lista
(o el canal IRC, o lo que vaya a ser), y entonces gastas el tiempo necesario de manera 
educada pero insistiendo y recordando a la gente a <emphasis>usar</emphasis> los nuevos foros
apropiadamente. Este paso puede llevar semanas pero finalmente la gente captará la idea.
Simplemente tienes que hacer ver a alguien que envía un post al destino equivocado, cual
es el nuevo camino y hacerlo de manera visible, animando a que otras personas ayuden tambien
en los nuevos usuos. Es tambien muy útil tener una página web proporcionando una guía hacía
todas las listas disponibles; tus respuestas simplemente pueden referenciar esta página y,
como gratificación, el destinatario puede aprender sobre las pautas a seguir antes
de escribir un correo.</para>

<para>La estrategia (2) es un proceso en curso, dura durante todo el tiempo de vida del proyecto
e involucra a muchos participantes. Por supuesto es en parte cuestión de tener una documentación
actualizada (mira
<xref linkend="documentation"></xref><phrase output="printed"> en
<xref linkend="getting-started"></xref></phrase>) y asegurándote que la gente
vaya ahí. Pero es tambien mucho más que eso; las secciones que siguen discuten
esta estrategia en detalle.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="using-archives">
<title>Sobresaliente uso de los archivos</title>

<para>Tipicamente, todas las comunicaciones de un proyecto Open Source (excepto algunas
veces conversaciones en el IRC), son archivadas. Los archivos son públicos y se pueden buscar,
y tienen una estabilidad referencial: que significa, una vez que una pieza de información
se ha grabado en una dirección particular, permanece en esa dirección para siempre.</para>

<para>Usa estos archivos tanto como puedas, y tan visiblemente como sea posible. Incluso cuando
sepas la respuesta a alguna pregunta, si piensas que existe una referencia en los archivos que
contiene la respuestas, gasta el tiempo necesario para buscarla y presentarla. Cada vez que hagas
esto de una manera públicamente visible, algunas personas aprenderan la primera vez que significan
esos archivos, y que buscando en ellos pueden encontrar respuestas. Tambien, refiriéndose a los
archivos en vez de reescribir la respuesta, refuerzas la norma social contra la duplicación de
información. ¿Por qué obtenemos la misma respuesta en dos sitios diferentes? Cuando el número de
sitios que se puede encontrar es mantenido a un mínimo, la gente que lo ha encontrado antes están
más predispuestos a recordar qué y donde buscarlo para las próximas veces. Las referencias bien
situadas tambien contribuyen a la calidad de los resultados de búsqueda en general, porque ellos
refuerzan los recursos del objetivo en los rankings de los motores de búsqueda en Internet.
</para>

<para>Sin embargo, hay veces en las que duplicar la información tiene sentido.
Por ejemplo, supon que hay una respuesta en los archivos, que no es de tí, diciendo:</para>

<screen>
Parece que los índices Scanley indexes han sido corrompidos. Para devolverlos a
su estado original, ejecuta estos pasos:

1. Apaga el servidor Scanley.
2. Ejecuta el programa 'descorromper' que viene con Scanley.
3. Inicia el servidor.
</screen>

<para>Entonces, meses después, ves otro mail indicando que algunos indices
han sido corrompidos. Buscas los archivos y presentas la vieja respuesta anterior,
pero te das cuenta que faltan algunos pasos (quizás por error, o quizá porque el
software ha cambiado desde que se escribió ese post). La clásica manera para manejar
esto, es escribir un nuevo mail, con un conjunto de instrucciones más completo, y
explicitamente dar como obsoleto el anterior post mencionándolo así:</para>

<screen>
Parece que tus índices Scanley han sido corrompidos. Vimos este problem allá por Julio,
y J. Random publicó una solución en http://blahblahblah/blah. Abajo hay una descripción
más completa de como recuperar tus índices, basado en las instrucciones de J. Random
pero extendiéndolo un poco más:

1. Para el servidor Scanley.
2. Cambiate al usuario con el que se ejecuta el servidor Scanley.
3. Como este usuario, ejecuta el programa 'recuperar' en los índices.
4. Ejecuta Scanley a mano para ver si los índices funcionan ahora.
5. Reinicia el servidor.
</screen>

<para>(En un mundo ideal, sería posible poner una nota en el viejo post,
indicando que existe información más actualizada y apuntando al nuevo post
que la contiene. Sin embargo, no conozco ningún software de archivación que
ofrezca una característica "obsoleto por", quizá porque sería muy difícil de
implementar de una manera en que no viole la integridad de los archivos. Esta
es otra razón de porqué es buena idea crear páginas web con respuestas a cuestiones
comunes.</para>

<para>Los archivos probablemente son buscados más a menudo para respuestas
a cuestiones técnicas, pero su importancia para el proyecto va más allá de eso.
Si una pauta formal del proyecto son sus leyes establecidas, los archivos son
su ley común: una grabación de todas las decisiones hechas y como se llegó hasta
ellas. En cualquier discusión recurrente, actualmente es casi obligatorio empezar
con una búsqueda en los archivos. Esto permite empezar la discusión con un sumario
del estado actual de las cosas, anticipandose a objeciones, preparando refutaciones
y posiblemente descubriendo ángulos que no habías imaginado. También los otros 
participantes <emphasis>esperan</emphasis> de ti que hayas hecho una búsqueda en los
archivos. Incluso si las discusiones previas no llevaron a ninguna parte, tú deberías
incluir sugerencias cuando vuelvas al téma, para que la gente pueda ver por si mismos
a) que no llegaron a ningun consenso, y b) que tú hiciste tu trabajo, y por tanto que 
probablemente se este diciendo algo ahora que no se dijo anteriormente.</para>

<sect3 id="all-as-archives">
<title>Treat all resources like archives</title>

<para>Todos los consejos anteriores son extensibles más allá de los archivos
de las listas de mail. Tener piezas particulares de información de manera estable,
y en direcciones que se puedan encontrar convenientemente debería ser un principio
de organización para toda la información de un proyecto. Vamos a ver la FAQ como un
caso de estudio.</para>

<para>¿Cómo usa la gente una FAQ?</para>

<orderedlist>
  <listitem>
    <para>Buscan palabras y frases específicas.</para>
  </listitem>
  <listitem>
    <para>Quieren poder navegarla, disfrutando de la información sin buscar necesariamente
	  respuestas a cuestiones específicas.</para>
  </listitem>
  <listitem>
    <para>Esperan que motores de búsqueda como google conozcan el contenido de la FAQ, de
	  manera que las búsquedas puedan ser entradas en la FAQ.</para>
  </listitem>
  <listitem>
    <para>Quieren ser capaces de dirigirse directamente a otra gente en temas específicos
	  en la FAQ.</para>
  </listitem>
  <listitem>
    <para>Quieren ser capaces de añadir nuevo material a la FAQ, pero 
          hay que ver que esto ocurre menos a menudo que la búsqueda de respuestas
          &mdash;Las FAQs son de lejos mucho más leidas que escritas.</para>
  </listitem>
</orderedlist>

<para>El punto 1 implica que la FAQ debería estar disponible en algún tipo de formato
textual. Los puntos 2 y 3 implican que la FAQ debería estar disponible en forma de página HTML,
con el punto 2 indicando adicionalmnente que el HTML debería ser diseñado con legibilidad (ejem., 
necesitaras algún tipo de control sobre su apariencia), y debería tener una tabla de contenidos.
El punto 4 significa que cada entrada individual en la FAQ debería ser asignada como un HTML
<firstterm>named anchor</firstterm>, (anclas con nombre) un tag que permite a la gente alcanzar un sitio particular
en la página. El punto 5 significa que los ficheros fuente de la FAQ deberían estar disponibles
de una manera conveniente (ver <xref linkend="version-everything"></xref><phrase output="printed"> en
<xref linkend="technical-infrastructure"></xref></phrase>), un formato que sea fácil de editar.</para>

  <sidebar id="html-named-anchors-and-ids">
  <title>Named Anchors y atributos ID</title>

  <para>Hay dos maneras para que un navegador vaya a un sitio específico
  dentro de una página web: anclas con nombre y atributos id.</para>

  <para>Un <firstterm>ancla con nombre</firstterm> es simplemente un elemento HTML
  de ancla (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), pero con un atributo
  "name":</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>Versiones más recientes de HTML soportan un  <firstterm>atributo id </firstterm>
  genérico, el cual puede adjuntarse a cualquier elemento HTML,
  y no sólo a <literal>&lt;a&gt;</literal>.  Por ejemplo:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Ambos, anclas con nombre y atributos id son usados de la misma manera.
  Uno añade una marca hash y la etiqueta a una URL, y hacer así al navegador que
  salte directo a dicho punto de la página:
  </para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtualmente todos los navegadores soportan las anclas con nombre; los navegadores
  más modernos soportan el atributo id. Para asegurarnos, recomendaría utilizar tanto
  anclas con nombre únicamente, o anclas con nombre<emphasis>y</emphasis> atributos id attributes 
  juntos (con la misma etiqueta para ambos en un mismo par, por supuesto). Las anclas con nombre
  no pueden ser self-closing&mdash;incluso aunque no haya texto dentro del elemento, aún así
  deberas escribirlo en la forma two-sided:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...aunque normalmente habrá algún texto, como el título de una sección.</para>

  <para>Allá donde utilices un ancla de nombre, o un atributo id, o ambos,
  recuerda que la etiqueta no será visible a nadie que navegue a esa ubicación sin
  usar la etiqueta. Pero una persona podrá querer descubrir la etiqueta de un sitio
  en particular, para que puedan enviar un mail con la URL de la respuesta a una FAQ
  enviada a un amigo, por ejemplo. Para ayudar en eto, añade un <firstterm>atributo de título</firstterm> en
  el mismo elemento(s) donde has añadido el "name" y/o el atributo "id", por ejemplo:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>Cuando el ratón se situe sobre el texto dentro del elemento con el atributo
  del título, la mayoría de los navegadores mostraran una pequeña caja con el título.
  Normalmente, incluyo el signo hash para recordar al usuario que esto es lo que pondrá
  al final de la URL para ir directo a esta ubicación la próxima vez.</para>

  </sidebar>

<para>Formatenado la FAQ de esta manera es sólo un ejemplo de como crear un recurso
presentable. Las mismas propiedades&mdash;busqueda directa, disponibilidad en la mayoría
de buscadores de Internet, navegación, estabilidad referencial, y (donde se aplique)
edición&mdash;son aplicables a otras páginas web, el arbol del código fuente, el seguimiento
de bugs, etc. Simplemente ocurre que la mayoría del software de archivado de listas de correo
hace tiempo que reconocen la importancia de estas propiedades, y es por lo que  las listas
de correo tienden a tener estas funcionalidades de manera nativa, mientras otros formatos
requieren de un esfuerzo extra en la parte de mantenimiento(<xref linkend="managing-volunteers"></xref> discute como
difundir esta carga de mantenimiento a través de miles de voluntarios).</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="codifying-tradition">
<title>Tradición en la organización del contenido</title>

<para>Conforme un proyecto gana en complejidad y adquiere historia, la cantidad de datos que
cada participante debe absorber incrementa. Aquellos que llevan en el proyecto mucho tiempo
serán capaces de aprender, e inventar las convenciones del proyecto conforme avanza. A menudo
no serán conscientes del gran cuerpo de tradición que se ha ido acumulando, y puede sorprender
todos los pequeños fallos que los nuevos participantes del proyecto puedan hacer. Por supuesto,
el tema no es que los recién llegados tengan una menor calidad que los de antes; sino que se enfrentan
a una carga de cultura heredada mayor de la que tenían los recien llegados en el pasado.</para>

<para>Las tradiciones que un proyecto acumula son del tipo cómo comunicar y
mantener información y sobre estándares de codificación y otros temas técnicos. Ya
hemos repasado ambas clases de estándares, en
<xref linkend="developer-documentation"></xref><phrase output="printed"> 
en <xref linkend="getting-started"></xref></phrase> y
<xref linkend="written-rules"></xref><phrase output="printed"> en
<xref linkend="social-infrastructure"></xref></phrase> respectivamente, y
se han mostrado ejemplos. Sobre lo que trata esta sección es de como mantener
esas pautas actualizadas conforme el proyecto avanza, especialmente pautas sobre
cómo se administran las comunicaciones, porque estas son las únicas que cambian
la mayoría conforme el proyecto crece en tamaño y complejidad.</para>

<para>Primero, busca patrones de cómo la gente se equivoca. Si observas las mismas situaciones
una y otra vez, especialmente con participantes nuevos, se presenta una oportunidad en forma
de pauta que necesita ser documentada pero no lo está. Segundo, no te canses de decir las mismas
cosas una y otra vez, y que no <emphasis>parezca</emphasis> que estás cansado de repetirlas. Tú
y otros veteranos del proyecto tendréis que repetirlas entre vosotros mismos a menudo; este es un
efecto inevitable de la llegada de nuevos participantes.</para>

<para>Cada página web, cada mensaje de lista de correo, y cada canal del IRC, deberá ser considerado
como un espacio de publicidad per no de anuncios comerciales, sino de anuncios sobre los recursos propios
de tu proyecto. Lo que pongas en este espacio dependerá de la procedencia de los que lo vayan a leer.
Un canal IRC para cuestiones de usuario, por ejemplo, atraerá gente que nunca habrá interactuado con
el proyecto antes, a menudo alguien que ha instalado el software, y tiene alguna pregunta que le gustaría
que le respondieran al momento (después de todo, si puediera esperar, hubiera enviado un mail a la lista
de correo la cual probablemente usa menos de su tiempo total, aunque tardaría más en recibir respuesta).
La gente normalmente no realiza una inversión permanente en el canal de IRC, aparecerán, lanzarán su pregunta
y se irán.</para>

<para>De ahí, el tema del canal debería apuntar a gente buscando respuestas técnicas en <emphasis>ese
momento</emphasis>, en vez de, gente que quiera involucrarse con el proyecto de una manera permanente
y para los cuales unas pautas de interaccion serían más apropiadas. Aquí es donde un
canal verdaderamente ocupado lo maneja (comparalo con el ejemplo anterior en
<xref linkend="irc"></xref><phrase output="printed"> en
<xref linkend="technical-infrastructure"></xref></phrase>):</para>

<screen>
You are now talking on #linuxhelp

Topic for #linuxhelp is Please READ
http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
rules are at http://www.nerdfest.org/lh_rules.html | Please consult
http://kerneltrap.org/node/view/799 before asking about upgrading to a
2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc -&gt;
update to 2.6.8.1 or 2.4.27 | hash algo disaster: http://tinyurl.com/6w8rf
| reiser4 out
</screen>

<para>Con las listas de correo, el "espacio de AD" es un ligero pie de página
añadido a cada mensaje. La mayoría de los proyectos ponen ahí instrucciones de
suscripción/borrado, y quizás un enlace a la página principal del proyecto o también
a la FAQ. Puedes pensar que cualquiera que esté suscrito a la lista sabrá donde encontrar
esa información, y probablemente entonces lo hagan, pero mucha más gente que únicamente
los subscriptores verán esos correos de la lista. Un post archivado se puede enlazar
desde diversos lugares; de hecho, algunos posts se vuelven tan famosos que eventualmente
son leidos por más lectores fuera de la lista que de ella.</para>

<para>El formateo puede crear una gran diferencia. Por ejemplo, en el proyecto, tuvimos un éxito
limitado utilizando la técnica de filtrado de bugs descrita en
<xref linkend="bug-filtering"></xref><phrase output="printed"> en
<xref linkend="technical-infrastructure"></xref></phrase>.  Muchos de los falsos bugs
reportados estaban siendo todavía rellenados por gente sin experiencia, y ocurría
cada vez, el informador tenía que ser educado de la misma manera que lo había sido con
las 500 personas de antes. Un día, después de que a uno de nuestros desarrolladores finalmente
se le agotara la paciencia y empezó a criticar y meterse con un pobre usuario por no haberse
leído detenidamente la guía de uso del bug tracker, otro desarrollador decidió que este
patrón había ido ya demasiado lejos. Sugirió que reformatearamos la página frontal del bug 
tracker de tal forma que lo más importante, los mandatos para discutir los bugs en la
lista de correo o en los canales IRC antes de rellenarlos, serían letras muy grandes, en rojo
resaltado sobre un fondo amarillo y resaltado claramente sobre todo los demás elementos
de la página. Así lo hicimos (puedes ver los resultados en
<ulink url="http://subversion.tigris.org/project_issues.html"></ulink>), y
y el resultado fue un descenso notable en el ratio de falsos bugs relleandos.
Por supuesto, todavía los tenemos, y siempre los tendremos, pero el ratio ha descendido
considerablemente, incluso aunque el número de usuarios incrementa. El resultado no es solamente
que la base de datos de bugs tiene menos basura, sino que aquellos que responden a los tickets
de bugs lo hacen con buen carácter, y es más probable permanecer amistosamente cuando se responde
a uno de los pocos bugs falsos. Esto mejora tanto la imagen del proyecto como la salud mental de sus
voluntarios.</para>

<para>La leccion para nosotros fue que únicamente escribiendo unas guías de uso no era demsiado.
También tuvimos que colocarlas allá donde más se vieran por la gente que más las iba a necesitar,
y formatearlas de tal manera que su estado y material introductorio estuviese inmediatamente claro
para la gente que no estuviera familiarizada con el proyecto.</para>

<para>Las páginas web estáticas no son el único lugar para publicar las características
del proyecto. Una cierta cantidad de políticas interactivas (en el sentido de recordatorio-amigable
, no en el sentido de enjaular y atar) también son requeridas. Todas las revisiones por pares, incluso
las revisiones de commits descritas en
<xref linkend="code-review"></xref><phrase output="printed"> en
<xref linkend="getting-started"></xref></phrase>, deberían incluir revisiones
de conformidad o no-conformidad con las normas del proyecto, especialmente en relación
a las convenciones de las comunicaciones. </para>

<para>Otro ejemplo del proyecto Subversion: fijamos una convención de
"r12908" qué significaba "revision 12908 en el repositorio de control
de versiones". El prefijo "r" es facil de escribir, y porque
es la mitad de peso que los dígitos, lo hace un bloque de texto fácilmente 
reconocible combinado con digitos. Por supuesto, fijándolo así en la convención
no significaba que todo el mundo lo empezara a usar consistentemente de la manera
correcta. Hasta ahora, cuando un mail de commit viene con un log como este:</para>

<screen>
------------------------------------------------------------------------
r12908 | qsimon | 2005-02-02 14:15:06 -0600 (Wed, 02 Feb 2005) | 4 lines

Patch from J. Random Contributor &lt;jrcontrib@gmail.com&gt;

* trunk/contrib/client-side/psvn/psvn.el:
  Fixed some typos from revision 12828.
------------------------------------------------------------------------
</screen>

<para>...parte de la revisión de este comit es decir "A partir de ahora, por favor
usa 'r12828', en vez de 'revision 12828' cuando te refieras a cambios del pasado."
Esto no es pedante; es importante tanto para el parseo automático como para los lectores
humanos.</para>

<para>Siguiendo los principios generales, de seguir métodos canonicos de referencia, y
que estos métodos de referencia debieran ser usados consistentemente en todos los sitios,
el proyecto en efecto exporta ciertos estándares. Estos estándares hacen que la gente escriba
herramientas que presenten las comunicaciones del proyecto de una manera más útil; por ejemplo,
una revisión formateada como "r12828" podría transformarse en un enlace vivo dentro del sistema
de navegación del repositorio. Esto sería muy difícil de realizar si la revisión se hubiera escrito
como "revision 12828", tanto porque la forma podría dividirse a través de un salto de línea, y porque 
es menos distintiva (la palabra "revision", a menudo aparecerá sola, y los grupos de números también
apareceran solos, allí donde la combinación "r12828" puede significar únicamente un número de revisión).
Asuntos similares se aplican tambien a temas con números, FAQs (truco: utiliza una URL con un 
named anchor, como se describe en
<xref linkend="html-named-anchors-and-ids"></xref>), etc.</para>

<para>Incluso para las entidades en las cuales no hay una manera obvia,
la forma canónica, se debería recomendar a la gente el proporcionar piezas
clave de información consistente. Por ejemplo, en lo que se refiere a un mensaje
de lista de correo, no facilites simplemente el destinatario y el asunto; facilita
tambien la URL del archivo <emphasis>y</emphasis> la cabecera Message-ID. Esto último permitirá
a la gente que tenga su propia copia de la lista de correo (la gente a veces copias offline, por
ejemplo para utilizarlas en el portátil mientras viajan) indentificar de manera inequivoca el
mensaje correcto incluso aunque no tengan acceso a los archivos. El destinatario y asunto tampoco
serían demasiado, porque la misma persona podría crear diversos posts en el mismo hilo, incluso
en el mismo día.</para>

<para>Cuanto más crece un proyecto, más importante es este tipo de consistencia. Consitencia signfica
que allá donde todo el mundo mire, verán que se siguen los mismos patrones, así que ellos tambíen
sabran seguir por ellos mismos los patrones. Esto también reduce el número de cuestiones que necesitarán
preguntar. La carga de tener un millon de lectores no es más grande que el tener sólo uno; los problemas
de escalabilidad empiezan a surgir solo cuando un cierto porcentage de estos lectores hacen preguntas.
Conforme el proyecto crece, por tanto, se debe reducir aquel porcentage incrementando la densidad y accesibilidad
de la información, de tal manera que una persona dada pueda encontrar la información que necesite sin
necesidad de preguntar.</para>

<!--

<para><remark>See
<ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate concern.  Log message
templates.  Make sure that commit reviews apply to log messages and
other "meta" aspects of the commit as well as to the code
itself.</remark></para>

-->

</sect2>

<!-- todo: A lot of projects have designated summarizers, like the
Zack Brown (?) for the Linux kernel, and I think I've seen similar
stuff at DebianPlanet as well.  That's another thing to talk about in
this discussion of "Strategy (2)", and maybe something to add to the
Project Roles examples in <xref linkend="share-management"/>.
-->

</sect1>

<sect1 id="bug-tracker-usage">
<title>Sin conversaciones en el bug tracker</title>

<para>En cualquier proyecto que haga un uso activo del Bug Tracker (sistema de seguimiento
de errores), siempre existe peligro de que este sistema se convierta en un foro de discusión
en sí mismo, incluso aunque las listas de correo sean mejor para ello.
Normalmente empieza de una manera demasiado inocente, alguien anota un tema con, digamos,
una propuesta de solución, o un parche parcial. Otro ve esto, y se da cuenta de que existen
problemas en esa solución, y añade otro punto anotando los problemas. La primera persona 
entonces responde otra vez añadiéndolo al tema, y así sucesivamente...</para>

<para>El problema con esto es, primero que el bug tracker es un lugar bastante pesado
para tener una discusión, y segundo, que otras personas pueden no estar prestando atención,
después de todo, se espera que la discusión sobre desarrollo ocurra en la lista de correo
de desarrollo, por lo que será ahí donde buscarán. Puede que la gente no esté subscrita a
la lista de cambios de tickets despues de todo, y aunque lo estén, puede que no la sigan
muy de cerca.</para>

<para>Pero exactamente, ¿en que parte del proceso se cometió el error?  ¿Fue cuando la persona
original envío su solución al tema?, ¿debería haberla enviado a la lista de correo mejor? ¿O quizá
fue cuando la segunda persona respondió al tema, en vez de a la lista?</para>

<para>No hay una respuesta correcta, pero hay un principio general:
sí simplemente vas a añadir un apunte, hazlo en el tracker, pero si vas
a empezar una <emphasis>conversacion</emphasis>, entonces hazlo en la lista de correo.
Puede que a veces no seas capaz de saber cual es el caso, simplemente usa el juicio.
Por ejemplo, cuando añadas un parche que contiene una solución potencialmente controvertida,
puedes anticiparte  de que la gente tendrá preguntas sobre ella. Así que aunque normalmente
añadas el parche al ticket (asumiendo que no quieres o no puedas realizar el cambio directamente),
en este caso puedes elegir enviarlo a la lista de correo. En todo caso, eventualmente vendrá un punto
donde una parte o la otra indicarán sobre ir desde un simple añadido de datos a la conversación actual;
en el ejemplo que iniciaba esta sección, este sería el segundo que responde, quién dándose cuenta
de que había problemas con el parche, pudo predecir que iba a darse una conversación sobre ello, y de ahí
que debiera hacerse en el medio apropiado.</para>

<para>Para usar una analogía matemática, si la información parece que será rápidamente convergente, entonces
ponla directamente en el bug tracker; si parece que será divergente, entonces el mejor sitio serán una lista
de correo o el canal de IRC.</para>

<para>Esto no significa que nunca debe haber intercambios en el bug tracker. Preguntar sobre más
detalles de la reproducción del fallo al informador original tiende a ser un proceso altamente
convergente. Es poco probable que la respuesta de la persona genere nuevos tickets;
simplemente rellenará información que ya ha sido añadida. No hay necesidad  de distrare a la lista
de correo con este proceso; esto significa que; tengas cuidado con una serie de comentarios en el
tracker. Así mismo, si estás demasiado seguro de que el bug ha sido reportado erróneamente (por ejem.,
no es un bug), entonces simplemente puedes decirlo correctamente en el ticket. Incluso apuntandolo
como un problema menor con una solución propuesta está bien, asumiendo que el problema no va a
ser un problema a toda la solución.</para>

<para>Por otra parte, si estás lanzando razones filosóficas sobre el alcance del
bug o el comportamiento apropiado del software, puedes estar seguro de que otros 
desarrolladores querrán involucrarse. La discusión tenderá a discrepar por momentos
antes de convergir, así que mejor hacerlo en la lista de correo.</para>

<para>Cuando decidas hacerlo en la lista de correo, enlaza siempre al hilo
de la lista del correo con el ticket. Todavía será importante para alguien
que siga el ticket, ser capáz de alcanzar la discusión, aunque el ticket en si
mismo no esté en el foro de discusión. La persona que empieza el hilo puede  
puede encontrar esto muy difícil, pero el open source es fundamentalmente una
cultura de responsabilidad de escribir: es mucho más importante hacer las cosas
fáciles para cientos de miles de personas que pueden leer el bug que para las
tres o cinco personas que pueden escribir sobre él.</para>

<para>Es correcto tomar conclusiones importantes o sumarios de la lista de discusión
y copiarlas en el ticket, si esto hace las cosas más faciles para los lectores.  Un punto
común es empezar una lista de discusión, poner un enlace al hilo en el ticket, y entonces
cuando la discusión finalice, copiar el sumario final en el ticket (junto con un enlace al mensaje
conteniendo el sumario), de tal manera que alguien que navegue por este ticket pueda fácilmente
ver a que conclusiones se llegaron  sin tener que hacer click en ningún otro sitio.
Date cuenta de que el problema usual de duplicación de datos "dos maestros" no tiene lugar
aquí, porque ambos archivos y comentarios de tickets son normalmente estáticos, datos intercambiables.
</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="publicity">
<title>Publicity</title>

<para>In free software, there is a fairly smooth continuum between
purely internal discussions and public relations statements.  This is
partly because the target audience is always ill-defined: given that
most or all posts are publicly accessible, the project doesn't have
full control over the impression the world gets.  Someone&mdash;say, a
<ulink url="slashdot.org"></ulink> editor&mdash;may draw millions of readers'
attention to a post that no one ever expected to be seen outside the
project.  This is a fact of life that all open source projects live
with, but in practice, the risk is usually small.  In general, the
announcements that the project most wants publicized are the ones that
will be most publicized, assuming you use the right mechanisms to
indicate relative newsworthiness to the outside world.</para>

<para>For major announcements, there tend to be four or five main
channels of distribution, on which announcements should be made as
nearly simultaneously as possible:</para>

<orderedlist>

  <listitem><para>Your project's front page is probably seen by more
            people than any other part of the project.  If you have a
            really major announcement, put a blurb there.  The blurb
            should be a very brief synopsis that links to the press
            release (see below) for more information.</para>
  </listitem>

  <listitem><para>At the same time, you should also have a "News" or
            "Press Releases" area of the web site, where the
            announcement can be written up in detail.  Part of the
            purpose of a press release is to provide a single,
            canonical "announcement object" that other sites can link
            to, so make sure it is structured accordingly: either as
            one web page per release, as a discrete blog entry, or
            as some other kind of entity that can be linked to while
            still being kept distinct from other press releases in the
            same area.</para>
  </listitem>

  <listitem><para>If your project has an RSS feed, make sure the
            announcement goes out there too.  This may happen
            automatically when you create the press release, depending
            on how things are set up at your site.
            (<firstterm>RSS</firstterm> is a mechanism for
            distributing meta-data-rich news summaries to
            "subscribers", that is, people who have indicated an
            interest in receiving those summaries.  See
     <ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html"></ulink>
            for more information about RSS.)</para>
  </listitem>

  <listitem><para>If the announcement is about a new release of the
            software, then update your project's entry on
            <ulink url="http://freshmeat.net/"></ulink> (see
            <xref linkend="announcing"></xref> about creating the entry
            in the first place).  Every time you update a Freshmeat
            entry, that entry goes onto the Freshmeat change list
            for the day.  The change list is updated not only on
            Freshmeat itself, but on various portal sites (including
            <ulink url="slashdot.org"></ulink>) which are watched eagerly by
            hordes of people.  Freshmeat also offers the same data via
            RSS feed, so people who are not subscribed to your
            project's own RSS feed might still see the announcement
            via Freshmeat's.</para>
  </listitem>

  <listitem><para>Send a mail to your project's announcement mailing
            list.  This list's name should actually be "announce",
            that is, <literal>announce@yourprojectdomain.org</literal>,
            because that's a fairly standard convention now, and the
            list's charter should make it clear that it is very
            low-traffic, reserved for major project announcements.
            Most of those announcements will be about new releases of
            the software, but occasionally other events, such as a
            fundraising drive, the discovery of a security
            vulnerability (see
            <xref linkend="security"></xref>)<phrase output="printed">
            later in this chapter</phrase>, or a
            major shift in project direction may be posted there as
            well.  Because it is low traffic and used only for
            important things, the <literal>announce</literal> list
            typically has the highest subscribership of any mailing
            list in the project (of course, this means you shouldn't
            abuse it&mdash;consider carefully before posting).  To
            avoid random people making announcements, or worse, spam
            getting through, the <literal>announce</literal> list must
            always be moderated.</para>
  </listitem>

</orderedlist>

<para>Try to make the announcements in all these places at the same
time, as nearly as possible.  People might get confused if they see an
announcement on the mailing list but then don't see it reflected on
the project's home page or in its press releases area.  If you get the
various changes (emails, web page edits, etc.) queued up and
then send them all in a row, you can keep the window of inconsistency
very small.</para>

<para>For a less important event, you can eliminate some or all of the
above outlets.  The event will still be noticed by the outside world
in direct proportion to its importance.  For example, while a new
release of the software is a major event, merely setting the date of
the next release, while still somewhat newsworthy, is not nearly as
important as the release itself.  Setting a date is worth an email to
the daily mailing lists (not the announce list), and an update of the
project's timeline or status web page, but no more.</para>

<para>However, you might still see that date appearing in discussions
elsewhere on the Internet, wherever there are people interested in the
project.  People who are lurkers on your mailing lists, just listening
and never saying anything, are not necessarily silent elsewhere.  Word
of mouth gives very broad distribution; you should count on it, and
construct even minor announcements in such a way as to encourage
accurate informal transmission.  Specifically, posts that you expect
to be quoted should have a clearly meant-to-be-quoted portion, just as
though you were writing a formal press release.  For example:</para>

  <blockquote>
     <para><emphasis>Just a progress update: we're planning to release
     version 2.0 of Scanley in mid-August 2005.  You can always check
     http://www.scanley.org/status.html for updates.  The major new
     feature will be regular-expression searches.</emphasis></para>

     <para><emphasis>Other new features include:&nbsp;... There will
     also be various bugfixes, including:&nbsp;...</emphasis></para>
  </blockquote>

<para>The first paragraph is short, gives the two most important
pieces of information (the release date and the major new feature),
and a URL to visit for further news.  If that paragraph is the only
thing that crosses someone's screen, you're still doing pretty well.
The rest of the mail could be lost without affecting the gist of the
content.  Of course, sometimes people will link to the entire mail
anyway, but just as often, they'll quote only a small part.  Given that
the latter is a possibility, you might as well make it easy for them,
and in the bargain get some influence over what gets quoted.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="security">
<title>Announcing Security Vulnerabilities</title>

<para>Handling a security vulnerability is different from handling any
other kind of bug report.  In free software, doing things openly and
transparently is normally almost a religious credo.  Every step of the
standard bug-handling process is visible to all who care to watch: the
arrival of the initial report, the ensuing discussion, and the
eventual fix.</para>

<para>Security bugs are different.  They can compromise users' data,
and possibly users' entire computers.  To discuss such a problem
openly would be to advertise its existence to the entire
world&mdash;including to all the parties who might make malicious use
of the bug.  Even merely committing a fix effectively announces the
bug's existence (there are potential attackers who watch the commit
logs of public projects, systematically looking for changes that
indicate security problems in the pre-change code).  Most open source
projects have settled on approximately the same set of steps to handle
this conflict between openness and secrecy, based on the these basic
guidelines:</para>

<orderedlist>
  <listitem><para>Don't talk about the bug publicly until a fix is
            available; then supply the fix at exactly the same moment
            you announce the bug.</para> 
  </listitem>
  <listitem><para>Come up with that fix as fast as you
            can&mdash;especially if someone outside the project
            reported the bug, because then you know there's at least
            one person outside the project who is able to exploit the
            vulnerability.</para>
  </listitem>
</orderedlist>

<para>In practice, those principles lead to a fairly standardized
series of steps, which are described in the sections below.</para>

<sect3 id="security-receiving">
<title>Receive the report</title>

<para>Obviously, a project needs the ability to receive security bug
reports from anyone.  But the regular bug reporting address won't do,
because it can be watched by anyone too.  Therefore, have a separate
mailing list for receiving security bug reports.  That mailing list
must not have publicly readable archives, and its subscribership must
be strictly controlled&mdash;only long-time, trusted developers can be
on the list.  If you need a formal definition of "trusted", you can
use "anyone who has had commit access for two years or more" or
something like that, to avoid favoritism.  This is the group that will
handle security bugs.</para>

<para>Ideally, the security list should not be spam-protected or
moderated, since you don't want an important report to get filtered
out or delayed just because no moderators happened to be online that
weekend.  If you do use automated spam-protection software, try to
configure it with high-tolerance settings; it's better to let a few spams
through than to miss a report.  For the list to be effective, you must
advertise its address, of course; but given that it will be unmoderated
and, at most, lightly spam-protected, try to never to post its address
without some sort of address hiding transformation, as described in
<xref linkend="address-hiding"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>.
Fortunately, address-hiding need not make the address illegible; see
<ulink url="http://subversion.tigris.org/security.html"></ulink>, and view
that page's HTML source, for an example.</para>

</sect3>

<sect3 id="security-finding-a-fix">
<title>Develop the fix quietly</title>

<para>So what does the security list do when it receives a report?
The first task is to evaluate the problem's severity and
urgency:</para>

<orderedlist>
  <listitem><para>How serious is the vulnerability?  Does it allow a
            malicious attacker to take over the computer of someone
            who uses your software?  Or does it, say, merely leak
            information about the sizes of some of their files?</para>
  </listitem>

  <listitem><para>How easy is it to exploit the vulnerability?  Can
            an attack be scripted, or does it require circumstantial
            knowledge, educated guessing, and luck?</para>
  </listitem>

  <listitem><para><emphasis>Who</emphasis> reported the problem to
            you?  The answer to this question doesn't change the
            nature of the vulnerability, of course, but it does give
            you an idea of how many other people might know about it.
            If the report comes from one of the project's own
            developers, you can breathe a little easier (but only a
            little), because you can trust them not to have told
            anyone else about it.  On the other hand, if it came in an
            email from <literal>anonymous14@globalhackerz.net</literal>,
            then you'd better act as fast as you can.  The person did
            you a favor by informing you of the problem at all, but you
            have no idea how many other people she's told, or how long
            she'll wait before exploiting the vulnerability on live
            installations.</para>
  </listitem>
</orderedlist>

<para>Note that the difference we're talking about here is often just
a narrow range between <emphasis>urgent</emphasis>
and <emphasis>extremely&nbsp;urgent</emphasis>.  Even when the report
comes from a known, friendly source, there could be other people on
the Net who discovered the bug long ago and just haven't reported it.
The only time things aren't urgent is when the bug inherently does not
compromise security very severely.</para>

<para>The "<literal>anonymous14@globalhackerz.net</literal>" example
is not facetious, by the way.  You really may get bug reports from
identity-cloaked people who, by their words and behavior, never quite
clarify whether they're on your side or not.  It doesn't matter: if
they've reported the security hole to you, they'll feel they've done
you a good turn, and you should respond in kind.  Thank them for the
report, give them a date on or before which you plan to release a
public fix, and keep them in the loop.  Sometimes they may
give <emphasis>you</emphasis> a date&mdash;that is, an implicit threat
to publicize the bug on a certain date, whether you're ready or not.
This may feel like a bullying power play, but it's more likely a
pre&euml;mptive action resulting from past disappointment with
unresponsive software producers who didn't take security reports
seriously enough.  Either way, you can't afford to tick this person
off.  After all, if the bug is severe, he has knowledge that could
cause your users big problems.  Treat such reporters well, and hope
that they treat you well.</para>

<para>Another frequent reporter of security bugs is the security
professional, someone who audits code for a living and keeps up on the
latest news of software vulnerabilities.  These people usually have
experience on both sides of the fence&mdash;they've both received and
sent reports, probably more than most developers in your project have.
They too will usually give a deadline for fixing a vulnerability
before going public.  The deadline may be somewhat negotiable, but
that's up to the reporter; deadlines have become recognized among
security professionals as pretty much the only reliable way to get
organizations to address security problems promptly.  So don't treat
the deadline as rude; it's a time-honored tradition, and there are
good reasons for it.</para>

<para>Once you know the severity and urgency, you can start working on
a fix.  There is sometimes a tradeoff between doing a fix elegantly
and doing it speedily; this is why you must agree on the urgency
before you start.  Keep discussion of the fix restricted to the
security list members, of course, plus the original reporter (if she
wants to be involved) and any developers who need to be brought in for
technical reasons.</para>

<para>Do not commit the fix to the repository.  Keep it in patch form
until the go-public date.  If you were to commit it, even with an
innocent-looking log message, someone might notice and understand the
change.  You never know who is watching your repository and why they
might be interested.  Turning off commit emails wouldn't help; first
of all, the gap in the commit mail sequence would itself look
suspicious, and anyway, the data would still be in the repository.
Just do all development in a patch and keep the patch in some private
place, perhaps a separate, private repository known only to the people
already aware of the bug.  (If you use a decentralized version control
system like Arch or SVK, you can do the work under full version
control, and just keep that repository inaccessible to
outsiders.)</para>

</sect3>

<sect3 id="security-cve">
<title>CAN/CVE numbers</title>

<para>You may have seen a <firstterm>CAN number</firstterm> or
a <firstterm>CVE number</firstterm> associated with security problems.
These numbers usually look like "CAN-2004-0397" or
"CVE-2002-0092", for example.</para>

<para>Both kinds of numbers represent the same type of entity: an
entry in the list of "Common Vulnerabilities and Exposures" list
maintained at <ulink url="http://cve.mitre.org/"></ulink>.  The purpose of
the list is to provide standardized names for all known security
problems, so that everyone has a unique, canonical name to use when
discussing one, and a central place to go to find out more
information.  The only difference between a "CAN" number and a "CVE"
number is that the former represents a candidate entry, not yet
approved for inclusion in the official list by the CVE Editorial
Board, and the latter represents an approved entry.  However, both
types of entries are visible to the public, and an entry's number does
not change when it is approved&mdash;the "CAN" prefix is simply
replaced with "CVE".</para>

<para>A CAN/CVE entry does not itself contain a full description of
the bug and how to protect against it.  Instead, it contains a brief
summary, and a list of references to external resources (such as
mailing list archives) where people can go to get more detailed
information.  The real purpose of <ulink url="http://cve.mitre.org/"></ulink>
is to provide a well-organized space in which every vulnerability can
have a name and a clear route to more data.  See
<ulink url="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2002-0092"></ulink>
for an example of an entry.  Note that the references can be very
terse, with sources appearing as cryptic abbreviations.  A key to
those abbreviations is at
<ulink url="http://cve.mitre.org/cve/refs/refkey.html"></ulink>.</para>

<para>If your vulnerability meets the CVE criteria, you may wish to
acquire it a CAN number.  The process for doing so is deliberately
gated: basically, you have to know someone, or know someone who knows
someone.  This is not as crazy as it might sound.  In order for the
CVE Editorial Board to avoid being overwhelmed with spurious or
poorly written submissions, they take submissions only from sources
they already know and trust.  In order to get your vulnerability
listed, therefore, you need to find a path of acquaintance from your
project to the CVE Editorial Board.  Ask around among your developers;
one of them will probably know someone else who has either done the
CAN process before, or knows someone who has, etc.  The advantage of
doing it this way is also that somewhere along the chain, someone may
know enough to tell you that a) it wouldn't count as a vulnerability
or exposure according to MITRE's criteria, so there is no point
submitting it, or b) the vulnerability already
<emphasis>has</emphasis> a CAN or CVE number.  The latter can happen
if the bug has already been published on another security advisory
list, for example at <ulink url="http://www.cert.org/"></ulink> or on the
BugTraq mailing list at <ulink url="http://www.securityfocus.com/"></ulink>.
(If that happened without your project hearing about it, then you
should worry what else might be going on that you don't know
about.)</para>

<para>If you get a CAN/CVE number at all, you usually want to get it
in the early stages of your bug investigation, so that all further
communications can refer to that number.  CAN entries are embargoed
until the go-public date; the entry will exist as an empty placeholder
(so you don't lose the name), but it won't reveal any information
about the vulnerability until the date on which you will be announcing
the bug and the fix.</para>

<para>More information about the CAN/CVE process may be found at
<ulink url="http://cve.mitre.org/about/candidates.html"></ulink>, and a
particularly clear exposition of one open source project's use of
CAN/CVE numbers is at
<ulink url="http://www.debian.org/security/cve-compatibility"></ulink>.</para>

</sect3>

<sect3 id="security-prenotification">
<title>Pre-notification</title>

<para>Once your security response team (that is, those developers who
are on the security mailing list, or who have been brought in to deal
with a particular report) has a fix ready, you need to decide how to
distribute it.</para>

<para>If you simply commit the fix to your repository, or otherwise
announce it to the world, you effectively force everyone using your
software to upgrade immediately or risk being hacked.  It is sometimes
appropriate, therefore, to do <firstterm>pre-notification</firstterm>
for certain important users.  This is particularly true with
client/server software, where there may be well-known servers that are
tempting targets for attackers.  Those servers' administrators would
appreciate having an extra day or two to do the upgrade, so that they
are already protected by the time the exploit becomes public
knowledge.</para>

<para>Pre-notification simply means sending mails to those
administrators before the go-public date, telling them of the
vulnerability and how to fix it.  You should send pre-notification
only to people you trust to be discreet with the information.  That
is, the qualification for receiving pre-notification is twofold: the
recipient must run a large, important server where a compromise would
be a serious matter, <emphasis>and</emphasis> the recipient must be
known to be someone who won't blab about the security problem before
the go-public date.</para>

<para>Send each pre-notification mail individually (one at a time) to
each recipient.  Do <emphasis>not</emphasis> send to the entire list
of recipients at once, because then they would see each others'
names&mdash;meaning that you would essentially be alerting each
recipient to the fact that each <emphasis>other</emphasis> recipient
may have a security hole in her server.  Sending it to them all via
blind CC (BCC) isn't a good solution either, because some admins
protect their inboxes with spam filters that either block or reduce
the priority of BCC'd mail, since so much spam is sent via BCC these
days.</para>

<para>Here's a sample pre-notification mail:</para>

<screen>
From: Your Name Here
To: admin@large-famous-server.com
Reply-to: Your Name Here (not the security list's address)
Subject: Confidential Scanley vulnerability notification.


This email is a confidential pre-notification of a security alert
in the Scanley server.

Please *do not forward* any part of this mail to anyone.  The public
announcement is not until May 19th, and we'd like to keep the
information embargoed until then.

You are receiving this mail because (we think) you run a Scanley
server, and would want to have it patched before this security hole is
made public on May 19th.

References:
===========

   CAN-2004-1771: Scanley stack overflow in queries

Vulnerability:
==============

   The server can be made to run arbitrary commands if the server's
   locale is misconfigured and the client sends a malformed query.

Severity:
=========

   Very severe, can involve arbitrary code execution on the server.

Workarounds:
============

   Setting the 'natural-language-processing' option to 'off' in
   scanley.conf closes this vulnerability.

Patch:
======

   The patch below applies to Scanley 3.0, 3.1, and 3.2.

   A new public release (Scanley 3.2.1) will be made on or just before
   May 19th, so that it is available at the same time as this
   vulnerability is made public.  You can patch now, or just wait for
   the public release.  The only difference between 3.2 and 3.2.1 will
   be this patch.

[...patch goes here...]
</screen>

<para>If you have a CAN number, include it in the pre-notification (as
shown above), even though the information is still embargoed and
therefore the MITRE page will show nothing.  Including the CAN number
allows the recipient to know with certainty that the bug they were
pre-notified about is the same one they later hear about through
public channels, so they don't have to worry whether further action is
necessary or not, which is precisely the point of CAN/CVE
numbers.</para>

</sect3>

<sect3 id="security-announcing">
<title>Distribute the fix publicly</title>

<para>The last step in handling a security bug is to distribute the
fix publicly.  In a single, comprehensive announcement, you should
describe the problem, give the CAN/CVE number if any, describe how to
work around it, and how to permanently fix it.  Usually "fix" means
upgrading to a new version of the software, though sometimes it can
mean applying a patch, particularly if the software is normally run in
source form anyway.  If you do make a new release, it should differ
from some existing release by exactly the security patch.  That way,
conservative admins can upgrade without worrying about what else they
might be affecting; they also don't have to worry about future upgrades,
because the security fix will be in all future releases as a matter of
course.  (Details of release procedures are discussed in
<xref linkend="security-releases"></xref><phrase output="printed"> in
<xref linkend="development-cycle"></xref></phrase>.)</para>

<para>Whether or not the public fix involves a new release, do the
announcement with roughly the same priority as you would a new
release: send a mail to the project's <literal>announce</literal>
list, make a new press release, update the Freshmeat entry, etc.
While you should never try to play down the existence of a security
bug out of concern for the project's reputation, you may certainly set
the tone and prominence of a security announcement to match the actual
severity of the problem.  If the security hole is just a minor
information exposure, not an exploit that allows the user's entire
computer to be taken over, then it may not warrant a lot of fuss.  You
may even decide not to distract the <literal>announce</literal> list
with it.  After all, if the project cries wolf every time, users might
end up thinking the software is less secure than it actually is, and
also might not believe you when you have a really big problem to
announce.  See
<ulink url="http://cve.mitre.org/about/terminology.html"></ulink> for a good
introduction to the problem of judging severity.</para>

<para>In general, if you're unsure how to treat a security problem,
find someone with experience and talk to them about it.  Assessing and
handling vulnerabilities is very much an acquired skill, and it's easy
to make missteps the first few times.</para>

</sect3>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
