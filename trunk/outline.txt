* An outline, about 50 to 100 lines long

   Title: 

                       The Free Software Way: 
                 How to Manage Open Source Projects

   Contents:

    0. Introduction                                    [ 5-7 pp ]
        History - Background - Terminology.

        Also: What to expect and not expect from open source process.
        Explain how there is no "magic pixie dust": an open license
        does not guarantee hordes of active developers suddenly
        volunteering their time, nor does open-sourcing a troubled
        project automatically cure its ills, etc.

    1. Getting Started                                 [ 8-15 pp ]
        a) Setting goals.
        b) Initial design work.
        c) Announcing the project's inception.
        d) How to make a project appear developer-friendly from the start.
        e) Understanding potential volunteers' motivations.
        f) Choosing a language; avoiding language holy wars.

    2. Licenses and copyrights.                        [ 7-10 pp ]
        a) The different DFSG-compliant licenses and what they mean.
        b) Basic legal primer: the difference between copyright,
             public domain, and distribution rights.
        c) Avoiding licensing holy wars.

    3. Technical Infrastructure.                       [ 10-20 pp ]
        a) Project web site, source code repository, mailing lists,
             bug tracker, IRC, and other communications forums.
        b) Describe various sites that provide these services for free,
             such as SourceForge, Savannah, Freenode, etc.  Evaluate
             pros/cons of each, compare with roll-your-own solutions.

    4. Social and Political Infrastructure.            [ 15-25 pp ]
        a) The mechanisms by which meritocracies organize themselves.
        b) When does a project need a written constitution, and what kind?
        c) Consensus vs voting: the importance of having a voting
             system, but also, the importance of rarely using it.

    6. Communications.                                 [ 20-30 pp ]
        a) Avoiding common pitfalls; distinguishing productive threads
             from unproductive ones; guiding threads toward usefulness
             without being pushy.
        b) Dealing with difficult/rude participants on mailing lists.
        c) When to operate overtly, when to operate behind the scenes.
        d) Internal vs external communications.  In free software
             projects, there tends to be a smooth continuum between
             purely internal discussions and public relations
             statements.  Discuss how to navigate this continuum.
             Describe how to hook into the standard real-time news
             distribution forums (RSS, CIA, etc), and the
             meta-distribution sites such as Freshmeat.

    7. Daily development, packaging, and releasing.    [ 15-25 pp ]
        a) Common development cycle pattenrns in free software.  
        b) How to tie in with the revision control system and the bug
             tracker, so that they become integral parts of
             distributed development. 
        c) Regression testing: choosing the right level of formality.
        d) Stabilization and release preparation (i.e., avoiding the
             last minute feature rush); making sure the process
             terminates in a finite amount of time. 
        e) Whether and how to maintain multiple release lines.

    8. Distributed labor.                              [ 15-25 pp ]
        a) How to get the most out of volunteers.  When to do
             something yourself, when to ask someone else.
        b) Letting volunteers share the management burden as well
             as the technical burden:
                - patch management
                - bug management
                - release management
                - documentation and FAQ maintenance
                - distributing meta-management tasks.
        c) When and how to ask someone to step aside from a role for
             which they're not suited.

    9. Credit.                                         [ 5-7 pp ]
        a) Why accurate crediting is crucial.
        b) Techniques for giving credit unobtrusively.
        c) Avoiding "credit inflation".

   10. Reconcilable and irreconcilable differences.    [ 15-20 pp ]
        a) Arguments happen.  Politics are inevitable.  How to deal
             with this, especially in communities where people like to
             think that they're immune to politics, or that if
             everyone would just look at the technical issues
             objectively "...they'd see that I'm right!" :-)

        b) How to recognize when a fork is inevitable, how to prevent
             it when is isn't.  Handling forks both amicable and hostile.

        [ Case study #1: The GDB maintainership structure debate. ]
        [ Case study #2: FSF Emacs / XEmacs fork (?maybe?) ]

   11. The Consent Of The Governed.                    [ 5-8 pp ]

        What leadership means when you have no control over people
        you've never met :-).  A summary of which techniques work in
        this environment and which don't, and a list of the principles
        by which one's actions should appear to be governed.  (The
        phrasing is deliberate, apologies to Niccolo Machiavelli.)

   12. Money.                                          [ 10-12 pp ]

        If funded by a corporation or a consortium, how to balance the
        funder's interests with the volunteers' interests -- they may
        be very different! -- without either side becoming disgruntled.

        [ Case studies: Subversion ]


* An estimated page count and date when you'll go to tech review

    Est page count:        ~200 pp.
    Date to tech review:   Aug 1st 2004.

    Explanations:

    According to the chapter estimates above, the book would be
    somewhere between 130 and 204 pages (average is 167).  But the
    last time I made a page estimate for a book, I guessed around
    200-250, and it ended up slightly over 300 when published.  So
    now, I *suspect* the 204 figure is closer to the mark, and with
    more chance of going over than under.  But as it's all guesswork
    at this stage, I haven't bothered to tweak the chapter counts
    above to make the average come out to 200.

    As for completion: I'd *like* to have the book in to tech review
    by June.  However, if we (somewhat conservatively) assume that I
    can produce 10 pages per week, then it would require about 20
    weeks, or 5 months, to write, which puts us at roughly August 1st.

    So, August 1st it is, to be safe.  But, I will modestly point out
    that my first book was completed before its contractual deadline
    (Coriolis even paid me a little bonus for promptness).  So
    although you shouldn't have much faith in my page count estimates,
    you can have some faith in my dates :-).  (If it were done early,
    would we just have to sit on it, or could it then get published
    earlier?)

    There's not much to tech review here, by the way.  I guess
    checking links and ensuring that I'm making sane claims about
    various web sites would be the "tech" review in this case.

* Bio

    In 1995, Jim Blandy and I co-founded Cyclic Software, a company
    offering commercial CVS support.  With the blessing of the
    previous CVS maintainers, we then became its official maintainers,
    including the first public releases of network-enabled CVS.  In
    1999 I wrote "Open Source Development With CVS" (published by
    Coriolis), which is now in its third edition via Paraglyph Press.

    Since early 2000, I've been working at CollabNet, Inc on the
    Subversion project, a successor to CVS.  Subversion was an open
    source project since day one, and we've thought carefully not just
    about its technical aspects, but about how to run it socially, to
    maximize volunteer involvement.  It has been successful both as
    software and as a community.  Subversion currently has about 50
    developers with commit access, only four of whom are employed by
    CollabNet.

    I also maintain several packages in the GNU Emacs distribution,
    and have participated in various other open source projects as a
    patch contributor or document writer.

* An explanation of the market--how many people you think
  are an appropriate audience.

    I'm not sure how to estimate the size of this audience, but here
    are some thoughts about its demographics:

    Open source methodology is lately a hot topic in the software
    world, and even to some degree in mainstream news, but it's no
    flash in the pan, and many organizations are beginning to realize
    this.  Indeed, the business plan of my employer (CollabNet, Inc)
    is founded on the notion that many organizations are gradually
    converting to the development methods of the free software world.

    This means that middle managers and developers at many
    corporations (IBM, Sun, HP, Motorola are some visible examples
    right now) will be looking for information about how open source
    works.  They'll be evaluating projects already out there, and
    starting new ones of their own.  The same is true for many
    non-profit organizations, especially universities (see the oss4lib
    project, for example).  Thus, I wouldn't be surprised if an
    unusual percentage of this book's sales come from bulk orders by
    corporations and educational institutions.

    But there's a second-order implication, too.  The growing
    acceptance of open source development by organizations is causing
    a trickle-down effect in job seekers and college students, who are
    increasingly seeing free software as more than just a hobby --
    and some of them will therefore want this book too.

    By the way, it might seem there's a lot of overlap here with my
    previous book.  But it's not really so much, for two reasons:
    First, the bulk of that book was about CVS, and how to use CVS to
    support an open source project.  Second, frankly, a lot of what I
    wrote in the chapters about open source development then seems a
    bit naive now.  By focusing squarely on the topic this time,
    instead of dressing it around a discussion of CVS, and with five
    more years of experience under my belt, I think we can produce
    "The Book" -- the one people turn to by default when they want to
    jump into free software but aren't quite sure how.
