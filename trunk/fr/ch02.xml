<?xml version="1.0" encoding="UTF-8"?>
<chapter id="getting-started">
  <title>Genèse d'un projet</title>

  <simplesect>
    <para>Le modèle d'initialisation des projets libres a été décrit par
    Eric Raymond dans son papier de référence <citetitle>La cathédrale
    et le bazar</citetitle>. Il y écrit :</para>

    <blockquote>
      <para>
        <emphasis>Tout bon logiciel commence par gratter un développeur
        là où ça le démange.</emphasis>
      </para>

      <para>(cf <emphasis role="bold">
          <ulink url="http://www.linux-france.org/article/these/cathedrale-bazar/cathedrale-bazar_monoblock.html" />
        </emphasis>)</para>
    </blockquote>

    <para>Notez que Raymond n'a jamais dit qu'un projet libre n'apparaît
    que lorsque ça démange un développeur. Il dit plutôt que de
    <emphasis>bons</emphasis> logiciels sont produits lorsque
    l'initiateur possède un intérêt personnel à voir son problème
    résolu; L'application de ce principe au logiciel libre est qu'une
    problématique personnelle est la motivation la plus fréquente au
    démarrage d'un projet.</para>

    <para>Cette règle est toujours valable mais moins qu'en 1997,
    lorsque Raymond l'a formulée. Aujourd'hui, un phénomène se
    développe: le développement ex nihilo par d'importantes
    organisations -incluant des organismes à but lucratifs- de grands
    projets libres gérés de façon centralisée. La production de code par
    des développeurs isolés afin de répondre à un besoin précis est
    toujours un modèle très répandu mais ce n'est plus le seul.</para>

    <para>L'avis de Raymond n'est reste pas moins très clairvoyant.
    L'intérêt direct des producteurs du logiciel est la condition
    essentielle de son succès car ils l'utilisent eux-mêmes. Si le
    logiciel ne répond pas au besoin initial, la personne ou
    l'organisation le développant éprouveront de la frustration dans
    leurs tâches quotidiennes. Par exemple, le projet OpenAdapter
    (<ulink url="http://www.openadapter.org/" />), à l'initiative de la
    banque d'investissement Dresdner Kleinwort Wasserstein et dont
    l'objet est le développement d'un framework d'intégration des
    systèmes financiers hétérogènes aurait difficilement pu provenir de
    la démangeaison d'un particulier. Il s'agit d'une démangeaison à un
    niveau institutionnel. Mais cette démangeaison est issue directement
    de l'expérience de cette institution et de ses partenaires, donc si
    ce projet les soulage, ils seront les premiers à s'en rendre compte.
    Ce mode de fonctionnement permet de produire un logiciel adéquat
    parce que les échanges entre utilisateurs et producteurs permettent
    d'alimenter un cercle vertueux. Le programme est avant tout écrit
    par eux et pour eux; ils peuvent donc répondre à
    <emphasis>leur</emphasis> problématique. Il a été écrit pour
    résoudre le problème particulier de quelqu'un, et a ensuite été
    partagé avec les autres, comme si le problème avait été une maladie
    et le programme son antidote dont la distribution aurait eu l'effet
    d'en éradiquer l'épidémie.</para>

    <para>Ce chapitre décrit la manière de fournir au monde un nouveau
    projet libre, mais la plupart de ses recommandations pourrait tout
    aussi bien s'appliquer à l'industrie pharmaceutique. Les objectifs
    sont très similaires : vous voulez décrire clairement ses capacités
    thérapeutiques, sa posologie et vous assurer qu'il tomberont entre
    de bonnes mains. Mais dans le cas d'un logiciel, vous désirez
    également attirer certains patients afin qu'ils se joignent à
    l'effort de recherche pour améliorer le principe actif au bénéfice
    de tous.</para>

    <para>La production de logiciel libre est une tache bicéphale. Le
    logiciel soit acquérir de nouveau utilisateurs mais également de
    nouveaux développeurs. Ces deux taches ne sont pas nécessairement
    ambivalentes mais leur différence d'objectif complexifie la façon de
    présenter initialement le projet. Certaines informations sont utiles
    aux deux audiences, certaines leur sont spécifiques. Néanmoins, les
    deux types d'information doivent respecter le principe de
    présentation échelonnée; dans le sens où le niveau de détail
    présenté à chaque étage doit correspondre scrupuleusement à l'effort
    et au temps consenti par le lecteur. Une augmentation de l'effort
    doit assurer en contrepartie une récompense proportionnelle.
    Lorsqu'il y a perte de corrélation entre les deux, les gens perdent
    rapidement la foi dans le projet et stoppent leurs
    investissements.</para>

    <para>Le corollaire de ce principe est le fait que
    <emphasis>l'apparence compte</emphasis>. Les développeurs en
    particulier n'aiment pas cette idée. Leur attachement au fond plutôt
    qu'à la forme est souvent brandi comme une marque de
    professionnalisme. Ce n'est pas un hasard si tant de développeurs
    exhibent une réelle antipathie pour le marketing et les relations
    publiques; pas plus que le fait que les graphistes professionnels
    sont souvent horrifiés par le résultat auquel arrivent les
    développeurs livrés à eux mêmes.</para>

    <para>C'est déplorable car il existe des situations où la forme
    <emphasis>est</emphasis> le fond et la présentation d'un produit en
    fait partie. Par exemple, l'apparence du site web d'un projet est la
    première chose qu'un visiteur va en retenir. Cet aspect du site est
    pris en compte avant le contenu en tant que tel, bien avant que tout
    texte soit lu ou les liens activés. Aussi injuste que cela puisse
    paraître, les gens ne peuvent refréner leur réflexe de se former une
    opinion au premier regard. L'apparence d'un site fourni au visiteur
    le degré de soin apporté à organiser la présentation. Les humains
    possèdent une antenne particulièrement sensible pour détecter le
    niveau d'effort consenti. La plupart d'entre nous peuvent en un
    simple coup d'oeil s'avancer sur le fait qu'un site soit une simple
    concaténation d'informations ou le fruit d'une réflexion mûrie. Le
    site est le premier indicateur exposé par le projet et l'impression
    qu'il dégage s'appliquera au reste du projet par association
    mentale.</para>

    <para>Ainsi, bien que ce projet se concentre sur le contenu servant
    au démarrage d'un projet, gardez en tête que l'apparence compte
    également. Sachant qu'un site web doit s'adresser à deux publics
    -les utilisateurs et les développeurs- une attention particulière
    doit être apportée à la clarté et à l'adéquation du message. Bien
    que le web design ne soit pas le sujet de ce livre, un principe est
    à retenir, en particulier si le site s'adresse à des audiences
    distinctes : les visiteurs doivent directement savoir où pointe un
    lien avant de cliquer dessus. Par exemple, il doit être évident,
    simplement en regardant les liens vers la documentation utilisateur,
    qu'ils conduisent bien à la documentation utilisateur, et non -par
    exemple- à la documentation interne des développeurs. L'un des rôles
    d'un projet est de fournir de l'information, mais également du
    confort. Le simple fait de retrouver des informations standards à un
    endroit attendu rassure les utilisateurs et les développeurs qui
    veulent décider de s'impliquer ou pas. Le projet signifie ainsi
    qu'il prend ses responsabilités, qu'il anticipe les questions, et
    qu'il a fait un effort pour y répondre avec un minimum d'exigence
    pour l'intervenant. En constituant cette atmosphère de préparation,
    le projet envoie un message clair : "Votre temps ne sera pas
    gaspillé si vous vous impliquez"; exactement ce que les gens veulent
    entendre...</para>

    <!-- ======================== subsection ============================== -->

    <sect2 id="look-around">
      <title>Observez d'abord</title>

      <para>Avant de démarrer un projet libre, une règle de base est à
      respecter :</para>

      <para>Vérifiez toujours qu'un projet existant ne répond pas déjà à
      votre besoin. Il est possible voire probable que quelqu'un ait
      déjà traité votre problématique. Si tel est le cas, et que le code
      a été publié en licence libre, il serait peu judicieux de
      réinventer la roue. Il y a bien entendu des exceptions à cette
      règle: si le but du projet est principalement didactique ou s'il
      concerne un domaine de niche si réduit qu'il n'y a aucune chance
      que quelqu'un ait pu le traiter avant vous. Mais en général, il ne
      coûte rien de vérifier et le jeu en vaut largement la chandelle.
      Si les moteurs de recherche classiques ne retournent aucun
      résultat, jetez un coup d'oeil aux sites d'information traitant
      des logiciels libres (ce point sera développé ultérieurement) ou
      dans les registres de la FSF (Free Software Foundation)<ulink
      url="http://directory.fsf.org/" />.</para>

      <para>Même si vous ne trouvez pas exactement ce que vous aviez en
      tête, il est possible de détecter un projet similaire pour lequel
      une collaboration serait plus fructueuse que de partir tout seul
      de zéro.</para>
    </sect2>
  </simplesect>

  <!-- ========================== SECTION =========================== -->

  <sect1 id="starting-from-what-you-have">
    <title>Revue de paquetage</title>

    <para>Finalement, vous avez regardé autour de vous, n'avez rien
    trouvé qui corresponde à votre besoin et vous avez décidé de
    démarrer un nouveau projet.</para>

    <para>Et maintenant ?</para>

    <para>L'aspect le plus difficile du lancement d'un projet libre est
    de transformer une vision personnelle en vision universelle. Même si
    vous ou votre organisation avez parfaitement cerné le besoin,
    l'exprimer de façon compréhensible au reste du monde peut s'avérer
    être un travail conséquent. Il est néanmoins fondamental de prendre
    le temps de le faire. Les fondateurs du projet doivent fixer ses
    objectifs, ce qui implique de fixer ses limites -aussi bien les
    fonctionnalités qu'il assurera que celle qu'il <emphasis>n'assurera
    pas</emphasis>- et ainsi de coucher sur papier sa finalité. Cette
    étape se déroule en général sans difficultés majeures bien qu'elle
    puisse quelque fois révéler des hypothèses cachées voire des
    désaccords sur la nature du projet, ce qui est une bonne chose:
    mieux vaut résoudre les divergences en amont. L'étape suivante est
    de packager le projet à destination du grand public, ce qui est un
    travail titanesque.</para>

    <para>Ce qui rend ce travail si laborieux est le fait qu'il consiste
    à formaliser et documenter des concepts que tout le monde connaît
    déjà -"tout le monde" désignant les intervenants actuels du projet.
    De ce fait, aucun bénéfice immédiat n'en est retiré pour ces
    derniers. Aucun besoin de fichier LISEZ-MOI qui décrirait le projet,
    pas plus que d'un dossier de conception ou d'un manuel utilisateur.
    Aucun besoin d'organiser le code source selon les standards (tacites
    mais universels) du libre, toute organisation est bonne puisqu'elle
    leur convient, qu'ils y sont déjà familiarisés et qu'il savent
    comment exécuter le code de toute manière. De même, il est sans
    gravité -pour eux- que les principes généraux d'architecture
    demeurent non documentés : ils les connaissent déjà.</para>

    <para>Les nouveaux arrivants de leur coté ont grand besoin de ces
    documents, mais heureusement pas tous simultanément. Il n'est pas
    obligatoire de fournir toutes les ressources imaginables en
    pré-requis du projet. Dans un monde parfait, peut-être, tout nouveau
    projet libre apparaîtrait avec un dossier de conception impeccable,
    un guide utilisateur exhaustif (avec le détail des fonctionnalités
    restant à implémenter et déjà disponibles), un code source superbe
    et packagé de façon portable pour fonctionner sur toutes les
    plates-formes et ainsi de suite. En réalité, assurer tout ceci
    serait acceptablement coûteux en ressource et il s'agit de toute
    façon de tâches pouvant raisonnablement être réalisées en cours de
    projet par des volontaires.</para>

    <para>Ce qui est <emphasis>incontournable</emphasis> néanmoins est
    que suffisamment d'investissement ait été assuré sur la présentation
    du projet pour lever l'obstacle d'inconnu auprès des nouveaux venus.
    Imaginez cet investissement comme la première étape d'un processus
    de bootstrap qui apporterait au projet le quanta minimal d'énergie
    d'activation. J'ai entendu parler de ce concept sous le nom
    d'<emphasis>énergie d'hacktivation</emphasis> , c'est à dire la
    quantité d'énergie qu'un nouveau venu consomme avant de produire à
    son tour quelque chose d'utile au projet. Le seuil d'énergie
    d'hacktivation requis doit être le plus bas possible. C'est là votre
    première tâche que de limiter au maximum ce niveau d'énergie pour
    encourager les gens à s'investir.</para>

    <para>Chacun de ces sous-chapitres décrivent un aspect important du
    démarrage d'un nouveau projet. Ils sont globalement présentés dans
    l'ordre où les visiteurs les rencontrent, bien que l'ordre dans
    lequel vous les avez mis en place puisse différer. Traitez les comme
    une check-list. Vérifiez quand vous démarrez un nouveau projet, pour
    chaque point, qu'il a été traité, où au moins que vous savez
    apprécier les conséquences si tel n'a pas été le cas.</para>

    <!-- ======================== subsection ============================== -->

    <sect2 id="choosing-a-name">
      <title>Choisir un bon nom</title>

      <para>Mettez vous à la place d'une personne qui aurait entendu
      parlé de votre projet pour la première fois, peut être après
      l'avoir péniblement découvert durant une recherche de solution à
      sa problématique. Le premier contact avec le projet se fera via
      son nom.</para>

      <para>Un bon nom ne fera pas systématiquement le succès d'un
      projet, pas plus qu'un mauvais son échec (un <emphasis>très
      </emphasis><emphasis>
          <emphasis>mauvais</emphasis>
        </emphasis> y conduira mais nous pouvons supposer que personne
      ne tente de faire échouer son propre projet volontairement).
      Néanmoins, un mauvais nom peut ralentir l'adoption d'un projet,
      soit parce que les gens ne le prennent pas au sérieux, soit parce
      qu'il est difficile à mémoriser.</para>

      <para>Un bon nom: <itemizedlist>
          <listitem>
            <para>Donne une idée immédiate du champs d'action d'un
            projet ou au moins y est lié de façon évidente de telle
            sorte que quelqu'un connaissant le projet et son domaine se
            souviennent immédiatement de son nom.</para>
          </listitem>

          <listitem>
            <para>Est facile à mémoriser. Il est clair que la langue de
            Shakespeare est devenue le standard de facto de la
            communication sur Internet. "Facile à mémoriser" signifie en
            réalité "Facile à mémoriser pour un anglophone". Les noms
            issus de jeux de mots liés à la prononciation locale par
            exemple seront totalement opaques pour la plupart des
            lecteurs anglophones. Si le jeu de mot est particulièrement
            saisissant ou plaisant, il peut tout de même être conservé;
            gardez simplement en tête que de nombreuses personnes lisant
            le nom n'entendront pas intérieurement ce qu'un lecteur
            natif entendrait.</para>
          </listitem>

          <listitem>
            <para>Est distinct du nom d'autres projets et n'enfreint pas
            des marques déposées. Il s'agit simplement de bonnes
            manières et de bon sens juridique. Ce n'est pas une bonne
            idée que de créer de la confusion, il est déjà suffisamment
            difficile de garder une trace de tout ce qui est déjà
            disponible sur Internet pour ne pas nommer les choses de la
            même façon.</para>

            <para>Les liens mentionnés précédemment au paragraphe <xref
            linkend="look-around" /> sont utiles pour vérifier si un
            autre projet utilise déjà le nom que vous aviez à l'esprit.
            Des recherches de marques déposées sont également
            disponibles à <ulink url="http://www.nameprotect.org/" /> et
            <ulink url="http://www.uspto.gov/" />.</para>
          </listitem>

          <listitem>
            <para>Est de préférence disponible en tant que nom de
            domaine <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, et
            <systemitem>.org</systemitem>. Il est conseillé d'en
            réserver un (probablement le .org) en tant que site officiel
            du projet ainsi que les deux autres pour éviter le
            cyber-squatting de tiers qui désirerait tirer profit de la
            notoriété du projet. Même si vous prévoyez de faire héberger
            le projet par une forge (voir <xref
            linkend="starting-with-canned-hosting" />), vous pouvez
            enregistrer les noms de domaines du projet et les rediriger
            vers le site de la forge. Ceci aide les utilisateurs à
            mémoriser les URL.</para>
          </listitem>
        </itemizedlist></para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="mission-statement">
      <title>Fixer des finalités claires</title>

      <para>Une fois que le site Web a été trouvé, la seconde chose que
      les visiteurs font en général est de rechercher une courte
      description du projet ou de sa finalité pour déterminer (en moins
      de trente secondes) s'ils désirent ou non en savoir plus. Cet
      abstract doit être clairement visible au sein de la page de garde
      du site, de préférence juste sous le nom du projet.</para>

      <para>La description doit être concrète, concise et, par dessus
      tout, courte. Voici un exemple à suivre :</para>

      <blockquote>
        <para>
          <emphasis>Créer, en tant que communauté, la suite bureautique
          de référence au niveau international qui fonctionnera sur
          toutes les plates-formes majeures et qui assurera l'accès à
          l'ensemble de ses fonctionnalités et données sous la forme
          d'une API orientée composants et d'un format fichier de type
          XML.</emphasis>
        </para>
      </blockquote>

      <para>En quelques mots, les points principaux sont révélés tout en
      s'appuyant largement sur les connaissances actuelles du lecteur.
      En précisant "<emphasis>en tant que communauté</emphasis>", ils
      affirment qu'aucun organisme privé ne dominera le développement;
      "<emphasis>international</emphasis>" signifie que le logiciel
      permettra aux utilisateurs de travailler dans différentes langues
      et données régionalisées; "<emphasis>toutes les plates-formes
      majeures</emphasis>" ajoute qu'il sera portable sous Unix,
      Macintosh, et Windows. Le reste signale que les architectures
      inter opérables et les formats ouverts forment une part importante
      des principes directeurs du projet. Il n'est pas explicitement dit
      que ce projet est une alternative à la suite bureautique Microsoft
      Office mais la plupart des visiteurs auront lu entre les lignes.
      Même si cette description peut sembler quelque peu verbeuse au
      première abord, elle s'avère en fait exhaustive : les mots
      "<emphasis>suite bureautique</emphasis>" sont concrets pour les
      utilisateurs familiers de ce type de logiciel, on s'appuie sur la
      connaissance présumée du lecteur (probablement au tant
      qu'utilisateur de MS Office) pour assurer la concision du
      message.</para>

      <para>La description des finalités dépend en partie de son auteur,
      pas seulement du logiciel en tant que tel. Dans l'exemple
      précédent d'OpenOffice.org, il est utile d'utiliser les mots
      "<emphasis>en tant que communauté</emphasis>" car le projet était
      initialement principalement porté par Sun Microsystems. En
      précisant ainsi la nature du projet, Sun indique qu'il est
      sensible à la crainte qu'il puisse dominer le processus de
      développement et la feuille de route. De cette façon, en exposant
      clairement la prise en compte du problème, c'est une grande partie
      du problème lui-même qui disparaît. De leur coté, les projets qui
      ne sont pas soutenus par un unique organisme n'aura probablement
      pas à appuyer sur cet aspect puisque le mode de développement
      communautaire est la norme dans ce domaine, il n'y a donc pas
      d'impératif à le lister comme élément des principes
      directeurs.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="state-freedom">
      <title>Préciser que le projet est libre</title>

      <para>Les visiteurs toujours intéressés après avoir consulté les
      finalités désirerons ensuite obtenir d'avantage de détail, peut
      être le guide utilisateur ou de développement, et voudront
      éventuellement télécharger quelque chose. Mais ils doivent d'abord
      avoir la certitude qu'il s'agit d'un logiciel libre.</para>

      <para><emphasis>La page de garde doit indiquer sans ambiguïté que
      le projet est libre.</emphasis> Ceci peut sembler évident mais
      vous seriez surpris du nombre de projets qui oublient de le
      mentionner. J'ai déjà vu des projets dont la page de garde non
      seulement ne mentionnait pas la licence sous laquelle le projet
      était distribué mais pas même qu'il était libre. Quelque fois,
      cette information cruciale est reléguée dans la page de
      Téléchargement ou la page réservée aux développeurs, voire à
      d'autres endroits nécessitant plus d'un clic de souris à
      atteindre. Dans des cas extrêmes, la licence n'est pas donnée du
      tout et le seul moyen de l'obtenir est de télécharger le logiciel
      et de regarder à l'intérieur.</para>

      <para>Ne commettez pas cette erreur qui peut coûter des
      développeurs et utilisateurs potentiels. Affichez clairement,
      juste sous les finalités, que le projet est "libre" ou "open
      source" et précisez la licence exacte. Un guide de prise en main
      rapide pour choisir une licence est donnée dans le paragraphe
      <xref linkend="license-quickstart" /><phrase output="printed">
      plus loin dans ce chapitre, et les questions de licences sont
      discutées en détail dans le chapitre </phrase><xref
      linkend="legal" />.</para>

      <para>A cette étape, notre visiteur a déterminé -probablement en
      moins d'une minute- s'il est suffisamment intéressé pour dépenser,
      disons, cinq minutes de plus à approfondir ce projet. Les
      paragraphes suivants décrivent ce qui devrait rencontrer durant
      ces cinq minutes supplémentaires.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="features-and-requirements">
      <title>Lister les fonctionnalités et pré-requis</title>

      <para>Il s'agit d'une courte liste des fonctionnalités principales
      du logiciel (si des fonctions ne sont pas encore opérationnelles,
      vous pouvez les lister à condition de préciser
      "<emphasis>prévu</emphasis>" ou "<emphasis>en cours</emphasis>"),
      ainsi que l'environnement technique nécessaire à son exécution.
      Imaginez cette liste de fonctionnalités/pré-requis comme ce que
      vous répondriez à quelqu'un vous demandant un bref résumé du
      logiciel. Cette liste est une extension naturelle des finalités.
      Par exemple, pour cette mission :</para>

      <blockquote>
        <para>
          <emphasis>Créer un moteur d'indexation et de recherche textuel
          utilisable via une riche API permettant aux développeurs de
          fournir des services de recherche dans de grandes quantités de
          fichiers texte.</emphasis>
        </para>
      </blockquote>

      <para>La liste fonctionnalités/pré-requis fournirait les détails
      afin de clarifier cette mission.</para>

      <blockquote>
        <para>
          <emphasis>Fonctionnalités:</emphasis>
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Recherche dans des fichiers texte, HTML et
              XML</emphasis>
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis>Recherche de mots ou de phrases</emphasis>
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis>(prévu) Recherche approchante</emphasis>
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis>(prévu) Mise à jour incrémentale des
              index</emphasis>
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis>(prévu) Indexation de sites Web
              distants</emphasis>
            </para>
          </listitem>
        </itemizedlist>

        <para>
          <emphasis>Pré-requis:</emphasis>
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <emphasis>Python 2.2 et supérieur</emphasis>
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis>Suffisamment de disque pour stocker les index
              (approximativement le double de la taille des données
              indexées)</emphasis>
            </para>
          </listitem>
        </itemizedlist>
      </blockquote>

      <para>Disposant de ces informations, les visiteurs peuvent
      rapidement déterminer si ce logiciel leur convient. Ils peuvent
      également décider ou non de proposer leurs services en tant que
      développeurs.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="development-status">
      <title>Informer sur le statut de développement</title>

      <para>Les gens apprécient toujours de connaître l'état d'un
      projet. Pour les nouveaux projets, ils veulent connaître le fossé
      entre les promesses et la réalité courante. Pour les projets
      mâtures, c'est l'activité de maintenance qui les intéresse :
      fréquence de nouvelles versions, réactivité face aux tickets
      d'incidents, etc.</para>

      <para>Pour répondre à toutes ces questions, il est conseillé de
      fournir une page de statut du développement listant les objectifs
      du projet à court terme et ses besoins (par exemple, il peut
      rechercher un développeur disposant d'une expertise particulière).
      Cette page fournit également un historique des versions
      antérieures, munie d'une liste de fonctionnalités, pour que les
      visiteurs puissent se faire une idée de ce que le projet appelle
      "avancement" et à quelle vitesse effective il correspond.</para>

      <para>Ne craignez pas de paraître en plein chantier et ne vous
      laissez pas tentés par un enjolivement du statut. Tout le monde
      sait qu'un logiciel évolue par paliers; il n'y a aucune honte à
      affirmer "Ceci est un logiciel en alpha avec des bogues connus. Il
      démarre et fonctionne la plupart du temps mais utilisez-le à vos
      risques et périls". Un tel langage ne rebute pas le type de
      développeurs dont vous avez besoin à cette étape. De même, du coté
      des utilisateurs, il n'y a rien de pire que de les attirer avant
      que le logiciel soit prêt pour eux. Une réputation d'instabilité
      est très difficile à rattraper une fois acquise. L'humilité paye
      sur le long terme : il est toujours préférable pour un logiciel
      d'être plus que moins stable qu'attendu et les bonnes surprises
      assurent le bouche à oreille.</para>

      <sidebar id="alpha-and-beta">
        <title>Alpha et Bêta</title>

        <para>Le terme <emphasis>alpha</emphasis> désigne en général une
        première version avec laquelle les utilisateurs peuvent
        travailler et qui possède déjà toutes les fonctionnalités
        attendues, mais qui possède des bogues connus. L'utilité
        principale de livrer un logiciel en alpha est de générer des
        retours de telle façon que les développeurs sachent sur quoi
        travailler. L'état suivant, <emphasis>bêta</emphasis>, désigne
        un logiciel dont tous les bogues sérieux ont été corrigés mais
        qui n'a pas encore été testé suffisamment pour devenir une
        version validée. L'objectif de publier une version bêta est soit
        de devenir la version finale, si aucun nouveau bogue n'est
        détecté, soit de fournir des retours précis aux développeurs
        pour qu'il puisse atteindre la version finale rapidement. La
        différence entre alpha et bêta est souvent à l'appréciation des
        projets.</para>
      </sidebar>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="downloads">
      <title>Téléchargements</title>

      <para>Le logiciel devrait être distribué en code source dans un
      format standard. Lorsqu'un projet démarre, les distributions de
      binaires (exécutables) ne sont pas obligatoires à moins que le
      projet ait tant de dépendances ou de pré-requis de compilation que
      le faire fonctionner nécessite un effort considérable. (Mais dans
      ce cas, le projet aura des problèmes à recruter des développeurs
      de toute façon !)</para>

      <para>La procédure d'installation doit être aussi simple, standard
      et peu économe en ressource que possible. Si vous tentez
      d'éradiquer une maladie, vous ne distribueriez pas le médicament
      de façon à qu'il nécessite une seringue de taille non-standard
      pour être administré. De la même façon, les logiciels doivent se
      conformer à des standards de construction et d'installation; plus
      ils dévient du standard, plus utilisateurs et développeurs
      abandonnent et s'en vont, perplexes.</para>

      <para>Cela semble évident mais beaucoup de projets ne dégnent
      standardiser leur procédure d'installation que très tard dans le
      projet, se disant qu'ils auront l'occasion de le faire à tout
      moment: "<emphasis>Nous verrons le packaging lorsque le code sera
      mieux fini</emphasis>". Ce qu'ils ne réalisent pas est qu'en
      mettant de coté ce travail rébarbatif, ils allongent en réalité la
      phase de réalisation du code, parce qu'il découragent les
      développeurs qui -sinon- y auraient contribué. De façon plus
      insidieuse, ils ne <emphasis>savent</emphasis> pas qu'ils perdent
      tous ces développeurs car il s'agit d'une accumulation de
      non-événements : quelqu'un visite le site Web du projet,
      télécharge le logiciel, tente de le compiler, échoue dans cette
      entreprise et s'en va. Qui saura que cela s'est produit, excepté
      la personne elle-même ? Personne du projet ne réalisera que cette
      motivation et cette compétence a été gaspillée.</para>

      <para>Le travail ennuyeux avec un bon retour sur investissement
      devrait toujours être réalisé tôt pour abaisser suffisamment la
      barrière d'accès au projet.</para>

      <para>Lorsque vous publiez une version téléchargeable, il est
      vital de lui donner un numéro de version unique pour que les gens
      puissent comparer deux versions et savoir immédiatement laquelle
      précéde l'autre. La numérotation de version est discutées au
      paragraphe <xref linkend="release-numbering" />, et les détails de
      la standardisation des procédures de compilation et d'installation
      sont détaillés dans les paragraphes <xref
      linkend="packaging" /><phrase output="printed"> et <xref
      linkend="development-cycle" /></phrase>.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="vc-and-bug-tracker-access">
      <title>Gestion de Configuration logicielle et système de gestion
      de tickets</title>

      <para>Télécharger les distribution de sources est satisfaisant
      pour simplement installer et utiliser le logiciel, mais n'est pas
      suffisant pour déboguer ou ajouter de nouvelles fonctionnalités.
      Les extractions de sources journalières sont utiles, mais pas
      d'une granularité adéquate pour développer une communauté de
      développeurs. Les gens ont besoin d'accéder en temps-réel aux
      sources dans leur état courant et le moyen de leur offrir ce
      service est d'utiliser un système de Gestion de Configuration
      Logicielle (GCL). Le fait de fournir un accès anonyme aux sources
      en GCL est un signe -à la fois dirigé vers les utilisateurs et
      vers les développeurs- que ce projet fait un effort particulier
      pour fournir aux gens ce dont ils ont besoin pour participer. Même
      si vous ne pouvez proposer la GCL tout de suite, laissez une
      indication que vous allez le faire sous peu. L'infrastructure de
      gestion de configuration logicielle est développée en détail au
      paragraphe <xref linkend="vc" /><phrase output="printed"> du
      chapitre <xref
      linkend="technical-infrastructure" /></phrase>.</para>

      <para>Il en va de même de la gestion de tickets. Son importance ne
      réside pas seulement dans son utilité pour les développeurs mais
      également pour les observateurs du projet. Pour beaucoup, la mise
      à disposition d'une base de donnée d'incidents est l'un des
      indicateurs les plus forts du sérieux d'un projet. D'ailleurs, la
      qualité apparente d'un projet est directement proportionnelle au
      nombre de tickets saisis. Ceci peut semble contradictoire mais
      gardez à l'esprit que le nombre de bogues dépend de trois choses:
      le nombre absolu de bogues inclus dans le logiciel, le nombre
      d'utilisateurs du logiciel, et la facilité avec laquelle les
      utilisateurs peuvent reporter leurs incidents. Sur ces trois
      facteurs, les deux derniers sont les plus significatifs. Tout
      logiciel d'une certaine taille et complexité contient un nombre
      indéterminé de bogues attendant d'être découverts. La vraie
      question est de savoir comment le projet gère l'enregistrement et
      la priorisation de ces tickets. Un projet avec une base
      d'incidents importante et correctement gérée (les bogues sont pris
      en compte rapidement, les doublons sont identifiés, etc..) donne
      une meilleure impression qu'un projet dénué de gestion de tickets
      ou doté d'une base de donnée quasiment vide.</para>

      <para>Bien entendu, votre projet contiendra au départ peu de
      bogues, et il n'y a pas à s'en inquiéter. Si la page de statut met
      l'accent sur la jeunesse du projet et que les gens observant la
      base de bogues constatent que la plupart des incidents sont
      récents, ils pourront extrapoler le fait que le projet possède un
      bon niveau d'enregistrement de tickets et ne seront pas
      excessivement alarmés par le faible nombre absolu de tickets
      enregistrés.</para>

      <para>Notez que les outils de gestion de ticket ne sont pas
      seulement utilisés pour suivre les incidents mais également les
      demandes de fonctionnalités, les évolutions de la documentation et
      bien d'autres choses. Nous ne détaillons pas plus en avant la
      gestion de ticket car ce point est développée dans le paragraphe
      <xref linkend="bug-tracker" /><phrase output="printed"> du
      chapitre <xref linkend="technical-infrastructure" /></phrase>. Du
      point de vue de la présentation du projet, l'important est de
      posséder un outil de gestion de tickets et de s'assurer que ce
      fait est visible dès la page de garde du site Web.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="communications-channels">
      <title>Communications Channels</title>

      <para>Visitors usually want to know how to reach the human beings
      involved with the project. Provide the addresses of mailing lists,
      chat rooms, and IRC channels, and any other forums where others
      involved with the software can be reached. Make it clear that you
      and the other authors of the project are subscribed to these
      mailing lists, so people see there's a way to give feedback that
      will reach the developers. Your presence on the lists does not
      imply a committment to answer all questions or implement all
      feature requests. In the long run, most users will probably never
      join the forums anyway, but they will be comforted to know that
      they <emphasis>could</emphasis> if they ever needed to.</para>

      <para>In the early stages of a project, there's no need to have
      separate user and developer forums. It's much better to have
      everyone involved with the software talking together, in one
      "room." Among early adopters, the distinction between developer
      and user is often fuzzy; to the extent that the distinction can be
      made, the ratio of developers to users is usually much higher in
      the early days of the project than later on. While you can't
      assume that every early adopter is a programmer who wants to hack
      on the software, you can assume that they are at least interested
      in following development discussions and in getting a sense of the
      project's direction.</para>

      <para>As this chapter is only about getting a project started,
      it's enough merely to say that these communications forums need to
      exist. Later, in <xref linkend="growth" /><phrase
      output="printed"> in <xref linkend="communications" /></phrase>,
      we'll examine where and how to set up such forums, the ways in
      which they might need moderation or other management, and how to
      separate user forums from developer forums, when the time comes,
      without creating an unbridgeable gulf.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="developer-guidelines">
      <title>Developer Guidelines</title>

      <para>If someone is considering contributing to the project,
      she'll look for developer guidelines. Developer guidelines are not
      so much technical as social: they explain how the developers
      interact with each other and with the users, and ultimately how
      things get done.</para>

      <para>This topic is covered in detail in <xref
      linkend="written-rules" /><phrase output="printed"> in <xref
      linkend="social-infrastructure" /></phrase>, but the basic
      elements of developer guidelines are: <itemizedlist>
          <listitem>
            <para>pointers to forums for interaction with other
            developers</para>
          </listitem>

          <listitem>
            <para>instructions on how to report bugs and submit
            patches</para>
          </listitem>

          <listitem>
            <para>some indication of <emphasis>how</emphasis>
            development is usually done—is the project a benevolent
            dictatorship, a democracy, or something else</para>
          </listitem>
        </itemizedlist> No pejorative sense is intended by
      "dictatorship", by the way. It's perfectly okay to run a tyranny
      where one particular developer has veto power over all changes.
      Many successful projects work this way. The important thing is
      that the project come right out and say so. A tyranny pretending
      to be a democracy will turn people off; a tyranny that says it's a
      tyranny will do fine as long as the tyrant is competent and
      trusted.</para>

      <para>See <ulink
      url="http://svn.collab.net/repos/svn/trunk/www/hacking.html" />
      for an example of particularly thorough developer guidelines, or
      <ulink url="http://www.openoffice.org/dev_docs/guidelines.html" />
      for broader guidelines that focus more on governance and the
      spirit of participation and less on technical matters.</para>

      <para>The separate issue of providing a programmer's introduction
      to the software is discussed in <xref
      linkend="developer-documentation" /><phrase output="printed">
      later in this chapter</phrase>.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="documentation">
      <title>Documentation</title>

      <para>Documentation is essential. There needs to be
      <emphasis>something</emphasis> for people to read, even if it's
      rudimentary and incomplete. This falls squarely into the
      "drudgery" category referred to earlier, and is often the first
      area where a new open source projects falls down. Coming up with a
      mission statement and feature list, choosing a license,
      summarizing development status—these are all relatively small
      tasks, which can be definitively completed and usually need not be
      returned to once done. Documentation, on the other hand, is never
      really finished, which may be one reason people sometimes delay
      starting it at all.</para>

      <para>The most insidious thing is that documentation's utility to
      those writing it is the reverse of its utility to those who will
      read it. The most important documentation for initial users is the
      basics: how to quickly set up the software, an overview of how it
      works, perhaps some guides to doing common tasks. Yet these are
      exactly the things the <emphasis>writers</emphasis> of the
      documentation know all too well—so well that it can be difficult
      for them to see things from the reader's point of view, and to
      laboriously spell out the steps that (to the writers) seem so
      obvious as to be unworthy of mention.</para>

      <para>There's no magic solution to this problem. Someone just
      needs to sit down and write the stuff, and then run it by typical
      new users to test its quality. Use a simple, easy-to-edit format
      such as HTML, plain text, Texinfo, or some variant of
      XML—something that's convenient for lightweight, quick
      improvements on the spur of the moment. This is not only to remove
      any overhead that might impede the original writers from making
      incremental improvements, but also for those who join the project
      later and want to work on the documentation.</para>

      <para>One way to ensure basic initial documentation gets done is
      to limit its scope in advance. That way, writing it at least won't
      feel like an open-ended task. A good rule of thumb is that it
      should meet the following minimal criteria:</para>

      <itemizedlist>
        <listitem>
          <para>Tell the reader clearly how much technical expertise
          they're expected to have.</para>
        </listitem>

        <listitem>
          <para>Describe clearly and thoroughly how to set up the
          software, and somewhere near the beginning of the
          documentation, tell the user how to run some sort of
          diagnostic test or simple command to confirm that they've set
          things up correctly. Startup documentation is in some ways
          more important than actual usage documentation. The more
          effort someone has invested in installing and getting started
          with the software, the more persistent she'll be in figuring
          out advanced functionality that's not well-documented. When
          people abandon, they abandon early; therefore, it's the
          earliest stages, like installation, that need the most
          support.</para>
        </listitem>

        <listitem>
          <para>Give one tutorial-style example of how to do a common
          task. Obviously, many examples for many tasks would be even
          better, but if time is limited, pick one task and walk through
          it thoroughly. Once someone sees that the software
          <emphasis>can</emphasis> be used for one thing, they'll start
          to explore what else it can do on their own—and, if you're
          lucky, start filling in the documentation themselves. Which
          brings us to the next point...</para>
        </listitem>

        <listitem>
          <para>Label the areas where the documentation is known to be
          incomplete. By showing the readers that you are aware of its
          deficiencies, you align yourself with their point of view.
          Your empathy reassures them that they don't face a struggle to
          convince the project of what's important. These labels needn't
          represent promises to fill in the gaps by any particular date
          —it's equally legitimate to treat them as open requests for
          volunteer help.</para>
        </listitem>
      </itemizedlist>

      <para>The last point is of wider importance, actually, and can be
      applied to the entire project, not just the documentation. An
      accurate accounting of known deficiencies is the norm in the open
      source world. You don't have to exaggerate the project's
      shortcomings, just identify them scrupulously and dispassionately
      when the context calls for it (whether in the documentation, in
      the bug tracking database, or on a mailing list discussion). No
      one will treat this as defeatism on the part of the project, nor
      as a commitment to solve the problems by a certain date, unless
      the project makes such a commitment explicitly. Since anyone who
      uses the software will discover the deficiencies for themselves,
      it's much better for them to be psychologically prepared—then the
      project will look like it has a solid knowledge of how it's
      doing.</para>

      <sidebar id="starting-a-faq">
        <title>Maintaining a FAQ</title>

        <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
        document) can be one of the best investments a project makes in
        terms of educational payoff. FAQs are highly tuned to the
        questions users and developers actually ask—as opposed to the
        questions you might have <emphasis>expected</emphasis> them to
        ask—and therefore, a well-maintained FAQ tends to give those who
        consult it exactly what they're looking for. The FAQ is often
        the first place users look when they encounter a problem, often
        even in preference to the official manual, and it's probably the
        document in your project most likely to be linked to from other
        sites.</para>

        <para>Unfortunately, you cannot make the FAQ at the start of the
        project. Good FAQs are not written, they are grown. They are by
        definition reactive documents, evolving over time in response to
        people's day-to-day usage of the software. Since it's impossible
        to correctly anticipate the questions people will ask, it is
        impossible to sit down and write a useful FAQ from
        scratch.</para>

        <para>Therefore, don't waste your time trying to. You may,
        however, find it useful to set up a mostly blank FAQ template,
        so there will be an obvious place for people to contribute
        questions and answers after the project is under way. At this
        stage, the most important property is not completeness, but
        convenience: if the FAQ is easy to add to, people will add to
        it. (Proper FAQ maintenance is a non-trivial and intriguing
        problem, and is discussed more in <xref
        linkend="faq-manager" /><phrase output="printed"> in <xref
        linkend="managing-volunteers" /></phrase>.)</para>
      </sidebar>

      <sect3 id="documentation-availability">
        <title>Availability of documentation</title>

        <para>Documentation should be available from two places: online
        (directly from the web site), <emphasis>and</emphasis> in the
        downloadable distribution of the software (see <xref
        linkend="packaging" /><phrase output="printed"> in <xref
        linkend="development-cycle" /></phrase>). It needs to be online,
        in browsable form, because people often read documentation
        <emphasis>before</emphasis> downloading software for the first
        time, as a way of helping them decide whether to download at
        all. But it should also accompany the software, on the principle
        that downloading should supply (i.e., make locally accessible)
        everything one needs to use the package.</para>

        <para>For online documentation, make sure that there is a link
        that brings up the <emphasis>entire</emphasis> documentation in
        one HTML page (put a note like "monolithic" or "all-in-one" or
        "single large page" next to the link, so people know that it
        might take a while to load). This is useful because people often
        want to search for a specific word or phrase across the entire
        documentation. Generally, they already know what they're looking
        for; they just can't remember what section it's in. For such
        people, nothing is more frustrating than encountering one HTML
        page for the table of contents, then a different page for the
        introduction, then a different page for installation
        instructions, etc. When the pages are broken up like that, their
        browser's search function is useless. The separate-page style is
        useful for those who already know what section they need, or who
        want to read the entire documentation from front to back in
        sequence. But this is <emphasis>not</emphasis> the most common
        way documentation is accessed. Far more often, someone who is
        basically familiar with the software is coming back to search
        for a specific word or phrase. To fail to provide them with a
        single, searchable document would only make their lives
        harder.</para>
      </sect3>

      <sect3 id="developer-documentation">
        <title>Developer documentation</title>

        <para>Developer documentation is written to help programmers
        understand the code, so they can repair and extend it. This is
        somewhat different from the <emphasis>developer
        guidelines</emphasis> discussed earlier, which are more social
        than technical. Developer guidelines tell programmers how to get
        along with each other; developer documentation tells them how to
        get along with the code itself. The two are often packaged
        together in one document for convenience (as with the <ulink
        url="http://svn.collab.net/repos/svn/trunk/www/hacking.html" />
        example given earlier), but they don't have to be.</para>

        <para>Although developer documentation can be very helpful,
        there's no reason to delay a release to do it. As long as the
        original authors are available (and willing) to answer questions
        about the code, that's enough to start with. In fact, having to
        answer the same questions over and over is a common motivation
        for writing documentation. But even before it's written,
        determined contributors will still manage to find their way
        around the code. The force that drives people to spend time
        learning a code base is that the code does something useful for
        them. If people have faith in that, they will take the time to
        figure things out; if they don't have that faith, no amount of
        developer documentation will get or keep them.</para>

        <para>So if you have time to write documentation for only one
        audience, write it for users. All user documentation is, in
        effect, developer documentation as well; any programmer who's
        going to work on a piece of software will need to be familiar
        with how to use it. Later, when you see programmers asking the
        same questions over and over, take the time to write up some
        separate documents just for them.</para>

        <para>Some projects use wikis for their initial documentation,
        or even as their primary documentation. In my experience, this
        really only works if the wiki is actively edited by a few people
        who agree on how the documentation is to be organized and what
        sort of "voice" it should have. See <xref
        linkend="wikis" /><phrase output="printed"> in <xref
        linkend="technical-infrastructure" /></phrase> for more.</para>
      </sect3>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="example-output">
      <title>Example Output and Screenshots</title>

      <para>If the project involves a graphical user interface, or if it
      produces graphical or otherwise distinctive output, put some
      samples up on the project web site. In the case of interface, this
      means screenshots; for output, it might be screenshots or just
      files. Both cater to people's need for instant gratification: a
      single screenshot can be more convincing than paragraphs of
      descriptive text and mailing list chatter, because a screenshot is
      inarguable proof that the software <emphasis>works</emphasis>. It
      may be buggy, it may be hard to install, it may be incompletely
      documented, but that screenshot is still proof that if one puts in
      enough effort, one can get it to run.</para>

      <sidebar id="screenshots">
        <title>Screenshots</title>

        <para>Since screenshots can be daunting until you've actually
        made a few, here are basic instructions for making them. Using
        the Gimp (<ulink url="http://www.gimp.org/" />), open
        <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
        choose <guimenuitem>Single&nbsp;Window</guimenuitem> or
        <guimenuitem>Whole&nbsp;Screen</guimenuitem>, then click
        <guimenuitem>OK</guimenuitem>. Now your next mouse click will
        capture the window or screen clicked on as an image in the Gimp.
        Crop and resize the image as necessary, using the instructions
        at <ulink
        url="http://www.gimp.org/tutorials/Lite_Quickies/#crop" />.</para>
      </sidebar>
    </sect2>

    <para>There are many other things you could put on the project web
    site, if you have the time, or if for one reason or another they are
    especially appropriate: a news page, a project history page, a
    related links page, a site-search feature, a donations link, etc.
    None of these are necessities at startup time, but keep them in mind
    for the future.</para>

    <sect2 id="starting-with-canned-hosting">
      <title>Canned Hosting</title>

      <para>There are a few sites that provide free hosting and
      infrastructure for open source projects: a web area, version
      control, a bug tracker, a download area, chat forums, regular
      backups, etc. The details vary from site to site, but the same
      basic services are offered at all of them. By using one of these
      sites, you get a lot for free; what you give up, obviously, is
      fine-grained control over the user experience. The hosting service
      decides what software the site runs, and may control or at least
      influence the look and feel of the project's web pages.</para>

      <para>See <xref linkend="canned-hosting" /><phrase
      output="printed"> in <xref
      linkend="technical-infrastructure" /></phrase> for a more detailed
      discussion of the advantages and disadvantages of canned hosting,
      and a list of sites that offer it.</para>
    </sect2>
  </sect1>

  <!-- ======================== SECTION ============================== -->

  <sect1 id="license-quickstart">
    <title>Choosing a License and Applying It</title>

    <para>This section is intended to be a very quick, very rough guide
    to choosing a license. Read <xref linkend="legal" /> to understand
    the detailed legal implications of the different licenses, and how
    the license you choose can affect people's ability to mix your
    software with other free software.</para>

    <para>There are a great many free software licenses to choose from.
    Most of them we needn't consider here, as they were written to
    satisfy the particular legal needs of some corporation or person,
    and wouldn't be appropriate for your project. We will restrict
    ourselves to just the most commonly used licenses; in most cases,
    you will want to choose one of them.</para>

    <!-- ======================== subsection ============================== -->

    <sect2 id="license-quickstart-non-gpl">
      <title>The "Do Anything" Licenses</title>

      <para>If you're comfortable with your project's code potentially
      being used in proprietary programs, then use an
      <firstterm>MIT/X-style</firstterm> license. It is the simplest of
      several minimal licenses that do little more than assert nominal
      copyright (without actually restricting copying) and specify that
      the code comes with no warranty. See <xref
      linkend="license-choosing-mit-x" /> for details.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="license-quickstart-gpl">
      <title>The GPL</title>

      <para>If you don't want your code to be used in proprietary
      programs, use the GNU General Public License (<ulink
      url="http://www.gnu.org/licenses/gpl.html" />). The GPL is
      probably the most widely recognized free software license in the
      world today. This is in itself a big advantage, since many
      potential users and contributors will already be familiar with it,
      and therefore won't have to spend extra time to read and
      understand your license. See <xref
      linkend="license-choosing-gpl" /><phrase output="printed"> in
      <xref linkend="legal" /></phrase> for details.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="license-quickstart-applying">
      <title>How to Apply a License to Your Software</title>

      <para>Once you've chosen a license, you should state it on the
      project's front page. You don't need to include the actual text of
      the license there; just give the name of the license, and make it
      link to the full license text on another page.</para>

      <para>This tells the public what license you
      <emphasis>intend</emphasis> the software to be released under, but
      it's not sufficient for legal purposes. For that, the software
      itself must contain the license. The standard way to do this is to
      put the full license text in a file called
      <filename>COPYING</filename> (or <filename>LICENSE</filename>),
      and then put a short notice at the top of each source file, naming
      the copyright date, holder, and license, and saying where to find
      the full text of the license.</para>

      <para>There are many variations on this pattern, so we'll look at
      just one example here. The GNU GPL says to put a notice like this
      at the top of each source file:</para>

      <screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

      <para>It does not say specifically that the copy of the license
      you received along with the program is in the file
      <filename>COPYING</filename>, but that's where it's usually put.
      (You could change the above notice to state that directly.) This
      template also gives a geographical address from which to request a
      copy of the license. Another common method is to give a link to a
      web page containing the license. Just use your judgement and point
      to wherever you feel the most permanent copy of the license is
      maintained, which might simply be somewhere on your project's web
      site. In general, the notice you put in each source file does not
      have to look exactly like the one above, as long as it starts with
      the same notice of copyright holder and date, states the name of
      the license, and makes it clear where to view the full
      license.</para>
    </sect2>
  </sect1>

  <!-- ======================== SECTION ============================== -->

  <sect1 id="setting-tone">
    <title>Setting the Tone</title>

    <para>So far we've covered one-time tasks you do during project
    setup: picking a license, arranging the initial web site, etc. But
    the most important aspects of starting a new project are dynamic.
    Choosing a mailing list address is easy; ensuring that the list's
    conversations remain on-topic and productive is another matter
    entirely. If the project is being opened up after years of closed,
    in-house development, its development processes will change, and you
    will have to prepare the existing developers for that change.</para>

    <para>The first steps are the hardest, because precedents and
    expectations for future conduct have not yet been set. Stability in
    a project does not come from formal policies, but from a shared,
    hard-to-pin-down collective wisdom that develops over time. There
    are often written rules as well, but they tend to be essentially a
    distillation of the intangible, ever-evolving agreements that really
    guide the project. The written policies do not define the project's
    culture so much as describe it, and even then only
    approximately.</para>

    <para>There are a few reasons why things work out this way. Growth
    and high turnover are not as damaging to the accumulation of social
    norms as one might think. As long as change does not happen
    <emphasis>too</emphasis> quickly, there is time for new arrivals to
    learn how things are done, and after they learn, they will help
    reinforce those ways themselves. Consider how children's songs
    survive the centuries. There are children today singing roughly the
    same rhymes as children did hundreds of years ago, even though there
    are no children alive now who were alive then. Younger children hear
    the songs sung by older ones, and when they are older, they in turn
    will sing them in front of other younger ones. The children are not
    engaging in a conscious program of transmission, of course, but the
    reason the songs survive is nonetheless that they are transmitted
    regularly and repeatedly. The time scale of free software projects
    may not be measured in centuries (we don't know yet), but the
    dynamics of transmission are much the same. The turnover rate is
    faster, however, and must be compensated for by a more active and
    deliberate transmission effort.</para>

    <para>This effort is aided by the fact that people generally show up
    expecting and looking for social norms. That's just how humans are
    built. In any group unified by a common endeavor, people who join
    instinctively search for behaviors that will mark them as part of
    the group. The goal of setting precedents early is to make those
    "in-group" behaviors be ones that are useful to the project; for
    once established, they will be largely self-perpetuating.</para>

    <!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

    <para>Following are some examples of specific things you can do to
    set good precedents. They're not meant as an exhaustive list, just
    as illustrations of the idea that setting a collaborative mood early
    helps a project tremendously. Physically, every developer may be
    working alone in a room by themselves, but you can do a lot to make
    them <emphasis>feel</emphasis> like they're all working together in
    the same room. The more they feel this way, the more time they'll
    want to spend on the project. I chose these particular examples
    because they came up in the Subversion project (<ulink
    url="http://subversion.tigris.org/" />), which I participated in and
    observed from its very beginning. But they're not unique to
    Subversion; situations like these will come up in most open source
    projects, and should be seen as opportunities to start things off on
    the right foot.</para>

    <!-- ======================== subsection ============================== -->

    <sect2 id="avoid-private-discussions">
      <title>Avoid Private Discussions</title>

      <para>Even after you've taken the project public, you and the
      other founders will often find yourselves wanting to settle
      difficult questions by private communications among an inner
      circle. This is especially true in the early days of the project,
      when there are so many important decisions to make, and, usually,
      few volunteers qualified to make them. All the obvious
      disadvantages of public list discussions will loom palpably in
      front of you: the delay inherent in email conversations, the need
      to leave sufficient time for consensus to form, the hassle of
      dealing with naive volunteers who think they understand all the
      issues but actually don't (every project has these; sometimes
      they're next year's star contributors, sometimes they stay naive
      forever), the person who can't understand why you only want to
      solve problem X when it's obviously a subset of larger problem Y,
      and so on. The temptation to make decisions behind closed doors
      and present them as <foreignphrase>faits
      accomplis</foreignphrase>, or at least as the firm recommendations
      of a united and influential voting block, will be great
      indeed.</para>

      <para>Don't do it.</para>

      <para>As slow and cumbersome as public discussions can be, they're
      almost always preferable in the long run. Making important
      decisions in private is like spraying contributor repellant on
      your project. No serious volunteer would stick around for long in
      an environment where a secret council makes all the big decisions.
      Furthermore, public discussion has beneficial side effects that
      will last beyond whatever ephemeral technical question was at
      issue: <itemizedlist>
          <listitem>
            <para>The discussion will help train and educate new
            developers. You never know how many eyes are watching the
            conversation; even if most people don't participate, many
            may be tracking silently, gleaning information about the
            software.</para>
          </listitem>

          <listitem>
            <para>The discussion will train <emphasis>you</emphasis> in
            the art of explaining technical issues to people who are not
            as familiar with the software as you are. This is a skill
            that requires practice, and you can't get that practice by
            talking to people who already know what you know.</para>
          </listitem>

          <listitem>
            <para>The discussion and its conclusions will be available
            in public archives forever after, enabling future
            discussions to avoid retracing the same steps. See <xref
            linkend="using-archives" /><phrase output="printed"> in
            <xref linkend="communications" /></phrase>.</para>
          </listitem>
        </itemizedlist></para>

      <para>Finally, there is the possibility that someone on the list
      may make a real contribution to the conversation, by coming up
      with an idea you never anticipated. It's hard to say how likely
      this is; it just depends on the complexity of the code and degree
      of specialization required. But if anecdotal evidence may be
      permitted, I would hazard that this is more likely than one would
      intuitively expect. In the Subversion project, we (the founders)
      believed we faced a deep and complex set of problems, which we had
      been thinking about hard for several months, and we frankly
      doubted that anyone on the newly created mailing list was likely
      to make a real contribution to the discussion. So we took the lazy
      route and started batting some technical ideas back and forth in
      private emails, until an observer of the project<footnote>
          <para>We haven't gotten to the section on crediting yet, but
          just to practice what I'll later preach: the observer's name
          was Brian Behlendorf, and it was he who pointed out the
          general importance of keeping all discussions public unless
          there was a specific need for privacy.</para>
        </footnote> caught wind of what was happening and asked for the
      discussion to be moved to the public list. Rolling our eyes a bit,
      we did—and were stunned by the number of insightful comments and
      suggestions that quickly resulted. In many cases people offered
      ideas that had never even occurred to us. It turned out there were
      some <emphasis>very</emphasis> smart people on that list; they'd
      just been waiting for the right bait. It's true that the ensuing
      discussions took longer than they would have if we had kept the
      conversation private, but they were so much more productive that
      it was well worth the extra time.</para>

      <para>Without descending into hand-waving generalizations like
      "the group is always smarter than the individual" (we've all met
      enough groups to know better), it must be acknowledged that there
      are certain activities at which groups excel. Massive peer review
      is one of them; generating large numbers of ideas quickly is
      another. The quality of the ideas depends on the quality of the
      thinking that went into them, of course, but you won't know what
      kinds of thinkers are out there until you stimulate them with a
      challenging problem.</para>

      <para>Naturally, there are some discussions that must be had
      privately; throughout this book we'll see examples of those. But
      the guiding principle should always be: <emphasis>If there's no
      reason for it to be private, it should be
      public.</emphasis></para>

      <para>Making this happen requires action. It's not enough merely
      to ensure that all your own posts go to the public list. You also
      have to nudge other people's unnecessarily private conversations
      to the list too. If someone tries to start a private discussion,
      and there's no reason for it to be private, then it is incumbent
      on you to open the appropriate meta-discussion immediately. Don't
      even comment on the original topic until you've either
      successfully steered the conversation to a public place, or
      ascertained that privacy really was needed. If you do this
      consistently, people will catch on pretty quickly and start to use
      the public forums by default.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="prevent-rudeness">
      <title>Nip Rudeness in the Bud</title>

      <para>From the very start of your project's public existence, you
      should maintain a zero-tolerance policy toward rude or insulting
      behavior in its forums. Zero-tolerance does not mean technical
      enforcement per se. You don't have to remove people from the
      mailing list when they flame another subscriber, or take away
      their commit access because they made derogatory comments. (In
      theory, you might eventually have to resort to such actions, but
      only after all other avenues have failed—which, by definition,
      isn't the case at the start of the project.) Zero-tolerance simply
      means never letting bad behavior slide by unnoticed. For example,
      when someone posts a technical comment mixed together with an
      <foreignphrase>ad hominem</foreignphrase> attack on some other
      developer in the project, it is imperative that your response
      address the <foreignphrase>ad hominem</foreignphrase> attack
      <emphasis>first</emphasis>, as a separate issue unto itself, and
      only afterward move on to the technical content.</para>

      <para>It is unfortunately very easy, and all too typical, for
      constructive discussions to lapse into destructive flame wars.
      People will say things in email that they would never say
      face-to-face. The topics of discussion only amplify this effect:
      in technical issues, people often feel there is a single right
      answer to most questions, and that disagreement with that answer
      can only be explained by ignorance or stupidity. It's a short
      distance from calling someone's technical proposal stupid to
      calling the person themselves stupid. In fact, it's often hard to
      tell where technical debate leaves off and character attack
      begins, which is one reason why drastic responses or punishments
      are not a good idea. Instead, when you think you see it happening,
      make a post that stresses the importance of keeping the discussion
      friendly, without accusing anyone of being deliberately poisonous.
      Such "Nice Police" posts do have an unfortunate tendency to sound
      like a kindergarten teacher lecturing a class on good
      behavior:</para>

      <blockquote>
        <para>
          <emphasis>First, let's please cut down on the (potentially) ad
          hominem comments; for example, calling J's design for the
          security layer "naive and ignorant of the basic principles of
          computer security." That may be true or it may not, but in
          either case it's no way to have the discussion. J made his
          proposal in good faith. If it has deficiencies, point them
          out, and we'll fix them or get a new design. I'm sure M meant
          no personal insult to J, but the phrasing was unfortunate, and
          we try to keep things constructive around here.</emphasis>
        </para>

        <para>
          <emphasis>Now, on to the proposal. I think M was right in
          saying that...</emphasis>
        </para>
      </blockquote>

      <para>As stilted as such responses sound, they have a noticeable
      effect. If you consistently call out bad behavior, but don't
      demand an apology or acknowledgment from the offending party, then
      you leave people free to cool down and show their better side by
      behaving more decorously next time—and they will. One of the
      secrets of doing this successfully is to never make the
      meta-discussion the main topic. It should always be an aside, a
      brief preface to the main portion of your response. Point out in
      passing that "we don't do things that way around here," but then
      move on to the real content, so that you're giving people
      something on-topic to respond to. If someone protests that they
      didn't deserve your rebuke, simply refuse to be drawn into an
      argument about it. Either don't respond (if you think they're just
      letting off steam and don't require a response), or say you're
      sorry if you overreacted and that it's hard to detect nuance in
      email, then get back to the main topic. Never, ever insist on an
      acknowledgment, whether public or private, from someone that they
      behaved inappropriately. If they choose of their own volition to
      post an apology, that's great, but demanding that they do so will
      only cause resentment.</para>

      <para>The overall goal is to make good etiquette be seen as one of
      the "in-group" behaviors. This helps the project, because
      developers can be driven away (even from projects they like and
      want to support) by flame wars. You may not even know that they
      were driven away; someone might lurk on the mailing list, see that
      it takes a thick skin to participate in the project, and decide
      against getting involved at all. Keeping forums friendly is a
      long-term survival strategy, and it's easier to do when the
      project is still small. Once it's part of the culture, you won't
      have to be the only person promoting it. It will be maintained by
      everyone.</para>
    </sect2>

    <!-- ======================== subsection ============================== -->

    <sect2 id="code-review">
      <title>Practice Conspicuous Code Review</title>

      <para>One of the best ways to foster a productive development
      community is to get people looking at each others' code. Some
      technical infrastructure is required to do this effectively—in
      particular, commit emails must be turned on; see <xref
      linkend="commit-emails" /> for more details. The effect of commit
      emails is that every time someone commits a change to the source
      code, an email goes out showing the log message and diffs for the
      change (see <xref linkend="vc-vocabulary-diff" />, in <xref
      linkend="vc-vocabulary" />). <firstterm>Code review</firstterm> is
      the practice of reviewing commit emails as they come in, looking
      for bugs and possible improvements.<footnote>
          <para>This is how code review is usually done in open source
          projects, at any rate. In more centralized projects, "code
          review" can also mean multiple people sitting down together
          and going over printouts of source code, looking for specific
          problems and patterns.</para>
        </footnote></para>

      <para>Code review serves several purposes simultaneously. It's the
      most obvious example of peer review in the open source world, and
      directly helps to maintain software quality. Every bug that ships
      in a piece of software got there by being committed and not
      detected; therefore, the more eyes watch commits, the fewer bugs
      will ship. But code review also serves an indirect purpose: it
      confirms to people that what they do matters, because one
      obviously wouldn't take time to review a commit unless one cared
      about its effect. People do their best work when they know that
      others will take the time to evaluate it.</para>

      <para>Reviews should be public. Even on occasions when I have been
      sitting in the same physical room with developers, and one of us
      has made a commit, we take care not to do the review verbally in
      the room, but to send it to the development mailing list instead.
      Everyone benefits from seeing the review happen. People follow the
      commentary and sometimes find flaws in it, and even when they
      don't, it still reminds them that review is an expected, regular
      activity, like washing the dishes or mowing the lawn.</para>

      <para>In the Subversion project, we did not at first make a
      regular practice of code review. There was no guarantee that every
      commit would be reviewed, though one might sometimes look over a
      change if one was particularly interested in that area of the
      code. Bugs slipped in that really could and should have been
      caught. A developer named Greg Stein, who knew the value of code
      review from past work, decided that he was going to set an example
      by reviewing every line of <emphasis>every single
      commit</emphasis> that went into the code repository. Each commit
      anyone made was soon followed by an email to the developer's list
      from Greg, dissecting the commit, analyzing possible problems, and
      occasionally praising a clever bit of code. Right away, he was
      catching bugs and non-optimal coding practices that would
      otherwise have slipped by without ever being noticed. Pointedly,
      he never complained about being the only person reviewing every
      commit, even though it took a fair amount of his time, but he did
      sing the praises of code review whenever he had the chance. Pretty
      soon, other people, myself included, started reviewing commits
      regularly too. What was our motivation? It wasn't that Greg had
      consciously shamed us into it. But he had proven that reviewing
      code was a valuable way to spend time, and that one could
      contribute as much to the project by reviewing others' changes as
      by writing new code. Once he demonstrated that, it became expected
      behavior, to the point where any commit that didn't get some
      reaction would cause the committer to worry, and even ask on the
      list whether anyone had had a chance to review it yet. Later, Greg
      got a job that didn't leave him as much time for Subversion, and
      had to stop doing regular reviews. But by then, the habit was so
      ingrained for the rest of us as to seem that it had been going on
      since time immemorial.</para>

      <para>Start doing reviews from very first commit. The sorts of
      problems that are easiest to catch by reviewing diffs are security
      vulnerabilities, memory leaks, insufficient comments or API
      documentation, off-by-one errors, caller/callee discipline
      mismatches, and other problems that require a minimum of
      surrounding context to spot. However, even larger-scale issues
      such as failure to abstract repeated patterns to a single location
      become spottable after one has been doing reviews regularly,
      because the memory of past diffs informs the review of present
      diffs.</para>

      <!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

      <para>Don't worry that you might not find anything to comment on,
      or that you don't know enough about every area of the code. There
      will usually be something to say about almost every commit; even
      where you don't find anything to question, you may find something
      to praise. The important thing is to make it clear to every
      committer that what they do is seen and understood. Of course,
      code review does not absolve programmers of the responsibility to
      review and test their changes before committing; no one should
      depend on code review to catch things he ought to have caught on
      his own.</para>
    </sect2>

    <!-- ======================== SECTION ============================== -->

    <sect2 id="opening-closed-projects">
      <title>When Opening a Formerly Closed Project, be Sensitive to the
      Magnitude of the Change</title>

      <para>If you're opening up an existing project, one that already
      has active developers accustomed to working in a closed-source
      environment, make sure everyone understands that a big change is
      coming—and make sure that you understand how it's going to feel
      from their point of view.</para>

      <para>Try to imagine how the situation looks to them: formerly,
      all code and design decisions were made with a group of other
      programmers who knew the software more or less equally well, who
      all received the same pressures from the same management, and who
      all know each others' strengths and weaknesses. Now you're asking
      them to expose their code to the scrutiny of random strangers, who
      will form judgements based only on the code, with no awareness of
      what business pressures may have forced certain decisions. These
      strangers will ask lots of questions, questions that jolt the
      existing developers into realizing that the documentation they
      slaved so hard over is <emphasis>still</emphasis> inadequate (this
      is inevitable). To top it all off, the newcomers are unknown,
      faceless entities. If one of your developers already feels
      insecure about his skills, imagine how that will be exacerbated
      when newcomers point out flaws in code he wrote, and worse, do so
      in front of his colleagues. Unless you have a team of perfect
      coders, this is unavoidable—in fact, it will probably happen to
      all of them at first. This is not because they're bad programmers;
      it's just that any program above a certain size has bugs, and peer
      review will spot some of those bugs (see <xref
      linkend="code-review" /><phrase output="printed"> earlier in this
      chapter</phrase>). At the same time, the newcomers themselves
      won't be subject to much peer review at first, since they can't
      contribute code until they're more familiar with the project. To
      your developers, it may feel like all the criticism is incoming,
      never outgoing. Thus, there is the danger of a siege mentality
      taking hold among the old hands.</para>

      <para>The best way to prevent this is to warn everyone about
      what's coming, explain it, tell them that the initial discomfort
      is perfectly normal, and reassure them that it's going to get
      better. Some of these warnings should take place privately, before
      the project is opened. But you may also find it helpful to remind
      people on the public lists that this is a new way of development
      for the project, and that it will take some time to adjust. The
      very best thing you can do is lead by example. If you don't see
      your developers answering enough newbie questions, then just
      telling them to answer more isn't going to help. They may not have
      a good sense of what warrants a response and what doesn't yet, or
      it could be that they don't have a feel for how to prioritize
      coding work against the new burden of external communications. The
      way to get them to participate is to participate yourself. Be on
      the public mailing lists, and make sure to answer some questions
      there. When you don't have the expertise to field a question, then
      visibly hand it off to a developer who does—and watch to make sure
      he follows up with an answer, or at least a response. It will
      naturally be tempting for the longtime developers to lapse into
      private discussions, since that's what they're used to. Make sure
      you're subscribed to the internal mailing lists on which this
      might happen, so you can ask that such discussions be moved to the
      public lists right away.</para>

      <para>There are other, longer-term concerns with opening up
      formerly closed projects. <xref linkend="social-infrastructure" />
      explores techniques for mixing paid and unpaid developers
      successfully, and <xref linkend="legal" /> discusses the necessity
      of legal diligence when opening up a private code base that may
      contain software written or "owned" by other parties.</para>
    </sect2>
  </sect1>

  <!-- ======================== SECTION ============================== -->

  <sect1 id="announcing">
    <title>Announcing</title>

    <para>Once the project is presentable—not perfect, just
    presentable—you're ready to announce it to the world. This is
    actually a very simple process: go to <ulink
    url="http://freshmeat.net/" />, click on
    <guimenuitem>Submit</guimenuitem> in the top navigation bar, and
    fill out a form announcing your new project. Freshmeat is the place
    everyone watches for new project announcements. You only have to
    catch a few eyes there for news of your project to spread by word of
    mouth.</para>

    <para>If you know of mailing lists or newsgroups where an
    announcement of your project would be on-topic and of interest, then
    post there, but be careful to make exactly <emphasis>one</emphasis>
    post per forum, and to direct people to your project's own forums
    for follow-up discussion (by setting the
    <systemitem>Reply-to</systemitem> header). The posts should be short
    and get right to the point:</para>

    <screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>

    <para>(See <xref linkend="publicity" /><phrase output="printed"> in
    <xref linkend="communications" /></phrase> for advice on announcing
    further releases and other project events.)</para>

    <para>There is an ongoing debate in the free software world about
    whether it is necessary to begin with running code, or whether a
    project can benefit from being opened even during the
    design/discussion stage. I used to think starting with running code
    was the most important factor, that it was what separated successful
    projects from toys, and that serious developers would only be
    attracted to software that did something concrete already.</para>

    <para>This turned out not to be the case. In the Subversion project,
    we started with a design document, a core of interested and
    well-connected developers, a lot of fanfare, and
    <emphasis>no</emphasis> running code at all. To my complete
    surprise, the project acquired active participants right from the
    beginning, and by the time we did have something running, there were
    quite a few volunteer developers already deeply involved. Subversion
    is not the only example; the Mozilla project was also launched
    without running code, and is now a successful and popular web
    browser.</para>

    <para>In the face of such evidence, I have to back away from the
    assertion that running code is absolutely necessary for launching a
    project. Running code is still the best foundation for success, and
    a good rule of thumb would be to wait until you have it before
    announcing your project. However, there may be circumstances where
    announcing earlier makes sense. I do think that at least a
    well-developed design document, or else some sort of code framework,
    is necessary—of course it may be revised based on public feedback,
    but there has to be something concrete, something more tangible than
    just good intentions, for people to sink their teeth into.</para>

    <para>Whenever you announce, don't expect a horde of volunteers to
    join the project immediately afterward. Usually, the result of
    announcing is that you get a few casual inquiries, a few more people
    join your mailing lists, and aside from that, everything continues
    pretty much as before. But over time, you will notice a gradual
    increase in participation from both new code contributors and users.
    Announcement is merely the planting of a seed. It can take a long
    time for the news to spread. If the project consistently rewards
    those who get involved, the news <emphasis>will</emphasis> spread,
    though, because people want to share when they've found something
    good. If all goes well, the dynamics of exponential communications
    networks will slowly transform the project into a complex community,
    where you don't necessarily know everyone's name and can no longer
    follow every single conversation. The next chapters are about
    working in that environment.</para>
  </sect1>
</chapter>
<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->