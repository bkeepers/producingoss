<appendix id="vc-systems">
<title>Sistemas de Controle de Versão Livres</title>

<simplesect>

<para>Estes são todos os sistemas de controle de versão livres dos quais
tinha conhecimento até meados do ano de 2007.  O único que uso regularmente
é o Subversion.  Exceto pelo Subversion e CVS, tenho pouca ou nenhuma
experiência com a maioria desses sistemas; as informações colocadas aqui
foram retiradas dos seus respectivos sites.  Veja também
<ulink
url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvs">
<title><emphasis role="bold">CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/cvs/"/></title>

<para>O CVS esteve por toda parte, e muitos desenvolvedores se familiarizaram
com ele.  Em seu tempo ele foi revolucionário: foi o primeiro sistema de
controle de versão livre com acesso em rede de área ampla aos desenvolvedores
(até onde eu sei), e o primeiro a oferecer checkouts somente-leitura a usuários
anônimos, o que possibilitou a novos desenvolvedores uma maneira fácil de se
envolverem nos projetos.  O CVS somente controla versões de arquivos, não de
diretórios; ele oferece branching (ramificação), tagging (marcação), e boa
performance ao lado cliente, mas não trata muito bem de arquivos grandes ou de
arquivos binários.  Ele também não suporta atomics commits
(commits atômicos).<emphasis>[Termo de Responsabilidade: Eu estive ativo no
desenvolvimento do CVS por aproximadamente cinco anos, antes de ajudar a começar
o projeto de substituição pelo Subversion.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-subversion">
<title><emphasis role="bold">Subversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://subversion.tigris.org/"/></title>

<para>O Subversion foi escrito em primeiro lugar para ser um substituto para o
CVS&mdash;isto é, abordar o controle de versão aproximadamente da mesma maneira
que o CVS faz, mas sem os problemas e omissões de recursos que muito
frequentemente incomodam aos usuários do mesmo.  Um dos objetivos do Subversion
é para que pessoas acostumadas ao CVS achem a mudança para ele relativamente
suave.  Não há espaço aqui para entrar em detalhes sobre os recursos do
Subversion; consulte seu web site para maiores informações.<emphasis>[Termo de
Responsabilidade: Estou envolvido no desenvolvimento do Subversion, e é o único
desses sistemas que eu uso de forma regular.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-svk">
<title><emphasis role="bold">SVK</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://svk.elixus.org/"/></title>

<para>Embora seja construído com base no Subversion, o SVK provavelmente
se assemelha a alguns dos sistemas descentralizados abaixo do que ao próprio
Subversion.  O SVK suporta distributed development (desenvolvimento
distribuído), local commits (entregas locais), change merging (literalmente,
mudança de concentração) sofisticado, e a habilidade de espelhar (mirror)
árvores de diretórios originadas de outros sistemas de controle,
não-SVK.  Consulte seu web site para maiores informações.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-mercurial">
<title><emphasis role="bold">Mercurial</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.selenic.com/mercurial/"/></title>

<para>O Mercurial é um sistema de controle de versão distribuído que oferece,
entre outras coisas, "'indexação cruzada' completa de arquivos e
'conjuntos de alterações' (changesets); Protocolos HTTP e sincronização SSH
eficientes em respeito ao uso de 'largura de banda' e CPU; concentração
(merging) arbitrária entre os ramos de desenvolvedores; interface web
independente integrada; [portabilidade para] UNIX, MacOS X, e Windows" e mais
(a lista de recursos anterior foi parafraseada do web site do Mercurial).</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-git">
<title><emphasis role="bold">Git</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://git.or.cz/"/></title>

<para>O Git é um projeto iniciado por Linus Torvalds para administrar a árvore
de código do kernel do Linux.  Inicialmente o Git era bastante restrito às
necessidades de desenvolvimento do kernel, mas acabou se espandindo além e hoje
ele é usado para outros tipos de projetos.  Seu web site diz que ele é
"...projetado para tratar de projetos extremamente grandes com velocidade e
eficiência; ele é usado principalmente por vários projetos de código aberto
(Open Source), mais notavelmente pelo kernel do Linux.  O Git se enquadra na
categoria de ferramenta distribuída de gerenciamento de código fonte,
semelhante ao, por exemplo, GNU Arch ou Monotone (ou ao BitKeeper no mundo
proprietário).  Todo diretório de trabalho do Git é um repositório qualificado
com capacidade completa de revisão por rastreamento, sem depender de acesso à
rede ou a um servidor central."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar">
<title><emphasis role="bold">Bazaar</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar.canonical.com/"/></title>

<para>O Bazaar ainda se encontra em desenvolvimento.  Ele será uma implementação
do protocolo GNU Arch, irá manter compatibilidade com o protocolo GNU Arch
enquanto este evolui e trabalhar com o processo da comunidade GNU Arch por
quaisquer mudanças de protocolo que possam ser necessárias para convivência
entre seus usuários.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar-ng">
<title><emphasis role="bold">Bazaar-NG</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar-ng.org/"/></title>

<para>O Bazaar-NG (ou bzr) está atualmente em desenvolvimento pela Canonical
(<ulink url="http://canonical.com/"/>).  Ele oferece uma escolha entre trabalho
centralizado e descentralizado dentro de um único projeto.  Por exemplo, quando
estiver no escritório, você pode trabalhar em um ramal central compartilhado;
para mudanças experimentais ou trabalho offline (sem conexão), você pode fazer
um ramal em seu laptop e mesclá-lo (merge) de volta ao ramal central mais
tarde.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-darcs">
<title><emphasis role="bold">Darcs</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://abridgegame.org/darcs/"/></title>

<para>"David's Advanced Revision Control System is yet another
replacement for CVS.  It is written in Haskell, and has been used on
Linux, MacOS X, FreeBSD, OpenBSD and Microsoft Windows.  Darcs
includes a cgi script, which can be used to view the contents of your
repository."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arch">
<title><emphasis role="bold">Arch</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.gnu.org/software/gnu-arch/"/></title>

<para>GNU Arch supports both distributed and centralized development.
Developers commit their changes to an "archive", which may be local,
and the changes can be pushed and pulled to other archives as the
managers of those archives see fit.  As such a methodology implies,
Arch has more sophisticated merge support than CVS.  Arch also allows
one to easily make branches of archives to which one does not have
commit access.  This is only a brief summary; see the Arch web pages
for details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-monotone">
<title><emphasis role="bold">monotone</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.venge.net/monotone/"/></title>

<para>"monotone is a free distributed version control system.  it
provides a simple, single-file transactional version store, with fully
disconnected operation and an efficient peer-to-peer synchronization
protocol.  it understands history-sensitive merging, lightweight
branches, integrated code review and 3rd party testing.  it uses
cryptographic version naming and client-side RSA certificates.  it has
good internationalization support, has no external dependencies, runs
on linux, solaris, OSX, and windows, and is licensed under the GNU
GPL."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-codeville">
<title><emphasis role="bold">Codeville</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://codeville.org/"/></title>

<para>"Why yet another version control system? All other version
control systems require that you keep careful track of the
relationships between branches so as not have to repeatedly merge the
same conflicts.  Codeville is much more anarchic.  It allows you to
update from or commit to any repository at any time with no
unnecessary re-merges."</para>

<para>"Codeville works by creating an identifier for each change which
is done, and remembering the list of all changes which have been
applied to each file and the last change which modified each line in
each file.  When there's a conflict, it checks to see if one of the
two sides has already been applied to the other one, and if so makes
the other side win automatically.  When there's an actual not
automatically mergeable version conflict, Codeville behaves in almost
exactly the same way as CVS."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-vesta">
<title><emphasis role="bold">Vesta</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.vestasys.org/"/></title>

<para>"Vesta is a portable SCM [Software Configuration Management]
system targeted at supporting development of software systems of
almost any size, from fairly small (under 10,000 source lines) to very
large (10,000,000 source lines)."</para>

<para>"Vesta is a mature system.  It is the result of over 10 years of
research and development at the Compaq/Digital Systems Research
Center, and it was in production use by Compaq's Alpha microprocessor
group for over two and a half years.  The Alpha group had over 150
active developers at two sites thousands of miles apart, on the east
and west coasts of the United States.  The group used Vesta to manage
builds with as much as 130 MB of source data, each producing 1.5 GB of
derived data.  The builds done at the eastern site in an average day
produced about 10-15 GB of derived data, all managed by Vesta.
Although Vesta was designed with software development in mind, the
Alpha group demonstrated the system's flexibility by using it for
hardware development, checking their hardware description language
files into Vesta's source code control facility and building
simulators and other derived objects with Vesta's builder.  The
members of the former Alpha group, now a part of Intel, are continuing
to use Vesta today in a new microprocessor project."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-aegis">
<title><emphasis role="bold">Aegis</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://aegis.sourceforge.net/"/></title>

<para>"Aegis is a transaction-based software configuration management
system.  It provides a framework within which a team of developers may
work on many changes to a program independently, and Aegis coordinates
integrating these changes back into the master source of the program,
with as little disruption as possible."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvsnt">
<title><emphasis role="bold">CVSNT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://cvsnt.org/"/></title>

<para>"CVSNT is an advanced multiplatform version control system.
Compatible with the industry standard CVS protocol it now supports
many more features. ... CVSNT is Open Source, Free software licensed
under the GNU General Public License."  Its feature list includes
authentication via all standard CVS protocols, plus Windows specific
SSPI and Active Directory; secure transport support, via sserver or
encrypted SSPI; cross platform (runs in Windows or Unix environments);
NT version is fully integrated with Win32 system; MergePoint
processing means no more tagging to merge; under active
development.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-meta-cvs">
<title><emphasis role="bold">META-CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://users.footprints.net/~kaz/mcvs.html"/></title>

<para>"Meta-CVS is a version control system built around CVS.
Although it retains most of the features of CVS, including all of the
networking support, it is more capable than CVS, and easier to use."
The features listed on META-CVS's web site include: directory
structure versioning, improved file type handling, simpler and more
user-friendly branching and merging, support for symbolic links,
property lists attached to versioned data, improved third-party data
importing, and easy upgrading from stock CVS.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-opencm">
<title><emphasis role="bold">OpenCM</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.opencm.org/"/></title>

<para>"OpenCM is designed as a secure, high-integrity replacement for
CVS.  A list of the key features can be found on the features page.
While not as 'feature rich' as CVS, it supports some useful things
that CVS lacks.  Briefly, OpenCM provides first-class support for
renames and configuration, cryptographic authentication and access
control, and first-class branches."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-stellation">
<title><emphasis role="bold">Stellation</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.eclipse.org/stellation/"/></title>

<para>"Stellation is an advanced, extensible software configuration
management system, originally developed at IBM Research.  While
Stellation provides all of the standard functions available in any SCM
system, it is distinguished by a number of advanced features, such as
task-oriented change management, consistent project versioning and
lightweight branching, intended to ease the development of software
systems by large groups of loosely coordinated developers."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-prcs">
<title><emphasis role="bold">PRCS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://prcs.sourceforge.net/"/></title>

<para>"PRCS, the Project Revision Control System, is the front end to
a set of tools that (like CVS) provide a way to deal with sets of
files and directories as an entity, preserving coherent versions of
the entire set. ... Its purpose is similar to that of SCCS, RCS, and
CVS, but (according to its authors, at least), it is much simpler than
any of those systems."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arx">
<title><emphasis role="bold">ArX</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/arx/"/></title>

<para>ArX is a distributed version control system offering branching
and merging features, cryptographic data integrity verification, and
the ability to publish archives easily on any HTTP server.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-sourcejammer">
<title><emphasis role="bold">SourceJammer</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://sourcejammer.org/"/></title>

<para>"SourceJammer is a source control and versioning system written
in Java.  It consists of a server-side component that maintains the
files and version history, and handles check-in, check-out, etc. and
other commands; and a client-side component that makes requests of the
server and manages the files on the client-side file system."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-fastcst">
<title><emphasis role="bold">FastCST</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.zedshaw.com/projects/fastcst/index.html"/></title>

<para>"A 'modern' system that uses changesets over file revisions and
distributed operation rather than centralized control.  As long as you
have an e-mail account you can use FastCST.  For larger distribution
you only need an FTP server and/or an HTTP server or use the built in
'serve' command to serve your stuff up directly.  All changesets are
universally unique and have tons of meta-data so you can reject
anything you don't [want] before you try it.  Merging is done by comparing a
merged changeset against the current directory contents, rather than
trying to merge it with another changeset."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-superversion">
<title><emphasis role="bold">Superversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.superversion.org/"/></title>

<para>"Superversion is a multi-user distributed version control system
based on change sets. It aims to be an industrial-strength, open
source alternative to commercial solutions that is equally easy to use
(or even easier) and similarly powerful. In fact, intuitive and
efficient usability has been one of the top priorities in
Superversion's development from the very beginning."</para>

</sect2>

</simplesect>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
