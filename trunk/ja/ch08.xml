<chapter id="managing-volunteers">

<!-- <title>Managing Volunteers</title> -->
<title>ボランティアの管理</title>

<simplesect>

<!--
<para>Getting people to agree on what a project needs, and to work
together to achieve it, requires more than just a genial atmosphere
and a lack of obvious dysfunction.  It requires someone, or several
someones, consciously managing all the people involved.  Managing
volunteers may not be a technical craft in the same sense as computer
programming, but it is a craft in the sense that it can be improved
through study and practice.</para>
-->
<para>
  そのプロジェクトが目指すゴールに向かってみんなで協力してがんばっていくには、
  ただ単に「メンバーがみんな仲良くやっており、
  決定的な機能不全は起こしていない」というだけでは不十分です。
  プロジェクトのメンバーを管理する役割の人が必要となります。
  ボランティアを管理するという技術は、
  コンピュータプログラミングの「技術」とは少々異なるかもしれません。
  でも、学習と実践を通してうまく行えるようになるという点では、
  ボランティアの管理も一種の「技術」であるといえるでしょう。
</para>

<!--
<para>This chapter is a grab-bag of specific techniques for managing
volunteers.  It draws, perhaps more heavily than previous chapters, on
the Subversion project as a case study, partly because I was working
on that project as I wrote this and had all the primary sources close
at hand, and partly because it's more acceptable to cast critical
stones into one's own glass house than into others'.  But I have also
seen in various other projects the benefits of applying&mdash;and the
consequences of not applying&mdash;the recommendations that follow;
when it is politically feasible to give examples from some of those
other projects, I will do so.</para>
-->
<para>
  本章では、ボランティアの管理に関する手法を取り上げます。
  これまでの章に比べて、より Subversion
  プロジェクトでの実例を引き合いに出すことが多くなるでしょう。
  というのも本書の執筆時には私はこのプロジェクトで作業しており、
  Subversion プロジェクトの過去の資産については熟知しているからです。
  また、ちょっと微妙な話題などでは身内のネタのほうが扱いやすいという面もあります。
  もちろん、その他のプロジェクトについても調査をしました。
  本章で扱う内容に従った (あるいは従わなかった) 結果、
  そのプロジェクトはどうなったのか。
  政治的な問題をクリアしたものについては、
  他のプロジェクトの例も本章で取り上げます。
</para>

<!--
<para>Speaking of politics, this is as good a time as any to drag that
much-maligned word out for a closer look.  Many engineers like to
think of politics as something other people engage in.
"<emphasis>I'm</emphasis> just advocating the best course for the
project, but <emphasis>she's</emphasis> raising objections for
political reasons."  I believe this distaste for politics (or for what
is imagined to be politics) is especially strong in engineers because
engineers are bought into the idea that some solutions are objectively
superior to others.  Thus, when someone acts in a way that seems
motivated by outside considerations&mdash;say, the maintenance of his
own position of influence, the lessening of someone else's
influence, outright horse-trading, or avoiding hurting someone's
feelings&mdash;other participants in the project may get annoyed.  Of
course, this rarely prevents them from behaving in the same way when
their own vital interests are at stake.</para>
-->
<para>
  政治という言葉が出てきたついでに、
  みなさんがあまりよく思っていないであろうこの言葉についてよく考えてみましょう。
  技術者の多くは「政治的な話なんかうんざりだ。どこか別のところでしてくれよ」と考えがちです。
  「<emphasis>僕は</emphasis> はただ、
  このプロジェクトのために一番いいのはどの方法なのかを考えて意見を言っているだけなんだ。
  なのに <emphasis>彼女</emphasis> はといえばいつも政治的な理由であれこれ文句をつけてくる。」
  私が思うに、技術者という人種は政治 (あるいは彼らが政治であると思っているもの)
  を嫌う傾向が特に強いようです。というのも技術者は、
  「あるソリューションが他のものより優れているかどうかは客観的に判断できるはずだ」
  という考えを持っているからです。
  プロジェクトのメンバーが、あまり本質的でない問題に気をとられている
  (たとえば自分の評価だけを気にする、他人の評判を落とそうとする、
  あからさまな駆け引きを行う、他人に嫌われないことばかり考えるなど)
  ようだと、他のメンバーはあまりいい気がしないでしょう。
  もちろんほとんどの場合は、
  他のメンバーも重大な関心事については同じように本質的でない振る舞いをしてしまいます。
</para>

<!--
<para>If you consider "politics" a dirty word, and hope to keep your
project free of it, give up right now.  Politics are inevitable
whenever people have to cooperatively manage a shared resource.  It is
absolutely rational that one of the considerations going into each
person's decision-making process is the question of how a given action
might affect his own future influence in the project.  After all, if
you trust your own judgement and skills, as most programmers do, then
the potential loss of future influence has to be considered a
technical result, in a sense.  Similar reasoning applies to other
behaviors that might seem, on their face, like "pure" politics.  In
fact, there is no such thing as pure politics: it is precisely because
actions have multiple real-world consequences that people become
politically conscious in the first place.  Politics is, in the end,
simply an acknowledgment that <emphasis>all</emphasis> consequences of
decisions must be taken into account.  If a particular decision leads
to a result that most participants find technically satisfying, but
involves a change in power relationships that leaves key people
feeling isolated, the latter is just as important a result as the
former.  To ignore it would not be high-minded, but
shortsighted.</para>
-->
<para>
  もしあなたが「政治」という言葉を何か汚らしいものだと感じ、
  自分のプロジェクトでは政治的な話を避けるようにしたいと思っておられるのなら、
  そんな考えは即刻捨ててしまいましょう。
  複数の人間が資源を共有して作業を進めていく以上、
  政治的な話は避けることができないものです。
  何かのアクションを起こしたときに、
  そのプロジェクトにおける各メンバーの影響力がどのように変化するかを考慮する。
  これはまったくもって合理的なことです。
  結局のところ、もしあなたが多くのプログラマーと同様に
  自分の判断とスキルに自信を持っているのなら、
  何らかのアクションによって影響力が落ちたとしても、
  それは単なる技術的な問題だと考えなければなりません。
  同じことが、その他のいかにも「政治的」な振る舞いにだっていえるでしょう。
  実際のところ、純粋に「政治」といえるようなものはありません。
  人の行動というのは現実社会のさまざまな因果関係の中で行われるので、
  人はまず最初に政治的なことを意識するようになります。
  政治というのは、一言で言ってしまえば「すべての因果関係を考慮すること」
  という合意にすぎません。
  とある決定がメンバーの多くを技術的に満足させるものだったとしましょう。
  ただ、それによってメンバー間の力関係に変化が生じ、
  主要なメンバーが仲間はずれにされたと感じるようなことがあったとします。
  この場合、主要なメンバーが感じる気持ちはかなり重要なものとなります。
  それを無視してしまうのは、
  気高いというよりはむしろ目先のことしか考えていないといえるでしょう。
</para>

<!--
<para>So as you read the advice that follows, and as you work with
your own project, remember that there is <emphasis>no one</emphasis>
who is above politics.  Appearing to be above politics is merely one
particular political strategy, and sometimes a very useful one, but it
is never the reality.  Politics is simply what happens when people
disagree, and successful projects are those that evolve political
mechanisms for managing disagreement constructively.</para>
-->
<para>
  さて、これ以降のアドバイスを読む際には、
  そしてプロジェクトで活動をする際には、
  政治のことだけを考えている人なんて <emphasis>どこにもいない</emphasis>
  ということを心にとどめておきましょう。
  政治をしているように見えるのは単なる戦略に過ぎず、
  時には有効でしょうが決して現実の政治ではありません。
  政治というのは、単に意見の相違が生じたときに起こるもので、
  成功しているプロジェクトはそういう状況を建設的に解決するような
  政治の仕組みを確立させています。
</para>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="volunteers">
<!--
<title>Getting the Most Out of Volunteers</title>
-->
<title>ボランティアを最大限に活用する</title>

<!--
<para>Why do volunteers work on free software
projects?<footnote><para>This question was studied in detail, with
interesting results, in a paper by Karim Lakhani and Robert G. Wolf,
entitled <citetitle>Why Hackers Do What They Do: Understanding
Motivation and Effort in Free/Open Source Software
Projects</citetitle>.  See 
<ulink url="http://freesoftware.mit.edu/papers/lakhaniwolf.pdf"
/>.</para></footnote></para>
-->
<para>
  フリーソフトウェアプロジェクトでボランティアとして働くのは、なぜでしょう?
  <footnote>
    <para>
      この疑問について詳しく調査したところ、興味深い結果がでました。
      Karim Lakhani と Robert G. Wolf による論文
      <citetitle>Why Hackers Do What They Do: Understanding
      Motivation and Effort in Free/Open Source Software
      Projects</citetitle>
      にまとめられています。
      <ulink url="http://freesoftware.mit.edu/papers/lakhaniwolf.pdf"/>
      をご覧ください。
    </para>
  </footnote>
</para>

<!--
<para>When asked, many claim they do it because they want to produce
good software, or want to be personally involved in fixing the bugs
that matter to them.  But these reasons are usually not the whole
story.  After all, could you imagine a volunteer staying with a
project even if no one ever said a word in appreciation of his work,
or listened to him in discussions?  Of course not.  Clearly, people
spend time on free software for reasons beyond just an abstract desire
to produce good code.  Understanding volunteers' true motivations will
help you arrange things so as to attract and keep them.  The desire to
produce good software may be among those motivations, along with the
challenge and educational value of working on hard problems.  But
humans also have a built-in desire to work with other humans, and to
give and earn respect through cooperative activities.  Groups engaged
in cooperative activities must evolve norms of behavior such that
status is acquired and kept through actions that help the group's
goals.</para>
-->
<para>
  「なぜ?」と聞かれたら、たいていの人は
  「よりよいソフトウェアを作りたいから」とか
  「個人的にバグの修正にかかわりたいから」などと答えることでしょう。
  ただ、これだけがすべてだというわけではありません。
  もし彼らに感謝の言葉を一言もかけなかったとしたら、
  もし彼らの言うことに一切耳を傾けなかったとしたら、
  それでも彼らはボランティアとして関わり続けてくれると思いますか?
  もちろんそんなわけはありませんね。
  人がわざわざ時間を割いてフリーソフトウェアに関わるのは、
  よりよいコードを書きたいなんていう抽象的な重いだけからではありません。
  彼らの真の動機を理解しておけば、ボランティアの人たちとうまくやっていくのに役立つでしょう。
  「優れたソフトウェアを作り上げたい」とか
  「難しい問題に挑戦してみたい」などという思いもその動機のひとつかもしれません。
  しかし、人にはもともと「他の人たちと共同作業をしたい」
  「他の人に尊敬されたい」といった願望もあります。
  共同作業を進めていくにあたっては、
  何らかの行動基準を定めた上で
  目標に向かってともに進んでいけるようにしなければなりません。
</para>

<!--
<para>Those norms won't always arise by themselves.  For example, on
some projects&mdash;experienced open source developers can probably
name several off the tops of their heads&mdash;people apparently feel
that status is acquired by posting frequently and verbosely.  They
don't come to this conclusion accidentally; they come to it because
they are rewarded with respect for making long, intricate arguments,
whether or not that actually helps the project.  Following are some
techniques for creating an atmosphere in which status-acquiring
actions are also constructive actions.</para>
-->
<para>
  そんな行動基準は、いつも自然に立ち上がるというわけではありません。
  たとえば、プロジェクトによっては「頻繁に繰り返し発言する人がよりよい立場を得る」
  ように見えるものもあります (オープンソース界で長年すごしてきた人なら、
  おそらく「ああ、あれのことね」と頭に思い浮かぶものがあることでしょう)。
  決して偶然そうなっているわけではありません。
  複雑な議論を長々と続けていることに対する敬意のあらわれとして、
  立場が上がってきているのです
  (実際にその議論がプロジェクトにとって有用かどうかは関係ありません)。
  名声を得るための行動が、同時に建設的な行為となるような空気を作り出す。
  そのための方法を以下で説明していきます。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="delegation">
<!--
<title>Delegation</title>
-->
<title>委任</title>

<!--
<para>Delegation is not merely a way to spread the workload around; it
is also a political and social tool.  Consider all the effects when
you ask someone to do something.  The most obvious effect is that, if
he accepts, he does the task and you don't.  But another effect is
that he is made aware that you trusted him to handle the task.
Furthermore, if you made the request in a public forum, then he knows
that others in the group have been made aware of that trust too.  He
may also feel some pressure to accept, which means you must ask in a
way that allows him to decline gracefully if he doesn't really want
the job.  If the task requires coordination with others in the
project, you are effectively proposing that he become more involved,
form bonds that might not otherwise have been formed, and perhaps
become a source of authority in some subdomain of the project.  The
added involvement may be daunting, or it may lead him to become
engaged in other ways as well, from an increased feeling of overall
commitment.</para>
-->
<para>
  「委任」は、単に負荷を分散させる方法というだけでなく
  政治的・社会的な道具にもなります。
  人に何か作業をたのむことにはどんな効果があるか、考えてみましょう。
  いちばんわかりやすいのは、
  「お願いを聞き入れてもらえたら、実際の作業は彼が行うことになってあなたは行わない」
  ということです。しかし、それ以外の効果もあります。お願いをすることによって
  「私はあの人に頼られているんだ」と彼に気づかせることができます。
  さらに、もしそのお願いを公開の場でしたのなら、
  「『私はあの人に頼られている』ということを、みんなも知っているんだ」
  ということにも彼は気づくでしょう。
  彼は「あの人の言うことだから、聞かなきゃ」というプレッシャーを感じるかもしれません。
  したがって、人に何か頼みごとをするときには、
  もし嫌なら気兼ねなく断れるように気配りしなければなりません。
  彼に依頼する作業が、プロジェクト内の別の人との調整を要するようなものであった場合、
  それは彼に「あなたは他の人とは違う。もう一段階すすんだ協力を頼みたい」
  と言うのに等しいといえるでしょう。
  そのプロジェクトのひとつのサブドメインを管理させるくらいのことになるかもしれません。
  あまりやりすぎると威圧的に受け取られかねず、
  彼はその責任の重大さから逃げ出してしまうかもしれません。
</para>

<!--
<para>Because of all these effects, it often makes sense to ask
someone else to do something even when you know you could do it faster
or better yourself.  Of course, there is sometimes a strict economic
efficiency argument for this anyway: perhaps the opportunity cost of
doing it yourself would be too high&mdash;there might be something
even more important you could do with that time.  But even when the
opportunity cost argument doesn't apply, you may
<emphasis>still</emphasis> want to ask someone else to take on the
task, because in the long run you want to draw that person deeper into
the project, even if it means spending extra time watching over them
at first.  The converse technique also applies: if you occasionally
volunteer for work that someone else doesn't want or have time to do,
you will gain his good will and respect.  Delegation and
substitution are not just about getting individual tasks done; they're
also about drawing people into a closer committment to the
project.</para>
-->
<para>
  これらの効果を考慮すると、
  人に何か作業をお願いするのは理にかなったことでしょう。
  たとえそれを自分でやったほうが手際よくできることがわかりきっていたとしても。
  もちろん、何らかの事情で人にお願いをせざるをえないということもあります。
  あなたが自分でそれを行うのがコストに見合わない
  (他にもっと重要な作業がある) 場合などです。
  しかし、そんな差し迫った事情がない場合であっても、
  人に作業をお願いすることがあるかもしれません。
  将来的にその人にもっと深くプロジェクトに関わってほしいと考えている場合、
  最初のうちは少々余分な時間を使ってしまってもかまわないでしょう。
  また、逆も成り立ちます。誰か他の人の作業を手伝ってあげれば、
  あなたに対する相手の印象はよくなるでしょうし、
  相手から尊敬されるようになるでしょう。
  委任したり代理をお願いしたりすることは、何も個々の作業だけのことではありません。
  プロジェクトへのより深い関わりを持たせることにも関係します。
</para>

<sect3 id="delegation-assignment">
<!--
<title>Distinguish clearly between inquiry and assignment</title>
-->
<title>作業依頼と担当者の決定を明確に区別する</title>

<!--
<para>Sometimes it is fair to expect that a person will accept a
particular task.  For example, if someone writes a bug into the code,
or commits code that fails to comply with project guidelines in some
obvious way, then it is enough to point out the problem and thereafter
behave as though you assume the person will take care of it.  But
there are other situations where it is by no means clear that you have
a right to expect action.  The person may do as you ask, or may not.
Since no one likes to be taken for granted, you need to be sensitive
to the difference between these two types of situations, and tailor
your requests accordingly.</para>
-->
<para>
  誰かがその作業を引き受けてくれるであろうことが、ほぼ見当がつくこともあります。
  たとえば、誰かがコードにバグを仕込んでしまったとか、
  誰かがコミットした内容がプロジェクトのガイドラインに明らかに反しているといった場合です。
  そんな場合は、問題点を指摘した上でその当人に対応をお願いするだけで十分です。
  彼はきっとその作業を引き受けてくれるでしょう。
  しかし、時には相手がそのお願いを聞き入れてくれるかどうかが判断できないこともあります。
  お願いを聞いてくれるかもしれないし、拒否されるかもしれない。
  「○○をやってくれて当然でしょ」といった態度で頼まれると、
  誰もあまりいい気はしません。
  人に作業をお願いするときには、状況に応じた適切な方法を考えましょう。
</para>

<!--
<para>One thing that almost always causes people instant annoyance is
being asked to do something in a way that implies that you think it is
clearly their responsibility to do it, when they feel otherwise.  For
example, assignment of incoming issues is particularly fertile ground
for this kind of annoyance.  The participants in a project usually
know who is expert in what areas, so when a bug report comes in, there
will often be one or two people whom everyone knows could probably fix
it quickly.  However, if you assign the issue over to one of those
people without her prior permission, she may feel she has been
put into an uncomfortable position.  She senses the pressure of
expectation, but also may feel that she is, in effect, being
punished for her expertise.  After all, the way one acquires
expertise is by fixing bugs, so perhaps someone else should take this
one!  (Note that issue trackers that automatically assign issues to
particular people based on information in the bug report are less
likely to offend, because everyone knows that the assignment was made
by an automated process, and is not an indication of human
expectations.)</para>
-->
<para>
  相手がもっともいらつくであろうパターンは、
  本人にはその気がないのに「これはあなたがやるのが当然でしょ」
  といったことを匂わせてお願いすることです。
  たとえば、バグ対応の担当者を決めるときに
  このパターンがしばしば発生します。
  プロジェクトのメンバー間では、誰がどの分野に詳しいかは
  だいたいわかっています。何かバグ報告を受け取ったときに、
  「これは彼にやってもらえばすぐに修正できるだろう」
  と見当がつくこともよくあるでしょう。
  しかし、だからといって、
  何の前置きもなしにいきなりその人に対応をお願いしたりすると、
  相手は気を悪くするかもしれません。
  「私は期待されているんだ」と喜んでもらえるかもしれませんが、
  それと同時に「私にこの技術があるばっかりに、
  こんな作業を押し付けられるんだ」と感じることもあるかもしれません。
  バグ対応というのは技術を身につけるためのよい作業でもあります。
  こんな場合は、あえて誰か他の人に対応を任せるのもいいでしょう!
  (バグ追跡システムの中には、バグ報告の内容に応じて
  自動的に担当者を決める昨日を持つものもあります。
  このようなシステムを使用すれば、「押し付けられる」
  という感覚はあまりなくなるでしょう。というのも、
  これはあくまで機械的に割り当てられるものであり、
  私情が挟まれていないことがわかっているからです)。
</para>

<!--
<para>While it would be nice to spread the load as evenly as possible,
there are certain times when you just want to encourage the person who
can fix a bug the fastest to do so.  Given that you can't afford a
communications turnaround for every such assignment ("Would you be
willing to look at this bug?"  "Yes."  "Okay, I'm assigning the issue
over to you then." "Okay."), you should simply make the assignment in
the form of an inquiry, conveying no pressure.  Virtually all issue
trackers allow a comment to be associated with the assignment of an
issue.  In that comment, you can say something like this:</para>
-->
<para>
  特定の人に負荷がかからないよう、
  できるだけみんなに均等に作業を割り当てることは大切です。ただ、時には、
  いちばんわかっている人に一刻も早く対応してもらいたいこともあるでしょう。
  そんなときに毎回根回しをする (「このバグ、ちょっと見てくれないかな?」
  「いいよ」「わかった。じゃあ担当者を君に設定するよ」「オーケー」)
  時間が割けないのなら、できるだけ圧力を感じさせないように
  淡々とお願いするようにしましょう。
  ほぼすべてのバグ追跡システムには、
  担当者を決めるときにコメントをつける機能が備わっています。
  そのコメントで、次のように言うといいでしょう。
</para>

<blockquote>
<!--
   <para>Assigning this over to you, jrandom, because you're most
   familiar with this code.  Feel free to bounce this back if you
   don't have time to look at it, though.  (And let me know if you'd
   prefer not to receive such requests in the future.)</para>
-->
   <para>
    君にお願いするよ、jrandom。たぶん君がいちばんこのコードに詳しいだろうから。
    もしその時間がなかったら、気兼ねせずにつき返してくれてもいいよ。
    (で、もし今後こんな依頼を受けるのがいやだっていうのなら、
    そう言ってほしいんだ)。
   </para>
</blockquote>

<!--
<para>This distinguishes clearly between the
<emphasis>request</emphasis> for assignment and the
recipient's <emphasis>acceptance</emphasis> of that assignment.  The
audience here isn't only the assignee, it's everyone: the entire group
sees a public confirmation of the assignee's expertise, but the
message also makes it clear that the assignee is free to accept or
decline the responsibility.</para>
-->
<para>
  こうすれば、誰かに作業を <emphasis>依頼</emphasis>
  することと相手がそれを <emphasis>受諾</emphasis>
  するかどうかということを明確に区別することができます。
  ここで、このやり取りは当事者間だけでなく全員が見ていることに注意しましょう。
  その人に技術があるとみなされていること、
  そしてその人に依頼を受諾するかどうかの決定権があることが全員に伝わるのです。
</para>

</sect3>

<sect3 id="delegation-followup">
<!--
<title>Follow up after you delegate</title>
-->
<title>委任したあとのフォロー</title>

<!--
<para>When you ask someone to do something, remember that you have
done so, and follow up with him no matter what.  Most requests are
made in public forums, and are roughly of the form "Can you take care
of X?  Let us know either way; no problem if you can't, just need to
know."  You may or may not get a response.  If you do, and the
response is negative, the loop is closed&mdash;you'll need to try some
other strategy for dealing with X.  If there is a positive response,
then keep an eye out for progress on the issue, and comment on the
progress you do or don't see (everyone works better when they know
someone else is appreciating their work).  If there is no response
after a few days, ask again, or post saying that you got no
response and are looking for someone else to do it.  Or just do it
yourself, but still make sure to say that you got no response to the
initial inquiry.</para>
-->
<para>
  誰かに何かの作業を依頼したら、
  その後のフォローも忘れないようにしましょう。
  これは通常、公開のフォーラムで行います。次のような形式になるでしょう。
  "ところで、X についてはどうなっていますか? 教えてください。
  別に無理ならそれでも気にしません。ただ単に気になっただけなので。"
  返事があるかもしれませんし、あるいはないかもしれません。
  あまり状況が芳しくないという返事があったら、
  X について何か別の対応策を考える必要があります。
  順調だよという返事があったら、しばらくはその作業の進捗を気にしないようにしましょう。
  進捗状況について、簡単にコメントだけしておきます
  (人はみな、自分の作業が他人に認められていることを知るとうれしいものです)。
  数日待っても返事がなかった場合は、
  もう一度聞いてみるか、あるいは
  「返事がなかったんだけど、誰か他に X についての状況を知っている人はいますか?」
  という投稿をすることになります。あるいは自分で調べることになるかもしれませんが、
  その場合でも「最初の問いかけに対して返答がなかったので」
  という投稿をしておくようにしましょう。
</para>

<!--
<para>The purpose of publicly noting the lack of response is
<emphasis>not</emphasis> to humiliate the person, and your remarks
should be phrased so as not to have that effect.  The purpose is
simply to show that you keep track of what you have asked for, and
that you notice the reactions you get.  This makes people more likely
to say yes next time, because they will observe (even if only
unconsciously) that you are likely to notice any work they do, given
that you noticed the much less visible event of someone failing to
respond.</para>
-->
<para>
  返事がなかったことをわざわざ投稿するのは、
  <emphasis>決して</emphasis> その相手を非難するものではありません。
  また、周りにそのように受け取られないように言い回しには注意しましょう。
  目的は、単に「この前たずねたことをまだ気にかけていますよ。
  何か反応があったらすぐ気づきますよ」という姿勢を示すことです。
  そうしておけば、次に同じようなことがあったときに反応を得られやすくなります。
  周りの人たちから、あなたはどんなちょっとしたことでも見逃さない人だ
  ということを認識してもらえるからでうｓ。
</para>

</sect3>

<sect3 id="delegation-interest">
<!--
<title>Notice what people are interested in</title>
-->
<title>みんなの好みを知る</title>

<!--
<para>Another thing that makes people happy is to have their interests
noticed&mdash;in general, the more aspects of someone's personality
you notice and remember, the more comfortable he will be, and the
more he will want to work with groups of which you are a
part.</para>
-->
<para>
  自分が何に興味を持っているのかをわかってもらえていると、
  人はうれしいものです。一般論として、
  周りの人たちの性格をしっかり把握しておけば彼らはいい気分になるでしょう。
  そして、あなたと一緒により多くの作業をしたいと思うようになることでしょう。
</para>

<!--
<para>For example, there was a sharp distinction in the Subversion
project between people who wanted to reach a definitive 1.0 release
(which we eventually did), and people who mainly wanted to add new
features and work on interesting problems but who didn't much care
when 1.0 came out.  Neither of these positions is better or worse than
the other; they're just two different kinds of developers, and both
kinds do lots of work on the project.  But we swiftly learned that it
was important to <emphasis>not</emphasis> assume that the excitement
of the 1.0 drive was shared by everyone.  Electronic media can be very
deceptive: you may sense an atmosphere of shared purpose when, in fact,
it's shared only by the people you happen to have been talking to,
while others have completely different priorities.</para>
-->
<para>
  たとえば Subversion プロジェクトにおいては、
  「まずは何とかしてバージョン 1.0 のリリースにこぎつけたい (現在はリリースされています)」
  という人たちと
  「新機能を追加したり興味深い問題を解決したりといったほうが先決だ。
   バージョン 1.0 がいつリリースされるかなんて、そんなの関係ないよ」
  という人たちとに明確に区別することができました。
  どちらがいいとか悪いとかいうことではありません。
  世の中には二種類の開発者がいるというだけのことです。
  そしてどちらのタイプの開発者もプロジェクトに多大な貢献をしてくれています。
  私たちにはすぐにわかりました。
  「1.0 のリリースに向けてがんばろう!」
  といった動機付けでみんなを一丸にできるなんて思わないほうがいいということを。
  電子メディアは非常にあてにならないものです。
  この気持ちはみんなで共有できていると感じていたとしても、
  実際にそう思っているのは当事者だけで、
  周りの人たちはまったく別の方向を見ていることもあるのです。
</para>

<!--
<para>The more aware you are of what people want out of the project,
the more effectively you can make requests of them.  Even just
demonstrating an understanding of what they want, without making any
associated request, is useful, in that it confirms to each person that
she's not just another particle in an undifferentiated mass.</para>
-->
<para>
  みんながそのプロジェクトに何を求めているのかに注意すればするほど、
  周りに効率よく作業を依頼できるようになります。
  実際に作業を依頼しなくても、
  「あなたが何を求めているのかはわかっているよ」
  ということを示すだけでも大事です。そうすれば、
  自分がその他大勢のひとりではないということをみんなに気づかせることができます。
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="praise-and-criticism">
<!--
<title>Praise and Criticism</title>
-->
<title>賞賛と批判</title>

<!--
<para>Praise and criticism are not opposites; in many ways, they are
very similar.  Both are primarily forms of attention, and are most
effective when specific rather than generic.  Both should be deployed
with concrete goals in mind.  Both can be diluted by inflation: praise
too much or too often and you will devalue your praise; the same is
true for criticism, though in practice, criticism is usually reactive
and therefore a bit more resistant to devaluation.</para>
-->
<para>
  賞賛と批判は決して相反するものではありません。
  多くの場合において、両者は非常に似通っています。
  両者はともに、相手の気を引くことが主目的であり、
  全体的なことを言うよりも特定のことに絞った方が効果的です。
  また、どちらも具体的な目標を定めた上で行わなければなりません。
  やり過ぎると、どちらの効果も薄れます。
  必要以上にほめすぎたり、あまりにも頻繁にほめまくっていたりすると、
  あなたのほめ言葉の価値が下がってしまうことでしょう。
  批判だって同じです。ただ実際は、
  批判のほうについては価値が下がる速度は多少遅くなるでしょう。
</para>

<!--
<para>An important feature of technical culture is that detailed,
dispassionate criticism is often taken as a kind of praise (as
discussed in <xref linkend="rudeness"/><phrase output="printed">
in <xref linkend="communications"/></phrase>), because of the
implication that the recipient's work is worth the time required to
analyze it.  However, both of those
conditions&mdash;<emphasis>detailed</emphasis> and
<emphasis>dispassionate</emphasis>&mdash;must be met for this to be
true.  For example, if someone makes a sloppy change to the code, it
is useless (and actually harmful) to follow up saying simply "That was
sloppy."  Sloppiness is ultimately a characteristic of a
<emphasis>person</emphasis>, not of their work, and it's important to
keep your reactions focused on the work.  It's much more effective to
describe all the things wrong with the change, tactfully and without
malice.  If this is the third or fourth careless change in a row by
the same person, it's appropriate to say that&mdash;again without
anger&mdash;at the end of your critique, to make it clear that the
pattern has been noticed.</para>
-->
<para>
  技術者の文化の中で重要なのは、詳細かつ冷静
  (個人的な感情に左右されていない) 批判は、一種の賞賛とも受け取られるということです
  (<phrase output="printed"><xref linkend="communications"/></phrase>
  の <xref linkend="rudeness"/> で説明しました)。なぜなら、
  その作業はきちんと精査するだけの価値があるものだということが暗示されているからです。
  しかし、あくまでも <emphasis>詳細</emphasis> かつ <emphasis>冷静</emphasis>
  というふたつの条件を満たしている場合のみであることに注意しましょう。
  たとえば、誰かがコードにいい加減な変更を加えたとしましょう。
  そんなときに単に「そんないい加減な変更はするな」とだけ言うのは無意味です
  (というか、有害でさえあります)。いい加減なのは、
  結局はその人の性格の問題であり、その作業成果とは関係ありません。
  実際の作業成果に対してのみ反応するようにしましょう。
  変更内容の中でまずいところを、淡々と指摘していくほうがずっと効果的です。
  同じ人が何度も何度も同じようなケアレスミスを繰り返すようなら、
  批判の最後に「同じことが繰り返されている」と指摘するのもいいでしょう。
  ただし、その場合も、怒りを抑えることを忘れないようにしましょう。
</para>

<!--
<para>If someone does not improve in response to criticism, the
solution is not more or stronger criticism.  The solution is for the
group to remove that person from the position of incompetence, in a
way that minimizes hurt feelings as much as possible; see
<xref linkend="transitions"/><phrase output="printed"> later in
this chapter</phrase> for examples.  That is a rare
occurrence, however.  Most people respond pretty well to criticism
that is specific, detailed, and contains a clear (even if unspoken)
expectation of improvement.</para>
-->
<para>
  批判を受けても相手が何も変わらなければ、
  もう少しきつめな対応をすることになります。
  この場合の対応としては、
  できるだけ相手を傷つけないように彼の地位を奪うといったことがあります。
  <phrase output="printed">本章の後半の</phrase> 
  <xref linkend="transitions"/> で、この実例をご覧いただきます。
  しかし、これは滅多に起こることではありません。
  たいていの人は、具体的で詳細な批判を受け取れば
  (口には出さずとも) 何らかの改善の姿勢を見せるものです。
</para>

<!--
<para>Praise won't hurt anyone's feelings, of course, but that doesn't
mean it should be used any less carefully than criticism.  Praise is a
tool: before you use it, ask yourself <emphasis>why</emphasis> you
want to use it.  As a rule, it's not a good idea to praise people for
doing what they usually do, or for actions that are a normal and
expected part of participating in the group.  If you were to do that,
it would be hard to know when to stop: should you praise
<emphasis>everyone</emphasis> for doing the usual things?  After all,
if you leave some people out, they'll wonder why.  It's much better to
express praise and gratitude sparingly, in response to unusual or
unexpected efforts, with the intention of encouraging more such
efforts.  When a participant seems to have moved permanently into a
state of higher productivity, adjust your praise threshold for that
person accordingly.  Repeated praise for normal behavior gradually
becomes meaningless anyway.  Instead, that person should sense that
her high level of productivity is now considered normal and natural,
and only work that goes beyond that should be specially noticed.</para>
-->
<para>
  ほめ言葉は誰も傷つけることはありません。
  ただ、だからといって何も考えずにほめまくればいいというものでもありません。
  賞賛は、一種の道具であるともいえます。
  使う前には、<emphasis>なぜ</emphasis> そうするのかを検討するようにしましょう。
  一般論として、人がふだんからごく普通に行っていることをほめるのはあまりいい考えではありません。
  あるいは、そのグループに参加する上で当然のこととして期待されている作業に対しても、
  特にほめることはないでしょう。
  それをやり始めると、いつやめるかの判断が難しくなってしまいます。
  当然のことをやっている人たち <emphasis>全員</emphasis>
  を個別に賞賛してまわりますか? どこかで線を引いてしまうと、
  ほめられなかった人は「なぜ?」と思うでしょうね。
  それよりも、いつもとは異なる働きをした人や
  予期せぬ活躍をした人に対して
  控えめに賞賛の言葉を贈るほうがずっと効果的です。
  そして、「これからももっとがんばってね」と励ますわけです。
  メンバー全体の生産性が一段階向上したと見なせるようになったら、
  賞賛の言葉を贈る基準もそれにあわせて少し厳しめに変えましょう。
  通常の行いに対して賞賛を繰り返すと、そのうちにそれは無意味になってしまいます。
  みんなが高い生産性を発揮してくれているのは
  もはや予想以上の働きでもなんでもなく期待通りのものであるわけで、
  それをさらに上回る働きをした時点で改めて賞賛の対象となるわけです。
</para>

<!--
<para>This is not to say that the person's contributions shouldn't be
acknowledged, of course.  But remember that if the project is set up
right, everything that person does is already visible anyway, and so
the group will know (and the person will know that the rest of the
group knows) everything she does.  There are also ways to acknowledge
someone's work by means other than direct praise.  You could mention
in passing, while discussing a related topic, that she has done a lot
of work in the given area and is the resident expert there; you
could publicly consult her on some question about the code; or perhaps
most effectively, you could conspicuously make further use of the work
she has done, so she sees that others are now comfortable relying on
the results of her work.  It's probably not necessary to do these
things in any calculated way.  Someone who regularly makes large
contributions in a project will know it, and will occupy a position of
influence by default.  There's usually no need to take explicit steps
to ensure this, unless you sense that, for whatever reason, a
contributor is underappreciated.</para>
-->
<para>
  もちろんこれは、みんなの貢献を受け入れてはいけないという意味ではありません。
  でも、知っておいてほしいのです。
  プロジェクトがうまく機能していれば、みんなが何をやっているのかは
  すでにわかるようになっているわけです。
  そして、誰かがやった作業はメンバーみんなが知っている
  (ということを、それをやった本人も気づいている) わけです。
  直接賞賛の言葉を贈る以外にも、人の作業に対して何らかの意志を表明する方法はあります。
  たとえば、何らかの議論をしているときに
  「このへんについては彼女が多くの作業をしてくれているし、
  彼女が詳しいだろう」と言ってみる。
  あるいは、みんなに見える場所でコードの内容について彼女に尋ねてみる。
  または、もっとも効率的な方法としては、
  彼女の作業成果に基づいてさらなる作業を行うといったものもあります。
  そうすれば、自分の作業が他人に認められているということを彼女も感じてくれるでしょう。
  これらの行為は、別に計算の上で行わなければならないというものではありません。
  プロジェクトに多大な貢献をし続けている人は、
  何もしなくても自然にプロジェクト内での影響力を高めていくものです。
  正当な評価を受けていないとあなたが感じた場合を除き、
  それを後押しするために何らかの作業をする必要はありません。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="territoriality">
<!--
<title>Prevent Territoriality</title>
-->
<title>縄張り意識の回避</title>

<!--
<para>Watch out for participants who try to stake out exclusive
ownership of certain areas of the project, and who seem to want to do
all the work in those areas, to the extent of aggressively taking over
work that others start.  Such behavior may even seem healthy at first.
After all, on the surface it looks like the person is taking on more
responsibility, and showing increased activity within a given area.
But in the long run, it is destructive.  When people sense a "no
trespassing" sign, they stay away.  This results in reduced review in
that area, and greater fragility, because the lone developer becomes a
single point of failure.  Worse, it fractures the cooperative,
egalitarian spirit of the project.  The theory should always be that
any developer is welcome to help out on any task at any time.  Of
course, in practice things work a bit differently: people do have
areas where they are more and less influential, and non-experts
frequently defer to experts in certain domains of the project.  But
the key is that this is all voluntary: informal authority is granted
based on competence and proven judgement, but it should never be
actively
<emphasis>taken</emphasis>.  Even if the person desiring the authority
really is competent, it is still crucial that she hold that authority
informally, through the consensus of the group, and that the authority
never cause her to exclude others from working in that area.</para>
-->
<para>
  プロジェクトの特定の分野において、
  だれかが作業を独占しようとし始めたら要注意です。
  誰かが始めようとした作業を積極的に引き継いだりといったことなどがそれにあたります。
  そのような振る舞いは、最初のうちは健全なものに見えるかもしれません。
  表面的には、その人がより多くの作業を引き受けてくれることで
  その分野の作業を活発にさせてくれるように見えるかもしれません。
  しかし、長い目で見た場合、これはあまりよい兆候ではありません。
  周りの人が "あそこに立ち入っちゃいけない" と感じるようになると、
  みんなそこにはかかわらなくなります。
  その結果、どうなるか。その分野のレビューが機能しなくなり、
  もろいものとなってしまいます。
  一人の開発者がすべての責任を負ってしまい、
  その人が欠ければそれでおしまいになってしまうからです。
  さらに悪いことに、それは
  プロジェクトの平等主義や協力体制を壊してしまうことになります。
  理論上は、すべての開発者が
  好きなときに好きな作業に参加できるようにしておくべきです。
  もちろん、実際には多少異なることはあるでしょう。
  その人によって得意な分野やそうでない分野があるでしょうし、
  素人は達人の言うことに従うしかないという分野もあるでしょう。
  しかし、重要なのは、これらはすべて自発的に参加する作業であるということです。
  能力や実績にもとづいて非公式に権限を与えることもありますが、
  決してそれを積極的に受け入れることがあってはなりません。
  権力を欲している人が仮に有能な人であるとしても、
  あくまでもその権威は非公式なものとすべきです。
  つまりメンバー間の合意によるものということです。
  また、その権威によって他のメンバーの介入を妨げることがあってはなりません。
</para>

<!--
<para>Rejecting or editing someone's work for technical reasons is an
entirely different matter, of course.  There, the decisive factor
is the content of the work, not who happened to act as gatekeeper.  It
may be that the same person happens to do most of the reviewing for a
given area, but as long as he never tries to prevent someone else from
doing that work too, things are probably okay.</para>
-->
<para>
  誰かの作業内容を、技術的な理由で取り消したり編集したりするのは、
  もちろん全然違う話です。
  この場合、決定的な要素は作業の中身であり、
  誰がその作業の責任を負っているかではありません。
  たまたま特定の分野のレビューを行うのが特定の人に集中してしまうかもしれませんが、
  その人が他人の介入を拒否しない限りは特に問題はありません。
</para>

<!--
<para>In order to combat incipient territorialism, or even the
appearance of it, many projects have taken the step of banning the
inclusion of author names or designated maintainer names in source
files.  I wholeheartedly agree with this practice: we follow it in the
Subversion project, and it is more or less official policy at the
Apache Software Foundation.  ASF member Sander Striker puts it this
way:</para>
-->
<para>
  縄張り主義が登場するのを防ぐために、
  多くのプロジェクトではソースファイルから作者名や保守担当者名を取り除くようになっています。
  私は心からこの習慣に賛同します。
  Subversion プロジェクトでもこの方式を採用しており、
  Apache Software Foundation
  でもそれは事実上の公式方針となっています。
  ASF のメンバーである Sander Striker は次のように述べています。
</para>

<blockquote>
<!--
   <para><emphasis>At the Apache Software foundation we discourage the
   use of author tags in source code.  There are various reasons for
   this, apart from the legal ramifications.  Collaborative
   development is about working on projects as a group and caring for
   the project as a group.  Giving credit is good, and should be done,
   but in a way that does not allow for false attribution, even by
   implication.  There is no clear line for when to add or remove an
   author tag.  Do you add your name when you change a comment?  When
   you put in a one-line fix?  Do you remove other author tags when
   you refactor the code and it looks 95% different?  What do you do
   about people who go about touching every file, changing just enough
   to make the virtual author tag quota, so that their name will be
   everywhere?</emphasis></para>
-->
   <para>
     <emphasis>
       Apache Software foundation では、ソースコードに author
       タグを使用しないことを推奨しています。
       これには、法的な問題以外にさまざまな理由があります。
       共同開発とは、みんなで一丸となって作業に取り組み、
       みんなで一丸となってプロジェクトにかかわるということです。
       クレジットを与えるのもいいでしょう。というか、むしろすべきでしょう。
       でも、間違った情報を与えることになってしまってはいけません。
       どんなときに author タグを追加するのか。
       あるいはどんなときに削除するのか。
       明確な基準などありません。
       コメントを書き換えただけのときにあなたの名前を追加しますか?
       たった 1 行だけ修正したときは?
       コードをリファクタリングして、元のコードとは 95%
       ほど違うものになったとしましょう。
       こんな時に、元の作者の author タグを削除しますか?
       すべてのファイルをちょっとずつ修正して、
       自分の名前がすべてのファイルに登場するようにする人がいたとしましょう。
       あなたはそれを見てどう思いますか?
     </emphasis>
   </para>

<!--
   <para><emphasis>There are better ways to give credit, and our
   preference is to use those.  From a technical standpoint author
   tags are unnecessary; if you wish to find out who wrote a
   particular piece of code, the version control system can be
   consulted to figure that out.  Author tags also tend to get out of
   date.  Do you really wish to be contacted in private about a piece
   of code you wrote five years ago and were glad to have
   forgotten?</emphasis></para>
-->
   <para>
     <emphasis>
       クレジットを与えるよりもいい方法があります。
       私たちとしてもそちらをおすすめします。
       技術的な側面から見て、author タグは不要です。
       特定のコードを誰が書いたのかを知りたければ、
       バージョン管理システムを使用すればすぐにわかることです。
       また、author タグは更新が遅れて現状を反映しなくなりがちです。
       5 年前に書いたっきりで忘却の彼方にあったコードについて
       個人的に問い合わせられたとして、あなたはどう思いますか?
     </emphasis>
   </para>
</blockquote>

<!--
<para>A software project's source code files are the core of its
identity.  They should reflect the fact that the developer community
as a whole is responsible for them, and not be divided up into
little fiefdoms.</para>
-->
<para>
  ソフトウェアプロジェクトにおいて、
  ソースコードファイルこそがその存在の証となります。
  開発者コミュニティー全体でソースコードに責任を持つべきであり、
  小さなグループに分けてしまってはいけません。
</para>

<!--
<para>People sometimes argue in favor of author or maintainer tags in
source files on the grounds that this gives visible credit to those
who have done the most work there.  There are two problems with this
argument.  First, the tags inevitably raise the awkward question of
how much work one must do to get one's own name listed there too.
Second, they conflate the issue of credit with that of authority:
having done work in the past does not imply ownership of the area
where the work was done, but it's difficult if not impossible to avoid
such an implication when individual names are listed at the tops of
source files.  In any case, credit information can already be obtained
from the version control logs and other out-of-band mechanisms like
mailing list archives, so no information is lost by banning it from
the source files themselves.<footnote><para>But see the mailing list
thread entitled <citetitle>"having authors names in .py files"</citetitle>
at <ulink url="http://groups.google.com/group/sage-devel/browse_thread/thread/e207ce2206f0beee"/>
for a good counterargument, particularly the post from William Stein.
The key in that case, I think, is that many of the authors come from a
culture (the academic mathematics community) where crediting directly
at the source is the norm and is highly valued.  In such
circumstances, it may be preferable to put author names into the
source files, along with precise descriptions of what each author did,
since the majority of potential contributors will expect that style of
acknowledgement.</para></footnote></para>
-->
<para>
  ソースコードで author タグや maintainer タグを使用したいと文句を言う人もいるでしょう。
  そうすれば、誰がもっともがんばっているかが一目瞭然になるからというわけです。
  しかし、この意見にはふたつの問題があります。
  まず、「どの程度の作業をしたら名前を追加してもいいのか」
  といったどうでもいい問題が必ず立ち上がってきます。
  次に、クレジットを得ることがまるで権威を得ることであるかのような勘違いを起こしてしまいます。
  過去にその部分の作業をしたからといって、コードのその部分が作業をした人のものになるわけではありません。
  しかし、ソースファイルの先頭に個人の名前が並べられていたら、
  そんな風に勘違いしてしまうことが避けられません。
  いずれにせよ、クレジットは既に得られているわけです。
  たとえばバージョン管理システムのログやメーリングリストのアーカイブなどでそれがわかります。
  したがって、ソースファイルからクレジットを削除したところで
  何も失われる情報はありません。
  <footnote>
    <para>
      しかし、<ulink url="http://groups.google.com/group/sage-devel/browse_thread/thread/e207ce2206f0beee"/>
      の <citetitle>"having authors names in .py files"</citetitle> というスレッド、特に
      William Stein の投稿は、その反論となるでしょう。
      私が思うに、この場合のキーとなるのは、
      作者の多くが「ソースに直接クレジットを書くのが当然であり、
      それが高く評価される」という文化 (数学者のコミュニティー)
      の出身であるということです。
      このような場合はソースファイルに作者名を埋め込んでもいいでしょう。
      そして個々の作者が具体的に何をしたのかを正確に記載しておきます。
      そうすれば、今後新たに開発に加わる人たちにも
      「そういうものなんだ」と認識させることができます。
    </para>
  </footnote>
</para>

<!--
<para>If your project decides to ban individual names from source
files, make sure not to go overboard.  For instance, many
projects have a <filename>contrib/</filename> area where small tools and
helper scripts are kept, often written by people who are otherwise not
associated with the project.  It's fine for those files to contain
author names, because they are not really maintained by the project as
a whole.  On the other hand, if a contributed tool starts getting
hacked on by other people in the project, eventually you may want to
move it to a less isolated location and, assuming the original author
approves, remove the author's name, so that the code looks like any
other community-maintained resource.  If the author is sensitive about
this, compromise solutions are acceptable, for example:</para>
-->
<para>
  あなたのプロジェクトで「ソースファイルには作者の名前を記載しない」
  ことに決めたとしても、決してやり過ぎないようにしましょう。
  たとえば、多くのプロジェクトには <filename>contrib/</filename>
  という領域があって、細々したツールやヘルパースクリプト類をここで管理しています。
  これらの中には、特定の人が作成したものであってプロジェクトとは関連のないものもあります。
  そんな場合には作者の名前を含めてもかまわないでしょう。
  だって実際のところ、そのファイルはプロジェクト全体で管理しているわけではないのですから。
  一方、そのようなツールをプロジェクトの他のメンバーがハックするようになり、
  本格的にプロジェクトに含めたくなることもあるかもしれません。
  そのような場合は、原作者の承認を得た上で作者のクレジットを削除し、
  プロジェクトで管理している他のリソースとあわせるようにします。
  原作者がそれをいやがった場合、妥協案としては次のようなものが考えられます。
</para>

<blockquote>
<!--
<programlisting>
# indexclean.py: Remove old data from a Scanley index.
#
# Original Author: K. Maru &lt;kobayashi@yetanotheremailservice.com&gt;
# Now Maintained By: The Scanley Project &lt;http://www.scanley.org/&gt;
#                    and K. Maru.
# 
# ...
</programlisting>
-->
<programlisting>
# indexclean.py: 古いデータを Scanley インデックスから削除する
#
# 原作者: K. Maru &lt;kobayashi@yetanotheremailservice.com&gt;
# 現在の保守担当者: The Scanley Project &lt;http://www.scanley.org/&gt;
#                   そして K. Maru.
# 
# ...
</programlisting>
</blockquote>

<!--
<para>But it's better to avoid such compromises, if possible, and most
authors are willing to be persuaded, because they're happy that their
contribution is being made a more integral part of the project.</para>
-->
<para>
  しかし、できればこうした妥協は避けたいものです。
  また、ほとんどの人は、言うことを聞いてくれることでしょう。
  自分の作ったものがそのプロジェクトにより深く組み込まれていくというのはうれしいものです。
</para>

<!--
<para>The important thing is to remember that there is a continuum
between the core and the periphery of any project.  The main source
code files for the software are clearly part of the core, and should
be considered as maintained by the community.  On the other hand,
companion tools or pieces of documentation may be the work of single
individuals, who maintain them essentially alone, even though the
works may be associated with, and even distributed with, the project.
There is no need to apply a one-size-fits-all rule to every file, as
long as the principle that community-maintained resources are not
allowed to become individual territories is upheld.</para>
-->
<para>
  大事なのは、どんなプロジェクトであっても
  その中心部と周囲はきっちりつながっているということです。
  本体のソースコードファイルは明らかにプロジェクトの中心となるものであり、
  コミュニティー全体で管理しなければなりません。
  一方、周辺のツールやドキュメントの中には特定の個人が保守しているものもあるかもしれません。
  たとえそれがプロジェクトに関連するものであったり
  プロジェクトとともに配布されている場合であっても、
  本質的にひとりで保守を担当していることになります。
  すべてのファイルに対して画一的な規則で縛る必要はありません。
  ただし、コミュニティー全体で管理しているリソースは
  決して個人で囲い込んでしまってはいけないということを覚えておきましょう。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="automation">
<!--
<title>The Automation Ratio</title>
-->
<title>自動化の割合</title>

<!--
<para>Try not to let humans do what machines could do instead.  As a
rule of thumb, automating a common task is worth at least ten times the
effort a developer would spend doing that task manually one time.  For
very frequent or very complex tasks, that ratio could easily go up to
twenty or even higher.</para>
-->
<para>
  機械にできることは、わざわざ人間にさせずに機械に任せてしまいましょう。
  おおざっぱに言って、定型作業を自動化すれば少なくとも効率が 10 倍にはなるでしょう。
  頻繁に行う作業であったり複雑な作業であったりした場合は、
  20 倍以上になることも珍しくありません。
</para>

<!--
<para>Thinking of yourself as a "project manager", rather than just
another developer, may be a useful attitude here.  Sometimes
individual developers are too wrapped up in low-level work to see the
big picture and realize that everyone is wasting a lot of effort
performing automatable tasks manually.  Even those who do realize it
may not take the time to solve the problem: because each individual
performance of the task does not feel like a huge burden, no one ever
gets annoyed enough to do anything about it.  What makes automation
compelling is that the small burden is multiplied by the number of
times each developer incurs it, and then <emphasis>that</emphasis>
number is multiplied by the number of developers.</para>
-->
<para>
  ここでは、あなたが単なる一人の開発者ではなく
  "プロジェクトの管理者" になったつもりで考えてみましょう。
  各開発者は、各個人がやっている枝葉の作業に精一杯で
  プロジェクト全体の様子
  (自動化できる作業をわざわざ手作業でやってしまっているなど)
  が見えていないかもしれません。
  それに気づいている人であっても、わざわざ時間を割いて問題を解決しようとは思わないでしょう。
  実際のところ、各個人の作業自体は重荷となるほどのものではなく、
  「何とかしなきゃ」と思うほどには困っていないのです。
  たとえ個々の作業にかかる時間はわずかなものであったとしても、
  各開発者がそれを行う回数だけ掛けるとどうなるでしょう。
  さらにその結果を開発者の人数分だけ掛けたら?
  ……ということを考えだすと、自動化は無視できなくなります。
</para>

<!--
<para>Here, I am using the term "automation" broadly, to mean not only
repeated actions where one or two variables change each time, but any
sort of technical infrastructure that assists humans.  The minimum
standard automation required to run a project these days was described
in <xref linkend="technical-infrastructure"/>, but each project
may have its own special problems too.  For example, a group working
on documentation might want to have a web site displaying the most
up-to-date versions of the documents at all times.  Since
documentation is often written in a markup language like XML, there
may be a compilation step, often quite intricate, involved in creating
displayable or downloadable documents.  Arranging a web site where
such compilation happens automatically on every commit can be
complicated and time-consuming&mdash;but it is worth it, even if it
costs you a day or more to set up.  The overall benefits of having
up-to-date pages available at all times are huge, even though the cost
of <emphasis>not</emphasis> having them might seem like only a small
annoyance at any single moment, to any single developer.</para>
-->
<para>
  ここでいう "自動化" とは、広い意味の自動化を指しています。
  いくつかのパラメータを指定して同じ動作を繰り返すというものだけでなく、
  人間の作業を支援する技術的な仕組み一般を指して "自動化" といっています。
  いまどきのプロジェクトの運営における最低限必要な自動化については
  <xref linkend="technical-infrastructure"/> で説明しました。
  しかし、これら以外にも各プロジェクトに固有の問題もあることでしょう。
  たとえば、ドキュメント担当チームの場合は、
  常に最新版のドキュメントが公開されているウェブサイトが必要かもしれません。
  たいていの場合、ドキュメントは XML などのマークアップ言語で作成されるので、
  コンパイルが必要となるかもしれません。
  表示用とダウンロード用のドキュメントを作成するなど、
  このコンパイル処理は複雑なものになることもあります。
  コミットがあるたびに最新版をコンパイルしてウェブサイトに反映させるというのは、
  複雑で時間のかかる処理です。
  しかし、何日かかけてでもその仕組みを作成する価値はあります。
  最新の状態を確認できるようにする仕組みがないとしても、
  それで困るのはほんの一握りの人たちだけかもしれません。
  それでも、その仕組みを作ることによる利益は計り知れないものがあります。
</para>

<!--
<para>Taking such steps eliminates not merely wasted time, but the
griping and frustration that ensue when humans make missteps (as they
inevitably will) in trying to perform complicated procedures manually.
Multi-step, deterministic operations are exactly what computers were
invented for; save your humans for more interesting things.</para>
-->
<para>
  このように自動化すると、時間の浪費が解消されるだけでなく
  人間が手動で作業したときの作業ミス (ミスは必ず発生します)
  でいらいらすることもなくなります。
  何段階にも及ぶ複雑な定型作業なんて、まさにコンピュータにやらせるべきものです。
  そもそもコンピュータが発明されたのはそういう作業をやらせるためだったのですから。
  そんな作業はコンピュータに任せ、
  人間はもっと創造的な作業に時間を割くようにしましょう。
</para>

<sect3 id="automated-testing">
<!--
<title>Automated testing</title>
-->
<title>自動テスト</title>

<!--
<para>Automated test runs are helpful for any software project, but
especially so for open source projects, because automated testing
(especially regression testing) allows developers to feel comfortable
changing code in areas they are unfamiliar with, and thus encourages
exploratory development.  Since detecting breakage is so hard to do by
hand&mdash;one essentially has to guess where one might have broken
something, and try various experiments to prove that one
didn't&mdash;having automated ways to detect such breakage saves the
project a <emphasis>lot</emphasis> of time.  It also makes people much
more relaxed about refactoring large swaths of code, and therefore
contributes to the software's long-term maintainability.</para>
-->
<para>
  テストの自動化はどんなソフトウェアプロジェクトにとっても有用ですが、
  オープンソースプロジェクトでは特に有用となります。
  自動テスト (特に回帰テスト) を行うことで、
  不慣れな分野のコードでも安心して変更できるようになります。
  これは、開発の効率を大きく向上させます。
  問題の原因を人間の目で検出するのは大変
  (まず「このあたりに問題があるのではないか」と見当をつけ、
  その部分に問題がないかどうかあらゆる手段で調べることになります)
  なので、それを自動化すれば <emphasis>大きな</emphasis> 時間の節約になります。
</para>

  <sidebar id="regression-testing">
<!--
  <title>Regression Testing</title>
-->
  <title>回帰テスト</title>

<!--
  <para><firstterm>Regression testing</firstterm> means testing for
  the reappearance of already-fixed bugs.  The purpose of regression
  testing is to reduce the chances that code changes will break the
  software in unexpected ways.  As a software project gets bigger and
  more complicated, the chances of such unexpected side effects
  increase steadily.  Good design can reduce the rate at which the
  chances increase, but it cannot eliminate the problem
  entirely.</para>
-->
  <para>
    <firstterm>回帰テスト (リグレッションテスト、Regression testing)</firstterm>
    とは、修正済みのバグが再発していないかどうかを調べるテストのことです。
    回帰テストを行う理由は、
    コードを変更したことで予期せぬところでソフトウェアを破壊していないことを確認するためです。
    ソフトウェアが大規模、複雑になっていくにつれて、
    予期せぬ副作用があらわれる可能性も大きくなります。
    きちんと設計していればその可能性を低くすることはできるでしょうが、
    完全に問題を解消するのは不可能です。
  </para>

<!--
  <para>As a result, many projects have a <firstterm>test
  suite</firstterm>, a separate program that invokes the project's
  software in ways that have been known in the past to stimulate
  specific bugs.  If the test suite succeeds in making one of these
  bugs happen, this is known as a <firstterm>regression</firstterm>,
  meaning that someone's change unexpectedly unfixed a
  previously-fixed bug.</para>
-->
  <para>
    ということもあり、多くのプロジェクトでは
    <firstterm>テストスイート</firstterm> を用意しています。
    これは、プロジェクトとは別に用意されたプログラムで、
    過去に存在したバグが再現するような処理を実行します。
    テストスイートを実行してこれらのバグが再現した状態を
    <firstterm>リグレッション</firstterm> といいます。
    これは、誰かの修正が過去に修正済みのバグを再発させてしまったことを意味します。
  </para>

<!--
  <para>See also
  <ulink url="http://en.wikipedia.org/wiki/Regression_testing"/>.</para>
-->
  <para>
    <ulink url="http://en.wikipedia.org/wiki/Regression_testing"/>
    もご覧ください。
  </para>

  </sidebar>

<!--
<para>Regression testing is not a panacea.  For one thing, it works
best for programs with batch-style interfaces.  Software that is
operated primarily through graphical user interfaces is much harder to
drive programmatically.  Another problem is that the regression test
suite framework itself can often be quite complex, with a learning
curve and maintenance burden all its own.  Reducing this complexity is
one of the most useful things you can do, even though it may take a
considerable amount of time.  The easier it is to add new tests to the
suite, the more developers will do so, and the fewer bugs will survive
to release.  Any effort spent making tests easier to write will be
paid back manyfold over the lifetime of the project.</para>
-->
<para>
  回帰テストは決して万能というわけではありません。
  バッチ処理的なプログラムではうまく動作するでしょうが、
  たとえばグラフィカルなインターフェイスで操作するプログラムに適用するのは難しいものです。
  もうひとつの問題として、回帰テスト用のフレームワークが非常に複雑なものであるということが挙げられます。
  まともに使いこなせるようになるまでにはかなりの時間がかかることでしょう。
  この複雑さをなんとか軽減させることが大切です。
  たとえ時間がかかったとしても、
  その努力は必ず報われます。
  新しいテストをテストスイートに追加しやすくすればするほど、
  多くの開発者がテストを作成してくれるようになります。
  その結果として、リリース後に見つかるバグも少なくなるでしょう。
  テストを書きやすくするために費やした努力は、
  将来にわたってそのプロジェクトに大きな効果を及ぼします。
</para>

<!--
<para>Many projects have a <firstterm>"Don't break the
build!"</firstterm> rule, meaning: don't commit a change that makes
the software unable to compile or run.  Being the person who broke the
build is usually cause for mild embarrassment and ribbing.  Projects
with regression test suites often have a corollary rule: don't commit
any change that causes tests to fail.  Such failures are easiest to
spot if there are automatic nightly runs of the entire test suite,
with the results mailed out to the development list or to a dedicated
test-results mailing list; that's another example of a worthwhile
automation.</para>
-->
<para>
  多くのプロジェクトでは <firstterm>"Don't break the build!"</firstterm>
  という決まりがあります。これは、コンパイルできなくなったり
  実行できなくなったりするような変更はコミットするなという意味です。
  そんなコミットをしてしまった人は、
  かなり気まずい思いをすることになるでしょう。
  回帰テストを採用しているプロジェクトの場合、この決まりはもっと明確になります。
  つまり「テストが失敗するような変更はコミットするな」
  ということになるのです。
  テストスイート全体を毎晩自動実行するようにしておけば、
  このようなコミットを検出することは容易です。
  そして、テストの実行結果は開発者向けメーリングリスト
  (あるいはテスト結果専用のメーリングリスト)
  に送るようにすればいいのです。
  ほら、ここにもまた自動化の例がひとつ登場しました。
</para>

<!--
<para>Most volunteer developers are willing to take the extra time to
write regression tests, when the test system is comprehensible and
easy to work with.  Accompanying changes with tests is understood to
be the responsible thing to do, and it's also an easy opportunity for
collaboration: often two developers will divide up the work for a
bugfix, with one writing the fix itself, and the other writing the
test.  The latter developer may often end up with more work, and since
writing a test is already less satisfying than actually fixing the
bug, it is imperative that the test suite not make the experience more
painful than it has to be.</para>
-->
<para>
  わかりやすくて作業しやすいテストシステムがあれば、
  たいていの開発者は喜んで回帰テストを作成してくれるでしょう。
  変更をするときはテストも作成するというのは共通認識となっています。
  この作業は、複数で協力して行うこともあります。
  バグ修正作業を二人で分担し、一人が実際の修正を行って
  もう一人がテストを書くといったようにです。
  テストを書く側の担当者のほうが、作業量は多くなりがちです。
  もともと実際のバグ修正にくらべてテストを書く作業はつまらないものなので、
  テストを書くのが苦にならないようにする必要があります。
</para>

<!--
<para>Some projects go even further, requiring that a new test
accompany <emphasis>every</emphasis> bugfix or new feature.  Whether
this is a good idea or not depends on many factors: the nature of the
software, the makeup of the development team, and the difficulty of
writing new tests.  The CVS (<ulink url="http://www.cvshome.org/"/>)
project has long had such a rule.  It is a good policy in theory,
since CVS is version control software and therefore very risk-averse
about the possibility of munging or mishandling the user's data.  The
problem in practice is that CVS's regression test suite is a single
huge shell script (amusingly named <filename>sanity.sh</filename>),
hard to read and hard to modify or extend.  The difficulty of adding
new tests, combined with the requirement that patches be accompanied
by new tests, means that CVS effectively discourages patches.  When I
used to work on CVS, I sometimes saw people start on and even complete
a patch to CVS's own code, but give up when told of the requirement to
add a new test to <filename>sanity.sh</filename>.</para>
-->
<para>
  プロジェクトによっては、さらに厳しい規則を設けていることもあります。
  バグ修正や機能追加を行う際は、<emphasis>必ず</emphasis>
  新しいテストを追加しなければならないといったものです。
  このような規則を設けることのよしあしは、多くの要素に依存します。
  「そのソフトウェアがどんな類のものなのか」
  「開発チームの構成はどのようなものなのか」
  「新しいテストを書く難易度はどれくらいか」
  などが考慮の対象になります。
  CVS (<ulink url="http://www.cvshome.org/"/>)
  プロジェクトでは、長年この厳しめの規則を採用しています。
  理屈の上では、これはよい方針でしょう。
  CVS はバージョン管理用のソフトウェアであり、
  ユーザーのデータを壊して復旧できなくしてしまうようなことがあってはならないからです。
  ただ、実際に運用していく上では問題がありました。
  CVS の回帰テストスイートは、ひとつの巨大なシェルスクリプトでできています
  (<filename>sanity.sh</filename> という変な名前がついています)。
  これは非常に読みづらく、また修正したり拡張したりするのも大変なのです。
  新しいテストを追加するのが大変であること、
  そしてパッチが受け入れられるためには新しいテストが必須であること。
  これらによって、CVS は事実上パッチの受け入れを拒否しているようなものだと言えます。
  かつて私が CVS プロジェクトで作業をしていたころ、
  「CVS のパッチを作成したんだけど、<filename>sanity.sh</filename>
  にテストを追加しなきゃならないっていう話を聞いて結局あきらめた」
  という人を散々見てきました。
</para>

<!--
<para>It is normal to spend more time writing a new regression test
than on fixing the original bug.  But CVS carried this phenomenon to
an extreme: one might spend hours trying to design one's test
properly, and still get it wrong, because there are just too many
unpredictable complexities involved in changing a 35,000-line Bourne
shell script.  Even longtime CVS developers often grumbled when they
had to add a new test.</para>
-->
<para>
  バグの修正そのものより新たな回帰テストを書くほうが時間のかかるというのは
  ごく普通のことです。ただ、CVS の場合はそれがちょっと極端すぎます。
  数時間かけて自分用のテストを作ったとしても、まだそれが間違っているかもしれません。
  35,000 行にもおよぶシェルスクリプトの中には、
  思いもよらぬような込み入った仕組みが潜んでいるからです。
  長年 CVS にかかわっている開発者でさえも、
  新たなテストを追加するときには不満をもらすことがあります。
</para>

<!--
<para>This situation was due to a failure on all our parts to consider
the automation ratio.  It is true that switching to a real test
framework&mdash;whether custom-built or off-the-shelf&mdash;would have
been a major effort.<footnote><para>Note that there would be no need
to convert all the existing tests to the new framework; the two could
happily exist side by side, with old tests converted over only as they
needed to be changed.</para></footnote> But neglecting to do so has
cost the project much more, over the years.  How many bugfixes and new
features are <emphasis>not</emphasis> in CVS today, because of the
impediment of an awkward test suite?  We cannot know the exact number,
but it is surely many times greater than the number of bugfixes or new
features the developers might forgo in order to develop a new test
system (or integrate an off-the-shelf system).  That task would only
take a finite amount of time, while the penalty of using the current
test suite will continue forever if nothing is done.</para>
-->
<para>
  このようになってしまった原因は、
  私たちが自動化の割合について考えていなかったことです。
  自前で作るなり既存のものを使うなりして、
  本物のテストフレームワークに移行しようという試みはありました。
  <footnote>
    <para>
      既存のテストをすべて新しいフレームワークに移行させなければならないというわけではありません。
      両者を共存させることもできるでしょう。
      必要になったものだけを新しい形式に変換すればいいのです。
    </para>
  </footnote>
  しかし、長年それを怠ってきたツケが今まわってきているというわけです。
  この使いづらいテストスイートのせいで現在の CVS に取り込まれて <emphasis>いない</emphasis>
  バグ修正や新機能って、いったいどれくらいになるんでしょう?
  実際のところは知りようがありません。ただ、
  新しいテストシステムを開発 (あるいは既存のシステムを採用)
  する時間を確保するために減ってしまうバグ修正・機能追加の数よりはるかに多いことは確かです。
  テストシステムを移行するのにかかる時間は有限のものですが、
  何もせず現状のテストスイートを使い続けることによる被害は永遠に続くわけですから。
</para>

<!--
<para>The point is not that having strict requirements to write tests
is bad, nor that writing your test system as a Bourne shell script is
necessarily bad.  It might work fine, depending on how you design it
and what it needs to test.  The point is simply that when the test
system becomes a significant impediment to development, something must
be done.  The same is true for any routine process that turns into a
barrier or a bottleneck.</para>
-->
<para>
  ここで言っているのは、「テストを書くよう厳しく要求するのはダメ」
  ということではありません。また、
  テストシステムをシェルスクリプトで書くのが必ずしも悪いというわけでもありません。
  きちんと設計した上であれば、それが有用な場合もあるでしょう。
  言いたかったのは、「もしテストシステムが開発の障害になっているのなら、
  何か手を打たなければいけない」という単純なことです。
  その他の定型作業も一緒です。
  もしそれが障害やボトルネックになっているのなら、
  何らかの対処が必要です。
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="users-to-volunteers">
<!--
<title>Treat Every User as a Potential Volunteer</title>
-->
<title>すべてのユーザーの協力を得るために</title>

<!--
<para>Each interaction with a user is an opportunity to get a new
volunteer.  When a user takes the time to post to one of the project's
mailing lists, or to file a bug report, he has already tagged himself
as having more potential for involvement than most users (from whom
the project will never hear at all).  Follow up on that potential: if
he described a bug, thank him for the report and ask him if he wants
to try fixing it.  If he wrote to say that an important question was
missing from the FAQ, or that the program's documentation was
deficient in some way, then freely acknowledge the problem (assuming
it really exists) and ask if he's interested in writing the missing
material himself.  Naturally, much of the time the user will demur.
But it doesn't cost much to ask, and every time you do, it reminds the
other listeners in that forum that getting involved in the project is
something anyone can do.</para>
-->
<para>
  ユーザーとのやり取りは、
  そのプロジェクトに新たなメンバーを迎え入れるためのチャンスでもあります。
  わざわざ時間を割いてプロジェクトのメーリングリストに投稿してくれたり
  バグ報告をしてくれたりといった時点で、その人は
  その他大勢 (の、そもそもそのプロジェクトのことなんか知らない人たち)
  よりもより深くプロジェクトに興味を持ってくれていることがわかります。
  そんな人たちをうまく釣り上げてしまいましょう。
  バグ報告を受け取ったら、その人に感謝したうえで
  「ところで、それを自分で修正してみる気はない?」
  と聞いてみるといいでしょう。
  FAQ に載せるべき質問が欠けているだとか
  プログラムのドキュメントが不十分だとかいう指摘を受け取った場合は
  (実際にそんな問題があったと仮定します)、
  指摘をしっかり受け入れた上で
  「ところで、それを自分で書いてみる気はない?」
  と聞いてみましょう。
  当然、たいていの場合は「いえ、そこまでは……」と断られるでしょう。
  でも、聞いてみること自体にはそんなに手間はかかりません。
  それに、毎回そのように返事をしていれば、
  その他の参加者も「何か自分ができることで
  プロジェクトに参加できるんだな」と気づくはずです。
</para>

<!--
<para>Don't limit your goals to acquiring new developers and
documentation writers.  For example, even training people to write
good bug reports pays off in the long run, if you don't spend
<emphasis>too</emphasis> much time per person, and if they go on
to submit more bug reports in the future&mdash;which they are more
likely to do if they got a constructive reaction to their first
report.  A constructive reaction need not be a fix for the bug,
although that's always the ideal; it can also be a solicitation for
more information, or even just a confirmation that the behavior
<emphasis>is</emphasis> a bug.  People want to be listened to.
Secondarily, they want their bugs fixed.  You may not always be able
to give them the latter in a timely fashion, but you (or rather, the
project as a whole) can give them the former.</para>
-->
<para>
  目標は、単に新たな開発者やドキュメント作者を確保することだけではありません。
  みんなによりよいバグ報告をしてもらえるように仕向けることは、
  長い目でみれば十分に採算の取れることです。
  ほんの少しの手間で彼らが将来多くのバグ報告をしてくれるようになればすばらしいと思いませんか?
  そのためには、初めてバグを報告してくれた人に対して建設的な反応を返すことが大切です。
  建設的な反応とは、単にバグを修正するということだけではありません
  (もちろんそれが理想ではあります)。
  たとえば、より詳細な情報を提供するよう相手に求めたり、
  あるいはただそれが<emphasis>バグである</emphasis>ということを認めるだけでも建設的な反応といえます。
  人は誰でも、自分の意見に耳を傾けてほしいものです。
  また、バグを報告した人はそのバグが修正されることを望んでいます。
  後者の望みはすぐにはかなえられないこともあるかもしれません。
  しかし、あなた (というか、あなたのプロジェクト)
  が前者の望みをかなえてあげることはできるはずです。
</para>

<!--
<para>A corollary of this is that developers should not express anger
at people who file well-intended but vague bug reports.  This is one
of my personal pet peeves; I see developers do it all the time on
various open source mailing lists, and the harm it does is palpable.
Some hapless newbie will post a useless report:</para>
-->
<para>
  当然のことですが、
  「何か言いたいのはわかるけれども具体的なことがさっぱりわからない」
  ようなバグ報告にたいしても腹をたてたりしてはいけません。
  個人的に、私はこのような態度は気に入りません。
  さまざまなオープンソースのメーリングリスト上で、このような開発者が見られます。
  そして、その害は明白です。
  かわいそうな新入りさんが、次のような無意味な報告を送ってきたとしましょう。
</para>

<blockquote>
<!--
   <para>Hi, I can't get Scanley to run.  Every time I start it up, it
   just errors.  Is anyone else seeing this problem?</para>
-->
   <para>
     Scanley が動かないんだけど。
     起動しようとするとエラーが出るんだ。
     他のみんなは大丈夫なのかな?
   </para>
</blockquote>

<!--
<para>Some developer&mdash;who has seen this kind of report a
thousand times, and hasn't stopped to think that the newbie has
not&mdash;will respond like this:</para>
-->
<para>
  過去にこの類の報告を数限りなく見てきた開発者のなかには、
  こんな答えを返す人がいます。
</para>

<blockquote>
<!--
   <para>What are we supposed to do with so little information?
   Sheesh.  Give us at least some details, like the version of
   Scanley, your operating system, and the error.</para>
-->
   <para>
     ちっ。そんな情報だけでいったいどうしろって言うんだよ。
     もっと詳しい情報を教えてくれないと。
     せめて Scanley のバージョンとか OS
     の種類、あとエラーメッセージくらいは必要だ。
   </para>
</blockquote>

<!--
<para>This developer has failed to see things from the user's point of
view, and also failed to consider the effect such a reaction might
have on all the <emphasis>other</emphasis> people watching the
exchange.  Naturally a user who has no programming experience, and no
prior experience reporting bugs, will not know how to write a bug
report.  What is the right way to handle such a person?  Educate them!
And do it in such a way that they come back for more:</para>
-->
<para>
  こんな答えを返す人は、ユーザーの目線で考えることができていないのでしょう。
  そして、そんな反応が <emphasis>その他の</emphasis>
  人たちにどんなふうに思われるかにも考えが及んでいないのでしょう。
  プログラミングの経験がない人やバグ報告の経験のない人などは、
  正しいバグ報告の方法なんて知らないかもしれません。
  そんな人への対応はどうしたらいいのでしょう?
  教育しちゃえばいいんです!
  どうせするなら、よりよい返事をもらえるようにしてみましょう。
</para>
<blockquote>
<!--
   <para>Sorry you're having trouble.  We'll need more information in
   order to figure out what's happening here.  Please tell us the
   version of Scanley, your operating system, and the exact text of
   the error.  The very best thing you can do is send a transcript
   showing the exact commands you ran, and the output they produced.
   See http://www.scanley.org/how_to_report_a_bug.html for more.</para> 
-->
   <para>
     ご迷惑をおかけして申し訳ありません。
     何が起こったのかを調べるためには
     もう少し詳細な情報が必要です。
     Scanley のバージョンと使用している OS、
     そしてエラーの正確な内容を教えてくれませんか?
     あと、実行したコマンドとその出力結果を正確に教えてもらえると助かります。
     詳細は
     http://www.scanley.org/how_to_report_a_bug.html
     をご覧ください。
   </para> 
</blockquote>

<!--
<para>This way of responding is far more effective at
extracting the needed information from the user, because it is written
to the user's point of view.  First, it expresses sympathy:
<emphasis>You had a problem; we feel your pain</emphasis>.  (This is
not necessary in every bug report response; it depends on the severity
of the problem and how upset the user seemed.)  Second, instead of
belittling her for not knowing how to report a bug, it tells her how,
and in enough detail to be actually useful&mdash;for example, many
users don't realize that "show us the error" means "show us the exact
text of the error, with no omissions or abridgements."  The first time
you work with such a user, you need to be specific about that.
Finally, it offers a pointer to much more detailed and complete
instructions for reporting bugs.  If you have successfully engaged
with the user, she will often take the time to read that document and
do what it says.  This means, of course, that you have to have the
document prepared in advance.  It should give clear instructions about
what kind of information your development team wants to see in every
bug report.  Ideally, it should also evolve over time in response to
the particular sorts of omissions and misreports users tend to make
for your project.</para>
-->
<para>
  必要な情報をユーザーから引き出すには、
  こういった感じの返答のほうがずっと効果的です。
  なぜなら、この返答はユーザーの視点に立って書かれているからです。
  まず 1 点目。この返答では「<emphasis>問題があったんですね。
  お察しします。さぞ大変だったことでしょう</emphasis>」
  と同情の意を表しています
  (バグ報告に対して毎回このようにする必要はありません。
  バグの深刻度、そしてユーザーがどの程度困っているのかに応じて使いわけます)。
  次に 2 点目。バグ報告のお作法を知らないことをバカにするのではなく
  「どうしたらいいのか、どんな情報がほしいのか」といったことを説明しています。
  ごく一般的なユーザーは、「エラーの内容を教えて」と言われても、それが
  「エラーメッセージを正確に教えてください。途中までで切ったり
  変に省略したりしないこと」という意味であるとはわかりません。
  そんなユーザーに対応する場合は、とくに事細かに説明しなければなりません。
  最後に 3 点目。より詳しい、きちんとしたバグ報告をするための方法がわかるよう、
  ポインタを示しています。うまく対応すれば、
  きっとこの報告者はリンク先のドキュメントを読んでその内容を理解してくれるでしょう。
  もちろん、事前にそのためのドキュメントを用意しておかなければなりません。
  そのドキュメントでは、開発チームが
  バグ報告の際にどんな情報を欲しているのかを明確に説明しておくようにします。
  理想を言えば、プロジェクトにおけるユーザーのバグ報告の内容にあわせて
  そのドキュメントを日々改良していくことが大切です。
</para>

<!--
<para>The Subversion project's bug reporting instructions are a fairly
standard example of the form (see <xref
linkend="bug-reporting"/>).  Notice how they close with an
invitation to provide a patch to fix the bug.  This is not because
such an invitation will lead to a greater patch/report
ratio&mdash;most users who are capable of fixing bugs already know
that a patch would be welcome, and don't need to be told.  The
invitation's real purpose is to emphasize to all readers, especially
those new to the project or new to free software in general, that the
project runs on volunteer contributions.  In a sense, the project's
current developers are no more responsible for fixing the bug than is
the person who reported it.  This is an important point that many new
users will not be familiar with.  Once they realize it, they're more
likely to help make the fix happen, if not by contributing code then
by providing a more thorough reproduction recipe, or by offering to
test fixes that other people post.  The goal is to make every user
realize that there is no <emphasis>innate</emphasis> difference
between herself and the people who work on the project&mdash;that
it's a question of how much time and effort one puts in, not a
question of who one is.</para>
-->
<para>
  Subversion プロジェクトにおけるバグ報告の説明は、まさにこの形式のよい例といえます
  (<xref linkend="bug-reporting"/> をご覧ください)。
  最後のほうに、バグを修正するためのパッチの提供を促している箇所があることに注目しましょう。
  そうしたからといって、バグ報告におけるパッチの添付率が上がるわけではありません
  (バグを修正できるくらいのレベルの人なら、
  いちいち言われなくてもパッチが有用であることを知っているはずですから)。
  真の目的は、すべての読者 (特にそのプロジェクトに初めて参加する人たち、
  あるいはフリーソフトウェアの世界に初めて足を踏み入れる人たち)
  に対して「このプロジェクトは多くのボランティアの貢献によって成り立っている」
  ということを示すことです。プロジェクトの開発メンバーだからといって、
  バグ修正に対する責任がバグの報告者より重いということはありません。
  新入りさんにはあまりなじめない考え方でしょうが、これは重要です。
  それをみんなに理解してもらえれば、
  バグ修正のための手助けをより多く得られるようになるでしょう。
  コードが書けない人であっても、バグの再現手順を詳細に説明したり
  だれかのバグ修正の内容を検証したりといった支援は可能です。
  最終的な目標は、みんなに「自分とプロジェクトのコアメンバーの間には
  <emphasis>本質的な</emphasis> 違いはない」ということを理解してもらうことです。
</para>

<!--
<para>The admonition against responding angrily does not apply to rude
users.  Occasionally people post bug reports or complaints that,
regardless of their informational content, show a sneering contempt at
the project for some failing.  Often such people are alternately
insulting and flattering, such as the person who posted this to a
Subversion mailing list:</para>
-->
<para>
  失礼なユーザーに対しては、多少きつく対応しても許されるでしょう。
  たまに、バグ報告や苦情を書く際に
  状況を考えずにプロジェクトをバカにした態度をとる人がいます。
  このような人は、バカにしたかと思えば急にこびへつらってきたり、
  態度をコロコロ変えることがよくあります。かつて Subversion
  のメーリングリストにこんな投稿をした人がいました。
</para>

<blockquote>
<!--
<para>Why is it that after almost 6 days there still aren't any
binaries posted for the windows platform?!?  It's the same story every
time and it's pretty frustrating.  Why aren't these things automated
so that they could be available immediately??  When you post an "RC"
build, I think the idea is that you want users to test the build, but
yet you don't provide any way of doing so.  Why even have a soak
period if you provide no means of testing??</para>
-->
<para>
  6 日もたったのに、いまだに Windows 版のバイナリがないってどういうこと?!?
  毎回こんなことが続くんで、もういらいらしっぱなしだよ。
  そんなの自動化しちゃえばいいだけのことでしょ??
  "RC" 版を出したってことはそれをみんなに使ってほしいんでしょ?
  なのにこんな状態だと使うこともできないじゃないか。
  試しようがないのなら、テスト期間なんて無駄じゃない??
</para>
</blockquote>

<!--
<para>Initial response to this rather inflammatory post was
surprisingly restrained: people pointed out that the project had a
published policy of not providing official binaries, and said, with
varying degrees of annoyance, that he ought to volunteer to produce
them himself if they were so important to him.  Believe it or not, his
next post started with these lines:</para>
-->
<para>
  この煽り気味の投稿に対する返信は、どれも驚くほど落ち着いたものでした。
  このプロジェクトではバイナリ版をリリースしない方針になっていることを指摘し、
  そんなにバイナリが大事なのなら自分でそれを作って提供するべきだと返信したのです。
  驚くなかれ、彼の次の投稿はこんな一文から始まっていました。
</para>

<blockquote>
<!--
<para>First of all, let me say that I think Subversion is awesome and
I really appreciate the efforts of everyone involved.  [...]</para>
-->
<para>
  まず最初に一言。Subversion は最高のツールだし、
  プロジェクトのすべての参加者には本当に感謝してるんだよ。[...]
</para>
</blockquote>

<!--
<para>...and then he went on to berate the project
<emphasis>again</emphasis> for not providing binaries, while
still not volunteering to do anything about it.  After that, about
50 people just jumped all over him, and I can't say I really
minded.  The "zero-tolerance" policy toward rudeness advocated in
<xref linkend="prevent-rudeness"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase> applies to people with
whom the project has (or would like to have) a sustained interaction.
But when someone makes it clear from the start that he is going to
be a fountain of bile, there is no point making him feel welcome.</para>
-->
<para>
  ...といった舌の根も乾かぬうちに、<emphasis>また</emphasis>
  バイナリを提供しないことに対するプロジェクトへの批判を続けたのです。
  彼は自分では何もしようとしませんでした。それに対して、
  50 人ほどが彼を批判する返信をしました。
  私はそれを見ても、とくに気に病むことはありませんでした。
  <phrase output="printed"><xref linkend="getting-started"/></phrase>
  の <xref linkend="prevent-rudeness"/> で説明した、
  失礼な人に対する「ゼロトレランス  (情け容赦なく)」という考え方は、
  そのプロジェクトに対して継続的にかかわり続ける人たちに対するものです。
  しかし、相手がただ単に不満をぶちまけているだけなんだということがわかってしまえば、
  彼に対して気配りをしても無意味です。
</para>

<!--
<para>Such situations are fortunately quite rare, and they are
noticeably rarer in projects that make an effort to engage users
constructively and courteously from their very first
interaction.</para>
-->
<para>
  幸いなことに、こんな状況になることはほとんどありません。
  初心者に対してもより建設的な対応を心がけているプロジェクトでは、
  まずこのようなことはありえないでしょう。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<!-- TODO: to be tlanslated -->
<sect2 id="meeting-in-person">
<title>Meeting In Person (Conferences, Hackfests, Code-a-Thons, Code Sprints, Retreats)</title>

<para><emphasis>24 March 2013: If you're reading this note, then
you've encountered this section while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis></para>

<para>poss2 tbd</para>

<para> <emphasis>Some examples to use: Ubuntu community sprints, Adam
Hyde's flossmanuals doc sprints, and the Danese/Noel-style public
hackathons.  Distinguish between purely dev events and
dev+user+funder+enterprise events&nbsp;&mdash;&nbsp;all are
useful, but don't confuse audiences.</emphasis>
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="share-management">
<!--
<title>Share Management Tasks as Well as Technical Tasks</title>
-->
<title>技術的な作業だけでなく管理作業もみんなで</title>

<!--
<para>Share the management burden as well as the technical burden of
running the project.  As a project becomes more complex, more and more
of the work is about managing people and information flow.  There is
no reason not to share that burden, and sharing it does not
necessarily require a top-down hierarchy either&mdash;what happens in
practice tends to be more of a peer-to-peer network topology than a
military-style command structure.</para>
-->
<para>
  プロジェクトを運営していくにあたっては、
  技術的な作業だけでなく管理作業も大切です。
  プロジェクトが複雑になればなるほど、
  メンバーや情報の流れの管理作業が多くなります。
  管理作業だってみんなで協力してやるようにしましょう。
  別にトップダウンの階層がなくたってそれは可能です。
  実際のところ、行う作業というのは軍隊式の命令系統ではなく
  ピアツーピアのネットワークトポロジーに近いものだからです。
</para>

<!--
<para>Sometimes management roles are formalized, and sometimes they
happen spontaneously.  In the Subversion project, we have a patch
manager, a translation manager, documentation managers, issue managers
(albeit unofficial), and a release manager.  Some of these roles we
made a conscious decision to initiate, others just happened by
themselves; as the project grows, I expect more roles to be added.
Below we'll examine these roles, and a couple of others, in detail
(except for release manager, which was already covered in
<xref linkend="release-manager"/> and
<xref linkend="release-owner"/><phrase output="printed"> earlier
in this chapter</phrase>).</para>
-->
<para>
  「○○管理者」を正式に任命することもあれば、
  その場のノリで決めてしまうこともあります。
  Subversion プロジェクトには、「パッチマネージャー」
  「翻訳マネージャー」「ドキュメントマネージャー」
  「バグマネージャー (非公式ですが)」そして
  「リリースマネージャー」がいます。
  これらの中には意識して任命したものもあれば、
  勝手に立候補してくれたものもあります。
  プロジェクトが成長するにつれて、
  さらにいろいろな役割が追加されることになるでしょう。
  以下で、これらの役割 (に加えてさらにいくつかのもの)
  についての詳細を説明します (リリースマネージャーについては省略します。
  すでに <phrase output="printed">本章の前半の</phrase>
  <xref linkend="release-manager"/> や
  <xref linkend="release-owner"/> で取り上げているからです)。
</para>

<!--
<para>As you read the role descriptions, notice that none of them
requires exclusive control over the domain in question.  The issue
manager does not prevent other people from making changes in the
issues database, the FAQ manager does not insist on being the only
person to edit the FAQ, and so on.  These roles are all about
responsibility without monopoly.  An important part of each domain
manager's job is to notice when other people are working in that domain,
and train them to do the things the way the manager does, so that the
multiple efforts reinforce rather than conflict.  Domain managers
should also document the processes by which they do their work, so
that when one leaves, someone else can pick up the slack right
away.</para>
-->
<para>
  以下の説明を読むにあたっては、
  これらの役割の担当範囲がが決してお互いに排他的なものではないことに注意しましょう。
  たとえば問題マネージャーでなくても問題データベースを変更することがあるでしょうし、
  FAQ の編集権を FAQ マネージャーに独占させてしまうこともありません。
  これらの役割というのはあくまでも責任の範囲に関するものであり、
  独占させるためのものではありません。
  各マネージャーの仕事で重要なのは、
  「誰かが自分の担当分野の作業をしていることに気づいたら、
  その人がうまくやっていけるように自分の方針を伝える。
  そして、みんなの作業が競合しないようにする」
  ということです。マネージャーは、自分の担当分野の作業手順書を作成しなければなりません。
  そうすれば、何らかの理由でマネージャーが作業をできなくなったとしても
  誰かがすぐに後を引き継ぐことができます。
</para>

<!--
<para>Sometimes there is a conflict: two or more people want the same
role.  There is no one right way to handle this.  You could suggest
that each volunteer post a proposal (an "application") and have all
the committers vote on which is best.  But this is cumbersome and
potentially awkward.  I find that a better technique is just to ask the
multiple candidates to settle it among themselves.  They usually will,
and will be more satisfied with the result than if a decision had been
imposed on them from the outside.</para>
-->
<para>
  特定の役割を希望する人が複数あらわれることもあります。
  このような場合にそれをうまく処理する方法には「これが正解!」というものはありません。
  たとえば、希望者に所信表明を出してもらい、
  それをもとにコミッターによる投票を行うという手もあります。
  しかしこれは面倒ですし、後に尾を引いてしまう可能性があります。
  それよりは、希望者たちがお互いに話し合って決めてもらうほうがいいでしょう。
  そうすれば、結果がどうであれ、
  他人に決められてしまうよりは満足のいくものになるはずです。
</para>

<sect2 id="patch-manager">
<!--
<title>Patch Manager</title>
-->
<title>パッチマネージャー</title>

<!--
<para>In a free software project that receives a lot of patches,
keeping track of which patches have arrived and what has been decided
about them can be a nightmare, especially if done in a decentralized
way.  Most patches arrive as posts to the project's development
mailing list (though some may appear first in the issue tracker, or on
external web sites), and there are a number of different routes a
patch can take after arrival.</para>
-->
<para>
  パッチがたくさん送られてくるフリーソフトウェアプロジェクトでは、
  「どんなパッチが投稿されたのか」「そのパッチをどう処理することにしたのか」
  といった情報を追いかけるのは大変です。
  中央管理体制でない場合などは特にそうでしょう。
  大半のパッチはそのプロジェクトの開発者向けメーリングリストに投稿されます
  (中にはバグ追跡システムに投稿したり
  外部のウェブサイトで公開したりといったものもあります)。
  そしてそのパッチをどのように処理するかについては何通りものパターンがあります。
</para>

<!--
<para>Sometimes someone reviews the patch, finds problems, and bounces
it back to the original author for cleanup.  This usually leads to an
iterative process&mdash;all visible on the mailing list&mdash;in which
the original author posts revised versions of the patch until the
reviewer has nothing more to criticize.  It is not always easy to tell
when this process is done: if the reviewer commits the patch, then
clearly the cycle is complete.  But if she does not, it might be
because she simply didn't have time, or doesn't have commit access
herself and couldn't rope any of the other developers into doing
it.</para>
-->
<para>
  時には、パッチをレビューした結果何か問題が見つかり、
  元の投稿者に差し戻しとなることもあります。
  このようなやり取りは、通常は何度か (メーリングリスト上で)
  繰り返されることになります。元の投稿者がパッチを何度か書き直し、
  レビューする側が何も文句のつけようがなくなるまでこれが続きます。
  この繰り返しがいつ完了するのかがはっきりわかるとは限りません。
  もしレビューした人がパッチをコミットすれば
  「これで完了」とはっきりわかるのですが、そうでない場合はいろいろな理由が考えられます。
  「コミットする時間がないだけ」「そもそもその人にコミット権がなく、
  他の開発者にコミットを依頼できていない」などの理由があるでしょう。
</para>

<!--
<para>Another frequent response to a patch is a freewheeling
discussion, not necessarily about the patch itself, but about whether
the concept behind the patch is good.  For example, the patch may fix
a bug, but the project prefers to fix that bug in another way, as part
of solving a more general class of problems.  Often this is not known
in advance, and it is the patch that stimulates the discovery.</para>
-->
<para>
  パッチに対する反応としてよくあるもうひとつのパターンは、
  そのパッチをネタにして議論が紛糾することです。
  議論の内容はパッチそのものである必要はなく、
  そのパッチの背景にある考え方のよしあしについてが話題になることもあります。
  たとえば、ある特定のバグを修正するパッチが投稿されたとしましょう。
  しかし、開発者側ではもっと別の修正方法のほうがよいと考えている
  (問題をより一般化して、もっと広い範囲を修正することを考えているなど)
  ということがあります。開発者側の考える修正方法は、
  何も以前から頭にあったものであるとは限りません。
  投稿されたパッチを見ることで、別の修正方法をひらめくということもあります。
</para>

<!--
<para>Occasionally, a posted patch is met with utter silence.  Usually
this is due to no developer having time <emphasis>at that
moment</emphasis> to review the patch, so each hopes that someone else
will do it.  Since there's no particular limit to how long each person
waits for someone else to pick up the ball, and meanwhile other
priorities are always coming up, it's very easy for a patch to slip
through the cracks without any single person intending for that to
happen.  The project might miss out on a useful patch this way, and
there are other harmful side effects as well: it is discouraging to
the author, who invested work in the patch, and it makes the project
as a whole look a bit out of touch, especially to others considering
writing patches.</para>
-->
<para>
  たまに、投稿したパッチが完全にスルーされてしまうことがあります。
  これは、<emphasis>たまたま</emphasis>
  そのときにパッチをレビューする暇のある開発者がいなかっただけ
  (みんな、誰か他の人がみてくれるだろうと思っていただけ)
  ということが多いようです。「誰かが相手をするのを待つ」
  のに時間の制限はありませんし、それ以外にも重要な作業はいくらでもあります。
  かくしてそのパッチは誰の目にとまることもなくやみに葬り去られていきます。
  せっかくの有用なパッチがこんなことで見過ごされてしまう可能性があるわけです。
  それだけでなく、さらに悪い副作用もあります。せっかく時間を割いてくれた
  パッチ作者のやる気をそいでしまうということです。
  さらに「パッチのひとつでも書いてやろうか」
  と考えているその他の人たちにとっても、
  そのプロジェクトが魅力あるものには見えなくなるでしょう。
</para>

<!--
<para>The patch manager's job is to make sure that patches don't "slip
through the cracks."  This is done by following every patch through to
some sort of stable state.  The patch manager watches every mailing
list thread that results from a patch posting.  If it ends in a commit
of the patch, he does nothing.  If it goes into a review/revise
iteration, ending with a final version of the patch but no commit, he
files an issue pointing to the final version, and to the mailing list
thread around it, so that there is a permanent record for developers
to follow up on later.  If the patch addresses an existing issue, he
annotates that issue with the relevant information, instead of opening
a new issue.</para>
-->
<para>
  パッチマネージャーの役割は、この手の「闇に葬り去られてしまう」
  パッチをなくすことです。そのために、
  次のような手順ですべてのパッチを安定した状態にします。
  パッチマネージャーはすべてのメーリングリストのスレッドを監視し、
  パッチを含む投稿を拾い出します。
  最終的にそのパッチがコミットされているのなら特に何もすることはありません。
  レビューと修正を繰り返した結果、最終版のパッチがまだコミットされていないという場合は、
  最終版のパッチ (とメーリングリストでの議論) を問題追跡システムに投稿します。
  そうすれば、開発者が後でその記録を追うのが容易になります。
  もしそのパッチが特定の問題を修正するためのものなら、
  問題追跡システム上に登録されているその問題のコメントとしてパッチの情報を加えます。
  この場合は、新たな問題として投稿することはありません。
</para>

<!--
<para>When a patch gets no reaction at all, the patch manager waits a
few days, then follows up asking if anyone is going to review it.
This usually gets a reaction: a developer may explain that she doesn't
think the patch should be applied, and give the reasons why, or she may
review it, in which case one of the previously described paths is
taken.  If there is still no response, the patch manager may or may
not file an issue for the patch, at his discretion, but at
least the original submitter got <emphasis>some</emphasis>
reaction.</para>
-->
<para>
  パッチに対する反応が何もないまま数日が経過した場合は、
  パッチマネージャーが「誰かレビューする人はいませんか?」とフォローします。
  そうすれば、普通は何らかの反応があります。
  「そのパッチは適用する価値があるとは思えない。なぜなら……」
  とか「じゃあ私がレビューしましょうか?」などです。
  反応があった場合は、先ほど説明したような手順で処理していきます。
  それでも誰も反応しなかった場合は、
  そのパッチを問題追跡システムに登録するかどうかは
  パッチマネージャーの判断で決めます。しかし、
  少なくともパッチの投稿者に対しては <emphasis>何らかの</emphasis>
  反応を返すようにしましょう。
</para>

<!--
<para>Having a patch manager has saved the Subversion development team
a lot of time and mental energy.  Without a designated person to take
responsibility, every developer would constantly have to worry "If I
don't have time to respond to this patch right now, can I count on
someone else doing it?  Should I try to keep an eye on it?  But if
other people are also keeping an eye on it, for the same reasons, then
we'd have needlessly duplicated effort."  The patch manager removes
the second-guessing from the situation.  Each developer can make the
decision that is right for her at the moment she first sees the patch.
If she wants to follow up with a review, she can do that&mdash;the
patch manager will adjust his behavior accordingly.  If she wants to
ignore the patch completely, that's fine too; the patch manager will
make sure it isn't forgotten.</para>
-->
<para>
  パッチマネージャーを任命したおかげで、
  Subversion の開発チームは時間と気力を大幅に節約することができました。
  専任の担当者がいなければ、開発者みんなが
  「今すぐには返事できそうにないけれど、誰か他の人が反応してくれるのかなあ?
  それとも私が後で対応したほうがいいのかな?
  でも、もし誰か他の人も同じように考えているのなら時間の無駄だなあ」
  と常に心配するはめになっていたでしょう。
  パッチマネージャーのおかげで、このような裏読みをすることはなくなりました。
  各開発者は、パッチを見たときの状況に応じてどう処理するかを決めることができます。
  もしそれをレビューしたいのならそうします。
  マッチマネージャーが適切にフォローしてくれるでしょう。
  もしそのパッチを完全に無視したいのならそれも結構。
  あなたが見なかったとしても、
  パッチマネージャーがそのパッチをきちんと扱ってくれます。
</para>

<!--
<para>Because this system works only if people can depend on the patch
manager being there without fail, the role should be held formally.
In Subversion, we advertised for it on the development and users
mailing lists, got several volunteers, and took the first one who
replied.  When that person had to step down (see
<xref linkend="transitions"/><phrase output="printed"> later in
this chapter</phrase>), we did the same thing again.
We've never tried having multiple people share the role, because of
the communications overhead that would be required between them; but
perhaps at very high volumes of patch submission, a multiheaded patch
manager might make sense.</para>
-->
<para>
  この仕組みがうまく動作するのは、
  パッチマネージャーがきちんと処理してくれるとみんなが信頼できるときだけです。
  つまり、この役割の担当者はノリで決めるのではなく正式な手続きを踏んで決める必要があります。
  Subversion プロジェクトの場合は、まず開発者向けメーリングリストと
  ユーザー向けメーリングリストで告知を行いました。
  何人かが立候補してくれましたが、最初に返事をくれた人を担当者として任命しました。
  後にその人が担当を降りたとき (<phrase output="printed">本章の後半の</phrase>
  <xref linkend="transitions"/> をご覧ください)
  にも、同じ手順を繰り返しました。
  同時に複数名を任命することは決してしませんでした。
  なぜなら、そうすると担当者間のコミュニケーションの手間がかかるからです。
  しかし、パッチの量があまりにも多い場合には
  複数担当者制を敷くのもよいでしょう。
</para>

</sect2>

<sect2 id="translation-manager">
<!--
<title>Translation Manager</title>
-->
<title>翻訳マネージャー</title>

<!--
<para>In software projects, "translation" can refer to two very
different things.  It can mean translating the software's
documentation into other languages, or it can mean translating the
software itself&mdash;that is, having the program display errors and
help messages in the user's preferred language.  Both are complex
tasks, but once the right infrastructure is in place, they are largely
separable from other development.  Because the tasks are similar in
some ways, it may make sense (depending on your project) to have a
single translation manager handle both, or it may be better to have
two different managers.</para>
-->
<para>
  ソフトウェアプロジェクトにおける "翻訳"
  には、ふたつの異なる意味合いがあります。
  ソフトウェアのドキュメントを翻訳することと、ソフトウェアそのものを翻訳する
  (エラー表示やヘルプメッセージをユーザーの好きな言語で表示できるようにする)
  ことです。どちらも複雑な作業ですが、いったん仕組みを確立してしまえば
  これは他の開発とは分けて行うことができます。
  どちらの翻訳もやることはほぼ同じなので、(プロジェクトによっては)
  両方の作業を一人の翻訳マネージャーが管理してもいいでしょう。
  あるいはそれぞれ別の人に管理させてもいいでしょう。
</para>

<!--
<para>In the Subversion project, we have one translation manager
handle both.  He does not actually write the translations himself, of
course&mdash;he may help out on one or two, but as of this writing, he
would need to speak ten languages (twelve counting dialects) in order
to work on all of them!  Instead, he manages teams of volunteer
translators: he helps them coordinate among each other, and he
coordinates between the teams and the rest of the project.</para>
-->
<para>
  Subversion プロジェクトでは、一人の翻訳マネージャーに両方を管理させています。
  もちろん彼が実際に自分で翻訳を行うわけではありません。
  ひとつやふたつの言語については作業できるかもしれませんが、
  もしすべての翻訳を自分でしようとすると、現時点で彼は
  10か国語 (方言も考慮すると12か国語) を操れなければなりません!
  それは無理なので、彼はボランティアの翻訳者のチームを管理しています。
  彼の仕事は翻訳者たちがお互いに協力し合えるように支援することであり、
  翻訳チームがプロジェクトの他のメンバーとうまくやっていけるようにすることです。
</para>

<!--
<para>Part of the reason the translation manager is necessary is that
translators are a different demographic from developers.  They
sometimes have little or no experience working in a version control
repository, or indeed with working as part of a distributed volunteer
team at all.  But in other respects they are often the best kind of
volunteer: people with specific domain knowledge who saw a need and
chose to get involved.  They are usually willing to learn, and
enthusiastic to get to work.  All they need is someone to tell them
how.  The translation manager makes sure that the translations happen
in a way that does not interfere unnecessarily with regular
development.  He also serves as a sort of representative of the
translators as a unified body, whenever the developers must be
informed of technical changes required to support the translation
effort.</para>
-->
<para>
  翻訳マネージャーが必要となる理由のひとつに、
  翻訳者たちは一般的な開発者とは少し異なるという点があります。
  彼らの中にはバージョン管理システムの使用経験が浅い人もいるでしょうし、
  ボランティアのチームの一員として働いたことのない人がいる可能性もあります。
  しかし、それを別にすれば、彼らはボランティアとして最高の人たちであるともいえます。
  特定の分野に関する知識を持っており、
  それを生かしてプロジェクトに協力してくれているわけです。
  彼らは、作業をするためならよろこんで勉強してくれるでしょう。
  彼らに必要なのは、どうすればいいのかを教えてあげる人です。
  翻訳マネージャーは、翻訳作業が通常の開発を不要に妨げないように注意します。
  また、翻訳者全体の代表として働くこともあります。
  翻訳作業に影響を与えるような変更を開発者が行った場合に、
  それを翻訳者たちに伝えるのがその役目です。
</para>

<!--
<para>Thus, the position's most important skills are diplomatic, not
technical.  For example, in Subversion we have a policy that all
translations should have at least two people working on them, because
otherwise there is no way for the text to be reviewed.  When a new
volunteer shows up offering to translate Subversion to, say, Malagasy,
the translation manager has to either hook him up with someone who
posted six months ago expressing interest in doing a Malagasy
translation, or else politely ask the volunteer to go
find <emphasis>another</emphasis> Malagasy translator to work with as
a partner.  Once enough people are available, the manager sets them up
with the proper kind of commit access, informs them of the project's
conventions (such as how to write log messages), and then keeps an eye
out to make sure they adhere to those conventions.</para>
-->
<para>
  したがって、翻訳マネージャーにとって一番大切なのは
  技術的な能力ではなく外交力になります。
  たとえば Subversion プロジェクトの場合、
  各国語の翻訳は少なくとも 2 人以上で行うことという決まりを設けました。
  そうしないと、翻訳をレビューすることができないからです。
  たとえば、Subversion をマラガシ語に翻訳したいという人があらわれたとしましょう。
  翻訳マネージャーは、6 か月前に同じことを申し出てきた別の人とペアを組ませて翻訳を任せるか、
  あるいは「だれかもうひとりマラガシ語のわかる人を連れてきて、
  ふたりで作業をしてほしい」とお願いしなければなりません。
  人が集まったら、マネージャーは彼らに適切なコミット権を与え、
  プロジェクト内の決まり事 (コミットメッセージの書き方など)
  を説明したうえで彼らの作業を見守ります。
</para>

<!--
<para>Conversations between the translation manager and the
developers, or between the translation manager and translation teams,
are usually held in the project's original language&mdash;that is, the
language from which all the translations are being made.  For most
free software projects, this is English, but it doesn't matter what it
is as long as the project agrees on it.  (English is probably best for
projects that want to attract a broad international development
community, though.)</para>
-->
<para>
  翻訳マネージャーと開発者とのやりとり、
  あるいは翻訳マネージャーと各翻訳チームとのやりとりは、
  通常はそのプロジェクトが元々使用している言語で行います。
  つまり、翻訳の元となる言語ということです。
  ほとんどのフリーソフトウェアプロジェクトでは、これは英語となるでしょう。
  しかし、プロジェクトの事情によってそれ以外の言語となることがあってもかまいません
  (とはいえ、そのプロジェクトを世界に広めたいのなら、
  英語を使うのが一番よいでしょう)。
</para>

<!--
<para>Conversations <emphasis>within</emphasis> a particular
translation team usually happen in their shared language, however, and
one of the other tasks of the translation manager is to set up a
dedicated mailing list for each team.  That way the translators can
discuss their work freely, without distracting people on the project's
main lists, most of whom would not be able to understand the
translation language anyway.</para>
-->
<para>
  しかし、個々の翻訳チーム内でのやりとりは
  彼らの言語で行うことになるでしょう。
  翻訳マネージャーの仕事のひとつは、
  個々の翻訳チーム用に専用のメーリングリストを用意することです。
  そうすれば、翻訳に関する議論を
  プロジェクト本体のメーリングリストのじゃまをせずに行うことができます。
  本体のメーリングリストで翻訳の議論をしても、
  ほとんどの人はその言語を理解できないでしょうから。
</para>

  <sidebar id="i7n">
<!--
  <title>Internationalization Versus Localization</title>
-->
  <title>国際化 (Internationalization) と地域化 (Localization)</title>
  
<!--
  <para><firstterm>Internationalization</firstterm>
  (<firstterm>I18N</firstterm>) and <firstterm>localization</firstterm>
  (<firstterm>L10N</firstterm>) both refer to the process of adapting
  a program to work in linguistic and cultural environments other than
  the one for which it was originally written.  The terms are often
  treated as interchangeable, but in fact they are not quite the same
  thing.  As <ulink url="http://en.wikipedia.org/wiki/G11n"/>
  writes:</para>
-->
  <para>
    <firstterm>国際化</firstterm>
    (<firstterm>I18N</firstterm>) と <firstterm>地域化</firstterm>
    (<firstterm>L10N</firstterm>) はどちらも、
    元々の言語や文化以外の環境でプログラムを動作させるための手続きのことを指します。
    これらの用語はよく混同されることがありますが、
    正確には異なるものです。
    <ulink url="http://en.wikipedia.org/wiki/G11n"/> によると、
    その違いは次のようになります。
  </para>

  <blockquote>
<!--
     <para>The distinction between them is subtle but important:
     Internationalization is the adaptation of products
     for <emphasis>potential</emphasis> use virtually everywhere, while
     localization is the addition of special features for use in
     a <emphasis>specific</emphasis> locale.</para>
-->
     <para>
       The distinction between them is subtle but important:
       Internationalization is the adaptation of products
       for <emphasis>potential</emphasis> use virtually everywhere, while
       localization is the addition of special features for use in
       a <emphasis>specific</emphasis> locale.
     </para>
     <para>
       (これらの違いは、些細なことではありますが重要です。
       国際化とは、その製品を事実上どの国でも使えるようにすることですが、
       地域化とは特定の機能を <emphasis>特定の</emphasis>
       ロケールで使えるようにすることを意味します)。
     </para>
  </blockquote>

<!--
  <para>For example, changing your software to losslessly handle
  Unicode (<ulink url="http://en.wikipedia.org/wiki/Unicode"/>) text
  encodings is an internationalization move, since it's not about a
  particular language, but rather about accepting text from any of a
  number of languages.  On the other hand, making your software print
  all error messages in Slovenian, when it detects that it is running
  in a Slovenian environment, is a localization move.</para>
-->
  <para>
    たとえば、あなたのソフトウェアで
    Unicode (<ulink url="http://ja.wikipedia.org/wiki/Unicode"/>)
    テキストエンコーディングを扱えるようにすることは「国際化」にあたります。
    これは特定の言語に関係するものではなく、
    多国語のテキストを扱えるようにするものだからです。
    一方「スロベニア語の環境で動かしたときは
    すべてのエラーメッセージをスロベニア語で表示させるようにする」
    という変更は「地域化」にあたります。
  </para>

<!--
  <para>Thus, the translation manager's task is principally about
  localization, not internationalization.</para>
-->
  <para>
    したがって、翻訳マネージャーの作業は主に地域化にかかわるものであり、
    国際化に関するものではありません。
  </para>
  
  </sidebar>

</sect2>

<sect2 id="documentation-manager">
<!--
<title>Documentation Manager</title>
-->
<title>ドキュメントマネージャー</title>

<!--
<para>Keeping software documentation up-to-date is a never-ending
task.  Every new feature or enhancement that goes into the code has
the potential to cause a change in the documentation.  Also, once the
project's documentation reaches a certain level of completeness, you
will find that a lot of the patches people send in are for the
documentation, not for the code.  This is because there are many more
people competent to fix bugs in prose than in code: all users are
readers, but only a few are programmers.</para>
-->
<para>
  ソフトウェアのドキュメントを最新の状態に保つというのは、果てしなく続く作業です。
  コードに新機能や拡張機能が追加されたら、
  ドキュメントにもそれを反映させなければなりません。
  また、そのプロジェクトのドキュメントがある一定のレベルに達したら、
  コード自体へのパッチだけでなくドキュメントへのパッチも送られてくるようになるでしょう。
  「コードのバグを修正することはできないけれど、
  ドキュメントの間違いなら直せる」という人はたくさんいます。
  ドキュメントはすべてのユーザーが読めますが、
  実際にプログラムが書けるユーザーはその一部だけだからです。
</para>

<!--
<para>Documentation patches are usually much easier to review and
apply than code patches.  There is little or no testing to be done,
and the quality of the change can be evaluated quickly just by review.
Since the quantity is high, but the review burden fairly low, the
ratio of administrative overhead to productive work is greater for
documentation patches than for code patches.  Furthermore, most of the
patches will probably need some sort of adjustment, in order to
maintain a consistent authorial voice in the documentation.  In many
cases, patches will overlap with or affect other patches, and need to
be adjusted with respect to each other before being committed.</para>
-->
<para>
  ドキュメントへのパッチは、コードへのパッチに比べて
  レビューして適用するのが容易です。
  テストの必要はほとんどありませんし、
  変更内容もざっと見ればわかります。
  パッチの数は多いけれどそのレビューの手間は少ないということもあり、
  管理作業と実際の生産的な作業の割合は
  コードのパッチよりドキュメントのパッチのほうが高くなるでしょう。
  さらに、もとの作者の書き方との一貫性を保つためには
  ほとんどのパッチに対して多少の調整が必要となることでしょう。
  多くの場合、ひとつのパッチが他のパッチに影響を及ぼしたり
  他のパッチと内容が重複していたりします。
  お互いのパッチの内容を尊重してそれらを調整してからコミットしなければなりません。
</para>

<!--
<para>Given the exigencies of handling documentation patches, and the
fact that the code base needs to be constantly monitored so the
documentation can be kept up-to-date, it makes sense to have one
person, or a small team, dedicated to the task.  They can keep a
record of exactly where and how the documentation lags behind the
software, and they can have practiced procedures for handling large
quantities of patches in an integrated way.</para>
-->
<para>
  ドキュメントのパッチは緊急に処理しなければならないこと、
  そしてドキュメントを最新に保つには
  ソースコードの変更内容を逐次監視する必要があることなどを考えると、
  ドキュメント専任の担当者を何名かおいたほうがいいでしょう。
  彼らの作業は、ソフトウェアのどこがどう変わったのかを正確にドキュメントに反映させること。
  そして彼らに必要なのは、大量のパッチを効率よくさばく能力です。
</para>

<!--
<para>Of course, this does not preclude other people in the project
from applying documentation patches on the fly, especially small ones,
as time permits.  And the same patch manager (see
<xref linkend="patch-manager"/><phrase output="printed"> earlier
in this chapter</phrase>) can track both code and
documentation patches, filing them wherever the development and
documentation teams want them, respectively.  (If the total quantity of
patches ever exceeds one human's capacity to track, though, switching
to separate patch managers for code and documentation is probably a
good first step.)  The point of a documentation team is to have people
who think of themselves as responsible for keeping the documentation
organized, up-to-date, and consistent with itself.  In practice, this
means knowing the documentation intimately, watching the code base,
watching the changes
<emphasis>others</emphasis> commit to the documentation, watching for
incoming documentation patches, and using all these information
sources to do whatever is necessary to keep the documentation
healthy.</para>
-->
<para>
  もちろん、そうしたからといってプロジェクトの他のメンバーが
  ドキュメントのパッチを適用できなくなるというわけではありません。
  ちょっとしたパッチなら、他のメンバーがその場でコミットしてしまってもかまわないでしょう。
  パッチマネージャー (<phrase output="printed">さきほどの</phrase>
  <xref linkend="patch-manager"/> を参照ください)
  はコードとドキュメントのパッチを把握しているので、
  開発チームとドキュメントチームの両方に対して適切な情報を提供してくれます
  (とはいえ、もしパッチの量が多くなりすぎて 1 人では管理しきれなくなっと場合などは、
  まずはコードのパッチの担当者とドキュメントのパッチの担当者を分けることになるでしょう)。
  ドキュメントチームのポイントは、各メンバーが
  「ドキュメントをきちんとまとめて最新の状態に保ち、一貫性のあるものにする」
  という役割を自覚することです。実際の作業としては、
  ドキュメントの構成を熟知したうえでソースコードの変更点を追跡し、
  また <emphasis>別の人</emphasis> によるドキュメントへのコミットや
  ドキュメントに対するパッチをチェックして、しかるべき対応をすることなどがあります。
</para>

</sect2>

<sect2 id="issue-manager">
<!--
<title>Issue Manager</title>
-->
<title>バグマネージャー</title>

<!--
<para>The number of issues in a project's bug tracker grows in
proportion to the number of people using the software.  Therefore,
even as you fix bugs and ship an increasingly robust program, you
should still expect the number of open issues to grow essentially
without bound.  The frequency of duplicate issues will also increase,
as will the frequency of incomplete or poorly described issues.</para>
-->
<para>
  プロジェクトのバグ追跡システムに投稿される問題の数は、
  そのソフトウェアを使う人の数に比例して増えていきます。
  したがって、いくらバグを修正して安全なプログラムを公開するようにしても、
  未対応の問題の数は際限なく増えていくことを覚悟しなければなりません。
  同じ問題が何度も投稿されることも多くなるでしょうし、
  何が言いたいのかさっぱりわからないバグ報告も増えてくるでしょう。
</para>

<!--
<para>Issue managers help alleviate these problems by watching what
goes into the database, and periodically sweeping through it looking
for specific problems.  Their most common action is probably to fix up
incoming issues, either because the reporter didn't set some of the
form fields correctly, or because the issue is a duplicate of one
already in the database.  Obviously, the more familiar an issue
manager is with the project's bug database, the more efficiently she
will be able to detect duplicate issues&mdash;this is one of the main
advantages of having a few people specialize in the bug database,
instead of everyone trying to do it <foreignphrase>ad
hoc</foreignphrase>.  When the group tries to do it in a decentralized
manner, no single individual acquires a deep expertise in the content
of the database.</para>
-->
<para>
  バグマネージャーの役割は、これらの問題を軽減するために
  バグデータベースを常に監視し、定期的に整理整頓することです。
  主な作業は、バグ報告の内容を補足することです。
  バグ報告の中には、いくつかの項目が正しく埋められていないものもあれば
  既存のバグと同じ内容を報告しているようなものもあるからです。
  担当者がバグデータベースの内容に精通していればいるほど、
  既存のバグと重複しているバグ報告を見つけやすくなります。
  これが、バグ報告の対応に専任の担当者を割り当てる利点のひとつとなります。
  全員が臨機応変に対応するより、そのほうが効率的だからです。
  バグ対応を一元管理せずに分散管理しようとすると、
  結局誰一人としてバグデータベースの内容に精通した人がいなくなってしまいます。
</para>

<!--
<para>Issue managers can also help map between issues and individual
developers.  When there are a lot of bug reports coming in, not every
developer may read the issue notification mailing list with equal
attention.  However, if someone who knows the development team is
keeping an eye on all incoming issues, then she can discreetly direct
certain developers' attention to specific bugs when appropriate.  Of
course, this has to be done with a sensitivity to everything else
going on in development, and to the recipient's desires and
temperament.  Therefore, it is often best for issue managers to be
developers themselves.</para>
-->
<para>
  バグマネージャーは、個々のバグ報告に対して
  個別の開発者を割り当てる作業も手伝います。
  大量のバグ報告が飛び交うようになると、
  中にはバグ報告の通知用メーリングリストをチェックするのが
  おっくうになる開発者も出てくるでしょう。
  開発チームの誰かがすべての報告にきちんと目を通しておくことにすれば、
  そんな場合でも適切な担当者にきちんとバグ対応をお願いすることができるでしょう。
  もちろん、この作業は開発の妨げにならないよう注意して行う必要があります。
  対応をお願いする相手の状況を考慮することも大切です。
  これらのことを考えると、
  バグマネージャーは開発者チームの中から任命するとよいでしょう。
</para>

<!--
<para>Depending on how your project uses the issue tracker, issue
managers can also shape the database to reflect the project's
priorities.  For example, in Subversion we schedule issues into
specific future releases, so that when someone asks "When will bug X
be fixed?" we can say "Two releases from now," even if we can't give
an exact date.  The releases are represented in the issue tracker as
target milestones, a field available in
IssueZilla.<footnote><para>IssueZilla is the issue tracker we use; it
is a descendant of BugZilla.</para></footnote> As a rule, every
Subversion release has one major new feature and a list of specific
bug fixes.  We assign the appropriate target milestone to all the
issues planned for that release (including the new feature&mdash;it
gets an issue too), so that people can view the bug database through
the lens of release scheduling.  These targets rarely remain static,
however.  As new bugs come in, priorities sometimes get shifted
around, and issues must be moved from one milestone to another so that
each release remains manageable.  This, again, is best done by people
who have an overall sense of what's in the database, and how various
issues relate to each other.</para>
-->
<para>
  そのプロジェクトでバグ追跡システムをどのように利用するのかにもよりますが、
  プロジェクト内の優先順位に応じて
  バグデータベースを調整する役割もバグマネージャーにはあります。
  たとえば Subversion プロジェクトでは、
  各バグ報告に対して「将来のどのリリースで対応するか」を設定します。
  そうすれば、誰かに「あのバグはいつ修正されるの？」と聞かれたときに
  正確な日付がわからなくても「次の次のリリースで対応します」と答えることができます。
  この「リリース」は、バグ追跡システム上では「ターゲットマイルストーン」
  という項目で管理します。IssueZilla
  <footnote>
    <para>
      IssueZilla は私たちが使用しているバグ追跡システムで、
      BugZilla の後継にあたるものです。
    </para>
  </footnote>
  にはこの項目が存在します。Subversion プロジェクトのルールとして、
  各リリースにはひとつの大きな新機能追加といくつかのバグ修正を含めることにしています。
  将来のリリースに向けた各バグ報告 (新機能も含みます。
  新機能も同じデータベースで管理しています) に対して適切な
  ターゲットマイルストーンを設定しておくことで、
  それを見れば今後のリリースの予定がわかるようにしています。
  しかし、一度設定したターゲットマイルストーンがずっとそのままでいることは
  めったにありません。新しいバグが飛び込んでくると、
  作業の優先順位が変わることもあるでしょう。
  そんな場合は既存のバグのマイルストーンを移動させないと
  リリース計画を管理できなくなります。
  こういった作業をおこなうには、やはり特定の担当者を割り当てて
  バグデータベース全体の状況と各報告の内容を把握させておくことが大切です。
</para>

<!--
<para>Another thing issue managers do is notice when issues become
obsolete.  Sometimes a bug is fixed accidentally as part of an
unrelated change to the software, or sometimes the project changes its
mind about whether a certain behavior is buggy.  Finding obsoleted
issues is not easy: the only way to do it systematically is by making
a sweep over all the issues in the database.  Full sweeps become less
and less feasible over time, however, as the number of issues grows.
After a certain point, the only way to keep the database sane is to use a
divide-and-conquer approach: categorize issues immediately on arrival
and direct them to the appropriate developer's or team's attention.
The recipient then takes charge of the issue for the rest of its
lifetime, shepherding it to resolution or oblivion as necessary.  When
the database is that large, the issue manager becomes more of an
overall coordinator, spending less time looking at each issue herself
and more time getting it into the right person's hands.</para>
-->
<para>
  バグマネージャーのもうひとつの役割は、
  バグ報告の内容が現状に即していないものになった場合の対応です。
  全然関係ない別の変更の結果、偶然にバグがなおってしまうこともあります。
  あるいは、最初はバグとして対処しようとしていたけれど
  結局それは仕様ということにしてしまうという場合もあります。
  現状に即していないバグ報告を見つけるのは大変な手間のかかる作業です。
  機械的にやるとするなら、データベース内のすべてのバグをチェックしなければなりません。
  しかし、時を経て報告の量が増えてくればくるほど、
  総チェックいうのは現実的ではなくなります。
  ある程度の段階になると、データベースをまともな状態に保つ唯一の方法は
  「分割して統治」ということになるでしょう。
  バグ報告をカテゴリ分けし、それぞれを適切な開発者 (あるいはチーム)
  に振り分けるのです。その後の対応はすべて振り分けられた側が責任を持つことにします。
  これほどデータベースが巨大化すると、バグマネージャーは
  どちらかというと全体の調整役として働くことが多くなります。
  自分自身で個々のバグを処理するのではなく、
  適切な人にそれを振り分ける役になるということです。
</para>

</sect2>

<sect2 id="faq-manager">
<!--
<title>FAQ Manager</title>
-->
<title>FAQ マネージャー</title>

<!--
<para>FAQ maintenance is a surprisingly difficult problem.  Unlike
most other documents in a project, whose content is planned out in
advance by the authors, a FAQ is a wholly reactive document (see
<xref linkend="starting-a-faq"/>).  No matter how big it gets, you
still never know what the next addition will be.  And because it is
always added to piecemeal, it is very easy for the document as a whole
to become incoherent and disorganized, and even to contain duplicate
or semi-duplicate entries.  Even when it does not have any obvious
problems like that, there are often unnoticed interdependencies
between items&mdash;links that should be made but aren't&mdash;because
the related items were added a year apart.</para>
-->
<para>
  FAQ の保守という作業は、思いのほか難しいものです。
  大半のドキュメントは、作者が事前に練り込んだ内容を記述するものです。
  それとは異なり、FAQ は基本的に受け身のドキュメントとなります
  (<xref linkend="starting-a-faq"/> を参照ください)。
  どれだけたくさんの量を書いたとしても、
  次にどんな内容が追加されることになるかは決してわかりません。
  そして、常に細切れの内容が追加され続けるので
  ドキュメント全体としての一貫性やまとまりは簡単に崩れてしまいます。
  ひどい場合は同じ内容が重複してしまったりすることもあるでしょう。
  そんな問題がないように見えるものでも、
  目立たないところで関連項目間の相互依存の問題が発生していることはよくあります。
  たとえば本来はリンクするべきところができていないなどです。
  お互いの項目が時期をずらして追加された場合などにこれが起こりえます。
</para>

<!--
<para>The role of a FAQ manager is twofold.  First, she maintains the
overall quality of the FAQ by staying familiar with at least the
topics of all the questions in it, so that when people add new items
that are duplicates of, or related to, existing items, the appropriate
adjustments can be made.  Second, she watches the project mailing
lists and other forums for recurring problems or questions, and to
write new FAQ entries based on this input.  This latter task can be
quite complex: one must be able to follow a thread, recognize the core
questions raised in it, post a proposed FAQ entry, incorporate
comments from others (since it's impossible for the FAQ manager to be
an expert in every topic covered by the FAQ), and sense when the
process is finished so the item can at last be added.</para>
-->
<para>
  FAQ マネージャーの役割は、ふたつあります。
  まずは FAQ 全体の品質を保持すること。
  そのためには、FAQ の中でどんな項目が取り上げられているのか
  少なくとも質問だけでも把握しておく必要があります。
  そうすれば、既存の項目に関連する内容や重複する内容が新たに追加されたときに
  適切な処理をすることができます。
  もうひとつは、プロジェクトのメーリングリストや掲示板をチェックして、
  どんな問題が発生しているのかやどんな質問が行われているのかを確認することです。
  それをもとにして、新しい FAQ を書き進めていきます。
  後者の作業は非常に複雑なものになるかもしれません。
  各スレッドを追いかけ、そこで行われている質問の内容を把握して
  新たな FAQ エントリの追加を提案します。
  そして他のメンバーのコメントなども考慮して
  (FAQ マネージャーがすべての内容のエキスパートであるとは限りません)
  エントリの内容をふくらませ、ある程度まとまった段階でそれを実際に追加することになります。
</para>

<!--
<para>The FAQ manager usually also becomes the default expert in FAQ
formatting.  There are a lot of little details involved in keeping a
FAQ in shape (see
<xref linkend="all-as-archives"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>); when random
people edit the FAQ, they will sometimes forget some of these details.
That's okay, as long as the FAQ manager is there to clean up after
them.</para>
-->
<para>
  FAQ マネージャーは、FAQ 自体の書式についても責任を持ちます。
  FAQ の体裁に関する注意点はさまざまなものがあります
  (<phrase output="printed"><xref linkend="communications"/> の</phrase>
  <xref linkend="all-as-archives"/> を参照ください)。
  不特定多数が FAQ を編集するようになると、
  これらの注意事項がおろそかになってしまうことがあります。
  そんな場合でも FAQ マネージャーがきちんと注意してそれを修正していけば大丈夫です。
</para>

<!--
<para>Various free software is available to help with the process of
FAQ maintenance.  It's fine to use it, as long as it doesn't
compromise the quality of the FAQ, but beware of over-automation.
Some projects try to fully automate the process of FAQ maintenance,
allowing everyone to contribute and edit FAQ items in a manner similar
to a wiki (see <xref linkend="wikis"/><phrase output="printed">
in <xref linkend="technical-infrastructure"/></phrase>).  I've
seen this happen particularly with Faq-O-Matic
(<ulink url="http://faqomatic.sourceforge.net/"/>), though it may be
that the cases I saw were simply abuses that went beyond what
Faq-O-Matic was originally intended for.  In any case, while complete
decentralization of FAQ maintenance does reduce the workload for the
project, it also results in a poorer FAQ.  There's no one person with
a broad view of the entire FAQ, no one to notice when certain items
need updating or become obsolete entirely, and no one keeping watch for
interdependencies between items.  The result is a FAQ that often fails
to provide users what they were looking for, and in the worst cases
misleads them.  Use whatever tools you need to maintain your
project's FAQ, but never let the convenience of the tools seduce you
into compromising the quality of the FAQ.</para>
-->
<para>
  FAQ の管理を支援するためのフリーソフトウェアも数多く存在します。
  FAQ の品質を低下させない範囲でそれらのソフトウェアを使うのはかまいませんが、
  過度に自動化してしまわないように注意しましょう。
  プロジェクトによっては、FAQ の保守を完全に自動化しようとしているところもあります。
  wiki (<phrase output="printed"><xref linkend="technical-infrastructure"/> の</phrase>
  <xref linkend="wikis"/> を参照ください) などを使用して、
  誰でも自由に FAQ の項目を追加/編集できるようにするなどしています。
  これは Faq-O-Matic
  (<ulink url="http://faqomatic.sourceforge.net/"/>)
  を使っているプロジェクトでよく見かけますが、
  私の見る限りでは Faq-O-Matic
  がもともと想定している範囲を超えた使い方だと感じます。
  FAQ の管理を分散化することでたとえ全体の作業量を軽減できたとしても、
  その結果できあがる FAQ はどうしても品質が劣ったものになってしまいます。
  そこには FAQ 全体を把握している人もいなければ
  更新を要する項目や時代遅れになってしまった項目を見つける人もいません。
  さらに各項目間のつながりを管理できる人もいないでしょう。
  そんな状態でできあがった FAQ は、
  探したい情報が見つからないどころか
  間違った情報を与えてしまうものになってしまう可能性があります。
  プロジェクトの FAQ を管理するのにどんなツールを使うのも自由ですが、
  ツールの便利さに惑わされて FAQ 自体の品質に妥協してしまわないようにしましょう。
</para>

<!--
<para>See Sean Michael Kerner's article, <citetitle>The FAQs on
FAQs</citetitle>, at
<ulink url="http://osdir.com/Article1722.phtml"/>, for descriptions
and evaluations of open source FAQ maintenance tools.</para>
-->
<para>
  Sean Michael Kerner が書いた <citetitle>The FAQs on
  FAQs</citetitle> という記事が
  <ulink url="http://osdir.com/Article1722.phtml"/>
  で読めます。この記事では、オープンソースの
  FAQ 管理ツールについての説明とその評価を行っています。
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="transitions">
<!--
<title>Transitions</title>
-->
<title>引き継ぎ</title>

<!--
<para>From time to time, a volunteer in a position of ongoing
responsibility (e.g., patch manager, translation manager, etc.) will
become unable to perform the duties of the position.  It may be
because the job turned out to be more work than he anticipated, or it
may be due to completely external factors: marriage, a new baby, a new
employer, or whatever.</para>
-->
<para>
  時には、何らかの役割 (パッチマネージャーや翻訳マネージャーなど)
  を受け持っている人がその作業を全うすることができなくなる場合もあります。
  理由としては「作業量が自分の見込みよりずっと多かった」
  「子供が生まれた」「転職した」など、いろいろなものがあるでしょう。
 </para>

<!--
<para>When a volunteer gets swamped like this, he usually doesn't
notice it right away.  It happens by slow degrees, and there's no
point at which he consciously realizes that he can no longer fulfill
the duties of the role.  Instead, the rest of the project just doesn't
hear much from him for a while.  Then there will suddenly be a flurry
of activity, as he feels guilty for neglecting the project for so long
and sets aside a night to catch up.  Then you won't hear from him for
a while longer, and then there might or might not be another flurry.
But there's rarely an unsolicited formal resignation.  The volunteer
was doing the job in his spare time, so resigning would mean openly
acknowledging to himself that his spare time is permanently reduced.
People are often reluctant to do that.</para>
-->
<para>
  担当者がこのような状態に陥った場合、
  それをすぐに自覚できないこともあります。
  それは徐々に起こることであり、「もはや自分の任務を果たせない」
  とはっきりわかる瞬間がないからです。
  プロジェクトの他のメンバーは
  「そういえば最近あの人をあまり見かけないね」
  と感じることになります。
  そして、ある日突然彼がものすごい勢いで活動を再開します。
  しばらく作業をしていなかったことに負い目を感じて
  「徹夜してでもなんとか追いつこう」と感じているのでしょう。
  その後、彼はまた (もっと長い) 沈黙期間に入ります。
  しばらくしてまた突然復活するかもしれませんし、しないかもしれません。
  正式に「この役割から退きます」という表明があることはほとんどありません。
  彼らは自分の空き時間を使って作業をしているのです。
  引退を表明するということは、
  自分の空き時間が今後ずっと少なくなってしまうということを自覚することです。
  人はそれはなかなか認めたがりません。
</para>

<!--
<para>Therefore, it's up to you and the others in the project to
notice what's happening&mdash;or rather, not happening&mdash;and to
ask the volunteer what's going on.  The inquiry should be friendly and
100% guilt-free.  Your purpose is to find out a piece
of information, not to make the person feel bad.  Generally, the
inquiry should be visible to the rest of the project, but if you know
of some special reason why a private inquiry would be better, that's
fine too.  The main reason to do it publicly is so that if the
volunteer responds by saying that he won't be able to do the job
anymore, there's a context established for your
<emphasis>next</emphasis> public post: a request for a new volunteer
to fill that role.</para>
-->
<para>
  したがって、あなた (と他のプロジェクトのメンバー)
  のすべきことは、現状がどうなっているのか (あるいはなにも起こっていないのか)
  を把握して、彼に状況を確認することとなります。
  相手を責めるのではなく、友好的に問い合わせなければなりません。
  状況を知ることが大切で、
  人を不快にさせることが目的なのではないからです。
  一般に、この問い合わせはプロジェクトの他のメンバーにも見えるかたちで行います。
  しかし、何らかの理由で個人的に問い合わせたほうがいいと判断した場合は
  それでもかまいません。公開の場で問い合わせる主な理由は、
  彼が「もう作業を続けることができない」という返事があった場合に
  その <emphasis>次の</emphasis> 投稿、
  つまり新しい担当者の募集につなげやすいからです。
</para>

<!--
<para>Sometimes, a volunteer is unable to do the job he's taken on,
but is either unaware or unwilling to admit that fact.  Of course,
anyone may have trouble at first, especially if the responsibility is
complex.  However, if someone just isn't working out in the task he's
taken on, even after everyone else has given all the help and
suggestions they can, then the only solution is for him to step aside
and let someone new have a try.  And if the person doesn't see this
himself, he'll need to be told.  There's basically only one way to
handle this, I think, but it's a multistep process and each step is
important.</para>
-->
<para>
  時には、自分で引き受けた作業をこなす能力がないにもかかわらず、
  それを自覚できていないかあるいは認めようとしない人もいます。
  もちろん、作業を始めたばかりのころは誰でもうまくいかないものです。
  複雑な作業を与えられた場合などは特にそうでしょう。
  しかし、他のメンバーができる限りの支援をしてやっても
  なお彼が作業をこなせないとしたら、
  彼にはお引き取り願ってだれか他の人に作業を任せるしかありません。
  もし彼がそれに気づいていないのなら、だれかが教えてやる必要があります。
  私が思うに、こんな場合の対応方法はひとつだけです。
  ただ、その方法は何段階かに分かれるもので、
  各段階がそれぞれ重要となります。
</para>

<!--
<para>First, make sure you're not crazy.  Privately talk to others in
the project to see if they agree that the problem is as serious as you
think it is.  Even if you're already positive, this serves the purpose
of letting others know that you're considering asking the person to
step aside.  Usually no one will object to that&mdash;they'll just be
happy you're taking on the awkward task, so they don't have to!</para>
-->
<para>
  まずは、自分だけの思いこみではないということをはっきりさせましょう。
  プロジェクトの他のメンバーと個人的に話し、
  自分が持っている危機意識がみんなと同じくらいのものであることを確認します。
  確認するまでもなく自明な状況であったとしても、他のメンバーと話すことで
  「これからこういうことをしようとしている」
  という気持ちを他のメンバーに伝えることができます。
  通常は、この相談で相手に反対されることはないでしょう。
  やっかいな仕事をあなたが引き受けてくれたということで、
  むしろ感謝してもらえるかもしれません!
</para>

<!--
<para>Next, <emphasis>privately</emphasis> contact the volunteer in
question and tell him, kindly but directly, about the problems you
see.  Be specific, giving as many examples as possible.  Make sure to
point out how people had tried to help, but that the problems
persisted without improving.  You should expect this email to take a
long time to write, but with this sort of message, if you don't back
up what you're saying, you shouldn't say it at all.  Say that you
would like to find a new volunteer to fill the role, but also point
out that there are many other ways to contribute to the project.  At
this stage, don't say that you've talked to others about it; nobody
likes to be told that people were conspiring behind his back.</para>
-->
<para>
  次に、問題となっている人に <emphasis>個人的に</emphasis>
  連絡を取ります。そして、やさしく (しかし要点をはぐらかすことなく)
  あなたが感じている問題点を伝えます。
  できるだけ、具体例を挙げて伝えるようにしましょう。
  可能な限りの支援をしたこと、
  それにもかかわらず問題は改善しなかったことをはっきりさせておきましょう。
  このメールを書くのにはかなりの時間がかかることを覚悟しなければなりません。
  この手のメッセージの場合、
  もし自分が書いている内容にちょっとでも確信の持てない箇所があるのなら、
  最初からそんなメッセージは書いてはいけません。
  彼が引き受けた作業をだれか別の人に任せたいと思っていること、
  プロジェクトに貢献するには他にもいろいろな作業があるということも説明しておきましょう。
  この時点では、あなたが他のメンバーと相談したことは
  まだ彼に言ってはいけません。
  裏でこそこそ話が進められていたなんてことを知ったら
  誰だって気を悪くするでしょう。
</para>

<!--
<para>There are a few different ways things can go after that.  The
most likely reaction is that he'll agree with you, or at any rate not
want to argue, and be willing to step down.  In that case, suggest
that he make the announcement himself, and then you can follow up with
a post seeking a replacement.</para>
-->
<para>
  その後は、成り行きに応じていくつかの方法に分かれます。
  たいていは、彼はあなたの提案に同意してくれるでしょう。
  少なくとも否定はせず、進んで引き下がってくれることでしょう。
  その場合は、引き下がることを彼自身で発表してもらうようにお願いします。
  そして、あなたはその発表への返信で新たな候補者を募集します。
</para>

<!--
<para>Or, he may agree that there have been problems, but ask for a
little more time (or for one more chance, in the case of discrete-task
roles like release manager).  How you react to that is a judgement
call, but whatever you do, don't agree to it just because you feel
like you can't refuse such a reasonable request.  That would prolong
the agony, not lessen it.  There is often a very good reason to refuse
the request, namely, that there have already been plenty of chances,
and that's how things got to where they are now.  Here's how I put it
in a mail to someone who was filling the release manager role but was
not really suited for it:</para>
-->
<para>
  あるいは、問題があったことは認めるものの「もうちょっとだけチャンスがほしい
  (リリースマネージャーのような役割なら『あと 1 回だけ』など)」
  とお願いされるかもしれません。
  あなたはここで審判としての働きをしなければならないわけですが、
  どう判断するにしてもそこに私情を挟まないようにしましょう。
  そこで猶予を与えてしまっても、
  単に苦痛をひきのばすだけのことにしかなりません。
  このお願いを拒否する理由としてはっきり言えるのは、
  これまでに何度もチャンスがあったということ。
  そしてそのチャンスを生かさなかったからこそ今の状態があるということです。
  以下に示すのは私が送ったメールの例です。
  これは、リリースマネージャーの役割を引き受けながら
  その役割を果たせなかった人に対して送ったものです。
</para>

<blockquote>
<!--
<screen>
&gt; If you wish to replace me with some one else, I will gracefully
&gt; pass on the role to who comes next.  I have one request, which
&gt; I hope is not unreasonable.  I would like to attempt one more
&gt;  release in an effort to prove myself.

I totally understand the desire (been there myself!), but in
this case, we shouldn't do the "one more try" thing.

This isn't the first or second release, it's the sixth or
seventh... And for all of those, I know you've been dissatisfied
with the results too (because we've talked about it before).  So
we've effectively already been down the one-more-try route.
Eventually, one of the tries has to be the last one... I think
[this past release] should be it.
</screen>
-->
<screen>
&gt; もし私じゃダメだというのなら、喜んで別の人にこの役割を
&gt; 譲ります。ただ、ひとつだけお願いがあります。決して無茶
&gt; なお願いではないと思います。あと一回だけチャンスがほし
&gt; いんです。次のリリースで私の能力を証明させてください。

言いたいことはよくわかります (できればそうしてあげたい) が、
今回については「あと一回だけ」というのはやるべきではないと
思います。

今回が初めてのリリースだったとかならともかく、もう既に６回
目か７回目くらいになるわけです。そしてその間ずっと、あなた
は期待通りの結果を出すことができませんでした (っていうこと
は以前お話しましたよね)。つまり、はっきり言えば「あと一回」
の段階は事実上終わっているわけです。結局のところ、この前の
[過去のリリース] がその「あと一回」だったんです。
</screen>
</blockquote>

<!--
<para>In the worst case, the volunteer may disagree outright.  Then
you have to accept that things are going to be awkward and plow ahead
anyway.  Now is the time to say that you talked to other people about
it (but still don't say who until you have their permission, since
those conversations were confidential), and that you don't think it's
good for the project to continue as things are.  Be insistent, but
never threatening.  Keep in mind that with most roles, the transition
really happens the moment someone new starts doing the job,
<emphasis>not</emphasis> the moment the old person stops doing it.
For example, if the contention is over the role of, say, issue
manager, at any point you and other influential people in the project
can solicit for a new issue manager.  It's not actually necessary that
the person who was previously doing it stop doing it, as long as he
does not sabotage (deliberately or otherwise) the efforts of the new
volunteer.</para>
-->
<para>
  最悪の場合は、相手が提案を拒否するかもしれません。
  この場合は、ちょっと話がやっかいになることを覚悟しなければなりません。
  ここにきて初めて、事前に他のメンバーとも話し合っていたことを明らかにします
  (ただ、相手の許可を得るまでは「誰と」話したのかは言ってはいけません。
  あくまでも私的な相談だったのですから)。
  そしてこのままではプロジェクトにとってあまりよくないということも説明しましょう。
  何度も何度も、しかし決して威圧的にならないように注意して。
  覚えておいてほしいのは、大半の役割については
  新しい担当者が作業を始めた時点で移行が完了する
  (前任者が作業をやめた時点では <emphasis>ない</emphasis>)
  ということです。たとえば、バグマネージャーの資質が問題になっているのなら、
  あなた (やプロジェクト内の主要メンバー) は
  いつでも新たなバグマネージャーを仕立て上げることができます。
  前任者が新たなバグマネージャーの作業を邪魔したりしない限り、
  前任者が作業をやめるかどうかは大きな問題ではありません。
</para>

<!--
<para>Which leads to a tempting thought: instead of asking the person
to resign, why not just frame it as a matter of getting him some help?
Why not just have two issue managers, or patch managers, or whatever
the role is?</para>
-->
<para>
  ふとこんな考えが頭に浮かぶかもしれません。
  「わざわざお引き取り願わなくたって、だれか補佐役をつけてやるだけでいいんじゃないの?」
  「バグマネージャーにしたってパッチマネージャーにしたって、
  別に 2 人いても何も問題はないんじゃないの?」
</para>

<!--
<para>Although that may sound nice in theory, it is generally not a
good idea.  What makes the manager roles work&mdash;what makes them
useful, in fact&mdash;is their centralization.  Those things that can
be done in a decentralized fashion are usually already being done that
way.  Having two people fill one managerial role introduces
communications overhead between those two people, as well as the
potential for slippery displacement of responsibility ("I thought you
brought the first aid kit!"  "Me?  No, I thought
<emphasis>you</emphasis> brought the first aid kit!").  Of course,
there are exceptions.  Sometimes two people work extremely well
together, or the nature of the role is such that it can easily be
spread across multiple people.  But these are not likely to be of much
use when you see someone flailing in a role he is not suited for.  If
he'd appreciated the problem in the first place, he would have sought
such help before now.  In any case, it would be disrespectful to let
someone waste time continuing to do a job no one will pay attention
to.</para>
-->
<para>
  一見よさげに聞こえますが、一般的にこれはよい考えではありません。
  マネージャーの役割がなぜうまく機能している
  (役立っている) のかというと、それは中央集権型だからです。
  もし分散管理してもうまくいくような作業なら、
  きっとはじめからそのようにしていることでしょう。
  ひとつの管理作業を 2 人に任せると、
  その 2 人の間のコミュニケーションというオーバーヘッドが発生します。
  そして、お互い責任をなすりつけあう
  (「きみが救急箱を持ってくるんじゃなかったの?」
  「まさか。ぼくは君が持ってくるものだとばかり思ってたよ!」)
  という危険性もあるでしょう。
  もちろん例外もあります。複数の人間がうまくかみ合って作業が進むこともあるでしょうし、
  複数の人間で行うのに適した作業もあります。
  しかし、もともとその作業に適していないと思われる人にとっては
  あまり意味のないことでしょう。
  彼が最初の時点で問題をきちんと把握していれば、
  もっと早い段階で助けを求めてきたはずです。
  いずれにせよ、作業がうまく進まないで
  単なる時間の浪費になってしまっているのを見過ごすのはまずいことです。
</para>

<!--
<para>The most important factor in asking someone to step down is
privacy: giving him the space to make a decision without feeling like
others are watching and waiting.  I once made the mistake&mdash;an
obvious mistake, in retrospect&mdash;of mailing all three parties at
once in order to ask Subversion's release manager to step aside in
favor of two other volunteers.  I'd already talked to the two new
people privately, and knew that they were willing to take on the
responsibility.  So I thought, na&iuml;vely and somewhat
insensitively, that I'd save some time and hassle by sending one mail
to all of them to initiate the transition.  I assumed that the current
release manager was already fully aware of the problems and would see
the reasonableness of my point immediately.</para>
-->
<para>
  だれかに手を引いてもらうようお願いするときに最も大切なのは、
  プライバシーです。みんなに注目される中ではなく、
  自分一人でどうするかを考える余地を残しておくようにしましょう。
  私は、かつて間違いを犯しました。明白な間違いをです。
  ある人に Subversion のリリースマネージャーを退いてもらい、
  かわりに別の 2 人に任せようと考えたときに、
  当事者 3 人に対して同時にメールを送ってしまったのです。
  新たに任せる予定の 2 人には事前に個別に話を持ちかけており、
  どちらもその気であることはわかっていました。
  世間知らずで無神経な私は
  「一通のメールを全員に送ってしまえば話は早いじゃないか。
  こんな面倒なことはさっさと終わらせてしまおう」
  と考えたのです。当時のリリースマネージャーもすでに事態を自覚しており、
  きっとすんなり退いてくれるだろうと想定していました。
</para>

<!--
<para>I was wrong.  The current release manager was very offended, and
rightly so.  It's one thing to be asked to hand off the job; it's
another thing to be asked that <emphasis>in front of</emphasis> the
people you'll hand it off to.  Once I got it through my head why he
was offended, I apologized.  He eventually did step aside gracefully,
and continues to be involved with the project today.  But his
feelings were hurt, and needless to say, this was not the most
auspicious of beginnings for the new volunteers either.</para>
-->
<para>
  私は間違っていました。当時のリリースマネージャーは激高しました。
  当然です。単に仕事を取り上げられたということだけでなく、
  新しい担当者が <emphasis>目の前に</emphasis>
  いるところでそれを言われたのですから。
  彼が怒っている理由を知って、私は謝りました。
  彼は結局私たちの提案に同意してマネージャーを退いてくれました。
  その後も別の形でプロジェクトに参加し続けてくれています。
  しかし彼は傷ついたでしょう。言うまでもなく、
  新たにマネージャーを引き受けることになった側にとってもやりにくかったはずです。
</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="committers">
<!--
<title>Committers</title>
-->
<title>コミッター</title>

<!--
<para>As the only formally distinct class of people found in all open
source projects, committers deserve special attention here.
Committers are an unavoidable concession to discrimination in a system
which is otherwise as non-discriminatory as possible.  But
"discrimination" is not meant as a pejorative here.  The function
committers perform is utterly necessary, and I do not think a project
could succeed without it.  Quality control requires, well, control.
There are always many people who feel competent to make changes to a
program, and some smaller number who actually are.  The project cannot
rely on people's own judgement; it must impose standards and grant
commit access only to those who meet them<footnote><para>Note that the
commit access means something a bit different in decentralized version
control systems, where anyone can set up a repository that is linked
into the project, and give themselves commit access to that
repository.  Nevertheless, the <emphasis>concept</emphasis> of commit
access still applies: "commit access" is shorthand for "the
right to make changes to the code that will ship in the group's next
release of the software."  In centralized version control systems,
this means having direct commit access; in decentralized ones, it
means having one's changes pulled into the main distribution by
default.  It is the same idea either way; the mechanics by which it is
realized are not terribly important.</para></footnote>.  On the other
hand, having people who can commit changes directly working
side-by-side with people who cannot sets up an obvious power dynamic.
That dynamic must be managed so that it does not harm the
project.</para>
-->
<para>
  あらゆるオープンソースプロジェクトにおいて唯一公式に識別可能なのは、
  コミッターかそうでないかということです。
  ここでは「コミッター」について注目してみましょう。
  メンバーをできる限り平等に扱うことを心がけていたとしても、
  コミッターだけは別に扱うということは避けられないでしょう。
  「別に扱う」といっても、特に差別的な意味はありません。
  コミッターの役割は欠かせないものであり、
  それなしではプロジェクトがうまく回ることはないと考えます。
  品質管理のためにはコントロールが必要です。
  自分にはプログラムに変更を加える能力があると考える人は多くいますが、
  実際に行うのはそのうちの一部の人となります。
  プロジェクトは、各個人の自己判断に依存してはいけません。
  何らかの基準を設け、それを満たした人にのみコミット権を与えるべきです
  <footnote>
    <para>
      コミット権の考え方は、分散型のバージョン管理システムでは
      多少異なることに注意しましょう。分散型のバージョン管理システムでは、
      各個人がプロジェクトにリンクしたリポジトリを作成することができ、
      作成したリポジトリに対するアクセス権を得ることができます。
      それでもなお、コミット権という <emphasis>考え方</emphasis>
      自体は有効です。「コミット権」とは要するに
      「そのグループが作成し、リリースするソフトウェアのコードに
      変更を加える権限」ということです。中央管理型のバージョン管理システムでは、
      これはリポジトリへの直接のコミット権を意味します。
      分散型の場合は、自分の変更内容を配布ファイル本体に
      pull できる権限のことを指します。
      いずれにしても考え方は同じです。裏側の管理方式はそれほど重要ではありません。
    </para>
  </footnote>。
  一方、変更を直接コミットできる権限を持つ人たちのまわりには
  そうでない人たちも多くいます。彼らにもさまざまな考えがあるでしょう。
  それをうまく管理して、プロジェクトをうまく動かしていくことが必要です。
</para>

<!--
<para>In <xref linkend="electorate"/><phrase output="printed">
in <xref linkend="social-infrastructure"/></phrase>, we already
discussed the mechanics of considering new committers.  Here we will
look at the standards by which potential new committers should be
judged, and how this process should be presented to the larger
community.</para>
-->
<para>
  <phrase output="printed"><xref linkend="social-infrastructure"/> の</phrase>
  <xref linkend="electorate"/> で、
  新たなコミッターを決める方法については既に説明しました。
  ここでは、新コミッター候補の能力を見極める方法や
  大規模コミュニティーで同じ手続きを進める方法について考えてみましょう。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-committers">
<!--
<title>Choosing Committers</title>
-->
<title>コミッターの選びかた</title>

<!--
<para>In the Subversion project, we choose committers primarily on the
Hippocratic Principle: <emphasis>first, do no harm</emphasis>.  Our
main criterion is not technical skill or even knowledge of the code,
but merely that the committer show good judgement.  Judgement can mean
simply knowing what not to take on.  A person might post only small
patches, fixing fairly simple problems in the code; but if the patches
apply cleanly, do not contain bugs, and are mostly in accord with the
project's log message and coding conventions, and there are enough
patches to show a clear pattern, then an existing committer will
usually propose that person for commit access.  If at least three
people say yes, and no one objects, then the offer is made.  True, we
might have no evidence that the person is able to solve complex
problems in all areas of the code base, but that does not matter: the
person has made it clear that he is capable of at least judging
his own abilities.  Technical skills can be learned (and taught),
but judgement, for the most part, cannot.  Therefore, it is the one
thing you want to make sure a person has before you give him commit
access.</para>
-->
<para>
  Subversion プロジェクトでは、コミッターを決める際には
  ヒポクラテス主義 <emphasis>first, do no harm
  (何よりもまず、患者に害を与えないこと)</emphasis> を重視しました。
  技術的なスキルや Subversion のコードに関する知識よりも、
  単によりよい判断ができるかどうかに重きを置いたのです。
  「判断ができる」というのは、単に「すべきでないことは何か」
  を知っているかどうかという意味です。
  だれかがちょっとしたパッチを送ってきたとしましょう。
  それは、コードの中のほんの些細な問題を修正するだけのものでした。
  そのパッチはうまく適用することができてバグもなく、
  プロジェクトのコーディング規約やログメッセージの規約も守っています。
  そのようなパッチを数多く送ってきた人に対して、
  既存のコミッターたちが「コミット権をあげたらどう?」と提案します。
  少なくとも 3 人のコミッターが賛成し、
  かつ反対する人が誰もいなければ、正式にコミット権を提供します。
  もちろん、その人がコード全体を把握していて複雑な問題も解決できるという証拠なんてありません。
  しかし、そんなことは関係ないのです。はっきりと言えることは、
  彼は自分自身の能力をきちんと判断することができるということです。
  技術的なことは、後からでも勉強できます (し、教えることもできます)
  が、判断力についてはなかなかそうはいきません。
  したがって、コミット権を与える際には判断力の有無を重視したほうがいいでしょう。
</para>

<!--
<para>When a new committer proposal does provoke a discussion, it is
usually not about technical ability, but rather about the person's
behavior on the mailing lists or in IRC.  Sometimes someone shows
technical skill and an ability to work within the project's formal
guidelines, yet is also consistently belligerent or uncooperative in
public forums.  That's a serious concern; if the person doesn't
seem to shape up over time, even in response to hints, then we won't
add him as a committer no matter how skilled he is.  In a
volunteer group, social skills, or the ability to "play well in the
sandbox", are as important as raw technical ability.  Because
everything is under version control, the penalty for adding a
committer you shouldn't have is not so much the problems it could
cause in the code (review would spot those quickly anyway), but that
it might eventually force the project to revoke the person's commit
access&mdash;an action that is never pleasant and can sometimes be
confrontational.</para>
-->
<para>
  新たにコミッターを追加しようという提案が議論を呼ぶ場合、
  その原因が技術的なものであることはあまりありません。
  どちらかというと、メーリングリストや IRC
  上でのその人のふるまいが問題になることが多いようです。
  たまに、技術的には問題がなく
  プロジェクトの公式指針にしたがって働くこともできるけれども、
  掲示板ではやたらけんか腰だったり非協力的だったりする人がいます。
  これはちょっと深刻な問題です。
  何度か助言をした上でまだ彼がそのような態度をとり続けるようなら、
  たとえ彼の技術が優れていたとしても私たちは彼をコミッターにはしないでしょう。
  ボランティアの集まりにおいては、いわゆるソーシャルスキル、
  つまり「集団の中でうまくやっていく能力」は技術力と同じくらい重要です。
  すべてはバージョン管理されているわけなので、
  仮にふさわしくない人をコミッターにしてしまったとしても
  コードにはそれほど被害は及びません (何か問題があっても、
  コードのレビューですぐに見つかることでしょう)。
  しかし、そんな場合はすみやかにその人のコミット権を剥奪することになるでしょう。
  これは決して気持ちのいいことではなく、ときには対立が起こることもあります。
</para>

<!--
<para>Many projects insist that the potential committer demonstrate a
certain level of technical expertise and persistence, by submitting
some number of nontrivial patches&mdash;that is, not only do these
projects want to know that the person will do no harm, they want to
know that she is likely to do good across the code base.  This is
fine, but be careful that it doesn't start to turn committership into
a matter of membership in an exclusive club.  The question to keep in
everyone's mind should be "What will bring the best results for the
code?" not "Will we devalue the social status associated with
committership by admitting this person?"  The point of commit access
is not to reinforce people's self-worth, it's to allow good changes to
enter the code with a minimum of fuss.  If you have 100
committers, 10 of whom make large changes on a regular basis, and the
other 90 of whom just fix typos and small bugs a few times a year,
that's still better than having only the 10.</para>
-->
<para>
  多くのプロジェクトでは、重要なパッチを何回か提供することで
  はじめてコミッター候補として認められるような仕組みになっています。
  これは、単にその人が周りに害を与えないかどうかを見るだけではなく
  その人がコードにどのように関わっていくかを見るという意味があります。
  これはこれでいいのですが、コミット権を得るのがまるで
  会員制の高級クラブに入会するかのようなことになってしまわないように注意しましょう。
  ここで問うべきことは「コードにとってもっともよい結果をもたらすにはどうしたらいいのか?」
  であり、決して
  「こいつを仲間に入れるとコミッターたちの社会的な評判がおちるんじゃないか?」
  といったものではありません。
  コミット権を与えるのは個人の自尊心を高めるためではなく、
  コードに変更を加える際の手間をできるだけ減らすためです。
  100 人のコミッターのうち定期的に大規模な変更を行うのが 10 人だけで、
  残りの 90 人は誤植やちょっとしたバグの修正を年に数度行うだけだったとしましょう。
  それでもコミッターを 10 人だけにしておくよりもよっぽどましです。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="revoking-committers">
<!--
<title>Revoking Commit Access</title>
-->
<title>コミット権の剥奪</title>

<!--
<para>The first thing to be said about revoking commit access is: try
not to be in that situation in the first place.  Depending on whose
access is being revoked, and why, the discussions around such an
action can be very divisive.  Even when not divisive, they will be a
time-consuming distraction from productive work.</para>
-->
<para>
  コミット権の剥奪に関してまずひとこと。
  そんなことをしなければならない羽目に陥らないように、
  最初から十分注意するようにしましょう。
  「誰の」アクセス権を「なぜ」剥奪するのか
  といった議論は紛糾しやすいものです。
  たとえ皆の意見が一致していたとしても、
  そんな作業は全く生産的ではありません。
</para>

<!--
<para>However, if you must do it, the discussion should be had
privately among the same people who would be in a position to vote for
<emphasis>granting</emphasis> that person whatever flavor of commit
access they currently have.  The person herself should not be
included.  This contradicts the usual injunction against secrecy, but
in this case it's necessary.  First, no one would be able to speak
freely otherwise.  Second, if the motion fails, you don't necessarily
want the person to know it was ever considered, because that could
open up questions ("Who was on my side?  Who was against me?") that
lead to the worst sort of factionalism.  In certain rare
circumstances, the group may want someone to know that revocation of
commit access is or was being considered, as a warning, but this
openness should be a decision the group makes.  No one should ever, on
her own initiative, reveal information from a discussion and ballot
that others assumed were secret.</para>
-->
<para>
  しかし、どうしてもそうしなければならない状況になったら、
  まずはその人にコミット権を <emphasis>与えた</emphasis>
  ときのメンバーの間で非公開で議論しなければなりません。
  問題となっている人自身はその議論に加えてはいけません。
  通常は秘密主義は否定されるものです。その方針には反していますが、
  この場合は非公開であることが必要なのです。
  第一の理由として、そうでないと自由に意見を交換することができません。
  もう一つの理由は、もしコミット権剥奪の試みが失敗したときに
  「そういう考えがあった」ということを当事者に知られないようにするということです。
  それを知られてしまうと、きっと「剥奪に賛成したのは誰?
  私の味方になってくれたのは誰?」という疑問が頭に浮かぶことになるでしょう。
  これは、もっともたちの悪い派閥争いの原因となってしまいます。
  ごくまれに、コミット権を剥奪する (あるいはしようと考えている)
  ことを警告として知らせたいという状況もあるかもしれません。
  しかし、そのような場合は必ずグループ全体の同意をとってからにしなければなりません。
  非公開で行った議論や投票の内容は、参加者全員が了解しない限り公開することはできません。
</para>

<!--
<para>Once someone's access is revoked, that fact is unavoidably
public (see
<xref linkend="commit-access-openness"/><phrase output="printed">
later in this chapter</phrase>), so try to be as tactful as you can in
how it is presented to the outside world.</para>
-->
<para>
  だれかのアクセス権を剥奪したら、その事実を公表しなければなりません
  (<phrase output="printed">この章の後半の</phrase>
  <xref linkend="commit-access-openness"/> を参照ください)。
  一般向けへの公表は、できるだけそつなく行うようにしましょう。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="partial-committers">
<!--
<title>Partial Commit Access</title>
-->
<title>部分的なコミット権</title>

<!--
<para>Some projects offer gradations of commit access.  For example,
there might be contributors whose commit access gives them free rein
in the documentation, but who do not commit to the code itself.
Common areas for partial commit access include documentation,
translations, binding code to other programming languages,
specification files for packaging (e.g., RedHat RPM spec files,
etc.), and other places where a mistake will not result in a problem for
the core project.</para>
-->
<para>
  プロジェクトによっては、コミット権に何段階かの区別をつけているところもあります。
  たとえば、ドキュメントについては自由に変更できるけれども
  コードそのものにはコミットできないといった権限を用意しているわけです。
  このように「一部だけに限定」したコミット権を与える場面としてよくあるのは、
  ドキュメント、翻訳、他のプログラミング言語とのバインディング、
  パッケージ作成用の設定ファイル (RedHat の RPM スペックファイルなど)
  などです。これらは、何か間違いがあったとしてもプロジェクトのコアには
  あまり影響を及ぼさないところでもあります。
</para>

<!--
<para>Since commit access is not only about committing, but about
being part of an electorate (see
<xref linkend="electorate"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>),
the question naturally arises: what can the partial committers vote
on?  There is no one right answer; it depends on what sorts of partial
commit domains your project has.  In Subversion we've kept things
fairly simple: a partial committer can vote on matters confined
exclusively to that committer's domain, and not on anything else.
Importantly, we do have a mechanism for casting advisory votes
(essentially, the committer writes "+0" or "+1&nbsp;(non-binding)"
instead of just "+1" on the ballot).  There's no reason to silence
people entirely just because their vote isn't formally binding.</para>
-->
<para>
  コミット権は、単にコミットすることだけでなく投票権
  (<phrase output="printed"><xref linkend="social-infrastructure"/> の</phrase>
  <xref linkend="electorate"/> を参照ください) にもからんできます。
  部分的なコミット権を持つ人の扱いはどうしたらいいのでしょうか?
  正解はひとつではありません。
  そのプロジェクトでどのように部分コミット権を定義しているかによって変わります。
  Subversion ではきわめてシンプルに考えています。
  部分的なコミット権を持つコミッターは、
  自分がからんでいる範囲の事項については投票できるが
  それ以外の範囲についての投票権はないということです。
  ただ、参考意見としての投票 (advisory vote) という仕組みは存在します
  (要するに、投票用紙に単に "+1" と書くのではなく "+0"
  あるいは "+1&nbsp;(拘束力なし)" と書くようなものです)。
  公式な効力がないからといって、彼らを完全に黙らせてしまう理由はありません。
</para>

<!--
<para>Full committers can vote on anything, just as they can commit
anywhere, and only full committers vote on adding new committers of
any kind.  In practice, though, the ability to add new partial
committers is usually delegated: any full committer can "sponsor" a
new partial committer, and partial committers in a domain can often
essentially choose new committers for that same domain (this is
especially helpful in making translation work run smoothly).</para>
-->
<para>
  フルコミッターは、あらゆることに関して投票権を持ちます。
  ちょうど彼らがどの部分にでもコミットできるのと同じようなことです。
  そして、フルコミッターのみが新規コミッターの追加に関する投票権を持ちます。
  しかし現実的には、部分的なコミッターを追加する手続きについては権限を委譲することもよくあります。
  フルコミッターが部分的なコミッターの "保証人" となり、
  その分野だけのコミット権を持つコミッターについては彼らに選ばせるのです
  (これは、特に翻訳作業などを円滑に進めるために便利です)。
</para>

<!--
<para>Your project may need a slightly different arrangement,
depending on the nature of the work, but the same general principles
apply to all projects.  Each committer should be able to vote on
matters that fall within the scope of her commit access, and not on
matters outside that, and votes on procedural questions should default
to the full committers, unless there's some reason (as decided by the
full committers) to widen the electorate.</para>
-->
<para>
  作業の内容によっては、このような決まりを
  あなたのプロジェクトでそのまま取り入れるわけにはいかないかもしれません。
  しかし、
  「すべてのコミッターは自分のコミット権の及ぶ範囲に関する決定への投票権を持ち、
  コミット権の及ばない範囲に関しては投票できないということ」
  「プロジェクトの進め方に関する投票は、基本的にフルコミッターのみが行うこと」
  「ただし、もう少し投票できる人の範囲を広めるようにフルコミッターが決められるということ」
  という大まかな考えかたはすべてのプロジェクトに適用できるでしょう。
</para>

<!--
<para>Regarding enforcement of partial commit access: it's often
best <emphasis>not</emphasis> to have the version control system
enforce partial commit domains, even if it can.  See
<xref linkend="vc-authz"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for the
reasons why.</para>
-->
<para>
  部分的なコミット権の付与に関する注意:
  部分的コミット権を与える機能を仮にバージョン管理システムが持っていたとしても、
  できればそれは使わないようにしましょう。その理由については
  <phrase output="printed"><xref linkend="technical-infrastructure"/> の</phrase>
  <xref linkend="vc-authz"/> をご覧ください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="dormant-committers">
<!--
<title>Dormant Committers</title>
-->
<title>休眠状態のコミッター</title>

<!--
<para>Some projects automatically remove people's commit access if
they go a certain amount of time (say, a year) without committing
anything.  I think this is usually unhelpful and even
counterproductive, for two reasons.</para>
-->
<para>
  プロジェクトによっては、ある程度の期間 (たとえば一年間)
  いちどもコミットがなかった人のコミット権を自動的に削除しているようなところもあります。
  私はこれはあまりメリットがないと思っています。
  というかむしろ逆効果でしょう。理由は次のふたつです。
</para>

<!--
<para>First, it may tempt some people into committing acceptable but
unnecessary changes, just to prevent their commit access from
expiring.  Second, it doesn't really serve any purpose.  If the
main criterion for granting commit access is good judgement, then why
assume someone's judgement would deteriorate just because he's away
from the project for a while?  Even if he completely vanishes for
years, not looking at the code or following development discussions,
when he reappears he'll <emphasis>know</emphasis> how out of touch
he is, and act accordingly.  You trusted his judgement before, so
why not trust it always?  If high school diplomas do not expire, then
commit access certainly shouldn't.</para>
-->
<para>
  まず、単にコミット権の有効期限切れを防ぐためだけの目的で、
  あまり意味のない不要なコミットをする人が増えてくることになるでしょう。
  次に、そんなことをしたところで何の意味もありません。
  コミット権を与えるか否かを決める主要な条件は、
  その人が正しい状況判断をできるかどうかです。
  単にプロジェクトでの活動から一時離れていただけで
  判断力が低下したと見なすことなんてできないでしょう?
  仮に数年の間完全にプロジェクトから離れており、
  その間コードも一切見ずに開発関連の議論にも目を通していなかったとしましょう。
  それでも、プロジェクトに復帰した彼は
  自分の状況をきちんと把握し、適切に振る舞ってくれることでしょう。
  彼の判断力を信じたからこそコミット権を与えたはずです。
  だったら最後まで信頼してあげましょうよ。
  ハイスクールの卒業証書が期限切れになることがないのと同様に、
  コミット権にだって有効期限なんかいらないはずです。
</para>

<!--
<para>Sometimes a committer may ask to be removed, or to be explicitly
marked as dormant in the list of committers (see
<xref linkend="commit-access-openness"/><phrase output="printed">
below</phrase> for more about that list).  In these cases, the project
should accede to the person's wishes, of course.</para>
-->
<para>
  時には、コミッター自身から「私を削除してほしい」
  「休眠状態であることをコミッター一覧
  (この一覧についての詳細は <phrase output="printed">下の</phrase>
  <xref linkend="commit-access-openness"/> をご覧ください)
  に明示してほしい」とお願いされることもあります。
  そんな場合は、当然そのお願いを受け入れなければなりません。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="commit-access-openness">
<!--
<title>Avoid Mystery</title>
-->
<title>秘密主義を避ける</title>

<!--
<para>Although the discussions around adding any particular new
committer must be confidential, the rules and procedures themselves
need not be secret.  In fact, it's best to publish them, so people
realize that the committers are not some mysterious Star Chamber,
closed off to mere mortals, but that anyone can join simply by posting
good patches and knowing how to handle herself in the community.
In the Subversion project, we put this information right in the
developer guidelines document, since the people most likely to be
interested in how commit access is granted are those thinking of
contributing code to the project.</para>
-->
<para>
  誰かを新しいコミッターとして認めるかどうかについての議論は内密に行う必要がありますが、
  認める基準やその手続きについては特に隠す必要はありません。
  というか、公表してしまったほうがずっといいでしょう。
  そうすれば、まるで星室庁 (Star Chamber)
  のような謎めいた組織だと見られることもなくなり、
  よいパッチを投稿してコミュニティー内で認められさえすれば
  コミッターになれるのだと理解してもらえます。
  Subversion プロジェクトでは、
  この情報を開発者むけガイドラインドキュメントに記載しています。
  コミット権を取得したいと考える人のほとんどは、
  コードを書いてプロジェクトに貢献したいと考えているであろうからです。
</para>

<!--
<para>In addition to publishing the procedures, publish the
actual <emphasis>list</emphasis> of committers.  The traditional place
for this is a file called <filename>MAINTAINERS</filename>
or <filename>COMMITTERS</filename> in the top level of the project's
source code tree.  It should list all the full committers first,
followed by the various partial commit domains and the members of each
domain.  Each person should be listed by name and email address,
though the address can be encoded to prevent spam (see
<xref linkend="address-hiding"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>) if the
person prefers that.</para>
-->
<para>
  コミッターになる手順を公開するだけでなく、
  現在のコミッターの<emphasis>一覧</emphasis>
  も公開します。この情報を公開する場所として昔からよく使われているのは、
  プロジェクトのソースコードツリーの最上位にある
  <filename>MAINTAINERS</filename> あるいは
  <filename>COMMITTERS</filename> という名前のファイルです。
  このファイルには、まずフルコミット権を持つメンバーの一覧を記載します。
  その後に、各分野別に部分コミット権を持つコミッターの一覧を続けます。
  各メンバーについて名前とメールアドレスを記載しますが、
  メールアドレスについてはメンバーの希望に応じてスパム対策のエンコードを施すこともあります
  (<phrase output="printed"><xref linkend="technical-infrastructure"/> の</phrase>
  <xref linkend="address-hiding"/> をご覧ください)。
</para>

<!--
<para>Since the distinction between full commit and partial commit
access is obvious and well defined, it is proper for the list to make
that distinction too.  Beyond that, the list should not try to
indicate the informal distinctions that inevitably arise in a project,
such as who is particularly influential and how.  It is a public
record, not an acknowledgments file.  List committers either in
alphabetical order, or in the order in which they arrived.</para>
-->
<para>
  フルコミッターと部分コミッターは明確な基準で区別できるものなので、
  一覧上でも区別しておくとよいでしょう。
  ただ、プロジェクト内で必然的に発生する非公式な区別
  (影響力の大きい人は誰かなど) までも一覧に反映させようとしてはいけません。
  この一覧は公式な記録なのであり、覚え書きではありません。
  コミッターの並び順は、単純にアルファベット順にするか
  コミッターになった時期の順にします。
</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="credit">
<title>クレジット</title>

<!--
<para>Credit is the primary currency of the free software world.
Whatever people may say about their motivations for participating in a
project, I don't know any developers who would be happy doing all
their work anonymously, or under someone else's name.  There are
tangible reasons for this:

 one's reputation in a project roughly
governs how much influence one has, and participation in an open
source project can also indirectly have monetary value, because
some employers now look for it on resum&eacute;s.  There are also
intangible reasons, perhaps even more powerful: people simply want to
be appreciated, and instinctively look for signs that their work was
recognized by others.  The promise of credit is therefore one of best
motivators the project has.  When small contributions are
acknowledged, people come back to do more.</para>
-->

<para>
    クレジット<footnote><para>ある物事に対する貢献を明確にするため、貢献があった人物、
    団体、企業等の名前を明示すること</para></footnote> は、
    フリーソフトウェアの世界における通貨のようなものです。
    プロジェクトに参加する動機が何であれ、
    匿名や他人の名前で仕事をして喜んでいる開発者を私は知りません。
    これには明確な理由があります。
    プロジェクトで尊敬されているかどうかは、そこで行使できる影響力をも左右します。
    そして、オープンソースプロジェクトに参加していることを履歴書で評価する経営者もいるので、
    そのことが直接ではないにしろ開発者の市場価値に反映されるかもしれないからです。
    もっと明確で、説得力のある理由がもう一つあります。人は他人から評価されたいですし、
    無意識のうちに他人が自分の仕事をわかってくれる証を求めるからです。
    よって、クレジットはプロジェクトに対するもっとも強い動機付けのひとつになります。
    小さな貢献をプロジェクトが認めてくれると、
    認められた人はもっと大きな貢献をするために戻ってくるのです。
</para>

<!--
<para>One of the most important features of collaborative development
software (see <xref linkend="technical-infrastructure"/>) is that
it keeps accurate records of who did what, when.  Wherever possible,
use these existing mechanisms to make sure that credit is distributed
accurately, and be specific about the nature of the contribution.
Don't just write "Thanks to J. Random &lt;jrandom@example.com&gt;" if
instead you can write "Thanks to J. Random &lt;jrandom@example.com&gt;
for the bug report and reproduction recipe" in a log message.</para>
-->

<para>
    共同で開発するソフトウェア(<xref linkend="technical-infrastructure"/> を参照してください)
    が持つ重要な特徴のひとつとして、誰がいつ、
    何をしたかを正確に記録していることがあげられます。
    可能ならいつも、この記録をクレジットを適切に記す目的に使うようにしましょう。
    そして、行った貢献の種類を明確にしておきましょう。
    "ありがとう、J. Random &lt;jrandom@example.com&gt;" のような書き方はせず、
    "バグ報告と再現手順を教えてくれた J. Random &lt;jrandom@example.com&gt;、
    ありがとう" と記すようにします。
</para>

<!--
<para>In Subversion, we have an informal but consistent policy of
crediting the reporter of a bug in either the issue filed, if there is
one, or the log message of the commit that fixes the bug, if not.  A
quick survey of Subversion commit logs up to commit number 14525 shows
that about 10% of commits give credit to someone by name and email
address, usually the person who reported or analyzed the bug fixed by
that commit. Note that this person is different from the developer
who actually made the commit, whose name is already recorded
automatically by the version control system.  Of the 80-odd full and
partial committers Subversion has today, 55 were credited in the
commit logs (usually multiple times) before they became committers
themselves.  This does not, of course, prove that being credited was a
factor in their continued involvement, but it at least sets up an
atmosphere in which people know they can count on their contributions
being acknowledged.</para>
-->

<para>
    Subversion プロジェクトでは、記録されているバグ報告や、
    記録がなくてもコミットログに残っている報告者にクレジットを与えるやり方について、
    非公式ですが一貫したポリシーがあります。
    リビジョン 14525 までの Subversion のコミットログをざっと調査したところ、
    10%のコミットに対して名前と電子メールアドレスを記録するクレジットを与えていました。
    クレジットを与えられたのは、バグを報告したり、
    そのコミットで修正されたバグを分析したりした人であるのが普通です。
    クレジットを貰う人たちは、実際にコミットを行った開発者とは違いますし、
    開発者の名前はいつも自動的にバージョン管理システムに記録されていることに注意してください。
    Subversion プロジェクトでは、80数人のコミッターのうち55人が、
    自身がコミッターになる前に(通常は複数回)コミットログでクレジットを貰っていました。
    クレジットを貰うことが、
    継続して開発に参加してくれることを保証してくれるわけではもちろんありません。
    しかし少なくとも、
    プロジェクトが貢献を認めることを期待できる雰囲気を作り出すことはできます。
</para>

<!--
<para>It is important to distinguish between routine acknowledgment
and special thanks.  When discussing a particular piece of code, or
some other contribution someone made, it is fine to acknowledge their
work.  For example, saying "Daniel's recent changes to the delta code
mean we can now implement feature X" simultaneously helps people
identify which changes you're talking about and acknowledges Daniel's
work.  On the other hand, posting solely to thank Daniel for the delta
code changes serves no immediate practical purpose. It doesn't add
any information, since the version control system and other mechanisms
have already recorded the fact that he made the changes.  Thanking
everyone for everything would be distracting and ultimately
information-free, since thanks are effective largely by how much they
stand out from the default, background level of favorable comment
going on all the time.  This does not mean, of course, that you should
never thank people.  Just make sure to do it in ways that tend not to
lead to credit inflation.  Following these guidelines will
help:</para>
-->

<para>
    貢献に対してお礼をいうことと、特別なお礼は区別することが重要です。
    特定のコードや、コード以外の貢献を議論するときは、それらの仕事に対して
    感謝の意を示すとよいでしょう。たとえば、"我々が機能Xを実装できるのは、
    ダニエルさんが最近してくれたデルタコードに対する修正のおかげだ" というと、
    彼の仕事のどの修正について話しているかが同時にわかるようになります。
    一方で、ダニエルに単にお礼を言う電子メールを出すだけでは、実際すぐに役に立ちません。
    単に電子メールでお礼を言うだけでは、情報がなにもわかりません。
    なぜなら、バージョン管理システムなどの仕組みが、
    変更を行った事実を既に記録しているからです。
    何に対してもお礼を述べてしまうと、人々の興味が分散してしまい、
    最終的には価値がなくなってしまいます。なぜなら、
    お礼は普段している前向きなコメントより目立つほど効果が大きいものだからです。
    もちろん、これはお礼を述べていけないということではありません。
    与えるクレジットが多すぎて洪水を起こさないようにしましょう。
    以下に示す基準が役に立つでしょう。
</para>

<itemizedlist>
  <!--
  <listitem><para>The more ephemeral the forum, the more free you
            should feel to express thanks there.  For example,
            thanking someone for their bugfix in passing during an IRC
            conversation is fine, as is an aside in an email devoted
            mainly to other topics.  But don't post an email solely to
            thank someone, unless it's for a truly unusual feat.
            Likewise, don't clutter the project's web pages with
            expressions of gratitude.  Once you start that, it'll
            never be clear when or where to stop. And
            <emphasis>never</emphasis> put thanks into comments in the
            code; that would only be a distraction from the primary
            purpose of comments, which is to help the reader
            understand the code.</para> 
  </listitem>
  -->
  
  <listitem>
      <para>
          議論の場が短命であればあるほど、気軽にその場でお礼を述べるようにしましょう。
          たとえば、IRC上の会話でバグ修正に対してお礼を言うのはよいことです。
          また、他のトピックについて話している電子メールの中で、
          余談としてお礼を言うのもよいでしょう。
          しかし、本当にまれな功績がない限り、お礼を言うだけの電子メールを出してはいけません。
          同様に、プロジェクトのウェブページのあちこちで感謝の言葉を述べてはいけません。
          いったんそれをやり始めると、いつどこでやめたらいいのかわからなくなります。
          そして、<emphasis>絶対に</emphasis> コードのコメントでお礼を言ってはいけません。
          コードを読む人が理解の助けにする、というコメントの第一義を損なうだけだからです。
      </para> 
  </listitem>

  <!--
  <listitem><para>The less involved someone is in the project, the
            more appropriate it is to thank her for something she
            did.  This may sound counterintuitive, but it fits with
            the attitude that expressing thanks is something you do
            when someone contributes even more than you thought she
            would.  Thus, to constantly thank regular contributors for
            doing what they normally do would be to express a lower
            expectation of them than they have of themselves.  If
            anything, you want to aim for the opposite effect!</para>

           <para>There are occasional exceptions to this rule.  It's
            acceptable to thank someone for fulfilling his expected
            role when that role involves temporary, intense efforts
            from time to time.  The canonical example is the release
            manager, who goes into high gear around the time of each
            release, but otherwise lies dormant (dormant as a release
            manager, in any case&mdash;he may also be an active
            developer, but that's a different matter).
            </para>
  </listitem>
  -->

  <listitem>
      <para>
          プロジェクトに参加する頻度が少ない人であればあるほど、
          その人に対してお礼を言うのは適切です。
          これは直感に反するかもしれませんが、
          お礼は、自分が考えている以上のことをしてくれたときに言うものだ、
          という考え方とよく合います。
          よって、普段貢献してくれている人のいつもの仕事に対して頻繁にお礼を言ってしまうと、
          彼らがしていることは期待されていないものだ、
          ということを表現することになってしまいます。
          どちらかというと、反対のことをあなたは言いたいはずですよね！
      </para>

      <para>
          このルールにはときどき例外があります。
          誰かが一時的に一生懸命努力しなければならない役割を全うしたときです。
          良い例が、リリース時には本格的に作業しますが、
          そうでないときは休眠状態 (リリースマネージャーとしては休眠していますが
          &mdash; そのときは活発な開発者でもあるかもしれません。
          ですが、これは別問題です) のリリースマネージャーです。
      </para>
  </listitem>

  <!--
  <listitem><para>As with criticism and crediting, gratitude should
            be specific.  Don't thank people just for being great,
            even if they are.  Thank them for something they did that
            was out of the ordinary, and for bonus points, say
            exactly why what they did was so great.</para> 
  </listitem>
  -->

  <listitem>
      <para>
          批判することやクレジットを与えることと同様、
          感謝の意をあらわすのは特別であるべきです。たとえある人が偉大な人であっても、
          ただそれだけでお礼を述べてはいけません。
          普段以上の物事をやり遂げたことに対してお礼を言い、
          それに付け加えて、それをなし遂げたのがなぜ素晴らしいかを述べるようにしましょう。
      </para> 
  </listitem>

</itemizedlist>

<!--
<para>In general, there is always a tension between making sure that
people's individual contributions are recognized, and making sure the
project is a group effort rather than a collection of individual
glories.  Just remain aware of this tension and try to err on the
side of group, and things won't get out of hand.</para>
-->

<para>
    「プロジェクトが個別の貢献を認めること」と、
    「個別の貢献を賞賛して積み重ねず、集団全体で努力すること」はいつも対立するのが普通です。
    この対立関係を理解し、集団の中で試行錯誤するようにすれば、
    収拾がつかなくなることはないでしょう。
</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="forks">
<!--
<title>Forks</title>
-->
<title>プロジェクトの分裂</title>

<!--
<para>In <xref linkend="forkability"/><phrase output="printed">
in <xref linkend="social-infrastructure"/></phrase>, we saw how
the <emphasis>potential</emphasis> to fork has important effects on
how projects are governed.  But what happens when a fork actually
occurs?  How should you handle it, and what effects can you expect it
to have?  Conversely, when should you <emphasis>initiate</emphasis> a
fork?</para>
-->
<para>
  <phrase output="printed"><xref linkend="social-infrastructure"/> の</phrase>
  <xref linkend="forkability"/> では、
  プロジェクトが分裂する <emphasis>可能性</emphasis>
  がプロジェクトの管理体制に重大な影響を及ぼすことを取り上げました。
  しかし、実際に分裂した場合はどうなるのでしょう?
  どうやって処理するのでしょうか? それがどんな影響を及ぼすのでしょうか?
  逆に、あなたのほうがそうしなければならないことはあるでしょうか?
</para>

<!--
<para>The answers depend on what kind of fork it is.  Some forks are
due to amicable but irreconcilable disagreements about the direction
of the project; perhaps more are due to both technical disagreements
and interpersonal conflicts.  Of course, it's not always possible to
tell the difference between the two, as technical arguments may
involve personal elements as well.  What all forks have in common is
that one group of developers (or sometimes even just one developer)
has decided that the costs of working with some or all of the others
now outweigh the benefits.</para>
-->
<para>
  その答えは、状況によって変わります。
  プロジェクトの進む道に関して相容れない意見の相違が出てきたために
  友好的にプロジェクトが分かれることもありますが、
  おそらくそれよりもっと多いのは
  技術的な意見の相違や人間関係の問題によって
  プロジェクトが分裂することでしょう。
  もちろん、これらを明確に区別できるとは限りません。
  技術的な議論は往々にして個人的な議論の要素も含んでいるからです。
  共通しているのは、ある開発者グループ
  (あるいはひとりの開発者だけのこともあります)
  にとってその他のメンバーとの共同作業のコストに見合う利益が
  得られないと判断したということです。
</para>

<!--
<para>Once a project forks, there is no definitive answer to the
question of which fork is the "true" or "original" project.  People
will colloquially talk of fork F coming out of project P, as though P
is continuing unchanged down some natural path while F diverges into
new territory, but this is, in effect, a declaration of how that
particular observer feels about it.  It is fundamentally a matter of
perception: when a large enough percentage of observers agree, the
assertion starts to become true.  It is not the case that there is an
objective truth from the outset, one that we are only imperfectly able to
perceive at first.  Rather, the perceptions <emphasis>are</emphasis>
the objective truth, since ultimately a project&mdash;or a
fork&mdash;is an entity that exists only in people's minds
anyway.</para>
-->
<para>
  プロジェクトが分裂したときの、どちらが「本家」だとかどちらが「元祖」
  だとかいう問いへの明確な答えはありません。「プロジェクト P
  から分裂した F」というように、あたかも P は何も変わらないままで
  F がそこから新たに分岐したと話す人もいます。
  しかし、実際のところこれは「その人がどのように感じているか」
  を言っているにすぎません。
  これは基本的に認知度の問題です。周囲の大多数が同意すれば、
  その主張が真実だということになります。
  客観的にみた真実が最初からあるというわけではありません。
  不十分ながらも「なんとなくこうじゃないかな」と考えることしかできません。
  そして、まわりの認知度こそがむしろ客観的な真実と言えます。
  結局のところ本家 (あるいは分家) の区別
  というものは人の心の中にのみ存在するものだからです。
</para>

<!--
<para>If those initiating the fork feel that they are
sprouting a new branch off the main project, the perception question
is resolved immediately and easily.  Everyone, both developers and
users, will treat the fork as a new project, with a new name (perhaps
based on the old name, but easily distinguishable from it), a separate
web site, and a separate philosophy or goal.  Things get messier,
however, when both sides feel they are the legitimate guardians of the
original project and therefore have the right to continue using the
original name.  If there is some organization with trademark rights to
the name, or legal control over the domain or web pages, that usually
resolves the issue by fiat: that organization will decide who is the
project and who is the fork, because it holds all the cards in a
public relations war.  Naturally, things rarely get that far: since
everyone already knows what the power dynamics are, they will avoid
fighting a battle whose outcome is known in advance, and just jump
straight to the end.</para>
-->
<para>
  もしプロジェクトを分裂させようと考えた人が
  メインプロジェクトから離れて新たなブランチを立ち上げたのなら、
  認知度に関する問題はすぐに解決するでしょう。
  開発者もユーザーも、
  新たに登場した競合プロジェクトが新しいプロジェクトであることを認め、
  新しい名前 (元の名前に由来するものかもしれませんが、
  容易に区別できるもの) や新しいウェブサイト、
  新しい目標を持つものであることを認めることでしょう。
  しかし、両方の陣営が「自分のほうこそがこのプロジェクトの本流であり、
  名前を使い続ける権利がある」と考えている場合は話がややこしくなります。
  もしそのプロジェクト名の商標権やドメイン、ウェブページなどを
  何らかの組織で管理している場合は、通常はその組織の考えで問題を解決されます。
  どちらが本家でどちらが分家なのかをその組織が決めることになるわけです。
  というのも、広報合戦になればその組織にはかないっこないからです。
  当然、そんな自体になることはめったにありません。
  力関係についてはみんなよくわかっており、
  結果のわかっているケンカなどしないでしょうから。
</para>

<!--
<para>Fortunately, in most cases there is little doubt as to which is
the project and which is the fork, because a fork is, in essence, a vote
of confidence.  If more than half of the developers are in favor of
whatever course the fork proposes to take, usually there is no need to
fork&mdash;the project can simply go that way itself, unless it is run
as a dictatorship with a particularly stubborn dictator.  On the other
hand, if fewer than half of the developers are in favor, the fork is a
clearly minority rebellion, and both courtesy and common sense
indicate that it should think of itself as the divergent branch rather
than the main line.</para>
-->
<para>
  幸いなことに、たいていの場合は「どっちが本流でどっちが傍流か」
  といった争いは起こりません。というのも、
  実際に分裂してしまうかどうかは、
  その動きに対する信任投票のような力学で決まるからです。
  もし開発者の過半数がプロジェクトを分裂させる動きに賛同したのなら、
  通常はもはやそうする必要はありません。
  強情な独裁者がプロジェクトを仕切っているのでもない限り、
  わざわざ分裂させなくてもそのプロジェクトの中で動きを進めていけばいいのです。
  一方、もし分裂させようと考えているのが全体の半数より少ないのなら、
  それは明らかに少数派の反乱です。礼儀的な意味でも、
  また常識で考えても彼らが本流となることはないでしょう。
  本流から分岐した別のものと考えるべきです。
</para>

<sect2 id="forks-handling">
<!--
<title>Handling a Fork</title>
-->
<title>分裂の動きをうまく処理する</title>

<!--
<para>If someone threatens a fork in your project, keep calm and
remember your long-term goals.  The mere
<emphasis>existence</emphasis> of a fork isn't what hurts a project;
rather, it's the loss of developers and users.  Your real aim,
therefore, is not to squelch the fork, but to minimize these harmful
effects.  You may be mad, you may feel that the fork was unjust and
uncalled for, but expressing that publicly can only alienate undecided
developers.  Instead, don't force people to make exclusive choices,
and be as cooperative as is practicable with the fork.  To start with,
don't remove someone's commit access in your project just because he
decided to work on the fork.  Work on the fork doesn't mean that
person has suddenly lost his competence to work on the original
project; committers before should remain committers afterward.  Beyond
that, you should express your desire to remain as compatible as
possible with the fork, and say that you hope developers will port
changes between the two whenever appropriate.  If you have
administrative access to the project's servers, publicly offer the
forkers infrastructure help at startup time.  For example, offer them
a complete, deep-history copy of the version control repository, if
there's no other way for them to get it, so that they don't have to
start off without historical data (this may not be necessary depending
on the version control system).  Ask them if there's anything else
they need, and provide it if you can.  Bend over backward to show
that you are not standing in the way, and that you want the fork to
succeed or fail on its own merits and nothing else.</para>
-->
<para>
  プロジェクト内で誰かが新しい競合プロジェクトを立ち上げる動きを見せ始めたら、
  まずは落ち着いてあなたの長期目標を思い出しましょう。
  分裂すること<emphasis>自体</emphasis>はプロジェクトにとって害ではありません。
  むしろそれによって開発者やユーザーを失うことが問題なのです。
  つまり、あなたのやるべきことはそうした動きの芽を摘むことではなく
  その被害を最小限に抑えることなのです。
  腹が立つかもしれません。
  そんな動きは不当なものであり、
  また不要なものであると感じるかもしれません。
  でも、そんな感情を表に出したところで、
  態度を決めかねている開発者をあなたから遠ざけることにしかなりません。
  開発者たちに、態度を明確にするよう要求してはいけません。
  そして、新しくプロジェクトを立ち上げる人たちともできるだけ協力的に接するようにしましょう。
  まず第一に、誰かが新しいプロジェクト側で作業をすることになったからといって、
  その人のコミット権を剥奪するようなことはやめましょう。
  新しいプロジェクトの側で作業をすることになったからといって、
  元のプロジェクトにおけるその人の権限が即刻失われるというわけではありません。
  これまでコミッターであった人は、これからもコミッターであり続けるべきです。
  さらに、新しいプロジェクト側とはできるだけ仲良くやっていきたいという意志を示すことも大切です。
  必要に応じて、お互いのプロジェクトの変更内容を相手側にも反映させられるような関係を保ちましょう。
  もしあなたがプロジェクトのサーバの管理権限を持っているのなら、
  プロジェクトを始めるにあたってのインフラの支援を提案しましょう。
  たとえば、そのプロジェクトの過去のバージョン管理リポジトリのデータのコピーを提供すれば、
  彼らが過去のデータを使えるようになります
  (使用するバージョン管理システムによっては、
  わざわざそうしなくても過去のデータを利用できるものもあります)。
  何か必要なものがないかどうかを彼らに聞き、
  可能な限り支援するようにしましょう。
  あなたが邪魔をするつもりがないこと、
  そして (他の要因ではなく)
  あくまでも実力次第で新しいプロジェクトの成功か失敗が決まるような状態にすることを態度で示すことが大切です。
</para>

<!--
<para>The reason to do all this&mdash;and do it publicly&mdash;is not
to actually help the fork, but to persuade developers that your side
is a safe bet, by appearing as non-vindictive as possible.  In war it
sometimes makes sense (strategic sense, if not human sense) to force
people to choose sides, but in free software it almost never does.  In
fact, after a fork some developers often openly work on both projects,
and do their best to keep the two compatible.  These developers help
keep the lines of communication open after the fork.  They allow your
project to benefit from interesting new features in the fork (yes, the
fork may have things you want), and also increase the chances of a
merger down the road.</para>
-->
<para>
  これらすべてを (公式に) 行う理由は、
  新しくプロジェクトを立ち上げる人たちを助けるためではありません。
  「こっち側にいたほうが何かと安全ですよ」
  ということを、できるだけ押しつけがましくない方法で開発者たちに伝えるためです。
  戦争においては、どちらの陣営に属するのかを明確にさせることにはそれなりの意味もあります
  (戦略的な意味、あるいは人間的な意味において)。
  しかし、フリーソフトウェアの世界においてはこれはまったく無意味です。
  実際、プロジェクトを立ち上げた後でも両方のプロジェクトでおおっぴらに活動する開発者も中にはいます。
  両者の互換性を保つために力を注いでいたりするわけです。
  彼らのおかげで、分裂した後でも両方のプロジェクトの間の交流ができるようになります。
  彼らは、新しいプロジェクトの側で追加したすてきな新機能をあなたのプロジェクトにもたらしてくれるかもしれません
  (そう、あなたの望むものをあちら側で作っている可能性もあるでしょう)。
  そして、将来ふたたび両者が合流するという望みも残してくれます。
</para>

<!--
<para>Sometimes a fork becomes so successful that, even though it was
regarded even by its own instigators as a fork at the outset, it
becomes the version everybody prefers, and eventually supplants the
original by popular demand.  A famous instance of this was the
GCC/EGCS fork.  The <firstterm>GNU Compiler Collection</firstterm>
(<firstterm>GCC</firstterm>, formerly the <firstterm>GNU C
Compiler</firstterm>) is the most popular open source native-code
compiler, and also one of the 
most portable compilers in the world.  Due to disagreements between the GCC's
official maintainers and Cygnus Software,<footnote><para>Now part of
RedHat (<ulink url="http://www.redhat.com/"/>).</para></footnote> one
of GCC's most active developer groups, Cygnus created a fork of GCC
called <firstterm>EGCS</firstterm>.  The fork was deliberately
non-adversarial: the EGCS developers did not, at any point, try to
portray their version of GCC as a new official version.  Instead, they
concentrated on making EGCS as good as possible, incorporating patches
at a faster rate than the official GCC maintainers.  EGCS gained in
popularity, and eventually some major operating system distributors
decided to package EGCS as their default compiler instead of GCC.  At
this point, it became clear to the GCC maintainers that holding on to
the "GCC" name while everyone switched to the EGCS fork would burden
everyone with a needless name change, yet do nothing to prevent the
switchover.  So GCC adopted the EGCS codebase, and there is once again
a single GCC, but greatly improved because of the fork.</para>
-->
<para>
  時には新しいプロジェクトのほうが大成功を収めることもあります。
  最初に分裂させた当事者でさえ自分たちのほうが分家だと認めているにもかかわらず、
  みんながそちらのバージョンのほうをずっと好むようになり、
  結局本家に取って代わるようになるといったものです。
  有名なのは GCC/EGCS の例です。
  <firstterm>GNU Compiler Collection</firstterm>
  (<firstterm>GCC</firstterm>、これは以前は <firstterm>GNU C
  Compiler</firstterm> という名前でした)
  は、オープンソースのネイティブコードコンパイラとしてもっともよく知られているもので、
  またもっとも多くの環境に移植されているコンパイラでもあります。
  GCC の公式メンテナーと Cygnus Software
  <footnote>
    <para>
      現在は RedHat (<ulink url="http://www.redhat.com/"/>)
      に吸収されました。
    </para>
  </footnote>
  との間の意見の相違が原因で、GCC のもっとも活発な開発者グループのひとつであった
  Cygnus は GCC を離れて <firstterm>EGCS</firstterm>
  という新しいプロジェクトを立ち上げました。
  EGCS 側は、意図的にオリジナルと敵対することを避けました。
  EGCS の開発者は、決して自分たちのバージョンを公式な GCC にしようとは思わなかったのです。
  そうではなく、EGCS をよりよいものにすることだけに注力し、
  パッチを受け入れる頻度も公式の GCC メンテナーより多くしました。
  EGCS の人気は増し、大手の OS ディストリビュータの中にも
  デフォルトのコンパイラとして GCC ではなく EGCS を採用するところが出てきました。
  ここにきて、さすがに "GCC" の名前を持っている本家 GCC のメンテナーたちもわかってきました。
  みんなが EGCS に移行するときにわざわざ名前を変更しなければならないのは面倒だということ、
  そしてもはや GCC の名前を引き渡さざるをえないということを。
  そこで、GCC は EGCS のコードを受け入れることにしました。
  GCC は再び統一されたのです。
  オリジナルから分かれて、新たにプロジェクトを立ち上げたおかげで、
  中身はとても改良されたものになっています。
</para>

<!--
<para>This example shows why you cannot always regard a fork as an
unadulteratedly bad thing.  A fork may be painful and unwelcome at the
time, but you cannot necessarily know whether it will succeed.
Therefore, you and the rest of the project should keep an eye on it,
and be prepared not only to absorb features and code where possible,
but in the most extreme case to even join the fork if it gains the
bulk of the project's mindshare.  Of course, you will often be able to
predict a fork's likelihood of success by seeing who joins it.  If the
fork is started by the project's biggest complainer and joined by a
handful of disgruntled developers who weren't behaving constructively
anyway, they've essentially solved a problem for you by forking, and
you probably don't need to worry about the fork taking momentum away
from the original project.  But if you see influential and respected
developers supporting the fork, you should ask yourself why.  Perhaps
the project was being overly restrictive, and the best solution is to
adopt into the mainline project some or all of the actions
contemplated by the fork&mdash;in essence, to avoid the fork by
becoming it.</para>
-->
<para>
  この例ひとつとっても、
  プロジェクトの分裂を単純に悪とみなすべきではないことがよくわかります。
  実際に起こったときは苦痛を感じてあまり歓迎されないかもしれませんが、
  それが成功するかどうかなんてそのときには知ることはできません。
  したがって、あなたを含むプロジェクトのメンバーができることといえば、
  彼らを見守り続けて新機能やコードを取り込めるように準備しておくことくらいです。
  もしそのほうがプロジェクト全体の利益になると皆が同意したら、
  究極の選択として彼らに合流することも考えるべきでしょう。
  もちろん、それ加わるメンバーをみれば
  それが成功するか失敗するかをある程度予測できることも多いでしょう。
  たとえば、プロジェクト内で文句ばかり言っていた人が
  一握りの不満分子 (彼らもプロジェクト内では建設的な振る舞いをしていませんでした)
  を引き連れて新たな競合プロジェクトを立ち上げたとしましょう。
  こんな場合は、むしろそうしてくれたほうがありがたかったでしょうね。
  彼らが本家に取って代わることを心配する必要もないでしょう。
  しかし、もし皆に尊敬されている実力者が新しいプロジェクトに参加しているというのなら、
  なぜそんなことになったのか自分に問い返してみましょう。
  おそらく、あなたのプロジェクトには制約が多すぎ、
  やりたいことの一部 (あるいはすべて)
  を実現するにはプロジェクトのコピーを使って競合プロジェクトを立ち上げるしかなかったのでしょう。
  要するに、自らが行動することで他の分裂の動きを避けるということです。
</para>

</sect2>

<sect2 id="forks-initiating">
<!--
<title>Initiating a Fork</title>
-->
<title>新しいプロジェクトを立ち上げる</title>

<!--
<para>All the advice here assumes that you are forking as a last
resort.  Exhaust all other possibilities before starting a fork.
Forking almost always means losing developers, with only an uncertain
promise of gaining new ones later.  It also means starting out with
competition for users' attention: everyone who's about to download the
software has to ask themselves: "Hmm, do I want that one or the other
one?"  Whichever one you are, the situation is messy, because a
question has been introduced that wasn't there before.  Some people
maintain that forks are healthy for the software ecosystem as a whole,
by a standard natural selection argument: the fittest will survive,
which means that, in the end, everyone gets better software.  This may
be true from the ecosystem's point of view, but it's not true from the
point of view of any individual project.  Most forks do not succeed,
and most projects are not happy to be forked.</para>
-->
<para>
  ここでのアドバイスは、最後の手段としてオリジナルのコピーを使い、
  競合プロジェクトを立ち上げざるを得なくなった人たちに向けたものです。
  立ち上げを始める前に、まず他の可能性を徹底的に試すようにしましょう。
  実際に競合プロジェクトを立ち上げると、
  ほとんどの場合は開発者を失うことになります。
  仮に後で新しい開発者が増えるとしても、そうなる確証はありません。
  また、競合プロジェクトを立ち上げるということは、
  ユーザーの気を引くための競争が始まるということを意味します。
  そのソフトウェアをダウンロードしようとした人たちはみんな悩むことでしょう。
  "で、いったい私はどっちをダウンロードすりゃいいの?"
  あなたがどちらのプロジェクトにいたとしても、状況は混沌としています。
  そんな質問は、プロジェクトが分裂する前には出なかったわけですから。
  中には、プロジェクトが分裂することはソフトウェアの生態系上ごく自然なことだという人もいます。
  自然淘汰の結果、一番環境に適合したものが生き残る。
  つまり、結局はみんながよりよいソフトウェアを使えるようになるというわけです。
  生態系という意味ではそれが真実かもしれませんが、
  個々のプロジェクトにおいては決して真実であるとはいえません。
  プロジェクトが分裂しても、
  新たに立ち上がったプロジェクトが成功することはほとんどありません。
  また、ほとんどのプロジェクトは分裂してもよい結果を生みません。
</para>

<!--
<para>A corollary is that you should not use the threat of a fork as
an extremist debating technique&mdash;"Do things my way or I'll fork
the project!"&mdash;because everyone is aware that a fork that fails
to attract developers away from the original project is unlikely to
survive long.  All observers&mdash;not just developers, but users and
operating system packagers too&mdash;will make their own judgement about
which side to choose.  You should therefore appear extremely reluctant
to fork, so that if you finally do it, you can credibly claim it was
the only route left.</para>
-->
<para>
  結論としては、議論のネタとしてプロジェクトが分裂することを持ち出してはいけないということです。
  &mdash;"俺の言うとおりにしてくれなきゃプロジェクトが分裂しちゃうよ!"&mdash; といった具合に。
  なぜなら、みんな知っているからです。
  プロジェクトを分裂させたとしても、
  開発者の興味をひくことができなかったら、
  新しい競合プロジェクトの行く末は長くないことが多いということを。
  すべての関係者 (開発者だけではなくユーザーや各 OS 向けのパッケージ作成担当者なども)
  がどちら側を選ぶのかの判断を迫られることになります。
  したがって、あくまでもそれ以外のやり方がないことが確実に主張できる状況にならない限り
  プロジェクトを分裂させるのは避けるようにしましょう。
</para>

<!--
<para>Do not neglect to take <emphasis>all</emphasis> factors into
account in evaluating the potential success of your fork.  For
example, if many of the developers on a project have the same
employer, then even if they are disgruntled and privately in favor of
a fork, they are unlikely to say so out loud if they know that their
employer is against it.  Many free software programmers like to think
that having a free license on the code means no one company can
dominate development.  It is true that the license is, in an ultimate
sense, a guarantor of freedom&mdash;if others want badly enough to
fork the project, and have the resources to do so, they can.  But in
practice, some projects' development teams are mostly funded by one
entity, and there is no point pretending that the entity's support
doesn't matter.  If it is opposed to the fork, its developers are
unlikely to take part, even if they secretly want to.</para>
-->
<para>
  プロジェクトを分裂させることで生まれる、
  新しいプロジェクトが成功するかどうかの可能性を評価するにあたっては、
  <emphasis>すべての</emphasis> 要素を考慮にいれることを忘れないようにしましょう。
  たとえば、
  プロジェクトの開発者の多くが同じ雇い主のもとで働いているとしましょう。
  たとえ彼らが不満を抱いて個人的に新しいプロジェクトの立ち上げを考えたとしても、
  雇い主がそれに反対していると知れば
  声を大にしてそれを言うことはないでしょう。
  フリーソフトウェアプログラマーの多くは、
  コードにフリーなライセンスが適用されていたら
  特定の企業に開発が左右されることはないと考えがちです。
  究極の意味では、ライセンスが自由を保証しているというのは事実です。
  だれかが本当に元のプロジェクトから分かれて、
  新しい競合プロジェクトの立ち上げを望み
  それだけのリソースがあるのなら、できないことはないでしょう。
  しかし実際のところは、いくつかのプロジェクトの開発チームは
  ほぼ特定の団体が資金源になっていることが多く、
  それを隠そうとしても無意味です。
  その団体がそうした動きに反対しているようなら、
  たとえ開発者が参加する気があったとしても
  実際には参加することがないでしょう。
</para>

<!--
<para>If you still conclude that you must fork, line up support
privately first, then announce the fork in a non-hostile tone.  Even
if you are angry at, or disappointed with, the current maintainers,
don't say that in the message.  Just dispassionately state what led
you to the decision to fork, and that you mean no ill will toward the
project from which you're forking.  Assuming that you do consider it a
fork (as opposed to an emergency preservation of the original
project), emphasize that you're forking the code and not the name, and
choose a name that does not conflict with the project's name.  You can
use a name that contains or refers to the original name, as long as it
does not open the door to identity confusion.  Of course it's fine to
explain prominently on the fork's home page that it descends from the
original program, and even that it hopes to supplant it.  Just don't
make users' lives harder by forcing them to untangle an identity
dispute.</para>
-->
<para>
  それでもまだ「今のプロジェクトから分かれて、
  新しいプロジェクトを立ち上げる以外ない」と思っているなら、
  まずは個人的に賛同してくれる仲間を集めましょう。
  それから、そうすることを (けんか腰ではなく) おだやかに宣言します。
  たとえ現在のメンテナーにたいして怒りや失望の気持ちがあったとしても、
  それを実際に言ってはいけません。
  あなたが決心したきっかけは何なのかということ、
  そして現在のプロジェクトに対して悪意はまったくないということを冷静に説明します。
  プロジェクトを分裂させるつもり (元のプロジェクトを緊急待避させるのではなく)
  であるなら、あくまでもコードを派生させるのであってオリジナルと同じ名前を使うのではないということを強調し、
  元のプロジェクトの名前と衝突することのない名前を選びます。
  元のプロジェクトときちんと区別できるような名前であれば、
  その一部に元のプロジェクトの名前を含めることもできます。
  もちろん、新しいプロジェクトのホームページで
  「これは元のプログラムから分離したものであり、元のプログラムを置き換えることを目指している」
  と説明するのはかまいません。
  区別しにくいような状況にユーザーを陥れてしまうことは避けましょう。
</para>

<!--
<para>Finally, you can get things started on the right foot by
automatically granting all committers of the original project commit
access to the fork, including even those who openly disagreed with the
need for a fork.  Even if they never use the access, your message is
clear: there are disagreements here, but no enemies, and you welcome
code contributions from any competent source.</para>
-->
<para>
  最後に、よいスタートを切るためのひとつの方法として、
  元のプロジェクトのコミッター全員に対して (たとえ明示的に新しいプロジェクト立ち上げに反対していたとしても)
  新しいプロジェクトのコミット権を与えてしまうというものもあります。
  たとえ彼らがそのアクセス権を一切使用しなかったとしても、
  あなたからの
  「意見の不一致はあったけれども、敵になったというわけではない。
  よいコードならどなたからのものでも歓迎します」というメッセージは伝わります。
</para>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
