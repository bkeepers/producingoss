<chapter id="social-infrastructure">

<title>プロジェクトの政治構造と社会構造</title>

<simplesect>

<!--
<para>The first questions people usually ask about free software are
"How does it work?  What keeps a project running?  Who makes the
decisions?"  I'm always dissatisfied with bland responses about
meritocracy, the spirit of cooperation, code speaking for itself, etc.
The fact is, the question is not easy to answer.  Meritocracy,
cooperation, and running code are all part of it, but they do little
to explain how projects actually run on a day-to-day basis, and say
nothing about how conflicts are resolved.</para>
-->

<para>
    フリーソフトウェアについて人々がよくする最初の質問は、
    "プロジェクトはどういう仕組みで動くの？
    プロジェクトを維持しているものは何？ 誰に決定権があるの？" といったものです。 
    私は、実力主義や、協力の精神、読めば何をやっているかわかるコード、 などについて当たり障りなく答えて、
    いつも釈然としない思いがします。 実のところ、こうした質問に答えるのは簡単ではありません。
    実力主義、協力、そして動くコードは全て答えの一部ではありますが、 
    日々の単位でプロジェクトがどう動いているかについて殆ど説明していませんし、
    プロジェクト内で起こる衝突をどうやって解決するのかについては何も触れていません。 
</para>

<!--
<para>This chapter tries to show the structural underpinnings
successful projects have in common.  I mean "successful" not just in
terms of technical quality, but also operational health and
survivability.  Operational health is the project's ongoing ability to
incorporate new code contributions and new developers, and to be
responsive to incoming bug reports.  Survivability is the project's
ability to exist independently of any individual participant or
sponsor&mdash;think of it as the likelihood that the project would
continue even if all of its founding members were to move on to other
things.  Technical success is not hard to achieve, but without a
robust developer base and social foundation, a project may be unable
to handle the growth that initial success brings, or the departure of
charismatic individuals.</para>
-->

<para>
    この章では、成功しているオープンソースプロジェクトに共通している、
    基本的な仕組みを説明します。
    "成功している" というのは、ただ技術的に質が高いだけでなく、
    プロジェクトが健全に運営されており、生き残る力が強いことを言います。
    新しいコードや開発者を受け入れたり、
    バグレポートに素早く反応することを継続できていれば、
    プロジェクトは健全に運営されているといえます。
    特定の個人やスポンサーに依存しなくてもプロジェクトを続けられれば、
    生き残る力が強いといえます。&mdash;
    プロジェクトを立ち上げたメンバー全員が他に移ったとしても、
    プロジェクトが生き残る可能性があるかを考えてみてください。
    技術的に成功することは難しくありません。
    しかし開発者の層が薄かったり、社会的な基盤が弱かったりすると、
    プロジェクトが初期段階で成功して膨張したり、
    カリスマ的な人がいなくなったときに、対応できないかもしれません。
</para>
     
<!--
<para>There are various ways to achieve this kind of success.  Some
involve a formal governance structure, by which debates are resolved,
new developers are invited in (and sometimes out), new features
planned, and so on.  Others involve less formal structure, but more
conscious self-restraint, to produce an atmosphere of fairness that
people can rely on as a <foreignphrase>de facto</foreignphrase> form
of governance.  Both ways lead to the same result: a sense of
institutional permanence, supported by habits and procedures that are
well understood by everyone who participates.  These features are even
more important in self-organizing systems than in centrally-controlled
ones, because in self-organizing systems, everyone is conscious that a
few bad apples can spoil the whole barrel, at least for a while.</para>
-->

<para>
    オープンソースプロジェクトを成功させる方法はたくさんあります。   
    議論をまとめたり、新しい開発者を勧誘したり（時には追い出したり）、
    新しい機能を企画するなどの、
    型にはまった統治の仕組みもあれば、
    形になって表れないものとして、
    メンバーが信頼し、事実上プロジェクトを支配する公平な雰囲気を作り出すために、
    より意識的に自制することも含まれます。
    プロジェクトは、
    参加する人達がよく理解している習慣や手続きに支えられて存続するという意味で、
    どちらも行き着くところは同じです。
    これらの方法は、中央集権的なプロジェクトより、
    自発的に成長するプロジェクトで重要になります。
    自発的に成長するプロジェクトでは、少なくともしばらくは、
    よくないことが全体に影響することを参加する人が意識しているからです。
</para>

<sect1 id="forkability">
<title>プロジェクトが分裂する可能性</title>

<!--
<para>The indispensable ingredient that binds developers together on a
free software project, and makes them willing to compromise when
necessary, is the code's <firstterm>forkability</firstterm>: the
ability of anyone to take a copy of the source code and use it to
start a competing project, known as a <firstterm>fork</firstterm>.
The paradoxical thing is that the <emphasis>possibility</emphasis> of
forks is usually a much greater force in free software projects than
actual forks, which are very rare.  Because a fork is bad for everyone
(for reasons examined in detail in
<xref linkend="forks"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>), the more serious
the threat of a fork becomes, the more willing people are to
compromise to avoid it.</para>
-->

<para>
    開発者をフリーソフトウェアプロジェクトに繋ぎ止め、
    必要な時に妥協してもらうのに不可欠な要素は、
    コードが <firstterm>派生する</firstterm> ことです。つまり、
    誰かがソースコードのコピーを使って、
    新しい競合プロジェクトを立ち上げることです。これは <firstterm>フォーク</firstterm> という用語でも知られています。
    逆説的なのは、プロジェクトが分裂する <emphasis>可能性</emphasis> の方が、
    まれながら実際に分裂することよりも、
    フリーソフトウェアプロジェクトにとって大きな力になるということです。
    プロジェクトが分裂することは万人にとってよくないことなので、
    (詳細な理由は、<phrase output="printed"><xref linkend="managing-volunteers"/></phrase> の <xref linkend="forks"/> で述べています。)
    その恐れが大きくなればなるほど、
    人々はそれを避けようとして妥協する可能性が大きくなります。
</para>

<!--
<para>Forks, or rather the potential for forks, are the reason there
are no true dictators in free software projects.  This may seem like a
surprising claim, considering how common it is to hear someone called
the "dictator" or "tyrant" in a given open source project.  But this
kind of tyranny is special, quite different from the conventional
understanding of the word.  Imagine a king whose subjects could copy
his entire kingdom at any time and move to the copy to rule as they
see fit.  Would not such a king govern very differently from one whose
subjects were bound to stay under his rule no matter what he
did?</para>
-->

<para>
    プロジェクトが分裂すること、いやむしろその可能性と言った方がよいでしょう。
    この可能性こそが、フリーソフトウェアプロジェクトに本当の意味での独裁者が存在しない理由になっています。
    これはオープンソースプロジェクトで "独裁者" とか "暴君" と呼ばれる人がいるとよく聞くことを思えば、突飛な主張かもしれません。
    しかし、この手の "暴政" という言葉は特別なもので、伝統的に理解されている暴政の意味とは違うものです。
    いつでも自分の王国をコピーでき、
    いいように支配するためにそのコピーを持ち歩ける家来がいる王様を想像してみてください。
    そんな王様が、自分が何をしようと家来が自分の支配下にいると決まっている王様と同じ振舞いをするでしょうか？ するはずがないですよね。
</para>

<!--
<para>This is why even projects that are not formally organized as
democracies are, in practice, democracies when it comes to important
decisions.  Replicability implies forkability; forkability implies
consensus.  It may well be that everyone is willing to defer to one
leader (the most famous example being Linus Torvalds in Linux kernel
development), but this is because they <emphasis>choose</emphasis> to
do so, in an entirely non-cynical and non-sinister way.  The dictator
has no magical hold over the project.  A key property of all open
source licenses is that they do not give one party more power than any
other in deciding how the code can be changed or used.  If the dictator
were to suddenly start making bad decisions, there would be
restlessness, followed eventually by revolt and a fork.  Except, of
course, things rarely get that far, because the dictator compromises
first.</para>
-->

<para>
    そんなわけで、民主主義に従って組織化されていないプロジェクトでさえ、
    重要な決定をする段になると民主主義の仕組みを使います。
    コードを複製できるということは、それを使って競合プロジェクトを立ち上げ、プロジェクトを分裂させられるということです。
    プロジェクトが分裂させられるということは、
    それを避けるために合意が形成されることを意味しています。
    全員がひとりのリーダーに従うこと（もっとも有名な例が、Linux kernel 開発の Linus Torvalds です）もあるかもしれませんが、
    これは 完全にひねくれているわけでもなく、悪意があるわけでもなく、彼らがそうすることを <emphasis>選んでいる</emphasis> からです。
    独裁者がプロジェクトを魔法のように支配しているわけではないのです。
    全てのオープンソースライセンスに当てはまる、鍵となる性質は、
    コードの変更のしかたや、使用方法について、特定の集団を差別しないということです。
    仮に独裁者が突然よくない決断をしはじめたとしましょう。
    その場合不穏な空気が漂い、結局反乱が起きてプロジェクトが分裂してしまいます。
    もちろん、そういった場合は独裁者がはじめに謝罪するので、
    実際にそういったことが起こることは滅多にありません。
</para>

<!--
<para>But just because forkability puts an upper limit on how much
power anyone can exert in a project doesn't mean there aren't
important differences in how projects are governed.  You don't want
every decision to come down to the last-resort question of who is
considering a fork.  That would get tiresome very quickly, and sap
energy away from real work.  The next two sections examine different
ways to organize projects such that most decisions go smoothly.  These
two examples are somewhat idealized extremes; many projects fall
somewhere along a continuum between them.</para>
-->

<para>
    しかし、
    プロジェクトが分裂することがプロジェクトで権力を行使することに歯止めをかけているからといって、
    プロジェクトを統率するやり方に重大な違いがあるわけではありません。
    決断をするたびに、競合プロジェクトを立ち上げようと思ってる人いる？ と質問したくはないはずです。
    そんなことをすればすぐに疲れてしまい、仕事をする活力が失われていきます。
    次のふたつのセクションでは、
    ほとんどの決断を円滑に行えるようにプロジェクトを統率する方法を調べていきます。
    そこではふたつ例をあげていますが、いささか極度に理想的なものです。
    多くのプロジェクトは、ふたつの状態の間のどこかに位置しているのです。
</para>

</sect1>

</simplesect>

<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title>優しい独裁者</title>

<!--
<para>The <firstterm>benevolent dictator</firstterm> model is exactly
what it sounds like: final decision-making authority rests with one
person, who, by virtue of personality and experience, is expected
to use it wisely.</para>
-->

<para>
    <firstterm>優しい独裁者(Benevolent Dictator)</firstterm> モデルとは、
    正確には次のようなものです。
    つまり、最終的な決断を行う権限が、
    人格や経験が優れているという理由で、
    賢明に権限を行使できるひとりの人に委ねられていることです。
</para>

<!--
<para>Although "benevolent dictator" (or <firstterm>BD</firstterm>)is
the standard term for this role, it would be better to think of it as
"community-approved arbitrator" or "judge".  Generally, benevolent
dictators do not actually make all the decisions, or even most of the
decisions.  It's unlikely that one person could have enough expertise
to make consistently good decisions across all areas of the project,
and anyway, quality developers won't stay around unless they have some
influence on the project's direction.  Therefore, benevolent dictators
commonly do not dictate much.  Instead, they let things work
themselves out through discussion and experimentation whenever
possible.  They participate in those discussions themselves, but as
regular developers, often deferring to an area maintainer who has more
expertise.  Only when it is clear that no consensus can be reached,
and that most of the group <emphasis>wants</emphasis> someone to guide
the decision so that development can move on, do they put their foot
down and say "This is the way it's going to be."  Reluctance to make
decisions by fiat is a trait shared by virtually all successful
benevolent dictators; it is one of the reasons they manage to keep the
role.</para>
-->

<para>
    "優しい独裁者" （略して <firstterm>BD</firstterm> ともいいます）という言葉は、
    こうした役割に対して標準的に使われる用語ですが、
    むしろ "コミュニティーが認めた調停者" もしくは "審判" と考えた方がいいでしょう。
    一般的には、優しい独裁者が実際に全ての、
    もしくはほとんどの決定を行っているわけではありません。
    ある人がプロジェクトの全ての領域に渡って、
    優れた決断を一貫して行う十分な技能があることはまれです。
    そして優れた開発者は、プロジェクトの方向性に影響を与えられなければ、
    結局プロジェクトから去ってしまいます。
    よって、優しい独裁者は普通多く指示を出したりはしません。
    むしろいつでも可能な限り、議論や実験を行う作業を開発者に任せておきます。
    優しい独裁者は議論そのものには参加しますが、普通の開発者として、
    自分より優れた技能を持つメンテナーの領域では、たびたび彼らに従います。
    結論が出ず、ほとんどのグループが開発を続けるために誰かが判断の指針を示すことを明確に <emphasis>望んでいる</emphasis> 場合だけ、
    彼らは敢えて異を唱えてこういうのです。「これがあるべき方向性だ」と。
    命令することで決定するのを我慢するのは、
    成功している優しい独裁者に事実上共通する特性です。
    これが、彼らが優しい独裁者という役割を維持している理由のひとつなのです。
</para>

<sect2 id="benevolent-dictator-qualifications">
<title>誰がよき「優しい独裁者」になれるか？</title>

<!--
<para>Being a BD requires a combination of traits.  It needs, first of
all, a well-honed sensitivity to one's own influence in the project,
which in turn brings self-restraint.  In the early stages of a
discussion, one should not express opinions and conclusions with so
much certainty that others feel like it's pointless to dissent.
People must be free to air ideas, even stupid ideas.  It is inevitable
that the BD will post a stupid idea from time to time too, of course,
and therefore the role also requires an ability to recognize and
acknowledge when one has made a bad decision&mdash;though this is
simply a trait that <emphasis>any</emphasis> good developer should
have, especially if she stays with the project a long time.  But the
difference is that the BD can afford to slip from time to time without
worrying about long-term damage to her credibility.  Developers with
less seniority may not feel so secure, so the BD should phrase
critiques or contrary decisions with some sensitivity for how much
weight her words carry, both technically and psychologically.</para>
-->

<para>
    優しい独裁者になるには複数の特性が必要です。
    まず第一に、自分自身がプロジェクトに及ぼす影響について感覚を研ぎ澄ますこと、
    これは言い替えれば自制を働かせるということです。
    議論の最初の段階では、
    自分の意見に反対するのは的外れだと確信して意見や結論を述べてはいけません。
    人々には、たとえ馬鹿げたアイディアであっても自由に述べさせなければいけません。
    もちろん、優しい独裁者であっても必ず愚かな考えを述べることがあります。
    だから、自分が悪い決断を下したときに、それを認識し、
    受け入れる能力も必要になるのです。&mdash;
    ですが、この資質は優れた開発者であれば、
    特にプロジェクトに長い間留まっている人であればなおさら <emphasis>誰でも</emphasis> 持っているはずの資質にすぎません。
    しかし、優しい独裁者が違うのは、
    自分の信頼に長い間傷が付いてしまうんじゃないかと恐れることなく、
    たびたび間違いを犯す余裕があることです。
    年季が入っていない開発者は、自分が保護されていないと感じているかもしれません。
    だからこそ優しい独裁者は、
    技術的な面でも精神的な面でも、自分の言葉が伝える重みに敏感になって、
    批判をしたり反対意見を述べるべきなのです。
</para>

<!--
<para>The BD does <emphasis>not</emphasis> need to have the sharpest
technical skills of anyone in the project.  She must be skilled enough
to work on the code herself, and to understand and comment on any
change under consideration, but that's all.  The BD position is
neither acquired nor held by virtue of intimidating coding skills.
What <emphasis>is</emphasis> important is experience and overall
design sense&mdash;not necessarily the ability to produce good
design on demand, but the ability to recognize good design, whatever
its source.</para>
-->

<para>
    優しい独裁者は、
    プロジェクトにいる誰よりも技術的なスキルが優れている必要は <emphasis>ありません</emphasis>。
    コードを書く能力に十分優れ、
    コードに加えられたあらゆる変更を理解し、
    思いやりをもってそれにコメントしなければいけませんが、それだけです。
    優しい独裁者の立場は、誰かから教わって得たものではありませんし、
    コードを書くスキルが恐ろしくあるという理由で得たものでもありません。
    <emphasis>重要なのは</emphasis> 経験と総合的な設計センスです。&mdash;
    必要に応じて優れた設計を生み出す能力ではなく、
    優れた設計をソースコードから認識する能力なのです。
</para>

<!--
<para>It is common for the benevolent dictator to be a founder of the
project, but this is more a correlation than a cause.  The sorts of
qualities that make one able to successfully start a
project&mdash;technical competence, ability to persuade other people
to join, etc.&mdash;are exactly the qualities any BD would need.  And
of course, founders start out with a sort of automatic seniority,
which can often be enough to make benevolent dictatorship appear the
path of least resistance for all concerned.</para>
-->

<para>
    優しい独裁者は、プロジェクトの創始者であることが普通です。
    しかし創始者であることは、優しい独裁者となる原因以上の相関関係はありません。
    正確にいうと、プロジェクトをうまく始められる資質 &mdash; 技術的なスキル、
    他の人をプロジェクトに参加するよう説得できること、などなど &mdash;
    が、優しい独裁者になるのに必要な資質です。
    そしてもちろん、創始者は自動的にプロジェクトの古株としてスタートするので、
    そのことで優しい独裁者への道が殆ど抵抗なしに開かれることは往々にしてあり得ます。
</para>

<!--
<para>Remember that the potential to fork goes both ways.  A BD can
fork a project just as easily as anyone else, and some have
occasionally done so, when they felt that the direction they wanted to
take the project was different from where the majority of other
developers wanted to go.  Because of forkability, it does not matter
whether the benevolent dictator has root (system administrator
privileges) on the project's main servers or not.  People sometimes
talk of server control as though it were the ultimate source of power
in a project, but in fact it is irrelevant.  The ability to add or
remove people's commit passwords on one particular server affects only
the copy of the project that resides on that server.  Prolonged abuse
of that power, whether by the BD or someone else, would simply lead to
development moving to a different server.</para>
-->

<para>
    プロジェクトが分裂する可能性が二つあることを忘れないでください。
    優しい独裁者は他の人と同様、容易にプロジェクトを分裂させられますし、
    大多数の開発者が望んでいるプロジェクトの方向性が、
    自分が望むものと違っていると感じたときは、
    時折優しい独裁者以外の人もそうすることがあります。
    コードはコピーできるので、
    優しい独裁者がプロジェクトのメインサーバの root 権限（システム管理者の権限）を持っているかどうかは問題になりません。
    人によっては、サーバの管理権限を持っていることがプロジェクトの最終的な権限の源であるかのように話すひとがいますが、実際は無関係です。
    ある特定のサーバで開発者のコミットパスワードを追加したり、削除したりできる権限は、
    そのサーバにあるプロジェクトのコピーにのみ影響します。
    そうした権限に関する苦情が、優しい独裁者や他の開発者かどうかに関係なく長期間続くと、
    単に開発が他のサーバに移っていくだけです。
</para>

</sect2>

<!--
<para>Whether your project should have a benevolent dictator, or would
run better with some less centralized system, largely depends on who
is available to fill the role.  As a general rule, if it's simply
obvious to everyone who should be the BD, then that's the way to go.
But if no candidate for BD is immediately obvious, then the project
should probably use a decentralized decision-making process, as
described in the next section.</para>
-->

<para>
    プロジェクトに優しい独裁者がいる方がうまくいくか、
    中央集権をいくらか緩めた仕組みの方がうまくいくかは、
    役割を果たす人達がどれだけいるかにかかっています。
    一般的なルールとして、優しい独裁者に誰がなってもいいことが明らかな場合は、
    そうするとよいでしょう。しかし、誰もなり手がいないのが明らかな場合は、
    次の節で述べる分権的な決定プロセスを使うべきでしょう。
</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>合意に基づく民主主義</title>

<!--
<para>As projects get older, they tend to move away from the
benevolent dictatorship model and toward more openly democratic
systems.  This is not necessarily out of dissatisfaction with a
particular BD.  It's simply that group-based governance is more
"evolutionarily stable", to borrow a biological metaphor.  Whenever a
benevolent dictator steps down, or attempts to spread decision-making
responsibility more evenly, it is an opportunity for the group to
settle on a new, non-dictatorial system&mdash;establish a
constitution, as it were.  The group may not take this opportunity the
first time, or the second, but eventually they will; once they do,
the decision is unlikely ever to be reversed.  Common sense explains
why: if a group of N people were to vest one person with special
power, it would mean that N&nbsp;-&nbsp;1 people were each agreeing to
decrease their individual influence.  People usually don't want to do
that.  Even if they did, the resulting dictatorship would still be
conditional: the group anointed the BD, clearly the group could depose
the BD.  Therefore, once a project has moved from leadership by a
charismatic individual to a more formal, group-based system, it rarely
moves back.</para>
-->

<para>
    プロジェクトが続いていくと、プロジェクトは優しい独裁者モデルから離れ、
    より開かれた民主主義的なプロセスに移行します。
    これは特定の優しい独裁者に必ずしも満足していないからではありません。
    単にグループ主体の統治の方が、
    生物学のメタファーを借りて言えば "進化的に安定している" からです。
    優しい独裁者が身を引いたり、
    決定する権限を多くの人に平等に与えようとするときはいつでも、
    グループが新しい、独裁的でない仕組みに移行する機会になります &mdash;
    これは言ってみれば組織化を行うということです。
    開発者のグループは最初の1、2回はこの機会を利用しませんが、
    結局は利用することになります。いったんそうしてしまえば、
    もとの仕組みに戻ることはありません。何故かは常識でわかることです。
    仮に N人 からなるグループが、ある人に特別な権限を与えていると仮定すると、
    N&nbsp;-&nbsp;1 人が自分の影響力を弱めることに合意していることになります。
    独裁的でない仕組みでは、普通特別な権限を特定の人に与えたいとは思いません。
    たとえ望んだとしても、結果として行使できる権力は条件付きのものになります。
    優しい独裁者を任命しても、これは明らかなことですが、
    グループが後に辞めさせてしまうことができるからです。
    それゆえに、プロジェクトがいったんカリスマ的な人のリーダーシップをとる仕組みから、
    より型にはまったグループベースの仕組みに移行すれば、滅多に元に戻ることはないのです。
</para>

<!--
<para>The details of how these systems work vary widely, but there are
two common elements: one, the group works by consensus most of the
time; two, there is a formal voting mechanism to fall back on when
consensus cannot be reached.</para>
-->

<para>
    こうした仕組みがどう機能するかを詳細に見ていくと、
    中身は変化に富んでいますが、共通した要素が二つあります。
    ひとつは、グループはほとんどいつも合意に基づいて動くこと。
    ふたつめは、合意に達しないときに投票の仕組みを使うことです。
</para>

<!--
<para><firstterm>Consensus</firstterm> merely means an agreement that
everyone is willing to live with.  It is not an ambiguous state: a
group has reached consensus on a given question when someone proposes
that consensus has been reached, and no one contradicts the assertion.
The person proposing consensus should, of course, state specifically
what the consensus is, and what actions would be taken in consequence
of it, if they're not obvious.</para>
-->

<para>
    <firstterm>合意</firstterm> とは、皆が受け入れようと一致することです。
    これはあいまいな状態ではありません。
    誰かが合意に達したんじゃないかと提案し、
    それに対して誰も反対を表明しない場合、あるグループは合意に達したといえます。
    合意に達したんじゃないかと提案する人は、
    合意とは何かということと、
    仮に明らかでない場合は、
    合意の結果どのような行動をとるのかを具体的に述べるべきです。
</para>

<!--
<para>Most conversation in a project is on technical topics, such as
the right way to fix a certain bug, whether or not to add a feature,
how strictly to document interfaces, etc.  Consensus-based governance
works well because it blends seamlessly with the technical discussion
itself.  By the end of a discussion, there is often general agreement
on what course to take.  Someone will usually make a concluding post,
which is simultaneously a summary of what has been decided and an
implicit proposal of consensus.  This provides a last chance for
someone else to say "Wait, I didn't agree to that.  We need to hash
this out some more."</para>
-->

<para>
    プロジェクトで交わされるほとんどの会話は技術的な話題です。
    たとえば、正しくバグを直す方法とか、
    ある機能を追加するか、しないか、
    プログラムのインターフェイスをどの程度厳密に文書化するか、などです。
    合意を基本とした統治は、技術的な議論そのものとよく合うのでうまくいきます。
    議論が終わるまでに、どの方向性をとるかについて合意がよく成立します。
    通常は議論を終了するという投稿をし、
    同時に何が決まるのかをまとめた上で、合意に達したよねと暗に提案します。
    これが "待った！ 俺は反対だ。もう少し徹底的に話し合う必要があるね。"
    と言える最後の機会を与えているのです。
</para>

<!--
<para>For small, uncontroversial decisions, the proposal of consensus
is implicit.  For example, when a developer spontaneously commits a
bugfix, the commit itself is a proposal of consensus: "I assume we all
agree that this bug needs to be fixed, and that this is the way to fix
it."  Of course, the developer does not actually say that; she just
commits the fix, and the others in the project do not bother to state
their agreement, because silence is consent.  If someone commits a
change that turns out <emphasis>not</emphasis> to have consensus, the
result is simply for the project to discuss the change as though it
had not already been committed.  The reason this works is the topic of
the next section.</para>
-->

<para>
    規模が小さく、議論に値しない事柄を決めるときは、
    合意に達したという提案も暗黙に行われます。
    たとえば、開発者がバグ修正を自発的にコミットした場合、
    そのコミット自体が合意に達したことを提案することになります。
    つまり、"このバグは直す必要があり、
    この修正が正しいやり方だと皆が合意したと見做すよ" と言っているのです。
    もちろん、開発者は実際にそんなことを言っていません。
    彼はただ修正をコミットしただけですし、
    他の開発者はわざわざ同意すると口に出して言ったりしません。
    なぜなら黙っていることは合意することだからです。
    コミットされた修正が、合意を得られないと判明した場合、
    プロジェクトではそれがまだコミットされていないかのように議論されます。
    このやり方がうまく行く理由は次の節で述べていきます。
</para>

<sect2 id="version-control-relaxation">
<title>バージョン管理を行なうと堅くならずに済む</title>

<!--
<para>The fact that the project's source code is kept under version
control means that most decisions can be easily unmade.  The most
common way this happens is that someone commits a change mistakenly
thinking everyone would be happy with it, only to be met with
objections after the fact.  It is typical for such objections to start
out with an obligatory apology for having missed out on prior
discussion, though this may be omitted if the objector finds no record
of such a discussion in the mailing list archives.  Either way, there
is no reason for the tone of the discussion to be different after the
change has been committed than before.  Any change can be reverted, at
least until dependent changes are introduced (i.e., new code that
would break if the original change were suddenly removed).  The
version control system gives the project a way to undo the effects of
bad or hasty judgement.  This, in turn, frees people to trust their
instincts about how much feedback is necessary before doing
something.</para>
-->

<para>
    プロジェクトのソースコードがバージョン管理されているということは、
    ほとんどの決定が元に戻せるということを意味します。
    変更を元に戻す原因としてよくあるのが、
    皆にとって良いものだと間違って思い込み、変更をコミットするというものですが、
    これは結局コミットした後に反対意見が出てくることになります。
    こうした反対意見は決まって、
    以前の議論を見逃したことを詫びることから始まりますが、
    反対する人がメーリングリストのアーカイブにこれにあたる議論を見つけられなかった場合は省略されます。
    どちらにせよ、変更がコミットされる前と後とで議論の口調を変える理由はありません。
    少なくとも、あるコミットに依存する変更が行われた時点
    （i.e. もともと加えられていた変更が突然削除され、新しい変更がそれを壊していた場合）
    まで、変更は取り消すことができます。
    バージョン管理システムは、プロジェクトにとってよくない、
    または性急な判断から生じた結果を元に戻す手段を与えているのです。
    これは言い替えれば、開発者が何かをする前にどのくらいのフィードバックが必要かということを、
    自分の直感を信頼して判断してよい、ということでもあります。
</para>

<!--
<para>This also means that the process of establishing consensus need
not be very formal.  Most projects handle it by feel.  Minor changes
can go in with no discussion, or with minimal discussion followed by a
few nods of agreement.  For more significant changes, especially ones
with the potential to destabilize a lot of code, people should wait a
day or two before assuming there is consensus, the rationale being
that no one should be marginalized in an important conversation simply
because he didn't check email frequently enough.</para>
-->

<para>
    このことは、合意を得る手続きを型にはめる必要がないということでもあります。
    ほとんどのプロジェクトはこの手続きを感覚で扱っています。
    小さな変更は、議論をしないか、最小限の議論だけして、2、3の賛成があったあとに行われます。
    より重要な変更、特に多くのコードを不安定にさせる変更については、
    開発者達は合意に達した、
    つまり単にメールを頻繁にチェックしていなかっただけの理由で重要な議論をないがしろにしたヤツはいないはずだ、
    という合理的な根拠があるとみなす前に、１日か２日の間を置くべきです。
</para>

<!--
<para>Thus, when someone is confident he knows what needs to be done,
he should just go ahead and do it.  This applies not only to software
fixes, but to web site updates, documentation changes, and anything
else unlikely to be controversial.  Usually there will be only a few
instances where an action needs to be undone, and these can be handled on
a case-by-case basis.  Of course, one shouldn't encourage people to be
headstrong.  There is still a psychological difference between a
decision under discussion and one that has already taken effect, even
if it is technically reversible.  People always feel that momentum is
allied to action, and will be slightly more reluctant to revert a
change than to prevent it in the first place.  If a developer abuses
this fact by committing potentially controversial changes too quickly,
however, people can and should complain, and hold that developer to a
stricter standard until things improve.</para>
-->

<para>
    というわけで、自分がやるべきことを理解しているのなら、
    単に作業を進めてやり遂げるべきです。これはソフトウェアの修正だけでなく、
    ウェブサイトの更新、ドキュメントの変更、
    そして議論になりそうにない他のあらゆることに当てはまります。
    通常、とられたアクションを元に戻す必要がある事例は少ししかないでしょうし、
    そうした事例はケースバイケースで扱えます。
    もちろん、聞く耳を持たないことを奨励すべきではありません。
    議論中の事項と、既に実行されて効果が表れている決定事項の間には、
    いくら技術的に元に戻せるとはいっても精神的な差があります。
    開発者達は勢いが行動に繋がるといつも思っていますし、
    実際に行われた変更を元に戻すのは、
    はじめに変更するのをやめさせるほど、気が進まないものです。
    ある開発者がこの事実を悪用し、議論が必要かもしれない変更を急いでコミットする場合、
    他の開発者達は文句を言えますし、言うべきです。
    そして事態が好転するまで、より厳しい基準をその開発者に守らせるべきでしょう。
</para>

</sect2>

<sect2 id="voting">
<title>合意に至らなければ投票する</title>

<!--
<para>Inevitably, some debates just won't consense.  When all other
means of breaking a deadlock fail, the solution is to vote.  But
before a vote can be taken, there must be a clear set of choices on
the ballot.  Here, again, the normal process of technical discussion
blends serendipitously with the project's decision-making procedures.
The kinds of questions that come to a vote often involve complex,
multifaceted issues.  In any such complex discussion, there are
usually one or two people playing the role of <firstterm>honest
broker</firstterm>: posting periodic summaries of the various
arguments and keeping track of where the core points of disagreement
(and agreement) lie.  These summaries help everyone measure how much
progress has been made, and remind everyone of what issues remain to
be addressed.  Those same summaries can serve as prototypes for a
ballot sheet, should a vote become necessary.  If the honest brokers
have been doing their job well, they will be able to credibly call for
a vote when the time comes, and the group will be willing to use a
ballot sheet based on their summary of the issues.  The brokers
themselves may be participants in the debate; it is not necessary for
them to remain above the fray, as long as they can understand and
fairly represent others' views, and not let their partisan sentiments
prevent them from summarizing the state of the debate in a neutral
fashion.</para>
-->

<para>
    議論によっては、結論がでないことが必ずあります。
    行き詰まった状態を打開するあらゆる手段が失敗に終わった場合、
    投票が打開策になります。
    投票を行う前には、結論の候補となる選択肢を明確にしなければなりません。
    ここで、普段やっている技術的な議論をしてみると、
    結論を出す手続きと意外によく合っていることが再びわかるでしょう。
    投票になる論点は、複雑で多面的な問題を含むことがたびたびあります。
    こういう複雑な議論では、
    <firstterm>仲裁人</firstterm> の役割を果たす人が普通ひとりかふたりはいます。
    彼らは定期的にさまざまな主張をまとめたものをポストし、
    反対（賛成）意見の核がどこにあるのかを追いかけています。
    こうしたまとめは、議論がどの位進んでいるのかを知ったり、
    どういう問題に取り組んでいるのかを覚えておくのに役立ちます。
    また、実際に投票が必要になった場合に、投票用紙のひな型として役立つかもしれません。
    仲裁人が仕事をうまくこなせば、
    時が来れば皆に投票しましょうと呼びかけることもできるでしょうし、
    プロジェクトは彼らが作ったまとめをベースにした投票用紙を使うことができるでしょう。
    仲裁人自身は、議論に参加していても構いません。
    つまり、対立する人の意見を理解し、中立的に表現でき、
    自分の同志の気持ちが議論を中立的にまとめるのを妨げなければ、
    賛成、反対の立場を超越した立場にいる必要はないのです。
</para>

<!--
<para>The actual content of the ballot is usually not controversial.
By the time matters reach a vote, the disagreement has usually boiled
down to a few key issues, with recognizable labels and brief
descriptions.  Occasionally a developer will object to the form of the
ballot itself.  Sometimes his concern is legitimate, for example,
that an important choice was left off or not described accurately.
But other times a developer may be merely trying to stave off the
inevitable, perhaps knowing that the vote probably won't go his way.
See <xref linkend="difficult-people"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for how to deal with
this sort of obstructionism.</para>
-->

<para>
    投票用紙の実際の内容は、議論の余地がないものになるのが普通です。
    投票が実際に行われるまでに、反対意見は２、３のキーとなる問題にまとめられ、
    理解できるラベルや簡単な説明が付けられます。
    開発者が投票用紙の形式そのものに反対する場合もあります。
    そういう人は、たとえば重要な選択肢が抜けていたり、
    選択肢に対する正確な説明がないといった、
    投票が正しいものかどうかを心配していることがありますが、
    投票によって出る結論が自分の望むものに絶対ならないことを多分知っていて、
    投票を避けようとしているだけの場合もあります。
    この手の妨害行為をどう扱うかは、
    <phrase output="printed"><xref linkend="communications"/></phrase> の、
    <xref linkend="difficult-people"/> を参照してください。
</para>

<!--
<para>Remember to specify the voting system, as there are many
different kinds, and people might make wrong assumptions about which
procedure is being used.  A good choice in most cases is
<firstterm>approval voting</firstterm>, whereby each voter can vote
for as many of the choices on the ballot as he likes.  Approval
voting is simple to explain and to count, and unlike some other
methods, it only involves one round of voting.  See <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> for
more details about approval voting and other voting systems, but try
to avoid getting into a long debate about which voting system to use
(because, of course, you will then find yourself in a debate about
which voting system to use to decide the voting system!).  One reason
approval voting is a good choice is that it's very hard for anyone to
object to&mdash;it's about as fair as a voting system can be.</para>
-->

<para>
    投票システムを必ず決めるようにしましょう。なぜなら、
    投票システムにはたくさんの種類があり、どういった手続きがとられるのかについて
    参加者が間違った想定をしている可能性があるからです。
    ほとんどの場合に適しているのは <firstterm>認定投票</firstterm> です。
    このシステムでは投票者が自分が好む選択肢をできるだけ多く投票できます。
    認定投票は説明するのも、得票数を数えるのも簡単ですし、他の方法と異なり、
    一回の投票で済みます。認定投票と他の投票システムの詳細については、
    <ulink url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> を参照してください。
    しかしながら、どの投票システムを使うかについて、長く議論するのは避けるようにしましょう。
    （当然、
    投票システムを決めるのにどの投票システムを使うかを議論することになるからです！）
    認定投票が優れた選択となる理由は、反対意見を表明することが難しいからです。
    &mdash; つまり、投票システムはできるだけ公平であるべきということです。
</para>

<!--
<para>Finally, conduct votes in public.  There is no need for secrecy
or anonymity in a vote on matters that have been debated publicly
anyway.  Have each participant post her votes to the project mailing
list, so that any observer can tally and check the results for
herself, and so that everything is recorded in the archives.</para>
-->

<para>
    最後に、投票は公開の場で行いましょう。
    どちらにせよ、公開の場で議論した問題について、
    秘密投票にしたり、匿名投票にしたりする必要はありません。
    オブザーバが投票を記録し、結果をチェックできるように、
    そしてすべてをアーカイブに記録するために、
    投票の参加者には、
    プロジェクトのメーリングリストに自分の投票をポストさせるようにしましょう。
</para>

</sect2>

<sect2 id="when-to-vote">
<title>いつ投票を行なうべきか?</title>

<!--
<para>The hardest thing about voting is determining when to do it.  In
general, taking a vote should be very rare&mdash;a last resort for
when all other options have failed.  Don't think of voting as a great
way to resolve debates.  It isn't.  It ends discussion, and thereby
ends creative thinking about the problem.  As long as discussion
continues, there is the possibility that someone will come up with a
new solution everyone likes.  This happens surprisingly often: a
lively debate can produce a new way of thinking about the problem, and
lead to a proposal that eventually satisfies everyone.  Even when no
new proposal arises, it's still usually better to broker a compromise
than to hold a vote.  After a compromise, everyone is a little bit
unhappy, whereas after a vote, some people are unhappy while others
are happy.  From a political standpoint, the former sitation is
preferable: at least each person can feel he extracted a price for his
unhappiness.  He may be dissatisfied, but so is everyone else.</para>
-->

<para>
    投票で最も難しいのは、いつ投票を行うかです。一般的には、
    投票に実際に踏み切ることは滅多にすべきではありません&mdash;
    つまり、他のあらゆる手段が失敗したときの最後の手段にすべきです。
    投票が議論を解決する素晴らしい手段だと看做さないでください。
    実際、そうではないのです。投票は議論を終結させ、
    それによって問題について創造的に考えることもやめさせてしまうのです。
    議論が続いている限り、皆が好む新しい解決策を誰かが思い付く可能性があります。
    これは驚くほどたびたび起こります。活発な議論は、
    問題について新しい考え方を生み出しますし、結局皆を満足させる提案にも繋がります。
    たとえ新しい提案が生まれなくても、投票を行うよりは、
    妥協案を仲介してもらった方が通常はまだマシです。
    妥協したあとは、皆がちょっと悲しい思いをします。
    一方で、投票をしたあとは喜ぶ人がいる一方で、悲しい思いをする人もいます。
    政治的な観点からは、前者の方が好ましいといえます。
    なぜなら、少なくともひとりひとりが自分の悲しい思いに対して対価を支払っているからです。
    満足はしないかもしれませんが、それは他の誰もが同じなのです。
</para>

<!--
<para>Voting's main advantage is that it finally settles a question so
everyone can move on.  But it settles it by a head count, instead of
by rational dialogue leading everyone to the same conclusion.  The
more experienced people are with open source projects, the less eager
I find them to be to settle questions by vote.  Instead they will try
to explore previously unconsidered solutions, or compromise more
severely than they'd originally planned.  Various techniques are
available to prevent a premature vote.  The most obvious is simply to
say "I don't think we're ready for a vote yet," and explain why not.
Another is to ask for an informal (non-binding) show of hands.  If the
response clearly tends toward one side or another, this will make some
people suddenly more willing to compromise, obviating the need for a
formal vote.  But the most effective way is simply to offer a new
solution, or a new viewpoint on an old suggestion, so that people
re-engage with the issues instead of merely repeating the same
arguments.</para>
-->

<para>
    投票の主な利点は、皆が次に進める形で問題を最終的に解決してくれることです。
    しかし、投票は皆を理性的な対話によって同じ結論に導くのではなく、
    頭数で問題を解決してしまいます。私は、オープンソースプロジェクトで経験を積めば積むほど、
    人々が問題を投票によって解決したがらなくなるのがわかってきました。
    むしろ、以前考えたこともない解決策を探ったり、
    もともとの計画よりも厳しい妥協をしようとします。
    早まった投票を避けるために様々なテクニックがあります。もっとも明白なやり方は、
    "まだ投票を実施する段階ではないと思うよ。" といって、何故かを説明することです。
    別のやり方として、非公式に賛成の人は手を挙げてもらう（拘束力はありません）ことがあります。
    その反応が明らかに一方に偏っていたら、
    正式に投票を行うのを避けるために、積極的に妥協することを人々に促すことになるでしょう。
    もっとも効率的なやり方は、人々が同じ主張を繰り返さずに問題に再び取り組めるように、
    新しい解決策や、以前の提案に基づいた新しい視点を示すことです。
</para>

<!--
<para>In certain rare cases, everyone may agree that all the
compromise solutions are worse than any of the non-compromise ones.
When that happens, voting is less objectionable, both because it is
more likely to lead to a superior solution and because people will not
be overly unhappy no matter how it turns out.  Even then, the vote
should not be rushed.  The discussion leading up to a vote is what
educates the electorate, so stopping that discussion early can lower
the quality of the result.</para>
-->

<para>
    まれなケースとして、示された全ての妥協案は、
    妥協していない全ての案よりも劣っていることで全員が一致することがあります。
    この場合、投票を実施することに反対しにくくなります。なぜなら、
    投票の方がより優れた解決に繋がる可能性がありますし、
    どのような結果になっても全員が過度に悲しい思いをすることはないからです。
    たとえそうであっても、投票を急ぐべきではありません。
    投票に至るまでの議論は有権者にいろいろなことを教えるので、
    議論を早い段階でやめてしまうと、投票の結果出てくるものの質が悪くなるかもしれません。
</para>

<!--
<para>(Note that this advice to be reluctant to call votes does not
apply to the change-inclusion voting described in
<xref linkend="stabilizing-a-release"/><phrase output="printed">
in <xref linkend="development-cycle"/></phrase>.  There, voting
is more of a communications mechanism, a means of registering one's
involvement in the change review process so that everyone can tell how
much review a given change has received.)</para>
-->

<para>
    （投票をしたがるなというアドバイスは、
    <phrase output="printed"><xref linkend="development-cycle"/></phrase> の <xref linkend="stabilizing-a-release"/> で説明している、
    ソースコードに大幅な変更を加える投票には当てはまりません。
    そこでは、投票は対話のメカニズムとして働き、
    有権者を変更をレビューする手続きに参加させる手段となります。
    それによって、
    有権者は与えられた変更がどの程度のレビューを経ているのかを区別することができるのです。）
</para>

</sect2>

<sect2 id="electorate">
<title>誰が投票するのか?</title>

<!--
<para>Having a voting system raises the question of electorate: who
gets to vote?  This has the potential to be a sensitive issue, because
it forces the project to officially recognize some people as being
more involved, or as having better judgement, than others.</para>
-->

<para>
    投票システムを使うとなると、有権者に関する疑問が出てきます。
    誰が投票権を得るのか、という問題です。これは繊細な問題となる可能性があります。
    なぜなら、どの人が熱心にプロジェクトに参加しているかとか、
    どの人がよりよい判断を下せるか、
    ということをプロジェクトに公式に認めさせることになるからです。
</para>

<!--
<para>The best solution is to simply take an existing distinction,
commit access, and attach voting privileges to it.  In projects that
offer both full and partial commit access, the question of whether
partial committers can vote largely depends on the process by which
partial commit access is granted.  If the project hands it out
liberally, for example as a way of maintaining many third-party
contributed tools in the repository, then it should be made clear that
partial commit access is really just about committing, not voting.
The reverse implication naturally holds as well: since full committers
<emphasis>will</emphasis> have voting privileges, they must be chosen
not only as programmers, but as members of the electorate.  If someone
shows disruptive or obstructionist tendencies on the mailing list, the
group should be very cautious about making him a committer, even if
the person is technically skilled.</para>
-->

<para>
    一番よいのは、既にある権限の区別、
    つまりコミット権限を単純に利用し、その権限に投票権限も付加することです。
    完全なコミット権限と、限定的なコミット権限を提供しているプロジェクトで、
    限定的なコミット権限を持つ人に投票権を与えるかどうかは、
    コミット権限を与える手続きがどのようなものかに大きく依存します。
    たくさんのサードパーティーのツールをリポジトリで管理させるようなやり方で、
    プロジェクトがコミット権限を気前よく配分している場合、
    限定的なコミット権限が単にリポジトリにコミットする権限だけで、
    投票権限はないことを明確にすべきです。
    逆に考えると、同じことが当然当てはまります。
    つまり、完全なコミット権限を持つ人には投票権限もあるのだから、
    彼らはプログラマとしてではなく、投票権限のあるメンバとして選ばれなければならない。
    ということになります。
    メーリングリスト上で破壊的な発言をしたり、
    プロジェクトを妨害する傾向がある人がいる場合は、
    プロジェクトはたとえその人が技術的に優れていたとしても、
    コミット権限を与える際に注意する必要があります。
</para>

<!--
<para>The voting system itself should be used to choose new
committers, both full and partial.  But here is one of the rare
instances where secrecy is appropriate.  You can't have votes about
potential committers posted to a public mailing list, because the
candidate's feelings (and reputation) could be hurt.  Instead, the
usual way is that an existing committer posts to a private mailing
list consisting only of the other committers, proposing that someone
be granted commit access.  The other committers speak their minds
freely, knowing the discussion is private.  Often there will be no
disagreement, and therefore no vote necessary.  After waiting a few
days to make sure every committer has had a chance to respond, the
proposer mails the candidate and offers him commit access.  If there
is disagreement, discussion ensues as for any other question, possibly
resulting in a vote.  For this process to be open and frank, the mere
fact that the discussion is taking place at all should be secret.  If
the person under consideration knew it was going on, and then were
never offered commit access, he could conclude that he had lost
the vote, and would likely feel hurt.  Of course, if someone
explicitly asks for commit access, then there is no choice but to
consider the proposal and explicitly accept or reject him.  If the
latter, then it should be done as politely as possible, with a clear
explanation: "We liked your patches, but haven't seen enough of them
yet," or "We appreciate all your patches, but they required
considerable adjustments before they could be applied, so we don't
feel comfortable giving you commit access yet.  We hope that this will
change over time, though."  Remember, what you're saying could come as
a blow, depending on the person's level of confidence.  Try to see it
from their point of view as you write the mail.</para>
-->

<para>
    完全なコミット権限にせよ、限定的なものにせよ、
    新しいコミッターを選ぶには投票システムを使うべきですが、
    この場合は秘密投票が適切になるまれな事例のひとつです。
    コミッターになる可能性がある人について、メーリングリストで投票を行うことはできません。
    なぜなら、候補者の感情(評判）を傷つけてしまう可能性があるからです。
    代わりに普通使われるのは、
    コミッターのみで構成されるプライベートなメーリングリストに、
    コミット権限を与える提案をし、
    それに対して既にいるコミッターが投票する方法です。
    他のコミッターはそこで行われる議論がプライベートなことを知っているので、
    自分の思うところを自由に述べていきます。
    そこで反対意見が出ないために、投票が必要ないこともあります。
    他のコミッターに反対意見を述べるチャンスを必ず与えるために２、３日待ったあと、
    提案者はコミッターになる候補者にメールしてコミット権限を与えます。
    反対意見があった場合は、他の問題と同じように議論が行われ、おそらく投票が行われるでしょう。
    このプロセスをオープンかつ率直なものにするにせよ、
    議論はとにかく非公開で行うべきです。
    コミット権限を与えようと考えている人が、何が起きているのかを知っていて、
    権限を貰えなかった場合、自分は投票権も失ったんだと決めつけてしまったり、
    傷ついてしまう可能性もあるでしょう。
    もちろん、誰かが明示的にコミット権限が欲しいと頼んできた場合は、その提案について検討し、
    受け入れるか拒むかの回答を明示的に行うしかありません。
    仮に拒む場合は、はっきりと説明を沿えてできるだけ丁寧に断るべきです。
    たとえば "開発者チームは君のパッチを気に入っているけれども、量がまだ十分でない。" とか、
    "開発チームは君のパッチを全て高く評価しているけど、適用する前にかなり調整が必要なんだ。
    だからコミット権限を与えるのが好ましいと思えない。
    このことは時間をかけて改善して欲しいと願っている。" という感じです。
    ただ、その人との信頼関係の度合によりますが、
    あなたの発言が相手にショックを与える可能性があることを忘れないように。
    メールを書くときは、相手の視点からメールを眺めるようにしましょう。
</para>

<!--
<para>Because adding a new committer is more consequential than most
other one-time decisions, some projects have special requirements for
the vote.  For example, they may require that the proposal receive at
least <emphasis>n</emphasis> positive votes and no negative votes, or
that a supermajority vote in favor.  The exact parameters are not
important; the main idea is to get the group to be careful about
adding new committers.  Similar, or even stricter, special requirements
can apply to votes to <emphasis>remove</emphasis> a committer, though
hopefully that will never be necessary.  See <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for more on the
non-voting aspects of adding and removing committers.</para>
-->

<para>
    新しいコミッターを加えることは、
    他のほとんどの一度限りの決定よりもより重大なので、
    プロジェクトによっては投票に特別な要件を課すところもあります。
    たとえば、その提案には 少なくとも <emphasis>n</emphasis> 票の賛成票が必須で、
    反対票があってはいけないとか、圧倒的多数の賛成票が必須、といったものです。
    正確な賛成票の数は重要ではありません。
    中心となる考え方は、開発チームが新しいコミッターを加えるのに慎重であるべき、というものです。
    コミット権限を <emphasis>奪う</emphasis> 場合にも、投票には似たような、
    あるいはもっと厳格な要件が必要です。
    まぁしかし、こんなルールを必要としないのが望ましいのですが。
    コミット権限を与えたり、奪ったりすることの、投票以外の側面に関する詳しい情報は、
    <phrase output="printed"><xref linkend="managing-volunteers"/></phrase> の <xref linkend="committers"/> を参照してください。
</para>

</sect2>

<sect2 id="polls">
<title>世論調査 v.s 投票</title>

<!--
<para>For certain kinds of votes, it may be useful to expand the
electorate. For example, if the developers simply can't figure out
whether a given interface choice matches the way people actually use
the software, one solution is to ask to all the subscribers of the
project's mailing lists to vote.  These are really
<firstterm>polls</firstterm> rather than votes, but the developers may
choose to treat the result as binding.  As with any poll, be sure to
make it clear to the participants that there's a write-in option: if
someone thinks of a better option not offered in the poll questions,
her response may turn out to be the most important result of the
poll.</para>
-->

<para>
    ある種の投票では、有権者を広げた方がいいかもしれません。
    たとえば、
    与えられたユーザーインターフェイスがユーザーのソフトウェアの使い方と合うかどうかを、
    開発者が決められない場合、
    プロジェクトのメーリングリストを購読している人全員に尋ねてみるのがひとつの解になります。
    これは投票というよりむしろ <firstterm>世論調査</firstterm> ですが、
    開発者はその結果を拘束力のあるものとして扱っても構いません。
    どういった調査であっても、
    与えられている選択肢以外の回答を記入できることを必ず参加者に明示するようにしましょう。
    調査の質問として与えられた選択肢よりも優れた回答を考えている人がいる場合、
    調査の結果、その回答がもっとも重要だとわかる場合があるからです。
</para>

</sect2>

<sect2 id="veto">
<title>拒否権</title>

<!--
<para>Some projects allow a special kind of vote known as a
<firstterm>veto</firstterm>.  A veto is a way for a developer to put a
halt to a hasty or ill-considered change, at least long enough for
everyone to discuss it more.  Think of a veto as somewhere between a
very strong objection and a filibuster.  Its exact meaning varies from
one project to another.  Some projects make it very difficult to
override a veto; others allow them to be overridden by regular
majority vote, perhaps after an enforced delay for more discussion.
Any veto should be accompanied by a thorough explanation; a veto
without such an explanation should be considered invalid on
arrival.</para>
-->

<para>
    プロジェクトによっては、
    <firstterm>拒否権</firstterm> として知られる特別な投票権を許しています。
    拒否権は性急に、または思いつきで行われた変更で、
    少なくとも皆でもっと議論する時間が必要な場合に、
    開発者がそれをやめさせる手段になります。
    拒否権は、とても強い反対と、
    議事の進行を妨害することの中間に位置すると考えるとよいでしょう。
    正確な意味はプロジェクトによって異なります。
    プロジェクトによっては拒否権を無効にするのがとても難しいところもありますし、
    おそらくは、
    もっと議論をするために強制的に時間を置いたあとで、
    通常の投票権で多数の得票を得れば、
    拒否権を無効にできるプロジェクトもあります。
    どんな拒否権であっても、説明が一通り行われてから行使すべきです。
    説明もされないのに行使された拒否権は無効なものと考えるべきでしょう。
</para>

<!--
<para>With vetoes comes the problem of veto abuse.  Sometimes
developers are too eager to raise the stakes by casting a veto, when
really all that was called for was more discussion.  You can prevent
veto abuse by being very reluctant to use vetoes yourself, and by
gently calling it out when someone else uses her veto too often.  If
necessary, you can also remind the group that vetoes are binding for
only as long as the group agrees they are&mdash;after all, if a
clear majority of developers wants X, then X is going to happen one
way or another.  Either the vetoing developer will back down, or the
group will decide to weaken the meaning of a veto.</para>
-->

<para>
    拒否権を許すと、それが濫用されるという問題が起きます。
    開発者たちは、もっと議論が必要なときに拒否権を行使することで、
    リスクを増やしたくないと考えています。
    あなたは、自分自身が拒否権をとても慎重に行使し、
    そして拒否権を多く行使し続けている人がいる場合に、
    丁寧にそれを指摘することによって拒否権の濫用を防ぐことができます。
    必要とあらば、開発者たちが拒否権に拘束力があると長期に渡って賛同している場合にだけ、
    拒否権に拘束力を持たせるよう求めることもできます &mdash;
    結局は、明らかに大多数の開発者が X を望んでいる場合は、
    その X が将来何かにつけ発生するでしょうから。
    その場合は、拒否権を行使している開発者がそれを取り下げるか、
    グループが拒否権の力を弱くする決定をすることになるでしょう。
</para>

<!--
<para>You may see people write "-1" to express a veto.  This usage
comes from the Apache Software Foundation, which has a highly
structured voting and veto process, described at <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The Apache
standards have spread to other projects, and you will see their
conventions used to varying degrees in a lot of places in the open
source world.  Technically, "-1" does not always indicate a formal
veto even according to the Apache standards, but informally it is
usually taken to mean a veto, or at least a very strong
objection.</para>
-->

<para>
    拒否権を行使するのに "-1" と書く人を見かけるかもしれません。
    この使い方は、高度に組織化された投票と拒否権システムを持つ Apache Software Foundation で生まれたものです。
    これについては <ulink url="http://www.apache.org/foundation/voting.html"/> に説明があります。
    Apache プロジェクトの基準は他のプロジェクトにも広まっているので、
    オープンソース界の多くの場所で、
    彼らの規約が形を変えて使われているのを見ることになるでしょう。
    技術的には、Apache プロジェクトの基準に照らしても、
    "-1" という表現が正式に拒否権を行使していることを必ずしも表すわけではありません。
    しかし、非公式には拒否権を行使している、
    もしくは少なくとも強い反対の意志を示していると普通は受け取られます。
</para>

<!--
<para>Like votes, vetoes can apply retroactively.  It's not okay to
object to a veto on the grounds that the change in question has
already been committed, or the action taken (unless it's something
irrevocable, like putting out a press release).  On the other hand, a
veto that arrives weeks or months late isn't likely to be taken very
seriously, nor should it be.</para>
-->

<para>
    投票と同じく、拒否権の効果は遡って適用できます。
    疑問が持たれている変更が既にコミットされている、
    もしくはアクションが既に起こされているという理由で、
   （既にプレスリリースが出ている場合のように、
    取り返しが付かないものでなければ） 拒否権に対して異を唱えるのはよくありません。
    言いかえれば、何週間、何ヶ月もたったあとに拒否権が行使されても、
    それが真面目に取り上げられる可能性は少ないですし、
    真面目に取り上げるべきでもありません。
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>全てを記録しておく</title>

<!--
<para>At some point, the number of conventions and agreements floating
around in your project may become so great that you need to record it
somewhere.  In order to give such a document legitimacy, make it clear
that it is based on mailing list discussions and on agreements already
in effect.  As you compose it, refer to the relevant threads in the
mailing list archives, and whenever there's a point you're not sure
about, ask again.  The document should not contain any surprises: it
is not the source of the agreements, it is merely a description of
them.  Of course, if it is successful, people will start citing it as
a source of authority in itself, but that just means it reflects the
overall will of the group accurately.</para>
-->

<para>
    プロジェクトの規約や合意の数が多くなり過ぎるために、
    ある時点でどこかに記録しておく必要が生じます。
    記録を正統なものにするためには、
    メーリングリストでの議論や既に有効になっている合意をベースにしていることを明示するようにしましょう。
    実際に記録するときは、
    メーリングリストのアーカイブにある関連したスレッドを参照するようにし、
    参照すべき場所がわからないときは、周りに尋ねるようにしましょう。
    記録した文書には人々を驚かせるようなことを書くべきではありません。
    たとえば、根拠を書かずに、合意の中身だけを説明するようなことです。
    もちろん、成功すればそれを権威あるものとして人々が引用しはじめるかもしれませんが、
    それはプロジェクトの総意を正確に反映しているだけに過ぎません。
</para>

<!--
<para>This is the document alluded to in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturally, when the
project is very young, you will have to lay down guidelines without
the benefit of a long project history to draw on.  But as the
development community matures, you can adjust the language to reflect
the way things actually turn out.</para>
-->

<para>
    これが <phrase output="printed"><xref linkend="getting-started"/></phrase> の <xref linkend="developer-guidelines"/> で述べた文書になります。
    当然、プロジェクトが若いうちは、
    長く続いているプロジェクトの歴史のような、
    ためになる話抜きでガイドラインを書かねばならないでしょう。
    しかしプロジェクトが成長するにつれ、
    明らかになってきた事柄を反映させた形で、文書を改訂することができます。
</para>

<!--
<para>Don't try to be comprehensive.  No document can capture
everything people need to know about participating in a project.  Many
of the conventions a project evolves remain forever unspoken, never
mentioned explicitly, yet adhered to by all.  Other things are simply
too obvious to be mentioned, and would only distract from important
but non-obvious material.  For example, there's no point writing
guidelines like "Be polite and respectful to others on the mailing
lists, and don't start flame wars," or "Write clean, readable bug-free
code."  Of course these things are desirable, but since there's no
conceivable universe in which they might <emphasis>not</emphasis> be
desirable, they are not worth mentioning.  If people are being rude on
the mailing list, or writing buggy code, they're not going to stop
just because the project guidelines said to.  Such situations need to
be dealt with as they arise, not by blanket admonitions to be good.
On the other hand, if the project has specific guidelines about
<emphasis>how</emphasis> to write good code, such as rules about
documenting every API in a certain format, then those guidelines
should be written down as completely as possible.</para>
-->

<para>
    文書を包括的なものにするのはやめましょう。
    どんな文書でも、プロジェクトに参加するのに必要なことを全て網羅することはできません。
    プロジェクトで生まれる多くの規約は、ずっと暗黙のもので、
    決して明示的に言及されることがないにもかかわらず、
    メンバー全員がかたくなに守っているものなのです。
    単に当り前過ぎるので言及されないものもありますし、
    重要だけど曖昧なのでただ避けているだけのものもあります。
    たとえば、"メーリングリストでは礼儀正しくし、他人を尊重しましょう。
    また、フレームウォーを始めてはいけません。" とか、
    "綺麗で、読みやすくバグのないコードを書きましょう。" といったことをガイドラインに書いても意味がありません。
    もちろん、これらは望ましいことではありますが、
    これらが望ましくないと思われる世界は存在しないので、言及する価値がないのです。
    メーリングリスト上で失礼な発言をしたり、バグだらけのコードを書いている人がいたとして、
    彼らはプロジェクトのガイドラインにやめろと書いてあるからといってやめはしないでしょう。
    こういう状況は包括的なガイドラインであらかじめ対処するものではなく、
    問題が起きたときに対処すべきものなのです。
    一方で、あるフォーマットですべてのAPIを文書化するルールのような
    よいコードの書き方に関するガイドラインがプロジェクトにある場合は、
    できる限り完全なものを書いておくべきです。
</para>

<!--
<para>A good way to determine what to include is to base the document
on the questions that newcomers ask most often, and on the complaints
experienced developers make most often.  This doesn't necessarily mean
it should turn into a FAQ sheet&mdash;it probably needs a more
coherent narrative structure than FAQs can offer.  But it should
follow the same reality-based principle of addressing the issues that
actually arise, rather than those you anticipate might arise.</para>
-->

<para>
    ガイドラインに盛りこむ内容を決めるよい方法は、初心者がよく尋ねる質問や、
    経験豊富な開発者がよくこぼす不満に関する文書を基にすることです。
    これは必ずしも FAQ を基にすべきというわけではありません &mdash;
    ガイドラインは、FAQ よりわかりやすい物語風の構造が必要になるでしょうが、
    FAQ と同様、将来起こりうる問題よりも、
    実際に起こった問題に取り組むという現実的な原則に従うべきです。
</para>

<!--
<para>If the project is a benevolent dictatorship, or has officers
endowed with special powers (president, chair, whatever), then the
document is also a good opportunity to codify succession procedures.
Sometimes this can be as simple as naming specific people as
replacements in case the BD suddenly leaves the project for any
reason.  Generally, if there is a BD, only the BD can get away with
naming a successor.  If there are elected officers, then the
nomination and election procedure that was used to choose them in the
first place should be described in the document.  If there was no
procedure originally, then get consensus on a procedure on the mailing
lists <emphasis>before</emphasis> writing about it.  People can
sometimes be touchy about hierarchical structures, so the subject
needs to be approached with sensitivity.</para>
-->

<para>
    プロジェクトに優しい独裁者や、特別な才能に恵まれた幹部（社長とか議長とか、そういったものです）がいる場合は、
    引継ぎの手続きを明文化する良い機会になります。
    何らかの理由で優しい独裁者がプロジェクトから突然去る場合は、
    特定の人を後継者として単に指名すればいいだけの場合もあります。
    一般的には、優しい独裁者がいる場合、彼だけが後継者を指名することができます。
    投票で選ばれた幹部がいる場合は、彼らを選ぶのに候補者を選び、
    投票する手続きを踏む手続きがはじめに行われたことを文書に記録すべきです。
    そうした手続きがもともとなかった場合は、文書に手続きを明文化する <emphasis>前に</emphasis> メーリングリスト上で手続きに関する合意を得るようにします。
    階層的な支配構造に神経質な態度をとる人もいるので、こうした話題を扱うときは気を使う必要があります。
</para>

<!--
<para>Perhaps the most important thing is to make it clear that the
rules can be reconsidered.  If the conventions described in the
document start to hamper the project, remind everyone that it is
supposed to be a living reflection of the group's intentions, not a
source of frustration and blockage.  If someone makes a habit of
inappropriately asking for rules to be reconsidered every time the
rules get in her way, you don't always need to debate it with
her&mdash;sometimes silence is the best tactic.  If other people
agree with the complaints, they'll chime in, and it will be obvious
that something needs to change.  If no one else agrees, then the
person won't get much response, and the rules will stay as they
are.</para>
-->

<para>
    こうしたルールは見直すことができる、というのを明示しておくことが多分一番重要です。
    たとえ文書に記録された規約がプロジェクトを妨害しはじめたとしても、
    その文書が開発者グループの意図を強く反映したもので、
    プロジェクトへの不満や障害の源ではない、ということを周知しておきましょう。
    規約が自分の邪魔をするたびに見直しを求める人がいる場合は、
    その人と議論する必要は必ずしもありません。&mdash;
    無視しておくことが最良の選択となることもあります。
    規約に不満があることで一致している人が他にいるなら、彼らが同調するでしょう。
    それは何かを見直すべきことをあらわしています。
    誰も同調しなければ、見直しを求める人に返答する人はいなくなるでしょう。
    そして規約は以前の状態のまま残るのです。
</para>

<!--
<para>Two good examples of project guidelines are the Subversion
<filename>hacking.html</filename> file, at <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, and the Apache
Software Foundation governance documents, at <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> and <ulink
url="http://www.apache.org/foundation/voting.html"/>.  The ASF is
really a collection of software projects, legally organized as a
nonprofit corporation, so its documents tend to describe governance
procedures more than development conventions.  They're still worth
reading, though, because they represent the accumulated experience of
a lot of open source projects.</para>
-->

<para>
    開発者向けガイドラインの良い例がふたつあります。
    ひとつは <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> にある、Subversion の <filename>hacking.html</filename> ファイルがあります。
    もうひとつは、<ulink url="http://www.apache.org/foundation/how-it-works.html"/> と <ulink url="http://www.apache.org/foundation/voting.html"/> にある、Apache Software Foundation の統治に関する文書です。
    Apache Software Foundation は実際はソフトウェアプロジェクトの集合体ですが、
    非営利組織として合法的に組織されています。
    よって彼らの文書には、開発する際の規約よりも、
    プロジェクトを統治する際の手続きについて多く記述されています。
    ですが、まだ読む価値は大いにあります。
    なぜなら、それはたくさんのオープンソースプロジェクトの経験を集積した文書だからです。
</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
