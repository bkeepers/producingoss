<chapter id="introduction">

<title>初步</title>

<simplesect>

<para>大部分自由软件计划是失败的。</para>

<para>人们总不太喜欢听太多失败的故事，只有成功的计划才能吸引我们的注意力。 林林总总的自由
软件的数量是惊人的 <footnote><para>SourceForge.net, 一个著名的代码存
放站点。截至到2004年4月中旬，总共有79225个计划注册。 虽然这只是选择使用SourcdForge的
计划数量，但已经非常接近互联网上全部自由软件计划的数量了。</para></footnote> 尽管只有一
小部分的计划成功了，但这仍然只是那些广为认知的计划的一部分。有太多的计划由于不为人知，即使
失败了我们也不会听到。我们无法用一个确定的时间点来宣判一个计划的死刑，人们只是停止工作无所事事。
即使我们知道一个计划的最后一个变动是何时添加的，但是在当时那些做这些工作的人通常并不知道这会
是最后的晚餐。我们甚至无法明确地定义何时一个计划才算是断气了，是停止活动6个月之后？ 是用户数
量停止增长并且人数还少于开发者的数量时？ 当一个计划的开发者发现他们只是在重复别人的工作，而决定
放弃计划，如何看待？ 然后他们决定加入另一个计划，并且在计划中使用之前的一些工作成果，如何看待？
原先的计划死亡了，或者只是搬了一次家？ </para>

<para>因为是如此复杂，得出一个精确的失败率是不可能的。但是十多年以来流传于SourcdForge.net
或是用Google搜索的得到的开源运动传闻，都指向同一个结论：这个比率是非常高的，
也许能到达90~95%。如果把那些虽然存活但是内忧外患的计划算在内，这个比率还将更高。这些计划通常
仍然在生产代码，但已不再是开发者的乐园了，要么是进展缓慢要么是互相之间失去信任。</para>

<para>这本书和避免失败有关。 它不仅演示了如何才是正确的做事方法，而且告诉你如何是错的，以便你
及时发现和纠正错误。 我希望在读过此书之后， 你不仅能对如何避免开发过程中的常见陷阱有丰富的技术储备，
而且对如何使一个成功的计划得到成长和维护有深入的了解。成功不是一场零和游戏，此书也不是教你如在在竞争
中获胜或是领先的。相反，运作一个开源计划的重要部分就是流畅地同计划中的其他人合作。在更高的层次上，每
一个成功的计划都为在世界范围内自由软件的成长作出一份贡献。</para>

</simplesect>

<simplesect>

<para>如果说导致自由软件计划失败的原因同私有软件是相同类型的，那是不公平的。实际上，
在自由软件内不会有诸如建立在不切实际的需求上的垄断，含混不清的规范，可怜的代码管理，
设计阶段不足等等笼罩在传统软件工业上的幽灵。有关这些主题的书已经是汗牛充栋， 我不打
算重复。 我想做的是描述自由软件独有的问题。 当一个自由软件计划开始运转，最常见的问题是
开发者（或是经理）难以识别开源软件开发过程中的独特问题，尽管他们可能已经在那些闭源软件的
常见问题上摔打了多年。</para>

<para>一个最常见的错误就急于从开源的形式本身获得好处，但这是不切实际的。 一纸开放
协议不会一下子让成群的活跃开发者自愿地把他们的时间交给你的计划， 开源一个原本问题多多的
计划也不能自动地修正这些问题。 实际上很可能相反， 相比不开源，开放一个计划短期内会带来一系列
全新的复杂问题和代价。 开放意味着要让完全陌生的人读懂代码，建立一个开发网站和邮件列表， 
通常还会第一次需要写文档。 这些事情的工作量是相当大的。 当然如果有开发者表示出了兴趣， 在
他们为你的计划带来好处之前回答他们的问题也是一个额外的负担。 如同开发者Jamie Zawinski
回忆Mozilla计划早期的混乱状况所说：</para>

    <blockquote>
      <para><emphasis>开源的确行， 但它绝不是万能药。  我对你的忠告是：你不能指望在一个垂死
                项目上洒一点“开源的精灵魔粉”就能让所有事情奇迹办地运转起来。 做软件是困难的。问题
                不会那么简单。</emphasis></para>

      <para>(参见<emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>一个相关的错误是对简报和打包的轻视，特别是当一个项目顺利运转时总认为这些以后再做
不迟。 简报和打包有很多的目的，所有的一切都是为了减低进入的门槛。使计划对那些后来者有吸引
力意味着编写用户和开发者文档， 建立为新来者提供信息的网站， 尽可能自动化软件的编译和安装工
作，以及其他。很不幸地很多程序员认为相比代码这些工作都是次要的。导致这种情况的原因有很多。
首先， 他们感觉这些都是无用功，因为对这些少部分的人来说，它的贡献是可见的，反之亦然。毕竟
这些编写代码的人并不真需要打包。他们知道如何安装，管理和使用这些软件，因为代码就是他们编写的。
其次，简报和打包所需要的技术通常和写代码完全不同。人们总是倾向于专注自己所擅长的，即使另外
的工作能对整个计划起到事半功倍的作用。 <xref
linkend="getting-started"/> 将详细讨论简报和打包，并且解释从计划的一开始就确定这些工作
的优先地位的重要性。</para>

<para>接下来的一个谬误是认为开源几乎或完全不需要项目管理，或者照搬商业开发的那一套管理模式也能
在开源中做得很好。管理在一个开源计划中总是不显眼的，但在成功的计划中，它通常在幕后起到推动的作用
。一个简单的心理试验就足够显示为什么。 想像一个开源计划有这样几个懒散的程序员──都有着的
坏名声──他们中的大部分人从来没有互相见过面，为这个计划工作只是出于他们的个人目的。心理试验能很
简单地预测如果<emphasis>没有</emphasis>管理，在这样一个团体中会发生什么。除非发生奇迹，否
则他们很快就会四分五裂。 事情不会如我们希望的那样自己运转。管理偶尔会相当活跃，但是大部分时候是日常
的，微妙的，低调的。只有一件事情能把开发者团结在一起，就是他们相信团队合作比单干能做得更多。因此管理
的最重要的目标是确保他们继续相信这一点，做得这点需要使他们坐下来交流，需要让能干的开发者不会因为个性
而受到排斥，总之要使计划成为开发者的留恋之地。我们将在后面讨论这些工作需要的具体技术。</para>

<para>最后还有一种类型的问题也许我们可以称之为“文化引导失败”。十年之前，甚至五年之前，谈论
自由软件运动的整体文化都为时过早，但现在不是了。一种清晰的文化正在慢慢浮现，虽然它不是一个整体──
如同很多的地域约束文化，它倾向于持在内部异议和社团活动──它有一个基本的坚固核心。大部分成功的开源计
划展示了这个核心中的部分特质。他们奖励符合这种文化的行为，惩罚相反的。他们创造了一种鼓励计划外的参与
的氛围，甚至不惜中心协调时间的代价。他们对粗野和礼貌的概念使得他们能大体地判断行为的价值。最重要的是，
长期的参与已经内化了这些标准，所以他们对产品的大体期望能不谋而合。虽非故意，不成功的计划通常是脱离了
这个核心的重要方面，无法就那些是合理的默认行为上达成一致。这意味着一旦问题出现，由于参与者缺乏通过弥
补分歧而对问题做出反馈的现成文化储备，形式会迅速恶化 。. </para>

<para>此书是一本实用的指南，而不是一篇人类学论文或是史书。然而了解今天的自由软件文化的发源对任何
一个实际的建议都是必要的基础。一个对理解这种文化的人能开源世界任意驰骋，即使遇到很多的各地风俗和
方言，仍然可以自信和有效地参与。相反，一个没能很好理解这种文化的人将会在组织或是参与一个计划的过程
中处处遇到困难和意外。由于自由软件的开发人员的数量仍然在飞速增长，其中有很多人属于后一种情况──这
多半是一种新近加入的文化，并且会持续一段时间。如果你自认为是其中的一员，下一节为你在以后将在本书或
是互联网上遇到的讨论提供了背景材料。（另一方面，如果你已经在开源中工作了一段时间，你也许早已了解了
这段历史，你可以选择跳过这一节。）</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>历史</title>

<para>软件分享自有计算机的哪天存在了。 在计算机工业的早期，厂商认为竞争的优势在于对硬件的
创新，因此并不太认真把软件当成商业资产看待。 这些早期机器用户许多都是科学家或是技师， 他们有
能力自己修改和扩展随机附送的软件。 有时用户不仅将补丁反馈给厂商， 而且分发给相似机器的其他用
户。 厂商经常允许甚至鼓励这么做：在他们眼里无论是都从源代码着手， 对软件的改经都使得机器对其
他的潜在消费者更有吸引力。 </para>

<para>虽然今天的自由软件文化在很多方面都和早期相似， 但是有两点重要的不同。 首先，当时几乎
没有硬件的标准。那是一个计算机设计创新的黄金时代， 但是繁多的计算机架构也意味着所有的事情都无法
同其他的兼通。因此，为一台机器编写的软件一般无法在另一台上工作。 在一种特定的架构或是架构族上
程序员需要专门的知识（今天程序员更多的是学习一种编程语言或是语言类型的专门知识， 他们对他们
的专业知识能移植任何一台遇到的机器上非常自信）。 因为个人的专门知识总是针对一种特定类型的
计算机，这些专门知识的积累能 让计算机对他们以及同事变得越来越有趣。 这就是为什么厂商对让特定
机器的代码和知识尽可能广的得到传播感兴趣的原因。</para>

<para>其次，当时没有互联网。虽然当时对分享的法律约束比今天少，但是技术约束更多。也就是说，
和说话相比，把数据从地方移到另一个地方是笨重不便的。在一些公司和实验室里员工之间可以通过
一些不错小型的局域网共享信息。但当一个人想同不限地点的所有人分享时，问题还是存在。克服这
些问题的途径有很多。有时独立的团体之间会互相联系，通过邮局寄送磁盘或是磁带。有时厂商扮演了
补丁的中心票据交换所的角色。厂商还会帮助在大学里的早期计算机开发者，那里的气氛是鼓励知识的
传播的。但是数据传输所必须的物理媒体意味着分享总会遇到阻力，和（实际上的或是组织上的）距离
成正比的阻力。</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>私有软件的兴起和自由软件</title>

<para>随着工业的成熟，接连发生了一系列相关的变化。众多的硬件设计中的赢家逐渐清晰起来
──有技术优势的赢家，有行销优势的赢家，或是两家合并的产物。与此同时，被称为“高级”语言
（译者注：第一种高级语言是著名的C语言）的编程语言的发展意味着一个用某种语言写成的程序能够
在另一种类型类型的计算机上编译和运行。硬件厂商不会忽视这其中的含义：现在客户无须再把自己捆
绑在一种特定的计算机架构上就可以开展一个大型的软件工程项目。随着低效率设计的消失，不同计算
机之间性能差距逐渐缩小，硬件成了厂商为未来利润率的唯一指望。但软件称为微分器，原始的计算能
力成了一种可替代的利益。销售软件或至少僵他视为硬件销售的一不可分割的部分，看起来是一种不错
的策略。 </para>

<para>这意味着厂商必须开始更严格地在他们的代码上强制执行版权。如果用户之间继续简单地分
享和修改代码，他们独立完成改进被供应商当成“附加价值”用来销售。更糟的是，分享代码可以落
如竞争对手的手里。讽刺的是，这一切都发生在互联网即将破壳而出之时。就在无障碍的软件分享在
技术是终于成为可能，计算机行业内发生的变化使它在经济上不受欢迎，至少计算机公司的观点是
如此。供应商手段强硬，要么拒绝客户访问自己机器上的源代码，要么是通过保密协议使方便的共享
成为不可能。 </para>

<sect3 id="history-conscious-resistance">
<title>清醒的反抗</title>

<para>虽然无障碍代码分享的世界正在慢慢凋零，但是至少有一名程序员的心中保持着清醒。理查德。斯塔尓曼
在70年代和80年代早期一直为麻省理工学院的人工智能实验室工作，哪里是代码分享的黄金时代的圣地
。人工智能实验室有很强的“黑客精神” <footnote><para>斯塔尓曼的“黑客”指的是“喜欢程序
并且喜欢用它炫耀聪明的人”，不是近些年来的新含义“非法进入计算机的人”。</para></footnote> 
那里的人对分享对系统做出的任何改进有狂热的爱好。正如斯塔尓曼后来写到的： </para>

    <blockquote>
      <para><emphasis>我们没有把我们的软件称为“自由软件”，因为那时这个术语还不存在。
               但它确实是。无论外面的大学或是公司来的人来索用程序，我们都很高兴这么做。如果逆
               看到在用一个少见有趣的程序，你总可以要求看源代码，所以逆能读它，修改它，或者用
               它写一个新程序。 
      </emphasis></para>

      <para>(参见 <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>1980年之后不久工业界发生的变化最终影响到了人工智能实验室，斯塔尓曼周围的伊甸园式的社
区坍塌了。一家创业公司挖走了很多实验室的程序员开发一够操作系统。这个系统同实验室正在开发的非
常相似，但使用了独占协议。与此同时，实验室购买了带有私有操作系统的新设备。 </para>

<para>斯塔尓曼看到了正在发生的更多事情： </para>

    <blockquote>
      <para><emphasis>那个时代的现代化计算机，比如VAX或是68020有自己的操作系统，但没
              有一个是自由软件。为了得到一份能运行的拷贝，你甚至得签署一份保密协议。
       </emphasis> </para>

      <para><emphasis>这就是说使用一台计算机的第一步是承诺不帮你的邻居。一个互助的社区
              是被禁止的。私有软件的拥有者定下了规矩：如果你和你的邻居分享了，你就是强盗。如果
              你想要改变，来祈求我们吧。  
      </emphasis> </para>

    </blockquote>

<para>在一些有趣的人的帮助下，他决定反抗这种趋势。他既不想继续留在肆虐的人工智能实验室
，也不想在一家新公司里写代码因为那样的结果是他工作会受到限制。最终他从实验室辞职随后创建
了GNU计划和自由软件基金会（FSF）。GNU<footnote><para>“GNU's Not Unix”的缩写， 
扩展后短语中的GNU其实是同一意思。</para></footnote>的目标是开发一个完全自由和开放的操作
系统和配套的应用软件。它们用户永远不会阻止去破解或是分享它们的修改。本质上他是要重建人工
实验室内被摧毁的那些东西，但是在全世界的规模上并且还要避免导致人工实验室的文化被动摇破裂
的那些弱点。 </para>

<para>除了新操作系统的工作，斯塔尓曼还设计了一套确保他的代码无限自由的版权协议。GNU通用公共
协议（GPL）是法律博弈中的奇招：它声明允许无限制地复制和修改代码，同时拷贝和派生产物（即修改版
本）必须在原始版本的相同协议下发布，不得附加限制。实际上，它用版权法去到达一个同传统版权法相
反的目的：取消对软件安分发的限制，它阻止  <emphasis>任何人</emphasis>,，甚至是作者本人对此
的限制。对斯塔尓曼来说，这要比简单地把他的代码分发到公共领域好的多。因为在公共领域，一份实际的
拷贝有可能被包含在一个私有程序中（这样的事情我们在使用宽松的自由软件协议的代码中听到很多了）。
虽然这种包含不会对在任何方面减弱原始代码的持续可用性，但它意味着斯塔尓曼的努力可能会帮助敌人──
私有软件。GPL可以认为为自由软件提供了一套保护机制，因为它阻止了非自由软件利用GPL协议下代码的
优势。GPL同其他自由软件协议关系的详细讨论在 <xref linkend="legal"/>.</para>

<para>在很多程序员的帮助下──其中有些是认同斯塔尓曼的思想体系，有些只是为了能看到自由软件的代码
───GNU计划开始发布一个操作系统（译者注：这个操作系统就是UNIX）的最重要组成部分的自由替代品。因为
计算机硬件和软件已经高度的标准化了，使用GNU替代其他的非自由操作系统称为可能，许多人也这么做了。
GNU文字编辑器（Emacs）和C编译器（GCC）特别的成功，它们获得大量忠实的拥护者不是因为理想主义的基础
而是因为技术价值。约在1990年GNU已经生产了一个自由操作系统的大部分，除了内核&mdash;实际负责引导计算
机，管理内存和磁盘和系统其他资源的部分。 </para>

<para>不幸的是，GNU计划选择的内核设计要比预想的更难实现。随后的延期使得自由软件基金会没能及时地
发布一个彻底自由操作系统。这缺失的部分最终由一个芬兰的计算机科学系的大学生Linus Torvalds补完，
在遍布全世界的志愿者的帮助下他完成了一个保守的内核设计。他将其命名为Linux，当把内核同GNU计划的现
存软件组合在一起，结果就是一个完全自由的操作系统诞生了。第一次，你不在需要任何的私有软件来启动和使
用你的计算机。 <footnote><para>从技术上来说Linux不是第一个，在Linux之前不久已经有了一个能在
IBM兼容机上运行的自由操作系统，386BSD。然而386BSD的启动和运行还不太稳定。Linux的飞速发展不仅因
为它是自由软件，而且安装之后你有更大的几率能启动计算机 。</para></footnote></para>

<para>这个操作系统上的很多软件都不是GNU计划的产物。实际上，GNU不是唯一的开发自由操作系统的团体。
（例如，当时NetBSD和FreeBSD的代码已经开始编写）。自由软件基金会的重要不仅在于它们产出代码，而且
是它们的政治辩护。  把自由软件当成一个目标而并非一种手段讨论，让那些对此并<emphasis>没有</emphasis> 
政治意识的程序员们很为难。 即使那些并不认同自由软件基金会的程序员也不得不面对这些问题，只是因为他们
已被贴上了另类的标签。自由软件基金会通过在他们的代码上附带有关GPL和其他文字的信息，成功地扮演了鼓动
家的角色。随着他们的代码广泛地被分发，信息随之流传。 </para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>意外的反抗</title>

<para>在自由软件运动的早期还发生了很多其他事情，其中很少有如斯塔尓曼的GNU计划般清晰的
思想体系。其中一个最重要的是  <firstterm>伯克利软件发行版</firstterm>
(<firstterm>Berkeley Software Distribution，BSD</firstterm>)，一个Unix操作系统的重新实现──这个项目可以一直追溯到
1970年代晚期AT&amp;T公司内由加州大学伯克利分校负责一个失败的私有研究计划。BSD
并没有什么要程序员们联合起来并且共同认可的政治信条。 他们通过通过高度分散地开发方式从零开始
重写了Unix命令行工具和代码库，最终是操作系统内核本身，实践了对天才和热情的信念，这一切大部
分都是由志愿者完成的。BSD计划成了非意识形态的自由软件开发的主要例子，并且他们为那些在开源
世界继续保持活动的开发者提供培训服务。</para>

<para>另一个合作开发的重镇是 <firstterm>X Window System</firstterm>，一个由MIT
联合其他有兴趣为客户提供一个窗口系统的硬件厂商开发自由的网络透明图形计算环境。 和私有软件
恰恰相反， X协议故意允许私有扩展位于自由的核心的顶部──每一个成员都需要机会加强默认的X发布
，这样就会获得了超越其他成语的竞争优势。 X Windows<footnote><para>正是的称呼是“X 
Windows System”，但实际中人们通常称之为“X Windows”。因为三个字母太繁琐了。 
</para></footnote>自身是自由软件，但目的平衡为商业利益的竞争中的差距，对终结
私有软件的统治没有丝毫的诉求。还有一个早于GNU计划很多年的例子是TeX，Donald Knuth的自由
排版系统。他使用的协议允许任何人修改和分发代码，但是除非通过一个非常严格的兼容性测试否则
不允许冠以“TeX”的名称 （这是自由协议的“商标保护”的一个例子， 更多的讨论在
 <xref linkend="legal"/>）。  Knuth并非对软件应该是自由还是私有的问题有什么意见或是其他
 诸如此类的目的，他需要一个排版系统的是为了完成他<emphasis>真正的</emphasis>目标 ──一本计算机编程的书
 （译者注，即《计算机编程艺术》一书，现在尚未全部完成）──当书完成了，没有理由不把他的系统
 公之于众。</para>
 
 </sect3>

<para>虽然没有列出每一个计划和每种协议，但是还是可以说到1980年代末基于种类繁多的协议出
现了一大堆的计划。不同协议反映了不同的动机。即使是一些选择GNU GPL的程序员也没有和GNU计
划同样强烈的意识形态动机。虽然他们很享受为自由软件工作，但是许多开发者并不把私有软件视作
社会恶魔。确实有些人是受到道德冲动的驱使要去消灭“囤积软件”（斯塔尓曼对非自由软件的称呼）
的世界，但其他人更多的是出于对技术的狂热，或对能和志同道合者合作感到愉悦，甚至简单地出于
人类对荣耀的渴望。大体上说，这些不同的动机并没有造成冲突。部分原因是和其他的创造性活动如
散文和视觉艺术不同，软件必须通过半客观测试才能成功：它必须能运行，去除绝大部分的bug。这
自动地给了一个计划的全部参与者一个共同的背景，一个理由，一个无需为除了技术以外的问题担心
的协同工作的框架。 </para>

<para>开发者们还有另一个团结互助的原因：自由软件世界生产了很多质量非常高的代码。要么是令
最接近的对手都望尘莫及，要么是价廉物美。虽然也许会有一些人是出于严格的意识形态的背景才使用
自由软件，但绝大部分人是因为它更出色才使用自由软件的。在这些人中，总有一定百分比的人乐意将
自己的时间和技术贡献出来帮助维护和改进软件。 </para>

<para>这种产出优秀代码的趋势并非是确定的，但在全球的自由软件计划出现的频率越来越高。这引
起高度依赖软件质量的商业公司的关注。其中的许多发觉他们其实早已经在日常的操作中使用自由软件
，只是并没有意识到（管理层并不总是能意识到IT部门做的每件事）。公司开始在自由软件计划中扮
演越来活跃和公开的角色，他们向自由软件的发展捐助时间和设备，有时甚至是直接的资助。在最好的
情形下，这些投资能获得数倍的回报。这些赞助商只需要为少数全职投入的专家级程序员支付工资，获
得的回报却包括了无偿的志愿者和领其他公司薪水的程序员的全部工作成果。 </para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>“自由还是开源”</title>

<para>随着商业世界越来越多的关注自由软件，程序员们面临新出现的问题。首先是free本身。
第一次听说free software（自由软件，在英语中free即有自由的意思，也有免费的意思）
这个词的时候，许多人许多人都错把它理解成“免费软件”。确实大部分的自由软件都是免费的
 <footnote><para>发放自由软件的人可以收取一定的拷贝费用，但是由于他无法阻止受领者
 去免费的再发放，这样做就没什么意义了。 </para></footnote>，但不是所有的免费软件都是
 自由的。例如在1990年代的浏览器大战中，为了抢占市场份额，网景和微软都无偿地发布他们的
 网络浏览器。这些浏览器都不是自由软件。你无法得到源代码，即使得到了也没有权利修改和再发
 布。 <footnote><para>网景 Navigator浏览器的源代码最终在1998年在一个开源协议下发布
 ，成为后来的Mozilla网络浏览器的基础。 参见<ulink
url="http://www.mozilla.org/"/>.</para></footnote> 你唯一能做的是下载一个运行
文件，然后运行。 这些浏览器的自由不会比从商店里购买的盒装软件更多。它们只是不需要付费。 </para>

<para>围绕free一词发生的混乱，很不幸地完全是由于英语本身的多义性造成的。大部分的其他语
种对“免费”和“自由”明确地区别对待（（例如在罗曼斯语中，<emphasis>gratis</emphasis> 和
 <emphasis>libre</emphasis> 对听众而言是两者利辨的）。但英语是互联网事实上的桥梁语
 言，所以一个英语的问题某种程度即是每个人的问题。围绕free一词的误解是如此之广，以至于最终
 自由软件程序员们发明了一个公式来应对： “It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>.（译者注：翻成中文就看不
懂了，所以请读者自己理解。好在这些句子都很简单。）“  但一遍又一遍的解释还是让人厌倦。许多
程序员认为，即是加以解释，对free的岐义正在阻碍公众对这种软件的理解。 </para>

<para>但实际的问题更复杂，free一词承载了一个无可避免的道德内涵：如果自由是它自身的
最终目标，它同自由软件是否被更多人接受，是否能从商业中赚取更多的利益无关。这个动机唯
一的光明面从根本上说既不是技术也不是商业，而是道义。 此外， "free as in freedom"的
定位也迫使那些既想在它们的生意的某一方面支持的实用的自由程序，另一方面有、继续推销私有
软件的公司陷入前后矛盾的境地。 </para>

<para>本已陷入身份危机的社区又迎来了这些困境。虽然程序员们写实际的自由软件，但是不关心
自由软件运动的终极目标，如果它有的话。但从一个极端走向另外一个极端的观点会引起误解，我们
会错误的以为所有人都自行其事。然而，如果我们忽略 其间的细微差别，他们都可以被归入两类信念。
一个团体追随斯塔尓曼的观点，认为共享和修改的自由是最要的事，因此如果你不再谈论自由，你就
忽略了核心问题。另一些人认为软件本身才是最重要的因素，并且对公开地宣布私有软件本质上是坏
的感到不舒服。部分的，但非全部，自由软件程序员相信作者（或是雇主，如果是有偿工作） 
<emphasis>应该</emphasis>有权利控制分发的条款，选择何种条款不应该受到道德的审问 。</para>

<para>在很长时间里这些分歧并不需要认真对待，但自由软件在商业世界里的快速成功使得这些问题
无法再回避。1998年一群程序员结成了开源宣言（Open Source Initiative，OSI）<footnote><para>OSI的主页 <ulink url="http://www.opensource.org/"/>.</para></footnote>
并创造了 <firstterm>开源</firstterm>一词来替代”自由。OSI认为”自由软件“不仅有潜在
的岐义，而且“自由”一词本身就是一系列问题的根源。运动本身需要一个在商业世界里的营销项目，
而谈论道德和社会公益在公司董事会里是不受欢迎的。用他们自己的话说： </para>

    <blockquote>
      <para><emphasis>开源宣言是自由软件的一个营销项目。用务实的基础推动自由软件远比
               慷慨激昂大谈理想有用的多。成功的本质没有变，失败的象征和看法已经变了 。&nbsp;...</emphasis></para>

      <para><emphasis>需要变得最技术化的不是开源的概念，而是名字。为什么我们不再像从前那样称之为“自由软件”呢？ </emphasis></para>

      <para><emphasis>一个直接的原因是“自由软件”一词容易以一种导致冲突的方式被误解。 
               &nbsp;...</emphasis></para>

      <para><emphasis>但真正的更名原因是营销上的。我们现在想打入商业世界。我们有成功
               的产品，但在过去我们的定位是可怕的。自由软件一词被商人们误解了，他们把这种描述
               理解成反商业主义，甚至更糟，贼。 </emphasis></para>

      <para><emphasis>主流公司的CEO和CTO们绝不会买“自由软件”。但如果我们保持非常相似
               的传统，人还是那些，相同的自由软件协议，只是换了一个“开源”的标签的话。他们会买。 
               </emphasis></para>

      <para><emphasis>一些黑客觉得这很难相信，但那是因为他们的技术化思维已经僵化了，被条
               约所束缚，不能理解当你推销某样东西时形象有多重要。 </emphasis></para>

      <para><emphasis>做营销时，表就是里。我们打算用什么样的形象来消除同公司打交道的障碍， 
               和我们的行为，我们的信念，我们的软件同样重要。 .</emphasis></para>

      <para>(参见<emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      和<emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>通过上面的文字我们可以一窥争论的冰山一角。它提到了“我们的信念”，但是巧妙地回避了这
些信念到底是什么。对有些人呢这种信念也许是认为开放的开发过程将产出更好的代码，对其他人也许是
认为所有的信息都应该共享。他们用到了“贼”一词（据推测是）隐射非法的复制──一许多人反对这一点，
认为如果原持有人随后仍然保留原件就不能视作贼。这里有一个明显的暗示说自由软件运动被错误地划入了
反商业主义，但它小心翼翼地回避了这种归类是否有现实依据的问题。 </para>

<para>其中没有一条说OSI的网站是自相矛盾或是令人费解的。没有。相反，这个例子表明了OSI主张自
由软件运动到底缺少了什么：好的营销。此处的“好”指“能在商业世界生存”。开源宣言为许多人指引了
迷津──一套将自由软件作为开发的方法论和商业策略而不是道德远征的语汇。 </para>

</sect2>

<para>开源宣言的出现改变了自由软件的面貌。 它将长久存在的矛盾摆上了桌面，迫使运动承认如
同外部一样自身内部同样有派系斗争。由于大部分的计划包括程序员都是跨阵营的，加上一些很难清
楚归类的参与者，今天两边都在寻找共同的基础。这不意味着人们从不谈论道德动机──例如，有时
人们会讨论传统的”黑客精神“的流失的问题。但是很少有自由软件/开源开发者在一个计划中公开
地和其他人谈论基本立场问题。如果有人代码写的不错，你不会问他们到底是出于道德原因还是
因为雇主付给他们工资或是为在推荐信上添加砝码，或其他什么原因。你从技术角度评估贡献，从技术
角度反馈。甚至Debian这样毫不讳言政治的组织（他们的目标是提供一个100%自由的操作环境）已经
不再那么严格对待集成非自由代码和同目标不一致的程序员共事了。 </para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>现状</title>

<para>当运作一个自由软件计划，你不必在日常工作中谈论承重的哲学命题。程序员不会要求计划
中的其他人和自己在所有事情上看法一致（那些这一点上坚持的人很快就会发现他们无法在任何计划
内工作）。但是逆必须了解”自由还是开源“之争的存在。部分原因是避免谈论引起部分开发者抵触
的事情，部分是因为理解开发者的动机是管理一个计划最好的方法──有时，是<emphasis>唯一</emphasis>
的方法。</para>

<para>自由软件是一种有关选择的文化。你必须在第一时间理解为什么人们会在此，才能成功地
运作一个项目。强制是不管用的。如果一个计划让人不高兴了，他们会立刻转移到另一个计划。自
由软件的独特之处还在于志愿者社区的投资强度。大部分内部的人从来没有和另一个参与者面对面
的交流过，只是在高兴时捐助一点时间。通常人类用来互相结识并结成牢固的团体的渠道被压缩成
了一条细管：在键盘上打字然后通过电缆传输。因此，形成一个有凝聚力和专注力的组织需要花上
很长时间。相反，在首次接触的五分钟内流失一个潜在的开发者是非常容易的。如果对一个计划没
有良好的第一映像，新来者很少会给予第二次机会。 </para>

<para>关系的无常性，或者是 <emphasis>潜在的</emphasis>
无常性,，也许是面对一个新计划时最让人畏惧的一点。为何恳求这些人呆在一起尽可能长的时间
做一些有用的事？这个问题的答案族可以塞满此书的剩余部分，但如果必须用一句话来回答，会
是这样：</para>

    <blockquote>
      <para><emphasis>人们应该能感到他们同一个计划的联系和对它的影响力是直接同他
              们的贡献成正比的。</emphasis></para> 
    </blockquote>

<para>没有那类开发者或是潜在的开发者应该感到自己由于非技术原因而被区别对待。特别是计
划的赞助商或是领取报酬的开发者在这一点上要特别 小心，在将详细讨论<xref
linkend=""/>。当然，这不是说如果没有公司赞助商的话就可以高枕无忧了。钱是能影响
计划成功的许多因素其中之一。还有诸如语言的选择，协议的选择，决定开发进程，确定设立何种类
型的基础架构之类的许多其他因素。要开始一个计划点击右下角的<link linkend="getting-started">下一章主题</link>的链接。</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
