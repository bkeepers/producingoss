<chapter id="introduction">

<title>Introdução</title>

<simplesect>

<para>A maioria dos projectos de software livre fracassa.</para>

<para>Tendemos a não ouvir falar muito das falhas. Só os projectos
bem sucedidos atraiem a atenção e há tantos projectos de software
livre no total<footnote><para>O SourceForge.net, um popular
local de hospedagem, tinha 79.225 projectos registados em meados de
Abril 2004.
Este não está sequer perto do número total de projectos de software
livre na Internet, claro; este é só o número daqueles que escolheram
usar o SourceForge.</para></footnote> que mesmo que só uma pequena
percentagem seja bem sucedida, o resultado será ainda muitos projectos
com visibilidade. Também não ouvimos falar das falhas pois tais falhas
são um não evento. Não há um só momento em que um projecto deixa de ser
viável; as pessoas simplesmente afastam-se e deixam de trabalhar nele.
Pode haver um momento em que uma última alteração é efectuada ao 
projecto, mas aqueles que a fazem podem não saber nesse momento que 
essa alteração foi a última. Não há uma clara definição de quando um 
projecto expirou. Será quando deixa de se trabalhar activamente nele
durante seis meses? Quando a sua base de utilizadores deixa de crescer,
ser ter excedido a sua base de programadores? O que sucede quando os
programadores de um projecto o abandonam porque perceberam que estavam
a duplicar o trabalho de outros e se se juntarem a esse outro projecto
e depois o expandirem de modo a incluirem muito do seu esforço anterior?
O primeiro projecto morreu ou simplesmente mudou de nome?</para>

<para>Devido a tais complexidades é impossível precisar a taxa de 
morbilidade. Mas provas anedóticas de mais de uma década de «open
source», algumas moldadas no SourceForge.net e alguma pesquisa no
Google todas apontam para a mesma conclusão: a taxa é extremamente
alta provavelmente na ordem dos 90&ndash;95%.  O número aumenta se 
incluirmos projectos sobreviventes mas disfuncionais: aqueles que
<emphasis>são</emphasis> código em execução em ambiente de produção,
mas que não são uma boa vizinhança, ou que não estão a progredir tão
rapidamente ou tão fielmente quanto podiam.</para>

<para>O tema deste livro é evitar falhar. Examina não só como fazer
as coisas bem feitas, mas também como as fazer mal feitas, de modo a 
poder reconhecer e corrigir relativamente cedo os problemas. A minha
esperança é que após a sua leitura, tenha um reportório de técnicas
não só para evitar as armadilhas comuns do desenvolvimento do «open
source», mas também para saber comportar-se com o crescimento e 
manutenção de um projecto bem sucedido. O sucesso não é um jogo
de soma zero, e este livro não trata de ganhar ou ultrapassar a 
competição. De facto uma parte importante de gerir um projecto de 
«open source» é trabalhar suavemente com outros projectos relacionados.
A longo prazo, cada projecto bem sucedido contribui para o bem estar 
de todo o corpo universal de software livre.</para>

</simplesect>

<simplesect>

<para>Seria tentador dizer que os projectos de software livre falham pelas
mesmas ordens de razões que os projectos de software proprietários.
Certamente, que o software livre não tem o monopólio de requisitos
irrealistas, especificações vagas, má gestão recursos, fases de concepção
insuficientes ou qualquer dos outros bichos maus que já tão bem conhecemos.
Há um enorme corpo de documentação escrito sobre estes tópicos e não
os irei aqui duplicar. Em vez disso irei tentar descrever os problemas
específicos do software livre. Quando um projecto de software livre
aterra é frequente que tal se deva a que programadores (ou gestores)
não tenham gostado dos problemas únicos do desenvolvimento de 
software «opem source» mesmo que tenham estado bem preparados para
as dificuldades mais conhecidas do desenvolvimento de código fechado.</para>

<para>Um dos erros mais comuns são expectativas irrealistas sobre as 
vantagens do próprio «open source».  Uma licença «open source» não é
garantia de que ordas de programadores activos voluntariem o seu tempo
para o vosso projecto, nem efectuar «open-sourcing» cura automaticamente
as mágoas de um projecto em problemas. De facto, normalmente o oposto: 
abrir um projecto pode adicionar um novo conjunto de complexidades, e 
custar a <emphasis>mais</emphasis> no curto prazo do que mantê-lo em casa.
Abrir o código significa tornar o código compreensível a completos estranhos,
criar um sítio na rede para o seu desenvolvimento e listas de correio, e
frequentemente escrever documentação pela primeira vez. Tudo isto representa
muito trabalho. E, claro está, se qualquer programador interessado
<emphasis>aparecer</emphasis> há o peso adicional de lhes responder durante
pelo menos algum tempo antes de começar a ver qualquer vantagem da sua
presença. Como o programador Jamie Zawinski disse dos dias complicados iniciais
do projecto Mozilla:</para>

    <blockquote>
      <para><emphasis>O «Open source» funciona mesmo, mas não é uma
      panaceia, de todo. Se há uma uma verdade a extrair daqui é que
      não pode tomar um projecto a morrer, deitar uns pós de perlim-pim-
      -pim do «open source», e tudo funcionar como que por magia. O
	  software (moleware) é duro. Os problemas não são assim tão somples.
	  </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>A related mistake is that of skimping on presentation and
packaging, figuring that these can always be done later, when the
project is well under way.  Presentation and packaging comprise a wide
range of tasks, all revolving around the theme of reducing the barrier
to entry.  Making the project inviting to the uninitiated means
writing user and developer documentation, setting up a project web
site that's informative to newcomers, automating as much of the
software's compilation and installation as possible, etc.  Many
programmers unfortunately treat this work as being of secondary
importance to the code itself.  There are a couple of reasons for
this.  First, it can feel like busywork, because its benefits are most
visible to those least familiar with the project, and vice versa.
After all, the people who develop the code don't really need the
packaging.  They already know how to install, administer, and use the
software, because they wrote it.  Second, the skills required to do
presentation and packaging well are often completely different from
those required to write code.  People tend to focus on what they're
good at, even if it might serve the project better to spend a little
time on something that suits them less.  <xref
linkend="getting-started"/> discusses presentation and packaging
in detail, and explains why it's crucial that they be a priority from
the very start of the project.</para>

<para>Next comes the fallacy that little or no project management is
required in open source, or conversely, that the same management
practices used for in-house development will work equally well on an
open source project.  Management in an open source project isn't
always very visible, but in the successful projects, it's usually
happening behind the scenes in some form or another.  A small thought
experiment suffices to show why.  An open source project consists of a
random collection of programmers&mdash;already a notoriously
independent-minded category&mdash;who have most likely never met each
other, and who may each have different personal goals in working on
the project.  The thought experiment is simply to imagine what would
happen to such a group <emphasis>without</emphasis> management.
Barring miracles, it would collapse or drift apart very quickly.
Things won't simply run themselves, much as we might wish otherwise.
But the management, though it may be quite active, is often informal,
subtle, and low-key.  The only thing keeping a development group
together is their shared belief that they can do more in concert than
individually.  Thus the goal of management is mostly to ensure that
they continue to believe this, by setting standards for
communications, by making sure useful developers don't get
marginalized due to personal idiosyncracies, and in general by making
the project a place developers want to keep coming back to.  Specific
techniques for doing this are discussed throughout the rest of this
book.</para>

<para>Finally, there is a general category of problems that may be
called "failures of cultural navigation."  Ten years ago, even five,
it would have been premature to talk about a global culture of free
software, but not anymore.  A recognizable culture has slowly emerged,
and while it is certainly not monolithic&mdash;it is at least as prone
to internal dissent and factionalism as any geographically bound
culture&mdash;it does have a basically consistent core.  Most
successful open source projects exhibit some or all of the
characteristics of this core.  They reward certain types of behaviors,
and punish others; they create an atmosphere that encourages unplanned
participation, sometimes at the expense of central coordination; they
have concepts of rudeness and politeness that can differ substantially
from those prevalent elsewhere.  Most importantly, longtime
participants have generally internalized these standards, so that they
share a rough consensus about expected conduct.  Unsuccessful projects
usually deviate in significant ways from this core, albeit
unintentionally, and often do not have a consensus about what
constitutes reasonable default behavior.  This means that when
problems arise, the situation can quickly deteriorate, as the
participants lack an already established stock of cultural reflexes to
fall back on for resolving differences. </para>

<para>This book is a practical guide, not an anthropological study or
a history.  However, a working knowledge of the origins of today's
free software culture is an essential foundation for any practical
advice.  A person who understands the culture can travel far and wide
in the open source world, encountering many local variations in custom
and dialect, yet still be able to participate comfortably and
effectively everywhere.  In contrast, a person who does not understand
the culture will find the process of organizing or participating in a
project difficult and full of surprises.  Since the number of people
developing free software is still growing by leaps and bounds, there
are many people in that latter category&mdash;this is largely a
culture of recent immigrants, and will continue to be so for some
time.  If you think you might be one of them, the next section
provides background for discussions you'll encounter later, both in
this book and on the Internet.  (On the other hand, if you've been
working with open source for a while, you may already know a lot of
its history, so feel free to skip the next section.)</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>História</title>

<para>A partilha de software existe desde o início do próprio software. 
Nos primeiros tempos dos computadores, os fabricantes sentiram que as 
vantagens competitivas ocorreriam sobretudo na inovação do hardware e, 
por isso, não prestaram muita atenção ao software como um activo de negócio. 
Muitos dos clientes dessas primeiras máquinas eram cientistas ou técnicos, 
capazes de modificar e extender o software distribuído com as próprias 
máquinas. Os clientes por vezes distribuíam os seus patches não apenas ao 
fabricante, mas também a outros proprietários de máquinas semelhantes. 
Os fabricantes muitas vezes toleravam e até encorajavam esta situação: 
aos seus olhos, melhorias no software, independentemente da sua fonte, 
serviam apenas para tornar a máquina mais atractiva a outros potenciais 
clientes.</para>

<para>Embora este período inicial lembre a cultura actual do software 
livre em muitos aspectos, diferia em dois aspectos cruciais. Em primeiro 
lugar, havia muito pouca padronização do hardware&mdash;era um tempo de 
inovação florescente no projecto de computadores, mas a diversidade de 
arquitecturas de computadores significava incompatibilidade total. Logo, 
o software escrito para uma máquina não funcionaria em geral noutra. Os 
programadores tendiam a adquirir perícia numa dada arquitectura ou família 
de arquitecturas (enquanto hoje eles adquiririam mais provavelmente perícia 
numa linguagem ou família de linguagens de programação, confiantes na 
capacidade de transferir os seus conhecimentos para qualquer hardware com 
o qual viessem a trabalhar). Dado que a perícia de uma pessoa tenderia a 
ser específica de um tipo de computador, a sua acumulação de experiência 
tinha o efeito de tornar esse computador mais atractivo para ela e para os 
seus colegas. Era, por isso, do interesse do fabricante a maior distribuição 
possível de código e conhecimento específicos da máquina.</para>

<para>Em segundo lugar, não havia Internet. Embora houvesse menos
restrições legais à partilha do que hoje, havia mais restrições
técnicas: a forma de levar dados de um lugar para outro era
inconveniente e relativamente desadequada. Havia algumas redes locais,
pequenas, boas para partilhar informação entre funcionários no mesmo
laboratório de investigação ou empresa. Existiam, contudo, barreiras a
ultrapassar se alguém quisesse partilhar com todos, onde quer que
estivessem. Essas barreiras <emphasis>foram</emphasis> ultrapassadas
em muitos casos. Por vezes, diferentes grupos contactavam entre si
independentemente, enviando discos ou fitas por correio terrestre e,
às vezes, os próprios fabricantes serviam como centros de distribuição
de patches. Também ajudou o facto de muitos dos primeiros
programadores de computadores trabalharem em universidades, onde a
publicação do próprio conhecimento era expectável. Apesar disso, a
realidade física da transmissão de dados implicava existir sempre uma
impedância à partilha, proporcional à distância (real ou
organizacional) que o software tinha de percorrer. A partilha
alargada, sem qualquer atrito, tal como conhecemos hoje, não era possível.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>O aparecimento do Software Proprietário e do Software Livre</title>

<para>À medida que a indústria amadureceu, algumas mudanças
interrelacionadas ocorreram em simultâneo. A imensa diversidade de
formas de hardware gradualmente conduziu a alguns claros
vencedores&mdash;vencedores por via de tecnologia superior, marketing
superior, ou alguma combinação de ambos. Ao mesmo tempo, sem ser uma
absoluta coincidência, o desenvolvimento das chamadas linguagens de
"alto nível" levou a que se pudesse escrever um programa numa
linguagem e tê-lo automaticamente traduzido ("compilado") para correr
em diferentes tipos de computadores. As implicações deste facto não
passaram despercebidas aos fabricantes de hardware: um cliente podia
agora levar a cabo um esforço significativo de engenharia de software
sem ser necessário ficar preso a uma dada arquitectura de
computador. Combinando isto com a gradual indiferenciação nos
desempenhos entre os vários computadores, à medida que as formas menos
eficientes iam sendo afastadas, um fabricante que considerava o seu
hardware como o seu único activo podia esperar um futuro de diminuição
crescente das margens de lucro. O poder computacional em si tornava-se um bem
fungível, enquanto o software se tornava o elemento
diferenciador. Vender software, ou pelo menos tratá-lo como parte
integrante das vendas de hardware, começava a parecer uma boa estratégia.</para>

<para>Isto fez com que os fabricantes tivessem de começar a impôr os
direitos de autor no seu código mais estritamente. Se os utilizadores
simplesmente continuassem a partilhar e a modificar código livremente
entre eles, poderiam reimplementar de forma independente algumas das
melhorias agora vendidas como "valor acrescentado" pelo
fornecedor. Pior do que isso, o código partilhado poderia ir parar às
mãos de concorrentes. Ironicamente, tudo isto acontecia no momento em
que a Internet estava decisivamente arrancando. Precisamente quando a
partilha de software verdadeiramente desimpedida tornava-se
tecnicamente possível, mudanças no negócio dos computadores tornavam-na
economicamente indesejável, pelo menos do ponto de vista de qualquer
empresa. Os fornecedores impuseram restrições, negando aos
utilizadores o acesso ao código que corria nas suas máquinas ou
insistindo em contratos de confidencialidade que tornavam a partilha 
impossível na prática.</para>

<sect3 id="history-conscious-resistance">
<title>Resistência Consciente</title>

<para>À medida que o mundo da troca irrestrita de código se ia
desvanecendo lentamente, uma contra-reacção cristalizou-se na mente de,
pelo menos, um programador. Richard Stallman trabalhou no Laboratório
de Inteligência Artificial (Artificial Intelligence Lab&mdash;AI Lab) no 
Instituto de Tecnologia de Massachusetts (Massachusetts Institute of 
Technology&mdash;MIT) nos anos 1970 e início dos anos 1980, durante o que 
veio a ser uma época e uma localização de ouro para a partilha de código. 
O AI Lab tinha uma forte "ética hacker"<footnote><para>Stallman utiliza a
palavra "hacker" no sentido de "alguém que adora programar e exulta na
sua perícia", não no sentido relativamente recente de "alguém que
invade computadores."</para></footnote>. Não apenas a partilha de
quaisquer melhorias feitas no sistema era encorajada, como de facto
esperava-se que todos o fizessem. Como Stallman escreveu mais
tarde:</para>

<blockquote>
<para><emphasis>Não chamávamos ao nosso software "software livre",
porque esse termo ainda não existia; mas era exactamente isso. Sempre
que alguém de outra universidade ou empresa queria implementar ou usar
um programa, nós permitíamos com agrado. Se visse alguém a usar um
programa desconhecido e interessante, podia sempre pedir para ver o
código, para que pudesse lê-lo, alterá-lo ou canibalizar partes dele
para criar um novo programa.</emphasis></para>
<para>(de <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
</blockquote>

<para>Esta comunidade Edénica colapsou em torno de Stallman logo após
1980, quando as alterações que sucediam no restante da indústria
finalmente alcançaram o AI Lab. Uma empresa em arranque contratou
muitos dos seus programadores para trabalharem num sistema operativo
semelhante ao existente no Lab, mas agora sob uma licença
exclusiva. Ao mesmo tempo, o AI Lab adquiriu novo equipamento que
trazia um sistema operativo proprietário.</para>

<para>Stallman vislumbrou o padrão dos acontecimentos:</para>
<blockquote>
<para><emphasis>Os computadores modernos da época, como o
VAX ou o 68020, traziam o seu próprio sistema operativo, mas nenhum
era software livre: era preciso assinar um contrato de
confidencialidade mesmo para obter apenas uma cópia
executável.
</emphasis></para>

<para><emphasis>Isto significava que o primeiro passo para usar um
computador era prometer não ajudar o colega. Uma comunidade cooperante
era proibida. A regra definida pelos donos do software proprietário
era, "Se você partilhar com o seu colega, é um pirata. Se quer
alterações, suplique-nos para as fazermos."
</emphasis></para>
</blockquote>

<para>Por algo peculiar na sua personalidade, ele decidiu
resistir à tendência. Em vez de continuar a trabalhar no (agora
dizimado) AI Lab, ou aceitar um emprego escrevendo código numa das
novas empresas, onde os resultados do seu trabalho ficariam selados
numa caixa, ele despediu-se do Laboratório e iniciou o Projecto GNU e a
Fundação para o Software Livre (Free Software Foundation&mdash;FSF). O
objectivo de GNU<footnote><para>Significa "GNU's Not Unix" (GNU não é
Unix) e a palavra GNU naquela expansão significa ... o
mesmo.</para></footnote> era desenvolver um sistema operativo de
computador e um conjunto de software de aplicações totalmente livres e
abertos, nos quais os utilizadores nunca fossem impedidos de modificar
ou de partilhar as modificações. Stallman estava essencialmente a
tentar recriar o que tinha sido destruído no AI Lab, mas a uma escala
mundial e sem as vulnerabilidades que tornaram a cultura do AI Lab
susceptível à desintegração.</para>

<para>Para além de trabalhar no novo sistema operativo, Stallman
elaborou uma licença de direitos de autor cujos termos garantiam que o
seu código seria perpetuamente livre. A Licença Pública Geral GNU (GNU
General Public License&mdash;GPL) é uma forma inteligente de judo
legal: afirma que o código pode ser copiado e modificado sem
restrição, e que as cópias e trabalhos derivados (i.e., versões
modificadas) devem ser distribuídos sob a mesma licença, sem
restrições adicionais. Na verdade, utiliza a lei dos direitos de autor
para atingir um efeito contrário ao dos direitos de autor
tradicionais: em vez de limitar a distribuição do software, impede
<emphasis>qualquer um</emphasis>, até mesmo o autor, de a
limitar. Para Stallman, isto era preferível a simplesmente colocar o
seu código no domínio público. Se estivesse no domínio público,
qualquer cópia do código poderia ser incorporada num programa
proprietário (como se sabe ter acontecido a código sob licenças
permissivas). Embora tal incorporação não diminua em nada a
disponibilidade permanente do código original, implicaria um benefício
dos esforços de Stallman por parte do inimigo&mdash;o software
proprietário. A GPL pode ser vista como uma forma de proteccionismo do
software livre, ao impedir o software não-livre de tirar proveito do
código "GPLeado". A GPL e a sua relação com outras licenças de
software livre são discutidas detalhadamente em <xref linkend="legal"/>.</para>

<para>Com a ajuda de muitos programadores, alguns dos quais partilhavam a 
ideologia de Stallman e outros que queriam apenas muito código livre 
disponível, o Projecto GNU começou a lançar substitutos livres de muitos 
dos componentes mais críticos de um sistema operativo. Devido à agora 
generalizada padronização do hardware e software de computadores, era 
possível utilizar os substitutos GNU em sistemas não-livres e muitos 
fizeram-no. O editor de texto GNU (Emacs) e o compilador de C (GCC) foram 
particularmente bem sucedidos, adquirindo numerosos e fiéis seguidores, não 
pelas bases ideológicas mas simplesmente pelo seu mérito técnico. Cerca de 
1990, GNU tinha produzido grande parte de um sistema operativo livre, 
exceptuando o <emphasis>kernel</emphasis>&mdash;o componente lançado no 
arranque pela máquina e responsável por gerir a memória, discos e outros 
recursos do sistema.</para>

<para>Infelizmente, o projecto GNU havia escolhido um tipo de kernel
que acabou por ser mais difícil de implementar do que o esperado. O
atraso resultante impediu a Free Software Foundation de fazer o
primeiro lançamento de um sistema operativo totalmente livre. Em vez
disso, a peça final foi colocada no lugar por Linus Torvalds, um
estudante finlandês de ciência dos computadores que, com a ajuda de
voluntários em todo o mundo, havia completado um kernel livre de tipo
mais conservador. Ele chamou-o de Linux e, ao ser combinado com os
programas GNU existentes, o resultado foi um sistema operativo
totalmente livre. Pela primeira vez, era possível arrancar um
computador e realizar trabalho sem qualquer software
proprietário.<footnote><para>Tecnicamente, Linux não foi o
primeiro. Um sistema operativo para computadores IBM-compatíveis,
designado de 386BSD, tinha surgido um pouco antes do Linux. Era,
porém, muito mais difícil conseguir arrancar um 386BSD. Linux causou
uma tal impressão não apenas por ser livre, mas porque havia realmente
uma grande probabilidade de conseguirmos arrancar o computador com
este sistema instalado.</para></footnote></para>

<para>Muito do software neste novo sistema operativo não havia sido
produzido pelo projecto GNU. De facto, GNU não era sequer o único
grupo a trabalhar num sistema operativo livre (por exemplo, o código
que eventualmente originaria o NetBSD e o FreeBSD já estava sendo
desenvolvido na altura). A importância da Free Software Foundation não
estava apenas no código que havia escrito, mas também na sua retórica
política. Ao falar de software livre como uma causa em vez de uma mera
conveniência, tornava difícil aos programadores
<emphasis>não</emphasis> ter uma consciência política a esse
respeito. Mesmo aqueles que discordavam com a FSF tinham de encarar o
assunto, nem que fosse para assumir uma posição distinta. A eficácia
propagandista da FSF consistia em atar o seu código a uma mensagem,
por meio da GPL e outros textos. À medida que o seu código se
espalhava, o mesmo sucedia com a sua mensagem.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Resistência Acidental</title>

<para>Muitas outras coisas sucediam na cena emergente do software
livre, entretanto, sendo poucas tão ideologicamente explícitas como o
Projecto GNU de Stallman. Uma das mais importantes foi a
<firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), uma reimplementação gradual do sistema
operativo Unix&mdash;que, até ao final dos anos 1970, havia sido um
projecto de investigação vagamente proprietário na AT&amp;T&mdash;por
programadores na Universidade da Califórnia em Berkeley. O grupo BSD
não fez quaisquer declarações políticas ostensivas sobre a necessidade
de os programadores se unirem e partilharem entre si, mas eles
<emphasis>praticaram</emphasis> a ideia com estilo e entusiasmo,
coordenando um esforço massivo de desenvolvimento distribuído onde as
utilidades de linha de comandos e bibliotecas de código, e
eventualmente o próprio kernel do sistema operativo, foram reescritos
de raíz sobretudo por voluntários. O projecto BSD tornou-se um exemplo
importante de desenvolvimento não-ideológico de software livre,
servindo também como campo de treino para muitos programadores que
permaneceriam activos no mundo open source.</para>

<para>Outro núcleo de desenvolvimento cooperativo foi o <firstterm>X
Window System</firstterm>, um ambiente de computação gráfico livre e 
transparente em rede, desenvolvido no MIT em meados dos anos 1980 em 
parceria com fabricantes de hardware que tinham um interesse comum de 
poderem oferecer um sistema gráfico aos seus clientes. Longe de se opôr ao
software proprietário, a licença X deliberadamente permitia extensões
proprietárias sobre o núcleo livre&mdash;cada membro do consórcio
queria a possibilidade de poder valorizar a distribuição X de base e, 
dessa forma, obter vantagem competitiva sobre os outros membros.
X Windows<footnote><para>Os criadores preferem designá-lo como "X
Window System" mas, na prática, o sistema é habitualmente designado de
"X Windows", porque três palavras são excessivas.</para></footnote> 
era software livre, mas principalmente como uma forma de nivelar o
campo entre interesses empresariais concorrentes e não por algum
desejo de pôr fim ao domínio do software proprietário. Um exemplo
mais, precedendo o projecto GNU em alguns anos, foi o TeX, sistema de 
tipografia livre com qualidade de publicação de Donald Knuth. Ele 
lançou-o sob uma licença que permitia a todos a modificação e
distribuição do código, mas não chamando o resultado "TeX" a não ser
que passasse um conjunto muito estrito de testes de compatibilidade
(isto é um exemplo da classe de licenças livres "protectoras de
marca", discutida adiante no <xref linkend="legal"/>). Knuth  não
estava tomando posição sobre a questão software
livre-versus-proprietário; ele precisava apenas de um melhor sistema
de tipografia para poder completar o seu
<emphasis>verdadeiro</emphasis> objectivo&mdash;um livro sobre
programação de computadores&mdash;e não viu razão para não lançar o 
seu sistema livremente após conclusão.</para>

</sect3>

<para>Sem listar todos os projectos e todas as licenças, pode
afirmar-se com segurança que, nos finais dos anos 1980, existia uma
boa quantidade de software livre sob uma variedade apreciável de
licenças. A diversidade de licenças reflectia uma correspondente
diversidade de motivações. Mesmo alguns dos programadores que
escolheram a licença GNU GPL eram muito menos motivados
ideologicamente do que o próprio projecto GNU. Embora gostassem de
desenvolver software livre, muitos programadores não consideravam o
software proprietário um mal social. Alguns sentiam-se moralmente
impulsionados a livrar o mundo do "aprisionamento de software" (termo
de Stallman para o software não-livre), mas outros eram mais motivados
pelo entusiasmo técnico ou pela satisfação de trabalhar com
colaboradores de ideias semelhantes, ou até mesmo por simples desejo
humano de glória. Apesar disso, maioritariamente, estas motivações
díspares não interagiam de forma destrutiva. Isto sucede em parte
porque o software, ao contrário de outras formas criativas como a
prosa ou as artes visuais, precisa de passar testes semi-objectivos
para ser considerado bem sucedido: precisa de correr e estar
razoavelmente livre de erros. Isto dá a todos os participantes num
projecto uma espécie de base comum automática, uma razão e uma
plataforma para trabalhar em conjunto sem preocupação excessiva com
qualificações para além das técnicas.</para>

<para>Os programadores tinham outra razão para se juntarem: verificou-se 
que o software livre estava produzindo algum código de excelente 
qualidade. Em alguns casos, constatava-se que era tecnicamente superior à 
alternativa não-livre mais próxima; noutros casos, era pelo menos comparável 
e, evidentemente, custava sempre menos. Embora apenas alguns pudessem estar 
motivados para correr software livre com base exclusivamente em preceitos 
filosóficos, um grande número de pessoas estava satisfeito por poder usar 
software com melhores resultados. Além disso, de entre os que o usavam, uma 
parte estava sempre disposta a dar do seu tempo e capacidades para ajudar a 
manter e a melhorar o software.</para>

<para>Esta tendência para produzir código de qualidade não era certamente 
universal, mas estava sucedendo com frequência crescente em projectos de 
software livre em todo o mundo. Empresas que dependiam fortemente de software 
começaram gradualmente a aperceber-se do facto. Muitas delas descobriram que 
já estavam usando software livre no seu quotidiano e simplesmente não sabiam 
(a gestão de topo nem sempre está atenta a tudo o que o departamente de TI 
faz). Grandes empresas começaram a assumir um papel mais activo e público em 
projectos de software livre, contribuíndo com tempo e equipamento e, por 
vezes, até mesmo financiando directamente o desenvolvimento de software livre. 
Tais investimentos poderiam, na melhor das hipóteses, dar origem a retornos 
muito significativos. O patrocinador paga apenas a um pequeno grupo de 
programadores experientes para se dedicarem a tempo inteiro ao projecto, mas 
beneficia das contribuições de <emphasis>todos</emphasis>, incluíndo de 
trabalho de voluntários não-pagos e de programadores financiados por outras 
empresas.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free"<footnote><para>(N.T.) A ambiguidade do termo original
<emphasis>free</emphasis>, discutida nesta secção, não surge no
Português, onde <emphasis>livre</emphasis> associa o termo original ao 
conceito de liberdade e <emphasis>grátis</emphasis> ao conceito de gratuidade
(custo zero).</para></footnote> Versus "Open Source"</title>

<para>À medida que o mundo empresarial dava cada vez mais atenção ao
software livre, os programadores enfrentavam novas questões de
apresentação. Uma delas era a própria palavra "free" (livre,
grátis). Ao ouvirem pela primeira vez o termo "free software", muitos
associavam erradamente ao mero conceito de "software a custo zero". É
um facto que todo o software livre tem custo zero<footnote><para>Pode
cobrar-se um valor por fornecer cópias de software livre mas, dado que
não se pode impedir os destinatários de eles próprios poderem oferecer
o software sem custo, o preço rapidamente é levado a
zero.</para></footnote>, mas nem todo o software a custo zero é
livre. Por exemplo, durante a "batalha dos browsers" nos anos 1990,
ambas a Netscape e a Microsoft disponibilizaram os seus browsers web
concorrentes sem custo, numa corrida para ganhar quota de
mercado. Nenhum dos browsers era livre pelo conceito de "software
livre". O código não era acessível e, mesmo que fosse, não havia
permissão para modificá-lo ou redistribuí-lo.<footnote><para>O código
do Netscape Navigator <emphasis>foi</emphasis> eventualmente lançado
sob uma licença open source, em 1998, tornando-se a base do browser
web Mozilla. Veja <ulink url="http://www.mozilla.org/"/>.</para></footnote> 
Era possível apenas descarregar um ficheiro executável e corrê-lo. Os
browsers não eram mais livres do que o software envolvido em película
e vendido em lojas; eram apenas mais baratos.
</para>

<para>Esta confusão em torno da palavra "free" deve-se inteiramente a
uma infeliz ambiguidade na língua inglesa. A maioria das restantes
línguas distingue preços baixos de liberdade (a distinção entre 
<emphasis>gratis</emphasis> e <emphasis>libre</emphasis> é
imediatamente clara a todos os que falam línguas românicas, por
exemplo). Todavia, a posição do Inglês como língua de ligação
<emphasis>de facto</emphasis> da Internet significa que um problema
para o Inglês é, em certa medida, um problema para todos. O
desentendimento em torno da palavra "free" tornou-se tão evidente que
os programadores de software livre eventualmente desenvolveram uma
resposta: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free
beer</emphasis>."<footnote><para>(N.T.) Dada a particularidade do termo
"free" como forma ambígua, a tradução da frase fica necessariamente
debilitada e até estranha, mas será algo como "É
<emphasis>livre</emphasis> como em
<emphasis>liberdade</emphasis>&mdash;pense <emphasis>discurso
livre</emphasis>, não <emphasis>cerveja
grátis</emphasis>."</para></footnote>
Ainda assim, é cansativo dar constantemente esta explicação. Muitos
programadores sentiram, com alguma razão, que a palavra ambígua "free"
estava dificultando a compreensão deste software por parte do público.
</para>

<para>O problema era, todavia, mais profundo. A palavra "free" trazia consigo 
uma conotação moral inescapável: se a liberdade era um fim em si mesma, não 
era importante se o software livre era também melhor, ou mais lucrativo em 
certas circunstâncias. Esses eram apenas efeitos laterais interessantes de 
um motivo que era, no fundo, nem técnico nem mercantil, mas moral.
Além disso, a posição "free as in freedom" forçava uma inconsistência evidente 
nas empresas que queriam suportar certos programas livres numa área do seu 
negócio, mas que queriam continuar a comercializar software proprietário em 
outras áreas.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>A Situação Hoje</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
