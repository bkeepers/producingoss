<chapter id="pfs-ch-2">

<title>Getting Started <!-- [ 15-25 pp ] --></title>

<simplesect>

<para>This chapter is about how to introduce a new free software
project to the world.  We will approach the subject backwards.  In
real life, your first decision might be whether or not to start an
open source project, and all else would flow from that.  But the
question of <emphasis>whether</emphasis> isn't so easy to separate
from the question of <emphasis>how</emphasis>.  Therefore, we will
start by assuming you've already decided to do it, and examine how.
By the end, you should have a pretty good feel for what would be
involved, and be better equipped to make a decision.</para>

<para>There is one caveat, however, and it's important enough to
potentially short-circuit the entire process: if you're thinking of
starting an open source project, you should first look to see if
there's already an existing project that does what you want.  The
chances are pretty good that whatever problem you want solved now,
someone else wanted solved before you.  If they did solve it, and
released their code under a free license, then there's no reason for
you to reinvent the wheel today.  There are exceptions, of course: if
you want to start a project as an educational experience, than
pre-existing code won't help; or maybe the project you have in mind is
so specialized that you know there is zero chance anyone else has done
it.  But generally, there's no point not looking.  It doesn't take
long, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on <ulink
url="http://www.freshmeat.net/"/> (an open source project news site,
about which more later), and if that doesn't work, try <ulink
url="http://www.sourceforge.net/"/>.  Even if you don't find exactly
what you were looking for, you mind find something close enough that
it makes more sense to join that project and add functionality, rather
than starting from scratch.</para>

</simplesect>


<!-- ========================== subsection =========================== -->
<sect1 id="pfs-ch-2-sect-1">
<title>The Principles of Scaled Presentation</title>

<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>

    <blockquote>
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Note that Raymond wasn't saying that open source projects only
happen when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; and the relevance of
this to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.  It's still
how most free projects are started, but less so now than in 1997, when
Raymond wrote those words.  Today, we have the phenomenon of
organizations &mdash; including for-profit corporations &mdash;
starting large, centrally-managed open source projects from scratch.
The lone programmer, banging out some code to solve a local problem
and then realizing the result has wider applicability, is still the
source of much new free software, but is not the only story.</para>

<para>Raymond's point is still insightful, however.  The essential
thing is that the producers of the software have a direct interest in
its success, because they want to use it themselves.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the OpenAdapter project (<ulink
url="http://www.openadapter.org/"/>), which was started by investment
bank Dresdner Kleinwort Wasserstein as an open source framework for
integrating disparate financial information systems, can hardly be
said to scratch any individual programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institution and its partners, and therefore if
the project fails to relieve them, they will know.  This arrangement
can produce good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease, and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>

<para>Indeed, many of the recommendations in this chapter would be
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.  Free software distribution is a
twofold task.  The software needs to acquire users, and it needs to
acquire developers.  The two needs are not necessarily in conflict,
but they do add some complexity to a project's initial presentation.
Some information is useful for both audiences, some is useful only for
one or the other.  Both kinds of information should subscribe to the
principle of scaled presentation, that is, the degree of detail
presented should correspond directly to the amount of time and effort
put in by the reader.  More effort should always equal more reward.
When the two do not correlate tightly, people may quickly lose faith
and stop investing effort.</para>

<para>The corollary to all this is that <emphasis>appearances
matter</emphasis>.  Programmers in particular often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride, and it's no accident that so many programmers
exhibit an antipathy for marketing and public relations work.</para>

<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  The very first thing a visitor learns about a project is what
its web site looks like.  This information is absorbed before any of
the actual content on the site is comprehended &mdash; before any of
the text has been read or links clicked on.  However unjust it may be,
people cannot help themselves from forming an immediate first
impression.  The site's appearance signals whether care was or was not
taken in organizing the project's presentation.  Humans have extremely
sensitive antennae for detecting care invested by other humans.  Most
of us can tell in one glance whether a web site was slapped together
quickly or was given serious thought.  This is the first piece of
information your project puts out, and there is no way to avoid it,
because it is the channel in which further information must flow.  If
the channel itself is not well-built, people will assume a similar
lack of care applies to the code and everything else associated with
the project.  Such an impression can be overcome by further exposure
to the project &mdash; but only, of course, if the visitor stays long
enough for there to be further exposure.</para>

<para>So take some time to set up a good (meaning good-looking, as
well as contentful) project web site.  This is not the place for a
general treatise on web design, of course, but here are some basic
guidelines to setting up a free software project site.</para>

<itemizedlist>

  <listitem>
  <para>The very first thing a person sees when they go to the site
  should be a clear, concise description &mdash; a mission statement
  &mdash; of what the project is and and is not about.  This should be
  the topmost bit of text on the page, right after to the project's
  name.  If someone has to dig around to figure out what the project
  is all about, there's a good chance they'll just leave.</para>
  </listitem>

  <listitem>
  <para>The description must make it unambiguously clear that the
  project is open source.  This may seem obvious, but you would be
  surprised how many projects forget to do it.  I have seen free
  software project web sites where the front page not only did not
  say which particular free license the software was distributed
  under, but did not even state outright that the software was free
  at all.  Sometimes the crucial bit of information was relegated to
  the Downloads page, or the Developers page, or some other place
  that required one more mouse click to get to.  In extreme cases, the
  license was not given anywhere on the web site at all &mdash; the
  only way to find it out was to download the software and look
  inside.</para>

  <para>Needless to say, such an omission can lose many potential
  developers and users.  Don't make this mistake.  State up front that
  the project is "free software" or "open source software", and give
  the exact license.  The details of choosing a license are discussed
  in <xref linkend="pfs-ch-3"/>.</para>
  </listitem>

  <listitem>
  <para>Once someone has determined that they're interested in
  learning more about a project, it should be clear where to go for
  more.  For example, if they want to use the software, there should
  be links to user documentation, and it should be obvious
  <emphasis>from looking at the links</emphasis> that they lead to
  user documentation, not developer documentation.  It is a general
  principle of clear web site design that one should have a rough idea
  where a link goes before clicking on it.  In this case it's even more
  important, because the web site has to target two different, though
  often overlapping, types of visitors: potential users and potential
  developers.  Always consider the site's presentation from the point
  of view of each audience.</para>
  </listitem>

  <listitem>
  <para>State the development status of the project, and what its
  near-term goals and needs are (for example, it might be looking for
  developers with a particular kind of expertise).  The mission
  statement itself will usually not contain this information, because
  it looks to the future.  This mission statement is about what the
  project will be; the development status says what it is right now.
  Don't be afraid of looking bad, and don't give in to the temptation
  to hype the development status.  Everyone knows that software
  evolves by stages; there's no shame in saying "This is alpha
  software with known bugs.  It runs, and works at least some of the
  time, but use at your own risk."  Such language won't scare away the
  kinds of developers you need at that stage.  As for users, the very
  worst thing a project can do is attract users before the software is
  ready for them.  A reputation for instability or bugginess is very
  hard to shake, once acquired.  Conservativism pays off in the long
  run; it's always better for the software to be
  <emphasis>more</emphasis> stable than the user expected than less,
  and pleasant surprises produce the best kind of
  word-of-mouth.</para>

  <para>(By the way, <firstterm>alpha</firstterm> means a running
  prototype that may not have all the intended functionality, but has
  enough core functionality to be used.  The main purpose of alpha
  software is to generate feedback, so the developers know what to
  work on.  The next stage, <firstterm>beta</firstterm>, means the
  software has most or all of its intended functionality, but still
  has known bugs.  The purpose of beta is likewise to give developers
  feedback, but it's also expected that users can get real work done
  with the software.)</para>
  </listitem>

  <listitem>
  <para>The distribution mechanism should be as convenient, standard,
  and low-overhead as possible.  If you're trying to eradicate a
  disease, you don't distribute the medicine in such a way that it
  requires a non-standard syringe size to administer.  Likewise,
  software should conform to standard build and installation methods;
  the more it deviates from the standards, the more potential users
  and developers will be lost.</para>

  <para>This sounds obvious, but again, many projects don't bother to
  standardize their installation procedures until very late in the
  game, telling themselves they can do it any time: "We'll sort all
  that stuff out when the code is closer to being ready."  What they
  don't realize is that by putting off the boring work of
  standardizing the build and installation procedures, they are
  actually making the code take longer to get ready &mdash; because
  they lose developers who might otherwise have contributed to the
  code.  Boring work with a high payoff should always be done early,
  and significantly lowering the project's barrier to entry is a high
  payoff.</para>

  <para>The details of standardizing build and installation procedures
  are covered later in this chapter.  (###todo: link to where)</para>
  </listitem>

  <listitem>
  <para>Make it clear how to get involved as a developer.  If someone
  wants to contribute, the first thing they'll look for is contributor
  guidelines.  These will be covered in more detail below (###todo:
  link to where), but the basic elements are code documentation (such
  as a design doc), pointers to forums for interaction with other
  developers, and some indication of <emphasis>how</emphasis>
  development is usually done &mdash; for example, guidelines for
  submitting patches, and the procedures by which a contributor gets
  <firstterm>commit access</firstterm>, that is, the ability to put
  changes directly into the software without going through some other
  developer.</para>

  <para>As with everything else, the importance of this is as much
  about appearance as substance.  The developer guidelines are there
  partly to supply information, but it's also to supply comfort.
  Their mere presence reassures any developer who is deciding whether
  or not to get involved.  They say that this project has its act
  together, has anticipated the questions people will ask, and has
  made an effort to answer them.  By giving off an aura of
  preparedness, the project is sending out a message: "Your time will
  not be wasted if you get involved.", which is exactly what a
  developer needs to hear.</para>
  </listitem>

</itemizedlist>

<remark>(Hmm, maybe it would be good to put an image of a good
example project web site here, and an image of a bad one, for
side-by-side comparison?)</remark>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-2">
<title>Choosing a License and Applying It</title>

<para>This section is intended to be a "quick start" guide to choosing
a license.  It provides an overview of the best-known licenses, and
why you might choose one over another.  You should read <xref
linkend="pfs-ch-3"/> to understand the detailed legal implications of
the different licenses, so you can understand how the license you
choose affects your ability to incorporate other free software into
yours.</para>

<para>There are a great many free software licenses to choose from.
Most of them we needn't consider, as they were written to satisfy the
particular legal needs of some corporation or person, and probably
wouldn't be appropriate for a new software project.  In this overview,
we will restrict ourselves to the three or four most commonly-used
licenses.  In most cases, you will just want to choose one of
those.</para>

<para>If your primary goal is widespread adoption of the software by
both users and developers, and you don't mind the possibility of it
being used in proprietary products, then choose one of the following:
<firstterm>MIT-style</firstterm>, <firstterm>BSD-style</firstterm>, or
<firstterm>Apache-style</firstterm>.</para>

<variablelist>

  <varlistentry><term>MIT-style:</term>

    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/mit-license.php"/></para>

      <para>The MIT license is short, simple, and very easy to
      understand.  In fact, it is short enough to include whole right
      here:
      </para>

      <screen>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</screen>

    <para>As you can see, it places almost no restrictions on what
    people can do with the software, so long as they reproduce the
    copyright notice, and it carefully disclaims any liability on the
    part of the copyright holder.  It is called "MIT-style" because
    the Massachusetts Institute of Technology released free software
    under this license.  However, you do not need to be affiliated
    with MIT to use the same license text for your programs.</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>BSD-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/bsd-license.php"/></para>

      <para>The BSD license is basically like the MIT, although it
      uses slightly different words to achieve the same effect.  (I
      won't reproduce it here, you can find it at the above link.)
      The main difference is that BSD-style licenses include a clause
      explicitly disavowing the right to use the licensor's name to
      endorse the software:</para>

      <screen>Neither the name of the &lt;ORGANIZATION&gt; nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written
permission.</screen>

      <para>It's not clear that without such a clause, a recipient of
      the software would have had the right to use the licensor's name
      anyway, but the clause removes any possible doubt.  For
      corporations releasing software, therefore, the BSD-style may
      be slightly preferable to MIT-style (however, for reasons
      detailed below, the Apache-style may be preferable to both of
      them).  Note that a liberal copyright license does not imply
      that recipients have any right to use or dilute your trademarks
      &mdash; copyright law and trademark law are two different
      beasts.</para>

      <para>The name "BSD" derives from "Berkeley Software
      Distribution", a much-revered version of the Unix operating
      system produced by the University of California at Berkeley and
      released under what became known as the "BSD license".</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>Apache-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.apache.org/licenses/"/></para>

      <para>The Apache license (version 2.0 as of this writing) is
      longer than either the BSD or MIT, but still quite readable, and
      the extra time needed to comprehend it is worth spending.  The
      Apache Software Foundation (<ulink
      url="http://www.apache.org/"/>) has taken great care to make
      sure the license encourages their goal of "open, collaborative
      development among individuals, industry, and nonprofit
      organizations".  The license includes provisions for protecting
      the trademarks and reputation of the distributing organization,
      preventing patent entanglements, accepting code contributions,
      and various other eventualities.  The terms of use and
      distribution that it allows are pretty much the same as with the
      BSD or MIT licenses, though.  It may be thought of as a more
      legalistic and thorough version of those two.</para>
    </listitem>
  </varlistentry>

</variablelist>

<para>If you don't want your code to be used in proprietary programs,
then use the GNU General Public License (<ulink
url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is probably
the most widely recognized free software license in the world today.
This is in itself a big advantage, since potential users and
contributors will most likely already be familiar with it, and
therefore won't have to spend extra time to read and understand the
license.</para>

<para>The disadvantage of the GPL is that some programmers do not like
its viral nature.  When GPL'd code is copied or linked into another
program, that program must (as a whole) be distributed under the GPL
as well; thus, the GPL is contagious, and software that incorporates
GPL'd code may end up narrowing the range of possible redistribution
terms.  Whether this is a good or a bad thing depends on who you ask
(I do not feel the GPL's terms are onerous, but I am also sympathetic
to the Free Software Foundation's goals).  In any case, it's extremely
rare for someone who would otherwise work on a project to refuse to do
so because it is under the GPL.</para>

<para>Note that the GPL's viral nature is even more significant when
your software is a library instead of a standalone program.  The GPL
is not contagious across high-level invocation boundaries: if a
non-GPL'd program merely invokes a standalone GPL'd program, the
former is not automatically placed under the restrictions of the GPL.
However, if otherwise non-GPL'd code is linked against a GPL'd
library, then the distribution of the program as a whole must be under
the GPL.  In other words, one cannot write a program which depends on
a GPL'd library and distribute the program as, say, an executable
under some other license, even if one distributes the source code to
the GPL'd library portion.  The entire work, source code and all, must
be distributed under the terms of the GPL.</para>

<para>These restrictions may be acceptable, if your first priority is
ensuring that all derivative works of your work are also free.  Again,
see <xref linkend="pfs-ch-3"/> for a more in-depth discussion of
these issues.</para>

<para>Finally, there are licenses designed to allow free distribution
while strongly protecting the reputation of the author and the
"artistic integrity" of the work.  The best-known example of this kind
of license the <firstterm>Artistic
License</firstterm><footnote><para>I refuse to comment on the
pun.</para></footnote>, which is the license the
<firstterm>Perl</firstterm> scripting language is distributed under.
A template for the Artistic License is available from <ulink
url="http://opensource.org/licenses/artistic-license.php"/>.  It
allows free redistribution, modification, and all the usual stuff.
But it has some extra clauses requiring anyone who modifies the
software significantly to take steps to clarify that their version is
different from the standard version, by putting notices of
modification in files, and using different names for executables.  It
also has trademark and endorsement protection clauses similar to those
of the Apache license.</para>

<sect2 id="pfs-ch-2-sect-2.1">
<title>Help, I still can't decide which license to use...</title>

<para>If you're still not sure what to use, then go with Apache-style
or GNU GPL.  They're both fine licenses, you really can't go wrong,
and the intimidating legal language will give everyone the impression
you thought long and hard about it.</para>

</sect2>

<sect2 id="pfs-ch-2-sect-2.2">
<title>How to apply a license to your software.</title>

<remark>(in progress)</remark>
<screen>
   1. Put it in a file named COPYING or LICENSE.
   2. Put short notices in *every* source file and doc file.
   3. Name the license on the front page, and link to its full text.
</screen>

</sect2>

<screen>
* _Briefly_ mention the issue of getting papers from contributors.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-3">
<title> Starting from Scratch </title>

<para> todo </para>

<screen>
     b) Starting from scratch:
         1) How open should the initial design work be?
         2) Choosing a language; avoiding language holy wars.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-4">
<title> Open-Sourcing an Existing Project </title>

<para> todo </para>

<screen> 
c) Open-sourcing an already-established project (e.g., Vesta).
Understanding that development will happen differently after the
project goes open.  Talk about the license implications; don't go into
detail (since the details will depend on the particulars of the
existing software), just point out that the issue is there, and is
serious.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-5">
<title>Predicting Conflicts of Interest</title>

<para> todo </para>

<screen> 

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.

d) Conflicts of Interest.  In a funded project, the
           corporation or consortium supplying the money may have
           different goals than many of the volunteers have.  How to
           balance the funder's interests with the volunteers'
           interests without either side becoming disgruntled.  [ Case
           studies: Subversion, possibly others ]

These conflicts should be identified and answered early.
Preemptivity is the key.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-6">
<title>Announcing </title>

<para> todo </para>

<screen> 
   e) Announcing the project's inception.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-7">
<title> Making it Both Developer-Friendly and User-Friendly </title>

<para> todo </para>

<screen> 
   f) How to make a project appear developer-friendly from the start.

   note: state, in order to debunk, the fallacy of "it's more
   important to have code than good presentation."  Programmers are
   trained to believe that substance beats form every time; it's
   almost a moral position.  Unfortunately, it trips them up in
   situations when form *is* substance.

</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-8">
<title> Designing to Support Division of Labor </title>

<para> todo </para>

<screen> 
        g) How to make the project's architecture support division
           among many workers.  (Example: According to Tim [via Andy],
           Linus said that he found it easier to get volunteers
           because he knew how to break down the functionality or
           source code into chunks that different people could
           handle.)  This will tie into material in Chapter 5(a).
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-9">
<title> Understanding Developers' Motivations </title>

<para> todo </para>

<screen> 
        h) Understanding potential volunteers' motivations will help
           you set things up to attract them.  You can't build the
           lamp until you know what frequencies of light the moths
           are attracted to.  Oh, wait, maybe that's not such a good
           metaphor...
</screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

