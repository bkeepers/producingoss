<chapter id="pfs-ch-2">

<title>Getting Started <!-- [ 15-25 pp ] --></title>

<simplesect>

<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>

    <blockquote>
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>Note that Raymond wasn't saying that open source projects only
happen when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; the relevance of this
to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.</para>

<para>This is still how most free projects are started, but less so
now than in 1997, when Raymond wrote those words.  Today, we have the
phenomenon of organizations &mdash; including for-profit corporations
&mdash; starting large, centrally-managed open source projects from
scratch.  The lone programmer, banging out some code to solve a local
problem and then realizing the result has wider applicability, is
still the source of much new free software, but is not the only
story.</para>

<para>Raymond's point is still insightful, however.  The essential
condition is that the producers of the software have a direct interest
in its success, because they use it themselves.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the OpenAdapter project (<ulink
url="http://www.openadapter.org/"/>), which was started by investment
bank Dresdner Kleinwort Wasserstein as an open source framework for
integrating disparate financial information systems, can hardly be
said to scratch any individual programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institution and its partners, and therefore if
the project fails to relieve them, they will know.  This arrangement
can produce good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease, and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>

<para>This chapter is about how to introduce a new free software
project to the world, but many of its recommendations would sound
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.  Free software distribution is a
twofold task.  The software needs to acquire users, and to acquire
developers.  These two needs are not necessarily in conflict, but they
do add some complexity to a project's initial presentation.  Some
information is useful for both audiences, some is useful only for one
or the other.  Both kinds of information should subscribe to the
principle of scaled presentation, that is, the degree of detail
presented at each step should correspond directly to the amount of
time and effort put in by the reader.  More effort should always equal
more reward.  When the two do not correlate tightly, people may
quickly lose faith and stop investing effort.</para>

<para>The corollary to this is that <emphasis>appearances
matter</emphasis>.  Programmers in particular often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride.  It's no accident that so many programmers exhibit
an antipathy for marketing and public relations work, nor that
professional graphic designers are often horrified at what programmers
come up with on their own.</para>

<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  For example, the very first thing a visitor learns about a
project is what its web site looks like.  This information is absorbed
before any of the actual content on the site is comprehended &mdash;
before any of the text has been read or links clicked on.  However
unjust it may be, people cannot stop themselves from forming an
immediate first impression.  The site's appearance signals whether
care was or was not taken in organizing the project's presentation.
Humans have extremely sensitive antennae for detecting the investment
of care.  Most of us can tell in one glance whether a web site was
slapped together quickly or was given serious thought.  This is the
first piece of information your project puts out, and there is no way
to avoid it, because it is the channel in which further information
must flow.  If the channel itself is not well-built, people will
assume a similar lack of care applies to the code and everything else
associated with the project.  Such an impression can be overcome by
further exposure to the project &mdash; but only, of course, if the
visitor stays long enough for there to be further exposure.</para>

<para>Thus, while much of this chapter talks about the content your
project should start out with, remember that its look and feel matters
too.  Because the project web site has to work for two different types
of visitors &mdash; users and developers &mdash; special attention
must be paid to clarity and directedness.  Although this is not the
place for a general treatise on web design, one principle is important
enough to deserve mention, particularly when the site serves multiple
(if overlapping) audiences: people should have a rough idea where a
link goes before clicking on it.  For example, it should be obvious
<emphasis>from looking at the links</emphasis> to user documentation
that they lead to user documentation, and not to, say, developer
documentation.  Running a project is partly about supplying
information, but it's also about supplying comfort.  The mere presence
of certain standard offerings, grouped and arrayed in expected places,
reassures users and developers who are deciding whether they want to
get involved.  It says that this project has its act together, has
anticipated the questions people will ask, and has made an effort to
answer them in a way that requires minimum exertion on the part of the
asker.  By giving off this aura of preparedness, the project sends out
a message: "Your time will not be wasted if you get involved.", which
is exactly what people need to hear.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-0.1">
<title>But First, Look Around</title>

<para>Before starting an open source project, there is one important
caveat:</para>

<para>Always look around to see if there's an existing project that
does what you want.  The chances are pretty good that whatever problem
you want solved now, someone else wanted solved before you.  If they
did solve it, and released their code under a free license, then
there's no reason for you to reinvent the wheel today.  There are
exceptions, of course: if you want to start a project as an
educational experience, than pre-existing code won't help; or maybe
the project you have in mind is so specialized that you know there is
zero chance anyone else has done it.  But generally, there's no point
not looking, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on <ulink
url="http://www.freshmeat.net/"/> (an open source project news site,
about which more later), and if that doesn't work, try <ulink
url="http://www.sourceforge.net/"/>.</para>

<para>Even if you don't find exactly what you were looking for, you
mind find something so close that it makes more sense to join that
project and add functionality, rather than starting from scratch
yourself.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="pfs-ch-2-sect-1">
<title>Starting From What You Have</title>

<para>You've looked around, found that nothing out there really fits
your needs, and decided to start a new project.</para>

<para>What now?</para>

<para>The hardest part about launching a free software project is
transforming a private vision into a public one.  You or your
organization may know perfectly well what you want, but expressing
that goal comprehensibly to the world is a fair amount of work.  It is
essential, however, that you take the time to do it.  You and the
other founders must decide what the project is really about and write
up a mission statement.  This part is usually not too hard, though it
can sometimes reveal unspoken assumptions and even disagreements about
the nature of the project &mdash; which is fine: better to resolve
those now than later.  The next step is to package up the project for
public consumption, and this is, basically, pure drudgery.</para>

<para><remark>Somewhere, have to talk about naming the project, and
getting the domain name (com, net, and org) if can.</remark></para>

<para>What makes it so laborious is that it consists mainly of
organizing and documenting things everyone already knows &mdash;
"everyone", that is, who's been involved in the project so far.  Thus,
for the people doing the work, there is no immediate benefit.  They do
not need a <filename>README</filename> file giving an overview of the
project, nor a design document, nor user manual.  They do not need a
carefully arranged code tree conforming to the informal but widespread
standards of software source distributions.  Whatever way the source
code is arranged is fine for them, because they're already accustomed
to it anyway, and if the code runs at all, they know how to use it.
It doesn't even matter, for them, if the fundamental architectural
assumptions of the project remain undocumented; they're already
familiar with that too.</para>

<para>Newcomers, on the other hand, need these things.  Fortunately,
they don't need them all at once.  It's not necessary for you to
provide every possible resource before taking a project public.  In a
perfect world, perhaps, every new open source project would start out
life with a thorough design document, a complete user manual (with
special markings for features planned but not yet implemented),
beautifully and portably packaged code, capable of running on any
computing platform, and so on.  In reality, taking care of all these
loose ends would be prohibitively time-consuming, and anyway, it's
work that one can reasonably hope volunteers will help with once the
project is under way.</para>

<para>What <emphasis>is</emphasis> necessary, however, is that enough
investment be put into initial presentation that newcomers can get
past the initial obstacle of unfamiliarity.  Think of it as the first
step in a bootstrapping process, to bring the project to a kind of
minimum activation energy.  I've heard this threshold called the
<firstterm>hacktivation energy</firstterm>: the amount of energy a
newcomer must put in before they start getting something back.  The
lower a project's hacktivation energy, the better.  Your first task is
to determine the project's current hacktivation energy, and take steps
to bring it down to something acceptable.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-1.1">
<title>Lowering the Hacktivation Energy</title>

<para>Let's put ourselves in the shoes of someone who's just heard
about your project, or maybe stumbled across it during their own
search for a solution.  The first thing they'll look for is a quick
description, a mission statement, so they can decide (within 30
seconds) whether or not they're interested in learning more.  This
should be prominently placed on the project's home page, preferably
right up near the project's name.</para>

<itemizedlist>
  <listitem>

  <para><emphasis role="bold">Mission Statement.</emphasis>
  The mission statement should be concrete, limiting, and above all,
  short.  Here's an example of a good one, from <ulink
  url="http://www.openoffice.org/"/>: 

  <blockquote>
  <para><emphasis>To create, as a community, the leading international
  office suite that will run on all major platforms and provide access
  to all functionality and data through open-component based APIs and
  an XML-based file format.</emphasis></para>
  </blockquote>

  In just a few words, they've hit all the high points, largely by
  drawing on the reader's prior knowledge.  By saying "<emphasis>as a
  community</emphasis>", they signal that no one corporation will
  dominate development; "<emphasis>international</emphasis>" means
  that the software will allow people to work in multiple languages
  and locales; "<emphasis>all major platforms</emphasis>" means it
  will be portable to Unix, Macintosh, and Windows.  The rest signals
  that open interfaces and easily understandable file formats are an
  important part of the goal.  They don't come right out and say that
  they're trying to be a free alternative to Microsoft Office, but
  most people can probably read between the lines.  Although this
  mission statement looks broad at first glance, in fact it is quite
  circumscribed: the words "<emphasis>office suite</emphasis>" mean
  something very concrete to those familiar with such software.
  Again, the reader's presumed prior knowledge (in this case probably
  from MS Office) is used to keep the mission statement
  concise.</para>

  <para>The nature of a mission statement depends partly on who is
  writing it, not just on the software it describes.  For example, it
  makes sense for OpenOffice.org to use the words "<emphasis>as a
  community</emphasis>", because the project was started, and is still
  largely sponsored, by Sun Microsystems.  By including those words,
  Sun indicates its sensitivity to worries that it might try to
  dominate the development process.  With this sort of thing, merely
  demonstrating awareness of the <emphasis>potential</emphasis> for a
  problem goes a long way toward avoiding the problem entirely.  On
  the other hand, projects that aren't sponsored by a single
  corporation probably don't need such language; after all,
  development by community is the norm, so there would ordinarily be
  no reason to list it as part of the mission.</para>

  </listitem>
</itemizedlist>

<para>The mission statement sets up the first level of participant
filtering.  That's why it's okay to presume specific prior knowledge
on the part of the reader &mdash; if someone doesn't know what the
words mean, then they probably can tell this isn't the project for
them.  Anyone who sees your mission and stays interested will want to
move on to a more detailed description of the project, perhaps read
some user or developer documentation, and then download something.
But before any of that, they'll need to know for sure that it's open
source.</para>

<itemizedlist>
  <listitem>
  <para><emphasis role="bold">State That It's Free.</emphasis> The
  front page must make it unambiguously clear that the project is open
  source.  This may seem obvious, but you would be surprised how many
  projects forget to do it.  I have seen free software project web
  sites where the front page not only did not say which particular
  free license the software was distributed under, but did not even
  state outright that the software was free at all.  Sometimes the
  crucial bit of information was relegated to the Downloads page, or
  the Developers page, or some other place that required one more
  mouse click to get to.  In extreme cases, the license was not given
  anywhere on the web site at all &mdash; the only way to find it out
  was to download the software and look inside.</para>

  <para>Needless to say, such an omission can lose many potential
  developers and users.  Don't make this mistake.  State up front that
  the project is "free software" or "open source software", and give
  the exact license.  A quick guide to choosing a license is given in
  <xref linkend="pfs-ch-2-sect-2"/>, and licensing issues are
  discussed in detail in <xref linkend="pfs-ch-3"/>.</para>
  </listitem>
</itemizedlist>

<para>Now our hypothetical visitor can determine, probably in a minute
or less, that they're interested in spending, say, at least five more
minutes investigating this project.  What will they look for in that
five minutes?</para>

<itemizedlist>

  <listitem>
  <para><emphasis role="bold">Features and Requirements List.</emphasis>
  Give a brief list of the specific features the software supports
  (if something isn't completed yet, you can still list it, just put
  "<emphasis>planned</emphasis>" or
  "<emphasis>in&nbsp;progress</emphasis>" next to it), and the kind
  of computing environment required to run the software.  Think of
  the features/requirements list as the technical summary you would
  give someone who has one minute to decide if they'll be able to
  use the software.  It expands on the mission statement.  For
  example, the mission statement might say:

  <blockquote>
  <para><emphasis>To create a full-text indexer and search engine
  with a rich API, for use by programmers in providing search
  services for large collections of text files.</emphasis></para>
  </blockquote>

  The features and requirements list would give the details:

  <blockquote>
    <para><emphasis>Features:</emphasis></para>
    <itemizedlist>
      <listitem><emphasis>Searches plain text, HTML, and XML.</emphasis>
      </listitem>
      <listitem><emphasis>Word or phrase searching; fuzzy matching.</emphasis>
      </listitem>
      <listitem><emphasis>Incremental updating of indexes.</emphasis>
      </listitem>
      <listitem><emphasis>(planned) Regular expression support.</emphasis>
      </listitem>
      <listitem><emphasis>(planned) Indexing of remote web sites.</emphasis>
      </listitem>
    </itemizedlist>
    <para><emphasis>Requirements:</emphasis></para>
    <itemizedlist>
      <listitem><emphasis>Python 2.2 or higher.</emphasis>
      </listitem>
      <listitem><emphasis>Enough disk space to hold the indexes (approximately
                2x original data size).</emphasis>
      </listitem>
    </itemizedlist>
  </blockquote>

  With this information, readers can quickly get a feel for whether
  this software has any hope of working for them &mdash; and they can
  consider getting involved as a developer.</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Development Status.</emphasis> State the
  development status of the project, and what its near-term goals and
  needs are (for example, it might be looking for developers with a
  particular kind of expertise).  Don't be afraid of looking unready,
  and don't give in to the temptation to hype the development status.
  Everyone knows that software evolves by stages; there's no shame in
  saying "This is alpha software with known bugs.  It runs, and works
  at least some of the time, but use at your own risk."  Such language
  won't scare away the kinds of developers you need at that stage.  As
  for users, the very worst thing a project can do is attract users
  before the software is ready for them.  A reputation for instability
  or bugginess is very hard to shake, once acquired.  Conservativism
  pays off in the long run; it's always better for the software to be
  <emphasis>more</emphasis> stable than the user expected than less,
  and pleasant surprises produce the best kind of
  word-of-mouth.</para>

  <para>(By the way, <firstterm>alpha</firstterm> means a running
  prototype that may not have all the intended functionality, but has
  enough core functionality to be used.  The main purpose of alpha
  software is to generate feedback, so the developers know what to
  work on.  The next stage, <firstterm>beta</firstterm>, means the
  software has most or all of its intended functionality, but still
  has known bugs.  The purpose of beta is both to give developers
  feedback and to allow users to get real work done.)</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Downloads.</emphasis> The software
  should be downloadable as source code in standard formats.  When a
  project is first getting started, binary (executable) packages are
  not necessary, unless the software has such difficult or unusual
  build requirements that merely getting it to run would be a lot of
  work for most people.  (But if this is the case, the project is
  going to have a hard time attracting developers anyway!).</para>

  <para>The distribution mechanism should be as convenient, standard,
  and low-overhead as possible.  If you were trying to eradicate a
  disease, you wouldn't distribute the medicine in such a way that it
  requires a non-standard syringe size to administer.  Likewise,
  software should conform to standard build and installation methods;
  the more it deviates from the standards, the more potential users
  and developers will give up and go away lost.</para>

  <para>That sounds obvious, but many projects don't bother to
  standardize their installation procedures until very late in the
  game, telling themselves they can do it any time: <emphasis>"We'll
  sort all that stuff out when the code is closer to being
  ready."</emphasis> What they don't realize is that by putting off
  the boring work of finishing the build and installation procedures,
  they are actually making the code take longer to get ready &mdash;
  because they discourage developers who might otherwise have
  contributed to the code.  Most insidiously, they don't
  <emphasis>know</emphasis> they're losing all those developers,
  because the process is an accumulation of non-events: someone visits
  a website, downloads the software, tries to build it, fails, gives
  up and goes away.  Who will ever know it happened, except the person
  themselves?  No one working on the project will realize that
  someone's interest and good will has been silently
  squandered.</para>

  <para>Boring work with a high payoff should always be done early,
  and significantly lowering the project's barrier to entry by
  packaging is a very high payoff.</para>

  <para>When you release a downloadable package, it is vital that you
  give a unique version number to the release, so that people can
  compare any two releases and know which supersedes the other.  A
  detailed discussion of version numbering can be found in
  <xref linkend="pfs-ch-7-sect-1.2"/>.</para>

  <para>The details of standardizing build and installation procedures
  are covered in <xref linkend="pfs-ch-4-sect-2"/>.</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Version Control.</emphasis> Downloading
  source packages is fine for those who just want to install and use
  the software, but it's not enough for those who want to debug or add
  new features.  Nightly source snapshots can help, but they're still
  not fine-grained enough for a thriving development community.
  People need real-time access to the latest sources, and the way to
  give them that is to use a version control system.  Version control
  options are discussed in detail in <xref
  linkend="pfs-ch-4-sect-3"/>; for now, the important thing is to
  think of the presence of anonymously-accessible version controlled
  sources as yet another sign &mdash; to both users and developers
  &mdash; that this project is making an effort to give people what
  they need to participate.  If you can't do version control right
  away, then put up a sign saying you intend to soon.</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Communications Channels.</emphasis>
  Provide the addresses of mailing lists, chat rooms and IRC channels,
  and any other forums where others involved with the software can be
  reached.  Make it clear that you and the other authors of the
  project are subscribed to these mailing lists, so people see there's
  a way to give feedback that will reach the developers.  Again, your
  presence on the lists does not imply a committment to answer all
  questions or implement all feature requests.  In the long run, most
  users will probably never join the forums anyway, but they will be
  comforted to know that they <emphasis>could</emphasis> if they ever
  needed to.</para>

  <para>In the early stages of a project, there's no need to have
  separate user and developer forums.  It's much better to have
  everyone involved with the software talking together, in one "room".
  Among early adopters, the distinction between developer and user is
  often fuzzy; to the extent that the distinction can be made, the
  ratio of developers to users is usually much higher in the early
  days of the project than later on.  While you can't assume that
  every early adopter is a programmer who wants to hack on the
  software, you can assume that they are at least interested in
  following development discussions and in getting a sense of the
  project's direction.</para>
   
  <para>As this chapter is only about getting a project started, it's
  enough merely to say that these communications forums need to exist.
  Later, in <xref linkend="pfs-ch-6"/>, we'll examine where and how to
  set up such forums, the ways in which they might need moderation
  or other management, and how to separate user forums from developer
  forums, when the time comes, without creating an unbridgeable
  gulf.</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Developer Guidelines.</emphasis> Make it
  clear how to get involved as a developer.  If someone wants to
  contribute, the first thing they'll look for is contributor
  guidelines.  These will be covered in more detail in <xref
  linkend="pfs-ch-5"/>, but the basic elements are: pointers to forums
  for interaction with other developers, instructions on how to report
  bugs and submit patches, and some indication of
  <emphasis>how</emphasis> development is usually done &mdash; is the
  project a benevolent dictatorship, or a democracy, or something
  else.  No pejorative sense is intended by any of these terms, by the
  way.  It's perfectly okay to run a tyranny where one particular
  developer has veto power over all changes.  Many successful projects
  work this way.  The important thing is that the project come right
  out and say so.  A tyranny pretending to be a democracy will turn
  people off; a tyranny that says it's a tyranny will do fine as long
  as the tyrant is competent and trusted.</para>
  
  <para>See <ulink
  url="http://svn.collab.net/repos/svn/trunk/HACKING"/> for an example
  of particularly thorough developer guidelines, or <ulink
  url="http://www.openoffice.org/dev_docs/guidelines.html"/> for 
  broader guidelines that focus on governance and the spirit of
  participation and less on technical matters.</para>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Documentation.</emphasis> Documentation
  is essential; there needs to be <emphasis>something</emphasis> for
  people to read, even if it's rudimentary and incomplete.  This falls
  squarely into the "drudgery" category referred to earlier, and is
  often the first area where a new open source projects falls down.
  Coming up with a mission statement and feature list, choosing a
  license, summarizing development status &mdash; these are all
  relatively small tasks, which can be definitively completed and
  usually need not be returned to once done.  Documentation, on the
  other hand, is never really finished, which may be one reason
  people sometimes delay starting it at all.</para>

  <para>The worst part is that documentation's utility to those
  writing it is the reverse of its utility to those who will read it.
  The most important documentation for initial users is the basics:
  how to quickly set up the software, an overview of how it works,
  perhaps some guides to doing common tasks.  Yet these are exactly
  the things the <emphasis>writers</emphasis> of the documentation
  know all too well &mdash; so well that it can be difficult for them
  to see things from the reader's point of view, and to laboriously
  spell out the steps that (to the writers) seem so obvious as to be
  unworthy of mention.</para>

  <para>There's no magic solution to this problem.  Someone just needs
  to sit down and write the stuff.  Use a simple, easy-to-edit format
  such as HTML, plain text, Texinfo, or some variant of XML &mdash;
  something that's convenient for lightweight, quick improvements on
  the spur of the moment.  This is not only to remove any overhead
  that might impede the original writers from making incremental
  improvements, but also for those who join the project later and want
  to work on the documentation.</para>

  <para>A good way to ensure basic initial documentation gets done is
  to limit its scope in advance.  That way writing it at least won't
  feel like an open-ended task.  A good rule of thumb is that it
  should meet the following minimal criteria:

    <itemizedlist>
      <listitem><para>Tell the reader clearly how much technical
                expertise they're expected to have.</para>
      </listitem>
      <listitem><para>Don't skimp on describing how to set up the
                software, and somewhere near the beginning of the
                documentation, say how the user can run some sort of
                sort of diagnostic test or simple command to confirm
                that they've set things up correctly.  Startup
                documentation is in some ways more important than
                actual usage documentation.  Once someone has gone to
                the trouble of installing the software, they'll
                probably be persistent in figuring out how to use it.
                When people abandon, they abandon early; therefore,
                it's the earliest stages, like installation, that need
                the most support.</para>
      </listitem>
      <listitem><para>Give one tutorial-style example of how to do a
                common task.  Obviously, many examples for many tasks
                would be even better, but if time is limited, then
                pick one task and walk through it thoroughly, even if
                that means leaving other areas of functionality
                entirely undescribed.  Once someone sees that the
                software <emphasis>can</emphasis> be used for one
                thing, they'll start to explore what else it can do on
                their own &mdash; and, if you're lucky, start filling
                in the documentation themselves.  Which brings us to
                the next point...</para>
      </listitem>
      <listitem><para><emphasis>Label the areas where the
                documentation is known to be incomplete.</emphasis> By
                showing the reader that you are aware of its
                deficiencies, you align yourself with their point of
                view.  Your empathy reassures them that they don't
                face a struggle to convince the project of what's
                important.  There's no need to fear that these labels
                are tantamount to promises to fill in the gaps by any
                particular date &mdash; it's equally legitimate to
                treat them as open requests for volunteer help.</para>
      </listitem>
    </itemizedlist>
  </para>

  <para>The last point is of wider importance, actually, and can be
  applied to the entire project, not just the documentation.  An
  accurate accounting of known deficiencies is the norm in the open
  source world.  You don't have to exaggerate the project's
  shortcomings, just identify them scrupulously and dispassionately
  when the context calls for it (whether in the documentation, in the
  bug tracking database, or on a mailing list discussion).  No one
  will treat this as self-beratement on the part of the project, nor
  as a commitment to solve the problems by a certain date, unless the
  project makes such a commitment explicitly.  Since anyone who uses
  the software will discover the deficiencies for themselves, it's
  much better for them to be psychologically prepared &mdash; then the
  project will look like it has a solid knowledge of how it's
  doing.</para>

  <sect3 id="pfs-ch-2-sect-1.1.1">
  <title>Maintaining a FAQ</title>

  <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  document) can be a beautiful thing.  Faqs are highly tuned to the
  questions users and developers actually ask &mdash; as opposed to
  the questions you might have <emphasis>expected</emphasis> them to
  ask &mdash; and therefore a well-maintained FAQ will tend to give
  those who consult it exactly what they're looking for.  The FAQ is
  often the first place users look when they encounter a problem,
  often even in preference to the official manual, and it's probably
  the document in your project most likely to be linked to from other
  sites.</para>

  <para>Unfortunately, you cannot make the FAQ at the time the project
  starts.  Good FAQs are not written, they are grown.  They are by
  definition reactive documents, evolving over time in response to
  people's day-to-day usage of the software.  Since it's usually
  impossible to correctly anticipate the questions people will ask, it
  is impossible to sit down and write a useful FAQ from scratch.</para>

  <para>Therefore, don't waste your time trying to.  You may, however,
  find it useful to set up a mostly blank FAQ template, so there will
  be an obvious place for people to contribute questions and answers
  after the project is under way.  At this stage, the most important
  property is not completeness, but convenience: if the FAQ is easy to
  update, then people will update it.  (Proper FAQ maintenance is a
  non-trivial and intriguing problem, and is discussed in depth in
  <xref linkend="pfs-ch-8-sect-2"/>.)</para>

  </sect3>

  <sect3 id="pfs-ch-2-sect-1.1.2">
  <title>Availability of Documentation</title>

  <para>Documentation should be available from two places: online
  (directly from the web site), <emphasis>and</emphasis> in the
  downloadable distribution of the software (see <xref
  linkend="pfs-ch-4-sect-2"/>).  It needs to be online, in browseable
  form, because people often read documentation
  <emphasis>before</emphasis> downloading software for the first time,
  as a way of helping them decide whether or not to download at all.
  But it should also accompany the software, on the principle that
  downloading should supply (i.e., make locally accessible) everything
  one needs to use the package.</para>

  </sect3>

  <sect3 id="pfs-ch-2-sect-1.1.3">
  <title>Developer Documentation</title>

  <para>Developer documentation is documentation whose purpose is to
  help programmers understand the code, so they can repair and extend
  it.  This is somewhat different from the <emphasis>developer
  guidelines</emphasis> discussed earlier, which are more social than
  technical.  Developer guidelines tell programmers how to get along
  with each other; developer documentation tells them how to get along
  with the code itself.  The two are often packaged together in one
  document for convenience (as with the <ulink
  url="http://svn.collab.net/repos/svn/trunk/HACKING"/> example given
  earlier), but they don't have to be.</para>

  <para>Although technical developer documentation can be very
  helpful, there's no reason to delay a release over it.  As long as
  the original authors are available (and willing) to answer questions
  about the code, that's enough to start with.  In fact, having to
  answer the same questions over and over is a common motivation for
  writing documentation.  But even before it's written, contributors
  will still manage find their way around the code.  The force that
  drives people to spend time learning a code base is that the code
  does something useful for them.  If people have faith in that, they
  will take the time to figure things out; if they don't have that
  faith, no amount of developer documentation will get or keep
  them.</para>

  <para>So if you only have time to write documentation for one
  audience, write it for users.  All user documentation is, in effect,
  developer documentation as well; any programmer who's going to work
  on a piece of software will need familiarity with how to use it.
  Later, when you see programmers asking the same questions over and
  over, then take the time to write up some separate documents just
  for them.</para>

  </sect3>
  </listitem>

  <listitem>
  <para><emphasis role="bold">Example Output, Screenshots, Etc.</emphasis>
  If the project involves a graphical user interface of some sort, or
  if it produces graphical or otherwise distinctive output, then put
  some samples up on the project web site.  In the case of interface,
  this means screenshots; for output, it might be screenshots or just
  files.  Both cater to people's need for instant gratification: a
  single screenshot can be more convincing than paragraphs of
  descriptive text and mailing list chatter, because a screenshot is
  inarguable proof that the software <emphasis>works</emphasis>.  It
  may be buggy, it may be hard to install, it may be incompletely
  documented, but that screenshot is still proof that if one puts in
  enough effort, one can get it to run<footnote><para>I was daunted by
  screenshots until I actually made a few.  It turned out to be so
  simple that I'll give instructions for it right here.  Using the
  Gimp (<ulink url="http://www.gimp.org/"/>), open
  <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
  choose <guimenuitem>Single&nbsp;Window</guimenuitem> or
  <guimenuitem>Whole&nbsp;Screen</guimenuitem>, then click
  <guimenuitem>OK</guimenuitem>.  Now your next mouse click will
  capture the window or screen clicked on as an image in the Gimp.
  Crop and resize the image as necessary, using the instructions at 
  <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/"/>.  What
  could be easier?</para>
  </footnote>.</para>
  </listitem>

</itemizedlist>

<para>There are many other things you could put on the project web
site, if you had the time, or if for one reason or another they were
especially appropriate: a news page, a project history page, a related
links page, a site-search feature, a donations link, etc.  None of
these are necessities at startup time, but keep them in mind for the
future.</para>

<sect3 id="pfs-ch-2-sect-1.1.4">
<title>Canned Hosting</title>

<para>There are a few sites that provide free hosting and
infrastructure for open-source projects: web area, version control,
bug tracker, download area, chat forums, regular backups, etc.  The
details vary from site to site, but the same basic services are
offered at all of them.  By using one of these sites, you get a lot
for free; what you give up, obviously, is fine-grained control over
the developer and user experience.  The hosting service decides what
software the site runs on, and may control or at least influence the
look and feel of the project's web pages.</para>

<para>The largest and most well-known hosting site is <ulink
url="http://www.sourceforge.net/">SourceForge</ulink>.  When the
question is free open source project hosting, SourceForge is the
default answer these days.  However, there are other sites providing
the same or similar services, for example <ulink
url="http://savannah.gnu.org/">savannah.gnu.org</ulink> and <ulink
url="http://www.berlios.de/">BerliOS.de</ulink>.  There are also
organizations, such as the <ulink url="http://www.apache.org/">Apache
Software Foundation</ulink> and <ulink
url="http://www.tigris.org/">Tigris.org</ulink><footnote><para>Disclaimer:
I am employed by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which sponsors
Tigris.org, and I use Tigris regularly.</para></footnote>, that give
free hosting to open source projects that fit well with their missions
and their community of existing projects.</para>

</sect3>

</sect2>

<para><remark>(Maybe it would be good to put an image of a good
example project web site here, and an image of a bad one, for
side-by-side comparison?)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-2">
<title>Choosing a License and Applying It</title>

<para>This section is intended to be a "quick start" guide to choosing
a license.  It provides an overview of the best-known licenses, and
why you might choose one over another.  You should read <xref
linkend="pfs-ch-3"/> to understand the detailed legal implications of
the different licenses, so you can understand how the license you
choose affects your ability to incorporate other free software into
yours.</para>

<para>There are a great many free software licenses to choose from.
Most of them we needn't consider, as they were written to satisfy the
particular legal needs of some corporation or person, and probably
wouldn't be appropriate for a new software project.  In this overview,
we will restrict ourselves to just the most commonly-used licenses.
In most cases, you will just want to choose one of these.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-2.1">
<title>The "Do Anything" Licenses</title>

<para>If your primary goal is widespread adoption of the software by
both users and developers, and you don't mind the possibility of it
being used in proprietary products, then choose one of the following:
<firstterm>MIT-style</firstterm>, <firstterm>BSD-style</firstterm>, or
<firstterm>Apache-style</firstterm>.</para>

<variablelist>

  <varlistentry><term>MIT-style:</term>

    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/mit-license.php"/></para>

      <para>The MIT license is short, simple, and easy to understand.
      In fact, it's short enough to include whole right here: </para>

      <screen>Copyright (c) &lt;year&gt; &lt;copyright holders&gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</screen>

    <para>As you can see, it places almost no restrictions on what
    people can do with the software, so long as they reproduce the
    copyright notice, and it carefully disclaims any liability on the
    part of the copyright holder.  It is called "MIT-style" because
    the Massachusetts Institute of Technology released free software
    under this license.  However, you do not need to be affiliated
    with MIT to use the same license for your programs.</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>BSD-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.opensource.org/licenses/bsd-license.php"/></para>

      <para>The BSD license is basically like the MIT, although it
      uses slightly different words to achieve the same effect.  It's
      a bit longer, so I won't reproduce it here; you can find it at
      the above link.  The main difference is that BSD-style licenses
      include a clause explicitly disavowing the right to use the
      licensor's name to endorse the software:</para>

      <screen>Neither the name of the &lt;ORGANIZATION&gt; nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written
permission.</screen>

      <para>It's not clear that without such a clause, a recipient of
      the software would have had the right to use the licensor's name
      anyway, but the clause removes any possible doubt.  For
      corporations releasing software, therefore, the BSD-style may
      be slightly preferable to MIT-style (however, for reasons
      detailed below, the Apache-style may be preferable to both of
      them).  In general, however, a liberal copyright license does
      not imply that recipients have any right to use or dilute your
      trademarks &mdash; copyright law and trademark law are two
      different beasts.</para>

      <para>The name "BSD" derives from "Berkeley Software
      Distribution", a much-revered version of the Unix operating
      system produced by the University of California at Berkeley and
      released under what became known as the "BSD license".</para>
    </listitem>
  </varlistentry> 

  <varlistentry><term>Apache-style:</term>
    <listitem>
      <para>License template at: <ulink
      url="http://www.apache.org/licenses/"/></para>

      <para>The Apache license (version 2.0 as of this writing) is
      longer than either the BSD or MIT, but still quite readable, and
      the extra time needed to comprehend it is worth spending.  The
      Apache Software Foundation (<ulink
      url="http://www.apache.org/"/>) has taken great care to make
      sure the license encourages their goal of "open, collaborative
      development among individuals, industry, and nonprofit
      organizations".  The license includes provisions for protecting
      the trademarks and reputation of the distributing organization,
      preventing patent entanglements, accepting code contributions,
      and various other eventualities.  The terms of use and
      distribution that it allows are pretty much the same as with the
      BSD or MIT licenses.  It may be thought of as a more legalistic
      and thorough version of those two.</para>
    </listitem>
  </varlistentry>

</variablelist>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-2.2">
<title>The GPL</title>

<para>If you don't want your code to be used in proprietary programs,
then use the GNU General Public License (<ulink
url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is probably
the most widely recognized free software license in the world today.
This is in itself a big advantage, since potential users and
contributors will most likely already be familiar with it, and
therefore won't have to spend extra time to read and understand the
license.</para>

<para>The disadvantage of the GPL is that some programmers do not like
its contagiousness.  When GPL'd code is copied or linked into another
program, that program must, as a whole, be distributed under the GPL
as well.  Thus, the GPL is contagious, and software that incorporates
GPL'd code may end up narrowing the range of possible redistribution
terms.  Whether this is a good or a bad thing depends on who you ask
(I do not feel the GPL's terms are onerous, but I am also sympathetic
to the Free Software Foundation's goals).  In any case, it's fairly
rare for someone who would otherwise work on a project to refuse to do
so because it is under the GPL.  For that matter, it may be that there
are programmers who want reassurance that their contributions will not
be used in non-free products, and who are therefore
<emphasis>more</emphasis> comfortable with the GPL than with other
free licenses.</para>

<remark>This section needs to be expanded to describe how the
narrowing is symmetrical: by _not_ choosing the GPL, one can likewise
restrict.  See <ulink
url="http://www.dwheeler.com/essays/gpl-compatible.html"/>.  Possibly
rewrite default recommendation below to favor one of the BSD-style
licenses, instead of Apache.</remark>

<para>Note that the GPL's viral nature is more significant when your
software is a library instead of a standalone program.  The GPL is not
contagious across high-level invocation boundaries: if a non-GPL'd
program merely invokes a standalone GPL'd program, the former is not
automatically placed under the restrictions of the GPL.  However, if
otherwise non-GPL'd code requires linking against a GPL'd library,
then the distribution of the program as a whole must be under the GPL.
In other words, one cannot write a program which depends on a GPL'd
library and distribute the program as, say, an executable under some
other license, even if one distributes the source code to the GPL'd
library portion.  The entire work, source code and all, must be
distributed under the terms of the GPL.</para>

<para>These restrictions may be acceptable, if your first priority is
ensuring that all derivative works of your work are also free.  Again,
see <xref linkend="pfs-ch-3"/> for a more in-depth discussion of
these issues.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-2.3">
<title>The Artistic License</title>

<para>Finally, there are licenses designed to allow free distribution
while strongly protecting the reputation of the author and the
"artistic integrity" of the work.  The best-known example of this kind
of license the <firstterm>Artistic
License</firstterm><footnote><para>I refuse to comment on the
pun.</para></footnote>, which is the license the
<firstterm>Perl</firstterm> scripting language is distributed under.
A template for the Artistic License is available from <ulink
url="http://opensource.org/licenses/artistic-license.php"/>.  It
allows free redistribution, modification, and all the usual stuff.
But it has some extra clauses requiring anyone who modifies the
software significantly to take steps to clarify that their version is
different from the standard version, by putting notices of
modification in files, and using different names for executables.  It
also has trademark and endorsement protection clauses similar to those
of the Apache license.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-2.4">
<title>Help, I still can't decide which license to use...</title>

<para><remark>(todo: have had some discussions lately that lead me to
think BSD might be a better default recommendation below.  Will
update after considering it.)</remark></para>

<para>If you're still not sure what to use, then go with Apache-style
or GNU GPL.  They're both fine licenses, you really can't go wrong,
and the intimidating legal language will give everyone the impression
you thought long and hard about it.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-2.5">
<title>How to apply a license to your software.</title>

<para>Once you've chosen a license, you should state it on the
project's front page.  You don't need to include the actual text of
the license there; just give the name of the license, and make it link
to the full license text on another page.</para>

<para>This tells the public what license you
<emphasis>intend</emphasis> the software to be released under, but
it's not sufficient for legal purposes.  For that, the software itself
must contain the license.  The standard way to do this is to put the
full license text in a file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>), and then put a short notice at the top
of each source file, naming the copyright date, holder, and license,
and saying where to find the full text of the license.</para>

<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>

<screen>
    Copyright (C) &lt;year&gt;  &lt;name of author&gt;

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename>, but that's where it's usually put.  (You
could change the above notice to state that directly.)  This template
also gives a geographical address from which to request a copy of the
license.  Another common method is to give a link to a web page
containing the license.  Just use your judgement and point to wherever
you feel the most permanent copy of the license is maintained, which
might simply be somewhere on your project's web site.  In general, the
notice you put in each source file does not have to look exactly like
the one above, as long as it starts with the same notice of copyright
holder and date, states the name of the license, and makes it clear
where to view the full license.</para>

<para>If you use an Apache-style license, there are special provisions
regarding propagating the contents of a <filename>NOTICE</filename>
file in your distribution.  You could use this file to list
trademarks, attributions, patent notices, and any other information
that needs to be preserved in works derived from your work.  See the
<ulink url="http://www.apache.org/licenses/LICENSE-2.0">Apache
license</ulink> for details about this.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-3">
<title>Setting The Tone</title>

<para>So far we've covered one-time project setup issues: picking a
license, arranging the initial website, etc.  But the most important
aspects of starting a new project are dynamic.  Choosing a mailing
list address is easy; ensuring that the list's conversations remain
on-topic and productive is another matter entirely, and it's much
easier to keep a list productive than to make it so.  The first steps
your project takes will have a disproportionate influence on its later
progress, because they establish precedents and set everyone's
expectations for future conduct.</para>

<para>It is reasonable to ask, why should precedent matter so much?
After all, if this is a world where developers come and go at random,
where turnover can generally not be predicted and certainly not
controlled, then of what use are precedents?  One might expect them to
be constantly dissolving under the influx of new developers and new
situations that inevitably results from project growth.  It's tempting
to think that, in such circumstances, the local "culture" would
consist mainly of whatever formal guidelines are posted on the project
website, equally accessible to newcomers and old hands alike &mdash;
that stability would come not from some sort of fuzzy, indefinable
collective memory, but from an unambiguous, canonical text that lays
down clear rules for how the project is run.  Yet in practice, it is
the intangible collective wisdom that dominates.  The written rules
usually end up being a sort of summarization or distillation of the
much larger set of shifting and ever-evolving agreements that really
guide the project.  The written rules do not define the project's
culture so much as describe it, and even then only approximately.</para>

<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there will be time for new arrivals
to learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive the centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were present then.  Younger children
hear them being sung by older ones, and when they are older, they in
turn will sing them in front of other younger ones.  The children are
not engaging in a conscious program of transmission, of course, but
the reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>

<para>This effort will be aided by the fact that people generally show
up expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
will instinctively search for behaviors that mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project, for once
established, they will be largely self-perpetuating.</para>

<para>The examples below are mainly about getting off on the right
foot; the rest of the book is about actually walking.  These are not
meant as a complete list of all ways in which one might attempt to
establish precedents.  They're just situations that seem to frequently
come up, and which can be seen as opportunities for
tone-setting.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.1">
<title>Money Can't Buy You Love</title>

<para>Free software projects today are funded by a wide variety of
methods.  There are</para>

<itemizedlist>
  <listitem>
  <para>Totally unfunded projects, done simply for pleasure or
        personal utility and then released for free.</para>
  </listitem>

  <listitem>
  <para>Projects which are essentially done for the love of it but
        which solicit small-scale donations.</para>
  </listitem>

  <listitem>
  <para>Projects that receive all, or a significant portion of, their
        funding from non-profit organizations (such as the Free
        Software Foundation, the Apache Software Foundation,
        Xiph.org, et al).</para>
  </listitem>

  <listitem>
  <para>Projects that are funded from royalties driven by a
        dual-licencing model (see <xref linkend="pfs-ch-3-sect-5"/>),  
        where those using the software in proprietary products
        subsidize its development for the free world.</para>
  </listitem>

  <listitem>
  <para>Projects which are started and managed by for-profit
        corporations for strategic reasons, for example to drive
        support or hardware sales.</para>
  </listitem>
</itemizedlist>

<para>...and all sorts of outliers and edge cases.</para>

<para>Money can affect a project both positively and negatively.  By
reducing the project's vulnerability the Forces of Chaos, which sweep
away so many projects before they really get off the ground, it can
make people more willing to give the software a chance &mdash; they
feel they're investing their time into something that will be around a
year from now.  On the other hand, if not handled carefully, money can
also divide the project into in-group and out-group developers.</para>

<para>If your project is funded, even partially, then it is very
important for you to set guidelines about what the money can and
cannot buy right, from the start.  This does not mean you need to post
twice a day to the mailing lists reiterating your nobility and
incorruptibility.  It merely means that you should be on the lookout
for opportunities to defuse the tensions that
<emphasis>could</emphasis> be created by money.  You don't need to
start out assuming that the tensions are there; you just need to show
an awareness that there is a potential for them to arise.</para>

<para>A perfect example of this came up in the Subversion project
(<ulink url="http://subversion.tigris.org/"
>http://subversion.tigris.org/</ulink>), which was started in 2000 by
<ulink url="http://www.collab.net/">CollabNet</ulink>.  CollabNet has
been the project's primary funder since its inception, paying the
salaries of several developers (disclaimer: I'm one of them).  Fairly
early in the project, we hired another developer, Mike Pilato, to join
the effort.  By then, coding had already started, although we were
still very much in the early stages.</para>

<para>The question was, how to receive him into the public project?
Subversion already had a policy about how new developers get commit
access: first, they submit some patches to the development mailing
list.  After enough patches have gone by for the other committers to
see that the new contributor knows what he's doing, someone proposes
that he just commit directly (this proposal takes place on a closed
mailing list of just committers, so no feelings will be hurt if the
proposal fails).  When the committers agree, someone mails the new
developer and offers him direct commit access to the project's master
sources.</para>

<para>So what to do with Mike?  CollabNet hired him specifically to
work on Subversion.  There was no doubt about his coding skills or his
readiness to work on the project.  Furthermore, the non-salaried
developers had a very good relationship with the CollabNet employees,
and most likely would not have objected if we'd just given Mike commit
access the day he was hired.  But we realized we were setting a
precedent.  If we just granted Mike commit access by fiat, we'd be
effectively saying that CollabNet had the right to ignore project
guidelines, simply by virtue of being the primary funder.  While the
damage from this might not have been immediately apparent, it would
inevitably result in the non-salaried developers feeling ever so
slightly disenfranchised.  Other people have to earn their commit
access &mdash; CollabNet just buys it.</para>

<para>Thus Mike started out his employment at CollabNet like any other
volunteer developer, without commit access.  He sent patches to the
mailing list, where they could be, and were, reviewed by everyone.
Equally importantly, we said on the list that we were doing things
this way deliberately, so there could be no missing the point.  After
a while, someone (I can't remember if it was one of the other
CollabNet employees or not) proposed Mike for commit access, and he
was accepted, as we knew he would be.</para>

<para>That kind of consistency gets you a credibility that money could
never buy.  And credibility is a valuable currency to have in
technical discussions: it's immunization against having ones motives
questioned later.  In the heat of argument, people will sometimes look
for non-technical ways to win the battle.  The project's primary
funder, because of its deep involvement and obvious concern over the
directions the project takes, presents a wider target than most.  By
being scrupulous to observe all project guidelines right from the
start, the funder makes themselves the same size as everyone
else.</para>

<para><remark>(Check with Mike that it's okay to use his name.  I
don't think he'll mind, but it's nice to ask.)</remark></para>

<!-- Point out how the sponsor's noble fair-mindedness and balanced
judgement are not properties that can usefully be written down
formally, because they wouldn't be believed.  They'd just look like
propaganda anyway, so there's no point.  This is one of those areas
where conduct and informal precedent is the *only* way to solidify a
social norm.  And refer to the relevant parts of Chapter 5. -->

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.2">
<title>Open-sourcing an Already-Established Project</title>

<para><remark>Open-sourcing an already-established project (e.g.,
Vesta).  Understanding that development will happen differently after
the project goes open.  Talk about the license implications; don't go
into detail (since the details will depend on the particulars of the
existing software), just point out that the issue is there, and is
serious.</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.3">
<title>Design Choices</title>

<para><remark>How open should the initial design work
be?</remark></para>

<para><remark>Choosing a language; avoiding language holy wars.  Most
important thing is, choose a language that you and the the other
initial developers are comfortable with, and defend the language on
*those* grounds, *not* on the grounds that it's better than some other
possible language.</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.4">
<title>Conspicuous Use of Archives</title>

<para><remark>Importance of having archiving with stable references
from the very beginning: written guidelines vs precedence is like the
distinction between English statutory law and common law.  Good
archival recording-keeping is thus essential; it's like an oral
tradition with a video camera constantly running.</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.5">
<title> Supporting Division of Labor </title>

<para><remark>How to make the project's architecture support division
among many workers.  (Example: According to Tim [via Andy], Linus said
that he found it easier to get volunteers because he knew how to break
down the functionality or source code into chunks that different
people could handle.)  This will tie into material in Chapter
5(a).</remark></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-ch-2-sect-3.6">
<title>Understanding Developers' Motivations</title>

<para><remark>Understanding potential volunteers' motivations will
help you set things up to attract them.  You can't build the lamp
until you know what frequencies of light the moths are attracted to.
Oh, wait, maybe that's not such a good metaphor...</remark></para>

<para><remark>For example, talk about the sharp distinction between
those who were interested in reaching 1.0 versus those who were
interested in adding new features to Subversion.  (Philip, Ghudson,
etc.)</remark></para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-4">
<title>Announcing </title>

<para><remark>Announcing the project's inception.</remark></para>

</sect1>


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

