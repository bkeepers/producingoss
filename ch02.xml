<chapter id="pfs-ch-2">

<title>Getting Started <!-- [ 15-25 pp ] --></title>

<simplesect>

<para>This chapter is about how to introduce a new free software
project to the world.  We will approach the subject backwards.  In
real life, your first decision might be whether or not to take a
project open source, and all else would flow from that.  But the
question of <emphasis>whether</emphasis> isn't so easy to separate
from the question of <emphasis>how</emphasis>.  Therefore, we will
start by assuming you've already decided to open up a project, and
examine how to do it.  By the end, you should have a pretty good feel
for what would be involved, and be better equipped to make a
decision.</para>

<para>There is one caveat, however, and it's important enough to
potentially short-circuit the entire process: if you're thinking of
starting an open source project, you should first look to see if
there's already an existing project that does what you want.  The
chances are pretty good that whatever problem you want solved now,
someone else wanted solved before you.  If they did solve it, and
released their code under a free license, then there's no reason for
you to reinvent the wheel today.  There are exceptions, of course: if
you want to start a project as an educational experience, than
pre-existing code won't help; or maybe the project you have in mind is
so specialized that you know there is zero chance anyone else has done
it.  But generally, there's no point not looking.  It doesn't take
long, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on <ulink
url="http://www.freshmeat.net/"/> (an open source project news site,
about which more later), and if that doesn't work, try <ulink
url="http://www.sourceforge.net/"/>.  Even if you don't find exactly
what you were looking for, you mind find something close enough that
it makes more sense to join that project and add functionality, rather
than starting from scratch.</para>

</simplesect>


<!-- ========================== subsection =========================== -->
<sect1 id="pfs-ch-2-sect-1">
<title>Project Scale </title>

<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>

    <blockquote>
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
    </blockquote>

<para>This was probably more true in 1997 than it is now.  Today, we
have the phenomenon of organizations &mdash; including for-profit
corporations &mdash; starting large-scale open source projects from
scratch.  The lone programmer, banging out some code to solve a local
problem and then realizing the result has wider applicability, is
still the source of much new free software, but is no longer the only
story.  Raymond's point is still insightful, however.  He wasn't
saying that open source projects only happen when some individual gets
an itch.  Rather, he was reminding us that <emphasis>good</emphasis>
software results when the programmer has a personal interest in seeing
a problem solved, and the relevance to free software is that this also
happens to be the most frequent motivation for starting free software
projects.</para>

<para>People still start free software projects to solve specific
problems, but the problems may belong to organizations rather than
individuals.  The boundary between the two can be fuzzy, of course,
but it's hard to imagine that, say, the <ulink
url="http://www.openadapter.org/"/> project, which was started by
investment bank Dresdner Kleinwort Wasserstein as an open source
framework for integrating disparate financial information systems,
scratched some programmer's personal itch.  Rather, it scratches an
institutional itch.  But the common thread, no matter what the size of
the project, is that free programs are written to solve a problem that
afflicts the program's own producers.  The software is not written
solely to be sold to someone else so they can solve
<emphasis>their</emphasis> problem; it's written to solve a problem
close to home, and then shared with everyone.  The original problem is
treated, in effect, like a disease that one hopes will be eradicated
by the distribution of enough medicine.</para>

<para>If you were distributing medicine, what considerations would be
paramount?</para>

<itemizedlist>

  <listitem>
  <para>First, anyone should be able to tell quickly what the medicine
        is for &mdash; what problem it solves.</para>
  </listitem>

  <listitem>
  <para>Once someone has determined that they're interested, they
        should be able to get more detailed information, to any degree
        of resolution.  What are its basic ingredients, side effects,
        non-obvious interactions with other medicines, etc?  The
        amount of information available at every point should
        correspond directly to the amount of research they have put in
        so far.</para>
  </listitem>

  <listitem>
  <para>Distribution channels should be convenient and low-overhead.
        The harder it is to get the medicine, the more likely that
        people will give up and some patients will do without.</para>
  </listitem>

  <listitem>
  <para>The methods of administering the medicine should be
        appropriate to the resources and expertise of the intended
        recipients.  If it requires special devices and patient
        supervision anyway, then it's okay that only a trained doctor
        can administer it.  But if it's relatively straightforward,
        like mosquito repellant, then it should be administerable by
        anyone who can read simple directions.</para>
  </listitem>

</itemizedlist>



</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-2">
<title>Setting Goals, Choosing a License </title>

<para> Setting goals, choosing a license (but refer to Chapter 3 for
the really detailed discussion of licenses.  It's important to *not*
dive into that swamp too early, since the licensing discussion will
probably be the part of the book most often skipped over in a first
reading) </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-3">
<title> Starting from Scratch </title>

<para> todo </para>

<screen>
     b) Starting from scratch:
         1) How open should the initial design work be?
         2) Choosing a language; avoiding language holy wars.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-4">
<title> Open-Sourcing an Existing Project </title>

<para> todo </para>

<screen> 
c) Open-sourcing an already-established project (e.g., Vesta).
Understanding that development will happen differently after the
project goes open.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-5">
<title>Predicting Conflicts of Interest</title>

<para> todo </para>

<screen> 

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.

d) Conflicts of Interest.  In a funded project, the
           corporation or consortium supplying the money may have
           different goals than many of the volunteers have.  How to
           balance the funder's interests with the volunteers'
           interests without either side becoming disgruntled.  [ Case
           studies: Subversion, possibly others ]

These conflicts should be identified and answered early.
Preemptivity is the key.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-6">
<title>Announcing </title>

<para> todo </para>

<screen> 
   e) Announcing the project's inception.
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-7">
<title> Making it Both Developer-Friendly and User-Friendly </title>

<para> todo </para>

<screen> 
   f) How to make a project appear developer-friendly from the start.

   note: state, in order to debunk, the fallacy of "it's more
   important to have code than good presentation."  Programmers are
   trained to believe that substance beats form every time; it's
   almost a moral position.  Unfortunately, it trips them up in
   situations when form *is* substance.

</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-8">
<title> Designing to Support Division of Labor </title>

<para> todo </para>

<screen> 
        g) How to make the project's architecture support division
           among many workers.  (Example: According to Tim [via Andy],
           Linus said that he found it easier to get volunteers
           because he knew how to break down the functionality or
           source code into chunks that different people could
           handle.)  This will tie into material in Chapter 5(a).
</screen>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ch-2-sect-9">
<title> Understanding Developers' Motivations </title>

<para> todo </para>

<screen> 
        h) Understanding potential volunteers' motivations will help
           you set things up to attract them.  You can't build the
           lamp until you know what frequencies of light the moths
           are attracted to.  Oh, wait, maybe that's not such a good
           metaphor...
</screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

