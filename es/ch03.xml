<chapter id="technical-infrastructure">

<!--
<title>Technical Infrastructure</title>
-->
<title>Infraestructura Técnica</title>

<simplesect>

<!--
<para>Free software projects rely on technologies that support the
selective capture and integration of information.  The more skilled
you are at using these technologies, and at persuading others to use
them, the more successful your project will be.</para>
-->
<para>Los proyectos de software libre dependen de tecnologías
que aportan la captura selectiva e integración de la información.
Mientras mejor se sean usadas estas tecnologías y se persuada a otros
para utilizarlas, mayor será el éxito del proyecto.</para>

<!--
<para>This only becomes
more true as the project grows.  Good information management is what
prevents open source projects from collapsing under the weight of
Brooks' Law<footnote><para>From his book <citetitle>The Mythical Man
Month</citetitle>, 1975.  See <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"
>en.wikipedia.org/wiki/The_Mythical_Man-Month</ulink>, <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"
>en.wikipedia.org/wiki/Brooks_Law</ulink>, and
<ulink url="http://en.wikipedia.org/wiki/Fred_Brooks"
>en.wikipedia.org/wiki/Fred_Brooks</ulink>.</para></footnote>,
which states that adding manpower to a late software project makes it
later.  Fred Brooks observed that the complexity of communications in
a project
increases as the <emphasis>square</emphasis> of the number of
participants.  When only a few people are involved, everyone can easily
talk to everyone else, but when hundreds of people are involved, it is
no longer possible for each person to remain constantly aware of what
everyone else is doing.  If good free software project management is
about making everyone feel like they're all working together in the
same room, the obvious question is: what happens when everyone in a
crowded room tries to talk at once?</para>
-->
<para>Esto se vuelve más
cierto mientras el proyecto crece. Un buen manejo de la información es
lo que previene a un proyecto open source de colapsar bajo el peso
de la Ley de Brook,<footnote><para>De su libro<citetitle>El mes mítico
del hombre</citetitle>, 1975. Más en <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"
>en.wikipedia.org/wiki/The_Mythical_Man-Month</ulink>, <ulink
url="http://en.wikipedia.org/wiki/Brooks_Law"
>en.wikipedia.org/wiki/Brooks_Law</ulink>, y
<ulink url="http://en.wikipedia.org/wiki/Fred_Brooks"
>en.wikipedia.org/wiki/Fred_Brooks</ulink>.</para></footnote>
la cual afirma que asignar fuerza de trabajo adicional a un proyecto 
retrasado lo demorará aún más. Fred Brooks observó que la complejidad
de las comunicaciones en un proyecto se incrementa al<emphasis>cuadrado</emphasis>del
número de participantes. Cuando solo unas pocas personas están
involucradas, todos pueden hablar entre todos fácilmente, pero cuando
cientos de personas están involucradas, ya no es posible que cada uno
de los individuos se mantengan constantemente al tanto de lo que todos
los demás están haciendo. Si dirigir bien un proyecto de software libre
se trata de hacer que todos se sientan como si estuviesen trabajando
juntos en la misma habitación, es obvio preguntar: ¿Qué sucedería si
todas las personas en una habitación atestada de gente hablase a la vez?
</para>

<!--
<para>This problem is not new.  In non-metaphorical crowded rooms, the
solution is <firstterm>parliamentary procedure</firstterm>: formal
guidelines for how to have real-time discussions in large groups, how
to make sure important dissents are not lost in floods of "me-too"
comments, how to form subcommittees, how to recognize and record when
decisions
are made, etc.  An important part of parliamentary procedure is
specifying how the group interacts with its information management
system.  Some remarks are made "for the record", others are not.  The
record itself is subject to direct manipulation, and is understood to
be not a literal transcript of what occurred, but a representation of
what the group is willing to <emphasis>agree</emphasis> occurred.  The
record is not monolithic, but takes different forms for different
purposes.  It comprises the minutes of individual meetings, the
complete collection of all minutes of all meetings, summaries, agendas
and their annotations, committee reports, reports from correspondents
not present, lists of action items, etc.</para>
-->
<para>Este problema no es nuevo. En una habitación no metafórica
atestada, la solución es <firstterm>un procedimiento parlamentario
</firstterm>: guías formales acerca de cómo tener discusiones en tiempo
real en grupos grandes, cómo asegurarse de que las disensiones más
importantes no se pierdan entre comentarios irrelevantes, cómo formar
subcomites, cómo reconocer y registrar cuando se toman decisiones, etc. Las partes
más importantes en un procedimiento parlamentario especifican como
deben interactuar los grupos con su sistema de manejo de información.
Algunos comentarios se hacen para el registro, otros no. El registro
mismo es sujeto a manipulación directa y se entiende que no es una
transcripción literal de lo que ha ocurrido, sino que es una
representación a lo que el grupo está dispuesto a <emphasis>acordar
</emphasis> sobre lo sucedido. El registro no es monolítico, sino
que toma diferentes formas para diferentes propósitos. Comprende los
minutos de encuentros individuales, una colección completa de todos
los minutos de todos los encuentros, sumarios, agendas y sus
anotaciones, reportes de comités, reportes de corresponsales no
presentes, listas de acción, etc.</para>

<!--
<para>Because the Internet is not really a room, we don't have to
worry about replicating those parts of parliamentary procedure that
keep some people quiet while others are speaking.  But when it comes
to information management techniques, well-run open source projects
are parliamentary procedure on steroids.  Since almost all
communication in open source projects happens in writing, elaborate
systems have evolved for routing and labeling data appropriately, for
minimizing repetitions so as to avoid spurious divergences, for
storing and retrieving data, for correcting bad or obsolete
information, and for associating disparate bits of information with
each other as new connections are observed.  Active participants in
open source projects internalize many of these techniques, and will
often perform complex manual tasks to ensure that information is
routed correctly.  But the whole endeavor ultimately depends on
sophisticated software support.  As much as possible, the
communications media themselves should do the routing, labeling, and
recording, and should make the information available to humans in the
most convenient way possible.  In practice, of course, humans will
still need to intervene at many points in the process, and it's
important that the software make such interventions convenient too.
But in general, if the humans take care to label and route information
accurately on its first entry into the system, then the software
should be configured to make as much use of that metadata as
possible.</para>
-->
<para>Dado que Internet no es realmente una habitación, no debemos
preocuparnos acerca de replicar aquellas partes de los procesos
parlamentarios que mantiene a algunas personas calladas mientras
las demás hablan. Pero cuando nos referimos a técnicas de manejo de
la información, proyectos open source bien dirigidos son como
procesos parlamentarios en esteroides. Ya que todas las comunicaciones
en los proyectos open source suceden por escrito, sistemas muy 
elaborados han evolucionado para enrutar y etiquetar apropiadamente
los datos, para minimizar las repeticiones de forma que se eviten
divergencias espuriosas, para almacenar y buscar los datos, para
corregir información incorrecta u obsoleta y para
asociar bits dispares de información con cada uno mientras que nuevas
conexiones son observadas. Los participantes activos en los proyectos
open source integran muchas de estas técnicas y a menudo realizaran
complejas labores manuales para asegurar que la información sea dirigida
correctamente. Pero todo el esfuerzo depende al final de un sofisticado
soporte informático. Tanto que sea posible, los mismos medios
de comunicación deben realizar éste enrutamiento, etiquetado y 
registro y debería mantener la información al alcance de los humanos
de la manera más conveniente posible. En la práctica, por supuesto,
los humanos siguen necesitando intervenir en muchos puntos durante
el proceso y también es importante que estos programas hagan ésta intervención
lo más conveniente. Pero por lo general, si los humanos se encargan de
etiquetar y enrutar información acertadamente desde su primera entrada
en el sistema, entonces el software debería estar configurado para dar
el máximo uso posible a esa metadata.</para>

<!--
<para>The advice in this chapter is intensely practical, based on
experiences with specific software and usage patterns.  But the point
is not just to teach a particular collection of techniques.  It is
also to demonstrate, by means of many small examples, the overall
attitude that will best encourage good information management in your
project.  This attitude will involve a combination of technical skills
and people skills.  The technical skills are essential because
information management software always requires configuration, plus a
certain amount of ongoing maintenance and tweaking as new needs arise
(for example, see the discussion of how to handle project growth in
<xref linkend="bug-filtering"/><phrase output="printed"> later in
this chapter</phrase>).  The people skills are necessary
because the human community also requires maintenance: it's not always
immediately obvious how to use these tools to full advantage, and in
some cases projects have conflicting conventions (for example, see the
discussion of setting <systemitem>Reply-to</systemitem> headers on
outgoing mailing list posts, in <xref linkend="message-forums"/>).
Everyone involved with the project will need to be encouraged, at the
right times and in the right ways, to do their part to keep the
project's information well organized.  The more involved the
contributor, the more complex and specialized the techniques she can
be expected to learn.</para>
-->
<para>El consejo de éste capítulo es intensamente práctico, basado en
las experiencias con aplicaciones y patrones específicos. Pero el objetivo
no es sólo enseñar una colección particular de técnicas. Es también
demostrar, utilizando pequeños ejemplos, la actitud general que mejor
fomentará el correcto uso de los sistemas de manejo de información
en el proyecto. Esta actitud incluye una combinación de habilidades
técnicas y don de gentes. Las habilidades técnicas son esenciales
porque las aplicaciones de manejo de información siempre requieren
cierta configuración y además una cierta cantidad de mantenimiento
y puesta apunto mientras nuevas necesidades vayan surgiendo (por ejemplo,
mirad la discusión de como manejar el crecimiento del proyecto en
<xref linkend="bug-filtering"/><phrase output="printed"> más adelante
en éste capítulo</phrase>). El don de gentes es necesario porque la
comunidad humana también requiere de cierto mantenimiento: no siempre
es inmediatamente obvio como utilizar estas herramientas para obtener
una ventaja completa y en algunos casos los proyectos tienen convenciones
conflictivas (por ejemplo, la discusión de como crear cabeceras
<systemitem>Reply-to</systemitem> en los mensajes salientes de las
lista de correos, en <xref linkend="message-forums"/>).
Todos los involucrados en el proyecto van a necesitar ser animados,
en el momento correcto de la forma correcta, para que sigan manteniendo
la información del proyecto bien organizada. Mientras más involucrado
esté el contribuyente, más complejas y especializadas serán las técnicas
que se esperará que aprendan.</para>

<!--
<para>Information management has no cut-and-dried solution.  There are
too many variables.  You may finally get everything configured just
the way you want it, and have most of the community participating, but
then project growth will make some of those practices unscalable.  Or
project growth may stabilize, and the developer and user communities
settle into a comfortable relationship with the technical
infrastructure, but then someone will come along and invent a whole
new information management service, and pretty soon newcomers will be
asking why your project doesn't use it&mdash;for example, this
happened to a lot of free software projects that predate the invention
of the wiki (see <ulink url="http://en.wikipedia.org/wiki/Wiki"
>en.wikipedia.org/wiki/Wiki</ulink>), and more recently has been
happening to projects whose workflows were developed before the rise
of GitHub PRs (see <xref linkend="pull-requests"/>) as the canonical
way to package proposed contributions.  Many infrastructure questions
are matters of judgement, involving tradeoffs between the convenience
of those producing information and the convenience of those consuming
it, or between the time required to configure information management
software and the benefit it brings to the project.</para>
-->
<para>El manejo de información no tiene soluciones rápidas ya que existen
demasiadas variables. Pueden que finalmente se tenga todo configurado
justo como se desea y tener a la mayoría de la comunidad participando
pero luego el crecimiento del proyecto hace de estas practicas no escalables.
El puede que el crecimiento del proyecto se estabilice y que la comunidad
de usuarios y desarrolladores acuerden una relación confortable con
la infraestructura técnica pero llega alguien e inventa un nuevo servicio
de manejo de información completo y pronto muchos de los recién llegados
empezarán a preguntar que por qué no es utilizado en el proyecto&mdash;
por ejemplo, esto sucedió en muchos proyectos de software
libre anteriores a la invención del Wiki (más en
<ulink url="http://en.wikipedia.org/wiki/Wiki"
>en.wikipedia.org/wiki/Wiki</ulink>) y más recientemente ha estado pasando
en proyectos cuyos flujos de trabajo fueron desarrollados antes de la
aparición de los pull-requests de GitHub (ver <xref linkend="pull-requests"/>)
como la forma canónica de empaquetar las contribuciones propuestas.
Muchas cuestiones de la infraestructura son
materia de juicio, incluyendo las desventajas entre la conveniencia de
aquellos generando información y la conveniencia de aquellos quienes la
consumen o entre el tiempo requerido para configurar el software de
manejo de la información y los beneficios que le brinda al proyecto.</para>

<!--
<para>Beware of the temptation to over-automate, that is, to automate
things that really require human attention.  Technical infrastructure
is important, but what makes a free software project work is
care&mdash;and intelligent expression of that care&mdash;by the humans
involved.  The technical infrastructure is mainly about giving humans
easy ways to apply care.</para>
-->
<para>Cuidado con la tentación de automatizar demasiado, esto es,
automatizar cosas que realmente requieren de atención por parte de los
humanos. La infraestructura técnica es importante, pero lo que hace que
los proyectos de software libre funcionen es el cuidado&mdash;y la
expresión inteligente de éste cuidado&mdash;de los humanos involucrados.
Principalmente, la infraestructura técnica está para ofrecer medios
fáciles para aplicar dichos cuidados.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="tools-needed">
<!--
<title>What a Project Needs</title>
-->
<title>Lo que necesita un proyecto</title>

<!--
<para>Most open source projects offer at least a minimum, standard set
of tools for managing information:</para>
-->
<para>La mayoría de los proyectos open source ofrecen al menos un mínimo
y estándar conjunto de herramientas para manejar información:</para>

<variablelist>

<!--
   <varlistentry><term>Web site</term>
     <listitem>
     <para>Primarily a centralized, one-way conduit of
           information from the project out to the public.  The web
           site may also serve as an administrative interface for
           other project tools.</para>
     </listitem>
   </varlistentry>
-->
   <varlistentry><term>Sitio Web</term>
     <listitem>
     <para>
	Principalmente, conducto de información centralizado
	en un sentido del proyecto para el público. El sitio
	web puede también servir como una interfaz para
	otras herramientas del proyecto.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Mailing lists / Message forums</term>
     <listitem>
       <para>Usually the most active communications forum in the
             project, and the "medium of record."</para>
     </listitem>
   </varlistentry>
-->
   <varlistentry><term>Listas de Correo / Foros de Mensajes</term>
     <listitem>
       <para>Usualmente es el foro de comunicación más activo
	         del proyecto, y el "medio de registro."</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Version control</term>
     <listitem>
       <para>Enables developers to manage code changes conveniently,
             including reverting and "change porting".  Enables
             everyone to watch what's happening to the code.</para>
     </listitem>
   </varlistentry>
-->
   <varlistentry><term>Control de Versiones</term>
     <listitem>
       <para>
	Permite a los desarrolladores realizar cambios al código
	convenientemente, incluso retroceder y exportar cambios.
	Le permite a todos mirar lo que está sucediendo con el
	código.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Bug tracking</term>
     <listitem>
       <para>Enables developers to keep track of what they're working
             on, coordinate with each other, and plan releases.  Enables
             everyone to query the status of bugs and record
             information (e.g., reproduction recipes) about particular
             bugs.  Can be used for tracking not only bugs, but also
             tasks, releases, new features, etc.</para>
     </listitem>
   </varlistentry>
-->
   <varlistentry><term>Gestión de fallos</term>
     <listitem>
       <para>
	Permite a los desarrolladores mantener un registro de en qué
	están trabajando, coordinandose entre ellos y planear
	lanzamientos. Permite que todo el mundo pueda realizar
	búsquedas acerca del estado de los fallos y registrar
	información (p.e. recetas reproducibles) acerca de fallos
	en particular. Puede ser utilizado para seguir no solo
	fallos, sino también lanzamientos, tareas, 
	nuevas características,etc.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Real-time chat</term>
     <listitem>
       <para>A place for quick, lightweight discussions and
             question/answer exchanges.  Not always archived
             completely.</para>
     </listitem>
   </varlistentry>
-->
   <varlistentry><term>Chat en tiempo real</term>
     <listitem>
       <para>
	Un sitio para discusiones rápidas, sencillas e
	intercambios de preguntas/respuestas. No siempre
	se archiva completamente.</para>
     </listitem>
   </varlistentry>

<!-- TODO: Add blogs/planets to this list?  At least mention them
     later in the chapter. -->

<!-- TODO: What about Q&A software like OSQA and other things
     similar to Stack Exchange?  Worth mentioning.  See:

     http://projects.opensource.org/cgi-bin/mailman/private/infrastructure/2014-January/thread.html#1586

     (Thread "Q&A-style software for eventual qa.opensource.org site."
     on OSI infrastructure@ list.)
-->

</variablelist>

<!--
<para>Each tool in this set addresses a distinct need, but their functions
are also interrelated, and the tools must be made to work together.
Below we will examine how they can do so, and more importantly, how to
get people to use them.</para>
-->
<para>Cada una de estas herramientas está dirigida a distintas necesidades,
pero sus funciones están también interrelacionadas y se debe hacer que
estas herramientas trabajen en conjunto. Más abajo examinaremos como podemos
lograr esto y más importante aun como hacer que las personas se acostumbren
a usarlas.</para>

<!--
<para>You may be able to avoid a lot of the headache of choosing and
configuring many of these tools by using a <firstterm>canned
hosting</firstterm> site: an online service that offers prepackaged,
templatized web services with some or all of the collaboration tools
needed to run a free software project.  See
<xref linkend="canned-hosting"/><phrase output="printed"> later
in this chapter</phrase> for a discussion of the advantages and
disadvantages of canned hosting.</para>
-->
<para>Se pueden evitar muchos dolores de cabeza por escoger y configurar
muchas de estas herramientas si en su lugar utilizamos un <firstterm>hosting enlatado
</firstterm>: un servicio en línea que ofrece servicios preempacados y con plantillas
de algunas o todas las herramientas de colaboración necesarias para
llevar a cabo un proyecto de software libre. Más en <xref
linkend="canned-hosting"/><phrase output="printed">
a continuación en éste mismo capítulo</phrase> para una discusión más
profunda acerca de las ventajas y desventajas de estas soluciones.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="web-site">
<!--
<title>Web Site</title>
-->
<title>Sitio Web</title>

<!--
<para><emphasis>possv2 24 March 2013: If you're reading this note, then
you've encountered this chapter while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis></para>
-->
<para><emphasis>possv2 24 March 2013: If you're reading this note, then
you've encountered this chapter while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis></para>

<!--
<para>For our purposes, <emphasis>the web site</emphasis> means web
pages devoted to helping people participate in the project as
developers, documenters, etc.  Note that this is different from the
main user-facing web site.  In many projects, users have different
needs and often (statistically speaking) a different mentality from
the developers.  The kinds of web pages most helpful to users are not
necessarily the same as those helpful for
developers&nbsp;&mdash;&nbsp;don't try to make a "one size fits all"
web site just to save some writing and maintenance effort: you'll end
up with a site that is not quite right for either audience.</para>
-->
<para>Para nuestros propósitos, el <emphasis>sitio web</emphasis>
significa las páginas web dedicadas a ayudar a la gente a participar
en el proyecto como desarrolladores, documentadores, etc. Tenga en
cuenta que esto es diferente de la página web principal de cara al
usuario. En muchos proyectos, los usuarios tienen necesidades
diferentes y, a menudo (estadísticamente hablando) una mentalidad
diferente de los desarrolladores. Los tipos de páginas web más
útiles para los usuarios no son necesariamente las mismas que son
útiles para los desarrolladores&nbsp;&mdash;&nbsp;no trate de hacer
una sitio web de "talla única" sólo para ahorrar un poco de esfuerzo
de escritura y mantenimiento: terminará con un sitio que no
está del todo bien, para cualquiera de las audiencias.</para>

<!--
<para>The two types of sites should cross-link, of course, and in
particular it's important that the user-oriented site have, tucked a
way in a corner somewhere, a clear link to the developers' site, since
most new developers will start out at the user-facing pages and look
for a path from there to the developers' area.</para>
-->
<para>Los dos tipos de sitios deben enlazados entre sí, por supuesto,
y, en particular, es importante que el sitio orientado al usuario tenga,
colocado de alguna manera en una esquina del agún lugar, una clara
enlace con el sitio de los desarrolladores, ya que la mayoría de los
nuevos desarrolladores darán sus primeros pasos en las páginas de
usuario y buscarán un camino desde allí hacia la zona de los
desarrolladores.</para>

<!--
<para>An example may make this clearer.  As of this writing in
November 2013, the office suite LibreOffice has its main user-oriented
web site at <ulink url="https://libreoffice.org/"
>libreoffice.org</ulink>, as you'd expect.  If you were a user wanting
to download and install LibreOffice, you'd start there, go straight to
the "Download" link, and so on.  But if you were a developer looking
to (say) fix a bug in LibreOffice, you might
<emphasis>start</emphasis> at <ulink url="https://libreoffice.org/"
>libreoffice.org</ulink>, but you'd be looking for a link that says
something like "Developers", or "Development", or "Get
Involved"&nbsp;&mdash;&nbsp;in other words, you'd be looking for the
gateway to the development area.</para>
-->
<para>Un ejemplo puede aclarar esto. Al escribir estas líneas, en
noviembre de 2013, la suite ofimática LibreOffice tiene su principal
sitio web orientado al usuario en <ulink
url="https://libreoffice.org/">libreoffice.org</ulink>, como era de
esperar. Si usted fuera un usuario que quiere descargar e instalar
LibreOffice, usted comenzaría allí, iría directamente al enlace
"Descargar", y así sucesivamente. Pero si usted fuera un desarrollador
que busca (por ejemplo) corregir un error en LibreOffice, puede
<emphasis>empezar</emphasis> en <ulink
url="https://libreoffice.org/">libreoffice.org</ulink>, pero
estaría buscando un enlace que diga algo así como "Desarrolladores",
o "Desarrollo", o "Involúcrate"&nbsp;&mdash;&nbsp;en otras palabras,
estaría buscando la puerta de entrada a la zona de desarrollo.</para>

<!--
<para>In the case of LibreOffice, as with some other large projects,
they actually have a couple of different gateways.  There's one link
that says <ulink url="https://www.libreoffice.org/get-involved/"
>"Get&nbsp;Involved"</ulink>, and another that says <ulink
url="https://www.libreoffice.org/developers/" >"Developers"</ulink>.
The "Get Involved" page is aimed at the broadest possible range of
potential contributors: developers, yes, but also documenters,
quality-assurance testers, marketing volunteers, web infrastructure
volunteers, financial or in-kind donors, interface designers, support
forum volunteers, etc.  This frees up the "Developers" page to target
the rather narrower audience of programmers who want to get involved
in improving the LibreOffice code.  The set of links and short
descriptions provided on both pages is admirably clear and concise:
you can tell immediately from looking whether you're in the right
place for what you want do, and if so what the next thing to click on
is.  The "Development" page gives some information about where to find
the code, how to contact the other developers, how to file bugs, and
things like that, but most importantly it points to what most seasoned
open source contributors would instantly recognize as the
<emphasis>real</emphasis> gateway to actively-maintained development
information: the development wiki at <ulink
url="http://wiki.documentfoundation.org/Development"
>wiki.documentfoundation.org/Development</ulink>.</para>
-->
<para>En el caso de LibreOffice, al igual que algunos otros grandes
proyectos, en realidad tienen un par de diferentes pasarelas. Hay un
enlace que dice <ulink
url="https://www.libreoffice.org/get-involved/">"Involúcrate"</ulink>,
y otro que dice <ulink
url="https://www.libreoffice.org/developers/">"Desarrolladores"</ulink>.
La página "Involúcrate" está dirigida a la más amplia gama de
potenciales contribuyentes: desarrolladores, sí, pero también
documentadores, los probadores de garantía de calidad,
voluntarios de marketing, voluntarios de infraestructura web,
financistas o alguna especie de donantes, diseñadores de interfaz,
voluntarios para el foro de soporte, etc. Esto libera la página
"Desarrolladores" para dirigirse a un público más bien estrecho de los
programadores que deseen participar en la mejora del código de
LibreOffice. El conjunto de enlaces y breves descripciones
proporcionadas en ambas páginas es admirablemente claro y conciso: se
puede saber de inmediato al mirar si usted está en el lugar correcto
para lo que quiere hacer, y de esa manera, saber cuál es el siguiente
lugar en que debe hacer clic. La página de "Desarrollo" da un poco de
información acerca de dónde encontrar el código, cómo comunicarse con
los otros desarrolladores, cómo presentar errores, y cosas por el
estilo, pero, lo más importante, apunta a lo que los más experimentados
colaboradores de código abierto reconocerían al instante como la
<emphasis>verdadera</emphasis> puerta de acceso a la información
activamente mantenida sobre desarrollo: el wiki de desarrollo en <ulink
url="http://wiki.documentfoundation.org/Development"
>wiki.documentfoundation.org/Development</ulink>.</para>

<!--
<para>This division into two contributor-facing gateways, one for all
kinds of contributions and another for coders specifically, is
probably right for a large, multi-faceted project like LibreOffice.
You'll have to use your judgement as to whether that kind of
subdivision is appropriate for your project; at least at the
beginning, it probably isn't.  It's better to start with one unified
contributor gateway, aimed at all the types of contributors you
expect, and if that page ever gets large enough or complex enough to
feel unwieldy&nbsp;&mdash;&nbsp;listen carefully for complaints about
it, since you and other long-time participants will be naturally
desensitized to weaknesses in introductory
pages!&nbsp;&mdash;&nbsp;then you can divide it up however seems
best.</para>
-->
<para>Esta división en dos pasarelas para los contribuidores, una para
todo tipo de contribuciones y otra espacíficamente para los codificadores,
es probable que tenga sentido para un proyecto grande y multifacético
como LibreOffice. Tendrá que usar su juicio para determinar si ese
tipo de subdivisión es apropiado para su proyecto; al menos al
principio, probablemente no lo es. Es mejor empezar con una pasarela
unificada para los colaboradores, dirigida a todos los tipos de
contribuyentes que se pueden esperar, y si esa página nunca es lo
suficientemente grande o lo suficientemente compleja como para sentir
que es difícil de manejar&nbsp;&mdash;&nbsp;escucha con atención las
quejas al respecto, ya que usted y otros participantes desde hace mucho
tiempo estarán insensibilizados naturalmente a las debilidades de las
páginas introductorias&nbsp;&mdash;&nbsp;entonces usted puede dividirla
siempre y cuando parezca lo mejor.</para>

<!--
<para>From a technical point of view there is not much to say about
setting up the project web site.  Configuring a web server and writing
web pages are fairly simple tasks, and most of the important things to
say about layout and arrangement were covered in the previous chapter.
The web site's main function is to present a clear and welcoming
overview of the project, and to bind together the other tools (the
version control system, bug tracker, etc.).  If you don't have the
expertise to set up a web server yourself, it's usually not hard to
find someone who does and is willing to help out.  Nonetheless, to
save time and effort, people often prefer to use one of the canned
hosting sites.</para>
-->
<para>Desde un punto de vista técnico no hay mucho que decir acerca de
la creación de la página web del proyecto. La configuración de un
servidor web y la creación de páginas web son tareas bastante simples,
y la mayoría de las cosas importantes que decir sobre el diseño y la
disposición fueron cubiertas en el capítulo anterior. La función
principal del sitio web es presentar una visión general clara y
acogedora del proyecto, y unir las otras herramientas (sistema de
control de versiones, seguimiento de errores, etc.). Si usted no tiene
los conocimientos necesarios para configurar un servidor web por ti
mismo, por lo general no es difícil encontrar a alguien que lo haga y
esté dispuesto a ayudar. Sin embargo, para ahorrar tiempo y esfuerzo,
las personas a menudo prefieren usar uno de los sitios de hospedaje
enlatados.</para>

<sect2 id="canned-hosting">
<!--
<title>Canned Hosting</title>
-->
<title>Hosting Enlatado</title>

<!--
<para>A <firstterm>canned hosting</firstterm> site is an online
service that offers some or all of the online collaboration tools
needed to run a free software project.  At a minimal, a canned hosting
site offers public version control repositories and bug tracking; most
also offer wiki space, many offer mailing list hosting too, and some
offer continuous integration testing and other services.</para>
-->
<para>Un sitio de <firstterm>hosting enlatado</firstterm> (hospedaje
enlatado) es un servicio online que ofrece algunas o todas las
herramientas de colaboración en línea necesarias para ejecutar un
proyecto de software libre. Como mínimo, un sitio de hospedaje enlatado
ofrece repositorios públicos de control de versiones y de seguimiento
de fallos; La mayoría ofrecen también espacio de wiki, muchos ofrecen
también hospedaje a la lista de correo, y algunos ofrecen pruebas de
integración continua y otros servicios.</para>

<!-- possv2 todo: link to 'fund-servers' in Chapter 5, re the mention
     of continuous integration above?  Should one be firstterm? -->

<!--
<para>There are two main advantages to using a canned site.  The first
is server capacity and bandwidth: their servers are beefy boxes
sitting on really fat pipes.  No matter how successful your project
gets, you're not going to run out of disk space or swamp the network
connection.  The second advantage is simplicity.  They have already
chosen a bug tracker, a version control system, perhaps discussion
forum software, and everything else you need to run a project.
They've configured the tools, arranged single-sign-on authentication
where appropriate, are taking care of backups for all the data stored
in the tools, etc.  You don't need to make many decisions.  All you
have to do is fill in a registration form, press a button, and
suddenly you've got a project development web site.</para>
-->
<para>Hay dos ventajas principales de utilizar un sitio de hospedaje
enlatado. La primera es la capacidad de los servidores y ancho de
banda: sus servidores son cajas fornidas sentadas en tuberías realmente
grandes. No importa que tan exitoso se vuelva su proyecto, usted no va
a quedarse sin espacio en disco o a inundar la conexión de red. La
segunda ventaja es la simplicidad. Ellos ya han elegido un gestor de
fallos, un sistema de control de versiones, tal vez el software del
foro de discusión, y todo lo que necesita para ejecutar un proyecto.
Ya han configurado las herramientas, han dispuesto de una autenticación
con un único inicio de sesión donde sea posible, se hace cargo de las
copias de seguridad de todos los datos almacenados en las herramientas,
etc. No es necesario tomar muchas decisiones. Todo lo que tienes que
hacer es llenar un formulario de registro, pulse un botón y de pronto
usted tiene un sitio web de desarrollo de proyectos.</para>

<!--
<para>These are pretty significant benefits.  The disadvantage, of
course, is that you must accept <emphasis>their</emphasis> choices and
configurations, even if something different would be better for your
project.  Usually canned sites are adjustable within certain narrow
parameters, but you will never get the fine-grained control you would
have if you set up the site yourself and had full administrative
access to the server.</para>
-->
<para>Estos son beneficios muy significativos. La desventaja, por
supuesto, es que usted debe aceptar <emphasis>sus</emphasis> opciones
y configuraciones, aunque sea mejor algo diferente para su proyecto.
Por lo general, los sitios se pueden ajustar bajo ciertos parámetros
estrechos, pero nunca se tiene el control de grano fino que usted
tendría si usted configura el sitio usted mismo y tiene acceso
administrativo completo al servidor.</para>

<!--
<para>A perfect example of this is the handling of generated files.
Certain project web pages may be generated files&mdash;for example,
there are systems for keeping FAQ data in an easy-to-edit master
format, from which HTML, PDF, and other presentation formats can be
generated.  As explained in
<xref linkend="version-everything"/><phrase output="printed">
earlier in this chapter</phrase>,
you wouldn't want to version the generated formats, only the master
file.  But when your web site is hosted on someone else's server, it
may be difficult to set up a custom hook to regenerate the online
HTML version of the FAQ whenever the master file is changed.</para>
-->
<para>Un ejemplo perfecto de esto es el manejo de los archivos
generados. Algunas páginas web del proyecto pueden ser archivos
generarados&mdash;por ejemplo, existen sistemas para mantener los
datos del FAQ en un formato maestro fácil de editar, a partir del
cual el HTML, PDF y otros formatos de presentación se pueden
generar. Como se explica en <xref
linkend="version-everything"/><phrase output="printed">
anteriormente en este capítulo</phrase>, a usted no le gustaría
versionar los formatos generados, sólo el archivo maestro. Pero
cuando su sitio web está alojado en el servidor de otra persona,
puede ser difícil de preparar un hook (gancho) personalizado para
regenerar la versión HTML en línea de la FAQ cada vez que se
cambie el archivo maestro.</para>

<!--
<para>If you choose a canned site, leave open the option of switching
to a different site later, by using a custom domain name as the
project's development home address.  You can forward that URL to the
canned site, or have a fully customized development home page at the
main URL and link to the canned site for specific functionality.  Just
try to arrange things such that if you later decide to use a different
hosting solution, the project's main address doesn't need to
change.</para>
-->
<para>Si usted elige un sitio de hospedaje, deje abierta la opción de
cambiar a un sitio diferente en el futuro, mediante el uso de un nombre
de dominio personalizado como domicilio del desarrollo del proyecto.
Usted puede redireccionar esa URL al sitio enlatado, o tener una página
de inicio de desarrollo totalmente personalizada en la URL principal y
enlazarla al sitio enlatado para funcionalidades específicas.
Simplemente tratar de arreglar las cosas de tal manera que si más
adelante decide utilizar una solución de alojamiento diferente, la
dirección principal del proyecto no tiene por qué cambiar.</para>

<!--
<para>And if you're not sure whether to use canned hosting, then you
should probably use canned hosting.  These sites have integrated their
services in myriad ways (just one example: if a commit mentions a bug
ticket number using a certain format, then people browsing that commit
later will find that it automatically links to that ticket), ways that
would be laborious for you to reproduce, especially if it's your first
time running an open source project.  The universe of possible
configurations of collaboration tools is vast and complex, but the
same set of choices has faced everyone running an open source project
and there are some settled solutions now.  Each of the canned hosting
sites implements a reasonable subset of that solution space, and
unless you have reason to believe you can do better, your project will
probably run best just using one of those sites.</para>
-->
<para>Y si usted no está seguro de si se debe usar un hosting
enlatado, entonces probablemente debería utilizarlo. Estos sitios han
integrado sus servicios en miles de formas (Sólo un ejemplo: si un
commit menciona un número de ticket de fallo usando un formato
determinado, entonces la gente navegando ese commit más tarde se
encontrará con que se vincula automáticamente a ese ticket), cosa que
sería laboriosa para usted reproducir, sobre todo si es la primera
vez que lleva a cabo un proyecto de código abierto. El universo de
posibles configuraciones de las herramientas de colaboración es vasto
y complejo, pero el mismo conjunto de opciones ha enfrentado todo el
mundo corriendo un proyecto de código abierto y hay algunas soluciones
asentadas ahora. Cada uno de los sitios de hospedaje implementa un
subconjunto razonable de ese espacio de soluciones, y al menos que
tenga razones para creer que puedes hacerlo mejor, el proyecto
funcionará probablemente mejor usando uno de esos sitios.</para>

<sect3 id="canned-hosting-choosing">
<!--
<title>Choosing a canned hosting site</title>
-->
<title>Selección de un sitio de hosting enlatado</title>

<!--
<para>There are now so many sites providing free-of-charge canned
hosting for projects released under open source licenses that there is
not space here to review the field.</para>
-->
<para>En la actualidad hay tantos sitios que proporcionan hosting
enlatados libre de cargos para proyectos liberados bajo licencias de
código abierto que no hay espacio aquí para revisarlos todos.</para>

<!--
<para>So I'll make this easy: choose <a href="http://github.com/"
>GitHub</a>.  It's by far the most popular and appears set to stay
that way, or even grow in dominance, for some years to come.  It has a
good set of features and integrations.  Many developers are already
familiar with GitHub and have an account there.  It has an <ulink
url="http://develop.github.com/" >API</ulink> for interacting
programmatically with project resources, and while it does not
currently offer mailing lists, there are plenty of other places you
can host those, such as <ulink url="http://groups.google.com/" >Google
Groups</ulink>.</para>
-->
<para>Así que voy a hacerlo fácil: elige <a
href="http://github.com/">GitHub</a>. Es, por mucho, el más popular y
parece decidido a permanecer de esa manera, o incluso crecer en su
predominio, por varios años en adelante. Tiene un buen conjunto de
características e integraciones. Muchos desarrolladores ya están
familiarizados con GitHub y tienen una cuenta allí. Tiene una <ulink
url="http://develop.github.com/">API</ulink> para una interacción
mediante programación con los recursos del proyecto, y si bien no
ofrece actualmente las listas de correo, hay un montón de otros
lugares que pueden hospedarlas, como los <ulink
url="http://groups.google.com/">Grupos de Google</ulink>.</para>

<!--
<para>If you're not convinced by GitHub (for example because your
project uses, say, Mercurial instead of Git), but you aren't sure
where to host, take a look at Wikipedia's thorough <ulink
url="http://en.wikipedia.org/wiki/Comparison_of_open_source_software_hosting_facilities"
>comparison of open source software hosting facilities</ulink>; it's
the first place to look for up-to-date, comprehensive information on
open source project hosting options.  Currently the two most popular
other hosting sites are <ulink url="http://code.google.com/hosting/"
>Google Code Hosting</ulink>, <ulink url="http://sourceforge.net/"
>SourceForge</ulink>, but consult the Wikipedia page before making a
decision.</para>
-->
<para>Si usted no se convence por GitHub (por ejemplo, porque el
proyecto utiliza, por decir, Mercurial en lugar de Git), pero no
está seguro de dónde alojar, eche un vistazo minucioso a <ulink
url="http://en.wikipedia.org/wiki/Comparison_of_open_source_software_hosting_facilities"
>Comparación de los servicios de alojamiento para software de código
abierto</ulink>; que es el primer lugar para buscar, hasta a la fecha,
la información completa sobre las opciones de alojamiento de proyectos
de código abierto. Actualmente los otros dos sitios de alojamiento más
populares son <ulink url="http://code.google.com/hosting/">Google Code
Hosting</ulink>, <ulink
url="http://sourceforge.net/">SourceForge</ulink>, pero consulte la
página de Wikipedia antes de tomar una decisión.</para>

</sect3>

<sect3 id="hosting-on-freedom">
<!--
<title>Hosting on fully open source infrastructure</title>
-->
<title>Alojamiento en una infraestructura completamente de código
abierto</title>

<!--
<para>Although all the canned hosting sites use plenty of free
software in their stack, most of them also wrote their own proprietary
software to glue it all together, which means the hosting environment
is not easily reproducible by others.  For example, while Git itself
is free software, GitHub is a hosted service running partly with
proprietary software&nbsp;&mdash;&nbsp;if you leave GitHub, you can't
take it with you, at least not all of it.</para>
-->
<para>Aunque todos los sitios de hospedaje usan un montón de software
libre, la mayoría de ellos también escribieron su propio software
para unir todo, lo que significa que el medio ambiente de alojamiento
no es fácilmente reproducible por otros. Por ejemplo, mientras que la
propia Git es un software libre, GitHub es un servicio alojado
corriendo en parte con el software propietario&nbsp;&mdash;&nbsp;si
deja GitHub, no se la puede llevar con usted, por lo menos no
toda.</para>

<!--
<para>Some projects prefer a canned hosting site that runs an entirely
free software infrastructure and that could, in theory, be reproduced
independently were that ever to become necessary.  Fortunately, there
are such sites, the most well-known being <ulink
url="http://gitorious.org/" >Gitorious</ulink>, <ulink
url="http://savannah.gnu.org/" >GNU Savannah</ulink>, and <ulink
url="http://gitlab.com/" >GitLab</ulink> (as of this writing in early
2014).  Furthermore, any service that offers hosting of the <ulink
url="http://redmine.org/" >Redmine</ulink> or <ulink
url="http://trac.edgewall.org" >Trac</ulink> code collaboration
platforms effectively offers fully freedom-preserving project hosting,
because those platforms include most of the features needed to run an
open source project; some companies offer that kind of commercial
platform hosting with a zero-cost or very cheap rate for open source
projects.</para>
-->
<para>Algunos proyectos prefieren un sitio de hospedaje que se
ejecute en una infraestructura de software totalmente libre y que
podría, en teoría, ser reproducida de forma independiente de llegar a
ser necesario. Afortunadamente, existen tales sitios, el más conocido
es <ulink url="http://gitorious.org/">Gitorious</ulink>, <ulink
url="http://savannah.gnu.org/">GNU Savannah</ulink>, y <ulink
url="http://gitlab.com/">GitLab</ulink> (para la fecha de este escrito
a principios de 2014). Por otra parte, cualquier servicio que ofrezca
hospedaje para plataformas de colaboración de código como <ulink
url="http://redmine.org/">Redmine</ulink> o <ulink
url="http://trac.edgewall.org">Trac</ulink> ofrece efectivamente
alojamiento que preserva plenamente la libertad, ya que estas
plataformas incluyen la mayoría de las características que se
necesitan para ejecutar un proyecto de código abierto; algunas
empresas ofrecen este tipo de plataforma comercial de hosting con una
tasa de costo cero o muy barato para los proyectos de código
abierto.</para>

<!--
<para>Should you host your project on fully open source
infrastructure?  While it would be ideal to have access to all the
code that runs the site, my opinion is that the crucial thing is to
have a way to export project data, and to be able to interact with the
data in automatable ways.  A site that meets these criteria can never
truly lock you in, and will even be extensible, to some degree,
through its programmatic interface.  While there is some value in
having all the code that runs a hosting site available under open
source terms, in practice the demands of actually deploying that code
in a production environment are prohibitive for most projects anyway.
These sites need multiple servers, customized networks, and full-time
staffs to keep them running; merely having the code would not be
sufficient to duplicate or "fork" the service anyway.  The main thing
is just to make sure your data isn't trapped.</para>
-->
<para>¿Debería alojar su proyecto en una infraestructura completamente
de código abierto? Si bien sería ideal tener acceso a todo el código
que se ejecuta el sitio, mi opinión es que lo crucial es tener una
forma de exportar los datos del proyecto, y ser capaz de
interactuar con los datos de maneras automatizables. Un sitio que
cumpla con estos criterios realmente nunca podrá encerrarte en él, e
incluso será extensible, hasta cierto punto, a través de su interfaz
de programación. Aunque hay algo de valor en tener todo el código que
se ejecuta un sitio de alojamiento disponible bajo los términos de
código abierto, de todas formas en la práctica las exigencias de la
implementación real de ese código en un entorno de producción son
prohibitivos para la mayoría de los proyectos. Estos sitios necesitan
varios servidores, redes personalizadas, y el personal de tiempo
completo para que sigan funcionando; el mero hecho de tener el código
no sería suficiente para duplicar o "forkear" el servicio de todos
modos. Lo principal es sólo asegurarse de que sus datos no se
encuentran atrapados.</para>

<!--
<para>Of course, all the above applies only to the servers.  Your
project should never require participants to run proprietary
collaboration software on their own machines.</para>
-->
<para>Por supuesto, todo lo anterior sólo se aplica a los
servidores. Su proyecto no debe exigir a los participantes ejecutar
software de colaboración privativos en sus propias máquinas.</para>

</sect3>

<sect3 id="anonymity">
<!--
<title>Anonymity and involvement</title>
-->
<title>El anonimato y la participación</title>

<!--
<para>A problem that is not strictly limited to the canned sites, but
is most often found there, is the over-requirement of user
registration to participate in various aspects of the project.  The
proper degree of requirement is a bit of a judgement call.  User
registration helps prevent spam, for one thing, and even if every
commit gets reviewed you still probably don't want anonymous strangers
pushing changes into your repository, for example.</para>
-->
<para>Un problema que no es exclusivo a los sitios enlatados, pero con
mayor frecuencia se encuentra allí, es la sobre-exigencia de registro
de usuario para participar en diversos aspectos del proyecto. El
adecuado grado de exigencia es un poco una cuestión de criterio. El
registro de usuarios ayuda a evitar el spam, por un lado, y aunque
cada commit se revise es aún probable que usted no quiera extraños
anónimos subiendo cambios al repositorio, por ejemplo.</para>

<!--
<para>But sometimes user registration ends up being required for tasks
that ought to be permitted to unregistered visitors, especially the
ability to file tickets in the bug tracker, and to comment on existing
tickets.  By requiring a logged-in username for such actions, the
project raises the involvement bar for what should be quick,
convenient tasks.  It also changes the demographics of who files bugs,
since those who take the trouble to set up a user account at the
project site are hardly a random sample even from among users who are
willing to file bugs (who in turn are already a biased subset of all
the project's users).  Of course, one wants to be able to contact
someone who's entered data into the ticket tracker, but having a field
where she can enter her email address (if she wants to) is sufficient.
If a new user spots a bug and wants to report it, she'll only be
annoyed at having to fill out an account creation form before she can
enter the bug into the tracker.  She may simply decide not to file the
bug at all.</para>
-->
<para>Pero a veces el registro del usuario termina siendo requerido
para tareas que deben ser autorizados a visitantes no registrados,
especialmente la capacidad de registrar tickets en el gestor de fallos,
y para comentar sobre los tickets existentes. Al requerir un nombre de
usuario que haya iniciado sesión en tales acciones, el proyecto eleva
la barra de compromiso de lo que deberían ser tareas rápidas y
convenientes. También cambia la demografía de quienes registran errores,
ya que los que se toman la molestia de crear una cuenta de usuario en
el sitio del proyecto son apenas una muestra aleatoria incluso de entre
los usuarios que están dispuestos a registrar errores (que a su vez ya
son un subconjunto parcial de todos los usuarios del proyecto). Por
supuesto, uno quiere ser capaz de ponerse en contacto con alguien que
introdujo los datos en el gestor de tickets, pero teniendo un campo en
el que se pueda introducir la dirección de correo electrónico (si
quiere) es suficiente. Si un nuevo usuario ve un error y quiere
denunciarlo, sólo se moslestará por tener que llenar un formulario de
creación de su cuenta antes de poder entrar en el gestor de fallos.
Él puede simplemente decidir no presentar el error en absoluto.</para>

<!--
<para>If you have control over which actions can be done anonymously,
make sure that at least <emphasis>all</emphasis> read-only actions are
permitted to non-logged-in visitors, and if possible that data entry
portals, such as the bug tracker, that tend to bring information from
users to developers, can also be used anonymously, although of course
anti-spam techniques, such as captchas, may still be necessary.</para>
-->
<para>Si usted tiene el control sobre las acciones que se pueden hacer
de forma anónima, asegúrese de que al menos <emphasis>todas</emphasis>
las acciones de sólo lectura se les permita a los visitantes que no han
iniciado sesión, y si es posible que los portales de entrada de datos,
como el gestor de fallos, que tienden a llevar la información de los
usuarios a los desarrolladores, también se puedan utilizar de forma
anónima, aunque, por supuesto, todavía pueden ser necesarias algunas
técnicas anti-spam, como captchas.</para>

</sect3>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="message-forums">
<!-- For link compatibility with the old section ID. -->
<anchor id="mailing-lists" />
<!--
<title>Mailing Lists / Message Forums</title>
-->
<title>Listas de Correo / Foros de Mensajes</title>

<!--
<para>Discussion forums in which participants post and respond to
messages are the bread and butter of project communications.  For a
long time these were mainly email-based discussion lists, but the
distinction between Web-based forums and mailing lists is, thankfully,
slowly disappearing.  Services like <ulink
url="https://groups.google.com/" >Google Groups</ulink> (which is not
itself open source) and <ulink url="http://Gmane.org/"
>Gmane.org</ulink> (which is) have now established that
cross-accessibility of message forums as mailing lists and vice versa
is the minimum bar to meet, and modern discussion management systems
like GroupServer and Sympa reflect this.</para>
-->
<para>Los foros de discusión en el que los participantes publican y
responden a mensajes son el pan y la mantequilla de las comunicaciones
en el proyecto. Durante mucho tiempo estos fueron principalmente las
listas de discusión basadas en correo electrónico, pero la distinción
entre los foros basados ​​en la web y listas de correo estan,
afortunadamente, desapareciendo poco a poco. Servicios como <ulink
url="https://groups.google.com/">Grupos de Google</ulink> (que no es
en sí de código abierto) y <ulink url="http://Gmane.org/"
>Gmane.org</ulink> (que sí es) ya han establecido que la accesibilidad
cruzada de los foros de mensajes como listas de correo y viceversa es
la meta mínima a alcanzar, y sistemas modernos de gestión de discusiónes
como GroupServer y Sympa reflejan esto.</para>

<!--
<para>Because of this nearly-completed unification between email lists
and web-based forums<footnote><para>Which was a long time
coming&nbsp;&mdash;&nbsp;see <ulink
url="http://www.rants.org/2008/03/06/thread_theory/"
>rants.org/2008/03/06/thread_theory</ulink> for more.  And no, I'm not
too dignified to refer to my own blog post.</para></footnote>, I will
use the terms <firstterm>message&nbsp;forum</firstterm> and
<firstterm>mailing&nbsp;list</firstterm> more or less interchangeably.
They refer to any kind of message-based forum where posts are linked
together in threads (topics), people can subscribe, archives of past
messages can be browsed, and the forum can be interacted with via
email or via a web browser.</para>
-->
<para>Debido a esta unificación casi terminada entre las listas de
correo y foros basados ​​en la web <footnote><para>Que tardó un tiempo
en llegar&nbsp;&mdash;&nbsp;ver <ulink
url="http://www.rants.org/2008/03/06/thread_theory/"
>rants.org/2008/03/06/thread_theory</ulink> para más. Y no, no soy
demasiado digno para referirme a mi propio artículo de
blog.</para></footnote>, utilizaré los términos <firstterm>foro de
mensajes</firstterm> y <firstterm>lista de correo</firstterm> más o
menos de la misma manera. Se refieren a cualquier tipo de foro basado
en mensajes donde las publicaciones están unidas entre sí en hilos
(temas), es posible suscribirse, se pueden consultar archivos de
mensajes anteriores, y en el foro se puede interactuar por vía email
o a través de un navegador web.</para>

<!--
<para>If a user is exposed to any channel besides a project's web
pages, it is most likely to be one of the project's message forums.
But before she experiences the forum itself, she will experience the
process of finding the right forums.  Your project should
have a prominently-placed description of all the available public
forums, to give newcomers guidance in deciding which ones to browse or
post to first.  A typical such description might say something like
this:</para>
-->
<para>Si un usuario está expuesto a cualquier canal aparte de las
páginas web de un proyecto, es muy probable que sea uno de los foros
de mensajes del proyecto. Pero antes de que experimente el propio foro,
experimentará el proceso de encontrar los foros adecuados. El proyecto
debe tener una descripción prominentemente ubicada de todos los foros
públicos disponibles, para dar a los recién llegados una guía para
decidir en cuáles navegar o publicar primero. Una descripción típica
podría decir algo como esto:</para>

<screen>

<!--
  The mailing lists are the main day-to-day communication channels for
  the Scanley community.  You don't have to be subscribed to post to a
  list, but if it's your first time posting (whether you're subscribed
  or not), your message may be held in a moderation queue until a
  human moderator has a chance to confirm that the message is not spam.
  We're sorry for this delay; blame the spammers who make it necessary.
-->
  Las listas de correo son los principales canales de comunicación del
  día a día de la comunidad Scanley. Usted no tiene que estar suscrito
  para publicar en una lista, pero si es la primera vez que
  publica (ya sea que esté suscrito o no), su mensaje puede ser
  retenido en una cola de moderación hasta que un moderador humano
  tenga la oportunidad de confirmar que el mensaje no es spam.
  Lamentamos este retraso; culpe a los spammers que lo hacen necesario.

<!--
  Scanley has the following lists:
-->
  Scanley tiene las siguientes listas:

<!--
  <emphasis role="bold"><literal>users&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Discussion about using Scanley or programming with the Scanley
    API, suggestions of possible improvements, etc.  You can browse the
    users@ archives at <emphasis role="bold">&lt;&lt;&lt;link to archive&gt;&gt;&gt;</emphasis> or subscribe here:
    <emphasis role="bold">&lt;&lt;&lt;link to subscribe&gt;&gt;&gt;</emphasis>.
-->
  <emphasis role="bold"><literal>users&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Discusión sobre el uso de Scanley o programación con la API Scanley,
    sugerencias de posibles mejoras, etc. Usted puede examinar los archivos
    de users@ en <emphasis role="bold">&lt;&lt;&lt;enlace al archivo&gt;&gt;&gt;</emphasis> o suscribirse aquí:
    <emphasis role="bold">&lt;&lt;&lt;enlace para suscribirse&gt;&gt;&gt;</emphasis>.


<!--
  <emphasis role="bold"><literal>dev&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Discussion about developing Scanley.  Maintainers and contributors
    are subscribed to this list.  You can browse the dev@ archives at
    <emphasis role="bold">&lt;&lt;&lt;link to archive&gt;&gt;&gt;</emphasis> or subscribe here: <emphasis role="bold">&lt;&lt;&lt;link to subscribe&gt;&gt;&gt;</emphasis>.
-->
  <emphasis role="bold"><literal>dev&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Discusión sobre el desarrollo de Scanley. Mantenedores y contribuyentes
    están suscritas a esta lista. Usted puede examinar los archivos
    de dev@ en <emphasis role="bold">&lt;&lt;&lt;enlace al archivo&gt;&gt;&gt;</emphasis> o suscribirse aquí:
    <emphasis role="bold">&lt;&lt;&lt;enlace para suscribirse&gt;&gt;&gt;</emphasis>.

<!--
    (Sometimes threads cross over between users@ and dev@, and
    Scanley's developers will often participate in discussions on both
    lists.  In general if you're unsure where a question or post
    should go, start it out on <literal>users@</literal>.  If it should be a
    development discussion, someone will suggest moving it over to
    <literal>dev@</literal>.)
-->
    (A veces los hilos se cruzan entre users@ y dev@, y los desarrolladores de
    Scanley suelen participar en los debates de ambas listas. En general si no
    está seguro dónde una pregunta o mensaje deberían ir, inícielo en
    <literal>users@</literal>. Si debe ser una discusión sobre el desarrollo,
    alguien le sugerirá movierlo hacia <literal>dev@</literal>.)

<!--
  <emphasis role="bold"><literal>announcements&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    This is a low-traffic, subscribe-only list.  The Scanley
    developers post announcements of new releases and occasional other
    news items of interest to the entire Scanley community here, but
    followup discussion takes place on users@ or dev@.
    <emphasis role="bold">&lt;&lt;&lt;link to subscribe&gt;&gt;&gt;</emphasis>.
-->
  <emphasis role="bold"><literal>announcements&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Esta es una lista de bajo tráfico, de sólo suscripción. Los desarrolladores
    de Scanley publican aquí anuncios de nuevas versiones y en ocasionales otras
    noticias de interés para toda la comunidad Scanley, pero la discusión se
    lleva a cabo en users@ o dev@. <emphasis role="bold">&lt;&lt;&lt;enlace para
    suscribirse&gt;&gt;&gt;</emphasis>.


<!--
  <emphasis role="bold"><literal>notifications&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    All code commit messages, bug tracker tickets, automated
    build/integration failures, etc, are sent to this list.  Most
    developers should subscribe: <emphasis role="bold">&lt;&lt;&lt;link to subscribe&gt;&gt;&gt;</emphasis>.
-->
<emphasis role="bold"><literal>notifications&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Todos los mensajes de commit del código, tickets del gestor de fallos, fallos
    automatizados de construcción/integración, etc, son enviados a esta lista.
    La mayoría de los desarrolladores deberían suscribirse: <emphasis role="bold">&lt;&lt;&lt;enlace
    para suscribirse&gt;&gt;&gt;</emphasis>.

<!--
  There is also a non-public list you may need to send to, although
  only developers are subscribed:
-->
  También hay una lista no pública a la que pudieras necesitar hacer un envío, aunque
  sólo los desarrolladores están suscritos:

<!--
  <emphasis role="bold"><literal>security&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Where the Scanley project receives confidential reports of
    security vulnerabilities.  Of course, the report will be made
    public eventually, but only after a fix is released; see our
    security procedures page for more [...]
-->
<emphasis role="bold"><literal>security&nbsp;{_AT_}&nbsp;scanley.org</literal></emphasis>:
    Donde el proyecto Scanley recibe informes confidenciales de
    las vulnerabilidades de seguridad. Por supuesto, se hará público
    el informe al final, pero sólo después de que se publique una
    solución; consulte nuestra página de procedimientos de seguridad
    para más [...]
</screen>

<!-- ========================== subsection =========================== -->
<sect2 id="message-forum-choosing">
<!--
<title>Choosing the Right Forum Management Software</title>
-->
<title>Elegir el software correcto para la gestión del foro</title>

<!--
<para>It's worth investing some time in choosing the right mailing
list management system for your project.  Modern list management tools
offer at least the following features:</para>
-->
<para>Vale la pena invertir algo de tiempo en la elección del sistema
de gestión de listas de correo adecuado para su proyecto. Las
herramientas modernas de gestión de listas ofrecen al menos las
siguientes características:</para>

<variablelist>
<!--
  <varlistentry><term>Both email- and web-based access</term>
    <listitem>
      <para>Users should be able to subscribe to the forums by email,
            and read them on the web (where they are organized into
            conversations or "threads", just as they would be in a
            mailreader).</para>
    </listitem>
  </varlistentry>
-->
  <varlistentry><term>Acceso a través de correos o basado en web</term>
    <listitem>
      <para>Los usuarios deben ser capaces de suscribirse a los foros
            por correo electrónico, y leerlos en la web (en la que se
            organizan en conversaciones o "hilos", tal como se haría
            en un lector de correo).</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Moderation features</term>
    <listitem>
      <para>To "moderate" is to check posts, especially first-time
            posts, to make sure they are not spam before they go out
            to the entire list.  Moderation necessarily involves
            human administrators, but software can do a great deal to
            make it easier on the moderators.  There is more said
            about moderation in <xref linkend="spam-prevention"/>
            later in this chapter.</para>
    </listitem>
  </varlistentry>
-->
  <varlistentry><term>Características para la moderación</term>
    <listitem>
      <para>Moderar es revisar los mensajes, especialmente los mensajes
            de primera vez, para asegurar que no son SPAM antes de que
            lleguen a la lista. La moderación incluye necesariamente a
            seres humanos administradores, pero el software puede
            realizar un gran trabajo para hacerlo más sencillo. Se
            discute más acerca de la moderación luego.</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Rich administrative interface</term>
    <listitem>
      <para>There are many things administrators need to do besides
            spam moderation&nbsp;&mdash;&nbsp;for example, removing
            obsolete addresses, a task that can become urgent when a
            recipient's address starts sending "I am no longer at this
            address" bounces back to the list in response to every
            list post (though some systems can even detect this and
            unsubscribe the person automatically).  If your forum
            software doesn't have decent administrative capabilities,
            you will quickly realize it, and should consider switching
            to software that does.</para>
    </listitem>
  </varlistentry>
-->
  <varlistentry><term>Interfaz Administrativa</term>
    <listitem>
      <para>Hay muchas cosas que los administradores necesitan hacer
            además de la moderación de spam&nbsp;&mdash;&nbsp;​​por
            ejemplo, la eliminación de las direcciones obsoletas, una
            tarea que puede llegar a ser urgente cuando la dirección de
            un destinatario comienza a enviar respuestas automáticas
            del tipo "ya no tengo ésta dirección de correo" a la lista
            en respuesta a cada mensaje (aunque algunos sistemas incluso
            pueden detectar esto y dar de baja a la persona de forma
            automática). Si su software de foro no tiene capacidades
            administrativas decentes, enseguida se dará cuenta, y
            debería considerar un cambio de software.</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Header manipulation</term>
    <listitem>
      <para>Some people have sophisticated filtering and replying
            rules set up in their mail readers, and rely on the forum
            adding or manipulating certain standard headers.  See 
            <xref linkend="header-management"/> later in this chapter
            for more on this.</para>
    </listitem>
  </varlistentry>
-->
  <varlistentry><term>Manipulación de las cabeceras</term>
    <listitem>
      <para>Algunas personas tienen sofisticados filtros y reglas de
            respuestas configuradas en sus clientes de correo, y depende
            del foro añadir o manipular ciertas cabeceras estándar. Ver
            <xref linkend="header-management"/> más adelante en este
            capítulo para más información sobre esto.</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Archiving</term>
    <listitem>
      <para>All posts to the managed lists are stored and made
            available on the web (see <xref
            linkend="using-archives"/><phrase output="printed"> in
            <xref linkend="communications"/></phrase> for more on the
            importance of public archives).  Usually the archiver is a
            native part of the message forum system; occasionally, it
            is a separate tool that needs to be integrated.</para>
    </listitem>
  </varlistentry>
-->
  <varlistentry><term>Archivo</term>
    <listitem>
      <para>Todos los mensajes enviados a las listas son almacenados y
            hechos públicos en la web. (Ver <xref
            linkend="using-archives"/><phrase output="printed">
	        en <xref linkend="communications"/></phrase> para más
            información sobre la importancia de los archivos públicos).
            Por lo general, el archivador es una parte natural del
            sistema de foros de mensajes; de vez en cuando, es una
            herramienta independiente que debe integrarse.</para>
    </listitem>
  </varlistentry>

</variablelist>

<!--
<para>The point of the above list is really just to show that forum
management is a complex problem that has already been given a lot of
thought, and to some degree been solved.  You don't need to become an
expert, but you will have to learn at least a little bit about
it, and you should expect list management to occupy your attention
from time to time in the course of running any free software project.
Below we'll examine a few of the most common issues.</para>
-->
<para>El objetivo de la lista de arriba es sencillamente mostrar que
la administración de los foros es un problema complejo sobre el cual
se ha pensado mucho, y hasta cierto grado está resuelto. No es
necesario convertirse en un experto, pero tendrá que aprender al menos
un poco sobre esto, y deberá suponer que la administración de las
listas ocupará algo de atención de vez en cuando durante la duración
cualquier proyecto de software libre. A continuación examinaremos
algunos de los problemas más comunes que podemos encontrar al
configurar las listas de correo.</para>

<!-- ========================== subsection =========================== -->
<sect3 id="spam-prevention">
<!--
<title>Spam Prevention</title>
-->
<title>Prevenir el Spam</title>

<!--
<para>Between when this sentence is written and when it is published,
the Internet-wide spam problem will probably double in
severity&mdash;or at least it will feel that way.  There was a time,
not so long ago, when one could run a mailing list without taking any
spam-prevention measures at all.  The occasional stray post would
still show up, but infrequently enough to be only a low-level
annoyance.  That era is gone forever.  Today, a mailing list that
takes no spam prevention measures will quickly be submerged in junk
emails, to the point of unusability.  Spam prevention is
mandatory.</para>
-->
<para>Entre el momento cuando ésta frase es escrita y cuando es
publicada, el problema a lo largo y ancho de Internet el problema
del Spam probablemente sea el doble de severo&mdash;o al menos
parecerá que es así. Hubo una época, no mucho tiempo atrás, cuando
se podía administrar una lista de correos sin la necesidad de tomar
medidas para prevenir el Spam. Algún mensaje extraviado ocasional
aparecía pero con tan poca frecuencia que solo era una molestia
de bajo nivel. Esa época ya es historia. Hoy, las listas de correo
que no toman medidas preventivas en contra del Spam se verá
sumergida rápidamente en correo basura hasta el punto de ser inútil.
Prevenir el Spam es una prioridad.</para>

<!--
<para>We divide spam prevention into two categories: preventing spam
posts from appearing on your mailing lists, and preventing your
mailing list from being a source of new email addresses for spammers'
harvesters.  The former is more important to your project, so we
examine it first.</para>
-->
<para>La prevención de Spam se divide en dos categorías: prevenir
que mensajes basura aparezcan en la lista y prevenir que la lista
sea utilizada como fuente de nuevas direcciones de correo para los
spammers. La primera es la más importante, así que la examinaremos
primero.</para>

<sect4 id="spam-filtering">
<!--
<title>Filtering posts</title>
-->
<title>Filtrado de los mensajes</title>

<!--
<para>There are three basic techniques for preventing spam posts, and
most mailing list software offers all three.  They are best used in
tandem:</para>
-->
<para>Existen tres técnicas básicas para prevenir mensajes basura y
muchas aplicaciones para listas ofrecen las tres. Lo mejor es utilizarlas
en tandem:</para>

<orderedlist>
<!--
  <listitem><para><emphasis role="bold">Only auto-allow postings from
            list subscribers.</emphasis></para>
-->
  <listitem><para><emphasis role="bold">Sólo permitir automáticamente
		mensajes de los suscriptores a la lista.
            	</emphasis></para>

<!--
            <para>This is effective as far as it goes, and also
            involves very little administrative overhead, since it's
            usually just a matter of changing a setting in the mailing
            list software's configuration.  But note that posts which
            aren't automatically approved must not be simply
            discarded.  Instead, they should go into a moderation
            queue, for two reasons.  First, you want to allow
            non-subscribers to post: a person with a question or
            suggestion should not need to subscribe to a mailing list
            just to ask a question there.  Second, even
            subscribers may sometimes post from an address other than
            the one by which they're subscribed.  Email addresses are
            not a reliable method of identifying people, and shouldn't
            be treated as such.</para>
-->
            <para>
		Esto es efectivo hasta cierto punto y necesita
		de poca administración ya que usualmente es sólo
		cuestión de cambiar algunos puntos en la configuración
		de la aplicación de listas. Hay que apuntar que
		aquellos mensajes que no son aprobados automáticamente
		no deben ser desechados. En su lugar, deben ser
		moderados por dos razones. Primero, se deben permitir
		mensajes de quienes no están suscritos. Alguna
		persona con una pregunta o sugerencia no debería
		tener que suscribirse a la lista para enviar un solo
		mensaje. Segundo, incluso quienes están suscritos
		envían mensajes desde cuentas diferentes de la que
		han utilizado para suscribirse. Las direcciones de
		correo electrónico no son un método eficaz para
		identificar a las personas y no debe ser utilizado
		para esto.</para>
            </listitem>

<!--
  <listitem><para><emphasis role="bold">Filter posts through
            spam-detection software.</emphasis></para>
-->
  <listitem><para><emphasis role="bold">Filtrar los mensajes utilizando
		un programa de filtro de spam.</emphasis></para>
<!--
            <para>If the mailing list software makes it possible (most
            do), you can have posts filtered by spam-filtering
            software.  Automatic spam-filtering is not perfect, and
            never will be, since there is a never-ending arms race
            between spammers and filter writers.  However, it can
            greatly reduce the amount of spam that makes it through to the
            moderation queue, and since the longer that queue is the
            more time humans must spend examining it, any amount of
            automated filtering is beneficial.</para>
-->
		<para>Si la aplicación de listas de correo lo permite (la mayoría
		lo hace) se pueden filtrar los mensajes utilizando un filtro
		anti-spam. El filtrado automático de Spam no es perfecto, y
		nunca lo será, ya que existe un pulso sin fin entre los
		spammers y los escritores de filtros. A pesar de esto, se puede
		reducir enormemente la cantidad de Spam que llega a la cola
		de moderación y dado que mientras más larga sea ésta cola, se
		necesitaran más tiempo examinándola, así que cualquier filtrado
		automático es beneficioso.</para>

<!--
            <para>There is not space here for detailed instructions
            on setting up spam filters.  You will have to consult
            your mailing list software's documentation for that (see
            <xref
            linkend="mailing-list-software"/><phrase
            output="printed"> later in this chapter</phrase>).  List
            software often comes with some built-in spam prevention
            features, but you may want to add some third-party
            filters.  I've had good experiences with SpamAssassin
            (<ulink url="http://spamassassin.apache.org/"
            >spamassassin.apache.org</ulink>) and SpamProbe
            (<ulink url="http://spamprobe.sourceforge.net/"
            >spamprobe.sourceforge.net</ulink>), but this
            is not a comment on the many other open source spam
            filters out there, some of which are apparently also quite
            good.  I just happen to have used those two myself and
            been satisfied with them.</para>
-->
		<para>No hay lugar suficiente para unas instrucciones detalladas
		sobre como configurar filtros de Spam. Habrá que consultar la
		documentación de la aplicación de listas de correo para esto
		(en <xref linkend="mailing-list-software"/><phrase output="printed">
		más adelante en éste capítulo</phrase>). Las aplicaciones para
		listas vienen con características para la prevención de Spam,
		pero quizás sería una buena idea añadir una solución de un
		tercero. He tenido buenas experiencias con estas dos:
		SpamAssassin (<ulink url="http://spamassassin.apache.org/"/>)
		y SpamProbe (<ulink url="http://spamprobe.sourceforge.net/"/>).
		Esto no es una crítica contra otros filtros anti spam open
		source que al parecer son muy buenos también. Sucede que sólo
		he tenido la oportunidad de utilizar estos dos y estar
		satisfecho con ellos.</para>
  </listitem>

<!--
  <listitem><para><emphasis role="bold">Moderation.</emphasis></para>
            <para>For mails that aren't automatically allowed by
            virtue of being from a list subscriber, and which make it
            through the spam filtering software, if any, the last stage
            is <firstterm>moderation</firstterm>: the mail is routed
            to a special holding area, where a human examines it and
            confirms or rejects it.</para>
-->
  <listitem><para><emphasis role="bold">Moderación.</emphasis></para>
		<para>Para aquellos correos que no son automáticamente
		aceptados por su virtud de ser enviados por un suscriptor
		a la lista y que pasan a través del filtro anti-spam, si es
		que lo hay, la ultima fase es la <firstterm>moderación</firstterm>:
		el correo es enrutado a una dirección especial, donde alguien
		lo examina y lo confirma o rechaza.</para>

<!--
            <para>Confirming a post usually takes one of two forms:
            you can accept the sender's post just this once, or you
            can tell the system to allow this and all future posts
            from the same sender.  You almost always want to do the
            latter, in order to reduce the future moderation
            burden&nbsp;&mdash;&nbsp;after all, someone who has made a
            valid post to a forum is unlikely to suddenly turn into a
            spammer later.</para>
-->
		<para>Confirmar un mensaje se puede hacer de dos formas:
		se puede aceptar el mensaje sólo una vez o se le puede indicar
		a la aplicación que acepte éste y todos los mensajes futuros
		de éste remitente. Casi siempre deseamos hacer lo último
		de manera que podamos reducir la carga futura en la moderación.
		Los detalles sobre como confirmar esto, varían entre sistemas
		pero usualmente es una cuestión de responder a una dirección en
		especial con el comando "aceptar" (lo que significa que sólo
		se aceptará éste mensaje) o "permitir" (permitir éste y todos
		los mensajes futuros).</para>

<!--
            <para>Rejecting is done by either marking the item to be
            discarded, or by explicitly telling the system the message
            was spam so the system can improve its ability to
            recognize future spams.  Sometimes
            you also have the option to automatically discard future
            mails from the same sender without them ever being held in
            the moderation queue, but there is rarely any point doing
            this, since spammers don't send from the same address
            twice anyway.</para>
-->
            <para>
		Rechazar un mensaje se hace simplemente ignorando
		el correo de moderación. Si la aplicación nunca
		recibe confirmación de que algo es un mensaje valido
		entonces no pasará a la lista, así que con solo
		ignorar el correo de moderación creará el efecto deseado.
		En algunos casos, existe la opción de responder con los
		comandos "rechazar" o "denegar" para que automáticamente
		se desaprueben los mensajes del remitente sin siquiera
		pasarlos por la moderación. Raramente existe una razón
		para hacer esto ya que la moderación es por lo general
		para prevenir el spam y los spammers no suelen utilizar
		una misma dirección dos veces.</para>
            </listitem>
</orderedlist>

<!--
<para>Be sure to use moderation <emphasis>only</emphasis> for
filtering out spams, and perhaps for clearly off-topic messages such
as when someone accidentally posts to the wrong mailing list.
Although the moderation system may give you a way to respond directly
to the sender, you should never use that method to answer questions
that really belong on the mailing list itself, even if you know the
answer off the top of your head.  To do so would deprive the project's
community of an accurate picture of what sorts of questions people are
asking, and deprive people of a chance to answer questions themselves
and/or see answers from others.  Mailing list moderation is strictly
about keeping the list free of spam and of wildly off-topic emails,
nothing more.</para>
-->
<para>Hay que asegurarse de que la moderación <emphasis>sólo</emphasis>
se utiliza para filtrar el spam y mensajes fuera de contexto, como
cuando alguien envía un correo a la lista equivocada. El sistema de
moderación por lo general ofrece una manera de responder directamente
al remitente pero es mejor no utilizarlo para responder a preguntas
que realmente pertenecen a la lista, incluso si se sabe la respuesta
inmediatamente. De hacer esto, se privaria a la comunidad del proyecto
de una visión exacta de que tipo de preguntas la gente hace y privarlos
de la oportunidad de responder ellos mismos a preguntas y/o ver las
respuestas de otros. La moderación de las listas debe ser estrictamente
para mantenerlas libres de basura y de correos fuera de contexto,
nada más.</para>

</sect4>

<sect4 id="address-hiding">
<!--
<title>Address hiding in archives</title>
-->
<title>Ocultar las direcciones en los archivos</title>

<!--
<para>To prevent your mailing lists from being a source of addresses
for spammers, a common technique is for the archiving software to
obscure people's email addresses, for example by replacing</para>
-->
<para>Para prevenir que los spammers utilicen las listas de correo
como una fuente de direcciones, una técnica muy común es la de ocultar
las direcciones de correo de la gente en el registro, reemplazándolas
como por ejemplo:</para>

    <blockquote>
      <para><literal>jrandom@somedomain.com</literal></para>
    </blockquote>

<para>por</para>

    <blockquote>
      <para><literal>jrandom_AT_somedomain.com</literal></para>
    </blockquote>

<para>o</para>

    <blockquote>
      <para><literal>jrandomNOSPAM@somedomain.com</literal></para>
    </blockquote>

<!--
<para>or some similarly obvious (to a human) encoding.  Since spam
address harvesters often work by crawling through web
pages&mdash;including your mailing list's online archives&mdash;and
looking for sequences containing "@", encoding the addresses is a way
of making people's email addresses invisible or useless to spammers.
This does nothing to prevent spam from being sent to the mailing list
itself, of course, but it does avoid increasing the amount of spam
sent directly to list users' personal addresses.</para>
-->
<para>o algo similar igual de obvio (para un humano). Ya que los
recolectores de direcciones por lo general funcionan reptando por
paginas web&mdash;incluyendo el archivo de nuestra lista de correo&mdash;
y buscando secuencias conteniendo "@", modificar las direcciones
es una forma para que sean invisibles o inútiles para los spammers.
Esto no hace nada para prevenir que se envié spam desde la lista,
por supuesto, pero si evita que se incremente la cantidad de spam
enviado directamente a las cuentas personales de los usuarios de
la lista.</para>

<!--
<para>Address hiding can be controversial.  Some people like it a lot,
and will be surprised if your archives don't do it automatically.
Other people think it's too much of an inconvenience (because humans
also have to translate the addresses back before using them).
Sometimes people assert that it's ineffective, because a harvester
could in theory compensate for any consistent encoding pattern.
However, note that there is empirical evidence that address hiding
<emphasis>is</emphasis> effective; see <ulink
url="http://www.cdt.org/speech/spam/030319spamreport.shtml"
>cdt.org/speech/spam/030319spamreport.shtml</ulink>.</para>
-->
<para>Ocultar las direcciones puede ser algo controversial. A algunas
personas les puede gustar mucho y se sorprenderán si el registro no lo
hace automáticamente. Otras pueden pensar que es demasiado inconveniente
(porque los humanos también tenemos que traducir las direcciones antes
de utilizarlas). Algunas veces las personas afirman que es inefectivo,
porque los recolectores en teoría pueden compensar cualquier patrón
de modificación consistente. No obstante, hay que señalar que existe
evidencia empírica de que ocultar las direcciones <emphasis>es</emphasis>
efectivo, como se puede ver en <ulink
url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>

<!--
<para>Ideally, the list management software would leave the choice up
to each individual subscriber, either through a special yes/no header
or a setting in that subscriber's list account preferences.  However,
I don't know of any software which offers per-subscriber or per-post
choice in the matter, so for now the list manager must make a decision
for everyone (assuming the archiver offers the feature at all, which
is not always the case).  For what it's worth, I lean toward turning
address hiding on.  Some people are very careful to avoid posting
their email addresses on web pages or anywhere else a spam harvester
might see it, and they would be disappointed to have all that care
thrown away by a mailing list archive; meanwhile, the inconvenience
address hiding imposes on archive users is very slight, since it's
trivial to transform an obscured address back to a valid one if you
need to reach the person.  But keep in mind that, in the end, it's
still an arms race: by the time you read this, harvesters might well
have evolved to the point where they can recognize most common forms
of hiding, and we'll have to think of something else.</para>
-->
<para>Lo ideal sería que la aplicación administrativa de la lista
diese la posibilidad de escoger a cada individuo, utilizando una cabecera si/no
especial o configurándolo en las preferencias de la cuenta del
suscriptor. Sin embargo, no conozco ninguna aplicación que permita hacer
esto para cada suscriptor o para cada mensaje, así que por ahora el
administrador de la lista debe tomar la decisión en nombre de todos
(asumiendo que el archivador ofrece ésta característica, lo cual no
es siempre así). Yo me inclino ligeramente hacia ocultar las direcciones.
Algunas personas son muy cuidadosas para evitar enviar sus
direcciones de correo electrónico en paginas web o en cualquier lugar
donde un recolector de spam pueda verla, y podrían ser decepcionante
que todo ese cuidado sea perdido gracias al registro de la lista de correo.
Mientras tanto, la inconveniencia al ocultar las direcciones que impone en
los usuarios del registro es muy pequeña, dada la trivialidad de transformar
las direcciones al formato correcto si se necesita contactar con esa
persona. Pero hay que seguir pensando en que, al final, sigue siendo
una lucha sin fin: para cuando haya leído esto, los recolectores
podrían haber evolucionado hasta el punto de reconocer la mayoría
de formas comúnmente utilizadas para ocultar y tendremos que pensar
en algo más.</para>

</sect4>

</sect3>

<!-- ========================== subsection =========================== -->
<sect3 id="header-management">
<!--
<title>Identification and Header Management</title>
-->
<title>Identificación y Administración de cabeceras</title>

<!--
<para>When interacting with the forum by email, subscribers often want
to put mails from the list into a project-specific folder, separate
from their other mail.  Their mail reading software can do this
automatically by examining the mail's <firstterm>headers</firstterm>.
The headers are the fields at the top of the mail that indicate the
sender, recipient, subject, date, and various other things about the
message.  Certain headers are well known and are effectively
mandatory:</para>
-->
<para>Por lo general, los suscriptores de las listas mueven estos
correos a una carpeta específica para el proyecto, separados de su
otro correo personal. Sus clientes de correo hacen esto automáticamente
al examinar las <firstterm>cabeceras</firstterm> de los mensajes.
La cabecera son los campos que se encuentran en la parte superior de los
correos, los cuales indican el remitente, destinatario, asunto, fecha
e información variada sobre el mensaje. Cabeceras certeras son bien
conocidas y obligatorias:</para>

<screen>
From: ...
To: ...
Subject: ...
Date: ...
</screen>

<!--
<para>Others are optional, though still quite standard.  For example,
emails are not strictly required to have the</para>
-->
<para>Otras son opcionales, aunque de cierta manera estándar. Por ejemplo,
no es estrictamente requerido que un correo electrónico tenga la cabecera
</para>

<screen>
Reply-to: sender@email.address.here
</screen>

<!--
<para>header, but most do, because it gives recipients a foolproof way
to reach the author (it is especially useful when the author had to
send from an address other than the one to which replies should be
directed).</para>
-->
<para>pero muchas lo tienen, porque da al destinatario una manera a prueba
de errores de responder al remitente (es especialmente útil cuando el
remitente ha tenido que enviar un correo desde una dirección diferente
a la cual las respuestas deben ser dirigídas).</para>

<!--
<para>Some mail reading software offers an easy-to-use interface for
filing mails based on patterns in the Subject header.  This leads
people to request that the mailing list add an automatic prefix to all
Subjects, so they can set their readers to look for that prefix and
automatically file the mails in the right folder.  The idea is that
the original author would write:</para>
-->
<para>Algunos clientes de correo ofrecen una interfaz fácil de usar para
rellenar correos basados en patrones en la cabecera Asunto. Esto lleva
a que la gente pida que la lista de correo añada automáticamente un prefijo
a todos los Asuntos, de forma que puedan configurar sus clientes para que
busquen esos prefijos y archivar los correos en el directorio correcto.
La idea es que el autor original escribiría:</para>

<!--
<screen>
Subject: Making the 2.5 release.
</screen>
-->
<screen>
Asunto: Trabajando en la versión 2.5
</screen>

<!--
<para>but the mail would show up on the list looking like this:</para>
-->
<para>pero el correo aparecería en la lista así:</para>

<!--
<screen>
Subject: [Scanley Discuss] Making the 2.5 release.
</screen>
-->
<screen>
Asunto: [discuss@lists.example.org] Trabajando en la versión 2.5
</screen>

<!--
<para>Although most list management software offers the option to do
this, you may decide against turning the option on.  The problem
it solves can often be solved in less obtrusive ways (see below), and
there is a cost to eating space in the Subject field.  Experienced
mailing list users typically scan the Subjects of the day's incoming
list mail to decide what to read and/or respond to.  Prepending the
list's name to the Subject can push the right side of the Subject off
the screen, rendering it invisible.  This obscures information that
people depend on to decide what mails to open, thus reducing the
overall functionality of the mailing list for everyone.</para>
-->
<para>Aunque la mayoría de las aplicaciones de administración de listas
ofrecen la opción de hacer esto, yo recomiendo no utilizarla. El problema
que resuelve puede ser resuelto de otras formas menos intrusas y los
costes de utilizar espacio en el campo del Asunto son demasiado grandes.
Los usuarios experimentados de las listas de correos revisan el asunto
de los correos entrantes del día para decidir acerca de qué van a leer
y qué van a responder. Fijar el nombre de la lista al Asunto puede
mover hacia la derecha el verdadero Asunto y fuera de la pantalla,
haciéndolo invisible. Esto oculta información necesaria para aquellos
quienes dependen en la decisión de cuales correos van a abrir, reduciendo
la funcionalidad conjunta de la lista para todos.</para>

<!--
<para>Instead of munging the Subject header, your project could take
advantage of the other standard headers, starting with the To header,
which should say the mailing list's address:</para>
-->
<para>En lugar de sobrecargar el Asunto, hay que enseñar a los usuarios
para que saquen ventajas de otras cabeceras estándar, empezando con el
campo "Para", el cual debería contener el nombre de la lista de correos:</para>

<screen>
To: &lt;discuss@lists.example.org&gt;
</screen>

<!--
<para>Any mail reader that can filter on Subject should be able to filter on
To just as easily.</para>
-->
<para>Cualquier cliente de correo capaz de filtrar los mensajes basándose en
el Asunto debe ser capaz de filtrar utilizando el campo Para facilmente.</para>

<!--
<para>There are a few other optional-but-standard headers expected for
mailing lists; they are sometimes not displayed by most mailreader
software, but they are present nonetheless.  Filtering on them is
even more reliable than using the "To" or "Cc" headers, and since these
headers are added to each post by the mailing list management software
itself, some users may be counting on their presence:</para>
-->
<para>Existen otras cabeceras opcionales pero estándar para las listas
de correo. Filtrar utilizándolos es incluso más fiable que utilizar
las cabeceras "Para" o "Cc" dado que estas cabeceras son añadidas
a todos los mensajes por el programa de administración de la lista, así
que algunos usuarios están contando con su presencia:</para>

<screen>
list-help: &lt;mailto:discuss-help@lists.example.org&gt;
list-unsubscribe: &lt;mailto:discuss-unsubscribe@lists.example.org&gt;
list-post: &lt;mailto:discuss@lists.example.org&gt;
Delivered-To: mailing list discuss@lists.example.org
Mailing-List: contact discuss-help@lists.example.org; run by ezmlm
</screen>

<!--
<para>For the most part, they are self-explanatory.  See <ulink
url="http://www.nisto.com/listspec/list-manager-intro.html"
>nisto.com/listspec/list-manager-intro.html</ulink> for more
explanation, or if you need the really detailed, formal specification,
see <ulink url="http://www.faqs.org/rfcs/rfc2369.html"
>faqs.org/rfcs/rfc2369.html</ulink>.
</para>
-->
<para>La mayoría se explican en si mismos. En <ulink 
url="http://www.nisto.com/listspec/list-manager-intro.html"/> se explican
mejor o en <ulink url="http://www.faqs.org/rfcs/rfc2369.html"/> para
una especificación formal más detallada.</para>

<!--
<para>Having said all that, these days I find that most subscribers
just request that the Subject header include a list-identifying
prefix.  That's increasingly how people are accustomed to filtering
email: Subject-based filtering is what many of the major online email
services (like Gmail) offer users by default, and those services tend
not to make it easy to see the presence of less-commonly used headers
like the ones I mentioned above&nbsp;&mdash;&nbsp;thus making it hard
for people to figure out that they would even have the option of
filtering on those other headers.</para>
-->

<!--
<para>Therefore, reluctantly, I recommend using a Subject prefix (keep
it as short as you can) if that's what your community wants.  But if
your project highly technical and most of its participants are
comfortable using the other headers, then that option is always there
as a more space-efficient alternative.</para>
-->

<!--
<para>It also used to be the case that if you have a mailing list
named "foo", then you also have administrative addresses "foo-help"
and "foo-unsubscribe" available.  In addition to these, it was
traditional to have "foo-subscribe" for joining, and "foo-owner",
for reaching the list administrators.  Increasingly, however,
subscribers manage their list membership via Web-based interfaces, so
even if the list management software you use sets up these
administrative addresses, they may go largely unused.</para>
-->

<para>Hay que señalar como estas cabeceras implican que si se tiene
una lista de correos llamada "list" entonces se tienen también unas
direcciones administrativas "list-help" y "list-unsubscribe". Además
de estas, es normal tener "list-subscribe" para unirse y "list-owner"
para contactar con el administrador de la lista. Dependiendo en la
aplicación administrativa que se use, estas y/o otras direcciones
administrativas varias pueden ser configuradas; la documentación
debería detallar esto. A menudo una explicación completa de todas
estas direcciones especiales es enviada a cada nuevo suscriptor
como parte de un mensaje de bienvenida automático. Probablemente
usted mismo reciba una copia de esto correo de bienvenida. Si no lo
ha recibido, pida una copia a alguien, de manera que pueda saber
qué están recibiendo los nuevos suscriptores. Mantenga la copia
a mano de manera que pueda responder preguntas acerca del funcionamiento
de la lista, o mejor aun, ponerlo en una página web en alguna
parte. Así, cuando alguien pierda su copia de las instrucciones
y pregunte cómo pueden eliminarse de la lista, se les facilita
la URL.</para>

<!--
<para>Some mailing list software offers an option to append
unsubscription instructions to the bottom of every post.  If that
option is available, turn it on.  It causes only a couple of extra
lines per message, in a harmless location, and it can save you a lot
of time, by cutting down on the number of people who mail you&mdash;or
worse, mail the list!&mdash;asking how to unsubscribe.</para>
-->
<para>Algunas aplicaciones para listas de correos ofrecen la opción
de agregar al final de cada mensaje las instrucciones para
eliminar la suscripción. Si ésta opción está disponible, usela.
Solo causa algunas lineas extra por mensaje en un sitio inofensivo
y puede ahorrar mucho tiempo al reducir el número de gente que escriba
&mdash;o peor aún, que escriban a la lista&mdash;preguntando cómo
eliminar la suscripción.</para>

</sect3>

<!-- ========================== subsection =========================== -->
<sect3 id="reply-to">
<!--
<title>The Great Reply-to Debate</title>
-->
<title>El gran debate del Reply-To</title>

<!--
<para>Earlier, in <xref linkend="avoid-private-discussions"/>, I stressed the
importance of making sure discussions stay in public forums, and
talked about how active measures are sometimes needed to prevent
conversations from trailing off into private email threads;
furthermore, this chapter is all about setting up project
communications software to do as much of the work for people as possible.
Therefore, if the mailing list management software offers a way to
automatically cause discussions to stay on the list, you would think
turning on that feature would be the obvious choice.</para>
-->
<para>Antes en <xref linkend="avoid-private-discussions"/> hice incapie
en la importancia de asegurar que las discusiones se mantengan en foros
públicos y hable acerca de porque a veces tomar medidas activas es necesario
para prevenir que algunas conversaciones deriven a hilos privados. Este capítulo
es acerca de todo lo relacionado con preparar el software de comunicación
del proyecto para que realice la mayor cantidad de trabajo posible. Así que,
si la aplicación para la administración de las listas de correo ofrece una
manera automática de encausar las discusiones a la lista, habría que
pensar que habilitarla es la opción correcta.</para>

<!--
<para>Well, not quite.  There is such a feature, but it has some
pretty severe disadvantages.  The question of whether or not to use it
is one of the hottest debates in mailing list
management&mdash;admittedly, not a controversy that's likely to make
the evening news in your city, but it can flare up from time to time
in free software projects.  Below, I will describe the feature, give
the major arguments on both sides, and make the best recommendation I
can.</para>
-->
<para>Bueno, quizás no. Existe tal característica, pero tiene algunas
desventajas muy importantes. Usarla o no es uno de los debates más
calientes en la administración de las listas de correo&mdash;admitamoslo,
no es una controversia que vaya a aparecer en las noticias, pero se puede
iniciar de vez en cuando en los proyectos de software libre. A continuación,
voy a describir esta característica, proponer los argumentos de cada
posición y hacer la mejor recomendación que puedo.</para>

<!--
<para>The feature itself is very simple: the mailing list software
can, if you wish, automatically set the Reply-to header on every post
to redirect replies to the mailing list.  That is, no matter what the
original sender puts in the Reply-to header (or even if they don't
include one at all), by the time the list subscribers see the post,
the header will contain the list address:</para>
-->
<para>Esta característica en si misma es muy sencilla: la aplicación
para las listas puede, si lo deseamos, automáticamente establecer
la cabecera Reply-To en todos los mensajes para dirigir todas las
respuestas a la lista. Así que, sin importar lo que escriba el
remitente en este campo (o si ni siquiera lo establecen) para
cuando los suscriptores a la lista vean el mensaje, éste contendrá
la dirección de la lista en la cabecera:
</para>

<screen>
Reply-to: discuss@lists.example.org
</screen>

<!--
<para>On its face, this seems like a good thing.  Because virtually
all mail reading software pays attention to the Reply-to header, now
when anyone responds to a post, their response will be automatically
addressed to the entire list, not just to the sender of the message
being responded to.  Of course, the responder can still manually
change where the message goes, but the important thing is that
<emphasis>by default</emphasis> replies are directed to the list.
It's a perfect example of using technology to encourage
collaboration.</para>
-->
<para>Esto puede parecer algo bueno, porque virtualmente todos
los clientes de correo prestan atención a esta cabecera y ahora
cada vez que alguien responda a algún mensaje, su respuesta
será automáticamente dirigida a la lista, no sólo a quien ha
enviado el mensaje que se responde. Por supuesto que el remitente
puede manualmente modificar esto, pero lo importante es que
<emphasis>por defecto</emphasis> las respuestas son enviadas a
la lista. Este es un ejemplo perfecto de como utilizar la tecnología
para animar la colaboración.</para>

<!--
<para>Unfortunately, there are some disadvantages.  The first is known
as the <firstterm>Can't Find My Way Back Home</firstterm> problem:
sometimes the original sender will put their "real" email address in
the Reply-to field, because for one reason or another they send email
from a different address than where they receive it.  People who
always read and send from the same location don't have this problem,
and may be surprised that it even exists.  But for those who have
unusual email configurations, or who cannot control how the From
address on their mails looks (perhaps because they send from work and
do not have any influence over the IT department), using Reply-to may
be the only way they have to ensure that responses reach them.  When
such a person posts to a mailing list that he's not subscribed to, his
setting of Reply-to becomes essential information.  If the list
software overwrites it<footnote><para>In theory, the list software
could <emphasis>add</emphasis> the lists's address to whatever
Reply-to destination were already present, if any, instead of
overwriting.  In practice, for reasons I don't know, most list
software overwrites instead of appending.</para></footnote>, he may
never see the responses to his post.</para>
-->
<para>Desafortunadamente, existen algunas desventajas. La primera es
conocida como el problema <firstterm>No puedo llegar a casa</firstterm>:
a veces, el remitente original establece su dirección de correo
real en el campo Reply-To porque por alguna razón u otra envían
correos utilizando una dirección diferente a la que utilizan
para recibirlos. Las personas que envían y reciben correos desde el
mismo sitio no tienen éste problema y quizás se sorprendan de que
siquiera existe. Pero para quienes utilizan configuraciones de correo
inusuales o quienes no pueden controlar como se forma el campo
From de su dirección de correo electrónico (quizás porque envían
correos desde sus trabajos y no tienen ninguna influencia sobre
el departamento de sistemas) el utilizar el campo Reply-To quizás
sea la única manera que tienen para asegurarse de que las respuestas
a sus mensajes les llegan (encuentran el camino a casa). Así que si
la aplicación de las listas sobre escribe esto, esta persona
puede que nunca vea las respuestas a sus mensajes.</para>

<!--
<para>The second disadvantage has to do with expectations, and in my
opinion is the most powerful argument against Reply-to munging.  Most
experienced mail users are accustomed to two basic methods of
replying: <firstterm>reply-to-all</firstterm> and
<firstterm>reply-to-author</firstterm>.  All modern mail reading
software has separate keys for these two actions.  Users know that to
reply to everyone (that is, including the list), they should choose
reply-to-all, and to reply privately to the author, they should choose
reply-to-author.  Although you want to encourage people to reply to
the list whenever possible, there are certainly circumstances where a
private reply is the responder's prerogative&mdash;for example, they
may want to say something confidential to the author of the original
message, something that would be inappropriate on the public
list.</para>
-->
<para>La segunda desventaja se refiere a las expectativas y en mi
opinión, el argumento más fuerte en contra del cambio del Reply-To.
La mayoría de los usuarios experimentados de correo electrónico
están acostumbrados a dos métodos básicos de responder:
<firstterm>Responder a todos</firstterm> y <firstterm>Responder
al remitente</firstterm>. Todos los clientes de correo tienen
botones separados para estas dos acciones. Sus usuarios saben que
para responder a todos los incluidos en la lista, deben escoger,
responder a todos y que para responder sólo al remitente en privado,
deben seleccionar Responder al remitente. Aunque se desee animar
a que la gente responda a la lista siempre que sea posible, existen
ciertas circunstancias cuando un mensaje privado al remitente es
prerrogativo&mdash;por ejemplo, desean compartir información
confidencial, algo que sería inapropiado para una lista pública.</para>

<!--
<para>Now consider what happens when the list has overridden the
original sender's Reply-to.  The responder hits the reply-to-author
key, expecting to send a private message back to the original author.
Because that's the expected behavior, he may not bother to look
carefully at the recipient address in the new message.  He composes
his private, confidential message, one which perhaps says embarrassing
things about someone on the list, and hits the send key.
Unexpectedly, a few minutes later his message appears <emphasis>on the
mailing list!</emphasis> True, in theory he should have looked
carefully at the recipient field, and should not have assumed anything
about the Reply-to header.  But authors almost always set Reply-to to
their own personal address (or rather, their mail software sets it for
them), and many longtime email users have come to expect that.  In
fact, when a person deliberately sets Reply-to to some other address,
such as the list, she usually makes a point of mentioning this in the
body of her message, so people won't be surprised at what happens when
they reply.</para>
-->
<para>Ahora consideremos lo que sucede cuando la lista sobre escribe
la cabecera Reply-To original del remitente. Quien responde pulsa
la opción de Responder al remitente, con la esperanza de enviar
un mensaje privado al autor original. Porque esta es la conducta
esperada y quizás esta persona no se moleste en examinar
cuidadosamente la dirección del destinatario en el nuevo mensaje. Redacta
su correo privado, un mensaje confidencial, uno que puede diga algo
embarazoso acerca de alguien de la lista y pulsa el botón de enviar.
Inesperadamente el mensaje <emphasis>llega a la lista</emphasis>
unos minutos después. Cierto, en teoría debería haber revisado
cuidadosamente el destinatario y no debería haber asumido nada
acerca del campo Reply-To. Pero por lo general este campo se
compone con su dirección de correo personal (o en su lugar, los clientes
de correo lo hacen) y muchos usuarios asiduos del correo electrónico
dan esto por seguro. De hecho, cuando alguien determina
deliberadamente el campo Reply-To a alguna otra dirección, como la de
la lista, usualmente señalan esto en el contenido del mensaje, de forma
que quienes respondan no se sorprendan de lo que sucede cuando lo hacen.</para>

<!--
<para>Because of the possibly severe consequences of this unexpected
behavior, my own preference is to configure list management software
to never touch the Reply-to header.  This is one instance where using
technology to encourage collaboration has, it seems to me, potentially
dangerous side-effects.  However, there are also some powerful
arguments on the other side of this debate.  Whichever way you choose,
you will occasionally get people posting to your list asking why you
didn't choose the other way.  Since this is not something you ever
want as the main topic of discussion on your list, it might be good to
have a canned response ready, of the sort that's more likely to stop
discussion than encourage it.  Make sure you do
<emphasis>not</emphasis> insist that your decision, whichever it is,
is obviously the only right and sensible one (even if you think that's
the case).  Instead, point out that this is a very old debate, there
are good arguments on both sides, no choice is going to satisfy
all users, and therefore you just made the best decision you
could.  Politely ask that the subject not be revisited unless someone
has something genuinely new to say, then stay out of the thread and
hope it dies a natural death.</para>
-->
<para>Dada la posibilidad de consecuencias muy severas de esta conducta
inesperada, mi preferencia es la de configurar la aplicación de la lista
para que nunca toque la cabecera Reply-To. Este caso de cuando se utiliza
la tecnología para animar la colaboración tiene, a mi parecer, efectos
colaterales potencialmente peligrosos. Por otro lado, existen argumentos
concretos del otro lado de este debate. Sea lo que sea que se escoja,
puede que en ocasiones algunas personas pregunten por qué no se ha
escogido el otro camino. Dado que esto no es algo que se quiere sea
el principal tema de discusión en la lista, puede ser conveniente
tener una respuesta preparada del tipo que sea más propensa a poner
fin a la discusión en lugar de animarla. Hay que asegurarse de
<emphasis>no</emphasis> insistir en que esta decisión, sea cual sea,
es obviamente la única correcta (incluso cuando se crea que esto es
así). En cambio, hay que señalar que este es un viejo debate, que
existen buenos argumentos de cada lado, que ninguna decisión iba a
satisfacer a todos los usuarios y que por esto se ha tomado la mejor
decisión que se podía. Amablemente se pide que el tema no
vuelva a surgir a menos que alguien tenga algo realmente nuevo que decir,
entonces hay que mantenerse alejado y esperar a que muera
por causas naturales.</para>

<!--
<para>Someone may suggest a vote to choose one way or the other.  You
can do that if you want, but I personally do not feel that counting
heads is a satisfactory solution in this case.  The penalty for
someone who is surprised by the behavior is so huge (accidentally
sending a private mail to a public list), and the inconvenience for
everyone else is fairly slight (occasionally having to remind someone
to respond to the whole list instead of just to you), that it's not
clear that the majority, even though they are the majority, should be
able to put the minority at such risk.</para>
-->
<para>Alguien podría sugerir una votación. Se puede permitir esto si se
quiere, pero personalmente no creo que contar manos sea una solución
satisfactoria en este caso. El castigo para alguien que se vea sorprendido
por este comportamiento es demasiado (accidentalmente enviar un correo
privado a la lista publica) y las molestias para todos los demás es
pequeña (ocasionalmente recordarle a alguien que deben responder a la
lista) por esto no está claro de que la mayoría, aunque sean la mayoría,
deban poner a una minoría bajo ese riesgo.</para>

<!--
<para>I have not addressed all aspects of this issue here, just the
ones that seemed of overriding importance.  For a full discussion, see
these two canonical documents, which are the ones people always cite
when they're having this debate:
-->
<para>No he llegado a tocar todos los aspectos acerca de este tema, sólo
los que me han parecido de especial importancia. Para una discusión completa,
se pueden leer los siguientes documentos, los cuales son siempre citados
cuando se entra en el debate:

<itemizedlist>
<!--
  <listitem>
     <para><emphasis role="bold">Leave Reply-to alone</emphasis>,
     <emphasis>by Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Set Reply-to to list</emphasis>,
     <emphasis>by Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.net/essays/reply-to.mhtml"/></para>
  </listitem>
-->
  <listitem>
     <para><emphasis role="bold">Leave Reply-to alone</emphasis>,
     <emphasis>por Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Set Reply-to to list</emphasis>,
     <emphasis>por Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.net/essays/reply-to.mhtml"/></para>
  </listitem>
</itemizedlist>

</para>

<!--
<para>Despite the mild preference indicated above, I do not feel there
is a "right" answer to this question, and happily participate in many
lists that <emphasis>do</emphasis> set Reply-to.  The most important
thing you can do is settle on one way or the other early, and try not
to get entangled in debates about it after that.  When the debate
re-arises every few years, as it inevitably will, you can point people
to the archived discussion from last time.</para>
-->
<para>A pesar de las benignas preferencias indicadas anteriormente, no
creo que exista una única respuestas correcta y he participado
felizmente de muchas listas que <emphasis>cambiaban</emphasis>el Reply-To.
Lo mejor que se puede hacer, es centrarse en alguna de las dos vías desde
el principio e intentar no verse enredado en debates sobre esto despues.</para>

<sect4 id="reply-fantasies">
<!--
<title>Two fantasies</title>
-->
<title>Dos fantasías</title>

<!--
<para>Someday, someone will get the bright idea to implement a
<firstterm>reply-to-list</firstterm> key in a mail reader.  It would
use some of the custom list headers mentioned earlier to figure out
the address of the mailing list, and then address the reply directly
to the list only, leaving off any other recipient addresses, since
most are probably subscribed to the list anyway.  Eventually, other
mail readers will pick up the feature, and this whole debate will go
away.  (Actually, the <ulink url="http://www.mutt.org/" >Mutt</ulink>
mail reader does offer this feature.<footnote><para>Shortly after this
book appeared, <ulink url="http://www.michaelbernstein.com/"
>Michael Bernstein</ulink> wrote me to say: "There are other email
clients that implement a reply-to-list function besides Mutt. For
example, Evolution has this function as a keyboard shortcut, but not a
button (Ctrl+L)."</para></footnote>)</para>
-->
<para>Algún día, alguien tendrá la brillante idea de implementar una
opción <firstterm>Responder a la lista</firstterm> en su cliente de correo.
Podría utilizar alguna de las cabeceras para listas mencionadas antes
para descubrir la dirección de la lista de correos y luego direccionar
las respuestas directamente a la lista, ignorando cualquier otro destinatario,
ya que probablemente muchos estén suscritos a la lista de todas formas.
Eventualmente, otros clientes implementarán esta característica y todo
el debate desaparecerá. (De hecho, el cliente de correos
<ulink url="http://www.mutt.org/">Mutt</ulink> ofrece esta opción.<footnote><para>
Poco después de que este libro apareciera, <ulink url="http://www.michaelbernstein.com/"
>Michael Bernstein</ulink> me escribió para comentarme lo siguiente:
"Existen otros clientes de correos que implementan una función de
responder a la lista a parte de Mutt. Por ejemplo, Evolution tiene
una combinación de teclas, pero no un botón (Ctrl+L)."</para></footnote>)</para>

<!--
<para>An even better solution would be for Reply-to munging to be a
per-subscriber preference.  Those who want the list to set Reply-to
munged (either on others' posts or on their own posts) could ask for
that, and those who don't would ask for Reply-to to be left alone.
However, I don't know of any list management software that offers this
on a per-subscriber basis.  For now, we seem to be stuck with a global
setting.<footnote><para>Since I wrote that, I've learned that there is
at least one list management system that offers this
feature: <ulink url="http://siesta.unixbeard.net/">Siesta</ulink>.
See also this article about it:
<ulink url="http://www.perl.com/pub/a/2004/02/05/siesta.html"
>perl.com/pub/a/2004/02/05/siesta.html</ulink></para></footnote></para>
-->
<para>Una mejor solución sería que el tratamiento del campo Reply-To fuese
una opción por suscriptor. Quienes deseen que la lista modifique
sus cabeceras Reply-To (ya sea en sus mensajes o en los de otros)
podría solicitarlo, y quienes no lo desean, se les deja tranquilos.
Aunque no conozco ninguna aplicación para listas de correo que permita
esto para cada suscriptor. Así que por ahora, parece que estamos atados
a una configuración global.<footnote><para>Desde que escribí esto, he
aprendido que existe al menos un sistema de gestión de listas que ofrece
esta característica: <ulink url="http://siesta.unixbeard.net/">Siesta</ulink>.
Hay un artículo sobre este en <ulink url="http://www.perl.com/pub/a/2004/02/05/siesta.html"
/></para></footnote></para>

</sect4>

</sect3>

<!-- ========================== subsection =========================== -->
<sect3 id="archiving">
<!--
<title>Archiving</title>
-->
<title>Archivo</title>

<!--
<para>The technical details of setting up mailing list archiving are
specific to the software that's running the list, and are beyond the
scope of this book.  If you have to choose or configure an archiver,
consider these qualities:</para>
-->
<para>Los detalles técnicos para configurar un archivo para
la lista de correos son específicos de la aplicación utilizada y están
fuera del alcance de este libro. Al escoger o configurar un archivador,
es conveniente considerar lo siguiente:</para>

<variablelist>

  <varlistentry><term>Actualización rápida</term>
    <listitem>
<!--
      <para>People will often want to refer to an archived message
            that was posted recently.  If possible, the archiver
            should archive each post instantaneously, so that by the
            time a post appears on the mailing list, it's already
            present in the archives.  If that option isn't available,
            then at least try to set the archiver to update itself
            every hour or so.  (By default, some archivers run their
            update processes once per night, but in practice that's
            far too much lag time for an active mailing list.)</para>
-->
	<para>A menudo la gente querrá ser referida a un mensaje enviado
	durante la ultima hora o dos. Si es posible, el archivador deberá
	archivar cada mensaje instantáneamente, de tal manera de que cuando
	el mensaje aparezca en la lista de correos, ya esté en el archivo.
	Si esa opción no esta disponible entonces al menos hay que intentar
	configurar el archivado para que se realice cada hora o así. (Por
	defecto, algunos archivadores ejecutan el proceso de actualización
	cada noche, pero en la práctica esta demora es demasiado larga
	para una lista de correos.</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Referential stability</term>
-->
  <varlistentry><term>Estabilidad referencial</term>
    <listitem>
<!--
      <para>Once a message is archived at a particular URL, it should
            remain accessible at that exact same URL forever, or as
            close to forever as possible.  Even if the archives are
            rebuilt, restored from backup, or otherwise fixed, any
            URLs that have already been made publicly available
            should remain the same.  Stable references make it
            possible for Internet search engines to index the
            archives, which is a major boon to users looking for
            answers.  Stable references are also important because
            mailing list posts and threads are often linked to from
            the bug tracker (see
            <xref
            linkend="bug-tracker"/><phrase output="printed">
            later in this chapter</phrase>) or
            from other project documents.</para>
-->
	<para>Una vez que un mensaje es archivado bajo una URL en
	particular, debe ser accesible desde esa URL para siempre.
	Incluso si el archivo es reconstruido o restaurado de un
	respaldo, cualquier URL que haya sido hecha publica debe
	permanecer igual. Las referencias estables hacen posible
	que los buscadores de Internet sean capaces de indexar el
	archivo, lo cual es una gran ventaja para los usuarios que
	buscan respuestas. Las referencias estables son también
	importantes porque los mensajes de la lista y los hilos
	son enlazados desde el gestor de fallos (
            <xref
            linkend="bug-tracker"/>)<phrase output="printed">
            más adelante en este capítulo</phrase> o
            en la documentación de otros proyectos.</para>

<!--
      <para>Ideally, mailing list software would include a message's
            archive URL, or at least the message-specific portion of
            the URL, in a header when it distributes the message to
            recipients.  That way people who have a copy of the
            message would be able to know its archive location
            without having to actually visit the archives, which would
            be helpful because any operation that involves one's web
            browser is automatically time-consuming.  Whether any
            mailing list software actually offers this feature, I don't
            know; unfortunately, the ones I have used do not.
            However, it's something to look for (or, if you write
            mailing list software, it's a feature to consider
            implementing, please).</para>
-->
	<para>Lo ideal sería que la aplicación de la lista de correos
	incluya la URL del mensaje archivado o al menos la porción
	de la URL específica del mensaje en una cabecera cuando este
	es distribuido. De esta manera la gente que haya recibido el
	mensaje podrá conocer su lugar en el archivo sin la necesidad
	de visitar el archivo, lo cual es de gran ayuda, ya que cualquier
	actividad que implique el uso del navegador web es automáticamente
	un consumo de tiempo. Que alguna aplicación de listas de
	correos ofrece esta posibilidad no lo sé. Desafortunadamente,
	los que he utilizado no la tienen. Pero esto es algo que hay
	que buscar (o si desarrolla una aplicación de listas, esta es
	una característica que debe considerar implementar, por favor).</para> 
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Thread support</term>
-->
  <varlistentry><term>Soporte de los hilos</term>
    <listitem>
<!--
      <para>It should be possible to go from any individual message to
            the <firstterm>thread</firstterm> (group of related
            messages) that the original message is part of.  Each
            thread should have its own URL too, separate from the URLs
            of the individual messages in the thread.</para>
-->
	<para>Desde cualquier mensaje debe ser posible ir al <firstterm>hilo</firstterm>
	(grupo de mensajes relacionados) al que pertenece el mensaje. Cada
	hilo debe tener su propia URL también, separado del URL de los
	mensajes del hilo.</para>
    </listitem>
  </varlistentry>

<!--
  <varlistentry><term>Searchability</term>
-->
  <varlistentry><term>Búsquedas</term>
    <listitem>
<!--
      <para>An archiver that doesn't support searching&mdash;on the
            bodies of messages, as well as on authors and
            subjects&mdash;is close to useless.  Note that some archivers 
            support searching by simply farming the work out to an
            external search engine such as <ulink
            url="http://www.google.com/" >Google</ulink>.  This is
            acceptable, but direct search support is usually more
            fine-tuned, because it allows the searcher to specify that
            the match must appear in a subject line versus the body,
            for example.</para>
-->
	<para>Un archivo que no permita búsquedas&mdash;tanto en el cuerpo
	de los mensajes como por autor o según el asunto&mdash;es casi
	inútil. Hay que señalar que algunos archivadores permiten búsquedas
	al remitir la labor a un buscador externo como 
	<ulink url="http://www.google.com/">Google</ulink>. Esto es
	aceptable, pero por lo general, las búsquedas directas son más
	finas, porque permiten a quien busca, especificar que los
	resultados sean mostrados, por ejemplo, según el asunto y no
	según el cuerpo del mensaje.
	</para>
    </listitem>
  </varlistentry>

</variablelist>

<!--
<para>The above is just a technical checklist to help you evaluate and
set up an archiver.  Getting people to
actually <emphasis>use</emphasis> the archiver to the project's
advantage is discussed in later chapters, in particular
<xref linkend="using-archives"/>.</para>
-->
<para>Lo anterior es sólo una lista técnica para ayudar a evaluar y
configurar un archivador. Hacer que la gente de hecho <emphasis>utilice</emphasis>
el archivo como ventaja para el proyecto es discutido en capítulos posteriores
en particular en <xref linkend="using-archives"/>.</para>

</sect3>

<sect3 id="message-forum-software">
<!-- For link compatibility with the old section ID. -->
<anchor id="mailing-list-software" />
<!--
<title>Mailing List / Message Forum Software</title>
-->

<!--
<para>Here are some tools for running message forums.  If the site
where you're hosting your project already has a default setup, then
you can just use that and avoid having to choose.  But if you need to
install one yourself, below are some possibilities.  (Of course, there
are probably other tools out there that I just didn't happen to find,
so don't take this as a complete list).</para>
-->
<para>Aquí hay algunas herramientas open source para la gestión de
las listas de correo y su archivo. Si el hosting del proyecto ya
tiene una configuración por defecto, quizás no sea necesario siquiera
decidir cual herramienta utilizar. Pero si se tiene que instalar una,
existen algunas posibilidades. Las que he utilizado son Mailman, Ezmlm,
MHonArc e Hypermail, lo cual no significa que no haya otras que sean
igual de buenas (y por supuesto, probablemente existan otras que no
he logrado encontrar, así que no considere esto como una lista completa).</para>

<para>Aplicaciones de gestión de listas de correo:</para>

<itemizedlist>
 <listitem>
<!--
   <para><emphasis role="bold">Google&nbsp;Groups</emphasis>&nbsp;&mdash;&nbsp;<ulink url="http://groups.google.com/" >groups.google.com</ulink></para>
   <para>Listing Google Groups first was a tough call.  The service is
         not itself open source, and a few of its administrative
         functions can be a bit hard to use.  However, its advantages
         are substantial: your group's archives are always online and
         searchable; you don't have to worry about scalability,
         backups, or other run-time infrastructure issues; the
         moderation and spam-prevention features are pretty good (with
         the latter constantly being improved, which is important in
         the neverending spam arms race); and Google Groups are easily
         accessible via both email and web, in ways that are likely to
         be already familiar to many participants.  These are strong
         advantages.  If you just want to get your project started,
         and don't want to spend too much time thinking about what
         message forum software or service to use, Google Groups
         is a good default choice.</para> 
-->
 </listitem>
 <listitem>
<!--
   <para><emphasis role="bold">GroupServer</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.groupserver.org/"/></para>
   <para>Has built-in archiver and integrated Web-based interface.
         GroupServer is a bit of work to set up, but once you have it
         up and running it offers users a good experience.
         You may  able to find free or low-cost hosted GroupServer
         hosting for your project's forums, for example from <ulink
         url="https://OnlineGroups.net/" >OnlineGroups.net</ulink>.</para>
-->
 </listitem>
 <listitem>
<!--
   <para><emphasis role="bold">Sympa</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.sympa.org/" >sympa.org</ulink></para>
   <para>Developed and maintained by a consortium of French
         universities, and designed for a given instance to handle
         both very large lists (> 700000 members, they claim) and a
         large number of lists.  Sympa can work with a variety of
         dependencies; for example, you can run it with sendmail,
         postfix, qmail or exim as the underlying message transfer
         agent.  It has built-in Web-based archiving.</para>
-->
 </listitem>
 <listitem>
<!--
   <para><emphasis role="bold">Mailman</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.list.org/" >list.org</ulink></para>
   <para>For many years, Mailman was the standard for open source
         project mailing lists.  It comes with a built-in archiver,
         Pipermail, and hooks for plugging in external archivers.
         Unfortunately, Mailman is showing its age now, and while
         it is very reliable in terms of message delivery and other
         under-the-hood functionality, its administrative
         interfaces&nbsp;&mdash;&nbsp;especially for spam moderation
         and subscription moderation&nbsp;&mdash;&nbsp;are frustrating
         for those accustomed to the modern Web.  As of this writing
         in late 2013, the long-awaited Mailman 3 was still in
         development but was about to enter beta-testing; by the time
         you read this, Mailman 3 may be released, and would be worth
         a look.  It is supposed to solve many of the problems of
         Mailman 2, and may make Mailman a reasonable choice again.</para> 
-->
 </listitem>
 <listitem>
<!--
   <para><emphasis role="bold">Dada</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://dadamailproject.com/" >dadamailproject.com</ulink></para>
   <para>I've not used Dada myself, but it is actively maintained and,
         at least from outward appearances, quite spiffy.  Note that
         to use it for particiatory lists, as opposed to announcement
         lists, you apparently need to activate the plug-in "Dada
         Bridge".  Commercial Dada hosting and installation offerings
         are available, or you can download the code and install it
         yourself.</para>
-->
 </listitem>
</itemizedlist>

</sect3>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="vc">
<!--
<title>Version Control</title>
-->
<title>Control de Versiones</title>

<!--
<para>A <firstterm>version control system</firstterm> (or
<firstterm>revision control system</firstterm>) is a combination of
technologies and practices for tracking and controlling changes to a
project's files, in particular to source code, documentation, and web
pages.  If you have never used version control before, the first thing
you should do is go find someone who has, and get them to join your
project.  These days, everyone will expect at least your project's
source code to be under version control, and probably will not take
the project seriously if it doesn't use version control with at least
minimal competence.</para>
-->
<para>Un <firstterm>sistema de control de versiones</firstterm> (o
<firstterm>sistema de control de revisiones</firstterm>) es una combinación
de tecnologías y practicas para seguir y controlar los cambios
realizados en los ficheros del proyecto, en particular en el código
fuente, en la documentación y en las páginas web. Si nunca antes se ha
utilizado un control de versiones, lo primero que hay que hacer es conseguir
a alguien que sí lo haya hecho y hacer que se una al proyecto. Hoy en día
todo el mundo espera que al menos el código fuente del proyecto este
bajo un control de versiones y probablemente no se tomen el proyecto
seriamente si no se utiliza este sistema con un mínimo de competencia.</para>

<!--
<para>The reason version control is so universal is that it helps with
virtually every aspect of running a project: inter-developer
communications, release management, bug management, code stability and
experimental development efforts, and attribution and authorization of
changes by particular developers.  The version control system provides
a central coordinating force among all of these areas.  The core of
version control is <firstterm>change management</firstterm>:
identifying each discrete change made to the project's files,
annotating each change with metadata like the change's date and
author, and then replaying these facts to whoever asks, in whatever
way they ask.  It is a communications mechanism where a change is the
basic unit of information.</para>
-->
<para>La razón por la cual el control de versiones es universal es porque
ayuda virtualmente en todos los aspectos al dirigir un proyecto: comunicación
entre los desarrolladores, manejo de los lanzamientos, administración de fallos,
estabilidad entre el código y los esfuerzos de desarrollo experimental y 
atribución y autorización en los cambios de los desarrolladores. El sistema
de control de versiones permite a una fuerza coordinadora central 
abarcar todas estas áreas. El núcleo del sistema es la<firstterm>
gestión de cambios</firstterm>: identificar cada cambio a los ficheros
del proyecto, anotar cada cambio con meta-data como la fecha y el autor
de la modificación y disponer esta información para quien sea y como sea.
Es un mecanismo de comunicación donde el cambio es la unidad básica de
información.</para>

<!--
<para>This section does not discuss all aspects of using a version
control system.  It's so all-encompassing that it must be addressed
topically throughout the book.  Here, we will concentrate on choosing
and setting up a version control system in a way that will foster
cooperative development down the road.</para>
-->
<para>Aun no hemos discutido todos los aspectos de utilizar un sistema
de control de versiones ya que es un tema tan extenso que será
introducido según el tópico a lo largo de este libro. Ahora, vamos a
concentrarnos en seleccionar y configurar un sistema de control de versiones
de forma que fomentemos un desarrollo cooperativo.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="vc-vocabulary">
<!--
<title>Version Control Vocabulary</title>
-->
<title>Vocabulario del Control de Versiones</title>

<!--
<para>This book cannot teach you how to use version control if you've
never used it before, but it would be impossible to discuss the
subject without a few key terms.  These terms are useful independently
of any particular version control system: they are the basic nouns and
verbs of networked collaboration, and will be used generically
throughout the rest of this book.  Even if there were no version
control systems in the world, the problem of change management would
remain, and these words give us a language for talking about that
problem concisely.</para>
-->
<para>En este libro no podemos enseñar como utilizar el control de
versiones si nunca antes lo ha utilizado, pero sería imposible continuar
sin conocer algunos términos clave. Estos son útiles independientemente
del sistema particular utilizado: son definiciones básicas y verbos sobre
la colaboración en red y serán utilizados a lo largo del libro. Incluso
si no existiera ningún sistema de control de versiones, el problema del
control de los cambios aun existiría y estas palabras nos dan un lenguaje
para hablar acerca de este problema consistentemente.

<!--
<para>If you're comfortably experienced with version control already,
you can probably skip this section.  If you're not sure, then read
through this section at least once.  Certain version control terms
have gradually changed in meaning since the early 2000s, and you may
occasionally find people using them in incompatible ways in the same
conversation.  Being able to detect that phenomenon early in a
discussion can often be helpful.</para>
-->

<variablelist>

 <varlistentry id="vc-vocabulary-commit">
  <term><firstterm>commit</firstterm></term>
<!--
  <listitem><para>To make a change to the project; more formally, to
  store a change in the version control database in such a way that it
  can be incorporated into future releases of the project.  "Commit"
  can be used as a verb or a noun.  For example: "I just committed a
  fix for the server crash bug people have been reporting on Mac OS X.
  Jay, could you please review the commit and check that I'm not
  misusing the allocator there?"</para></listitem>
-->
  <listitem><para>
	Realizar un cambio en el proyecto. Formalmente, almacenar
	un cambio en la base de datos del control de versiones de
	forma que pueda ser incorporado en lanzamientos futuros del
	proyecto. "Commit" puede ser utilizado como un verbo o como
	un sustantivo. Como un sustantivo, es esencialmente un
	sinónimo de "cambio". Por ejemplo: "He commited una reparación
	para un fallo reportado en Mac OS X que hacia que el servidor
	se colgara. Jóse ¿podrías por favor revisarlo y verificar que
	no estoy haciendo mal la asignación?"
  </para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-push">
<!--
  <term><firstterm>push</firstterm></term>
  <listitem><para>To publish a commit to a publicly online repository,
  from which others can incorporate it into their copy of the
  project's code.  When one says one has pushed a commit, the
  destination repository is usually implied.  Often it is the
  project's master repository, the one from which public releases are
  made, but not always.</para>
  <para>Note that in some version control systems (e.g., Subversion),
  commits are automatically and unavoidably pushed up to a
  predetermined central repository, while in others (e.g., Git,
  Mercurial) the developer chooses when and where to push commits.
  Because the former types privilege a particular central repository,
  they are known as "centralized" version control systems, while the
  latter are known as "decentralized".  In general, 
  decentralized systems are the modern trend, especially for open
  source projects, which benefit from the peer-to-peer relationship
  between developers' repositories.</para></listitem> 
-->
 </varlistentry>

 <varlistentry id="vc-vocabulary-pull">
  <!-- For link compatibility with the old varlistentry ID. -->
  <anchor id="vc-vocabulary-update" />
<!--
  <term><firstterm>pull</firstterm>&nbsp;<emphasis>or</emphasis>&nbsp;<firstterm>update</firstterm></term>
  <listitem><para>To pull others' changes (commits) into your local
  copy of the project.  When pulling changes from a project's mainline
  development branch (see <xref linkend="vc-vocabulary-branch"/>),
  people often say "update" instead of "pull", for example: "Hey, I
  noticed the indexing code is always dropping the last byte.  Is this
  a new bug?" "Yes, but it was fixed last week&mdash;try updating and
  it should go away."</para></listitem>
-->
  <listitem><para>
	Solicitar los cambios (commits) que han realizado
	otros en la copia local del proyecto, esto actualiza
	esta copia a la ultima versión. Es una operación muy
	común ya que la mayoría de los desarrolladores actualizan
	su código varias veces al día y así saben que están
	ejecutando casi lo mismo que los otros desarrolladores, así
	que si se descubre un fallo es muy posible que este aun
	no haya sido resuelto. Por ejemplo: "Hey, he notado
	que el código del índice está fallando en el último
	byte. ¿Es esto un nuevo fallo?" "Sí, pero fue resuelto
	la semana pasada&mdash;prueba actualizar para resolverlo."
 	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-commit-message">
  <!-- For link compatibility with the old varlistentry ID. -->
  <anchor id="vc-vocabulary-log-message" />
<!--
  <term><firstterm>commit&nbsp;message</firstterm>&nbsp;<emphasis>or</emphasis>&nbsp;<firstterm>log&nbsp;message</firstterm></term>
  <listitem><para>A bit of commentary attached to each commit,
  describing the nature and purpose of the commit (both terms are used
  about equally often; I'll use them interchangeably in this book).
  Log messages are among the most important documents in any project:
  they are the bridge between the detailed, highly technical meaning
  of each individual code changes and the more user-visible world of
  bugfixes, features and project progress.  Later in this section,
  we'll look at ways to distribute them to the appropriate audiences;
  also, <xref linkend="codifying-tradition"/><phrase
  output="printed"> in <xref linkend="communications"/></phrase>
  discusses ways to encourage contributors to write concise and useful
  commit messages.</para></listitem>
-->
  <term><firstterm>Mensaje de&nbsp;registro</firstterm></term>
  <listitem><para>
	Un pequeño comentario añadido a cada commit que describe
	el tipo y el propósito del commit. Los mensajes de
	registro forman parte de los documentos más importantes
	de cualquier proyecto ya que son un puente entre el
	lenguaje altamente técnico de los cambios individuales
	en el código y el lenguaje más orientado al usuario de
	características, resolución de fallos y progreso del
	proyecto. Más adelante vamos a ver la forma de distribuir
	estos mensajes a la audiencia apropiada y también
	<xref linkend="codifying-tradition"/><phrase output="printed">
	en <xref linkend="communications"/></phrase> discutimos
	como ENCOURAGE a los voluntarios para que escriban mensajes
	de registro útiles y concisos.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-repository">
<!--
  <term><firstterm>repository</firstterm></term> <listitem><para>A
  database in which changes are stored and from which they are
  published.  In centralized version control systems, there is a
  single, master repository, which stores all changes to the project,
  and each developer works with a kind of latest summary on her own
  machine.  In decentralized systems, each developer has her own
  repository, changes can be swapped back and forth between
  repositories arbitrarily, and the question of which repository is
  the "master" (that is, the one from which public releases are
  rolled) is defined purely by social convention, instead of by a
  combination of social convention and technical
  enforcement.</para></listitem>
-->
  <term><firstterm>repositorio</firstterm></term> <listitem><para>
	Una base de datos en la que los cambios son almacenados. Algunas
	versiones de sistemas de control de versiones son centralizados,
	es decir, existe un único repositorio maestro, el cual almacena
	todos los cambios en el proyecto. Otros sistemas son descentralizados,
	cada desarrollador tiene su propio repositorio y los cambios pueden
	ser intercambiados entre repositorios arbitrariamente. El sistema
	de control de versiones mantiene un registro de las dependencias
	entre estos cambios y cuando llega el momento de realizar un
	lanzamiento, un conjunto particular de cambios es aprobado
	para ese lanzamiento. La cuestión de cual sistema es mejor
	es otra de las guerras santas del desarrollo de software.
	Intentad no caer en la trampa de discutir sobre esto en las
	listas de correo del proyecto.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-checkout">
<!--
  <term><firstterm>checkout</firstterm></term>
  <listitem><para>When used in discussion, "checkout" usually means
  something like "clone", except that centralized systems don't really
  clone the full repository, they just obtain a <xref
  linkend="vc-vocabulary-working-copy">working copy</xref>.  When
  decentralized systems use the word "checkout", they also mean the
  process of obtaining working files from a repository, but since the
  repository is local in that case, the user experience is quite
  different because the network is not involved.</para>
  <para>In the centralized sense, a checkout produces a directory tree
  called a "working copy" (see below), from which changes may be
  sent back to the original repository.</para></listitem>
-->
  <term><firstterm>checkout</firstterm></term>
  <listitem><para>
	El proceso de obtener una copia del proyecto desde el repositorio.
	Por lo general, un checkout produce un árbol de directorios
	llamado "copia funcional" desde el cual los cambios serán
	enviados de vuelta al repositorio original. En algunas versiones
	descentralizadas de sistemas de control, cada copia funcional
	es en si mismo un repositorio y los cambios son empujados (o
	atraídos) a cualquier repositorio que este dispuesto a aceptarlos.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-working-copy">
  <anchor id="vc-vocabulary-working-files" />
<!--
  <term><firstterm>working copy</firstterm>&nbsp;<emphasis>or</emphasis>&nbsp;<firstterm>working files</firstterm></term>
  <listitem><para>A developer's private directory tree containing the
  project's source code files, and possibly its web pages or other
  documents, in a form that allows the developer to edit them.  A
  working copy also contains some version control metadata saying what
  repository it comes from, what branch it represents, and a few other
  things.  Typically, each developer has her own working copy, from
  which she edits, tests, commits, pulls, pushes,
  etc.</para>
  <para>In decentralized systems, working copies and repositories are
  usually colocated anyway, so the term "working copy" is less often
  used.  Developers instead tend to say "my clone" or "my copy" or
  sometimes "my fork".</para></listitem>
-->
  <term><firstterm>copia funcional</firstterm></term>
  <listitem><para>
	El árbol de directorios privado de cada desarrollador que
	que contiene el código fuente del proyecto y posiblemente
	las páginas web u otros documentos. Una copia funcional
	también contiene un pequeña cantidad de meta-data administrada
	por el sistema de control de versiones, informando a la copia
	funcional cual es repositorio central de procedencia, la
	revisión de los ficheros presentes, etc. Generalmente, cada
	desarrollador tiene su propia copia funciona en la cual
	realiza y prueba los cambios y desde la cual envía sus
	commits (cambios).</para></listitem>

 </varlistentry>

 <varlistentry id="vc-vocabulary-revision">
<!--
  <term><firstterm>revision</firstterm>,
        <firstterm>change</firstterm>,
        <firstterm>changeset</firstterm>,
        or (again) <emphasis>commit</emphasis></term>
-->
  <term><firstterm>revisión</firstterm>,
        <firstterm>cambio</firstterm>,
        <firstterm>conjunto de cambios</firstterm></term>
<!--
  <listitem><para>A "revision" is a precisely specified incarnation of
  the project at a point in time, or of a particular file or directory
  in the project.  These days, most systems also use "revision",
  "change", "changeset", or "commit" to refer to a set of changes
  committed together as one conceptual unit, if multiple files were
  involved, though colloquially most people would refer to changeset
  12's effect on file F as "revision 12 of F".</para>
-->
  <listitem><para>
	Una revisión es usualmente una encarnación específica de un
	fichero o directorio en particular. Por ejemplo, si el proyecto
	se inicia en la revisión 6 del fichero F y alguien envía un
	cambio al fichero F, esto produce la revisión 7 de F. Algunos
	sistemas también utilizan revisión (revision), cambio (change)
	o conjunto de cambios (changeset) para referirse a un conjunto
	de cambios enviados juntos como una unidad conceptual.</para>

<!--
  <para>These terms occasionally have distinct technical meanings in
  different version control systems, but the general idea is always
  the same: they give a way to speak precisely about exact points in
  time in the history of a file or a set of files (say, immediately
  before and after a bug is fixed).  For example: "Oh yes, she fixed
  that in revision 10" or "She fixed that in commit fa458b1fac".</para>
-->
	<para>Estos conceptos pueden tener distintos significados técnicos
	en cada sistema de control de versiones, pero en general, la idea es
	siempre la misma: dar un sistema para comunicar de manera precisa la
	historia de cambios en un fichero o conjunto de ficheros (inmediatamente
	antes y después de que se ha corregido un fallo). Por ejemplo: "Eso
	se ha resuelto en la revisión 10" o "Se ha corregido eso en la revisión
	10 del fichero foo.c."</para>

<!--
  <para>When one talks about a file or collection of files without
  specifying a particular revision, it is generally assumed that one
  means the most recent revision(s) available.</para></listitem>
-->
	<para>Cuando se habla sobre ficheros o una colección de ficheros sin
	especificar una revisión en particular, por lo general se asume que
	nos referimos a la revisión disponible más reciente.</para></listitem>
</varlistentry>

  <sidebar id="version-vs-revision">
<!--
  <title>"Version" Versus "Revision"</title>
-->
  <title>"Versión" Versus "Revisión"</title>

<!--
  <para>The word <firstterm>version</firstterm> is sometimes used as a
  synonym for "revision", but I will not use it that way in this
  book, because it is too easily confused with "version" in the sense
  of a version of a piece of software&mdash;that is, the release or
  edition number, as in "Version 1.0".  However, since the phrase
  "version control" is already standard, I will continue to use it as
  a synonym for "revision control" and "change control".  Sorry.  One
  of open source's most endearing characteristics is that it has two
  words for everything, and one word for every two things.</para>
-->
	<para>El termino <firstterm>versión</firstterm> es a veces utilizado
	como un sinónimo para "revisión", pero aquí no voy a utilizarla de esta
	forma, ya que se puede confundir fácilmente con "versión" en el sentido
	de una versión de un programa&mdash;así que, el número de lanzamiento
	o edición como en "Versión 1.0". Y aunque la frase "control de versiones"
	es un estándar, continuare utilizándolo como sinónimo para "control
	de revisiones" y para "control de cambios".</para>
  </sidebar>

 <varlistentry id="vc-vocabulary-diff">
<!--
  <term><firstterm>diff</firstterm></term>
  <listitem><para>A textual representation of a change.  A diff shows
  which lines were changed and how, plus a few lines of surrounding
  context on either side.  A developer who is already familiar with
  some code can usually read a diff against that code and understand
  what the change did, and often even spot bugs.</para></listitem>
-->
  <term><firstterm>diff</firstterm></term>
  <listitem><para>
	Una representación contextual de un cambio. Un diff muestra las lineas
	que han sido modificadas, como y además, algunas lineas contextuales
	rodeándolas a cada lado. Un desarrollador familiarizado con el código
	puede, con leer un diff de ese código, entender lo que hace el cambio
	e incluso detectar fallos.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-tag">
<!--
  <term><firstterm>tag</firstterm>&nbsp;<emphasis>or</emphasis>&nbsp;<firstterm>snapshot</firstterm></term>
  <listitem><para>A label for a particular state of the project at a
  point in time.  Tags are generally used to mark interesting
  snapshots of the project.  For example, a tag is usually made for
  each public release, so that one can obtain, directly from the
  version control system, the exact set of files/revisions comprising
  that release.  Tag names are often things like
  <literal>Release_1_0</literal>, <literal>Delivery_20130630</literal>,
  etc.</para></listitem>
-->
  <term><firstterm>etiqueta (tag)</firstterm></term>
  <listitem><para>
	Una etiqueta para una colección particular de ficheros en una revisión
	específica. Los tags son utilizados para preservar capturas interesantes
	del proyecto. Por ejemplo, un tag es hecho para cada lanzamiento público,
	de forma que cada persona pueda obtener, directamente desde el sistema
	de control de versiones, el conjunto exacto de ficheros/revisiones
	que componen el lanzamiento. Algunos tags comunes son como 
	<literal>Release_1_0</literal>, <literal>Delivery_00456</literal>,
	etc.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-branch">
<!--
  <term><firstterm>branch</firstterm></term>
  <listitem><para>A copy of the project, under version control but
  isolated so that changes made to the branch don't affect other
  branches of the project, and vice versa, except when changes are
  deliberately "merged" from one branch to another (see below).
  Branches are also known as "lines of development".  Even when a
  project has no explicit branches, development is still considered
  to be happening on the "main branch", also known as the "main line"
  or "<firstterm>trunk</firstterm>" or
  "<firstterm>master</firstterm>".</para>
-->
  <term><firstterm>rama (branch)</firstterm></term>
  <listitem><para>
	Es una copia del proyecto, bajo el control de versiones, pero aislado,
	de forma que los cambios realizados en esta rama no afecten al resto
	del proyecto y vice versa, excepto cuando los cambios sean
	deliberadamente "unidos" de un lado al otro. Las ramas también son
	conocidas como "lineas de desarrollo". Incluso cuando un proyecto
	no tiene ramas específicas se considera que el desarrollo se esta
	produciendo en la rama principal, también conocida como "línea
	primaria" o "<firstterm>trunk</firstterm>".</para>

<!--
  <para>Branches offer a way to keep different lines of development
  from interfering with each other.  For example, a branch can be used
  for experimental development that would be too destabilizing for the
  main trunk.  Or conversely, a branch can be used as a place to
  stabilize a new release.  During the release process, regular
  development would continue uninterrupted in the main branch of the
  repository; meanwhile, on the release branch, no changes are allowed
  except those approved by the release managers.  This way, making a
  release needn't interfere with ongoing development work.  See <xref
  linkend="branches"/><phrase output="printed"> later in this
  chapter</phrase> for a more detailed discussion of
  branching.</para></listitem>
-->
	<para>Las ramas o branches, permiten aislar diferentes lineas de
	desarrollo de si mismas. Por ejemplo, una rama puede ser utilizada
	para un desarrollo experimental que sería demasiado inestable para
	la rama principal. O al contrario, una rama puede ser utilizada
	como sitio para estabilizar una versión para lanzamiento. Durante
	el proceso de lanzamiento, el desarrollo regular se mantendría ininterrumpida
	en la rama principal. Mientras tanto, en la rama de lanzamiento,
	ningún cambio es aceptado excepto aquellos aprobados por el
	responsable del lanzamiento. De esta manera, realizar un lanzamiento
	no tiene porque interferir con el trabajo de desarrollo que se está
	realizando. Para más información <xref linkend="branches"/><phrase output="printed">
	más adelante en el capítulo</phrase> para una discusión más
	detallada sobre las ramas.</para></listitem>
</varlistentry>

 <varlistentry id="vc-vocabulary-merge">
  <anchor id="vc-vocabulary-port" />
<!--
  <term><firstterm>merge</firstterm>&nbsp;<emphasis>or</emphasis>&nbsp;<firstterm>port</firstterm></term>
  <listitem><para>To move a change from one branch to another.  This
  includes merging from the main trunk to some other branch, or vice
  versa.  In fact, those are the most common kinds of merges; it is
  less common to port a change between two non-trunk branches.  See
  <xref linkend="vc-singularity"/> for more on change porting.</para>
-->
  <term><firstterm>merge</firstterm></term>
  <listitem><para>
	Mover un cambio de una rama a otra, lo que incluye unir desde
	la rama principal a otra rama o vice versa. De hecho, estos
	son las uniones más comunes y es rara la ocasión en la que
	esto se hace entre dos ramas no principales. Para más
	información sobre los merge <xref linkend="vc-singularity"/>.
	</para>
	
<!--
  <para>"Merge" has a second, related meaning: it is what some version
  control systems do when they see that two people have changed the
  same file but in non-overlapping ways.  Since the two changes do not
  interfere with each other, when one of the people updates their copy
  of the file (already containing their own changes), the other
  person's changes will be automatically merged in.  This is very
  common, especially on projects where multiple people are hacking on
  the same code.  When two different changes <emphasis>do</emphasis>
  overlap, the result is a "conflict"; see below.</para>
  </listitem>
-->
	<para>"Merge" tiene otro significado: es lo que hace el sistema de control
	de versiones cuando se encuentra con que dos personas han realizado
	cambios en un mismo fichero sin relación alguna. Ya que estos cambios
	no interfieren entre ellos, cuando alguna de estas personas actualizan
	su copia del fichero (el cual ya contiene los cambios) los cambios
	de la otra persona serán unidos automáticamente. Esto sucede muy a
	menudo, especialmente en proyectos con múltiples personas realizando
	cambios en el mismo código. Cuando dos cambios diferentes están
	relacionados, el resultado es un "conflicto".</para>
  </listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-conflict">
<!--
  <term><firstterm>conflict</firstterm></term>
  <listitem><para>What happens when two people try to make different
  changes to the same place in the code.  All version control systems
  automatically detect conflicts, and notify at least one of the
  humans involved that their changes conflict with someone else's.  It
  is then up to that human to <firstterm>resolve</firstterm> the
  conflict, and to communicate that resolution to the version control
  system.</para></listitem>
-->
  <term><firstterm>conflicto</firstterm></term>
  <listitem><para>
	Sucede cuando dos o más personas intentan realizar diferentes
	cambios en la misma porción de código. Todos los sistemas
	de control de versiones detectan estos conflictos automáticamente
	y notifican a al menos uno de los humanos involucrados de que
	sus cambios entran en conflicto con los de alguien más. Es
	entonces tarea de esta personas <firstterm>resolver</firstterm>
	el conflicto y comunicar esa resolución al sistema de control
	de versiones.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-lock">
<!--
  <term><firstterm>lock</firstterm></term>
  <listitem><para>A way to declare an exclusive intent to change a
  particular file or directory.  For example, "I can't commit any
  changes to the web pages right now.  It seems Alfred has them all
  locked while he fixes their background images."  Not all version
  control systems even offer the ability to lock, and of those that
  do, not all require the locking feature to be used.  This is because
  parallel, simultaneous development is the norm, and locking people
  out of files is (usually) contrary to this ideal.</para>
-->
  <term><firstterm>bloqueo (lock)</firstterm></term>
  <listitem><para>
	Declaración de un intento exclusivo para cambiar un fichero
	o directorio en particular. Por ejemplo, "No puedo enviar
	cambios a las paginas web ahora mismo, ya que parece que
	Alfredo las tiene bloqueadas mientras arregla sus
	imágenes de fondo." No todos los sistemas de control de
	versiones ofrecen la posibilidad del bloqueo y aquellos
	que sí lo permiten, no es necesario que se utilice. Esto
	es porque el desarrollo paralelo y simultaneo es la norma
	y bloquear a la gente para que no puedan modificar los
	ficheros es contrario a la idea del sistema.</para>

<!--
  <para>Version control systems that require locking to make commits
  are said to use the <firstterm>lock-modify-unlock</firstterm> model.
  Those that do not are said to use the
  <firstterm>copy-modify-merge</firstterm> model.  An excellent
  in-depth explanation and comparison of the two models may be found
  at <ulink
  url="http://svnbook.red-bean.com/nightly/en/svn.basic.version-control-basics.html#svn.basic.vsn-models"
  >svnbook.red-bean.com/nightly/en/svn.basic.version-control-basics.html#svn.basic.vsn-models</ulink>.  In
  general, the copy-modify-merge model is better for open source
  development, and all the version control systems discussed in this
  book support that model.</para></listitem>
-->
<para>El modelo del sistema de control de versiones que requiere el bloqueo
de ficheros suele ser llamado <firstterm>bloqueo-modificación-desbloqueo</firstterm>
y el modelo que no requiere del bloqueo es llamado 
<firstterm>copia-modificación-unión</firstterm>. Una excelente explicación
en profundidad y comparaciones puede ser encontrada en
<ulink url="http://svnbook.red-bean.com/svnbook-1.0/ch02s02.html"/>. En
general, el modelo de copia-modificación-unión es el mejor
para el desarrollo open source y todos los sistemas de control
de versiones discutidos en este libro soportan este modelo.
</para></listitem>
 </varlistentry>

</variablelist>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-choosing">
<!--
<title>Choosing a Version Control System</title>
-->
<title>Escoger un sistema de control de versiones</title>

<!--
<para>If you don't already have a strong opinion about which version
control system your project should use, then choose Git (<ulink
url="http://git-scm.com/" >git-scm.com</ulink>), and host your
project's repositories at <ulink url="http://github.com/"
>GitHub.com</ulink>, which offers unlimited free hosting for open
source projects.</para>
-->

<!--
<para>Git is by now the <foreignphrase>de facto</foreignphrase>
standard in the open source world, as is hosting one's repositories at
GitHub.  Because so many developers are already comfortable with that
combination, choosing it sends the signal that your project is ready
for participants.  But Git-at-GitHub is not the only viable
combination.  Two other reasonable choices of version control system
are <ulink url="http://mercurial.selenic.com/" >Mercurial</ulink> and
<ulink url="http://subversion.apache.org/" >Subversion</ulink>.
Mercurial and Git are both decentralized systems, whereas Subversion
is centralized.  All three are offered at many different free hosting
services; some services even support more than one of them (though
GitHub only supports Git, as its name suggests).  While some projects
host their repositories on their own servers, most just put their
repositories on one of the free hosting services, as described in
<xref linkend="canned-hosting-sites"/>.</para>
-->

<!--
<para>There isn't space here for an in-depth exploration of why you
might choose something other than Git.  If you have a reason to do so,
then you already know what that reason is.  If you don't, then just
use Git (and probably on GitHub).  If you find yourself using
something other than Git, Mercurial, or Subversion, ask yourself
why&nbsp;&mdash;&nbsp;because whatever that other version control
system is, most other developers won't be familiar with it, and it
likely has a smaller and less stable community of support around it
than the big three do.</para>
-->

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-using">
<!--
<title>Using the Version Control System</title>
-->
<title>Utilizando el sistema de control de versiones</title>

<!--
<para>The recommendations in this section are not targeted toward a
particular version control system, and should be implementable in any
of them.  Consult your specific system's documentation for
details.</para>
-->
<para>Las recomendaciones realizadas en esta sección no están
enfocadas hacia un sistema de control de versiones en particular
y debería ser sencillo implementarlas en cualquiera. La documentación
específica del sistema debe ofrecer los detalles necesarios.</para>

<sect3 id="version-everything">
<!--
<title>Version everything</title>
-->
<title>Versiones de todo</title>

<!--
<para>Keep not only your project's source code under version control,
but also its web pages, documentation, FAQ, design notes, and anything
else that people might want to edit.  Keep them right with the
source code, in the same repository tree.  Any piece of information
worth writing down is worth versioning&mdash;that is, any piece of
information that could change.  Things that don't change should be
archived, not versioned.  For example, an email, once posted, does not
change; therefore, versioning it wouldn't make sense (unless it becomes
part of some larger, evolving document).</para>
-->
<para>No solo hay que mantener el código del proyecto bajo el control
de versiones también las paginas web, documentación, FAQ, notas de 
diseño y cualquier cosa que pueda ser necesario editar. Todo esto
hay que mantenerlo cerca del código, en el mismo árbol que el
repositorio. Se deben mantener versiones de cualquier pieza de
información que pueda cambiar y archivar la que no cambie. 
Por ejemplo, un correo electrónico,
una vez enviado, no cambia, por lo tanto, mantener versiones de este
no tiene sentido (a menos que se convierta en una parte importante
de la documentación).</para>

<!--
<para>The reason to version everything together in one place is so
that people only have to learn one mechanism for submitting changes.
Often a contributor will start out making edits to the web pages or
documentation, and move to small code contributions later, for
example.  When the project uses the same system for all kinds of
submissions, people only have to learn the ropes once.  Versioning
everything together also means that new features can be committed
together with their documentation updates, that branching the code
will branch the documentation too, etc.</para>
-->
<para>La razón de mantener versiones de todo en un mismo sitio, es
para que la gente sólo tenga que aprender un sistema para realizar
cambios. A menudo, un voluntario se iniciara modificando algunas
paginas web o partes de la documentación, para luego pasar a realizar
pequeñas contribuciones al código, por ejemplo. Cuando el proyecto
utiliza el mismo sistema para todo tipo de cambios, las personas sólo
tendrán que aprender THE ROPES una vez. Mantener las versiones juntas
significa que nuevas características pueden ser añadidas junto
a la actualización de la documentación, y que al crear ramas del
código, se crearan ramas de la documentación, etc.</para>

<!--
<para>Don't keep <firstterm>generated files</firstterm> under version
control.  They are not truly editable data, since they are produced
programmatically from other files.  For example, some build systems
create a file named <filename>configure</filename> based on a template
in <filename>configure.in</filename>.  To make a change to the
<filename>configure</filename>, one would edit
<filename>configure.in</filename> and then regenerate; thus, only the
template <filename>configure.in</filename> is an "editable file."
Just version the templates&mdash;if you version the generated files as
well, people will inevitably forget to regenerate them when they commit a
change to a template, and the resulting inconsistencies will cause no
end of confusion.</para>
-->
<para>No hace falta mantener los <firstterm>ficheros generados</firstterm>
bajo el sistema de control de versiones ya que no son datos editables
generados por otros programas. Por ejemplo, algunos sistemas de
compilado generan los ficheros <filename>configure</filename> basandose
en una plantilla <filename>configure.in</filename>. Para realizar
cambios al fichero <filename>configure</filename> bastaría con
modificar <filename>configure.in</filename> y volver a generarlo.
Entonces, sólo el fichero <filename>configure.in</filename> es
un fichero editable. Sólo es necesario mantener versiones de las
plantillas&mdash;si se hace con los ficheros generados, la gente
se olvidará de volver a generarlos cuando realicen algún cambio
en las plantillas y las resultantes inconsistencias crearan una
mayor confusión. <footnote><para>Alexey Mathotkin tiene una
opinión diferente sobre el tema de controlar las versiones de los
ficheros <filename>configure</filename> en un artículo llamado
"<citetitle>configure.in and version control</citetitle>" en
<ulink url="http://versioncontrolblog.com/2007/01/08/configurein-and-version-control/"/>.</para></footnote></para>

<!--
<para>There are technical exceptions to the rule that all editable
data should be kept in the same version control system as the code.
For example, a project's bug tracker and its wiki hold plenty of
editable data, but usually do not store that data in the main version
control system<footnote><para>There are development environments that
integrate everything into one unified version control world; see <xref
linkend="vc-veracity"/> for an example.</para></footnote>.  However,
they should still have versioning systems of their own, e.g., the
comment history in a bug ticket, and the ability to browse past
revisions and view differences between them in a wiki.</para>
-->
<para>La regla de que todos los datos editables deben ser mantenidos
bajo el control de versiones tiene una excepción desafortunada: el
gestor de fallos. La base de datos de fallos almacena una gran cantidad
de datos editables pero generalmente, por razones técnicas, no se puede
mantener bajo el control de versiones principal. (Algunos gestores
tienen características primitivas de control de versiones, pero
independiente de repositorio principal del proyecto.)</para>

</sect3>

<sect3 id="vc-browsing">
<!--
<title>Browsability</title>
-->
<title>Navegabilidad</title>

<!--
<para>The project's repository should be browsable on the Web.  This
means not only the ability to see the latest revisions of the
project's files, but to go back in time and look at earlier revisions,
view the differences between revisions, read log messages for selected
changes, etc.</para>
-->
<para>El repositorio del proyecto debe ser accesible desde Internet.
Esto no solo significa la habilidad de visualizar la ultima revisión
de los ficheros del proyecto, pero permitir volver atrás en el tiempo
y ver en revisiones anteriores, mirar las diferencias entre revisiones,
leer los mensajes de registro para cambios específicos, etc.</para>

<!--
<para>Browsability is important because it is a lightweight portal to
project data.  If the repository cannot be viewed through a web
browser, then someone wanting to inspect a particular file (say, to
see if a certain bugfix had made it into the code) would first have to
install version control client software locally, which could turn
their simple query from a two-minute task into a half-hour or longer
task.</para>
-->
<para>La navegabilidad es importante porque es un ligero portal a los
datos del proyecto. Si el repositorio no es accesible desde un navegador
web entonces alguien que desea inspeccionar un fichero en particular (por
ejemplo, para mirar si una mejora ha sido incluida en el código) tendrá
que instalar el mismo programa utilizado por el sistema de control
de versiones, lo cual convierte una simple consulta de dos minutos en
una tarea de medio hora o más.</para>

<!--
<para>Browsability also implies canonical URLs for viewing a particular
change (i.e., a commit), and for viewing the latest revision at any given
time without specifying its commit identifier.  This can be very
useful in technical discussions or when
pointing people to documentation.  For example, instead of saying "For
bug management guidelines, see the community-guide/index.html file
in your working copy," one can say "For bug management guidelines,
see
<emphasis>http://subversion.apache.org/docs/community-guide/</emphasis>,"
giving a URL that always points to the latest revision of the
<filename>community-guides/index.html</filename> file.  The URL is
better because it is completely unambiguous, and avoids the question
of whether the addressee has an up-to-date working copy.</para>
-->
<para>También implica URLs CANONICAL para visualizar revisiones
específicas de un fichero y para la ultima revisión en cualquier
momento. Esto puede ser muy útil durante discusiones técnicas o para
indicar alguna documentación a la gente. Por ejemplo, en lugar de
decir "Para ayudas sobre como encontrar fallos en el servidor,
mirad el fichero www/hacking.html en vuestra copia funcional" se puede
decir "Para ayudas sobre como encontrar fallos en el servidor,
mirad <emphasis>http://subversion.apache.org/docs/community-guide/</emphasis>,"
dando una URL que siempre lleva a la ultima revisión del fichero
<filename>hacking.html</filename>. La URL es mejor porque no es nada
ambigua y evita la cuestión de si existe una copia funcional
actualizada.</para>

<!--
<para>Some version control systems come with built-in
repository-browsing mechanisms, and in any case most hosting sites
offer a good web interface.  But if you need to install a third-party
tool for repository browsing, there are many out there.  Three that
support Git are <firstterm>GitLab</firstterm> (<ulink
url="http://gitlab.org/" >gitlab.org</ulink>),
<firstterm>GitWeb</firstterm> (<ulink
url="https://git.wiki.kernel.org/index.php/Gitweb"
>git.wiki.kernel.org/index.php/Gitweb</ulink>), and
<firstterm>GitList</firstterm> (<ulink url="http://gitlist.org/"
>gitlist.org</ulink>).  For Subversion, there is
<firstterm>ViewVC</firstterm> (<ulink url="http://viewvc.org/"
>viewvc.org</ulink>).  A web search will turn up plenty of others
besides these.</para>
-->
<para>Algunos sistemas de control de versiones incluyen un mecanismo
que permite la navegación del repositorio, mientras que otros
dependen de herramientas de terceros. Tres de estas herramientas son
<firstterm>ViewCVS</firstterm> (<ulink
url="http://viewcvs.sourceforge.net/"/>),
<firstterm>CVSWeb</firstterm> (<ulink
url="http://www.freebsd.org/projects/cvsweb.html"/>), and
<firstterm>WebSVN</firstterm> (<ulink
url="http://websvn.tigris.org/"/>).
La primera trabaja muy bien con CVS y con Subversion, la segunda
sólo con CVS y la tercera sólo con Subversion.</para>

</sect3>

<sect3 id="branches">
<!--
<title>Use branches to avoid bottlenecks</title>
-->
<title>Las ramas para evitar cuellos de botella</title>

<!--
<para>Non-expert version control users are sometimes a bit afraid of
branching and merging.  If you are among those people, resolve right
now to conquer any fears you may have and take the time to learn how
to do branching and merging.  They are not difficult operations, once
you get used to them, and they become increasingly important as a
project acquires more developers.</para>
-->
<para>Los usuarios inexpertos del control de versiones pueden sentirse
temerosos de crear ramas y uniones. Esto sea probablemente un efecto
colateral de la popularidad de CVS: su interfaz de ramas y uniones puede
ser poco intuitivo, así que muchas personas han aprendido a evitar
estas operaciones por completo.</para>

<para>Si se encuentra entre estas personas, decidase ahora mismo a
conquistar cualquier miedo que pueda tener y tómese el tiempo de aprender
cómo funcionan las ramas y las uniones. No son operaciones muy complicadas
una vez que se acostumbra a ellas y se vuelven muy importantes mientras
el proyecto adquiere más desarrolladores.</para>

<!--
<para>Branches are valuable because they turn a scarce
resource&mdash;working room in the project's code&mdash;into an
abundant one.  Normally, all developers work together in the same
sandbox, constructing the same castle.  When someone wants to add a
new drawbridge, but can't convince everyone else that it would be an
improvement, branching makes it possible for her to make a copy of the
castle, take it off to an isolated corner, and try out the new
drawbridge design.  If the effort succeeds, she can invite the
other developers to examine the result (in GitHub-speak, this
invitation is known as a "pull request"&nbsp;&mdash;&nbsp;see <xref
linkend="pull-requests"/>).  If everyone agrees that the
result is good, she or someone else can tell the version control
system to move ("merge") the drawbridge from the branch version of the
castle over to the main version, sometimes called the
<firstterm>master branch</firstterm>.</para>
-->
<para>Las ramas son muy importantes porque convierten un recurso
escaso&mdash;espacio de trabajo en el código del proyecto&mdash;en uno
abundante. Normalmente, todos los desarrolladores trabajan juntos
en la misma caja de arena, construyendo el mismo castillo. Cuando alguien
desea añadir un nuevo puente levadizo, pero no puede convencer a los
demás de que sería una mejora, entonces las ramas hacen posible que vaya
a una esquina aislada donde probar su puente. Si el esfuerzo tiene éxito,
puede invitar a otros desarrolladores para que evalúen el resultado. Si
todos están de acuerdo en que el resultado es bueno, pueden hacer que
el sistema de control de versiones mueva ("merge") el puente levadizo
de la rama del castillo a la rama principal del castillo.</para>

<!--
<para>It's easy to see how this ability helps collaborative
development.  People need the freedom to try new things without
feeling like they're interfering with others' work.  Equally
importantly, there are times when code needs to be isolated from the
usual development churn, in order to get a bug fixed or a release
stabilized (see <xref linkend="stabilizing-a-release"/> and
<xref linkend="release-lines"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>) without worrying
about tracking a moving target.  At the same time, people need to be
able to review and comment on experimental work, whether it's
happening in the master branch or somewhere else.  Treating branches
as first-class, publishable objects makes all this possible.</para>
-->
<para>Es fácil ver como esta habilidad ayuda al desarrollo colaborativo,
ya que la gente necesita de cierta libertad para probar cosas nuevas
sin sentir que están interfiriendo con el trabajo de otros. Igual
de importante es cuando el código debe ser aislado del CHURN usual
de desarrollo de manera que un fallo sea reparado o un lanzamiento
sea estabilizado (más en <xref linkend="stabilizing-a-release"/> y
en <xref linkend="release-lines"/><phrase output="printed"> en
<xref linkend="development-cycle"/></phrase>) sin la preocupación
de seguir un blanco en movimiento.</para>

<!--
<para>Use branches liberally, and encourage others to use them.  But
also make sure that a given branch is only active for as long as
needed.  Every active branch is a slight drain on the community's
attention.  Even those who are not working in a branch still maintain
a peripheral awareness of what's going on in it.  Such awareness is
desirable, of course, and commit notices should be sent out for branch
commits just as for any other commit.  But branches should not become
a mechanism for dividing the development community.  With rare
exceptions, the eventual goal of most branches should be to merge
their changes back into the main line and disappear.</para>
-->
<para>Hay que utilizar las ramas libremente y fomentar su uso entre
otros. Pero también hay que asegurarse de que una rama en particular
se mantenga activa exactamente durante el tiempo que sea necesaria.
Incluso quienes no trabajan en la rama principal mantienen una visión
periférica de lo que está sucediendo en ésta. Esta visión es deseable,
por supuesto, y los correos con cambios deben salir de estas ramas
como de cualquier otra. Pero las ramas no deben convertirse en un
mecanismo que divida a la comunidad de desarrolladores. Con raras
excepciones, el objetivo eventual de la mayoría de las ramas debe
de ser su unión a la rama principal y desaparecer.</para>

</sect3>

<sect3 id="vc-singularity">
<!--
<title>Singularity of information</title>
-->
<title>Singularidad de la información</title>

<!--
<para>Merging has an important corollary: never commit the same change
twice.  That is, a given change should enter the version control
system exactly once.  The revision (or set of revisions) in which the
change entered is its unique identifier from then on.  If it needs to
be applied to branches other than the one on which it entered, then it
should be merged from its original entry point to those other
destinations&mdash;as opposed to committing a textually identical
change, which would have the same effect in the code, but would make
accurate bookkeeping and release management much harder.</para>
-->
<para>Las uniones tienen un corolario importante: nunca se debe enviar
el mismo cambio dos veces, es decir, un cambio dado sólo debe ser
introducido al sistema de control de versiones solo una vez. La revisión
(o conjunto de revisiones) en la que el cambio es introducido es su
identificador único desde ese momento. Si debe ser aplicado a otras
ramas aparte de la cual en la que ha sido hecho, entonces deberá ser unido
desde su punto de entrada original a sus otros destinos &mdash;al
contrario de enviar cambios textualmente idénticos, que tendrían el
mismo efecto en el código, pero harían del mantenimiento eficaz y de
la gestión de lanzamientos una tarea imposible.</para>

<!--
<para>The practical effects of this advice differ from one version
control system to another.  In some systems, merges are special
events, fundamentally distinct from commits, and carry their own
metadata with them.  In others, the results of merges are committed
the same way other changes are committed, so the primary means of
distinguishing a "merge commit" from a "new change commit" is in the
log message.  In a merge's log message, don't repeat the log message
of the original change.  Instead, just indicate that this is a merge,
and give the identifying revision of the original change, with at most
a one-sentence summary of its effect.  If someone wants to see the
full log message, she should consult the original revision.</para>
-->
<para>Los efectos prácticos de este consejo difieren entre sistemas
de control de versiones. En algunos sistemas, las uniones son eventos
especiales, fundamentalmente distintos de los commits y acarrean sus
meta-datos propios. En otros, el resultado de las uniones son enviadas
de la misma manera que los cambios son enviados así que la mejor manera
de distinguir una unión de un nuevo cambio es leyendo los mensajes de
registro. El mensaje de registro de una unión no repite el mensaje
de registro del cambio original, en cambio, sólo indica que es una
unión y da la identificación de la revisión del cambio original, con
como mucho una línea de sumario del sus efectos. Si alguien desea ver
el mensaje de registro completo, deberá consultar la revisión original.</para>

<!--
<para>One reason it's important to avoid repeating the log message is
that, in some systems, log messages are sometimes edited after they've
been committed.  If a change's log message were repeated at each merge
destination, then even if someone edited the original message, she'd
still leave all the repeats uncorrected&mdash;which would only cause
confusion down the road.  Another reason is that non-duplication makes
it easier to be sure when one has tracked down the original source of
a change.  When you're looking at a complete log message that doesn't
refer to a some other merge source, you can know that it must be the
original change, and handle it accordingly.</para>
-->
<para>La razón por la cual es importante evitar la repetición de los
mensajes de registro es que estos pueden ser editados después de que
se hayan enviado. Si un mensaje de registro es repetido en el destino
de cada unión, entonces incluso si alguien edita el mensaje original,
deja todos los otros mensajes sin corregir&mdash;lo cual sólo puede
causar confusión a largo plazo.</para>

<!--
<para>The same principle applies to reverting a change.  If a change
is withdrawn from the code, then the log message for the reversion
should merely state that some specific revision(s) is being reverted,
<emphasis>not</emphasis> describe the actual code change that results
from the reversion, since the semantics of the change can be derived
by reading the original log message and change.  Of course, the
reversion's log message should also state the reason why the change is
being reverted, but it should not duplicate anything from the original
change's log message.  If possible, go back and edit the original
change's log message to point out that it was reverted.</para>
-->
<para>El mismo principio se aplica al retirar un cambio. Si esto llegara
a suceder, entonces el mensaje de registro para la retirada solo debe
indicar que una revisión en particular está siendo retirada, 
no debe describir el cambio en el código resultante, pues la semántica
del cambio se puede intuir al leer el mensaje de registro original del
cambio. Por supuesto, el mensaje de registro del retiro también debe
indicar la razón por la cual ese cambio ha sido retirado, pero no debe
duplicar nada del mensaje de registro del cambio original. Si es posible,
hay que volver y editar el mensaje de registro original para señalar
que ha sido retirado.</para>

<!--
<para>All of the above implies that you should use a consistent syntax
for referring to changes.  This is helpful not only in log messages,
but in emails, the bug tracker, and elsewhere.  In Git and Mercurial,
the syntax is usually "commit bb2377" (where the commit hash code on
the right is long enough to be unique in the relevant context); in
Subversion, revision numbers are linearly incremented integers and the
standard syntax for, say, revision 1729 is "r1729".  In other systems,
there is usually a standard syntax for expressing the changeset name.
Whatever the appropriate syntax is for your system, encourage people
to use it when referring to changes.  Consistent expression of change
names makes project bookkeeping much easier (as we will see in <xref
linkend="communications"/> and <xref linkend="development-cycle"/>),
and since a lot of the bookkeeping may be done by volunteers, it
needs to be as easy as possible.</para>
-->
<para>Todo lo anterior implica que se debe utilizar una sintaxis 
consistente al referirnos a las revisiones. Esto es de gran ayuda
no sólo en los mensajes de registro, sino en los correos electrónicos,
en el gestor de fallos y en todas partes. Si se esta utilizando
CVS, recomiendo "<literal>directorio/al/fichero/del/proyecto/rama:REV</literal>",
donde REV es un número de revisión en CVS como "1.76". Si se esta
utilizando Subversion, la sintaxis estándar para la revisión
1729 es "r1729" (el directorio de los ficheros no es necesario
porque Subversion utiliza números globales para las revisiones). En
otros sistemas, existe por lo general una sintaxis estándar para
expresar el nombre del conjunto de cambios. Cualquiera que sea
la sintaxis apropiada para el sistema utilizado, hay que animar
a la gente a que lo utilicen al referirse a algún cambio. El
uso consistente en el nombre de los cambios permiten que el
mantenimiento del proyecto sea mucho más sencillo (como ya
veremos en <xref linkend="communications"/> y en 
<xref linkend="development-cycle"/>), y dado que mucho de este
mantenimiento será realizado por voluntarios, debe ser lo más
sencillo posible.</para>

<!--
<para>See also
<xref
linkend="releases-and-daily-development"/><phrase
output="printed"> in
<xref linkend="development-cycle"/></phrase>.</para>
-->
<para>Más información en
<xref
linkend="releases-and-daily-development"/><phrase
output="printed"> 
<xref linkend="development-cycle"/></phrase>.</para>

</sect3>

<sect3 id="vc-authz">
<!--
<title>Authorization</title>
-->
<title>Autorizaciones</title>

<!--
<para>Many version control systems offer a feature whereby certain
people can be allowed or disallowed from committing in specific
sub-areas of the master repository.  Following the principle that when
handed a hammer, people start looking around for nails, many projects use
this feature with abandon, carefully granting people access to just
those areas where they have been approved to commit, and making sure
they can't commit anywhere else.  (See
<xref linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> for how projects
decide who can put changes where.)</para>
-->
<para>Muchos de los sistemas de control de versiones ofrecen la posibilidad
por la cual a ciertas personas se les permite o no, realizar cambios
en áreas específicas del repositorio. Siguiendo el principio de que
cuando a las personas se les entrega un martillo empiezan a buscar
clavos para golpear, muchos proyectos utilizan esta característica
con ABANDON, permitiendo cuidadosamente el acceso solo a las áreas
donde tienen permiso de enviar cambio y asegurándose de que no lo puedan
hacer en ningún otro sitio. (Más información en 
<xref linkend="committers"/><phrase output="printed">
<xref linkend="managing-volunteers"/></phrase> sobre como
los proyectos deciden quienes pueden hacer cambios y donde.)</para>

<!--
<para>Exercising such tight control is usually unnecessary, and may
even be harmful.  Some projects simply use an honor system: when a
person is granted commit access, even for a sub-area of the project,
what they actually receive is the ability to commit anywhere in the
master repository.  They're just asked to keep their commits in their
area.  Remember that there is little real risk here: the repository
provides an audit trail, and in an active project, all commits are
reviewed anyway.  If someone commits where they're not supposed to,
others will notice it and say something.  If a change needs to be
undone, that's simple enough&mdash;everything's under version control
anyway, so just revert.</para>
-->
<para>Probablemente hayan pequeños daños implementar un control
así de estricto, pero una política un poco más relajada también
esta bien. Algunos proyectos utilizan un sistema basado en el honor:
cuando a una persona se le permite la posibilidad de realizar cambios,
aunque sea a una pequeña área del repositorio, lo que reciben es una
contraseña que les permite realizar cambios en cualquier otro sitio
del repositorio y sólo se les pide que mantengan sus cambios en su
área. Hay que recordar que no existe ningún peligro aquí: de todas formas,
en un proyecto activo, todos los cambios son revisados. Si alguien hace
un cambio donde no debía, alguien más se dará cuenta y dirá algo. Es muy
sencillo si un cambio debe ser rectificado&mdash;todo está bajo el control
de versiones de todas formas, así que sólo hay que volver atras.</para> 

<!--
<para>There are several advantages to this more relaxed approach.
First, as developers expand into other areas (which they usually will
if they stay with the project), there is no administrative overhead to
granting them wider privileges.  Once the decision is made, the person
can just start committing in the new area right away.</para>
-->
<para>Existen varias ventajas en tal aproximación tan relajada.
Primero, mientras los desarrolladores se vayan expandiendo en las
diferentes áreas (lo cual harán a menudo si siguen en el proyecto),
no es necesario un trabajo administrativo extra de tener que dar y
quitar privilegios. Una vez que la decisión es tomada, la persona
puede empezar a enviar sus cambios a la nueva área sin problemas.</para>

<!--
<para>Second, expansion can be done in a more fine-grained manner.
Generally, a committer in area X who wants to expand to area Y will
start posting patches against Y and asking for review.  If someone who
already has commit access to area Y sees such a patch and approves of
it, she can just tell the submitter to commit the change directly
(mentioning the reviewer/approver's name in the log message, of
course).  That way, the commit will come from the person who actually
wrote the change, which is preferable from both an information
management standpoint and from a crediting standpoint.</para>
-->
<para>Segundo, la expansión se puede filtrar mejor, ya que generalmente,
quienes realizan cambios en el área X y desean expandirse al área Y
sólo tienen que empezar a enviar sus cambios contra Y y solicitar
su revisión. Si alguien con acceso a cambios al área Y recibe alguno
de estos parches y lo aprueba, puede pedir que el cambio sea enviado
directamente (mencionando el nombre de quien ha revisado/aprobado el
cambio en el mensaje de registro). De esta manera, el commit vendrá
de quien ha hecho el cambio, lo cual es preferible desde un punto de
vista administrativo y de credibilidad.</para> 

<!--
<para>Last, and perhaps most important, using the honor system
encourages an atmosphere of trust and mutual respect.  Giving someone
commit access to a subdomain is a statement about their technical
preparedness&mdash;it says: "We see you have expertise to make commits
in a certain domain, so go for it."  But imposing strict authorization
controls says: "Not only are we asserting a limit on your expertise,
we're also a bit suspicious about
your <emphasis>intentions</emphasis>."  That's not the sort of
statement you want to make if you can avoid it.  Bringing someone into
the project as a committer is an opportunity to initiate them into a
circle of mutual trust.  A good way to do that is to give them more
power than they're supposed to use, then inform them that it's up to
them to stay within the stated limits.</para>
-->
<para>Por último, y quizás la razón más importante, al utilizar
un sistema basado en el honor, se crea una atmósfera de confianza
y respeto mutuo. Al darle a alguien permiso para enviar cambio a
un subdominio se hace una declaración acerca de su preparación
técnica&mdash;la cual dice: "Hemos visto que tienes la capacidad
para realizar cambios en cierto dominio, así que a por ello". Pero
imponer controles estrictos en las autorizaciones dice: "No sólo
estamos juzgando tus limitadas capacidades, sino que también
sospechamos de tus <emphasis>intenciones</emphasis>." Este no
es el tipo de declaraciones que se desean hacer si pueden ser
evitadas. Incluir a alguien dentro del grupo de desarrolladores
del proyecto es una oportunidad de iniciarlos en un circulo de
confianza mutua. Una buena manera de hacer esto es dar más
poder del que se supone deben tener e informarles que es su
responsabilidad mantenerse dentro de los límites impuestos.</para>

<!--
<para>The Subversion project has operated on this honor system way or
well over a decade, with more than 40 full committers and many more
partial committers as of this writing.  The only distinction the
system actually enforces is
between committers and non-committers; further subdivisions are
maintained solely by human judgement.  Yet the project never had a
serious problem with someone deliberately committing outside their
domain.  Once or twice there's been an innocent misunderstanding about
the extent of someone's commit privileges, but it's always been
resolved quickly and amiably.</para>
-->
<para>El proyecto Subversion ha operado bajo este sistema por más
de cuatro años, con 33 desarrolladores con privilegios completos
y 43 con privilegios parciales. La única distinción que el sistema
fuerza esta entre quienes envían cambios y quienes no, otras divisiones
son mantenidas sólo por humanos. Incluso así, nunca hemos tenido
ningún problema con que alguien realice un cambio deliberado fuera
de su dominio. Una que otra vez han habido inocentes mal entendidos
sobre la extensión de los privilegios de alguna persona, pero siempre
es resuelto rápida y amigablemente.</para>

<!--
<para>Obviously, in situations where self-policing is impractical, you
must rely on hard authorization controls.  But such situations are
rare.  Even when there are millions of lines of code and hundreds or
thousands of developers, a commit to any given code module should
still be reviewed by those who work on that module, and they can
recognize if someone committed there who wasn't supposed to.  If
regular commit review <emphasis>isn't</emphasis> happening, then the
project has bigger problems to deal with than the authorization system
anyway.</para>
-->
<para>Obviamente, en situaciones donde esto es poco práctico se debe
depender en controles estrictos en las autorizaciones, pero dadas
situaciones son raras. Incluso cuando hay millones de lineas de
código y ciento o miles de desarrolladores, un commit hecho a
cualquier módulo del código sigue siendo revisado por quienes
trabajan en dicho módulo y son quienes pueden reconocer si quien
lo ha intentado hacer puede hacerlo. Si una revisión regular no
está sucediendo entonces el proyecto tiene problemas más importantes
con los cuales lidiar que el sistema de autorizaciones.</para>

<!--
<para>In summary, don't spend too much time fiddling with the version
control authorization system, unless you have a specific reason to.  It
usually won't bring much tangible benefit, and there are advantages to
relying on human controls instead.</para>
-->
<para>Para concluir, no hace falta pasar mucho tiempo con las
autorizaciones del sistema de control de versiones a menos que se
tenga una razón en específico. Usualmente esto no trae beneficios
tangibles y confiar en el control humano tiene sus ventajas.</para>

<!--
<para>None of this should be taken to mean that the restrictions
themselves are unimportant, of course.  It would be bad for a project
to encourage people to commit in areas where they're not qualified.
Furthermore, in many projects, full (unrestricted) commit access has a
special corollary status: it implies voting rights on project-wide
questions.  This political aspect of commit access is discussed more
in <xref linkend="electorate"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>.</para>
-->
<para>Por supuesto que nada de esto significa que las restricciones mismas son poco
importantes. Sería malo para un proyecto el animar a las personas 
a realizar cambios en áreas para las cuales no están cualificadas. Incluso
en algunos proyectos, el acceso ilimitado tiene un status especial:
implica derecho de voto en cuestiones que atañen al proyecto por
completo. Este aspecto político del acceso es discutido en mayor
profundidad en <xref linkend="electorate"/><phrase output="printed">
en <xref linkend="social-infrastructure"/></phrase>.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="commit-review-tools">
<!--
<title>Tools for commit review</title>
-->

<!--
<para><emphasis>9 September 2013: If you're reading this note, then
you've encountered this section while it's in the process of being
written as part of the overall update of this book (see <ulink
url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink>).</emphasis></para>
-->

<!--
<para>poss2 todo: there are three main things to cover here: Gerrit
and similar tools, the GitHub PR model, and commit emails.  Intro
paragraph should give an overview and describe how they interact, then
a short section on each.  The section for commit emails is already
done as it was just moved here from its old home as a subsection of
the "Using the Version Control System" section.  Discuss how
human-centered commit review can be linked with automated buildbots
that may or may not be a hard gateway to the central repository.</para>
-->

<!-- http://programmers.stackexchange.com/questions/173262/gerrit-code-review-or-githubs-fork-and-pull-model is worth looking at -->

<sect3 id="pull-requests">
<!--
<title>Pull requests</title>
-->

<!-- http://julien.danjou.info/blog/2013/rant-about-github-pull-request-workflow-implementation is an interesting read for this -->

<!-- In Gitorious, and perhaps elsewhere (Phabricator?), these are
     called by the IMHO more intuitive name "merge requests".  Make
     sure to mention that too. -->

</sect3>

<sect3 id="commit-review-tbd">
<!--
<title>TBD (Gerrit et al)</title>
-->

<!-- See http://en.wikipedia.org/wiki/List_of_tools_for_code_review ,
as Gerrit isn't the only thing out there, though it's probably the
most popular.  I guess Review Board is the other. -->

</sect3>

<!-- ESTO FUE MOVIDO HACIA ABAJO ///////////////-->
<sect3 id="commit-emails">
<!--
<title>Commit emails</title>
-->
<title>Correos de cambios</title>

<!--
<para>Every commit to the repository should generate an email showing
who made the change, when they made it, what files and directories
changed, and how they changed.  The email should go to a special
mailing list devoted to commit emails, separate from the mailing lists
to which humans post.  Developers and other interested parties should
be encouraged to subscribe to the commits list, as it is the most
effective way to keep up with what's happening in the project at the
code level.  Aside from the obvious technical benefits of peer review
(see <xref linkend="code-review"/>), commit emails help create a
sense of community, because they establish a shared environment in
which people can react to events (commits) that they know are visible
to others as well.</para>
-->
<para>Cada commit al repositorio debería generar un correo electrónico
mostrando quien ha hecho el cambio, cuando, cuales ficheros y directorios
han cambiado y como. Este correo debe ser dirigido a una lista de correos
separada de las listas a las que envían los humanos. Los desarrolladores
y todos aquellos interesados deben ser animados para suscribirse a las
lista de commits ya que es la manera más efectiva de mantenerse al día con
lo que sucede en el proyecto al nivel del código. Aparte de los obvios
beneficios técnicos de la revisión por la comunidad (<xref linkend="code-review"/>),
los correos con los cambios ayudan a crear un sentido de comunidad
porque establecen un ambiente compartido en el que la gente puede 
reaccionar ante diferentes eventos (commits) que saben son visibles
a otros tambien.</para>

<!--
<para>The specifics of setting up commit emails will vary depending on
your version control system, but usually there's a script or other
packaged facility for doing it.  If you're having trouble finding it,
try looking for documentation on <firstterm>hooks</firstterm> (or
sometimes <firstterm>triggers</firstterm>) specifically a
<firstterm>post-commit hook</firstterm> hook.  Post-commit hooks are a
general means of launching automated tasks in response to commits.
The hook is triggered when a given commit finalizes, is fed all the
information about that commit, and is then free to use that
information to do anything&mdash;for example, to send out an
email.</para>
-->
<para>La configuración específica para habilitar estos correos varia
dependiendo de la versión del sistema de control de versiones pero
a menudo existe un script o paquete que facilita esto. Si se tiene
algún problema para encontrar estos, intente buscar en la documentación
el tema relacionado con los <firstterm>hooks</firstterm>,
específicamente el <firstterm>post-commit hook</firstterm>, también
llamado <firstterm>loginfo hook</firstterm> en CVS. Los
Post-commit hooks son tareas automatizadas que se ejecutan como
respuesta a los cambios enviados (commits). El hook es ejecutado
por un cambio individual, se rellena con la información acerca del
cambio y luego es liberada esa información para ser utilizada como
se desee&mdash;por ejemplo, para enviar un correo electrónico.</para>

<!--
<para>With pre-packaged commit email systems, you may want to
modify some of the default behaviors:</para>
-->
<para>Con los sistemas de correos con cambios ya listos para usar,
quizás sea necesario modificar alguna de las siguientes conductas:</para>

<orderedlist>

  <listitem>
<!--
  <para>Some commit mailers don't include the actual diffs in the
  email, but instead provide a URL to view the change on the web using
  the repository browsing system.  While it's good to provide the URL,
  so the change can be referred to later, it is also important that
  the commit email include
  the diffs themselves.  Reading email is already part of people's
  routine, so if the content of the change is visible right there in
  the commit email, developers will review the commit on the spot,
  without leaving their mail reader.  If they have to click on a URL to
  review the change, most won't do it, because that requires a new
  action instead of a continuation of what they were already doing.
  Furthermore, if the reviewer wants to ask something about the
  change, it's vastly easier to hit reply-with-text and simply
  annotate the quoted diff than it is to visit a web page and
  laboriously cut-and-paste parts of the diff from web browser to
  email client.</para>
-->
	<para>Algunos de estos sistemas no incluyen el diff en el correo
	que envían sino que enlazan con una URL para poder ver el cambio
	en la web utilizando el sistema de navegación del repositorio.
	Aunque esta bien dar una URL para que se pueda revisar el cambio
	luego, también es <emphasis>muy</emphasis> importante que el
	correo del commit incluya los diff. Leer el correo electrónico
	ya es parte de la rutina de la gente, así que si el contenido es
	visible allí mismo en el correo, los desarrolladores podrán
	revisar el commit en el mismo sitio sin la necesidad de abandonar
	sus clientes de correo. Si tienen que seguir un enlace a una
	página de revisiones, muchos no lo pulsarán, ya que esto requiere
	de una nueva acción en lugar de una continuación de lo que ya
	estaban haciendo. Por si fuera poco, si el lector desea preguntar
	algo acerca del cambio, es mucho más fácil responder al mensaje
	incluyendo el texto original y simplemente realizar anotaciones
	en el diff, en lugar de tener que visitar una página web y
	tomarse la molestia de copiar y pegar partes del diff en el
	navegador web al cliente de correo.</para>

<!--
  <para>(Of course, if the diff is huge, such as when a large body of
  new code has been added to the repository, then it makes sense to
  omit the diff and offer only the URL.  Most commit mailers can do
  this kind of size-limiting automatically.  If yours can't, then it's
  still better to include diffs, and live with the occasional huge
  email, than to leave the diffs off entirely.  Convenient reviewing
  and commenting is a cornerstone of cooperative development, and much
  too important to do without.)</para>
-->
	<para>(Por supuesto que si el diff es gigantesco, como cuando
	una gran parte de código nuevo ha sido añadido al repositorio,
	entonces tiene sentido omitir la parte del diff y ofrecer
	sólo la URL. Muchos de los sistemas permiten hacen esto
	automáticamente. Si el utilizado en el proyecto no es capaz
	de hacer esto, entonces sigue siendo mejor incluir los diffs
	completos. La conveniencia de la revisión y los comentarios
	es una piedra angular del desarrollo cooperativo, algo demasiado
	importante para olvidar.)</para>
  </listitem>

<!--
  <listitem><para>The commit emails should set their Reply-to header
  to the regular development list, not the commit email list.  That
  is, when someone reviews a commit and writes a response, their
  response should be automatically directed toward the human
  development list, where technical issues are normally discussed.
  There are a few reasons for this.  First, you want to keep all
  technical discussion on one list, because that's where people expect
  it to happen, and because that way there's only one archive to
  search.  Second, there might be interested parties not subscribed to
  the commit email list.  Third, the commit email list advertises
  itself as a service for watching commits, not for watching commits
  <emphasis>and</emphasis> having occasional technical discussions.
  Those who subscribed to the commit email list did not sign up for
  anything but commit emails; sending them other material via that
  list would violate an implicit contract.</para>
-->
  <listitem><para>Los correos con los cambios deben tener su cabecera
	Reply-To direccionada hacia la lista regular de desarrollo, no
	a la lista de los cambios, de esta manera cuando alguien revise
	un cambio y escriba una respuesta, esta debe ser dirigida
	automáticamente a la lista de desarrolladores, donde los temas
	técnicos son discutidos normalmente. Existen varias razones para
	esto, primero, se quiere mantener todas las discusiones técnicas
	en la lista, porque es allí donde la gente espera que sucedan y
	porque así ésta es la única lista que será necesario archivar.
	Segundo, puede que existan partes interesadas no suscritas a la
	lista de cambios. Tercero, la lista de cambios es publicitada
	como una lista para los commits y no como una lista para los
	commits y las discusiones técnicas ocasionadas. Quienes se han
	suscrito sólo a la lista de cambios, no se han suscrito a nada
	más que commits, al enviarles correos con material sin relación
	utilizando ésta vía, es una violación del contrato implícito.
	Cuarto, algunas personas escriben programas que procesan los
	correos con los cambios (para publicarlos en una página web,
	por ejemplo). Estos programas están preparados para manejar
	correos con un formato consistente y son incapaces de trabajar
	con correos escritos por humanos.</para>

<!--
  <para>Note that this advice to set Reply-to does not contradict the
  recommendations in
  <xref linkend="reply-to"/><phrase output="printed"> earlier in
  this chapter</phrase>.  It's
  always okay for the <emphasis>sender</emphasis> of a message to set
  Reply-to.  In this case, the sender is the version control system
  itself, and it sets Reply-to in order to indicate that the
  appropriate place for replies is the development mailing list, not
  the commit list.</para>
-->
	<para>Hay que señalar que ésta recomendación no contradice
	las recomendaciones anteriores en 
	<xref linkend="reply-to"/><phrase output="printed"></phrase>.
	Siempre esta bien que el remitente del mensaje configure
	la cabecera Reply-to. En este caso, el remitente es el
	sistema de control de versiones y su Reply-to lo configura
	de tal manera que indique que el lugar apropiado para responder
	es la lista de desarrollo y no la lista de cambios</para>

  </listitem>

</orderedlist>

</sect3>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="bug-tracker">
<!--
<title>Bug Tracker</title>
-->
<title>Seguimiento de errores</title>

<!--
<para>Bug tracking is a broad topic; various aspects of it are
discussed throughout this book.  Here I'll concentrate mainly on the
features your project should look for in a bug tracker, and how to use
them.  But to get to those, we have to start with a policy question:
exactly what kind of information should be kept in a bug
tracker?</para>
-->
<para>El seguimiento de errores es un tema muy amplio y varios
aspectos de este son discutidos a lo largo de este libro. Aquí
intentare concentrarme principalmente en las consideraciones técnicas
y en la instalación, pero para llegar a esto, debemos empezar con
una política de preguntas: exactamente ¿qué tipo de información
va a ser mantenida en el sistema de seguimiento?.</para>

<!--
<para>The term <firstterm>bug tracker</firstterm> is misleading.  Bug
tracking systems are used to track not only bug reports, but new
feature requests, one-time tasks, unsolicited patches&mdash;really
anything that has distinct beginning and end states, with optional
transition states in between, and that accrues information over its
lifetime.  For this reason, bug trackers are also called
<firstterm>issue trackers</firstterm>, <firstterm>ticket
trackers</firstterm>, <firstterm>defect trackers</firstterm>,
<firstterm>artifact trackers</firstterm>, <firstterm>request
trackers</firstterm>, etc.</para>
-->
<para>El término <firstterm>seguimiento de errores</firstterm> puede
generar confusión ya que estos sistemas se utilizan frecuentemente
para seguir solicitudes para nuevas características, tareas que se
efectúan sólo una vez, parches no solicitados&mdash;en realidad se
utilizan para cualquier cosa que pueda tener estados distinguibles
de comienzo y final, con estados opcionales de transición entre
estos y que acumulan información a lo largo de su existencia. Por
esta razón, los sistemas de seguimiento de fallos también son
llamados <firstterm>de seguimiento de temas</firstterm>, 
<firstterm>de defectos</firstterm>,
<firstterm>de solicitudes</firstterm>, <firstterm>trouble ticket 
system</firstterm>, etc. Más información en <xref linkend="bug-trackers"/>
donde hay una lista de programas.</para>

<!--
<para>In this book, I'll generally use the word
<firstterm>ticket</firstterm> to refer the items in the tracker's
database, because that distinguishes between the behavior that the
user encountered or proposed&nbsp;&mdash;&nbsp;that is, the bug or
feature itself&nbsp;&mdash;&nbsp;and the tracker's ongoing
<emphasis>record</emphasis> of that discovery, diagnosis, discussion,
and eventual resolution.  But note that many projects use the word
<emphasis>bug</emphasis> or <emphasis>issue</emphasis> to refer to
both the ticket itself and to the underlying behavior or goal that the
ticket is tracking.  (In fact, those usages are probably more common than
"ticket"; it's just that in this book we need to be able to make that
distinction explicitly in a way that projects themselves usually
don't.)</para>
-->
<para>En este libro continuare utilizando "gestor de fallos" para la
aplicación que hace el seguimiento, porque es así como la mayoría
de la gente lo llama y utilizare <firstterm>issue</firstterm> al
referirme a un punto en particular en la base de datos del gestor
de fallos. Esto nos permitirá distinguir entre los buenos y malos
comportamientos que el usuario se puede encontrar (el fallo en si
mismo) y el <emphasis>registro</emphasis> en el gestor del
descubrimiento, diagnostico y eventual resolución del fallo. Hay
que recordar que aunque la mayoría de las entradas sean fallos,
también pueden ser otras tareas.</para>

<!--
<para>The classic ticket life cycle looks like this:
-->
<para>El clásico ciclo de vida se parece al siguiente:

<orderedlist>

<!--
  <listitem><para>Someone files the ticket.  They provide a summary, an
            initial description (including a reproduction recipe, if
            applicable; see
            <xref
            linkend="users-to-volunteers"/><phrase
            output="printed"> in
            <xref linkend="managing-volunteers"/></phrase> for
            how to encourage good bug reports), and whatever other
            information the tracker asks for.  The person who files
            the ticket may be totally unknown to the project&mdash;bug
            reports and feature requests are as likely to come from
            the user community as from the developers.</para>
-->
    <listitem><para>
	Alguien crea una entrada. Ofrecen un resumen, una descripción
	inicial (incluyendo como reproducir el fallo si es posible. En
	<xref linkend="users-to-volunteers"/><phrase output="printed">
	en <xref linkend="managing-volunteers"/></phrase> hay ejemplos
	de como se puede animar la correcta creación de reportes de fallos)
	y cualquier otra información que el gestor solicite. Quien crea
	la entrada puede ser un desconocido al proyecto&mdash;los reportes
	de fallos y las solicitudes de características provienen tanto
	de los usuarios como de los desarrolladores.</para>

<!--
            <para>Once filed, the ticket is in what's called an
            <firstterm>open</firstterm> state.  Because no action has
            been taken yet, some trackers also label it as
            <firstterm>unverified</firstterm> and/or
            <firstterm>unstarted</firstterm>.  It is not assigned to
            anyone; or, in some systems, it is assigned to a fake
            user to represent the lack of real assignation.  At this
            point, it is in a holding area: the ticket has been
            recorded, but not yet integrated into the project's
            consciousness.</para>
-->
	<para>Una vez enviada, la entrada entra en un estado llamado
	<firstterm>abierto</firstterm> porque ninguna acción ha sido
	tomada aun. Algunos gestores etiquetan las nuevas entradas
	como <firstterm>sin verificar</firstterm> o como
	<firstterm>sin iniciar</firstterm>. No está asignada a nadie,
	o en algunos sistemas, es asignada a un usuario fantasma que
	representa la falta de una asignación real. Llegado a este
	punto, la entrada se encuentra en el área de espera: ha sido
	registrada, pero aun no ha sido integrada en la conciencia
	del proyecto.</para>
  </listitem>

<!--
  <listitem><para>Others read the ticket, add comments to it, and
            perhaps ask the original filer for clarification on some
            points.</para>
  </listitem>
-->
  <listitem><para>
	Otros leen la entrada, añaden comentarios y quizás soliciten
	el esclarecimiento de algunos puntos a quien realizo la entrada.</para>
  </listitem>

<!--
  <listitem><para>The bug gets <firstterm>reproduced</firstterm>.
            This may be the most important moment in its
            life cycle.  Although the bug is not actually fixed yet,
            the fact that someone besides the original filer was able
            to make it happen proves that it is genuine, and, no less
            importantly, confirms to the original filer that they've
            contributed to the project by reporting a real bug.
            <emphasis>(This step and some of the others don't apply to
            feature proposals, task tickets, etc, of course.  But most
            filings are for genuine bugs, so we'll focus on that
            here.)</emphasis></para>
  </listitem>
-->
  <listitem><para>
	El fallo es <firstterm>reproducido</firstterm>. Este puede que
	sea el momento más importante en su ciclo vital, ya que incluso
	que el fallo aun no ha sido resuelto, el hecho de que alguien
	haya podido reproducirlo además de quien creo la entrada prueba
	que es genuino y, no menos importante, confirma al creador
	de la entrada que ha contribuido al proyecto reportando un
	fallo real.</para>
  </listitem>

<!--
  <listitem><para>The bug gets <firstterm>reproduced</firstterm>.
            This may be the most important moment in its
            life cycle.  Although the bug is not actually fixed yet,
            the fact that someone besides the original filer was able
            to make it happen proves that it is genuine, and, no less
            importantly, confirms to the original filer that they've
            contributed to the project by reporting a real bug.
            <emphasis>(This step and some of the others don't apply to
            feature proposals, task tickets, etc, of course.  But most
            filings are for genuine bugs, so we'll focus on that
            here.)</emphasis></para>
  </listitem>
-->
  <listitem><para>
	El fallo es <firstterm>diagnosticado</firstterm>: su causa
	es identificada, y si es posible, es estimado el esfuerzo
	requerido para repararlo. Hay que asegurarse de que todo esto
	es registrado en la entrada, ya que en el case en que quien
	haya hecho el diagnostico abandona el proyecto (lo cual
	sucede a menudo con desarrolladores voluntarios), alguien más
	debe ser capaz de continuar con su trabajo.</para>

<!--
            <para>In this stage, or sometimes in the previous one,
            a developer may "take ownership" of the ticket and
            <firstterm>assign</firstterm> it to herself (<xref
            linkend="delegation-assignment"/><phrase
            output="printed"> in
            <xref linkend="managing-volunteers"/></phrase>
            examines the assignment process in more detail).  The ticket's
            <firstterm>priority</firstterm> may also be set at this
            stage.  For example, if it is so important that it should
            delay the next release, that fact needs to be identified
            early, and the tracker should have some way of noting
            it.</para>
-->
	<para>Llegados a este punto, o a veces en uno de los anteriores,
	puede que algún programador ya se haya "adueñado" de la entrada y se
	lo <firstterm>asigne</firstterm> a si mismo (el proceso es examinado
	en mayor detalle en <xref linkend="delegation-assignment"/><phrase
	output="printed"> en <xref linkend="managing-volunteers"/></phrase>).
	La <firstterm>prioridad</firstterm> de la entrada puede que también
	sea fijada en esta etapa. Por ejemplo, si el fallo es tan severo
	que debería retrasar el próximo lanzamiento, debe ser identificado
	desde el principio y el gestor debe proporcionar un mecanismo
	para hacer esto.</para>

  </listitem>
<!--
  <listitem><para>The ticket gets scheduled for resolution.
            Scheduling doesn't necessarily mean naming a date by which
            it will be fixed.  Sometimes it just means deciding which
            future release (not necessarily the next one) the bug
            should be fixed by, or deciding that it need not block any
            particular release.  Scheduling may also be dispensed
            with, if the bug is quick to fix.</para>
  </listitem>
-->
  <listitem><para>
	La entrada es programada para su resolución. Esto no implica
	necesariamente fijar una fecha para cuando debe ser resuelta.
	A veces sólo significa decidir para cual próximo lanzamiento (no
	necesariamente la siguiente) el fallo debe estar corregido o
	decidir si debe o no bloquear un lanzamiento en particular.
	Incluso nos podemos olvidar de planificar la reparación del
	fallo si es algo que se puede hacer rapidamente.</para>
  </listitem>
<!--
  <listitem><para>The bug gets fixed (or the task completed, or
            the patch applied, or whatever).  The change or set of
            changes that fixed it should be discoverable from
            the ticket.  After this, the ticket is
            <firstterm>closed</firstterm> and/or marked as
            <firstterm>resolved</firstterm>.</para>
  </listitem>
-->
  <listitem><para>
	El fallo es reparado (o la tarea es completada, o el
	parche es aplicado o lo que sea). El cambio o conjunto de
	cambios que arreglan el fallo deben ser registrados en un
	comentario en la entrada, después de lo cual ésta es 
	<firstterm>cerrada</firstterm> o marcada como
	<firstterm>resuelta</firstterm>.</para>
  </listitem>
</orderedlist>

</para>

<!--
<para>There are some common variations on this life cycle.  Sometimes
a ticket is closed very soon after being filed, because it turns out
not to be a bug at all, but rather a misunderstanding on the part of
the user.  As a project acquires more users, more and more such
invalid tickets will come in, and developers will close them with
increasingly short-tempered responses.  Try to guard against the
latter tendency.  It does no one any good, as the individual user in
each case is not responsible for all the previous invalid tickets; the
statistical trend is visible only from the developers' point of view,
not the user's.  (In
<xref linkend="bug-filtering"/><phrase output="printed"> later
in this chapter,</phrase> we'll look at
techniques for reducing the number of invalid tickets.)  Also, if
different users are experiencing the same misunderstanding over and
over, it might mean that aspect of the software needs to be
redesigned.  This sort of pattern is easiest to notice when there is
an issue manager monitoring the bug database; see
<xref linkend="issue-manager"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>.</para>
-->
<para>Existen variaciones en este ciclo. A veces el problema es cerrado
seguidamente después de ser archivado, porque resulta que no es un fallo,
sino que es un malentendido por parte del usuario. Mientras el proyecto
vaya ganando usuarios, más y más de estas entradas invalidas aparecerán,
y los desarrolladores las cerraran con respuestas cada vez menos
respetuosas. Hay que intentar protegerse de ésta tendencia, pues no le
hace ningún bien a nadie, porque el usuario en cada caso no es responsable
de las entradas invalidas previas. Esta tendencia estadísticas sólo es
divisada por los desarrolladores, no por los usuarios. (En 
<xref linkend="bug-filtering"/><phrase output="printed"> más adelante
en este capítulo,</phrase> examinaremos algunas técnicas para reducir
el número de entradas invalidas.) También puede suceder que varios
usuarios estén experimentando el mismo malentendido una y otra vez,
lo cual significa que algún aspecto de la aplicación necesita volver
a ser diseñada. Este tipo de patrones son los más sencillos de ver
cuando se utiliza un gestor de entradas que monitorice la base de 
datos de fallos. Más en <xref linkend="issue-manager"/><phrase output="printed">
en <xref linkend="managing-volunteers"/></phrase>.</para>

<!--
<para>Another common life event for the ticket to be closed
as a <firstterm>duplicate</firstterm> soon after Step 1.  A duplicate
is when someone reports something that's already known to the project.
Duplicates are not confined to open tickets: it's possible for a bug to
come back after having been fixed (this is known as a
<firstterm>regression</firstterm>), in which case a reasonable course
is to reopen the original ticket and close any new reports as
duplicates of the original one.  The bug tracking system should keep
track of this relationship bidirectionally, so that reproduction
information in the duplicates is available to the original ticket, and
vice versa.</para>
-->
<para>Otra variación muy común de este ciclo de vida es cuando la entrada
es cerrada al ser un <firstterm>duplicado</firstterm> poco después
del paso 1. Un duplicado aparece cuando alguien crea una entrada para
un problema ya conocido por el proyecto. Los duplicados no están
limitados a entradas abiertas: es posible que un fallo haya reaparecido
después de haberlo reparado (esto es conocido como <firstterm>regresión</firstterm>),
por lo cual, la vía preferida es usualmente reabrir la entrada original y
cerrar cualquier nuevo reporte como duplicado de este. El sistema
de gestión de fallo debe mantener un seguimiento de esta relación
bidimensional, de forma que la información en los duplicados este
disponible en la entrada original y vice versa.</para>

<!--
<para>A third variation is for the developers to close the ticket,
thinking they have fixed it, only to have the original reporter reject
the fix and reopen it.  This is usually because the developers simply
don't have access to the environment necessary to reproduce the bug,
or because they didn't test the fix using the exact same reproduction
recipe as the reporter.</para>
-->
<para>Una tercera variación es cuando los desarrolladores cierran la
entrada pensando que ya ha sido resuelta y el usuario que la ha
reportado rechaza esa reparación y es reabierta. Por lo general esto
es porque el desarrollador no tiene la capacidad de reproducir
el fallo o porque no han probado su reparación siguiendo
la misma receta para la reproducción descrita por el usuario.</para>

<!--
<para>Aside from these variations, there may be other small details of
the life cycle that vary depending on the tracking software.  But the
basic shape is the same, and while the life cycle itself is not
specific to open source software, it has implications for how open
source projects use their bug trackers.</para>
-->
<para>A parte de estas variaciones existen pequeños detalles de
este ciclo de vida que pueden variar dependiendo de la aplicación
de seguimiento. Pero la forma básica es la misma e incluso cuando
el ciclo de vida no es sólo para el software open source, tiene
implicaciones acerca de cómo los proyectos utilizan sus
sistemas de control de fallos.</para>

<!--
<para>The tracker is as much a public face of the project as the
mailing lists or web pages.  Anyone may file a ticket, anyone may look
at a ticket, and anyone may browse the list of currently open tickets.
It follows that you never know how many people are waiting to see
progress on a given ticket.  While the size and skill of the
development community constrains the rate at which tickets can be
resolved, the project should at least try to acknowledge each ticket
the moment it appears.  Even if the ticket lingers for a while, a
response encourages the reporter to stay involved, because she feels
that a human has registered what she has done (remember that filing a
ticket usually involves more effort than, say, posting an email).
Furthermore, once a ticket is seen by a developer, it enters the
project's consciousness, in the sense that the developer can be on the
lookout for other instances of the ticket, can talk about it with
other developers, etc.</para>
-->
<para>Implícito en el paso 1, el sistema es una cara tan publica
del proyecto, como lo pueden ser las listas de correo o las paginas
web. Cualquiera puede crear una entrada, cualquiera puede ver
una entrada y cualquiera puede navegar la lista de entradas
abiertas. De tal manera que nunca se sabe cuantas personas están
interesadas en ver el progreso en una entrada en particular. Aunque
el tamaño y la capacidad de la comunidad de desarrolladores constriñe
la frecuencia con la que los problemas son atacados, el proyecto
debe al menos intentar reconocer cada entrada mientras vayan
llegando. Incluso si el problema persiste por un tiempo, una
repuesta anima al usuario a mantenerse involucrado porque siente
que un humano ha visto lo que ha hecho (recordad que rellenar
una entrada requiere mucho más tiempo que un correo electrónico).
Incluso mejor, una vez que una entrada es vista por un desarrollador,
entra en la conciencia del proyecto, en el sentido en que este
puede mantenerse al acecho de otras instancias del mismo problema,
puede comentarlo con otros desarrolladores, etc.</para>

<!--
<para>This centrality to the life of the project implies a few things
about trackers' technical features:
-->
<para>La necesidad de reacciones oportunas implica dos cosas:

<itemizedlist>
  <listitem>
<!--
    <para>The tracker should be connected to email, such that
    every change to a ticket, including its initial filing, causes a
    notification mail to go out to some set of appropriate
    recipients.  See <xref linkend="bug-tracker-email-interaction"/>
    later in this chapter for more on this.</para>
-->
    <para>
	El sistema de seguimiento debe conectarse a la lista de correos
	de manera que cada cambio a una entrada, incluyendo su redacción
	inicial, genere un correo describiendo lo sucedido. Esta lista
	de correos es, a veces, diferente de la lista de desarrollo ya
	que quizás, no todos los desarrolladores quieran recibir correos
	automáticos con fallos, pero (al igual que con los correos con
	cambios) la cabecera Reply-to debe ser fijada a la lista
	de desarrollo.</para>
  </listitem>
  <listitem>
<!--
    <para>The form for filing tickets should have a place to record
    the reporter's email address or other contact information, so she
    can be contacted for more details.  But if possible, it should not
    <emphasis>require</emphasis> the reporter's email address or real
    identity, as some people prefer to report anonymously.  See <xref
    linkend="anonymity"/><phrase output="printed"> later in this
    chapter</phrase> for more on the importance of anonymity.</para>
-->
    <para>
	El formulario donde se rellena la entrada debe almacenar la
	dirección de correo electrónico de quien la reporta, de forma
	que pueda ser contactada para solicitar más información.
	(No obstante, no debe <emphasis>requerir</emphasis> la
	dirección ya que algunas personas prefieren realizar el
	reporte anónimamente. Más información sobre el anonimato
	en <xref linkend="anonymity"/><phrase output="printed">
	a continuación en este capítulo</phrase>.</para>
  </listitem>
  <listitem>
<!--
    <para>The tracker should have APIs.  I cannot stress the
    importance of this enough.  If there is no way to interact with
    the tracker programmatically, then in the long run there is no way
    to interact with it scalably.  APIs provide a route to customizing
    the behavior of the tracker by, in effect, expanding it to include
    third-party software.  Instead of being just the specific ticket
    tracking software running on a server somewhere, it's that
    software <emphasis>plus</emphasis> whatever custom behaviors your
    project implements elsewhere and plugs in to the tracker via the
    APIs.</para>
-->

<!--
    <para>Also, if your project uses a proprietary ticket tracker,
    as is becoming more common now that so many projects host their
    code on proprietary-but-free-of-charge hosting sites and just use
    the site's built-in tracker, APIs provide a way to avoid being
    locked in to that hosting platform.  You can, in theory, take the
    ticket history with you if you choose to go somewhere else (you
    may never exercise this option, but think of it as
    insurance&nbsp;&mdash;&nbsp;and some projects have actually done
    it).</para>
-->

<!--
    <para>Currently, the ticket trackers of the big three hosting
    sites (GitHub, Google Code Hosting, and SourceForge) all have
    APIs, fortunately.  Of them, only SourceForge is itself open
    source, running a platform called
    <firstterm>Allura</firstterm><footnote><para>Oddly, SourceForge's
    API was also the hardest to find documentation for, though it
    helps once you know the platform's name is "Allura".  For
    reference, their API documentation is here: <ulink
    url="http://sourceforge.net/p/forge/documentation/Allura%20API/"
    >sourceforge.net/p/forge/documentation/Allura%20API</ulink
    ></para></footnote>.</para>
-->

  </listitem>
</itemizedlist>

</para>

<sect2 id="bug-tracker-email-interaction">
<!-- For link compatibility with old section ID. -->
<anchor id="bug-tracker-mailing-list-interaction" />
<!--
<title>Interaction with Email</title>
-->
<title>Interacción con las Lista de Correo</title>

<!--
<para>Most trackers now have at least decent email integration
features: at a minimum, the ability to create new tickets by email,
the ability to "subscribe" to a ticket to receive
emails about activity on that ticket, and the ability to add new
comments to a ticket by email.  Some trackers even allow one to
manipulate ticket state (e.g., change the status field, the assignee,
etc) by email, and for people who use the tracker a lot, such as an
<xref linkend="issue-manager" >issue manager</xref>, that can make a
huge difference in their ability to stay on top of tracker activity
and keep things organized.</para>
-->
<para>Hay que asegurarse de que el gestor de fallos no se convierte
en un foro de discusiones. Aunque es importante mantener una presencia
humana en el gestor, no está preparado para discusiones en tiempo
real. Hay que pensar en éste como un archivador, una forma de
organizar hechos y referencias a otras discusiones, principalmente
aquellas que suceden en las listas de correo.</para>

<!--
<para>The tracker email feature that is likely to be used by everyone,
though, is simply the ability to read a ticket's activity by email and
respond by email.  This is a valuable time-saver for many people in
the project, since it makes it easy to integrate bug traffic into
one's daily email flow.  But don't let this integration give
anyone the illusion that the total collection of bug tickets and their
email traffic is the equivalent of the development mailing list.  It's
not, and <xref linkend="choose-the-forum"/><phrase output="printed">
in <xref linkend="communications"/></phrase> discusses why this is
important and how to manage the difference.</para>
-->

</sect2>

<sect2 id="bug-filtering">
<!--
<title>Pre-Filtering the Bug Tracker</title>
-->
<title>Pre-filtrado del gestor de fallos</title>

<!--
<para>Most ticket databases eventually suffer from the same problem: a
crushing load of duplicate or invalid tickets filed by well-meaning but
inexperienced or ill-informed users.  The first step in combatting
this trend is usually to put a prominent notice on the front page of
the bug tracker, explaining how to tell if a bug is really a bug, how
to search to see if it's already been reported, and finally, how to
effectively report it if one still thinks it's a new bug.</para>
-->
<para>Muchas de las bases de datos de fallos sufren eventualmente del mismo
problema: una cantidad devastadora de fallos duplicados o inválidos hechos
por usuarios bien intencionados pero sin experiencia o poco informados. El
primer paso para combatir esta tendencia es, por lo general, colocar un vistoso
aviso en la página principal del gestor de fallos, explicando como saber si
un bug es realmente un bug, como buscar si el bug ya está incluido y finalmente,
como reportar efectivamente si aun se cree que es un nuevo fallo.</para>

<!--
<para>This will reduce the noise level for a while, but as the number
of users increases, the problem will eventually come back.  No
individual user can be blamed for it.  Each one is just trying to
contribute to the project's well-being, and even if their first bug
report isn't helpful, you still want to encourage them to stay
involved and file better tickets in the future.  In the meantime,
though, the project needs to keep the ticket database as free of junk
as possible.</para>
-->
<para>Esto reducirá el nivel de ruido por un tiempo, pero mientras el
número de usuarios vaya creciendo, el problema regresara eventualmente.
Ningún individuo puede ser culpado de esto, ya que cada uno está
intentando contribuir en beneficio del proyecto e incluso cuando
su primer reporte no sea de verdadera utilidad, se desea animarlos
para que continúen involucrándose y para que puedan hacer mejores
reportes en el futuro. Mientras tanto, el proyecto necesita mantener
en lo posible la base de datos libre de basura.</para>

<!--
<para>The two things that will do the most to prevent this problem
are: making sure there are people watching the bug tracker who have
enough knowledge to close tickets as invalid or duplicates the moment
they come in, and requiring (or strongly encouraging) users to confirm
their bugs <emphasis>with other people</emphasis> before filing them
in the tracker.</para>
-->
<para>Las dos cosas que tendrán el máximo efecto a la hora de prevenir
este problema son: asegurarnos de que hay gente vigilando el gestor de fallos
quienes tienen el conocimiento suficiente para cerrar problemas como
inválidos o duplicados mientras vayan llegando y requiriendo (o fomentando
duramente) a los usuarios que confirme su reporte con otras personas antes
de reportarlos en el gestor.</para>

<!--
<para>The first technique seems to be used universally.  Even projects
with huge ticket databases (say, the Debian bug tracker at
<ulink url="http://bugs.debian.org/" >bugs.debian.org</ulink>, which
contained 739,542 tickets as of this writing) still arrange things so that
<emphasis>someone</emphasis> sees each ticket that comes in.  It may be
a different person depending on the category of the ticket.  For
example, the Debian project is a collection of software packages, so
Debian automatically routes each ticket to the appropriate package
maintainers.  Of course, users can sometimes misidentify a ticket's
category, with the result that the ticket is sent to the wrong person
initially, who may then have to reroute it.  However, the important
thing is that the burden is still shared&mdash;whether the user
guesses right or wrong when filing, ticket watching is still
distributed more or less evenly among the developers, so each ticket is
able to receive a timely response.</para>
-->
<para>La primera técnica parece ser utilizada universalmente. Incluso
proyectos con gigantescas bases de datos de fallos (digamos, el gestor
de Debian en 
<ulink url="http://bugs.debian.org/"/>, el cual contenía 315,929 reportes
al momento de escribir este libro) siguen ordenando todo de tal manera
que <emphasis>todos</emphasis> puedan ver los reportes mientras llegan.
Puede que sea una persona diferente dependiendo de la categoría del
problema. Por ejemplo, el proyecto Debian es una colección de paquetes
de software, de manera que el proyecto automáticamente enruta cada
reporte a la persona que mantiene el paquete específico. Por supuesto,
a veces los usuarios no identifican bien la categoría a la que pertenece
el problema, con el resultado de que el reporte es enviado a la persona
equivocada, quien entonces deberá redireccionarlo. No obstante, lo
importante es que la carga sigue siendo distribuida&mdash;cada vez que
un usuario crea correcta o incorrectamente al reportar, la vigilancia
de las entradas sigue siendo distribuida más o menos uniformemente entre los
desarrolladores, de manera que cada reporte es respondido en un tiempo
justo.</para>

<!--
<para>The second technique is less widespread, probably because it's
harder to automate.  The essential idea is that every new ticket gets
"buddied" into the database.  When a user thinks he's found a problem,
he is asked to describe it on one of the mailing lists, or in an IRC
channel, and get confirmation from someone that it is indeed a bug.
Bringing in that second pair of eyes early can prevent a lot of
spurious reports.  Sometimes the second party is able to identify that
the behavior is not a bug, or is fixed in recent releases.  Or she may
be familiar with the symptoms from a previous ticket, and can prevent a
duplicate filing by pointing the user to the older ticket.  Often it's
enough just to ask the user "Did you search the bug tracker to see if
it's already been reported?"  Many people simply don't think of that,
yet are happy to do the search once they know someone's
<emphasis>expecting</emphasis> them to.</para>
-->
<para>La segunda técnica esta menos extendida, probablemente sea porque
es más difícil de automatizar. La idea esencial es que cada nuevo
reporte es apadrinado hacia la base de datos. Cuando un usuario cree
haber encontrado un bug, se le pide que lo describa en una de las
listas de correo o en algún canal de IRC para que reciba confirmación
de alguien de que en realidad es un fallo. Al introducir este segundo
par de ojos puede prevenir muchos reportes falsos. A veces esta segunda
persona puede identificar que este comportamiento no es un fallo o que
ha sido resuelto recientemente. O puede que este familiarizado con los
síntomas gracias a problemas anteriores, evitando un duplicado
al señalar al usuario el viejo reporte. A veces es tan sencillo como
preguntar al usuario "¿Has revisado el gestor de fallos para asegurarte
de que no ha sido reportado ya?" Muchas personas no piensan en esto,
pero se contentan con hacer la búsqueda sabiendo que hay alguien
a la <emphasis>expectativa</emphasis> de que lo hagan.</para>

<!--
<para>The buddy system can really keep the ticket database clean, but
it has some disadvantages too.  Many people will file solo anyway,
either through not seeing, or through disregarding, the instructions
to find a buddy for new tickets.  Thus it is still necessary for
volunteers to watch the ticket database.  Furthermore, because most new
reporters don't understand how difficult the task of maintaining the
ticket database is, it's not fair to chide them too harshly for
ignoring the guidelines.  Thus the volunteers must be vigilant, and
yet exercise restraint in how they bounce unbuddied tickets back to
their reporters.  The goal is to train each reporter to use the
buddying system in the future, so that there is an ever-growing pool
of people who understand the ticket-filtering system.  On seeing an
unbuddied ticket, the ideal steps are:</para>
-->
<para>El sistema de apadrinamiento puede mantener la limpieza de
los reportes en la base de datos, pero también tiene algunas
desventajas. Muchas personas harán los reportes sin consultar,
al no buscar o despreocupándose de las instrucciones de buscar a un
padrino para el nuevo reporte. Aun así, es necesario que los
voluntarios sigan vigilando las bases de datos y dado que la
mayoría de los nuevos usuarios que reportan fallos no entienden
la dificultad de mantenerlas, no es justo
reprenderlos duramente por ignorar las directrices. Aun así, los
voluntarios deben ser vigilantes y ejercitar restricciones en como
se rechazan reportes sin apadrinar de vuelta a quien lo haya hecho.
El objetivo es entrenar a cada reportero para que utilice el sistema
de apadrinamiento en el futuro, de tal manera que haya una siempre
creciente fondo de gente quienes entienden el sistema de filtrado
de fallos. Al encontrarnos con un reporte sin padrino, los pasos
ideales a tomar son:</para>

<orderedlist>
  <listitem>
<!--
    <para>Immediately respond to the ticket, politely thanking the user
          for filing, but pointing them to the buddying guidelines
          (which should, of course, be prominently posted on the web
          site).</para>
-->
    <para>
	Inmediatamente responder el reporte, agradeciendo al usuario
	por hacerlo, pero dirigiéndolo a las directrices de apadrinamiento
	(las cuales deberían, por supuesto, estar publicadas en un lugar
	prominente del sitio web.)
	</para>
  </listitem>
  <listitem>
<!--
    <para>If the ticket is clearly valid and not a duplicate, approve it
          anyway, and start it down the normal life cycle.  After all,
          the reporter's now been informed about buddying, so there's
          no point closing a valid ticket and wasting the work done so
          far.</para>
-->
    <para>
	Si el reportes es claramente valido y no un duplicado, hay que
	aprobarlo de todas formas y de esta manera que inicie su
	ciclo de vida normal. Después de todo, quien ha realizado el
	reporte ya ha sido informado sobre el apadrinamiento, así que
	no tiene sentido perder el trabajo ya hecho al cerrarlo como
	invalido.</para>
  </listitem>
  <listitem>
<!--
    <para>Otherwise, if the ticket is not clearly valid, close it, but
          ask the reporter to reopen it if they get confirmation from
          a buddy.   When they do, they should put a reference to the
          confirmation thread (e.g., a URL into the mailing list
          archives).</para>
-->
    <para>
	Si el problema no es claramente valido, hay que cerrarlo, pero
	solicitando que sea reabierto si reciben la confirmación por
	parte de un padrino. Cuando lo hagan, deberán colocar una
	referencia al hilo de confirmación (por ejemplo, una URL en
	el archivo de la listas de correo).</para>	
  </listitem>
</orderedlist>

<!--
<para>Remember that although this system will improve the signal/noise
ratio in the ticket database over time, it will never completely stop
the misfilings.  The only way to prevent misfilings entirely is to
close off the bug tracker to everyone but developers&mdash;a cure that
is almost always worse than the disease.  It's better to accept that
cleaning out invalid tickets will always be part of the project's
routine maintenance, and to try to get as many people as possible to
help.</para>
-->
<para>Hay que recordar que a pesar de que este sistema mejorara la proporción
señal/ruido en la base de datos de problemas a lo largo del tiempo, nunca
pondrá fin a los reportes inválidos. La única manera de evitar esto
por completo es cerrar el gestor de fallos a todos quienes no sean
desarrolladores&mdash;una cura que casi siempre es peor que la
enfermedad. Es mejor aceptar que la limpieza de reportes inválidos siempre
será una parte de la rutina de mantenimiento del proyecto e intentar obtener
la mayor cantidad de ayuda para hacerlo.</para>

<!--
<para>See also
<xref linkend="issue-manager"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>.</para>
-->
<para>Más en
<xref linkend="issue-manager"/><phrase output="printed"> en el  
<xref linkend="managing-volunteers"/></phrase>.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="irc">
<!--
<title>IRC / Real-Time Chat Systems</title>
-->
<title>IRC / Sistemas de Chat en Tiempo Real</title>

<!--
<para>Many projects offer real-time chat rooms using
<firstterm>Internet Relay Chat</firstterm>
(<firstterm>IRC</firstterm>), forums where users and developers can
ask each other questions and get instant responses.  IRC has been
around for a long time, and its primarily text-based interface and
command language can look old-fashioned&nbsp;&mdash;&nbsp;but don't be
fooled: the number of people using IRC continues to
grow<footnote><para>See <ulink url="http://freenode.net/history.shtml"
>freenode.net/history.shtml</ulink> for example.</para></footnote>,
and it is a key communications forum for many open source projects.
It's generally the only place where developers can meet in a shared
space for real-time conversation on a regular basis.</para>
-->
<para>Muchos proyectos ofrecen salas de chat utilizando <firstterm>Internet
Relay Chat</firstterm> (<firstterm>IRC</firstterm>), foros donde los
usuarios y desarrolladores pueden hacerse preguntas y obtener respuestas
instantáneas. Mientras que se <emphasis>puede</emphasis> llevar un
servidor de IRC para nuestro sitio web, por lo general no vale la pena. En
cambio podemos hacer lo que todo el mundo: crear canales de IRC en
Freenode (<ulink url="http://freenode.net/"/>). Freenode proporciona
el control necesario para administrar los canales IRC del proyecto,
<footnote><para>No es un requerimiento ni tampoco se espera ninguna donación
a Freenode, pero si usted o el proyecto se lo pueden permitir, por favor
considerelo. Son una caridad exenta de impuestos en EE.UU. y proveen
de un servicio muy valioso.</para></footnote>mientras que nos evita
la molestia de tener que mantener un servidor de IRC.</para> 

<!--
<para>If you've never used IRC before, don't be daunted.  It's not
hard; although there isn't space in this book for an IRC primer,
<ulink url="http://irchelp.org/" >irchelp.org</ulink> is a good guide
to IRC usage and administration, and in particular see the tutorial at
<ulink url="http://www.irchelp.org/irchelp/irctutorial.html"
>irchelp.org/irchelp/irctutorial.html</ulink>.  While in theory your
project <emphasis>could</emphasis> run its own IRC servers, it is
generally not worth the hassle.  Instead, just do what everyone else
does: host your project's IRC channels<footnote><para>An IRC
<firstterm>channel</firstterm> is a single "chat
room"&nbsp;&mdash;&nbsp;a shared space in which people can "talk" to
each other using text.  A given IRC server usually hosts many
different channels.  When a user connects to the server, she chooses
which of those channels to join, or her client software remembers and
auto-joins them for her.  To speak to a particular person in an IRC
channel, it is standard to address them by their username
(<firstterm>nickname</firstterm> or <firstterm>nick</firstterm>), so
they can pick out your inquiry from the other conversation in the
room; see <ulink
url="http://www.rants.org/2013/01/09/the-irc-curmudgeon/"
>rants.org/2013/01/09/the-irc-curmudgeon</ulink> for more on this
practice.</para></footnote> at Freenode (<ulink
url="http://freenode.net/" >freenode.net</ulink>).  Freenode gives you
the control you need to administer your project's IRC channels, while
sparing you the not-insignificant trouble of maintaining an IRC server
yourself.</para>
-->

<!--
<para>The first thing to do is choose a channel name.  The most
obvious choice is the name of your project&mdash;if that's available
at Freenode, then use it.  If not, try to choose something as close to
your project's name, and as easy to remember, as possible.  Advertise
the channel's availabity from your project's web site, so a visitor
with a quick question will see it right away.<footnote><para>In fact,
you can even offer an IRC chat portal right on your web site.  See
<ulink url="https://webchat.freenode.net/"
>webchat.freenode.net</ulink>&nbsp;&mdash;&nbsp;from the dropdown menu
in the upper left corner, choose "Add webchat to your site" and follow
the instructions.</para></footnote>.  If your project's channel gets
too noisy, you can divide into multiple channels, for example one for
installation problems, another for usage questions, another for
development chat, etc (<xref linkend="growth"/><phrase
output="printed"> in <xref linkend="communications"/></phrase>
discusses when and how to divide into multiple channels).  But when
your project is young, there should only be one channel, with everyone
talking together.  Later, as the user-to-developer ratio increases,
separate channels may become necessary.</para>
-->
<para>Lo primero que hay que hacer es decidir un nombre para el canal. La
opción más obvia es utilizar el nombre del proyecto&mdash;si es que se
encuentra disponible en Freenode. Si no, se puede utilizar algo lo más
parecido al nombre del proyecto y que sea en lo posible, fácil de recordar.
Hay que publicitar la disponibilidad del canal en el sitio web del proyecto,
de manera que un visitante con una duda pueda verlo rápidamente. Por ejemplo,
esto aparece en un contenedor prominente en la parte de arriba de la página
principal de Subversion:</para>

<!--
<para>How will people know all the available channels, let alone which
channel to talk in?  And when they talk, how will they know what the
local conventions are?</para>
-->

<!--
<para>The answer is to tell them by setting the <firstterm>channel
topic</firstterm>.<footnote><para>To set a channel topic, use the
<literal>/topic</literal> command.  All commands in IRC start with
"<literal>/</literal>".</para></footnote>  The channel topic is a brief
message each user sees when they first enter the channel.  It gives
quick guidance to newcomers, and pointers to further information.  For
example:</para>
-->
<para>La respuesta a todo esto es publicándolo en el <firstterm>tópico
del canal</firstterm>.<footnote><para>Para establecer el tópico del
canal se utiliza el comando "<literal>/topic</literal>. Todos los comandos
en IRC empiezan con el signo "<literal>/</literal>". Si no se está familiarizado
con la utilización y administración de IRC id a <ulink url="http://www.irchelp.org"/>.
Hay un excelente tutorial en
<ulink url="http://www.irchelp.org/irchelp/irctutorial.html"/>.</para></footnote>
El tópico del canal es un breve mensaje que ven todos los usuarios cuando
entran en el canal. Da una guía rápida para los recién llegados y apunta a información
necesaria. Por ejemplo:</para> 

<!--
<screen>
The Apache (TM) Subversion (R) version control system
(http://subversion.apache.org/) | Don't ask to ask; just ask your
question! | Read the book: http://www.svnbook.org/ | No one here? Try
http://subversion.apache.org/mailing-lists |
http://subversion.apache.org/faq | Subversion 1.8.8 and 1.7.16 released
</screen>
-->
<screen>
Ha entrado en #svn

El tema para #svn es Foro para usuarios de Subversion. Más información en
http://subversion.tigris.org/. || Las discusiones sobre el desarrollo
están en #svn-dev. || Por favor, no pegue transcripciones muy largas,
para ello utilice un sitio como http://pastebin.ca/ || Noticias:
Subversion 1.1.0 ha salido, más en http://svn110.notlong.com/
</screen>

<!--
<para>That's terse, but it tells newcomers what they need to know.  It
says exactly what the channel is for, gives the project home page (in
case someone wanders into the channel without having first been to the
project web site), gives a pointer to some documentation, and gives
recent release news.</para>
-->
<para>Es algo tosco, pero informa a quienes entran al canal lo que necesitan
saber. Dice exactamente para lo que es el canal, muestra la página
web del proyecto (en caso de que alguien entre al canal sin antes haber
visitado el sitio web del proyecto), menciona canales relacionados y
da algunas directivas sobre el pegado.</para>

<sidebar id="paste-sites">
<!--
<title>Paste Sites</title>
-->
<title>Sitios de pegado</title>

<!--
<para>An IRC channel is a shared space: everyone can see what everyone
else is saying.  Normally, this is a good thing, as it allows people
to jump into a conversation when they think they have something to
contribute, and allows spectators to learn by watching.  But it
becomes problematic when someone has to provide a large quantity of
information at once, such as a large error message or a transcript
from a debugging session, because pasting too many lines of output
into the room will disrupt other conversations.</para>
-->
<para>Un canal de IRC es un espacio compartido: todos pueden ver lo que
todos escriben. Normalmente esto es algo bueno, ya que permite que la
gente entre en una conversación cuando creen que tienen algo para
contribuir y permite a los espectadores aprender leyendo. Pero puede
tornarse problemático cuando alguien suministra una gran cantidad
de información a la vez, como la transcripción de una sesión de
debugging, porque al pegar muchas lineas de texto en el canal
se interrumpen las conversaciones de otros.</para>

<!--
<para>The solution is to use one of the
<firstterm>pastebin</firstterm> or <firstterm>pastebot</firstterm>
sites.  When requesting a large amount of data from someone, ask them
not to paste it into the channel, but instead to go to (for example)
<ulink url="http://pastebin.ca/" >pastebin.ca</ulink>, paste their
data into the form there, and tell the resulting new URL to the IRC
channel.  Anyone can then visit the URL and view the data.</para>
-->
<para>La solución a esto es el uso de los llamados sitios de pegado
<firstterm>pastebin</firstterm> o <firstterm>pastebot</firstterm>.
Al requerir una gran cantidad de datos de alguien, pida que no los pegue
en el canal, sino que vayan a (por ejemplo) <ulink url="http://pastebin.ca" />,
peguen la información necesaria allí y suministren el nuevo URL resultante
al canal de IRC. Así cualquiera puede visitar la URL y revisar los
datos que allí se encuentran.</para>

<!--
<para>There are many free paste sites available, far too many for a
comprehensive list.  Three that I seen used a lot are GitHub Gists
(<ulink url="https://gist.github.com/" >gist.github.com</ulink>),
<ulink url="http://paste.lisp.org/" >paste.lisp.org</ulink> and <ulink
url="http://pastebin.ca/" >pastebin.ca</ulink>.  But there are many
other fine ones, and it's okay if different people in your IRC channel
choose to use different paste sites.</para>
-->
<para>Existen muchos sitios gratuitos de pegado disponibles, demasiados
para una lista comprensiva, pero aquí hay algunos que he utilizado:
<ulink url="http://www.nomorepasting.com/"/>,
<ulink url="http://pastebin.ca/"/>,
<ulink url="http://nopaste.php.cd/"/>
<ulink url="http://rafb.net/paste/"/>
<ulink url="http://sourcepost.sytes.net/"/>,
<ulink url="http://extraball.sunsite.dk/notepad.php"/>,
y
<ulink url="http://www.pastebin.com/"/>.</para>

</sidebar>

<sect2 id="irc-bots">
<!-- For link compatibility with the old section ID. -->
<anchor id="bots" />
<!--
<title>IRC Bots</title>
-->
<title>Bots de IRC</title>
<!--
<para>Many technically-oriented IRC channels have a non-human member,
a so-called <firstterm>bot</firstterm>, that is capable of storing and
regurgitating information in response to specific commands.
Typically, the bot is addressed just like any other member of the
channel, that is, the commands are delivered by "speaking to" the bot.
For example:</para>
-->
<para>Muchos canales técnicos de IRC tienen un miembro no humano, un tal
llamado <firstterm>bot</firstterm>, el cual es capaz de almacenar y 
regurgitar información en respuesta a comandos específicos. El bot
se parece a un miembro más del canal, esto es, los comandos se hacen llegar
"hablándole" al bot. Por ejemplo:"</para>

<!--
<screen>
&lt;kfogel&gt; wayita: learn diff-cmd = http://subversion.apache.org/faq.html#diff-cmd
&lt;wayita&gt; Thanks!
</screen>
-->
<screen>
&lt;kfogel&gt; ayita: learn diff-cmd = http://subversion.tigris.org/faq.html#diff-cmd
&lt;ayita&gt;  Thanks!
</screen>

<!--
<para>That told the bot, who is logged into the channel as wayita, to
remember a certain URL as the answer to the query "diff-cmd" (wayita
responded, confirming with a "Thanks!").  Now we can address wayita,
asking the bot to tell another user about diff-cmd:</para>
-->
<para>Esto le ha dicho al bot (el cual está en el canal como ayita)
que recuerde cierto URL como la respuesta a la pregunta "diff-cmd". Ahora
podemos dirigirnos a ayita pidiendole al bot que le diga a otro usuario
acerca de diff-cmd:</para>

<!--
<screen>
&lt;kfogel&gt; wayita: tell jrandom about diff-cmd
&lt;wayita&gt; jrandom: http://subversion.apache.org/faq.html#diff-cmd
</screen>
-->
<screen>
&lt;kfogel&gt; ayita: tell jrandom about diff-cmd
&lt;ayita&gt;  jrandom: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<!--
<para>The same thing can be accomplished via a convenient shorthand:</para>
-->
<para>Lo mismo puede ser logrado con un comando más corto:</para>

<!--
<screen>
&lt;kfogel&gt; !a jrandom diff-cmd
&lt;wayita&gt; jrandom: http://subversion.apache.org/faq.html#diff-cmd
</screen>
-->
<screen>
&lt;kfogel&gt; !a jrandom diff-cmd
&lt;ayita&gt;  jrandom: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<!--
<para>The exact command set and behaviors differ from bot to bot
(unfortunately, the diversity of IRC bot command languages seems to be
rivaled only by the diversity of wiki syntaxes).  The above example
happens to be with <literal>wayita</literal> (<ulink
url="http://repos.borg.ch/svn/wayita/trunk/"
>repos.borg.ch/svn/wayita/trunk</ulink>), of which there is usually an
instance running in <literal>#svn</literal> at Freenode, but there are
many other IRC bots available.  Note that no special server privileges
are required to run a bot.  A bot is just like any other user joining
a channel.</para>
-->
<para>El conjunto exacto de comandos y conductas difieren entre bots. El
ejemplo anterior utiliza <literal>ayita</literal>
(<ulink url="http://hix.nu/svn-public/alexis/trunk/"/>), del cual
existe una instancia en <literal>#svn</literal> en Freenode. Otros
bots son Dancer
(<ulink url="http://dancer.sourceforge.net/"/>) y Supybot
(<ulink url="http://supybot.com/"/>). No son necesarios privilegios
específicos en el servidor para ejecutar un bot. Un bot es un programa
cliente; cualquiera puede fijar y dirigirlo para que escuche en un
servidor/canal en particular.</para>

<!--
<para>If your channel tends to get the same questions over and over,
I highly recommend setting up a bot.  Only a small percentage of
channel users will acquire the expertise needed to manipulate the bot,
but those users will answer a disproportionately high percentage of
questions, because the bot enables them to respond so much more
efficiently.</para>
-->
<para>Si el canal del proyecto tiende a recibir las mismas preguntas
una y otra vez, recomiendo utilizar un bot. Sólo un pequeño porcentaje
de usuarios del canal adquirirán la habilidad necesaria para manejar el
bot, pero serán los que sí lo hagan quienes responderán a una cantidad
desproporcionada de preguntas, porque el bot permite que sean respondidas
con mayor eficiencia.</para>

<sect3 id="irc-commit-notifications">
<!-- For link compatibility with the old section ID. -->
<anchor id="cia" />
<!--
<title>Commit Notifications in IRC</title>
-->

<!--
<para>You can also configure a bot to watch your project's version
control repository and broadcast commit activity to the relevant IRC
channels.  Though of somewhat less technical utility than commit
emails, since observers might or might not be around when a commit
notice pops up in IRC, this technique is of immense
<emphasis>social</emphasis> utility.  People get the sense of being
part of something alive and active, and feel that they can see
progress being made right before their eyes.  And because the
notifications appear in a shared space, people in the chat room will
often react in real time, reviewing the commit and commenting on it on
the spot.  The technical details of setting this up are beyond the
scope of this book, but it's usually worth the effort.  This service
used to be provided in an easy-to-use way by the much-missed <ulink
url="http://cia.vc/" >cia.vc</ulink>, which shut down in 2011, but
several replacements are available: Notifico (<ulink
url="http://n.tkte.ch/" >n.tkte.ch</ulink>), Irker (<ulink
url="http://www.catb.org/esr/irker/" >catb.org/esr/irker</ulink>), and
KGB (<ulink url="http://kgb.alioth.debian.org/"
>kgb.alioth.debian.org</ulink>).</para>
-->

</sect3>

</sect2>

<sect2 id="irc-archiving">
<!--
<title>Archiving IRC</title>
-->
<title>Archivando IRC</title>

<!--
<para>Although it is possible to publicly archive everything that
happens in an IRC channel, it's not necessarily expected.  IRC
conversations are nominally public, but many people think of them as
informal and ephemeral conversations.  Users may be careless with
grammar, and often express opinions (for example, about other software
or other programmers) that they wouldn't want preserved forever in a
searchable online archive.  Of course, there will sometimes be
<emphasis>excerpts</emphasis> that get quoted elsewhere, and that's
fine.  But indiscriminate public logging may make some users uneasy.
If you do archive everything, make sure you state so clearly in the
channel topic, and give a URL to the archive.</para>
-->
<para>Aunque es posible archivar todo lo que sucede en los canales de
IRC, no es algo necesario. Las conversaciones en IRC pueden ser
públicas, por lo que muchas personas piensan en ellas como conversaciones
informales semi-privadas. Los usuarios puede que no cuiden la gramática
y a veces expresen opiniones (por ejemplo, acerca del software o sobre
otros desarrolladores) que no querrán que sean preservadas eternamente
en un archivo en línea.</para>

<para>Por supuesto que existen <emphasis>extractos</emphasis> que deberían
ser preservados. Muchos de los clientes de IRC pueden registrar conversaciones
a un fichero bajo demanda por el usuario, o si esto falla, se puede
copiar y pegar la conversación del IRC a otro foro permanente
(a menudo, el bug tracker). Pero el registro indiscriminado puede incomodar
a algunos usuarios. Si se archiva todo, hay que declararlo claramente en el
tópico del canal y proporcionar una URL del archivo.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="rss">
<!--
<title>RSS Feeds</title>
-->

<!--
<para><firstterm>RSS</firstterm> (Really Simple Syndication) is a
mechanism for distributing meta-data-rich news summaries to
"subscribers", that is, people who have indicated an interest in
receiving those summaries.  A given RSS source is usually called
a <firstterm>feed</firstterm>, and the user's subscription interface
is called a <firstterm>feed reader</firstterm> or <firstterm>feed
aggregator</firstterm>.  <ulink url="http://www.rssbandit.org/">RSS
Bandit</ulink> and the eponymous
<ulink url="http://www.feedreader.com/">Feedreader</ulink> are two
open source RSS readers, for example.</para>
-->

<!--
<para>There is not space here for a detailed technical explanation of
RSS<footnote><para>See
<ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html"
>xml.com/pub/a/2002/12/18/dive-into-xml.html</ulink>
for that.</para></footnote>, but you should be aware of two main
things.  First, the feed reading software is chosen by the subscriber
and is <emphasis>the same</emphasis> for all the feeds that subscriber
monitors&nbsp;&mdash;&nbsp;in fact, this is the major selling point of
RSS: that the subscriber chooses one interface to use for all their
feeds, so each feed can concentrate just on delivering content.
Second, RSS is now ubiquitous, so much so that most people who use it
don't even know they're using it.  To the world at large, RSS looks
like a little button on a web page, with a label saying "Subscribe to
this site" or "News feed".  You click on the button, and from then on,
your feed reader (which may well be an applet embedded in your home
page) automatically updates whenever there's news from the
site.</para>
-->

<!--
<para>This means that your open source project should probably offer
an RSS feed (note that many of the canned hosting
sites&nbsp;&mdash;&nbsp;see
<xref linkend="canned-hosting"/>&nbsp;&mdash;&nbsp;offer it right out
of the box).  Be careful not to post so many news items each day that
subscribers can't separate the wheat from the chaff.  If there are too
many news events, people will just ignore the feed, or even
unsubscribe in exasperation.  Ideally, a project would offer separate
feeds, one for big announcements, another following (say) events in
the ticket tracker, another for each mailing list, etc.  In practice,
this is hard to do well: it can result in interface confusion both for
visitors to the project's web site and for the administrators.  But at
a minimum, the project should offer one RSS feed on the front page,
for sending out major announcements such as releases and security
alerts.<footnote><para>Credit where credit is due: this section wasn't
in the first published edition of the book, but Brian Aker's blog
entry
<ulink url="http://krow.livejournal.com/564980.html">"Release Criteria,
Open Source, Thoughts On..."</ulink> reminded me of the usefulness of
RSS feeds for open source projects.</para></footnote></para>
-->

<!-- TODO Rex Karz recommends http://lzone.de/liferea/ as a mature
     feedreader; is using it as a replacement for Google Reader.
     Not sure if we want to recommend feed readers though. -->

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="wikis">
<!--
<title>Wikis</title>
-->
<title>Wikis</title>

<!--
<para>When open source software project wikis go bad, they usually go
bad for the same reasons: lack of consistent organization and editing,
leading to a mess of outdated and redundant pages, and lack of clarity
on who the target audience is for a given page or section.</para>
-->

<!--
<para>A well-run wiki can be a wonderful thing for users, however, and
is worth some effort to maintain.  Try to have a clear page
organization strategy and even a pleasing visual layout, so that
visitors (i.e., potential editors) will instinctively know how to fit
their contributions in.  Make sure the intended audience is clear at
all times to all editors.  Most importantly, document these standards
in the wiki itself and point people to them, so editors have somewhere
to go for guidance.  Too often, wiki administrators fall victim to the
fantasy that because hordes of visitors are individually adding high
quality content to the site, the sum of all these contributions must
therefore also be of high quality.  That's not how collaborative
editing works.  Each individual page or paragraph may be good when
considered by itself, but it will not be good if embedded in a
disorganized or confusing whole.</para>
-->

<!--
<para>In general, wikis will amplify any failings that are present
from early on, since contributors tend to imitate whatever patterns
they see in front of them.  So don't just set up the wiki and hope
everything falls into place.  You must also prime it with well-written
content, so people have a template to follow.</para>
-->

<!--
<para>The shining example of a well-run wiki is Wikipedia, of course,
and in some ways it makes a poor example because it gets so much more
editorial attention than any other wiki in the world.  Still, if you
examine Wikipedia closely, you'll see that its administrators laid a
<emphasis>very</emphasis> thorough foundation for cooperation.  There
is extensive documentation on how to write new entries, how to
maintain an appropriate point of view, what sorts of edits to make,
what edits to avoid, a dispute resolution process for contested edits
(involving several stages, including eventual arbitration), and so
forth.  They also have authorization controls, so that if a page is
the target of repeated inappropriate edits, they can lock it down
until the problem is resolved.  In other words, they didn't just throw
some templates onto a web site and hope for the best.  Wikipedia works
because its founders give careful thought to getting thousands of
strangers to tailor their writing to a common vision.  While you may
not need the same level of preparedness to run a wiki for a free
software project, the spirit is worth emulating.</para>
-->

<sect2 id="wiki-spam">
<!--
<title>Wikis and Spam</title>
-->

<!--
<para>Never allow open, anonymous editing on your wiki.  The days when
that was possible are <emphasis>long</emphasis> gone now; today, any
open wiki other than Wikipedia will be covered completely with spam in
approximately 3 milliseconds.  (Wikipedia is an exception because it
has an exceptionally large number of readers willing to clean up spam
quickly, and because it has a well-funded organization behind it
devoted to resisting spam using various large-scale monitoring
techniques not practically available to smaller projects.)</para>
-->

<!--
<para>All edits in your project's wiki must come from registered
users; if your wiki software doesn't already enforce this by default,
then configure it to enforce that.  Even then you may need to keep
watch for spam edits from users who registered under false pretences
for the purpose of spamming.</para>
-->

</sect2>

<sect2 id="wiki-choosing">
<!--
<title>Choosing a Wiki</title>
-->

<!--
<para>If your project is on GitHub or some other free hosting site,
it's usually best to use the built-in wiki feature that most such
sites offer.  That way your wiki will be automatically integrated with
your repository or other project permissions, and you can rely on the
site's user account system instead of having a separate registration
system for the wiki.</para>
-->

<!--
<para>If you are setting up your own wiki, then you're free to choose
which one, and fortunately there are plenty of good free software wiki
implementations available.  I've had good experience with DokuWiki
(<ulink url="https://www.dokuwiki.org/dokuwiki"
>dokuwiki.org/dokuwiki</ulink>), but there are many others.  There is
a wonderful tool called the Wiki Choice Wizard at <ulink
url="http://www.wikimatrix.org/" >wikimatrix.org</ulink> that allows
you to specify the features you care about (an open source license can
be one of them) and then view a chart comparing all the wiki software
that meets those criteria.  Another good resource is Wikipedia's own
list of wikis: <ulink
url="http://en.wikipedia.org/wiki/List_of_wiki_software"
>en.wikipedia.org/wiki/List_of_wiki_software</ulink>.</para>
-->

<!--
<para>I do not recommend using MediaWiki (<ulink
url="https://www.mediawiki.org" >mediawiki.org</ulink>) as the wiki
software for most projects.  MediaWiki is the software on which
Wikipedia itself runs, and while it is very good at that, its
administrative facilities are tuned to the needs of a site unlike any
other wiki on the Net&nbsp;&mdash;&nbsp;and actually not so well-tuned
to the needs of smaller editing communities.  Many projects are
tempted to choose MediaWiki because they think it will be easier for
users who already know its editing syntax from having edited at
Wikipedia, but this turns out to be an almost non-existent advantage
for several reasons.  First, wikis in general, including Wikipedia,
are tending toward rich-text in-browser editing anyway, so that no one
really needs to learn the underlying wiki syntax unless they aim to be
a power user.  Second, many other wikis offer a MediaWiki-syntax
plugin, so you can have that syntax anyway if you really want it.
Third, for those who will use a plaintext syntax instead of rich-text
editing, it's better to use a standardized generic markup format like
Markdown (<ulink url="http://daringfireball.net/projects/markdown/"
>daringfireball.net/projects/markdown</ulink>), which is available in
many wikis either natively or via a plugin, than to use a wiki syntax
of any flavor.  If you support Markdown, then people can edit in your
wiki using the same markup syntax they already know from GitHub and
other popular tools.</para>
-->

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="q-and-a-forums">
<!--
<title>Q&amp;A Forums</title>
-->

<!--
<para>In the past few years, online question-and-answer forums (or
<firstterm>Q&amp;A forums</firstterm>) have gone from being an
afterthought offered by the occasional project to an increasingly
expected and normal component of user-facing services.  A high-quality
Q&amp;A forum is like a FAQ with nearly real-time
updates&nbsp;&mdash;&nbsp;indeed, if your Q&amp;A forum is
sufficiently healthy, it often makes sense to either use it directly
as your project's FAQ, or have the FAQ consist mostly of pointers to
the forum's most popular items.</para>
-->

<!--
<para>A project can certainly host its own forums, and many do, using
free software such as <ulink url="http://askbot.com" >Askbot</ulink>,
<ulink url="http://osqa.net" >OSQA</ulink>, <ulink
url="http://shapado.com/" >Shapado</ulink>, or <ulink
url="http://www.coordino.com/" >Coordino</ulink>.  However, there are
also some third-party services that aggregate questions and answers,
the best-known of which, <ulink url="http://stackoverflow.com/"
>stackoverflow.com</ulink>, frequently has its answers coming up first
in generic search engine results for popular questions.</para>
-->

<!--
<para>While Stack Overflow hosts Q&amp;A about many things, not just
about open source projects, it seems to have found the right
combination of cultural guidelines and upvoting/downvoting features to
enable its contributors to quickly narrow in on good answers for
questions about open source software in particular.  (The questions
and answers on Stack Overflow are freely licensed, although the code
that runs the site itself is not open source.)  On the other hand,
projects that host their own Q&amp;A forums are lately doing pretty
well in search engine results too.  It may be that the current
dominance of Stack Overflow, as of this writing in 2014, is partly
just an accident of timing, and that the real lesson is that
Q&amp;A-style forums are an important addition to the free software
project communications toolbox&nbsp;&mdash;&nbsp;one that scales
better with user base than many other tools do.</para>
-->

<!--
<para>There is no definite answer to the question of whether or when
you should set up dedicated Q&amp;A forums for your project.  It
depends on available resources, on the type of project, the
demographics of the user community, etc.  But do keep an eye out for
Stack Overflow results, or other third-party results, coming up in
generic question-style searches about your project. Their presence may
indicate that it's time to consider setting up a dedicated Q&amp;A
forum.  Whether you do or not, the project can still learn a lot from
looking at what people are asking on Stack Overflow, and at the
responses.</para>
-->

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="social-networking">
<!--
<title>Social Networking Services</title>
-->

<!--
<para><emphasis>24 March 2013: If you're reading this note, then
you've encountered this section while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis></para>
-->

<!--
<para>poss2 tbd: subsections for Twitter, Facebook, any others.
Twitter is useful; Facebook appears not to be so relevant to open
source projects but check this with people who use it more.  Identi.ca
(if will persist).  Others?  Eventbrite (mention from
"meeting-in-person" section), what else?  Acknowledge that many of
these services are not open source; times have changed, the train has
left the barn or the horse has left the station or whatever.  One good
example: LibreOffice's "@AskLibreOffice" tweet stream at <ulink
url="https://twitter.com/AskLibreOffice"
>twitter.com/AskLibreOffice</ulink>.  See also <ulink
url="http://ask.libreoffice.org/en/questions/"
>ask.libreoffice.org</ulink>
</para>
-->

<!-- ======================== SECTION ============================== -->

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

