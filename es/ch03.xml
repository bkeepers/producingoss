<chapter id="technical-infrastructure">

<title>Infraestructura Técnica</title>

<simplesect>

<para>Los proyectos de software libre dependen en la tecnología
que aportan la captura selectiva e integral de información.
Mientras mejor se sea usando estas tecnologias y persuadiendo a otros
para utilizarlas, mayor será el exito del proyecto. Esto se vuelve más
cierto mientras el proyecto crece. Un buen manejo de la información es
lo que previene a un proyecto open source de colapsar bajo el peso
de la Ley de Brook,<footnote><para>De su libro<citetitle>El mes mítico
del hombre</citetitle>, 1975. Más en <ulink
url="http://en.wikipedia.org/wiki/The_Mythical_Man-Month"/> y en
<ulink url="http://en.wikipedia.org/wiki/Brooks_Law"/>.</para></footnote>
la cual afirma que asignar fuerza de trabajo adicional a un proyecto 
retrasado lo demorará aún más. Fred Brooks observó que la complejidad
de un proyecto se incrementa al<emphasis>cuadrado</emphasis>del
número de participantes. Cuando solo unas pocas personas estan
involucradas, todos pueden hablar entre todos facilmente, pero cuando
cientos de personas estan involucradas, ya no es posible que cada uno
de los individuos se mantengan constantemente al tanto de lo que todos
los demás estan haciendo. Si dirigir bien un proyecto de software libre
se trata de hacer que todos se sientan como si estuviesen trabajando
juntos en la misma habitación, es obvio preguntar: ¿Qué sucederia si
todas las personas en una habitación atestada de gente hablase a la vez?
</para>

<para>Este problema no es nuevo. En una habitación no metaforica
atestada, la solución es <firstterm>un procedimiento parlamentario
</firstterm>: guias formales acerca de como tener discusiones en tiempo
real en grupos grandes, como asegurarse de que las disensiones más
importantes no se pierdan entre comentarios irrelevantes, como formar
subcomites, como reconocer cuando se toman decisiones, etc. Las partes
más importantes en un procedimiento parlamentario especifícan como
deben interactuar los grupos con su sistema de manejo de información.
Algunos comentarios se hacen para el registro, otros no. El registro
mismo es sujeto a manipulación directa y se entiende que no es una
transcripción litelar de lo que ha ocurrido, sino que es una
representación a lo que el grupo está dispuesto a <emphasis>acordar
</emphasis> sobre lo sucedido. El registro no es monolítico, sino
que toma diferentes formas para diferentes propositos. Comprende los
minutos de encuentros individuales, una colección completa de todos
los minutos de todos los encuentros, sumarios, agendas y sus
anotaciones, reportes de comites, reportes de corresponsales no
presentes, listas de acción, etc.</para>

<para>Dado que Internet no es realmente una habitación, no debemos
preocuparnos acerca de replicar aquellas partes de los procesos
parlamentarios que mantiene a algunas personas calladas mientras
las demás hablan. Pero cuando nos referimos a tecnicas de manejo de
la información, proyectos open source bien dirigidos son como
procesos parlamentarios en esteroides. Ya que todas las comunicaciones
en los proyectos open source suceden por escrito, sistemas muy 
elaborados han evolucionado para enrutar y etiquetar apropiadamente
los datos, para minimizar las repeticiones de forma que se eviten
divergencias espuriosas, para almacenar y buscar los datos, para
correjir información incorrecta u obsoleta y para
asociar bits dispares de informaciñon con cada uno mientras que nuevas
conexiones son observadas. Los participantes activos en los proyectos
open source internalizan muchas de estas técnicas y a menudo realizaran
complejas labores manuales para asegurar que la información sea dirigida
correctamente. Pero todo el esfuerzo depende al final de un sofisticado
soporte informático. Tanto que sea posible, los mismos medios
de comunicación deben realizar éste enrutamiento, etiquetado y 
registro y deberia mantener la información al alcance de los humanos
de la manera más conveniente posible. En la práctica, por supuesto,
los humanos siguen necesitando intervenir en muchos puntos durante
el proceso y tambien es importante que estos programas hagan ésta intervención
lo más conveniente. Pero por lo general, si los humanos se encargan de
etiquetar y enrutar información acertadamente desde su primera entrada
en el sistema, entoces el software deberia estar configurado para dar
el máximo uso posible a esa metadata.</para>

<para>El consejo de éste capítulo es intensamente práctico, basado en
las experiencias con aplicaciones y patrones específicos. Pero el objetivo
no es sólo enseñar una colección particular de tecnicas. Es tambien
demostrar, utilizando pequeños ejemplos, la actitud general que mejor
fomentará el correcto uso de los sistemas de manejo de información
en el proyecto. Esta actitud incluye una combinación de habilidades
tecnicas y don de gentes. Las habilidades tecnicas son escenciales
porque las aplicaciones de manejo de información siempre requieren
cierta configuración y además una cierta cantidad de mantenimiento
y puesta apunto mientras nuevas necesidades vayan surgiendo (por ejemplo,
mirad la discución de como manejar el crecimiento del proyecto en
<xref linkend="bug-filtering"/><phrase output="printed"> más adelante
en éste capítulo</phrase>). El don de gentes es necesario porque la
comunidad humana tambien requiere de cierto mantenimiento: no siempre
es inmediatamente obvio como utilizar estas herramientas para obtener
una ventaja completa y en algunos casos los proyectos tienen convenciones
conflictivas (por ejemplo, la discución de como crear cabeceras
<systemitem>Reply-to</systemitem> en los mensajes salientes de las
lista de correos, en <xref linkend="mailing-lists"/>).
Todos los involucrados en el proyecto van a necesitar ser animados,
en el momento correcto de la forma correcta, para que sigan manteniendo
la información del proyecto bien organizada. Mientras más involucrado
esté el contribuyente, más complejas y especializadas serán las tecnicas
que se esperará que aprendan.</para>

<para>El manejo de información no tiene soluciones rápidas ya que existen
demasiadas variables. Pueden que finalmente se tenga todo configurado
justo como se desea y tener a la mayoria de la comunidad participando
pero luego el crecimiento del proyecto hace de estas practicas inescalables.
El puede que el crecimiento del proyecto se estabilice y que la comunidad
de usuarios y desarrolladores acuerden una relación confortable con
la infraestructura técnica pero llega alguien e inventa un nuevo servicio
de manejo de información completo y pronto muchos de los recien llegados
empezarán a preguntar que por qué no es utilizado en el proyecto&mdash;
por ejemplo, esto está sucediendo mucho ultimamente en proyectos de software
libre que son anteriores a la invención del Wiki (más en
<ulink url="http://en.wikipedia.org/wiki/Wiki"/>). Muchas cuestiones son
materia de juicio, incluyendo las desvintajas entre la conveniencia de
aquellos generando información y la conveniencia de aquellos quienes la
consumen o entre el tiempo requerido para configurar el software de
manejo de la información y los beneficios que le brinda al proyecto.</para>

<para>Cuidado con la tentación de automatizar demasiado, esto es,
automatizar cosas que realmente requieren de atención por parte de los
humanos. La infraestructura técnica es importante, pero lo que hace que
los proyectos de software libre funcionar es el cuidado&mdash;y la
expresión inteligente de éste cuidado&mdash;de los humanos involucrados.
Principalmente, la infraestructura técnica está para ofrecer medios
convenientes para hacer esto.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="tools-needed">
<title>Lo que necesita un proyecto</title>

<para>La mayoria de los proyectos open source ofrecen al menos un mínimo
y estándar set de herramientas para manejar información:</para>

<variablelist>

   <varlistentry><term>Sitio Web</term>
     <listitem>
     <para>
	Principalmente, conducto de información centralizado
	en un sentido del proyecto para el público. El sitio
	web puede tambien servir como una interface para
	otras herramientas del proyecto.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Listas de Correo</term>
     <listitem>
       <para>
	Usualmente es el foro de comunicación más activo
	del proyecto y el "medio de registro."</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Control de Versiones</term>
     <listitem>
       <para>
	Permite a los desarrolladores realizar cambios al código
	convenientemente, incluso retroceder y exportar cambios.
	Le permite a todos mirar lo que está sucediendo con el
	código.</para>
     </listitem>
   </varlistentry>

   <varlistentry><term>Gestión de fallos</term>
     <listitem>
       <para>
	Permite a los desarrolladores mantener un registro de en qué
	estan trabajando, coordinandose entre ellos y planear
	lanzamientos. Permite que todo el mundo pueda realizar
	busquedas acerca del estado de los fallos y registrar
	información (p.e. recetas reproducibles) acerca de fallos
	en particular. Puede ser utilizado para seguir no solo
	fallos, sino tambien lanzamientos, tareas, 
	nuevas características,etc.</para>
     </listitem>
   </varlistentry>

<!--
   <varlistentry><term>Discussion forums</term>
     <listitem>
       <para><remark>Basically, bulletin board systems.  These are not
             as widespread as one would expect, and where they are
             found, they're not used as much as one would expect.  Why?
             Are they worth mentioning at all?</remark></para>
     </listitem>
   </varlistentry>
-->

   <varlistentry><term>Chat en tiempo real</term>
     <listitem>
       <para>
	Un sitio para discusiones rápidas, sencillas e
	intercambios de preguntas/respuestas. No siempre
	se archiva completamente.</para>
     </listitem>
   </varlistentry>

</variablelist>
<para>Cada una de estas herramientas está dirigida a distintas necesidades,
pero sus funciones estan tambien interelacionadas y se debe hacer que
estas herramientas trabajen en conjunto. Más abajo examinaremos como podemos
lograr esto y más importante aun como hacer que las personas se acostumbren
a usarlas. El sitio web no se discute hasta el final, ya que actua más como
un pegamento para otros componentes que como una herramienta en sí.</para>

<para>Se pueden evitar muchos dolores de cabeza por escoger y configurar
estas herramientas si en su lugar utilizamos un <firstterm>hosting enlatado
</firstterm>: un servicio que ofrece todas las herramientas necesarias
para un proyecto open source ya listas para su uso gracias a plantillas y
empaquetado. Más en <xref linkend="canned-hosting"/><phrase output="printed">
a continuación en éste mismo capítulo</phrase> para una discusión más
profunda acerca de ventajas y desventajas de estas soluciones.</para>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="mailing-lists">
<title>Listas de correo</title>

<para>Las listas de correo son el pan y la mantequilla de las comunicaciones
del proyecto. Si algún usuario es expuesto a algún foro aparte de las
paginas web, probablemente sea la lista de correos del proyecto. Pero
antes de trabajar con las listas en si mismas, deben tomar experiencia
con la interface&mdash;esto es, el mecanismo por el cual se pueden
unir ("suscribirse a") a la lista. Esto nos brinda la regla número
uno de las listas de correo:</para>

<blockquote>
   <para><emphasis>
	No intentes dirigir las listas de correo a mano&mdash;consigue
	un software de manejo de listas.
	</emphasis></para>
</blockquote>

<para>Será tentador dejar esto de lado. Configurar un software
para listas de correo puede parecer demasiado difícil al principio.
Manejar listas pequeñas de bajo tráfico a mano puede parecer
seductor al principio: sólo hay que montar una lista de suscripción
que te reenvia todo y cuando alguien envia un mensaje, se agrega (o
elimina) su dirección de correo en algún tipo de fichero de texto
que almacena todas las direcciones de la lista. ¿Qué podría ser
más sencillo?</para>

<para>El truco está en hacer un buen manejo de las listas
de correo&mdash;lo cual no es lo que la gente espera&mdash;
no es nada sencillo. No es solo sobre suscribir y desuscribir
usuarios cuando lo solicitan. Tambien es sobre moderar para prevenir
SPAM, ofrecer la lista resumida en lugar de mensaje por mensaje,
proporcinar una lista estándar e información del proyecto a traves
de auto respuestas y muchas otras cosas. Un ser humano monitorizando
las direcciones de suscripción es solo una pequeña parte del mínimo
de funcionalidad e incluso así, no es la forma más segura y puntual
que un software podría ofrecer.</para>

<para>Un software para el manejo de listas de correo usualmente
ofrece las siguientes características:</para>

<variablelist>

  <varlistentry><term>Suscripción a traves de correos o basada en web</term>
    <listitem>
      <para>
	Cuando un usuario se suscribe a la lista, deberia
	recibir una respuesta de bienvenida <emphasis>sin demora</emphasis>,
	explicandole como seguir interactuando con el software
	y (más importantemente) con eliminar la suscripción.
	Esta respuesta automática puede ser modificada para
	contener información específica del proyecto, por
	supuesto, como el sitio web, localización del FAQ,
	etc.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>
	Suscripción al modo de resumenes o al modo
	de mensaje por mensaje</term>
    <listitem>
      <para>
	En modo resumen, el suscriptor recibe un correo conteniendo
	toda la actividad de la lista en ese día. Para aquellos
	quienes desean seguir la lista indirectamente, sin participar,
	el modo resumen es a menudo el preferible, porque les permite
	revisar todos los temas a la vez y evitar las distracciones
	de los correos que llegan en momentos al azar.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Características para la moderación</term>
    <listitem>
      <para>
	Moderar es revisar los mensajes para asegurar que: a)&nbsp;no&nbsp;
	es SPAM y b)&nbsp;en&nbsp;tema, antes de que lleguen a la lista. 
	La moderación incluye necesariamente a seres humanos, pero el
	software puede hacer mucho para hacerlo más sencillo. Se discute
	más acerca de la moderación luego.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Interfaz Administrativa</term>
    <listitem>
      <para>
	Entre otras cosas, le permite a un administrador eliminar
	direcciones obsoletas facilmente. Esto puede hacerse utgentemente
	cuando la dirección del receptor empieza a enviar respuestas
	automáticas del tipo "Ya no tengo ésta dirección de correo"
	a la lista en respuesta a cada mensaje. (Algunas aplicaciones
	para listas de correo pueden incluso detectar esto por si
	mismas y eliminar la suscripción de ésta persona automaticamente.)
	</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Manipulación de las cabeceras</term>
    <listitem>
      <para>
	Muchas personas tienen sofisticados filtros y reglas de respuestas
	configuradas en sus clientes de correo. Las aplicaciones de
	listas de correo pueden añadir y manipular ciertas cabeceras
	estándar de las que estas personas se puedan beneficiar (más
	detalles a continuación).</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Archivo</term>
    <listitem>
      <para>All posts to the managed lists are stored and made
	Todos los mensajes enviados a las listas son almacenados
	y hechos públicos en la web. Alternativamente, algunas
	aplicaciones de software para listas de correo ofrecen
	interfaces especiales para conectar alguna herramienta
	externa de archivo como MHonArc
	(<ulink url="http://www.mhonarc.org/"/>). Al igual 
	<xref linkend="using-archives"/><phrase output="printed">
	en <xref linkend="communications"/></phrase> se discute
	que el archivo es crucial.</para>
    </listitem>
  </varlistentry>

</variablelist>
<para>El objetivo de todo esto es sencillamente enfátizar que la
administración de las listas de correo es un problema complejo sobre
el cual se ha pensado mucho y que está casi resuelto. Ciertamente
no es necesario convertirse en un experto, pero hay que reseñar que
siempre hay lugar para el aprendizaje y que la administración de las
listas ocupara algo de atención de vez en cuando durante la duración
del proyecto. A continuación examinaremos algunos de los problemas
más comunes que podemos encontrar al configurar las listas de correo.
</para>

<!-- ========================== subsection =========================== -->
<sect2 id="spam-prevention">
<title>Prevenir el Spam</title>

<para>Entre el momento cuando ésta frase es escrita y cuando es
publicada, el problema a lo largo y ancho de Internet el problema
del Spam probablemente sea el doble de severo&mdash;o al menos
parecera que es asi. Hubo una epoca, no mucho tiempo atras, cuando
se podía administrar una lista de correos sin la necesidad de tomar
medidas para prevenir el Spam. Algún mensaje extraviado ocasional
aparecia pero con tan poca frecuencia que solo era una molestia
de bajo nivel. Esa epoca ya es historia. Hoy, las listas de correo
que no toman medidas preventivas en contra del Spam se verá
sumergida rapidamente en correo basura hasta el punto de ser inutil.
Prevenir el Spam es una prioridad.</para>

<para>La prevención de Spam se divide en dos categorias: prevenir
que mensajes basura aparezcan en la lista y prevenir que la lista
sea utilizada como fuente de nuevas direcciones de correo para los
spammers. La primera es la más importante, asi que la examinaremos
primero.</para>

<sect3 id="spam-filtering">
<title>Filtrado de los mensajes</title>

<para>Existen tres tecnicas básicas para prevenir mensajes basura y
muchas aplicaciones para listas ofrecen las tres. Lo mejor es utilizarlas
en tandem:</para>

<orderedlist>

  <listitem><para><emphasis role="bold">Sólo permitir automaticamente
		mensajes de los suscriptores a la lista.
            	</emphasis></para>

            <para>
		Esto es efectivo hasta cierto punto y necesita
		de poca administración ya que usualmente es sólo
		cuestión de cambiar algunos puntos en la configuración
		de la aplicación de listas. Hay que apuntar que
		aquellos mensajes que no son aprobados automaticamente
		no deben ser desechados. En su lugar, deben ser
		moderados por dos razones. Primero, se deben permitir
		mensajes de quienes no estan suscritos. Alguna
		persona con una pregunta o sugerencia no deberia
		tener que suscribirse a la lista para enviar un solo
		mensaje. Segundo, incluso quienes estan suscritos
		envian mensajes desde cuentas diferentes de la que
		han utilizado para suscribirse. Las direcciones de
		correo electrónico no son un método eficaz para
		identificar a las personas y no debe ser utilizado
		para esto.</para>
            </listitem>

  <listitem><para><emphasis role="bold">Filtrar los mensajes utilizando
		un programa de filtro de spam.</emphasis></para>
		<para>Si la aplicación de listas de correo lo permite (la mayoria
		lo hace) se pueden filtrar los mensajes utilizando un filtro
		anti-spam. El filtrado automático de Spam no es perfecto, y
		nunca lo será, ya que existe un pulso sin fin entre los
		spammers y los escritores de filtros. A pesar de esto, se puede
		reducir enormemente la cantidad de Spam que llega a la cola
		de moderación y dado que mientras más larga sea ésta cola, se
		necesitaran más tiempo examinandola, así que cualquier filtrado
		automático es beneficioso.</para>

		<para>No hay lugar suficiente para unas instrucciones detalladas
		sobre como configurar filtros de Spam. Habrá que consultar la
		documentación de la aplicación de listas de correo para esto
		(en <xref linkend="mailing-list-software"/><phrase output="printed">
		más adelante en éste capítulo</phrase>). Las aplicaciones para
		listas vienen con características para la prevención de Spam,
		pero quizas sería una buena ídea añadir una solución de un
		tercero. He tenido buenas experiencias con estas dos:
		SpamAssassin (<ulink url="http://spamassassin.apache.org/"/>)
		y SpamProbe (<ulink url="http://spamprobe.sourceforge.net/"/>).
		Esto no es una crítica contra otros filtros anti spam open
		source que al parecer son muy buenos tambien. Sucede que sólo
		he tenido la oportunidad de utilizar estos dos y estar
		satisfecho con ellos.</para>
  </listitem>

  <listitem><para><emphasis role="bold">Moderación.</emphasis></para>
		<para>Para aquellos correos que no son automaticamente
		aceptados por su virtud de ser enviados por un suscriptor
		a la lista y que pasan a traves del filtro anti-spam, si es
		que lo hay, la ultima fáse es la <firstterm>moderación</firstterm>:
		el correo es enrutado a una dirección especial, donde alguien
		lo examina y lo confirma o rechaza.</para>
		
		<para>Confirmar un mensaje se puede hacer de dos formas:
		se puede aceptar el mensaje sólo una vez o se le puede indicar
		a la aplicación que acepte éste y todos los mensajes futuros
		de éste remitente. Casí siempre deseamos hacer lo último
		de manera que podamos reducir la carga futura en la moderación.
		Los detalles sobre como confirmar esto, varian entre sistemas
		pero usualmente es una cuestión de responder a una dirección en
		especial con el comando "aceptar" (lo que significa que sólo
		se aceptará éste mensaje) o "permitir" (permitir éste y todos
		los mensajes futuros).</para>

            <para>
		Rechazar un mensaje se hace simplemente ignorando
		el correo de moderación. Si la aplicación nunca
		recibe confirmación de que algo es un mensaje valido
		entonces no pasará a la lista, así que con solo
		ignorar el correo de moderación creará el efecto deseado.
		En algunos casos, existe la opción de responder con los
		comandos "rechazar" o "denegar" para que automaticamente
		se desaprueben los mensajes del remitente sin siquiera
		pasarlos por la moderación. Raramente existe una razón
		para hacer esto ya que la moderación es por lo general
		para prevenir el spam y los spammers no suelen utilizar
		una misma dirección dos veces.</para>
            </listitem>
</orderedlist>

<para>Hay que asegurarse de que la moderación <emphasis>sólo</emphasis>
se utiliza para filtrar el spam y mensajes fuera de contexto, como
cuando alguien envia un correo a la lista equivocada. El sistema de
moderación por lo general ofrece una manera de responder directamente
al remitente pero es mejor no utilizarlo para responder a preguntas
que realmente pertenecen a la lista, incluso si se sabe la respuesta
inmediatamente. De hacer esto, se privaria a la comunidad del proyecto
de una visión exacta de que tipo de preguntas la gente hace y privarlos
de la oportunidad de responder ellos mismos a preguntas y/o ver las
respuestas de otros. La moderación de las listas debe ser estrictamente
para mantenerlas libres de basura y de correos fuera de contexto,
nada más.</para>

</sect3>

<sect3 id="address-hiding">
<title>Ocultar las direcciones en los archivos</title>

<para>Para prevenir que los spammers utilicen las listas de correo
como una fuente de direcciones, una técnica muy común es la de ocultar
las direcciones de correo de la gente en el registro, reemplazandolas
como por ejemplo:</para>

    <blockquote>
      <para><literal>jrandom@somedomain.com</literal></para>
    </blockquote>

<para>por</para>

    <blockquote>
      <para><literal>jrandom_AT_somedomain.com</literal></para>
    </blockquote>

<para>o</para>

    <blockquote>
      <para><literal>jrandomNOSPAM@somedomain.com</literal></para>
    </blockquote>

<para>o algo similar igual de obvio (para un humano). Ya que los
recolectores de direcciones por lo general funcionan reptando por
paginas web&mdash;incluyendo el archivo de nuestra lista de correo&mdash;
y buscando secuencias conteniendo "@", modificar las direcciones
es una forma para que sean invisibles o inutiles para los spammers.
Esto no hace nada para prevenir que se envie spam desde la lista,
por supuesto, pero si evita que se incremente la cantidad de spam
enviado directamente a las cuentas personales de los usuarios de
la lista.</para>

<para>Ocultar las direcciones puede ser algo controversial. A algunas
personas les puede gustar mucho y se sorprenderan si el registro no lo
hace automaticamente. Otras pueden pensar que es demasiado inconveniente
(porque los humanos tambien tenemos que traducir las direcciones antes
de utilizarlas). Algunas veces las personas afirman que es inefectivo,
porque los recolectores en teoria pueden compensar cualquier patrón
de modificación consistente. No obstante, hay que señalar que existe
evidencia empírica de que ocultar las direcciones <emphasis>es</emphasis>
efectivo, como se puede ver en <ulink
url="http://www.cdt.org/speech/spam/030319spamreport.shtml"/>.</para>

<para>Lo ideal sería que la aplicación administrativa de la lista
diese la posibilidad de escoger a cada individuo, utilizando una cabecera si/no
especial o configurandolo en las preferencias de la cuenta del
suscriptor. Sin embargo, no conozco ninguna aplicación que permita hacer
esto para cada suscriptor o para cada mensaje, así que por ahora el
administrador de la lista debe tomar la decisión en nombre de todos
(asumiendo que el archivador ofrece ésta característica, lo cual no
es siempre así). Yo me inclino ligeramente hacia ocultar las direcciones.
Algunas personas son muy cuidadosas para evitar enviar sus
direcciones de correo electrónico en paginas web o en cualquier lugar
donde un recolector de spam pueda verla, y podrian ser decepcionante
que todo ese cuidado sea perdido gracias al registro de la lista de correo.
Mientras tanto, la inconveniencia al ocultar las direcciones que impone en
los usuarios del registro es muy pequeña, dada la trivialidad de transformar
las direcciones al formato correcto si se necesita contactar con esa
persona. Pero hay que seguir pensando en que, al final, sigue siendo
una lucha sin fin: para cuando haya leido esto, los recolectores
podrian haber evolucionado hasta el punto de reconocer la mayoria
de formas comunmente utilizadas para ocultar y tendremos que pensar
en algo más.</para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="header-management">
<title>Identificación y Administración de cabeceras</title>

<para>Por lo general, los suscriptores de las listas mueven estos
correos a una carpeta específica para el proyecto, separados de su
otro correo personal. Sus clientes de correo hacen esto automaticamente
al exáminar las <firstterm>cabeceras</firstterm> de los mensajes.
La cabecera son los campos que se encuentran en la parte superior de los
correos, los cuales indican el remitente, destinatario, asunto, fecha
e información variada sobre el mensaje. Cabeceras certeras son bien
conocidas y obligatorias:</para>

<screen>
From: ...
To: ...
Subject: ...
Date: ...
</screen>

<para>Otras son opcionales, aunque de cierta manera estándar. Por ejemplo,
no es estrictamente requerido que un correo electrónico tenga la cabecera

<screen>
Reply-to: sender@email.address.here
</screen>

<para>pero muchas lo tienen, porque da al destinatario una manera a prueba
de errores de responder al remitente (es especialmente útil cuando el
remitente ha tenido que enviar un correo desde una dirección diferente
a la cual las respuestas deben ser dirigídas).</para>

<para>Algunos clientes de correo ofrecen una interfaz fácil de usar para
rellenar correos basados en patrones en la cabecera Asunto. Esto lleva
a que la gente pida que la lista de correo añada automaticamente un prefijo
a todos los Asuntos, de forma que puedan configurar sus clientes para que
busquen esos prefijos y archivar los correos en el directorio correcto.
La ídea es que el autor original escribiria:</para>

<screen>
Asunto: Trabajando en la versión 2.5
</screen>

<para>pero el correo apareceria en la lista asi:</para>

<screen>
Asunto: [discuss@lists.example.org] Trabajando en la versión 2.5
</screen>

<para>Aunque la mayoria de las aplicaciones de administración de listas
ofrecen la opción de hacer esto, yo recomiendo no utilizarla. El problema
que resuelve puede ser resuelto de otras formas menos intrusivas y los
costes de utilizar espacio en el campo del Asunto son demasiado grandes.
Los usuarios experimentados de las listas de correos revisan el asunto
de los correos entrantes del día para decidir acerca de qué van a leer
y qué van a responder. Fijar el nombre de la lista al Asunto puede
mover hacia la derecha el verdadero Asunto y fuera de la pantalla,
haciendolo invisible. Esto oculta información necesaria para aquellos
quienes dependen en la decisión de cuales correos van a abrir, reduciendo
la funcionalidad conjunta de la lista para todos.</para>

<para>En lugar de sobrecargar el Asunto, hay que enseñar a los usuarios
para que saquen ventajas de otras cabeceras estándar, empezando con el
campo "Para", el cual debería contener el nombre de la lista de correos:</para>

<screen>
To: &lt;discuss@lists.example.org&gt;
</screen>

<para>Cualquier cliente de correo capaz de filtrar los mensajes basandose en
el Asunto debe ser capaz de filtrar utilizando el campo Para facilmente.</para>

<para>Existen otras cabeceras opcionales pero estándar para las listas
de correo. Filtrar utilizandolos es incluso más fiable que utilizar
las cabeceras "Para" o "Cc" dado que estas cabeceras son añadidas
a todos los mensajes por el programa de administración de la lista, así
que algunos usuarios estan contando con su presencia:</para>

<screen>
list-help: &lt;mailto:discuss-help@lists.example.org&gt;
list-unsubscribe: &lt;mailto:discuss-unsubscribe@lists.example.org&gt;
list-post: &lt;mailto:discuss@lists.example.org&gt;
Delivered-To: mailing list discuss@lists.example.org
Mailing-List: contact discuss-help@lists.example.org; run by ezmlm
</screen>

<para>La mayoria se explican en si mismos. En <ulink 
url="http://www.nisto.com/listspec/list-manager-intro.html"/> se explican
mejor o en <ulink url="http://www.faqs.org/rfcs/rfc2369.html"/> para
una especificación formal más detallada.</para>

<para>Hay que señalar como estas cabeceras implican que si se tiene
una lista de correos llamada "list" entonces se tienen tambien unas
direcciones administrativas "list-help" y "list-unsubscribe". Además
de estas, es normal tener "list-subscribe" para unirse y "list-owner"
para contactar con el administrador de la lista. Dependiendo en la
aplicación administrativa que se use, estas y/o otras direcciones
administrativas varias pueden ser configuradas; la documentación
deberia detallar esto. A menudo una explicación completa de todas
estas direcciones especiales es enviada a cada nuevo suscriptor
como parte de un mensaje de bienvenida automático. Probablemente
usted mismo reciba una copia de esto correo de bienvenida. Si no lo
ha recibido, pidale una copia a alguien, de manera que pueda saber
qué estan recibiendo los nuevos suscriptores. Mantenga la copia
a mano de manera que pueda responder preguntas acerca del funcionamiento
de la lista, o mejor aun, ponerlo en una página web en alguna
parte. Así, cuando alguien pierda su copia de las instrucciones
y pregunte cómo pueden eliminarse de la lista, se les facilita
la URL.</para>

<para>Algunas aplicaciones para listas de correos ofrecen la opción
de agregar al final de cada mensaje las instrucciones para
eliminar la suscripción. Si ésta opción está disponible, utilicela.
Solo causa algunas lineas extra por mensaje en un sitio inofensivo
y puede ahorrar mucho tiempo al reducir el número de gente que escriba
&mdash;o peor aún, que escriban a la lista&mdash;preguntando cómo
eliminar la suscripción.</para>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="reply-to">
<title>El gran debate del Reply-To</title>

<para>Antes en <xref linkend="avoid-private-discussions"/> hice incapie
en la importancia de asegurar que las discusiones se mantengan en foros
publicos y hable acerca de porque a veces tomar medidas activas es necesario
para prevenir que algunas conversaciones deriven a hilos privados. Este capítulo
es acerca de todo lo relacionado con preparar el software de comunicación
del proyecto para que realice la mayor cantidad de trabajo posible. Asi que,
si la aplicación para la administración de las listas de correo ofrece una
manera automática de encausar las discusiones a la lista, habría que
pensar que habilitarla es la opción correcta.</para>

<para>Bueno, quizas no. Existe tal característica, pero tiene algunas
desventajas muy importantes. Usarla o no es uno de los debates más
calientes en la administración de las listas de correo&mdash;admitamoslo,
no es una controversia que vaya a aparecer en las noticias, pero se puede
iniciar de vez en cuando en los proyectos de software libre. A continuación,
voy a describir esta característica, proponer los argumentos de cada
posición y hacer la mejor recomendación que puedo.</para>

<para>Esta característica en si misma es muy sencilla: la aplicación
para las listas puede, si lo deseamos, automaticamente establecer
la cabecera Reply-To en todos los mensajes para dirijir todas las
respuestas a la lista. Así que, sin importar lo que escriba el
remitente en este campo (o si ni siquiera lo establecen) para
cuando los suscriptores a la lista vean el mensaje, éste contendra
la dirección de la lista en la cabecera:

<screen>
Reply-to: discuss@lists.example.org
</screen>

<para>Esto puede parecer algo bueno, porque virtualmente todos
los clientes de correo prestan atención a esta cabecera y ahora
cada vez que alguien responda a algún mensaje, su respuesta
será automaticamente dirigida a la lista, no sólo a quien ha
enviado el mensaje que se responde. Por supuesto que el remitente
puede manualmente modíficar esto, pero lo importante es que
<emphasis>por defecto</emphasis> las respuestas son enviadas a
la lista. Este es un ejemplo perfecto de como utilizar la tecnologia
para animar la colaboración.</para>

<para>Desafortunadamente, existen algunas desventajas. La primera es
conocida como el problema <firstterm>No puedo llegar a casa</firstterm>:
a veces, el remitente original establece su dirección de correo
real en el campo Reply-To porque por alguna razón u otra envian
correos utilizando una dirección diferente a la que utilizan
para recibirlos. Las personas que envian y reciben correos desde el
mismo sitio no tienen éste problema y quizas se sorprendan de que
siquiera existe. Pero para quienes utilizan configuraciones de correo
inusuales o quienes no pueden controlar como se forma el campo
From de su dirección de correo electrónico (quizas porque envian
correos desde sus trabajos y no tienen ninguna influencia sobre
el departamente de sistemas) el utilizar el campo Reply-To quizas
sea la única manera que tienen para asegurarse de que las respuestas
a sus mensajes les llegan (encuentran el camino a casa). Asi que si
la aplicación de las listas sobre escribe esto, esta persona
puede que nunca vea las respuestas a sus mensajes.</para>

<para>La segunda desventaja se refiere a las expectativas y en mi
opinión, el argumento más fuerte en contra del cambio del Reply-To.
La mayoria de los usuarios experimentados de correo electrónico
estan acostumbrados a dos metodos básicos de responder:
<firstterm>Responder a todos</firstterm> y <firstterm>Responder
al remitente</firstterm>. Todos los clientes de correo tienen
botones separados para estas dos acciones. Sus usuarios saben que
para responder a todos los incluidos en la lista, deben escoger,
responder a todos y que para responder sólo al remitente en privado,
deben seleccionar Responder al remitente. Aunque se desee animar
a que la gente responda a la lista siempre que sea posible, existen
ciertas circunstancias cuando un mensaje privado al remitente es
prerrogativo&mdash;por ejemplo, desean compartir información
confidencial, algo que sería inapropiado para una lista pública.</para>

<para>Ahora consideremos lo que sucede cuando la lista sobre escribe
la cabecera Reply-To original del remitente. Quien responde pulsa
la opción de Responder al remitente, con la esperanza de enviar
un mensaje privado al autor original. Porque esta es la conducta
esperada y quizas esta persona no se moleste en examinar
cuidadosamente la dirección del destinatario en el nuevo mensaje. Redacta
su correo privado, un mensaje confidencial, uno que puede diga algo
embarazoso acerca de alguien de la lista y pulsa el botón de enviar.
Inesperadamente el mensaje <emphasis>llega a la lista</emphasis>
unos minutos despues. Cierto, en teoria deberia haber revisado
cuidadosamente el destinatario y no debería haber asumido nada
acerca del campo Reply-To. Pero por lo general este campo se
compone con su dirección de correo personal (o en su lugar, los clientes
de correo lo hacen) y muchos usuarios asiduos del correo electrónico
dan esto por seguro. De hecho, cuando alguien determina
deliberadamente el campo Reply-To a alguna otra dirección, como la de
la lista, usualmente señalan esto en el contenido del mensaje, de forma
que quienes respondan no se sorprendan de lo que sucede cuando lo hacen.</para>

<para>Dada la posibilidad de consecuencias muy severas de esta conducta
inesperada, mi preferencia es la de configurar la aplicación de la lista
para que nunca toque la cabecera Reply-To. Este caso de cuando se utiliza
la tecnologia para animar la colaboración tiene, a mi parecer, efectos
colaterales potencialmente peligrosos. Por otro lado, existen argumentos
concretos del otro lado de este debate. Sea lo que sea que se escoja,
puede que en ocasiones algunas personas pregunten por qué no se ha
escojido el otro camino. Dado que esto no es algo que se quiere sea
el principal tema de discusión en la lista, puede ser conveniente
tener una respuesta preparada del tipo que sea más propensa a poner
fin a la discusion en lugar de animarla. Hay que asegurarse de
<emphasis>no</emphasis> insistir en que esta decisión, sea cual sea,
es obviamente la única correcta (incluso cuando se crea que esto es
así). En cambio, hay que señalar que este es un viejo debate, que
existen buenos argumentos de cada lado, que ninguna decisión iba a
satisfacer a todos los usuarios y que por esto se ha tomado la mejor
decisión que se podía. Amablemente se pide que el tema no
vuelva a surgir a menos que alguien tenga algo realmente nuevo que decir,
entonces hay que mantenerse alejado y esperar a que muera
por causas naturales.</para>

<para>Alguien podria sugerir una votación. Se puede permitir esto si se
quiere, pero personalmente no creo que contar manos sea una solución
satisfactoria en este caso. El castigo para alguien que se vea sorprendido
por este comportamiente es demasiado (accidentalmente enviar un correo
privado a la lista publica) y las molestias para todos los demás es
pequeña (ocasionalmente recordarle a alguien que deben responder a la
lista) por esto no está claro de que la mayoria, aunque sean la mayoria,
deban poner a una minoria bajo ese riesgo.</para>

<para>No he llegado a tocar todos los aspectos acerca de este tema, sólo
los que me han parecido de especial importancia. Para una discusion completa,
se pueden leer los siguientes documentos, los cuales son siempre citados
cuando se entra en el debate:

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Leave Reply-to alone</emphasis>,
     <emphasis>por Chip Rosenthal</emphasis></para>
     <para><ulink
        url="http://www.unicom.com/pw/reply-to-harmful.html"/></para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Set Reply-to to list</emphasis>,
     <emphasis>por Simon Hill</emphasis></para>
     <para><ulink
        url="http://www.metasystema.net/essays/reply-to.mhtml"/></para>
  </listitem>
</itemizedlist>

</para>

<para>A pesar de las benignas preferencias indicadas anteriormente, no
creo que exista una única respuestas correcta y he participado
felizmente de muchas listas que <emphasis>cambiaban</emphasis>el Reply-To.
Lo mejor que se puede hacer, es centrarse en alguna de las dos vias desde
el principio e intentar no verse enredado en debates sobre esto despues.</para>

<sect3 id="reply-fantasies">
<title>Dos fantasias</title>

<para>Algún día, alguien tendrá la brillante ídea de implementar una
opción <firstterm>Responder a la lista</firstterm> en su cliente de correo.
Podría utilizar alguna de las cabeceras para listas mencionadas antes
para descubrir la dirección de la lista de correos y luego direccionar
las respuestas directamente a la lista, ignorando cualquier otro destinatario,
ya que probablemente muchos esten suscritos a la lista de todas formas.
Eventualmente, otros clientes implementarán esta característica y todo
el debate desaparecerá. (De hecho, el cliente de correos
<ulink url="http://www.mutt.org/">Mutt</ulink> ofrece esta opción.<footnote><para>
Poco despues de que este libro apareciera, <ulink url="http://www.michaelbernstein.com/"
>Michael Bernstein</ulink> me escribió para comentarme lo siguiente:
"Existen otros clientes de correos que implementan una función de
responder a la lista a parte de Mutt. Por ejemplo, Evolution tiene
una combinación de teclas, pero no un botón (Ctrl+L)."</para></footnote>)</para>

<para>Una mejor solución sería que el tratamiento del campo Reply-To fuese
una opción por suscriptor. Quienes deseen que la lista modifique
sus cabeceras Reply-To (ya sea en sus mensajes o en los de otros)
podria solicitarlo, y quienes no lo desean, se les deja tranquilos.
Aunque no conozco ninguna aplicación para listas de correo que permita
esto para cada suscriptor. Así que por ahora, parece que estamos atados
a una configuración global.<footnote><para>Desde que escribí esto, he
aprendido que existe al menos un sistema de gestión de listas que ofrece
esta característica: <ulink url="http://siesta.unixbeard.net/">Siesta</ulink>.
Hay un artículo sobre este en <ulink url="http://www.perl.com/pub/a/2004/02/05/siesta.html"
/></para></footnote></para>

</sect3>

</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="archiving">
<title>Archivo</title>
<para>Los detalles técnicos para configurar un archivo para
la lista de correos son específicos de la aplicación utilizada y estan
fuera del alcance de este libro. Al escoger o configurar un archivador,
es conveniente considerar lo siguiente:</para>

<variablelist>

  <varlistentry><term>Actualización rápida</term>
    <listitem>
	<para>A menudo la gente querra ser referida a un mensaje enviado
	durante la ultima hora o dos. Si es posible, el archivador deberá
	archivar cada mensaje instantaneamente, de tal manera de que cuando
	el mensaje aparezca en la lista de correos, ya esté en el archivo.
	Si esa opción no esta disponible entonces al menos hay que intentar
	configurar el archivado para que se realice cada hora o así. (Por
	defecto, algunos archivadores ejecutan el proceso de actualización
	cada noche, pero en la práctica esta demora es demasiado larga
	para una lista de correos.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Estabilidad referencial</term>
    <listitem>
	<para>Una vez que un mensaje es archivado bajo una URL en
	particular, debe ser accesible desde esa URL para siempre.
	Incluso si el archivo es reconstruido o restaurado de un
	respaldo, cualquier URL que haya sido hecha publica debe
	permanecer igual. Las referencias estables hacen posible
	que los buscadores de Internet sean capaces de indexar el
	archivo, lo cual es una gran ventaja para los usuarios que
	buscan respuestas. Las referencias estables son tambien
	importantes porque los mensajes de la lista y los hilos
	son enlazados desde el gestor de fallos (
            <xref
            linkend="bug-tracker"/>)<phrase output="printed">
            más adelante en este capítulo</phrase> o
            en la documentación de otros proyectos.</para>

	<para>Lo ideal sería que la aplicación de la lista de correos
	incluya la URL del mensaje archivado o al menos la porción
	de la URL específica del mensaje en una cabecera cuando este
	es distribuido. De esta manera la gente que haya recibido el
	mensaje podrá conocer su lugar en el archivo sin la necesidad
	de visitar el archivo, lo cual es de gran ayuda, ya que cualquier
	actividad que implique el uso del navegador web es automaticamente
	un consumo de tiempo. Que alguna aplicación de listas de
	correos ofrece esta posibilidad no lo sé. Desafortunadamente,
	los que he utilizado no la tienen. Pero esto es algo que hay
	que buscar (o si desarrolla una aplicación de listas, esta es
	una caracteristica que debe considerar implementar, por favor).</para> 
    </listitem>
  </varlistentry>

  <varlistentry><term>Respaldos (Backups)</term>
    <listitem>
	<para>Debe ser obvio como respaldar el archivo
	y la receta para restaurarlo no deben ser muy complicada.
	En otras palabras, no hay que tratar el archivo como una caja
	negra. Debe conocer donde se almacenan los mensajes y como
	restaurar las páginas del archivo del almacen si alguna vez
	es necesario. Estos archivos contienen datos muy preciados&mdash;un
	proyecto que los pierde, pierde buena parte de su memoria
	colectiva.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Soporte de los hilos</term>
    <listitem>
	<para>Desde cualquier mensaje debe ser posible ir al <firstterm>hilo</firstterm>
	(grupo de mensajes relacionados) al que pertenece el mensaje. Cada
	hilo debe tener su propia URL tambien, separado del URL de los
	mensajes del hilo.</para>
    </listitem>
  </varlistentry>

  <varlistentry><term>Busquedas</term>
    <listitem>
	<para>Un archivo que no permita busquedas&mdash;tanto en el cuerpo
	de los mensajes como por autor o según el asunto&mdash;es casí
	inutil. Hay que señalar que algunos archivadores permiten busquedas
	al remitir la labor a un buscador externo como 
	<ulink url="http://www.google.com/">Google</ulink>. Esto es
	aceptable, pero por lo general, las busquedas directas son más
	finas, porque permiten a quien busca, específicar que los
	resultados sean mostrados, por ejemplo, según el asunto y no
	según el cuerpo del mensaje.
    </listitem>
  </varlistentry>

</variablelist>

<para>Lo anterior es sólo una lista técnica para ayudar a evaluar y
configurar un archivador. Hacer que la gente de hecho <emphasis>utilice</emphasis>
el archivo como ventaja para el proyecto es discutido en capitulos posteriores
en particular en <xref linkend="using-archives"/>.</para>
</sect2>

<!-- ========================== subsection =========================== -->
<sect2 id="mailing-list-software">
<title>Software</title>

<para>Aquí hay algunas herramientas open source para la gestión de
las listas de correo y su archivo. Si el hosting del proyecto ya
tiene una configuración por defecto, quizas no sea necesario siquiera
decidir cual herramienta utilizar. Pero si se tiene que instalar una,
existen algunas posibilidades. Las que he utilizado son Mailman, Ezmlm,
MHonArc e Hypermail, lo cual no significa que no haya otras que sean
igual de buenas (y por supuesto, probablemente existan otras que no
he logrado encontrar, asi que no considere esto como una lista completa).</para>

<para>Aplicaciones de gestión de listas de correo:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">Mailman</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.list.org/"/></para>
	<para>(Tiene un archivador incorporado y la posibilidad de
	conectarse a archivadores externos.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">SmartList</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>(Para ser utilizado con el sistema de procesamiento de correos Procmail.)</para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ecartis</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.ecartis.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">ListProc</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://listproc.sourceforge.net/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Ezmlm</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://cr.yp.to/ezmlm.html"/></para>
   <para>(Diseñado para funcionar con<ulink
         url="http://cr.yp.to/qmail.html">Qmail</ulink>
         .)</para> 
 </listitem>
 <listitem>
   <para><emphasis role="bold">Dada</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://mojo.skazat.com/"/></para>
   <para>(A pesar del bizarro intento de su sitio web, 
	es un software libre, liberado bajo la licencia GNU GPL.
	Tambien tiene un archivador incluido.)</para>
 </listitem>
</itemizedlist>

<para>Software para el archivo de las listas de correo:</para>

<itemizedlist>
 <listitem>
   <para><emphasis role="bold">MHonArc</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.mhonarc.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Hypermail</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.hypermail.org/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Lurker</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://sourceforge.net/projects/lurker/"/></para>
 </listitem>
 <listitem>
   <para><emphasis role="bold">Procmail</emphasis>&nbsp;&mdash;&nbsp;<ulink
         url="http://www.procmail.org/"/></para>
   <para>
	(Software que acompaña a SmartList, un sistema de procesado
	general de correos que puede, aparentemente, ser configurado
	como un archivo.)</para>
 </listitem>
</itemizedlist>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="vc">
<title>Control de Versiones</title>

<para>Un <firstterm>sistema de control de versiones</firstterm> (o
<firstterm>sistema de control de revisiones</firstterm>) es una combinación
de tecnologias y practicas para seguir y controlar los cambios
realizados en los ficheros del proyecto, en particular en el código
fuente, en la documentación y en las páginas web. Si nunca antes se ha
utilizado un control de versiones, lo primero que hay que hacer es conseguir
a alguien que sí lo haya hecho y hacer que se una al proyecto. Hoy en día
todo el mundo espera que al menos el código fuente del proyecto este
bajo un control de versiones y probablemente no se tomen el proyecto
seriamente si no se utiliza este sistema con un mínimo de competencia.</para>

<para>La razón por la cual el control de versiones es universal es porque
ayuda virtualmente en todos los aspectos de dirigir un proyecto: comunicación
entre los desarrolladores, manejo de los lanzamientos, administración de fallos,
estabilidad entre el código y los esfuerzos de desarrollo experimental y 
atribución y autorización en los cambios de los desarrolladores. El sistema
de control de versiones permite a una fuerza coordinadora central 
abarcar todas estas areas. El núcleo del sistema es la<firstterm>
gestión de cambios</firstterm>: identificar cada cambio a los ficheros
del proyecto, anotar cada cambio con metadata como la fecha y el autor
de la modificación y disponer esta información para quien sea y como sea.
Es un mecanismo de comunicación donde el cambio es la únidad básica de
información.</para>

<para>Aun no hemos discutido todos los aspectos de utilizar un sistema
de control de versiones ya que es un tema tan extenso que será
introducido según el tópico a lo largo de este libro. Ahora, vamos a
concentrarnos en seleccionar y configurar un sistema de control de versiones
de forma que fomentemos un desarrollo cooperativo.</para>

<!-- ========================== subsection =========================== -->
<sect2 id="vc-vocabulary">
<title>Vocabulario</title>

<para>En este libro no podemos enseñar como utilizar el control de
versiones si nunca antes lo ha utilizado, pero sería imposible continuar
sin conocer algunos terminos clave. Estos son utiles independientemente
del sistema particular utilizado: son definiciones basicas y verbos sobre
la colaboración en red y serán utilizados a lo largo del libro. Incluso
si no existiera ningún sistema de control de versiones, el problema del
control de los cambios aun existiria y estas palabras nos dan un lenguaje
para hablar acerca de este problema consistentemente.</para>

<variablelist>

 <varlistentry id="vc-vocabulary-commit">
  <term><firstterm>commit</firstterm></term>
  <listitem><para>
	Realizar un cambio en el proyecto. Formalmente, almacenar
	un cambio en la base de datos del control de versiones de
	forma que pueda ser incorporado en lanzamientos futuros del
	proyecto. "Commit" puede ser utilizado como un verbo o como
	un sustantivo. Como un sustantivo, es escencialmente un
	sinonimo de "cambio". Por ejemplo: "He commited una reparación
	para un fallo reportado en Mac OS X que hacia que el servidor
	se colgara. Jóse ¿podrias por favor revisarlo y verificar que
	no estoy utilizando mal el ALLOCATOR?"
  </para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-log-message">
  <term><firstterm>Mensaje de&nbsp;registro</firstterm></term>
  <listitem><para>
	Un pequeño comentario añadido a cada commit que describe
	el tipo y el proposito del commit. Los mensajes de
	registro forman parte de los documentos más importantes
	de cualquier proyecto ya que son un puente entre el
	lenguaje altamente técnico de los cambios individuales
	en el código y el lenguaje más orientado al usuario de
	caracteristicas, resolución de fallos y progreso del
	proyecto. Más adelante vamos a ver la forma de distribuir
	estos mensajes a la audiencia apropiada y tambien
	<xref linkend="codifying-tradition"/><phrase output="printed">
	en <xref linkend="communications"/></phrase> discutimos
	como ENCOURAGE a los voluntarios para que escriban mensajes
	de registro utiles y concisos.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-update">
  <term><firstterm>update</firstterm></term>
  <listitem><para>
	Solicitar los cambios (commits) que han realizado
	otros en la copia local del proyecto, esto actualiza
	esta copia a la ultima versión. Es una operación muy
	común ya que la mayoria de los desarrolladores actualizan
	su código varias veces al día y así saben que estan
	ejecutando casi lo mismo que los otros desarrolladores, asi
	que si se descubre un fallo es muy posible que este aun
	no haya sido resuelto. Por ejemplo: "Hey, he notado
	que el código del índice está fallando en el último
	byte. ¿Es esto un nuevo fallo?" "Sí, pero fue resuelto
	la semana pasada&mdash;prueba actualizar para resolverlo."
 	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-repository">
  <term><firstterm>repositorio</firstterm></term> <listitem><para>
	Una base de datos en la que los cambios son almacenados. Algunas
	versiones de sistemas de control de versiones son centralizados,
	es decir, existe un único repositorio maestro, el cual almacena
	todos los cambios en el proyecto. Otros sistemas son descentralizados,
	cada desarrollador tiene su propio repositorio y los cambios pueden
	ser intercambiados entre repositorios arbitrariamente. El sistema
	de control de versiones mantiene un registro de las dependencias
	entre estos cambios y cuando llega el momento de realizar un
	lanzamiento, un conjunto particular de cambios es aprobado
	para ese lanzamiento. La cuestión de cual sistema es mejor
	es otra de las guerras santas del desarrollo de software.
	Intentad no caer en la trampa de discutir sobre esto en las
	listas de correo del proyecto.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-checkout">
  <term><firstterm>checkout</firstterm></term>
  <listitem><para>
	El proceso de obtener una copia del proyecto desde el repositorio.
	Por lo general, un checkout produce un árbol de directorios
	llamado "copia funcional" desde el cual los cambios serán
	enviados de vuelta al repositorio original. En algunas versiones
	descentralizadas de sistemas de control, cada copia funcional
	es en si mismo un repositorio y los cambios son empujados (o
	atraidos) a cualquier repositorio que este dispuesto a aceptarlos.
	</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-working-copy">
  <term><firstterm>copia funcional</firstterm></term>
  <listitem><para>
	El árbol de directorios privado de cada desarrollador que
	que contiene el código fuente del proyecto y posiblemente
	las páginas web u otros documentos. Una copia funcional
	tambien contiene un pequeña cantidad de metadata administrada
	por el sistema de control de versiones, informando a la copia
	funcional cual es repositorio central de procedencia, la
	revisión de los ficheros presentes, etc. Generalmente, cada
	desarrollador tiene su propia copia funciona en la cual
	realiza y prueba los cambios y desde la cual envia sus
	commits (cambios).</para></listitem>

 </varlistentry>

 <varlistentry id="vc-vocabulary-revision">
  <term><firstterm>revision</firstterm>,
        <firstterm>cambio</firstterm>,
        <firstterm>conjunto de cambios</firstterm></term>
  <listitem><para>
	Una revisión es usualmente una encarnación específica de un
	fichero o directorio en particular. Por ejemplo, si el proyecto
	se inicia en la revisión 6 del fichero F y alguien envia un
	cambio al fichero F, esto produce la revisión 7 de F. Algunos
	sistemas tambien utilizan revisión (revision), cambio (change)
	o conjunto de cambios (changeset) para referirse a un conjunto
	de cambios enviados juntos como una únidad conceptual.</para>

<para>Estos conceptos pueden tener distintos significados tecnicos
en cada sistema de control de versiones, pero en general, la ídea es
siempre la misma: dar un sistema para comunicar de manera precisa la
historia de cambios en un fichero o conjunto de ficheros (inmediatamente
antes y despues de que se ha corregido un fallo). Por ejemplo: "Eso
se ha resuelto en la revisión 10" o "Se ha corregido eso en la revisión
10 del fichero foo.c."</para>

<para>Cuando se habla sobre ficheros o una colección de ficheros sin
específicar una revisión en particular, por lo general se asume que
nos referimos a la revisión disponible más reciente.</para></listitem>
</varlistentry>

  <sidebar id="version-vs-revision">
  <title>"Versión" Versus "Revisión"</title>
<para>El termino <firstterm>versión</firstterm> es a veces utilizado
como un sinonimo para "revisión", pero aquí no voy a utilizarla de esta
forma, ya que se puede confundir facilmente con "versión" en el sentido
de una versión de un programa&mdash;así que, el número de lanzamiento
o edición como en "Versión 1.0". Y aunque la frase "control de versiones"
es un estándar, continuare utilizandolo como sinonimo para "control
de revisiones" y para "control de cambios".</para>
  </sidebar>

 <varlistentry id="vc-vocabulary-diff">
  <term><firstterm>diff</firstterm></term>
  <listitem><para>
Una representación contextual de un cambio. Un diff muestra las lineas
que han sido modíficadas, como y además, algunas lineas contextuales
rodeandolas a cada lado. Un desarrollador familiarizado con el código
puede, con leer un diff de ese código, entender lo que hace el cambio
e incluso detectar fallos.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-tag">
  <term><firstterm>etiqueta (tag)</firstterm></term>
  <listitem><para>
Una etiqueta para una colección particular de ficheros en una revisión
especfífica. Los tags son utilizados para preservar capturas interesantes
del proyecto. Por ejemplo, un tag es hecho para cada lanzamiento público,
de forma que cada persona pueda obtener, directamente desde el sistema
de control de versiones, el conjunto exacto de ficheros/revisiones
que componen el lanzamiento. Algunos tags comunes son como 
<literal>Release_1_0</literal>, <literal>Delivery_00456</literal>,
etc.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-branch">
  <term><firstterm>rama (branch)</firstterm></term>
  <listitem><para>
Es una copia del proyecto, bajo el control de versiones, pero aislado,
de forma que los cambios realizados en esta rama no afecten al resto
del proyecto y vice versa, excepto cuando los cambios sean
deliberadamente "unidos" de un lado al otro. Las ramas tambien son
conocidas como "lineas de desarrollo". Incluso cuando un proyeto
no tiene ramas específicas se considera que el desarrollo se esta
produciendo en la rama principal, tambien conocida como "línea
primaria" o "<firstterm>trunk</firstterm>".</para>

  <para>Branches offer a way to isolate different lines of development
  from each other.  For example, a branch can be used for experimental
  development that would be too destabilizing for the main trunk.  Or
  conversely, a branch can be used as a place to stabilize a new
  release.  During the release process, regular development would
  continue uninterrupted in the main branch of the repository;
  meanwhile, on the release branch, no changes are allowed except
  those approved by the release managers.  This way, making a release
  needn't interfere with ongoing development work.  See <xref
  linkend="branches"/><phrase output="printed"> later in this

<para>Las ramas o branches, permiten aislar diferentes lineas de
desarrollo de si mismas. Por ejemplo, una rama puede ser utilizada
para un desarrollo experimental que sería demasiado inestable para
la rama principal. O al contrario, una rama puede ser utilizada
como sitio para estabilizar una versión para lanzamiento. Durante
el proceso de lanzamiento, el desarrollo regular se mantendria ininterrumpida
en la rama principal. Mientras tanto, en la rama de lanzamiento,
ningún cambio es aceptado excepto aquellos aprobados por el
responsable del lanzamiento. De esta manera, realizar un lanzamiento
no tiene porque interferir con el trabajo de desarrollo que se está
realizando. Para más información <xref linkend="branches"/><phrase output="printed">
más adelante en el capítulo</phrase> para una discusión más
detallada sobre las ramas.</para></listitem>
</varlistentry>

 <varlistentry id="vc-vocabulary-merge">
  <term><firstterm>merge</firstterm></term>
  <listitem><para>
	Mover un cambio de una rama a otra, lo que incluye unir desde
	la rama principal a otra rama o vice versa. De hecho, estos
	son las uniones más comunes y es rara la ocasión en la que
	esto se hace entre dos ramas no principales. Para más
	información sobre los merge <xref linkend="vc-singularity"/>.
	</para>
	
<para>"Merge" tiene otro significado: es lo que hace el sistema de control
de versiones cuando se encuentra con que dos personas han realizado
cambios en un mismo fichero sin relación alguna. Ya que estos cambios
no interfieren entre ellos, cuando alguna de estas personas actualizan
su copia del fichero (el cual ya contiene los cambios) los cambios
de la otra persona serán unidos automaticamente. Esto sucede muy a
menudo, especialmente en proyectos con multiples personas realizando
cambios en el mismo código. Cuando dos cambios diferentes estan
relacionados, el resultado es un "conflicto".</para>
  </listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-conflict">
  <term><firstterm>conflicto</firstterm></term>
  <listitem><para>
	Sucede cuando dos o más personas intentan realizar diferentes
	cambios en la misma porción de código. Todos los sistemas
	de control de versiones detectan estos conflictos automaticamente
	y notifican a al menos uno de los humanos involucrados de que
	sus cambios entran en conflicto con los de alguien más. Es
	entonces tarea de esta personas <firstterm>resolver</firstterm>
	el conflicto y comunicar esa resolución al sistema de control
	de versiones.</para></listitem>
 </varlistentry>

 <varlistentry id="vc-vocabulary-lock">
  <term><firstterm>bloqueo (lock)</firstterm></term>
  <listitem><para>
	Declaración de un intento exclusivo para cambiar un fichero
	o directorio en particular. Por ejemplo, "No puedo enviar
	cambios a las paginas web ahora mismo, ya que parece que
	Alfredo las tiene bloqueadas mientras arregla sus
	imagenes de fondo." No todos los sistemas de control de
	versiones ofrecen la posibilidad del bloqueo y aquellos
	que sí lo permiten, no es necesario que se utilice. Esto
	es porque el desarrollo paralelo y simultaneo es la norma
	y bloquear a la gente para que no puedan modifícar los
	ficheros es contrario a la ídea del sistema.</para>

<para>El modelo del sistema de control de versiones que requiere el bloqueo
de ficheros suele ser llamado <firstterm>bloqueo-modificación-desbloque</firstterm>
y el modelo que no requiere del bloqueo es llamado 
<firstterm>copia-modificación-unión</firstterm>. Una excelente explicación
en profundidad y comparaciones puede ser encontrada en
<ulink url="http://svnbook.red-bean.com/svnbook-1.0/ch02s02.html"/>. En
general, el modelo de copia-modificación-unión es el mejor
para el desarrollo open source y todos los sistemas de control
de versiones discutidos en este libro soportan este modelo.
</para></listitem>

 </varlistentry>

</variablelist>

</para>

</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-choosing">
<title>Escoger un sistema de control de versiones</title>

<para>Hasta ahora, los dos sistemas de control de versiones más
populares en el mundo del software libre son <firstterm>Concurrent
Versions System</firstterm> (<firstterm>CVS</firstterm>),
<ulink url="http://www.cvshome.org/"/>)
y <firstterm>Subversion</firstterm> (<firstterm>SVN</firstterm>,
<ulink url="http://subversion.tigris.org/"/>).</para>

<para>CVS lleva largo tiempo y los desarrolladores más experimentados
ya estan familiarizados con el. Hace más o menos lo necesario
y ya que ha sido popular durante mucho tiempo es probable que no
se termine discutiendo su utilización. A pesar de todo, CVS tiene
algunas desventajas. No ofrece facilidad para referenciar cambios
en multiples ficheros, no permite renombrar o copiar ficheros dentro
del sistema de control (asi que puede ser muy doloroso reorganizar el
código despues de iniciar el proyecto), el soporte para las uniones
es algo pobre, no trabaja muy bien con ficheros muy grandes o 
con ficheros binarios y algunas operaciones son lentas cuando muchos
ficheros estan involucrados.</para>

<para>Ninguno de estos fallos de CVS son fatales y sigue siendo muy
popular. Sin embargo, durante los ultimos años Subversion ha venido
ganando terreno, especialmente con nuevos proyectos.
<footnote><para>Más información en <ulink url="http://cia.vc/stats/vcs"/>
y para evidencia sobre su crecimiento en
<ulink url="http://subversion.tigris.org/svn-dav-securityspace-survey.html"/>
.</para></footnote>. Si esta iniciando un nuevo proyecto, recomiendo
Subversion.</para>

<para>Por otra parte, dado que estoy involucrado en el proyecto
Subversion, mi objetividad puede ser razonablemente cuestionable y
durante los ultimos años han ido surgiendo un número de nuevos sistemas de control
de versiones open source. Podemos encontrar una lista de todos los
sistemas que conozco 
en <xref linkend="vc-systems"/> según su popularidad. Como muestra
esta lista, escoger un sistema de control de versiones puede convertirse
en una interminable tarea de investigación. Posiblemente esta decision
ya haya sido tomada por el sitio donde hospedamos el proyecto,
liberandonos de esta carga, pero si es necesario tomar una decisión,
lo mejor es consultar con otros desarrolladores, indagar un poco
para tener una ídea de las distintas experiencias que haya tenido
la gente y luego escoger uno y mantenerse con este. Cualquier
sistema de control de versiones estable y listo para entornos
de producción será suficiente, no hay que preocuparse demasiado
sobre tomar una decisión equivocada. Si simplemente no se puede
decidir, entonces la opción es Subversion. Es relativamente
fácil de aprender y es probable que se mantenga como el estándar
por unos años más.</para>


</sect2>


<!-- ========================== subsection =========================== -->
<sect2 id="vc-using">
<title>Utilizando el sistema de control de versiones</title>

<para>Las recomendaciones realizadas en esta sección no estan
enfocadas hacia un sistema de control de versiones en particular
y deberia ser sencillo implementarlas en cualquiera. La documentación
específica del sistema debe ofrecer los detalles necesarios.</para>

<sect3 id="version-everything">
<title>Versiones de todo</title>

<para>No solo hay que mantener el código del proyecto bajo el control
de versiones tambien las paginas web, documentación, FAQ, notas de 
diseño y cualquier cosa que pueda ser necesario editar. Todo esto
hay que mantenerlo cerca del código, en el mismo árbol que el
repositorio. Se deben mantener versiones de cualquier pieza de
información que pueda cambiar y archivar la que no cambie. 
Por ejemplo, un correo electrónico,
una vez enviado, no cambia, por lo tanto, mantener versiones de este
no tiene sentido (a menos que se convierta en una parte importante
de la documentación).</para>

<para>La razón de mantener versiones de todo en un mismo sitio, es
para que la gente sólo tenga que aprender un sistema para realizar
cambios. A menudo, un voluntario se iniciara modificando algunas
paginas web o partes de la documentación, para luego pasar a realizar
pequeñas contribuciones al código, por ejemplo. Cuando el proyecto
utiliza el mismo sistema para todo tipo de cambios, las personas sólo
tendrán que aprender THE ROPES una vez. Mantener las versiones juntas
significa que nuevas caracteristicas pueden ser añadidas junto
a la actualización de la documentación, y que al crear ramas del
código, se crearan ramas de la documentación, etc.</para>

<para>No hace falta mantener los <firstterm>ficheros generados</firstterm>
bajo el sistema de control de versiones ya que no son datos editables
generados por otros programas. Por ejemplo, algunos sistemas de
compilado generan los ficheros <filename>configure</filename> basandose
en una plantilla <filename>configure.in</filename>. Para realizar
cambios al fichero <filename>configure</filename> bastaria con
modíficar <filename>configure.in</filename> y volver a generarlo.
Entonces, sólo el fichero <filename>configure.in</filename> es
un fichero editable. Sólo es necesario mantener versiones de las
plantillas&mdash;si se hace con los ficheros generados, la gente
se olvidará de volver a generarlos cuando realicen algún cambio
en las plantillas y las resultantes inconsistencias crearan una
mayor confusión. <footnote><para>Alexey Mathotkin tiene una
opinión diferente sobre el tema de controlar las versiones de los
ficheros <filename>configure</filename> en un artículo llamado
"<citetitle>configure.in and version control</citetitle>" en
<ulink url="http://versioncontrolblog.com/2007/01/08/configurein-and-version-control/"/>.</para></footnote></para>

<para>La regla de que todos los datos editables deben ser mantenidos
bajo el control de versiones tiene una excepción desafortunada: el
gestor de fallos. La base de datos de fallos almacena una gran cantidad
de datos editables pero generalmente, por razones tecnicas, no se puede
mantener bajo el control de versiones principal. (Algunos gestores
tienen caracteristicas primitivas de control de versiones, pero
independiente de repositorio principal del proyecto.)</para>

</sect3>

<sect3 id="vc-browsing">
<title>Navegabilidad</title>

<para>El repositorio del proyecto debe ser accesible desde Internet.
Esto no solo significa la habilidad de visualizar la ultima revisión
de los ficheros del proyecto, pero permitir volver atras en el tiempo
y ver en revisiones anteriores, mirar las diferencias entre revisiones,
leer los mensajes de registro para cambios específicos, etc.</para>

<para>La navegabilidad es importante porque es un ligero portal a los
datos del proyecto. Si el repositorio no es accesible desde un navegador
web entonces alguien que desea inspeccionar un fichero en particular (por
ejemplo, para mirar si una mejora ha sido incluida en el código) tendrá
que instalar el mismo programa utilizado por el sistema de control
de versiones, lo cual convierte una simple consulta de dos minutos en
una tarea de medio hora o más.</para>

<para>Tambien implica URLs CANONICAL para visualizar revisiones
específicas de un fichero y para la ultima revisión en cualquier
momento. Esto puede ser muy útil durante discusiones tecnicas o para
indicar alguna documentación a la gente. Por ejemplo, en lugar de
decir "Para ayudas sobre como encontrar fallos en el servidor,
mirad el fichero www/hacking.html en vuestra copia funcional" se puede
decir "Para ayudas sobre como encontrar fallos en el servidor,
mirad <emphasis>http://svn.collab.net/repos/svn/trunk/www/hacking.html</emphasis>,"
dando una URL que siempre lleva a la ultima revisión del fichero
<filename>hacking.html</filename>. La URL es mejor porque no es nada
ambigua y evita la cuestión de si existe una copia funcional
actualizada.</para>

<para>Algunos sistemas de control de versiones incluyen un mecanismo
que permite la navegación del repositorio, mientras que otros
dependen de herramientas de terceros. Tres de estas herramientas son
<firstterm>ViewCVS</firstterm> (<ulink
url="http://viewcvs.sourceforge.net/"/>),
<firstterm>CVSWeb</firstterm> (<ulink
url="http://www.freebsd.org/projects/cvsweb.html"/>), and
<firstterm>WebSVN</firstterm> (<ulink
url="http://websvn.tigris.org/"/>).
La primera trabaja muy bien con CVS y con Subversion, la segunda
sñolo con CVS y la tercera sólo con Subversion.</para>

</sect3>

<sect3 id="commit-emails">
<title>Correos de cambios</title>

<para>Cada commit al repositorio deberia generar un correo electrónico
mostrando quien ha hecho el cambio, cuando, cuales ficheros y directorios
han cambiado y como. Este correo debe ser dirigido a una lista de correos
separada de las listas a las que envian los humanos. Los desarrolladores
y todos aquellos interesados deben ser animados para suscribirse a las
lista de commits ya que es la manera más efectiva de mantenerse al día con
lo que sucede en el proyecto al nivel del código. Aparte de los obvios
beneficios tecnicos de la revisión por la comunidad (<xref linkend="code-review"/>),
los correos con los cambios ayudan a crear un sentido de comunidad
porque establecen un ambiente compartido en el que la gente puede 
reaccionar ante diferentes eventos (commits) que saben son visibles
a otros tambien.</para>

<para>La configuración específica para habilitar estos correos varia
dependiendo de la versión del sistema de control de versiones pero
a menudo existe un script o páquete que facilita esto. Si se tiene
algún problema para encontrar estos, intente buscar en la documentación
el tema relacionado con los <firstterm>hooks</firstterm>,
especificamente el <firstterm>post-commit hook</firstterm>, tambien
llamado <firstterm>loginfo hook</firstterm> en CVS. Los
Post-commit hooks son tareas automatizadas que se ejecutan como
respuesta a los cambios enviados (commits). El hook es ejecutado
por un cambio individual, se rellena con la información acerca del
cambio y luego es liberada esa información para ser utilizada como
se desee&mdash;por ejemplo, para enviar un correo electrónico.</para>

<para>Con los sistemas de correos con cambios ya listos para usar,
quizas sea necesario modificar alguna de las siguientes conductas:</para>

<orderedlist>

  <listitem>
	<para>Algunos de estos sistemas no incluyen el diff en el correo
	que envian sino que enlazan con una URL para poder ver el cambio
	en la web utilizando el sistema de navegación del repositorio.
	Aunque esta bien dar una URL para que se pueda revisar el cambio
	luego, tambien es <emphasis>muy</emphasis> importante que el
	correo del commit incluya los diff. Leer el correo electrónico
	ya es parte de la rutina de la gente, así que si el contenido es
	visible allí mismo en el correo, los desarrolladores podrán
	revisar el commit en el mismo sitio sin la necesidad de abandonar
	sus clientes de correo. Si tienen que seguir un enlace a una
	página de revisiones, muchos no lo pulsarán, ya que esto requiere
	de una nueva acción en lugar de una continuación de lo que ya
	estaban haciendo. Por si fuera poco, si el lector desea preguntar
	algo acerca del cambio, es mucho más fácil responder al mensaje
	incluyendo el texto original y simplemente realizar anotaciones
	en el diff, en lugar de tener que visitar una página web y
	tomarse la molestia de copiar y pegar partes del diff en el
	navegador web al cliente de correo.</para>

	<para>(Por supuesto que si el diff es gigantesco, como cuando
	una gran parte de código nuevo ha sido añadido al repositorio,
	entonces tiene sentido omitir la parte del diff y ofrecer
	sólo la URL. Muchos de los sistemas permiten hacen esto
	automaticamente. Si el utilizado en el proyecto no es capaz
	de hacer esto, entonces sigue siendo mejor incluir los diffs
	completos. La conveniencia de la revisión y los comentarios
	es una piedra angular del desarrollo cooperativo, algo demasiado
	importante para olvidar.)</para>
  </listitem>

  <listitem>
	<para>Los correos con los cambios deben tener su cabecera
	Reply-To direccionada hacia la lista regular de desarrollo, no
	a la lista de los cambios, de esta manera cuando alguien revise
	un cambio y escriba una respuesta, esta debe ser dirigida
	automaticamente a la lista de desarrolladores, donde los temas
	técnicos son discutidos normalmente. Existen varias razones para
	esto, primero, se quiere mantener todas las discusiones tecnicas
	en la lista, porque es allí donde la gente espera que sucedan y
	porque así ésta es la única lista que será necesario archivar.
	Segundo, puede que existan partes interesadas no suscritas a la
	lista de cambios. Tercero, la lista de cambios es publicitada
	como una lista para los commits y no como una lista para los
	commits y las discusiones tecnicas ocasionadas. Quienes se han
	suscrito sólo a la lista de cambios, no se han suscrito a nada
	más que commits, al enviarles correos con material sin relación
	utilizando ésta via, es una violación del contrato implicito.
	Cuarto, algunas personas escriben programas que procesan los
	correos con los cambios (para publicarlos en una página web,
	por ejemplo). Estos programas estan preparados para manejar
	correos con un formato consistente y son incapaces de trabajar
	con correos escritos por humanos.</para>

	<para>Hay que señalar que ésta recomendación no contradice
	las recomendaciones anteriores en 
	<xref linkend="reply-to"/><phrase output="printed"></phrase>.
	Siempre esta bien que el remitente del mensaje configure
	la cabecera Reply-to. En este caso, el remitente es el
	sistema de control de versiones y su Reply-to lo configura
	de tal manera que indique que el lugar apropiado para responder
	es la lista de desarrollo y no la lista de cambios</para>
  </listitem>

</orderedlist>

<sidebar id="cia">
<title>CIA: Otro mecanismo de publicación de cambios</title>

<para>Los correos con los cambios no son la única forma de propagar
las noticias de los cambios. Recientemente, otro mecanismo llamado CIA
(<ulink url="http://cia.navi.cx/"/>) ha sido desarrollador. Este es un
distribuidor y AGGREGATOR de estádisticas de cambios. El uso más popular
de CIA es el de enviar notificaciones de los commits a un cánal IRC de
forma que las personas en el canal pueden ver los commits en tiempo
real. Aunque es una utilidad menos técnica que los correos electrónicos,
ya que los observadores puede que esten o no conectados cuando las alertas
sobre nuevos cambios llegan al canal, esta técnica tiene una inmensa
utiidad <emphasis>social</emphasis>. La gente tiene la sensación de
pertenecer a algo vivo y activo, y siente que pueden ver el progreso
que se está haciendo ante sus propios ojos.</para> 

<para>El programa de notificaciones del CIA es invocado por el
post-commit hook, da formato al commit en un mensaje XML y lo envia
al servidor central (por lo general <literal>cia.navi.cx</literal>).
Este servidor luego distribuye la información a los otros
foros.</para>

<para>CIA tambien puede ser configurado para enviar
<ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html">
feeds RSS</ulink>. Más detalles en la documentación en
<ulink url="http://cia.navi.cx/"/>.</para>

<para>Para ver un ejemplo de CIA en acción conectese a
<literal>irc.freenode.net</literal>, y al canal
<literal>#commits</literal>.</para>

</sidebar>

</sect3>

<sect3 id="branches">
<title>Las ramas para evitar cuellos de botella</title>

<para>Los usuarios inexpertos del control de versiones pueden sentirse
temerosos de crear ramas y uniones. Esto sea probablemente un efecto
colateral de la popularidad de CVS: su interfaz de ramas y uniones puede
ser poco intuitivo, así que muchas personas han aprendido a evitar
estas operaciones por completo.</para>

<para>Si se encuentra entre estas personas, decidase ahora mismo a
conquistar cualquier miedo que pueda tener y tomese el tiempo de aprender
cómo funcionan las ramas y las uniones. No son operaciones muy complicadas
una vez que se acostumbra a ellas y se vuelven muy importantes mientras
el proyecto adquiere más desarrolladores.</para>

<para>Las ramas son muy importantes porque convierten un recurso
escaso&mdash;espacio de trabajo en el código del proyecto&mdash;en uno
abundante. Normalmente, todos los desarrolladores trabajan juntos
en la misma caja de arena, contruyendo el mismo castillo. Cuando alguien
desea añadir un nuevo puente levadiso, pero no puede convencer a los
demás de que sería una mejora, entonces las ramas hacen posible que vaya
a una esquina aislada donde probar su puente. Si el esfuerzo tiene exito,
puede invitar a otros desarrolladores para que evaluen el resultado. Si
todos estan de acuerdo en que el resultado es bueno, pueden hacer que
el sistema de control de versiones mueva ("merge") el puente levadiso
de la rama del castillo a la rama principal del castillo.</para>

<para>Es fácil ver como esta habilidad ayuda al desarollo colaborativo,
ya que la gente necesita de cierta libertad para probar cosas nuevas
sin sentirse que estan interfiriendo con el trabajo de otros. Igual
de importante es cuando el código debe ser aislado del CHURN usual
de desarrollo de manera que un fallo sea reparado o un lanzamiento
sea estabilizado (más en <xref linkend="stabilizing-a-release"/> y
en <xref linkend="release-lines"/><phrase output="printed"> en
<xref linkend="development-cycle"/></phrase>) sin la preocupación
de seguir un blanco en movimiento.</para>

<para>Hay que utilizar las ramas libremente y fomentar su uso entre
otros. Pero tambien hay que asegurarse de que una rama en particular
se mantenga activa exactamente durante el tiempo que sea necesaria.
Incluso quienes no trabajan en la rama principal mantienen una visión
periferica de lo que está sucediendo en ésta. Esta visión es deseable,
por supuesto, y los correos con cambios deben salir de estas ramas
como de cualquier otra. Pero las ramas no deben convertirse en un
mecanismo que divida a la comunidad de desarrolladores. Con raras
excepciones, el objetivo eventual de la mayoria de las ramas debe
de ser su unión a la rama principal y desaparecer.</para>

</sect3>

<sect3 id="vc-singularity">
<title>Singularidad de la información</title>

<para>Las uniones tienen un corolario importante: nunca se debe enviar
el mismo cambio dos veces, es decir, un cambio dado sólo debe ser
introducido al sistema de control de versiones solo una vez. La revisión
(o conjunto de revisiones) en la que el cambio es introducido es su
identificador único desde ese momento. Si debe ser aplicado a otras
ramas aparte de la cual en la que ha sido hecho, entonces deberá ser unido
desde su punto de entrada original a sus otros destinos &mdash;al
contrario de enviar cambios textualmente identicos, que tendrian el
mismo efecto en el código, pero harian del mantenimiento eficaz y de
la gestión de lanzamientos una tarea imposible.</para>

<para>Los efectos prácticos de este consejo difieren entre sistemas
de control de veriones. En algunos sistemas, las uniones son eventos
especiales, fundamentalmente distintos de los commits y acarrean sus
metadatos propios. En otros, el resultado de las uniones son enviadas
de la misma manera que los cambios son enviados asi que la mejor manera
de distiguir una unión de un nuevo cambio es leyendo los mensajes de
registro. El mensaje de registro de una unión no repite el mensaje
de registro del cambio original, en cambio, sólo indica que es una
unión y da la identificación de la revisión del cambio original, con
como mucho una línea de sumario del sus efectos. Si alguien desea ver
el mensaje de registro completo, deberá consultar la revisión original.</para>

<para>La razón por la cual es importante evitar la repetición de los
mensajes de registro es que estos pueden ser editados despues de que
se hayan enviado. Si un mensaje de registro es repetido en el destino
de cada unión, entonces incluso si alguien edita el mensaje original,
deja todos los otros mensajes sin corregir&mdash;lo cual sólo puede
causar confusión a largo plazo.</para>

<para>El mismo principio se aplica al retirar un cambio. Si esto llegara
a suceder, entonces el mensaje de registro para la retirada solo debe
indicar que una revisión en particular está siendo retirada, 
no debe describir el cambio en el código resultante, pues la semantica
del cambio se puede intuir al leer el mensaje de registro original del
cambio. Por supuesto, el mensaje de registro del retiro tambien debe
indicar la razón por la cual ese cambio ha sido retirado, pero no debe
duplicar nada del mensaje de registro del cambio original. Si es posible,
hay que volver y editar el mensaje de registro original para señalar
que ha sido retirado.</para>

<para>Todo lo anterior implica que se debe utilizar una sintaxis 
consistente al referirnos a las revisiones. Esto es de gran ayuda
no sólo en los mensajes de registro, sino en los correos electrónicos,
en el gestor de fallos y en todas partes. Si se esta utilizando
CVS, recomiendo "<literal>directorio/al/fichero/del/proyecto/rama:REV</literal>",
donde REV es un número de revisión en CVS como "1.76". Si se esta
utilizando Subversion, la sintaxis estándar para la revisión
1729 es "r1729" (el directorio de los ficheros no es necesario
porque Subversion utiliza números globales para las revisiones). En
otros sistemas, existe por lo general una sintaxis estándar para
expresar el nombre del conjunto de cambios. Cualquiera que sea
la sintaxis apropiada para el sistema utilizado, hay que animar
a la gente a que lo utilicen al referirse a algún cambio. El
uso consistente en el nombre de los cambios permiten que el
mantenimiento del proyecto sea mucho más sencillo (como ya
veremos en <xref linkend="communications"/> y en 
<xref linkend="development-cycle"/>), y dado que mucho de este
mantenimiento será realizado por voluntarios, debe ser lo más
sencillo posible.</para>

<para>Más información en
<xref
linkend="releases-and-daily-development"/><phrase
output="printed"> 
<xref linkend="development-cycle"/></phrase>.</para>

</sect3>

<sect3 id="vc-authz">
<title>Autorizaciones</title>

<para>Muchos de los sistemas de control de versiones ofrecen la posibilidad
por la cual a ciertas personas se les permite o no, realizar cambios
en areas específicas del repositorio. Siguiendo el principio de que
cuando a las personas se les entrega un martillo empiezan a buscar
clavos para golpear, muchos proyectos utilizan esta caracteristica
con ABANDON, permitiendo cuidadosamente el acceso solo a las areas
donde tienen permiso de enviar cambio y asegurandose de que no lo puedan
hacer en ningún otro sitio. (Más información en 
<xref linkend="committers"/><phrase output="printed">
<xref linkend="managing-volunteers"/></phrase> sobre como
los proyectos deciden quienes pueden hacer cambios y donde.)</para>

<para>Probablemente hayan pequeños daños implementar un control
así de estricto, pero una política un poco más relajada tambien
esta bien. Algunos proyectos utilizan un sistema basado en el honor:
cuando a una persona se le permite la posibilidad de realizar cambios,
aunque sea a una pequeña area del repositorio, lo que reciben es una
contraseña que les permite realizar cambios en cualquier otro sitio
del repositorio y sólo se les pide que mantengan sus cambios en su
area. Hay que recordar que no existe ningún peligro aquí: de todas formas,
en un proyecto activo, todos los cambios son revisados. Si alguien hace
un cambio donde no debía, alguien más se dará cuenta y dirá algo. Es muy
sencillo si un cambio debe ser rectificado&mdash;todo está bajo el control
de versiones de todas formas, así que sólo hay que volver atras.</para> 

<para>Existen varias ventajas en tal aproximación tan relajada.
Primero, mientras los desarrolladores se vayan expandiendo en las
diferentes areas (lo cual harán a menudo si siguen en el proyecto),
no es necesario un trabajo administrativo extra de tener que dar y
quitar privilegios. Una vez que la decisión es tomada, la persona
puede empezar a enviar sus cambios a la nueva area sin problemas.</para>

<para>Segundo, la expansión se puede filtrar mejor, ya que generalmente,
quienes realizan cambios en el area X y desean expandirse al area Y
sólo tienen que empezar a enviar sus cambios contra Y y solicitar
su revisión. Si alguien con acceso a cambios al area Y recibe alguno
de estos parches y lo aprueba, puede pedir que el cambio sea enviado
directamente (mencionando el nombre de quien ha revisado/aprobado el
cambio en el mensaje de registro). De esta manera, el commit vendrá
de quien ha hecho el cambio, lo cual es preferible desde un punto de
vista administrativo y de credibilidad.</para> 

<para>Por úlimo, y quizas la razón más importante, al utilizar
un sistema basado en el honor, se crea una atmosfera de confianza
y respeto mutuo. Al darle a alguien permiso para enviar cambio a
un subdominio se hace una declaración acerca de su preparación
técnica&mdash;la cual dice: "Hemos visto que tienes la capacidad
para realizar cambios en cierto dominio, así que a por ello". Pero
imponer controles estrictos en las autorizaciones dice: "No sólo
estamos juzgando tus limitadas capacidades, sino que tambien
sospechamos de tus <emphasis>intenciones</emphasis>." Este no
es el tipo de declaraciones que se desean hacer si pueden ser
evitadas. Incluir a alguien dentro del grupo de desarrolladores
del proyecto es una oportunidad de iniciarlos en un circulo de
confianza mutua. Una buena manera de hacer esto es dar más
poder del que se supone deben tener e informarles que es su
responsabilidad mantenerse dentro de los límites impuestos.</para>

<para>El proyecto Subversion ha operado bajo este sistema por más
de cuatro años, con 33 desarrolladores con privilegios completos
y 43 con privilegios parciales. La única distinción que el sistema
fuerza esta entre quienes envian cambios y quienes no, otras divisiones
son mantenidas sólo por humanos. Incluso así, nunca hemos tenido
ningún problema con que alguien realice un cambio deliberado fuera
de su dominio. Una que otra vez han habido inocentes mal entendidos
sobre la extensión de los privilegios de alguna persona, pero siempre
es resuelto rápida y amigablemente.</para>

<para>Obviamente, en situaciones donde esto es poco práctico se debe
depender en controles estrictos en las autorizaciones, pero dadas
situaciones son raras. Incluso cuando hay millones de lineas de
código y ciento o miles de desarrolladores, un commit hecho a
cualquier módulo del código sigue siendo revisado por quienes
trabajan en dicho módulo y son quienes pueden reconocer si quien
lo ha intentado hacer puede hacerlo. Si una revisión regular no
está sucediendo entonces el proyecto tiene problemas más importantes
con los cuales lidiar que el sistema de autorizaciones.</para>

<para>Para concluir, no hace falta pasar mucho tiempo con las
autorizaciones del sistema de control de versiones a menos que se
tenga una razón en específico. Usualmente esto no trae beneficios
tangibles y confiar en el control humano tiene sus ventajas.</para>

<para>None of this should be taken to mean that the restrictions
themselves are unimportant, of course.  It would be bad for a project
to encourage people to commit in areas where they're not qualified.
Furthermore, in many projects, full (unrestricted) commit access has a
special status: it implies voting rights on project-wide questions.
This political aspect of commit access is discussed more in <xref
linkend="electorate"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>.</para>

<para>Nada de debe ser tomado como 

</sect3>

</sect2>

</sect1>


<!-- ========================== SECTION =========================== -->
<sect1 id="bug-tracker">
<title>Bug Tracker</title>

<para>Bug tracking is a broad topic; various aspects of it are
discussed throughout this book.  Here I'll try to concentrate mainly
on setup and technical considerations, but to get to those, we have to
start with a policy question: exactly what kind of information should
be kept in a bug tracker?</para>

<para>The term <firstterm>bug tracker</firstterm> is misleading.  Bug
tracking systems are also frequently used to track new feature
requests, one-time tasks, unsolicited patches&mdash;really anything
that has distinct beginning and end states, with optional transition
states in between, and that accrues information over its lifetime.
For this reason, bug trackers are also called <firstterm>issue
trackers</firstterm>, <firstterm>defect trackers</firstterm>,
<firstterm>artifact trackers</firstterm>, <firstterm>request
trackers</firstterm>, <firstterm>trouble ticket systems</firstterm>,
etc.  See <xref linkend="bug-trackers"/> for a list of software.
</para>

<para>In this book, I'll continue to use "bug tracker" for the
software that does the tracking, because that's what most people call
it, but will use <firstterm>issue</firstterm> to refer to a single
item in the bug tracker's database.  This allows us to distinguish
between the behavior or misbehavior that the user encountered (that is,
the bug itself), and the tracker's <emphasis>record</emphasis> of the
bug's discovery, diagnosis, and eventual resolution.  Keep in mind
that although most issues are about actual bugs, issues can be used to
track other kinds of tasks too.</para>

<para>The classic issue life cycle looks like this:

<orderedlist>
  <listitem><para>Someone files the issue.  They provide a summary, an
            initial description (including a reproduction recipe, if
            applicable; see
            <xref
            linkend="users-to-volunteers"/><phrase
            output="printed"> in
            <xref linkend="managing-volunteers"/></phrase> for
            how to encourage good bug reports), and whatever other
            information the tracker asks for.  The person who files
            the issue may be totally unknown to the project&mdash;bug
            reports and feature requests are as likely to come from
            the user community as from the developers.</para>

            <para>Once filed, the issue is in what's called an
            <firstterm>open</firstterm> state.  Because no action has
            been taken yet, some trackers also label it as
            <firstterm>unverified</firstterm> and/or
            <firstterm>unstarted</firstterm>.  It is not assigned to
            anyone; or, in some systems, it is assigned to a fake
            user to represent the lack of real assignation.  At this
            point, it is in a holding area: the issue has been
            recorded, but not yet integrated into the project's
            consciousness.</para>
  </listitem>
  <listitem><para>Others read the issue, add comments to it, and
            perhaps ask the original filer for clarification on some
            points.</para>
  </listitem>
  <listitem><para>The bug gets <firstterm>reproduced</firstterm>.
            This may be the most important moment in its
            life cycle.  Although the bug is not actually fixed yet,
            the fact that someone besides the original filer was able
            to make it happen proves that it is genuine, and, no less
            importantly, confirms to the original filer that they've
            contributed to the project by reporting a real bug.</para>
  </listitem>
  <listitem><para>The bug gets <firstterm>diagnosed</firstterm>: its
            cause is identified, and if possible, the effort required
            to fix it is estimated.  Make sure these things get
            recorded in the issue; if the person who diagnosed the
            bug suddenly has to step away from the project for a
            while (as can often happen with volunteer developers),
            someone else should be able to pick up where she left
            off.</para>

            <para>In this stage, or sometimes the previous one, a
            developer may "take ownership" of the issue and
            <firstterm>assign</firstterm> it to herself (<xref
            linkend="delegation-assignment"/><phrase
            output="printed"> in
            <xref linkend="managing-volunteers"/></phrase>
            examines the assignment process in more detail).  The issue's
            <firstterm>priority</firstterm> may also be set at this
            stage.  For example, if it is so severe that it should
            delay the next release, that fact needs to be identified
            early, and the tracker should have some way of noting
            it.</para>
  </listitem>
  <listitem><para>The issue gets scheduled for resolution.
            Scheduling doesn't necessarily mean naming a date by which
            it will be fixed.  Sometimes it just means deciding which
            future release (not necessarily the next one) the bug
            should be fixed by, or deciding that it need not block any
            particular release.  Scheduling may also be dispensed
            with, if the bug is quick to fix.</para>
  </listitem>
  <listitem><para>The bug gets fixed (or the task completed, or
            the patch applied, or whatever).  The change or set of
            changes that fixed it should be recorded in a comment in
            the issue, after which the issue is
            <firstterm>closed</firstterm> and/or marked as
            <firstterm>resolved</firstterm>.</para>
  </listitem>
</orderedlist>

</para>

<para>There are some common variations on this life cycle.  Sometimes
an issue is closed very soon after being filed, because it turns out
not to be a bug at all, but rather a misunderstanding on the part of
the user.  As a project acquires more users, more and more such
invalid issues will come in, and developers will close them with
increasingly short-tempered responses.  Try to guard against the
latter tendency.  It does no one any good, as the individual user in
each case is not responsible for all the previous invalid issues; the
statistical trend is visible only from the developers' point of view,
not the user's.  (In
<xref linkend="bug-filtering"/><phrase output="printed"> later
in this chapter,</phrase> we'll look at
techniques for reducing the number of invalid issues.)  Also, if
different users are experiencing the same misunderstanding over and
over, it might mean that that aspect of the software needs to be
redesigned.  This sort of pattern is easiest to notice when there is
an issue manager monitoring the bug database; see
<xref linkend="issue-manager"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>.</para>

<para>Another common life cycle variation is for the issue to be closed
as a <firstterm>duplicate</firstterm> soon after Step 1.  A duplicate
is when someone files an issue that's already known to the project.
Duplicates are not confined to open issues: it's possible for a bug to
come back after having been fixed (this is known as a
<firstterm>regression</firstterm>), in which case the preferred course
is usually to reopen the original issue and close any new reports as
duplicates of the original one.  The bug tracking system should keep
track of this relationship bidirectionally, so that reproduction
information in the duplicates is available to the original issue, and
vice versa.</para>

<para>A third variation is for the developers to close the issue,
thinking they have fixed it, only to have the original reporter reject
the fix and reopen it.  This is usually because the developers simply
don't have access to the environment necessary to reproduce the bug,
or because they didn't test the fix using the exact same reproduction
recipe as the reporter.</para>

<para>Aside from these variations, there may be other small details of
the life cycle that vary depending on the tracking software.  But the
basic shape is the same, and while the life cycle itself is not
specific to open source software, it has implications for how open
source projects use their bug trackers.</para>

<para>As Step 1 implies, the tracker is as much a public face of the
project as the mailing lists or web pages.  Anyone may file an issue,
anyone may look at an issue, and anyone may browse the list of currently
open issues.  It follows that you never know how many people are
waiting to see progress on a given issue.  While the size and skill of
the development community constrains the rate at which issues can be
resolved, the project should at least try to acknowledge each issue the
moment it appears.  Even if the issue lingers for a while, a response
encourages the reporter to stay involved, because she feels that a
human has registered what she has done (remember that filing an
issue usually involves more effort than, say, posting an email).
Furthermore, once an issue is seen by a developer, it enters the
project's consciousness, in the sense that that developer can be on
the lookout for other instances of the issue, can talk about it with
other developers, etc.</para>

<para>The need for timely reactions implies two things:

<itemizedlist>
  <listitem>
    <para>The tracker must be connected to a mailing list, such that
    every change to an issue, including its initial filing, causes a
    mail to go out describing what happened.  This mailing list
    is usually different from the regular development list, since not
    all developers may want to receive automated bug mails, but (just
    as with commit mails) the Reply-to header should be set to the
    development mailing list.</para>
  </listitem>
  <listitem>
    <para>The form for filing issues should capture the reporter's
    email address, so she can be contacted for more information.
    (However, it should not <emphasis>require</emphasis> the
    reporter's email address, as some people prefer to report issues
    anonymously.  See
    <xref linkend="anonymity"/><phrase output="printed"> later
    in this chapter</phrase> for more on the importance of
    anonymity.)</para>
  </listitem>
</itemizedlist>

</para>

<sect2 id="bug-tracker-mailing-list-interaction">
<title>Interaction with Mailing Lists</title>

<para>Make sure the bug tracker doesn't turn into a discussion forum.
Although it is important to maintain a human presence in the bug
tracker, it is not fundamentally suited to real-time discussion.
Think of it rather as an archiver, a way to organize facts and
references to other discussions, primarily those that take place on
mailing lists.</para>

<para>There are two reasons to make this distinction.  First, the bug
tracker is more cumbersome to use than the mailing lists (or than
real-time chat forums, for that matter).  This is not because bug
trackers have bad user interface design, it's just that their
interfaces were designed for capturing and presenting discrete states,
not free-flowing discussions.  Second, not everyone who should be
involved in discussing a given issue is necessarily watching the bug
tracker.  Part of good issue management (see
<xref linkend="share-management"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>) is to make sure
each issue is brought to the right peoples' attention, rather than
requiring every developer to monitor all issues.  In
<xref linkend="bug-tracker-usage"/><phrase output="printed"> in <xref linkend="communications"/>,</phrase> we'll look at ways to make
sure people don't accidentally siphon discussions out of appropriate
forums and into the bug tracker.</para>

<para>Some bug trackers can monitor mailing lists and automatically
log all emails that are about a known issue.  Typically they do this
by recognizing the issue's identifying number in the subject line of
the mail, as part of a special string; developers learn to include
these strings in their mails to attract the tracker's notice.  The bug
tracker may either save the entire email, or (even better) just record
a link to the mail in the regular mailing list archive.  Either way,
this is a very useful feature; if your tracker has it, make sure
both to turn it on and to remind people to take advantage of
it.</para>

</sect2>

<sect2 id="bug-filtering">
<title>Pre-Filtering the Bug Tracker</title>

<para>Most issue databases eventually suffer from the same problem: a
crushing load of duplicate or invalid issues filed by well-meaning but
inexperienced or ill-informed users.  The first step in combatting
this trend is usually to put a prominent notice on the front page of
the bug tracker, explaining how to tell if a bug is really a bug, how
to search to see if it's already been filed, and finally, how to
effectively report it if one still thinks it's a new bug.</para>

<para>This will reduce the noise level for a while, but as the number
of users increases, the problem will eventually come back.  No
individual user can be blamed for it.  Each one is just trying to
contribute to the project's well-being, and even if their first bug
report isn't helpful, you still want to encourage them to stay
involved and file better issues in the future.  In the meantime,
though, the project needs to keep the issue database as free of junk
as possible.</para>

<para>The two things that will do the most to prevent this problem
are: making sure there are people watching the bug tracker who have
enough knowledge to close issues as invalid or duplicates the moment
they come in, and requiring (or strongly encouraging) users to confirm
their bugs with other people before filing them in the tracker.</para>

<para>The first technique seems to be used universally.  Even projects
with huge issue databases (say, the Debian bug tracker at
<ulink url="http://bugs.debian.org/"/>, which contained 315,929 issues
as of this writing) still arrange things so that
<emphasis>someone</emphasis> sees each issue that comes in.  It may be
a different person depending on the category of the issue.  For
example, the Debian project is a collection of software packages, so
Debian automatically routes each issue to the appropriate package
maintainers.  Of course, users can sometimes misidentify an issue's
category, with the result that the issue is sent to the wrong person
initially, who may then have to reroute it.  However, the important
thing is that the burden is still shared&mdash;whether the user
guesses right or wrong when filing, issue watching is still
distributed more or less evenly among the developers, so each issue is
able to receive a timely response.</para>

<para>The second technique is less widespread, probably because it's
harder to automate.  The essential idea is that every new issue gets
"buddied" into the database.  When a user thinks he's found a problem,
he is asked to describe it on one of the mailing lists, or in an IRC
channel, and get confirmation from someone that it is indeed a bug.
Bringing in that second pair of eyes early can prevent a lot of
spurious reports.  Sometimes the second party is able to identify that
the behavior is not a bug, or is fixed in recent releases.  Or she may
be familiar with the symptoms from a previous issue, and can prevent a
duplicate filing by pointing the user to the older issue.  Often it's
enough just to ask the user "Did you search the bug tracker to see if
it's already been reported?"  Many people simply don't think of that,
yet are happy to do the search once they know someone's
<emphasis>expecting</emphasis> them to.</para>

<para>The buddy system can really keep the issue database clean, but
it has some disadvantages too.  Many people will file solo anyway,
either through not seeing, or through disregarding, the instructions
to find a buddy for new issues.  Thus it is still necessary for
volunteers to watch the issue database.  Furthermore, because most new
reporters don't understand how difficult the task of maintaining the
issue database is, it's not fair to chide them too harshly for
ignoring the guidelines.  Thus the volunteers must be vigilant, and
yet exercise restraint in how they bounce unbuddied issues back to
their reporters.  The goal is to train each reporter to use the
buddying system in the future, so that there is an ever-growing pool
of people who understand the issue-filtering system.  On seeing an
unbuddied issue, the ideal steps are:</para>

<orderedlist>
  <listitem>
    <para>Immediately respond to the issue, politely thanking the user
          for filing, but pointing them to the buddying guidelines
          (which should, of course, be prominently posted on the web
          site).</para>
  </listitem>
  <listitem>
    <para>If the issue is clearly valid and not a duplicate, approve it
          anyway, and start it down the normal life cycle.  After all,
          the reporter's now been informed about buddying, so there's
          no point wasting the work done so far by closing a valid
          issue.</para>
  </listitem>
  <listitem>
    <para>Otherwise, if the issue is not clearly valid, close it, but
          ask the reporter to reopen it if they get confirmation from
          a buddy.   When they do, they should put a reference to the
          confirmation thread (e.g., a URL into the mailing list
          archives).</para>
  </listitem>
</orderedlist>

<para>Remember that although this system will improve the signal/noise
ratio in the issue database over time, it will never completely stop
the misfilings.  The only way to prevent misfilings entirely is to
close off the bug tracker to everyone but developers&mdash;a cure that
is almost always worse than the disease.  It's better to accept that
cleaning out invalid issues will always be part of the project's
routine maintenance, and to try to get as many people as possible to
help.</para>

<para>See also
<xref linkend="issue-manager"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="irc">
<title>IRC / Real-Time Chat Systems</title>

<para>Many projects offer real-time chat rooms using <firstterm>Internet
Relay Chat</firstterm> (<firstterm>IRC</firstterm>), forums where users
and developers can ask each other questions and get instant responses.
While you <emphasis>can</emphasis> run an IRC server from your own
web site, it is generally not worth the hassle.  Instead, do what
everyone else does: run your IRC channels at Freenode
(<ulink url="http://freenode.net/"/>).  Freenode gives you the control
you need to administer your project's IRC
channels,<footnote><para>There is no requirement or expectation that
you donate to Freenode, but if you or your project can afford it,
please consider a contribution.  They are a tax-exempt charity in the
U.S., and they perform a valuable service.</para></footnote> while
sparing you the not-insignificant trouble of maintaining an IRC server
yourself.</para>

<para>The first thing to do is choose a channel name.  The most
obvious choice is the name of your project&mdash;if that's available
at Freenode, then use it.  If not, try to choose something as close to
your project's name, and as easy to remember, as possible.  Advertise
the channel's availabity from your project's web site, so a visitor
with a quick question will see it right away.  For example, this
appears in a prominently placed box at the top of Subversion's home
page:</para>

  <blockquote>
    <para><emphasis>If you're using Subversion, we recommend that you
    join the</emphasis> <literal>users@subversion.tigris.org</literal>
    <emphasis>mailing list, and read the <ulink
    url="http://svnbook.red-bean.com/">Subversion Book</ulink> and
    <ulink
    url="http://subversion.tigris.org/faq.html">FAQ</ulink>.
    You can also ask questions on IRC at</emphasis>
    <literal>irc.freenode.net</literal>
    <emphasis>channel</emphasis>&nbsp;<literal>#svn</literal>.</para>
  </blockquote>

<para>Some projects have multiple channels, one per subtopic.  For
example, one channel for installation problems, another for usage
questions, another for development chat, etc. (<xref
linkend="growth"/><phrase output="printed"> in
<xref linkend="communications"/></phrase> discusses and how to
divide into multiple channels).  When your project is young, there
should only be one channel, with everyone talking together.  Later, as
the user-to-developer ratio increases, separate channels may become
necessary.</para>

<para>How will people know all the available channels, let alone which
channel to talk in?  And when they talk, how will they know what the
local conventions are?</para>

<para>The answer is to tell them by setting the <firstterm>channel
topic</firstterm>.<footnote><para>To set a channel topic, use the
<literal>/topic</literal> command.  All commands in IRC start with
"<literal>/</literal>".  See <ulink url="http://www.irchelp.org/"/> if
you're not familiar with IRC usage and administration; in particular,
<ulink url="http://www.irchelp.org/irchelp/irctutorial.html"/> is an
excellent tutorial.</para></footnote>  The channel topic is a brief
message each user sees when they first enter the channel.  It gives
quick guidance to newcomers, and pointers to further information.  For
example:</para>

<screen>
You are now talking on #svn

Topic for #svn is Forum for Subversion user questions, see also
http://subversion.tigris.org/. || Development discussion happens in
#svn-dev. || Please don't paste long transcripts here, instead use
a pastebin site like http://pastebin.ca/. || NEWS: Subversion 1.1.0
is released, see http://svn110.notlong.com/ for details.
</screen>

<para>That's terse, but it tells newcomers what they need to know.  It
says exactly what the channel is for, gives the project home page (in
case someone wanders into the channel without having first been to the
project web site), mentions a related channel, and gives some guidance
about pasting.</para>

<sidebar id="paste-sites">
<title>Paste Sites</title>

<para>An IRC channel is a shared space: everyone can see what everyone
else is saying.  Normally, this is a good thing, as it allows people
to jump into a conversation when they think they have something to
contribute, and allows spectators to learn by watching.  But it
becomes problematic when someone has to provide a large quantity of
information at once, such as a debugging session transcript, because
pasting too many lines of output into the channel will disrupt other
conversations.</para>

<para>The solution is to use one of the
<firstterm>pastebin</firstterm> or <firstterm>pastebot</firstterm>
sites.  When requesting a large amount of data from someone, ask them
not to paste it into the channel, but instead to go to (for example)
<ulink url="http://pastebin.ca/"/>, paste their data into the form
there, and tell the resulting new URL to the IRC channel.  Anyone can
then visit the URL and view the data.</para>

<para>There are a number of free paste sites available now, too many
for a comprehensive list, but here are some of the ones I've seen used:
<ulink url="http://www.nomorepasting.com/"/>,
<ulink url="http://pastebin.ca/"/>,
<ulink url="http://nopaste.php.cd/"/>
<ulink url="http://rafb.net/paste/"/>
<ulink url="http://sourcepost.sytes.net/"/>,
<ulink url="http://extraball.sunsite.dk/notepad.php"/>,
and
<ulink url="http://www.pastebin.com/"/>.</para>

</sidebar>

<sect2 id="bots">
<title>Bots</title>

<para>Many technically-oriented IRC channels have a non-human member,
a so-called <firstterm>bot</firstterm>, that is capable of storing and
regurgitating information in response to specific commands.
Typically, the bot is addressed just like any other member of the
channel, that is, the commands are delivered by "speaking to" the bot.
For example:</para>

<screen>
&lt;kfogel&gt; ayita: learn diff-cmd = http://subversion.tigris.org/faq.html#diff-cmd
&lt;ayita&gt;  Thanks!
</screen>

<para>That told the bot (who is logged into the channel as ayita) to
remember a certain URL as the answer to the query "diff-cmd".  Now we
can address ayita, asking the bot to tell another user about
diff-cmd:</para>

<screen>
&lt;kfogel&gt; ayita: tell jrandom about diff-cmd
&lt;ayita&gt;  jrandom: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>The same thing can be accomplished via a convenient shorthand:</para>

<screen>
&lt;kfogel&gt; !a jrandom diff-cmd
&lt;ayita&gt;  jrandom: http://subversion.tigris.org/faq.html#diff-cmd
</screen>

<para>The exact command set and behaviors differ from bot to bot.  The
above example is with <literal>ayita</literal>
(<ulink url="http://hix.nu/svn-public/alexis/trunk/"/>), of which
there is usually an instance running in <literal>#svn</literal> at
freenode.  Other bots include Dancer
(<ulink url="http://dancer.sourceforge.net/"/>) and Supybot
(<ulink url="http://supybot.com/"/>).  Note that no special server
privileges are required to run a bot.  A bot is a client program;
anyone can set one up and direct it to listen to a particular
server/channel.</para>

<para>If your channel tends to get the same questions over and over,
I highly recommend setting up a bot.  Only a small percentage of
channel users will acquire the expertise needed to manipulate the bot,
but those users will answer a disproportionately high percentage of
questions, because the bot enables them to respond so much more
efficiently.</para>

</sect2>

<sect2 id="irc-archiving">
<title>Archiving IRC</title>

<para>Although it is possible to archive everything that happens in an
IRC channel, it's not necessarily expected.  IRC conversations may be
nominally public, but many people think of them as informal,
semi-private conversations.  Users may be careless with grammar, and
often express opinions (for example, about other software or other
programmers) that they wouldn't want preserved forever in an online
archive.</para>

<para>Of course, there will sometimes be <emphasis>excerpts</emphasis>
that should be preserved, and that's fine.  Most IRC clients can log a
conversation to a file at the user's request, or failing that, one can
always just cut and paste the conversation from IRC into a more
permanent forum (most often the bug tracker).  But indiscriminate
logging may make some users uneasy.  If you do archive everything,
make sure you state so clearly in the channel topic, and give a URL to
the archive.</para>

</sect2>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="wikis">
<title>Wikis</title>

<para>A <firstterm>wiki</firstterm> is a web site that allows any
visitor to edit or extend its content; the term "wiki" (from a
Hawaiian word meaning "quick" or "super-fast") is also used to refer
to the software that enables such editing.  Wikis were invented in
1995, but their popularity has really started to take off since 2000
or 2001, boosted partly by the success of Wikipedia (<ulink
url="http://www.wikipedia.org/"/>), a wiki-based free-content
encyclopedia.  Think of a wiki as falling somewhere between IRC and
web pages: wikis don't happen in realtime, so people get a chance to
ponder and polish their contributions, but they are also very easy to
add to, involving less interface overhead than editing a regular web
page.</para>

<para>Wikis are not yet standard equipment for open source projects,
but they probably will be soon.  As they are relatively new
technology, and people are still experimenting with different ways of
using them, I will just offer a few words of caution here&mdash;at
this stage, it's easier to analyze misuses of wikis than to analyze
their successes.</para>

<para>If you decide to run a wiki, put a lot of effort into having a
clear page organization and pleasing visual layout, so that visitors
(i.e., potential editors) will instinctively know how to fit in their
contributions.  Equally important, post those standards on the wiki
itself, so people have somewhere to go for guidance.  Too often, wiki
administrators fall victim to the fantasy that because hordes of
visitors are individually adding high quality content to the site,
the sum of all these contributions must therefore also be of high
quality.  That's not how web sites work.  Each individual page or
paragraph may be good when considered by itself, but it will not be
good if embedded in a disorganized or confusing whole.  Too often,
wikis suffer from:</para>

<itemizedlist>
  <listitem>
     <para><emphasis role="bold">Lack of navigational principles.</emphasis>
     A well-organized web site makes visitors feel like they know
     where they are at any time.  For example, if the pages are
     well-designed, people can intuitively tell the difference
     between a "table of contents" region and a "content" region.
     Contributors to a wiki will respect such differences too, but
     only if the differences are present to begin with.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Duplication of information.</emphasis>
     Wikis frequently end up with different pages saying similar
     things, because the individual contributors did not notice the
     duplications.  This can be partly a consequence of the lack of
     navigational principles noted above, in that people may not find
     the duplicate content if it is not where they expect it to
     be.</para>
  </listitem>
  <listitem>
     <para><emphasis role="bold">Inconsistent target audience.</emphasis>
     To some degree this problem is inevitable when there are so many
     authors, but it can be lessened if there are written guidelines
     about how to create new content.  It also helps to aggressively
     edit new contributions at the beginning, as an example, so that
     the standards start to sink in.</para>
  </listitem>
</itemizedlist>

<para>The common solution to all these problems is the same: have
editorial standards, and demonstrate them not only by posting them,
but by editing pages to adhere to them.  In general, wikis will
amplify any failings in their original material, since contributors
imitate whatever patterns they see in front of them.  Don't just
set up the wiki and hope everything falls into place.  You must also
prime it with well-written content, so people have a template to
follow.</para>

<para>The shining example of a well-run wiki is Wikipedia, though this
may be partly 
because the content (encyclopedia entries) is naturally well-suited to
the wiki format.  But if you examine Wikipedia closely, you'll see
that its administrators laid a <emphasis>very</emphasis> thorough
foundation for cooperation.  There is extensive documentation on how
to write new entries, how to maintain an appropriate point of view,
what sorts of edits to make, what edits to avoid, a dispute resolution
process for contested edits (involving several stages, including
eventual arbitration), and so forth.  They also have authorization
controls, so that if a page is the target of repeated inappropriate
edits, they can lock it down until the problem is resolved.  In other
words, they didn't just throw some templates onto a web site and hope
for the best.  Wikipedia works because its founders thought carefully
about how to get thousands of strangers to tailor their writing to a
common vision.  While you may not need the same level of preparedness
to run a wiki for a free software project, the spirit is worth
emulating.</para>

<para>For more information about wikis, see
<ulink url="http://en.wikipedia.org/wiki/Wiki"/>.  Also, the first
wiki remains alive and well, and contains a lot of discussion about
running wikis: see <ulink
url="http://www.c2.com/cgi/wiki?WelcomeVisitors"/>, 
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorks"/>, and
<ulink url="http://www.c2.com/cgi/wiki?WhyWikiWorksNot"/> for
various points of view.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="web-site">
<title>Web Site</title>

<para>There is not much to say about setting up the project web site
from a technical point of view: setting up a web server and writing
web pages are fairly simple tasks, and most of the important things to
say about layout and arrangement were covered in the previous chapter.
The web site's main function is to present a clear and welcoming
overview of the project, and to bind together the other tools (the
version control system, bug tracker, etc.).  If you don't have the
expertise to set up a web server yourself, it's usually not hard to
find someone who does and is willing to help out.  Nonetheless, to
save time and effort, people often prefer to use one of the canned
hosting sites.</para>

<sect2 id="canned-hosting">
<title>Canned Hosting</title>

<para>There are two main advantages to using a canned site.  The first
is server capacity and bandwidth: their servers are beefy boxes sitting
on really fat pipes.  No matter how successful your project gets,
you're not going to run out of disk space or swamp the network
connection.  The second advantage is simplicity.  They have already
chosen a bug tracker, a version control system, a mailing list manager,
an archiver, and everything else you need to run a site.  They've
configured the tools, and are taking care of backups for all the data
stored in the tools.  You don't need to make many decisions.  All you
have to do is fill in a form, press a button, and suddenly you've got
a project web site.</para>

<para>These are pretty significant benefits.  The disadvantage, of
course, is that you must accept <emphasis>their</emphasis> choices and
configurations, even if something different would be better for your
project.  Usually canned sites are adjustable within certain narrow
parameters, but you will never get the fine-grained control you would
have if you set up the site yourself and had full administrative
access to the server.</para>

<para>A perfect example of this is the handling of generated files.
Certain project web pages may be generated files&mdash;for example,
there are systems for keeping FAQ data in an easy-to-edit master
format, from which HTML, PDF, and other presentation formats can be
generated.  As explained in
<xref linkend="version-everything"/><phrase output="printed">
earlier in this chapter</phrase>,
you wouldn't want to version the generated formats, only the master
file.  But when your web site is hosted on someone else's server, it
may be impossible to set up a custom hook to regenerate the online
HTML version of the FAQ whenever the master file is changed.  The only
workaround is to version the generated formats too, so that they show
up on the web site.</para>

<para>There can be larger consequences as well.  You may not have as
much control over presentation as you would wish.  Some of the canned
hosting sites allow you to customize your web pages, but the site's
default layout usually ends up showing through in various awkward
ways.  For example, some projects that host themselves at SourceForge
have completely customized home pages, but still point developers to
their "SourceForge page" for more information.  The SourceForge page
is what would be the project's home page, had the project not used a
custom home page.  The SourceForge page has links to the bug tracker,
the CVS repository, downloads, etc.  Unfortunately, a SourceForge page
also contains a great deal of extraneous noise.  The top is a banner
ad, often an animated image.  The left side is a vertical arrangement
of links of little relevance to someone interested in the project.
The right side is often another advertisement.  Only the center of the
page is devoted to truly project-specific material, and even that is
arranged in a confusing way that often makes visitors unsure of what
to click on next.</para>

<para>Behind every individual aspect of SourceForge's design, there is
no doubt a good reason&mdash;good from SourceForge's point of view,
such as the advertisements.  But from an individual project's point of
view, the result can be a less-than-ideal web page.  I don't mean to
pick on SourceForge; similar concerns apply to many of the canned
hosting sites.  The point is that there's a tradeoff.  You get relief
from the technical burdens of running a project site, but only at the
price of accepting someone else's way of running it.</para>

<para>Only you can decide whether canned hosting is best for your
project.  If you choose a canned site, leave open the option of
switching to your own servers later, by using a custom domain name for
the project's "home address".  You can forward the URL to the canned
site, or have a fully customized home page at the public URL and hand
users off to the canned site for sophisticated functionality.  Just
make sure to arrange things such that if you later decide to use a
different hosting solution, the project's address doesn't need to
change.</para>

<sect3 id="canned-hosting-choosing">
<title>Choosing a canned hosting site</title>

<para>The largest and most well-known hosting site is <ulink
url="http://www.sourceforge.net/">SourceForge</ulink>.  Two other
sites providing the same or similar services are <ulink
url="http://savannah.gnu.org/">savannah.gnu.org</ulink> and <ulink
url="http://www.berlios.de/">BerliOS.de</ulink>.  A few organizations,
such as the <ulink url="http://www.apache.org/">Apache Software
Foundation</ulink> and <ulink
url="http://www.tigris.org/">Tigris.org</ulink><footnote><para>Disclaimer:
I am employed by <ulink
url="http://www.collab.net/">CollabNet</ulink>, which sponsors
Tigris.org, and I use Tigris regularly.</para></footnote>, give free
hosting to open source projects that fit well with their missions and
their community of existing projects.</para>

<para>Haggen So did a thorough evaluation of various canned hosting
sites, as part of the research for his Ph.D. thesis,
<citetitle>Construction of an Evaluation Model for Free/Open Source
Project Hosting (FOSPHost) sites</citetitle>.  The results are at
<ulink url="http://www.ibiblio.org/fosphost/"/>, and see especially
the very readable comparison chart at <ulink
url="http://www.ibiblio.org/fosphost/exhost.htm"/>.</para>

</sect3>

<sect3 id="anonymity">
<title>Anonymity and involvement</title>

<para>A problem that is not strictly limited to the canned sites, but
is most often found there, is the abuse of user login functionality.
The functionality itself is simple enough: the site allows each
visitor to register herself with a username and password.  From
then on it keeps a profile for that user, and project administrators
can assign the user certain permissions, for example, the right to
commit to the repository.</para>

<para>This can be extremely useful, and in fact it's one of the prime
advantages of canned hosting.  The problem is that sometimes user
login ends up being required for tasks that ought to be permitted to
unregistered visitors, specifically the ability to file issues in the
bug tracker, and to comment on existing issues.  By requiring a
logged-in username for such actions, the project raises the
involvement bar for what should be quick, convenient tasks.  Of
course, one wants to be able to contact someone who's entered data
into the issue tracker, but having a field where she can enter her
email address (if she wants to) is sufficient.  If a new user spots a
bug and wants to report it, she'll only be annoyed at having to fill
out an account creation form before she can enter the bug into the
tracker.  She may simply decide not to file the bug at all.</para>

<para>The advantages of user management generally outweigh the
disadvantages.  But if you can choose which actions can be done
anonymously, make sure not only that <emphasis>all</emphasis>
read-only actions are permitted to non-logged-in visitors, but also
some data entry actions, especially in the bug tracker and, if you
have them, wiki pages.</para>

</sect3>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->


</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

