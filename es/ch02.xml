<chapter id="getting-started">

<title>Primeros Pasos</title>

<simplesect>

<!--
<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>
-->
<para>El clásico modelo de cómo los proyectos de software libre deben iniciar fue propuesto
por Eric Raymond, en un artículo ahora famoso sobre procesos de código abierto titulado
<citetitle>La catedral y el bazar</citetitle>. Él escribió:</para>

<blockquote>
<!--
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>
-->
	<para><emphasis>Todos los trabajos buenos en software comienzan tratando de paliar un problema personal de quien los programa</emphasis></para>
	<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"
      >catb.org/~esr/writings/cathedral-bazaar/</ulink>
      </emphasis>)</para>
-->
    <para>(de <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"
      >catb.org/~esr/writings/cathedral-bazaar/</ulink>
      </emphasis>)</para>
</blockquote>

<!--
<para>Note that Raymond wasn't saying that open source projects happen
only when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; the relevance of this
to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.</para>
-->

<para>Es de notar que Raymond no estaba diciendo que los proyectos de código abierto no sólo suceden
cuando cierto individuo tiene una necesidad. En cambio, nos está diciendo que los 
<emphasis>buenos</emphasis> programas son resultado de que un programador tenga un interés personal
en ver el problema resulto. La relevancia de esto para el software libre ha sido que ésta necesidad
personal sea frecuentemente a motivación para iniciar un proyecto de software libre.</para>

<!--
<para>This is still how most free software projects are started, but less so
now than in 1997, when Raymond wrote those words.  Today, we have the
phenomenon of organizations&mdash;for-profit corporations,
governments, non-profits, etc&mdash;starting large, centrally-conceived
open source
projects from scratch.  The lone programmer, banging out some code to
solve a local problem and then realizing the result has wider
applicability, is still the source of much new free software, but is
not the only story.</para>
-->

<para>Esto sigue siendo la manera cómo muchos de los proyectos de software libre se inician, pero menos
ahora que en 1997, cuando Raymond escribió esas palabras. Hoy, tenemos el fenómeno de organizaciones
&mdash;incluidas corporaciones con fines de lucro, de gobierno, sin fines de lucro, etc&mdash;iniciando desde cero, proyectos Open Source
centralizados y a gran escala. El desarrollador solitario, tecleando algo de código para
resolver un problema local y luego dándose cuenta de que los resultados tienen un mayor
aplicación, sigue siendo la fuente de muchos software libre, pero esa no es la única historia.</para>

<!--
<para>Raymond's point is still insightful, however.  The essential
condition is that the producers of the software have a direct interest
in its success, usually because they use it themselves or work
directly with people who use it.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the open source software developed by the Kuali Foundation
(<ulink url="http://www.kuali.org/" >kuali.org</ulink>), used by educational
institutions to manage their finances, research grants, HR systems,
student information, etc, can hardly be said to scratch any individual
programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institutions concerned, and therefore if
the project fails to satisfy them, they will know.  This arrangement
produces good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>
-->

<para>De todas formas, el objetivo de Raymond sigue siendo profundo. La condición esencial
es que los productores de software libre tengan un interés directo en su éxito, usualmente porque ellos
mismos lo utilizan o trabajan directamente con personas que lo usan. Si el software no hace lo que se supone debería hacer, la persona u
organización que lo han producido sentirán insatisfacción en su labor diaria. Por ejemplo,
el software libre desarrollado por la Fundación Kuali  (<ulink
url="http://www.kuali.org/" >kuali.org</ulink>), utilizado por
instituciones educativas para manejar sus finanzas, becas de
investigación, sistemas de recursos humanos, información de estudiantes, etc,
poco de esto puede ser considerado como un
problema personal de un programador. En particular éste problema
surge directamente de la experiencia de las instituciones interesada, por lo cual si el proyecto
falla en satisfacerlos, ellos lo sabrán. Este arreglo produce buenos programas porque el bucle
de críticas fluye en la dirección correcta. El programa no está siendo escrito para ser vendido
a alguien más, es solo para que sean ellos quienes resuelvan <emphasis>sus</emphasis> problemas. Está
siendo desarrollado para resolver su <emphasis>propio</emphasis> problema, luego compartiéndolo
con todo el mundo como si el problema fuera una enfermedad y el software la medicina,
la cual debe ser distribuida para erradicar la epidemia.</para>

<!--
<para>This chapter is about how to introduce a new free software
project to the world, but many of its recommendations would sound
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.</para>
-->

<para>Este capítulo trata de cómo introducir un nuevo proyecto de software libre al mundo, pero
muchas de sus recomendaciones sonarán familiares a una organización sanitaria distribuyendo
medicinas. Los objetivos son muy similares: quieres dejar claro lo que hace la medicina,
hacerla llegar a las manos correctas y asegurarte de que aquellos quienes
la reciben saben como usarla. Pero con el software, también deseas incitar a algunos de los
receptores a unirse al esfuerzo de investigación para mejorar la medicina.</para>

<!--
<para>Free software distribution is a twofold task.  The software
needs to acquire users, and to acquire developers.  These two needs
are not necessarily in conflict, but they do add some complexity to a
project's initial presentation.  Some information is useful for both
audiences, some is useful only for one or the other.  Both kinds of
information should subscribe to the principle of scaled presentation;
that is, the degree of detail presented at each stage should
correspond to the amount of time and effort put in by the
reader at that stage.  More effort should always result in more
reward.  When the two do 
not correlate tightly, people may quickly lose faith and stop
investing effort.</para>
-->

<para>La distribución del software libre es una tarea a dos bandas. El programa necesita
usuarios y desarrolladores. Estas dos necesidades no tienen por que estar en conflicto, pero
si que añaden cierta complejidad a la presentación inicial de un proyecto. Alguna información
es útil para las dos audiencias, alguna sólo lo es para alguna u otra. Ambos tipos de información
deben suscribirse al principio de las presentaciones en escala, esto es, el grado de detalle
con el que se presenta cada etapa debe corresponder a la cantidad de tiempo y
esfuerzo puesto por el lector. Un mayor esfuerzo debe tener siempre una mayor recompensa.
Cuando los dos no se relacionan conjuntamente, las personas pueden perder rápidamente su fe
y perder el impulso.</para>

<!--
<para>The corollary to this is that <emphasis>appearances
matter</emphasis>.  Programmers, in particular, often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride.  It's no accident that so many programmers exhibit
an antipathy for marketing and public relations work, nor that
professional graphic designers are often horrified at the designs
programmers come up with on their own.</para>
-->
<para>El corolario a esto es:<emphasis>las apariencias importan</emphasis>. Los programadores
en particular, no desean creer esto. Su amor por la sustancia sobre la forma es casi
un punto de orgullo profesional. No es un accidente que tantos desarrolladores exhiban
una antipatía hacia los trabajos en marketing y en relaciones públicas o que diseñadores
gráficos profesionales usualmente se sientan horrorizados de los diseños
que los desarrolladores hacen por su cuenta.</para>

<!--
<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  For example, the very first thing a visitor learns about a
project is what its web site looks like.  This information is absorbed
before any of the actual content on the site is
comprehended&mdash;before any of the text has been read or links
clicked on.  However unjust it may be, people cannot stop themselves
from forming an immediate first impression.  The site's appearance
signals whether care was taken in organizing the project's
presentation.  Humans have extremely sensitive antennae for detecting
the investment of care.  Most of us can tell in one glance whether a
web site was thrown together quickly or was given serious thought.
This is the first piece of information your project puts out, and the
impression it creates will carry over to the rest of the project by
association.</para>
-->

<para>Esto es penoso, ya que hay situaciones en las que la forma <emphasis>es</emphasis> la
sustancia y la presentación de proyectos es una de estas. Por ejemplo, lo primero que un visitante
descubre sobre un proyecto es como se ve su sitio web. Esta información es absorbida antes de que
el contenido en si sea comprendido&mdash;antes de que cualquier línea haya sido leída o enlaces
pulsados. Aunque parezca injusto, las personas no pueden evitar el formarse una opinión
inmediatamente después de la primera impresión. La apariencia del sitio señala si se ha tomado
cuidado en la organización de la presentación del proyecto. Los humanos tenemos una antena
extremadamente sensible para detectar el empeño en el cuidado. Muchos de nosotros podemos
decir con sólo un vistazo si un sitio web ha sido ensamblado rápidamente o ha sido diseñado
con cuidado. Ésta es la primera pieza de información que el proyecto muestra y la impresión
que cree será asociada al resto del proyecto por asociación.</para>

<!--
<para>Thus, while much of this chapter talks about the content your
project should start out with, remember that its look and feel matter
too.  Because the project web site has to work for two different types
of visitors&mdash;users and developers&mdash;special attention
must be paid to clarity and directedness.  Although this is not the
place for a general treatise on web design, one principle is important
enough to deserve mention, particularly when the site serves multiple
(if overlapping) audiences: people should have a rough idea where a
link goes before clicking on it.  For example, it should be obvious
<emphasis>from looking at the links</emphasis> to user documentation
that they lead to user documentation, and not to, say, developer
documentation.  Running a project is partly about supplying
information, but it's also about supplying comfort.  The mere presence
of certain standard offerings, in expected places, reassures users and
developers who are deciding whether they want to get involved.  It
says that this project has its act together, has anticipated the
questions people will ask, and has made an effort to answer them in a
way that requires minimal exertion on the part of the asker.  By
giving off this aura of preparedness, the project sends out a message:
"Your time will not be wasted if you get involved," which is exactly
what people need to hear.</para>
-->

<para>Aunque mucho de éste capítulo habla acerca del contenido con el que se debería
iniciar el proyecto, recuerde que la presentación también importa. Ya que el sitio web
debe funcionar para dos tipos diferentes de visitantes&mdash;usuarios y desarrolladores&mdash;
hay que ser directo y conciso. A pesar de que este no es el lugar para un tratado general acerca
de diseño web, un principio es suficientemente importante para merecer nuestra atención,
particularmente cuando sirve a múltiples audiencias: la gente debe tener una idea de a donde
lleva un enlace antes de pulsar en el. Por ejemplo, debe ser obvio que <emphasis>con sólo
ver el enlace</emphasis> a la documentación para los usuarios, que les lleve a la documentación
para los usuarios, sin mencionar la documentación para los desarrolladores. Dirigir un proyecto
se basa parcialmente en suministrar información, pero también en suministrar comodidad.
La mera presencia de ofrecer ciertos estándares, en lugares obvios, tranquiliza a usuarios
y desarrolladores quienes están decidiendo si desean involucrarse. Dice que este proyecto
funciona, ha anticipado las preguntas que la gente puede hacer y ha hecho un esfuerzo
en responderlas sin la necesidad del más mínimo esfuerzo por parte del visitante. Al dar
ésta aura de preparación, el proyecto envía un mensaje: "Su tiempo no será malgastado si
se involucra", lo que es exactamente lo que la gente desea escuchar.</para>

<!--
<para>If you use a "canned hosting" site (see <xref
linkend="starting-with-canned-hosting"/>), one advantage of that
choice is that those sites have a default layout that is similar from
project to project, and is pretty well-suited to presenting a project
to the world.  That layout can be customized, within certain
boundaries, but the default design prompts you to include the
information visitors are most likely to be looking for.</para>
-->

<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<title>Primero Investiga</title>

<!--
<para>Before starting an open source project, there is one important
caveat:</para>
-->

<para>Antes de iniciar un proyecto Open Source hay un importante
advertencia:</para>

<!--
<para>Always look around to see if there's an existing project that
does what you want.  The chances are pretty good that whatever problem
you want solved now, someone else wanted solved before you.  If they
did solve it, and released their code under a free license, then
there's no reason for you to reinvent the wheel today.  There are
exceptions, of course: if you want to start a project as an
educational experience, pre-existing code won't help; or maybe the
project you have in mind is so specialized that you know there is zero
chance anyone else has done it.  But generally, there's no point not
looking, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching directly on <ulink
url="http://github.com/" >github.com</ulink>, <ulink
url="http://ohloh.net/" >ohloh.net</ulink>, <ulink
url="http://freecode.com/" >freecode.com</ulink>, <ulink
url="http://code.google.com/" >code.google.com</ulink>, <ulink
url="http://www.sourceforge.net/" >sourceforge.net</ulink>, and in the
Free Software Foundation's directory of free software at <ulink
url="http://directory.fsf.org/" >directory.fsf.org</ulink>.</para>
-->

<para>Siempre investiga si existe un proyecto que hace lo que deseas. Las posibilidades son
muy buenas de que cualquier problema que desees resolver ahora alguien más lo haya deseado 
resolver con anterioridad. Si han sido capaces de resolverlo y han liberado bajo una licencia libre 
entonces hoy, no será necesario inventar la rueda. Existen excepciones claro: si deseas iniciar
un proyecto como experiencia educativa, el código pre-existente no es de ayuda o quizás el
proyecto que deseas iniciar es muy especializado y sabes que no existe la posibilidad de que
alguien más lo haya hecho ya. Pero generalmente, no hay necesidad en no investigar ya que las
ganancias pueden ser grandiosas. Si los buscadores más utilizados no muestran nada, intenta tus
búsquedas directamente en: <ulink
url="http://github.com/" >github.com</ulink>, <ulink
url="http://ohloh.net/" >ohloh.net</ulink>, <ulink
url="http://freecode.com/" >freecode.com</ulink>, <ulink
url="http://code.google.com/" >code.google.com</ulink>, <ulink
url="http://www.sourceforge.net/" >sourceforge.net</ulink>, y en el
directorio de software libre de la Free Software Foundation en <ulink
url="http://directory.fsf.org/" >directory.fsf.org</ulink>.</para>

<!--
<para>Even if you don't find exactly what you were looking for, you
might find something so close that it makes more sense to join that
project and add functionality than to start from scratch
yourself.</para>
-->

<para>Incluso si no se encuentra exactamente lo que estamos buscando, podría encontrar
algo parecido, a lo que tiene más sentido unirse a ese proyecto y añadir funcionalidad
en lugar de empezar desde cero por si mismo.</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<title>Empezando Con lo Que se Tiene</title>

<!--
<para>You've looked around, found that nothing out there really fits
your needs, and decided to start a new project.</para>
-->

<para>Has investigado, sin encontrar nada que realmente se adapte a
tus necesidades, y decides iniciar un nuevo proyecto.</para>

<!--
<para>What now?</para>
-->

<para>¿Ahora qué?</para>

<!--
<para>The hardest part about launching a free software project is
transforming a private vision into a public one.  You or your
organization may know perfectly well what you want, but expressing
that goal comprehensibly to the world is a fair amount of work.  It is
essential, however, that you take the time to do it.  You and the
other founders must decide what the project is really about&mdash;that
is, decide its limitations, what it <emphasis>won't</emphasis> do as
well as what it will&mdash;and write up a mission statement.  This
part is usually not too hard, though it can sometimes reveal unspoken
assumptions and even disagreements about the nature of the project,
which is fine: better to resolve those now than later.  The next step
is to package up the project for public consumption, and this is,
basically, pure drudgery.</para>
-->

<para>Lo más difícil acerca de lanzar un proyecto de software libre es transformar una
visión privada a una pública. Tú y tu organización quizás sepan exactamente lo que deseas
pero expresar ese objetivo de una manera comprensiva al resto del mundo tiene su trabajo. 
De hecho, es esencial, que te tomes tu tiempo para hacerlo. Tú y los otros fundadores deben decidir sobre qué va
realmente el proyecto&mdash;eso es, decidir sus limitaciones, lo que <emphasis>no podrá</emphasis>
hacer como lo que sí&mdash;y escribir una declaración de objetivos. Ésta parte no suele ser
usualmente difícil, aunque puede revelar afirmaciones y desacuerdos sobre la naturaleza del
proyecto, lo cual esta bien: mejor resolver esto ahora que luego. El próximo paso es empaquetar
el proyecto para el consumo público, y esto es, básicamente, trabajo puro y duro.</para>

<!--
<para>What makes it so laborious is that it consists mainly of
organizing and documenting things everyone already
knows&mdash;"everyone", that is, who's been involved in the project so
far.  Thus, for the people doing the work, there is no immediate
benefit.  They do not need a <filename>README</filename> file giving
an overview of the project, nor a design document.
They do not need a carefully arranged code tree conforming to the
informal but widespread standards of software source distributions.
Whatever way the source code is arranged is fine for them, because
they're already accustomed to it anyway, and if the code runs at all,
they know how to use it.  It doesn't even matter, for them, if the
fundamental architectural assumptions of the project remain
undocumented; they're already familiar with that too.</para>

-->

<para>Lo que lo hace laborioso es porque consiste principalmente en organizar y documentar lo que
ya todo el mundo sabe&mdash;todos aquellos involucrados en el proyecto hasta ahora. Así que, para
las personas trabajando ya, no existen beneficios inmediatos. Estos no necesitan de un fichero
<filename>README</filename> que resuma el proyecto ni de un documento de diseño o manual de usuario.
No necesitan de un árbol de código cuidadosamente ordenado conforme a los estándares informales,
ampliamente utilizados para las distribuciones de fuentes. De cualquier forma como esté 
ordenado el código fuente estará bien, porque ya estarán acostumbrados de todas formas, y si el
código funciona, saben cómo usarlo. Ni siquiera importa si las afirmaciones fundamentales
sobre la arquitectura del proyecto siguen sin documentar, ya están familiarizados con lo que
deben hacer.</para>

<!--
<para>Newcomers, on the other hand, need all these things.  Fortunately,
they don't need them all at once.  It's not necessary for you to
provide every possible resource before taking a project public.  In a
perfect world, perhaps, every new open source project would start out
life with a thorough design document, a complete user manual (with
special markings for features planned but not yet implemented),
beautifully and portably packaged code, capable of running on any
computing platform, and so on.  In reality, taking care of all these
loose ends would be prohibitively time-consuming, and anyway, it's
work that one can reasonably hope others will help with once the
project is under way.</para>
-->

<para>En cambio, los recién llegados, necesitan de todas estas cosas. Afortunadamente, no las
necesitan todas a la vez. No es necesario proporcionar todos los recursos posibles antes de
tomar un proyecto público. Quizás en un mundo perfecto, todo nuevo proyecto open source
empezaría su vida con un riguroso documento de diseño, un manual de usuario completo (marcando
especialmente las características planeadas pero que aun no han sido implementadas), código
empaquetado hermosamente y portable, capaz de ejecutar en cualquier plataforma y así sucesivamente.
En realidad, cuidar de todos estos detalles consumiría demasiado tiempo, y de todas maneras,
es trabajo con el que podrían ayudar otros una vez que el proyecto esté en marcha.</para>

<!--
<para>What <emphasis>is</emphasis> necessary, however, is that enough
investment be put into presentation that newcomers can get past the
initial obstacle of unfamiliarity.  Think of it as the first step in a
bootstrapping process, to bring the project to a kind of minimum
activation energy.  I've heard this threshold called the
<firstterm>hacktivation energy</firstterm>: the amount of energy a
newcomer must put in before she starts getting something back.  The
lower a project's hacktivation energy, the better.  Your first task is
bring the hacktivation energy down to a level that encourages people
to get involved.</para>
-->
<para>Por otro lado, lo que <emphasis>sí</emphasis> es necesario, es que se realice una
inversión apropiada en la presentación, de forma que los recién llegados puedan superar
el obstáculo inicial de no estar familiarizados con el proyecto. Pensemos en ello
como en el primer paso en un proceso de inicio (bootstrapping), llevar al proyecto a un tipo
de activación de energía mínima. He escuchado llamar a este umbral como
<firstterm>hacktivation energy</firstterm>: la cantidad de energía que debe aportar
un recién llegado antes de recibir algo a cambio. Mientras menor sea ésta energía, mejor.
La primera tarea es hacer descender ésta <emphasis>hacktivation energy</emphasis> a niveles
que animen a la gente a involucrarse.</para>

<!--
<para>Each of the following subsections describes one important aspect
of starting a new project.  They are presented roughly in the order
that a new visitor would encounter them, though of course the order in
which you actually implement them might be different.  You can treat
them as a checklist.  When starting a project, just go down the list
and make sure you've got each item covered, or at least that you're
comfortable with the potential consequences if you've left one
out.</para>
-->

<para>Cada una de las siguientes secciones, describen un aspecto importante de iniciar
un nuevo proyecto. Están presentadas casi en el mismo orden en el que un nuevo visitante
las encontraría, aunque claro, el orden en el cual sean implementadas puede ser diferente.
Incluso pueden ser tratadas como una lista de tareas. Cuando se inicie un proyecto,
asegúrese de revisar la lista y de que cada uno de los elementos sean cubiertos, o al
menos asegurar cierta comodidad con las posibles consecuencias de dejar alguna aparte.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<title>Escoger un Buen Nombre</title>

<!--
<para>Put yourself in the shoes of someone who's just heard about your
project, perhaps by having stumbled across it while searching for
software to solve some problem.  The first thing they'll encounter is
the project's name.</para>
-->

<para>Colócate en la posición de alguien que acaba de escuchar acerca
de su proyecto, quizás por alguien quien fortuitamente tropezó con
éste mientras buscaba por alguna aplicación para resolver un problema.
Lo primero que encontraran será el nombre del proyecto.</para>

<!--
<para>A good name will not automatically make your project successful,
and a bad name will not doom it&mdash;well, a
<emphasis>really</emphasis> bad name probably could do that, but we
start from the assumption that no one here is actively trying to make
their project fail.  However, a bad name can slow down adoption of the
project, either because people don't take it seriously, or because
they simply have trouble remembering it.</para>
-->

<para>Un nombre genial no hará que automáticamente el proyecto tenga
éxito, y un nombre malo no significa que éste acabado&mdash;bueno, 
en realidad un mal nombre probablemente podría hacer eso, pero empecemos
asumiendo que nadie está activamente intentando hacer que su proyecto
falle. De todos modos, un mal nombre puede desacelerar la adopción
del programa porque la gente no se lo tome seriamente o porque
simplemente les cueste recordarlos.</para>

<!--
<para>A good name:
-->
<para>Un buen nombre:

<itemizedlist>
<!--
  <listitem><para>Gives some idea what the project does, or at least
            is related in an obvious way, such that if one knows the
            name and knows what the project does, the name will come
            quickly to mind thereafter.</para>
  </listitem>
-->
	<listitem><para>Da cierta idea de lo que el proyecto hace,
	o al menos está relacionado de una manera obvia, como si
	alguien conoce el nombre y sabe lo que hace, después lo 
	recordaran rápidamente.</para>
	</listitem>

<!--
  <listitem><para>Is easy to remember.  Here, there is no getting
            around the fact that English has become the default
            language of the Internet: "easy to remember" usually means
            "easy for someone who can read English to remember."  Names that
            are puns dependent on native-speaker pronounciation, for
            example, will be opaque to the many non-native English
            readers out there.  If the pun is particularly compelling
            and memorable, it may still be worth it; just keep in mind
            that many people seeing the name will not hear it in their
            head the way a native speaker would.</para>
  </listitem>
-->	
	<listitem><para>Es fácil de recordar. Veamos, no hay nada
	de falso en el hecho de que el ingles se a convertido en
	el lenguaje por defecto de Internet: "fácil de recordar"
	significa "fácil de recordar para alguien que sepa leer en ingles."
    Los nombres que son juegos de palabras dependientes 
	de la pronunciación en ingles nativo, por ejemplo, serán opacos
	para muchos lectores no nativos en ingles. Si el juego de palabras
	es particularmente llamativo y memorable, quizás sí valga
	la pena. Sólo recuerde que muchas personas al ver el nombre
	no lo escucharán en sus mentes de la misma manera que un
	ingles nativo lo haría.</para>
	</listitem>

<!--
  <listitem><para>Is not the same as some other project's name, and
            does not infringe on any trademarks.  This is just good
            manners, as well as good legal sense.  You don't want to
            create identity confusion.  It's hard enough to keep track
            of everything that's available on the Net already, without
            different things having the same name.</para>

            <para>The resources mentioned earlier in
            <xref linkend="look-around"/> are useful in
            discovering whether another project already has the name
            you're thinking of.  For the U.S., trademark searches are
            available at <ulink url="http://www.uspto.gov/"
            >uspto.gov</ulink>.</para> 
  </listitem>
-->
	<listitem><para>No tiene el mismo nombre que otro proyecto
	y no infringe ninguna marca comercial. Esto es por 
	buenos modales, y tener un buen sentido legal. No desea
	crear confusiones de identidad. Ya es bastante difícil
	mantenerse al día con todo lo que hay disponible en
	la red, sin tener diferentes cosas con el mismo nombre.</para> 

	<para>Los enlaces mencionados anteriormente en <xref linkend="look-around"/>
	son muy útiles en descubrir si algún otro proyecto
	ya tiene el mismo nombre en el que estábamos pensando.
	Para los Estados Unidos, podemos encontrar buscadores gratuitos
    de marcas registradas en <ulink url="http://www.uspto.gov/">uspto.gov</ulink>.</para>
	</listitem>

<!--
  <listitem><para>If possible, is available as a domain name in the
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, and
            <systemitem>.org</systemitem> top-level domains.  You
            should pick one, probably <systemitem>.org</systemitem>,
            to advertise as the official home site for the project;
            the other two should forward there and are simply to
            prevent third parties from creating identity confusion
            around the project's name.  Even if you intend to host the
            project at some other site (see
            <xref linkend="starting-with-canned-hosting"/>), you
            can still register project-specific domains and forward
            them to the hosting site.  It helps users a lot to have a
            simple URL to remember.</para>
  </listitem>
-->
	<listitem><para>Está disponible como un nombre de dominio
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, y
            <systemitem>.org</systemitem>.
	Hay que escoger alguno, probablemente <systemitem>.org</systemitem>,
	para promocionarse como el sitio oficial para el proyecto.
	Los otros dos deben reenviar allí simplemente para evitar
	que terceras partes creen una confusión de identidad sobre
	el nombre del proyecto. Incluso si piensa en hospedar el
	proyecto en otro sitio (vea <xref linkend="starting-with-canned-hosting"/>)
	puede registrar los dominios específicos del proyecto y
	direccionarlos al sitio del hospedaje. Ayuda mucho a los
	usuarios tener que recordar sólo un URL.</para>
	</listitem>

<!--
  <listitem><para>If possible, is available as a username on <ulink
            url="https://twitter.com/" >Twitter</ulink> and other
            microblog sites.  See <xref linkend="own-the-name"/> for
            more on this and its relationship to the domain name.</para>
  </listitem>
-->
  <listitem><para>Si es posible, está disponible como un nombre de
            usuario en <ulink url="https://twitter.com/">Twitter</ulink>
            y otros sitios de microblog. Ver <xref linkend="own-the-name"/>
            para más información sobre esta y su relación con el nombre de
            dominio.</para>
  </listitem>
</itemizedlist>

</para>

<sect3 id="own-the-name">
<title>Poseer el nombre en los espacios de nombre importantes</title>

<!--
<para>For large projects, it is a good idea to own the project's name
as many of the relevant namespaces on the Internet as you can.  By
namespaces, I mean not just the domain name system, but also online
services in which account names (usernames) are the publicly visible
handle by which people refer to the project.  If you have the same
name in all the places where people would look for you, you make it
easier for people to sustain a mild interest in the project until
they're ready to become more involved.</para>
-->
<para>Para los proyectos grandes, es una buena idea de poseer el
nombre del proyecto en tantos espacios de nombre relevantes en
Internet como puedas. Por espacios de nombres, me refiero no sólo al
sistema de nombres de dominio, sino también a los servicios en línea
en el que los nombres de la cuenta (nombres de usuario) son los
manejadores visibles públicamente por el cual la gente se refiere al
proyecto. Si tienes el mismo nombre en todos los lugares donde la
gente te buscaría, haces fácil para las personas a mantener un leve
interés en el proyecto hasta que estén listos para involucrarse
más.</para>

<!--
<para>For example, the Gnome free desktop project has the <ulink
url="http://gnome.org/" >gnome.org</ulink> domain
name<footnote><para>They didn't manage to get gnome.com or gnome.net,
but that's okay&nbsp;&mdash;&nbsp;if you only have one, and it's .org,
it's fine.  That's usually the first one people look for when they're
seeking the open source project of that name.  If they couldn't get
"gnome.org" itself, a typical solution would be to get
"gnomeproject.org" instead, and many projects solve the problem that
way.</para></footnote>, the <ulink url="https://twitter.com/gnome"
>@gnome</ulink> Twitter handle, the <ulink
url="https://identi.ca/gnome" >gnome</ulink> username at
Identi.ca<footnote><para> <ulink url="https://identi.ca/"
>Identi.ca</ulink> is a microblog / social networking that a number of
free software developers use; its code is open source and made
available at <ulink url="http://pump.io/" >pump.io</ulink>.  For
developer-oriented projects, I recommend at least doing all status
microposts&nbsp;&mdash;&nbsp;colloquially referred to as
"tweets"&nbsp;&mdash;&nbsp;on both Identi.ca and Twitter.  While the
total number of people on Identi.ca is far smaller than on Twitter,
the percentage of them that are likely to be interested in news about
an open source project is far higher, at least as of this writing in
2013 and for some years preceding that.</para></footnote>, the <ulink
url="https://github.com/gnome" >gnome</ulink> username at
GitHub.com<footnote><para>While the master copy of Gnome's source code
is at <ulink url="http://git.gnome.org/" >git.gnome.org</ulink>, they
maintain a mirror at GitHub, since so many developers are already
familiar with GitHub</para></footnote>, and on the freenode IRC
network (see <xref linkend="irc"/>) they have the channel
<code>#gnome</code>, although they also maintain their own IRC servers
(where they control the channel namespace anyway, of course).</para>
-->

Por ejemplo, el proyecto de escritorio Gnome tiene el nombre de
dominio <ulink url="http://gnome.org/" >gnome.org</ulink><footnote>
<para>Ellos no lograron obtener gnome.com o gnome.net, pero eso está
bien&nbsp;&mdash;&nbsp;si sólo tienes uno, y es .org, está bien. Ese
es por lo general el primero que la gente busca cuando está buscando
un proyecto de código abierto con ese nombre. Si no podían conseguir
"gnome.org" en sí, una solución típica sería la de obtener
"gnomeproject.org" en su lugar, y muchos proyectos resuelven el
problema de esa manera.</para></footnote>, el identificador de Twitter
<ulink url="https://twitter.com/gnome">@gnome</ulink>, el nombre de
usuario <ulink url="https://identi.ca/gnome">gnome</ulink> en
Identi.ca<footnote><para><ulink
url="https://identi.ca/">Identi.ca</ulink> es un microblog / red
social que un número de desarrolladores de software libre usa; su
código es de fuente abierta y está disponible en <ulink
url="http://pump.io/">pump.io</ulink>. Para los proyectos orientados a
desarrolladores, recomiendo al menos hacer todas las micro
actualizaciones de estado&nbsp;&mdash;&nbsp;coloquialmente conocidas
como "tweets"&nbsp;&mdash;&nbsp;tanto en Identi.ca como en Twitter.
Mientras que el número total de personas en Identi.ca es mucho menor
que en Twitter, el porcentaje de ellos que son susceptibles de estar
interesados ​​en las noticias acerca de un proyecto de código abierto
es mucho más alto, por lo menos a partir de este escrito en el año
2013 y durante algunos años anteriores a este.</para></footnote>, el
nombre de usuario <ulink url="https://github.com/gnome">gnome</ulink>
en GitHub.com<footnote><para>Mientras que la copia maestra del
código fuente de Gnome está en <ulink
url="http://git.gnome.org/">git.gnome.org</ulink>, ellos mantienen un
espejo en GitHub, ya que muchos desarrolladores ya están
familiarizados con GitHub</para></footnote>, y en la red freenode IRC
(ver <xref linkend="irc"/>) tienen el canal <code>#gnome</code>,
aunque también mantienen sus propios servidores de IRC (donde, por
supuesto, controlan el espacio de nombres de canal de todos
modos).</para>

<!--
<para>All this makes the Gnome project splendidly easy to find: it's
usually right where a potential contributor would expect it to be.  Of
course, Gnome is a large and complex project with thousands of
contributors and many subdivisions; the advantage to Gnome of being
easy to find is greater than it would be for a newer project, since by
now there are so many ways to get involved in Gnome.  But it will
certainly never <emphasis>harm</emphasis> your project to own its name
in as many of the relevant namespaces as it can, and it can sometimes
help.  So when you start a project, think about what its online handle
should be and register that handle with the online services you think
you're likely to care about.  The ones mentioned above are probably a
good initial list, but you may know others that are relevant for the
particular subject area of your project.</para>
-->

<para>Todo esto hace al proyecto Gnome espléndidamente fácil de
encontrar: por lo general está justo donde un contribuyente potencial 
esperaría que estuviera. Por supuesto, Gnome es un proyecto grande y
complejo con miles de colaboradores y muchas subdivisiones; la ventaja
para Gnome de sea fácil de encontrar es mayor de lo que sería para un
proyecto nuevo, ya que por ahora hay muchas maneras de participar en
Gnome. Pero, sin duda, nunca <emphasis>dañará</emphasis> tu proyecto
el poseer su nombre en la mayor cantidad de espacios de nombres
relevantes como se pueda, y esto a veces puede ayudar. Así que cuando
inicies un proyecto, piensa en cual debería ser su identificador en
línea y registra ese identificador con los servicios de red que
pienses que probablemente te interesan. Los mencionados anteriormente
son probablemente una buena lista inicial, pero tu podrías conocer de
otros que sean relevantes para el tema particular de tu
proyecto.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<title>Tener los objetivos claros</title>


<!--
<para>Once they've found the project's home site, the next thing people
will look for is a quick description or mission statement, so they can
decide (within 30 seconds) whether or not they're interested in
learning more.  This should be prominently placed on the front page,
preferably right under the project's name.</para>
-->
<para>Una vez que se ha encontrado el sitio del proyecto, lo siguiente
que la gente hace es buscar una descripción rápida o una declaración
de objetivos, para poder decidir (en menos de 30 segundos) si están o no
interesados en aprender más. Esto debe estar en un lugar prioritario
en la página principal, preferiblemente justo debajo del nombre del
proyecto.</para>

<!--
<para>The description should be concrete, limiting, and above all,
short.  Here's an example of a good one, from <ulink
url="http://hadoop.apache.org/" >hadoop.apache.org</ulink>:</para>
-->
<para>La descripción de los objetivos debe ser concreta, limitada y
sobre todo, corta. Aquí tenemos un buen ejemplo, de <ulink
url="http://hadoop.apache.org/" >hadoop.apache.org</ulink>:</para>

	<blockquote>
<!--
  <para><emphasis>The Apache™ Hadoop® project develops open-source
  software for reliable, scalable, distributed computing.</emphasis></para>
-->

  <para><emphasis>El proyecto Hadoop® de Apache™ desarrolla software
  de código abierto para una computación distribuida confiable y
  escalable.</emphasis></para>

<!--
  <para><emphasis>The Apache Hadoop software library is a framework
  that allows for the distributed processing of large data sets across
  clusters of computers using simple programming models. It is
  designed to scale up from single servers to thousands of machines,
  each offering local computation and storage. Rather than rely on
  hardware to deliver high-availability, the library itself is
  designed to detect and handle failures at the application layer, so
  delivering a highly-available service on top of a cluster of
  computers, each of which may be prone to failures.</emphasis></para>
-->

  <para><emphasis>La biblioteca de software Apache Hadoop es un framework
  que permite el procesamiento distribuido de grandes conjuntos de datos
  a través de grupos de ordenadores que utilizan modelos de programación
  simples. Está diseñado para escalar de servidores individuales a miles
  de máquinas, cada uno ofreciendo computación y almacenamiento local. En
  lugar de confiar en el hardware para ofrecer alta disponibilidad, la
  biblioteca en sí está diseñado para detectar y controlar los errores en
  la capa de aplicación, de esa manera entregar un servicio de alta
  disponibilidad en la parte superior de un grupo de computadoras, cada
  una de las cuales puede ser propensa a fallas.</emphasis></para>
	</blockquote>

<!--
<para>In just four sentences, they've hit all the high points, largely
by drawing on the reader's prior knowledge.  That's an important
point: it's okay to assume a minimally informed reader with a baseline
level of preparedness.  A reader who doesn't know what "clusters" and
"high-availability" mean in this context probably can't make much use
of Hadoop anyway, so there's no point writing for a reader who knows
any less than that.  The phrase "designed to detect and handle
failures at the application layer" will stand out to engineers who
have experience with large-scale computing clusters&mdash;when they
see those words, they'll know that the people behind Hadoop understand
that world, and will thus be more willing to give Hadoop
consideration.</para>
-->

<para>En pocas palabras, han logrado la máxima puntuación, en gran
parte recurriendo a los conocimientos previos del lector. Ese es un
punto importante: que está bien asumir un lector mínimamente informado
con un nivel básico de preparación. Un lector que no sabe lo que
significa "grupos de computadora" y "alta disponibilidad" en este
contexto probablemente no puede hacer mucho uso de Hadoop de todos
modos, así que no hay razon de escribir para un lector que sabe menos
que eso. La frase "diseñado para detectar y controlar los errores en
la capa de aplicación" destacará ante los ingenieros que tienen
experiencia con la informática a gran escala de grupos&mdash;cuando
vean esas palabras, sabrán que la gente detrás de Hadoop entiende ese
mundo, y en consecuencia, estarán más dispuestos a tomar en cuanta a
Hadoop.</para>

<!--
<para>Those who remain interested after reading the mission statement
will next want to see more details, perhaps some user or developer
documentation, and eventually will want to download something.  But
before any of that, they'll need to be sure it's open source.</para>
-->

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<title>Declara Que el Proyecto es Libre</title>

<!--
<para><emphasis>The front page must make it unambiguously clear that
the project is open source.</emphasis> This may seem obvious, but you
would be surprised how many projects forget to do it.  I have seen
free software project web sites where the front page not only did not
say which particular free license the software was distributed under,
but did not even state outright that the software was free at all.
Sometimes the crucial bit of information was relegated to the
Downloads page, or the Developers page, or some other place that
required one more mouse click to get to.  In extreme cases, the
license was not given anywhere on the web site at all&mdash;the only
way to find it was to download the software and look at a license file
inside.</para>
-->

<para><emphasis>La página principal debe poner claramente y sin ambigüedades
que el proyecto es open source</emphasis>. Esto puede parecer obvio,
pero es sorprendente cuantos proyectos se olvidan de esto. He visto
sitios de proyectos de software libre donde la página principal no sólo
no decía bajo cual licencia libre se distribuía la aplicación sino
que ni siquiera declaraban que el software fuese libre. A veces, estas
piezas cruciales de información eran relegadas a la página de descargas o
a la página de los desarrolladores o a algún otro lugar el cual requería
más de un enlace para llegar. En casos extremos, la licencia no se mostraba
en ninguna parte del sitio&mdash;la única forma de encontrarla era descargando
la aplicación y buscar adentr un archivo de licencia.</para>

<!--
<para>Please don't make this mistake.  Such an omission can lose many
potential developers and users.  State up front, right below the
mission statement, that the project is "free software" or "open source
software", and give the exact license.  A quick guide to choosing a
license is given in
<xref linkend="license-quickstart"/><phrase output="printed">
later in this chapter</phrase>, and
licensing issues are discussed in detail in <xref
linkend="legal"/>.</para>
-->

<para>No cometáis estos errores. Una omisión como ésta puede haceros
perder muchos desarrolladores y usuarios potenciales. Declarad desde
el principio, justo debajo de la declaración de objetivos, que el proyecto
es "software libre" u "open source", y mostrad la licencia exacta. Una guía rápida
para escoger una licencia se encuentra en <xref linkend="license-quickstart"/>
<phrase output="printed">más adelante en éste capítulo</phrase>, y algunos
detalles sobre las licencias serán discutidos en el <xref linkend="legal"/>.</para>

<!--
<para>By this point, our hypothetical visitor has
determined&mdash;probably in a minute or less&mdash;that she's
interested in spending, say, at least five more minutes investigating
this project.  The next sections describe what she should encounter in
that five minutes.</para>
-->

<para>Llegados a este punto, nuestro visitante hipotético ha determinado&mdash;
probablemente en un minuto o menos&mdash;que está interesado en utilizar,
digamos, al menos cinco minutos más investigando el proyecto. La próxima
parte describe qué debería encontrar durante esos cinco minutos.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<title>Lista de Características y Requerimientos</title>

<!--
<para>There should be a brief list of the features the software
supports (if something isn't completed yet, you can still list it, but
put "<emphasis>planned</emphasis>" or
"<emphasis>in&nbsp;progress</emphasis>" next to it), and the kind of
computing environment required to run the software.  Think of the
features/requirements list as what you would give to someone asking
for a quick summary of the software.  It is often just a logical
expansion of the mission statement.  For example, the mission
statement might say:</para>
-->
<para>Debería haber una breve lista de las características que el software
soporta (si algo aun no ha sido completado, se puede listar de todas formas,
pero señalando "<emphasis>planeado</emphasis>" o "<emphasis>en&nbsp;progreso</emphasis>")
y el tipo de entorno necesario para ejecutar la aplicación. Hay que pensar
en ésta lista como algo que daríamos a alguien que requiere un resumen de
nuestro programa. Por ejemplo, la declaración de objetivos podría decir:</para>

	<blockquote>
<!--
  <para><emphasis>To create a full-text indexer and search engine
  with a rich API, for use by programmers in providing search
  services for large collections of text files.</emphasis></para>
  </blockquote>
-->
	<para><emphasis>Crear un controlador y sistema de búsqueda con una API, para
	ser utilizada por programadores suministrando servicios de búsqueda
	para grandes colecciones de ficheros de texto.
	</emphasis></para>
	</blockquote>

<!--
<para>The features and requirements list would give the details,
clarifying the mission statement's scope:</para>
-->
<para>La lista de características y requerimientos daría detalles
que permitirían esclarecer el alcance de la declaración de objetivos:
</para>

  <blockquote>
<!--
    <para><emphasis>Features:</emphasis></para>
-->
    <para><emphasis>Características</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Searches plain text, HTML, and
                XML</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Búsquedas en texto plano,
                HTML y XML</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Word or phrase searching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Búsqueda de palabras o frases</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Fuzzy matching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(planeado) Emparejando borroso (Fuzzy Matching)</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Incremental updating of
                indexes</emphasis></para>
-->
      <listitem><para><emphasis>(planeado) Actualización incremental de 
                índices</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Indexing of remote web
                sites</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(planeado) Indexado de sitios web
                remotos</emphasis></para>
      </listitem>
    </itemizedlist>
<!--
    <para><emphasis>Requirements:</emphasis></para>
-->
    <para><emphasis>Requerimientos:</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Python 2.2 or higher</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Python 2.2 o mayor</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Enough disk space to hold the indexes
                (approximately 2x original data size)</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Espacio en disco suficiente para contener los índices
                (aproximadamente 2x el tamaño original de los datos)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<!--
<para>With this information, readers can quickly get a feel for
whether this software has any hope of working for them, and they can
consider getting involved as developers too.</para>
-->
<para>Con ésta información, los lectores podrán rápidamente
tener una idea de si éste programa tiene alguna esperanza de
trabajar para ellos, y también pueden considerar involucrarse como
desarrolladores.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<title>Estado del Desarrollo</title>

<!--
<para>Visitors usually want to know how a project is doing.  For new
projects, they want to know the gap between the project's promise and
current reality.  For mature projects, they want to know how actively
it is maintained, how often it puts out new releases, how responsive
it is likely to be to bug reports, etc.</para>
-->
<para>La gente siempre quiere saber cómo va un proyecto. Para proyectos nuevos,
desean saber la separación entre las promesas del proyecto y la realidad del momento. Para
proyectos maduros, desean saber cuan activamente es mantenido, cuan seguido sacan nuevas
versiones, la facilidad para reportar fallos, etc.</para>

<!--
<para>There are a couple of different avenues for providing answers to
these questions.  One is to have a development status page, listing
the project's near-term goals and needs (for example, it might be
looking for developers with a particular kind of expertise).  The page
can also give a history of past releases, with feature lists, so
visitors can get an idea of how the project defines "progress", and
how quickly it makes progress according to that definition.  Some
projects structure their development status page as a roadmap that
includes the future: past events are shown on the dates they actually
happened, future ones on the approximate dates the project hopes they
will happen.</para>
-->

<para>
Hay un par vías de diferentes para dar respuestas a estas preguntas,
se debe suministrar una página que muestre el estado
del desarrollo, listando los objetivos a corto plazo del proyecto y las necesidades (por
ejemplo, quizás se estén buscando desarrolladores con un expertos en un tema en particular).
Ésta página también puede dar una historia de versiones anteriores, con listas de las
características, de manera que los visitantes obtengan una idea de cómo el proyecto
define su "progreso" y de cuan rápidamente se hacen progresos de acuerdo a esa
definición. Algunos proyectos estructuran su página de estado de
desarrollo como una hoja de ruta que incluye el futuro: los
acontecimientos pasados ​​se muestran en las fechas en que realmente
sucedieron, los futuros sobre las fechas aproximadas en que el
proyecto espera que vayan a pasar.</para>

<!--
<para>The other way&nbsp;&mdash;&nbsp;not mutually exclusive with the
first, and in fact probably best done in combination with
it&nbsp;&mdash;&nbsp;is to have various automatically-maintained
counters and indicators embedded in the projects's front page and/or
its developer landing page, showing various pieces of information
that, in the aggregate, give a sense of the project's development
status and progress.  For example, an Announcements or News panel
showing recent news items, a Twitter or other microblog stream showing
notices that match the project's designated hashtags, a timeline of
recent releases, a panel showing recent activity in the bug tracker
(bugs filed, bugs responded to), another showing mailing list or
discussion forum activity, etc.  Each such indicator should be a
gateway to further information of its type: for example, clicking on
the "recent bugs" panel should take one to the full bug tracker, or at
least to an expanded view into bug tracker activity.</para>
-->

<para>La otra manera&nbsp;&mdash;&nbsp;no mutuamente exclusiva con
la primera, y de hecho, probablemente mejor realizarla en combinación
con ella&nbsp;&mdash;&nbsp;es tener varios contadores e indicadores
mantenidos de forma automática incrustados en la portada y/o la página
destinada a desarrolladores del proyecto, que muestre varias piezas de
información que, en conjunto, den una sensación del estado de
desarrollo del proyecto y el progreso. Por ejemplo, un anuncio o grupo
de noticias que muestran las noticias recientes, una cuenta de Twitter
o de otro microblog mostrando avisos que coincidan con hashtags
designados para el proyecto, una línea de tiempo de los últimos
lanzamientos, un panel que muestra la actividad reciente en el gestor
de fallos (fallos registrados, fallos respondidos), otro que muestre
la actividad de la lista de correo o foro de discusión, etc. Cada uno
de estos indicadores debería ser una puerta de entrada a más
información de este tipo: por ejemplo, al hacer clic en el panel
"fallos recientes" debe llevar al gestor de fallos completo, o por lo
menos a una vista panorámica a la actividad de seguimiento de
errores.</para>

<!--
<para>Really, there are two slightly different meanings of
"development status" being conflated here.  One is the formal sense:
where does the project stand in relation to its stated goals, and how
fast is it making progress.  The other is less formal but just as
useful: how active is this project?  Is stuff going on?  Are there
people here, getting things done?  Often that latter notion is what a
visitor is most interested in.  Whether or not a project met its most
recent milestone is sometimes not as interesting as the more
fundamental question of whether it has an active community of
developers around it.</para>
-->

<para>En realidad, hay dos significados ligeramente diferentes de
"estado del desarrollo" que se confunden aquí. Uno de ellos es el
sentido formal: ¿dónde se sitúa el proyecto en relación con sus
objetivos declarados, y qué tan rápido está progresando. El otro es
menos formal pero igual de útil: qué tan activo es este proyecto?
¿Hay personas aquí, están haciendo cosas?, A menudo, esta última
noción es en lo que un visitante está más interesado. Ya sea que un
proyecto cumplia su último hito o no a veces no es tan interesante
como la cuestión más fundamental de si tiene una comunidad activa
de desarrolladores alrededor.</para>

<!--
<para>The two notions of development status are, of course, related,
and a well-presented project shows both kinds.  The information can be
divided between the project's front page (show enough there to give an
overview of both types of development status) and a more
developer-oriented page.</para>
-->

<para>Las dos nociones de estado de desarrollo están, por supuesto,
relacionadas, y un proyecto bien presentado muestra los dos tipos. La
información se puede dividir entre la portada del proyecto (mostrar
suficiente allí para dar una visión general de los dos tipos de estado
de desarrollo) y una página más orientado al desarrollador.</para>

<sidebar id="launchpad-status-indicators">
<title>Ejemplo: Indicadores de estado de Launchpad</title>

<!--
<para>One site that does a pretty good job of showing
developer-oriented status indicators is Launchpad.net.  Launchpad.net
is a bit unusual in that it is both a primary hosting platform for
some projects, and a secondary, packaging-oriented site for others (or
rather, for those others it is the primary site for the "project" of
getting that particular program packaged for the Ubuntu GNU/Linux
operating system, which Launchpad was specifically designed to
support).  In either case, a project's landing page on Launchpad shows
a variety of automatically-maintained status indicators that quickly
give an idea of where the project stands.  While simply imitating a
Launchpad page is probably not a good idea&nbsp;&mdash;&nbsp;your own
project should think carefully about what its best development status
indicators are&nbsp;&mdash;&nbsp;Launchpad project pages do provide
some good examples of the possibilities.  Start from the top of a
project page there and scroll down: <ulink
url="https://launchpad.net/drizzle" >launchpad.net/drizzle</ulink>.
or <ulink url="https://launchpad.net/inkscape"
>launchpad.net/inkscape</ulink>, to pick two at random.</para>
-->

<para>Un sitio que hace un muy buen trabajo de mostrar indicadores de
estado orientado al desarrollador es Launchpad.net. Launchpad.net es
un poco inusual, ya que es a la vez una plataforma de alojamiento
principal para algunos proyectos, y en segundo lugar, un sitio
orientado al empaquetado para los demás (o más bien, para los demás,
es el sitio primario para el "proyecto" de conseguir que el programa
en particular sea empaquetado para el sistema operativo Ubuntu
GNU/Linux, al cual Launchpad fue diseñado para apoyar específicamente).
En cualquier caso, la página de destino de un proyecto en Launchpad
muestra una variedad de indicadores de estado mantenidos de forma
automática para dar rápidamente una idea de donde se encuentra el
proyecto. Aunque simplemente imitar una página de Launchpad no es
probablemente una buena dea&nbsp;&mdash;&nbsp;su propio proyecto debe
pensar cuidadosamente acerca de cuales son sus mejores indicadores del
estado de desarrollo son&nbsp;&mdash;&nbsp;las páginas del proyecto de
Launchpad proporcionan buenos ejemplos de las posibilidades. Empiece
desde la parte superior de una página del proyecto allí y desplácese
hacia abajo: <ulink
url="https://launchpad.net/drizzle">launchpad.net/drizzle</ulink>
o <ulink
url="https://launchpad.net/inkscape">launchpad.net/inkscape</ulink>,
por escoger dos al azar.</para>

</sidebar>

<sect3 id="development-status-honesty">
<title>El estado del desarrollo debe reflejar siempre la realidad.</title>

<!--
<para>Don't be afraid of looking unready, and never give in to the
temptation to inflate or hype the development status.  Everyone knows that
software evolves by stages; there's no shame in saying "This is alpha
software with known bugs.  It runs, and works at least some of the
time, but use at your own risk."  Such language won't scare away the
kinds of developers you need at that stage.  As for users, one of the
worst things a project can do is attract users before the software is
ready for them.  A reputation for instability or bugginess is very
hard to shake, once acquired.  Conservativism pays off in the long
run; it's always better for the software to be
<emphasis>more</emphasis> stable than the user expected than less, and
pleasant surprises produce the best kind of word-of-mouth.</para>
-->

<para>No hay que asustarse por parecer no estar preparado y nunca caer en la tentación
de inflar el estado del desarrollo. Todos saben que el software evoluciona por etapas;
no hay que avergonzarse en decir "Esto es software alfa con fallos conocidos. Ejecuta, y
funciona algunas veces, así que uselo bajo su responsabilidad." Este lenguaje no asustará
el tipo de desarrolladores que son necesarios en esta etapa. En cuanto a los usuarios, una
de las peores cosas que un proyecto puede hacer es atraer usuarios antes de que el
software éste listo para estos. Una reputación por inestabilidad y fallos es muy difícil
de hacer desaparecer una vez adquirida. La paciencia da sus frutos a largo plazo; siempre
es mejor que el software sea <emphasis>más</emphasis> estable de lo que espera el usuario
ya que las sorpresas gratas producen el mejor boca a boca.</para>

<sidebar id="alpha-and-beta">
  <title>Alfa y Beta</title>

<!--
<para>The term <firstterm>alpha</firstterm> usually means a first
  release, with which users can get real work done and which has all
  the intended functionality, but which also has known bugs.  The main
  purpose of alpha software is to generate feedback, so the developers
  know what to work on.  The next stage, <firstterm>beta</firstterm>,
  means the software has had all the serious bugs fixed, but has not
  yet been tested enough to certify for production release.  The purpose of beta
  software is to either become the official release, assuming no bugs
  are found, or provide detailed feedback to the developers so they
  can reach the official release quickly.  The difference between
  alpha and beta is very much a matter of judgement.</para>
-->

  <para>El término <firstterm>alfa</firstterm> usualmente significa, la primera versión,
  con lo que los usuarios pueden realizar todos el trabajo teniendo todas la funcionalidad
  esperada, pero que se sabe tiene fallos. El principal propósito de el software alfa es 
  generar una respuesta, de forma que los desarrolladores sepan en qué trabajar. La próxima
  etapa, <firstterm>beta</firstterm>, significa que han sido resueltos todos los fallos
  más importantes, pero que aun no ha sido intensivamente probado como para 
  ser la versión oficial. El propósito de las betas es la de convertirse en la versión
  oficial, asumiendo que nuevos fallos no sean encontrados, o de suministrar un feedback
  para los desarrolladores para que logren la versión oficial más rápido. La diferencia
  entre alfa y beta es más una cuestión de juicio.</para>
</sidebar>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<title>Descargas</title>

<!-- This section probably needs to be rewritten, because there's so
     much software, especially Javascript, that is distributed
     straight from GitHub.  To a first approximation, source packaging
     is important for something you expect an OS packager to
     repackage; otherwise, it may be a luxury.  Not sure whether this
     footnote for JS can be used or not:

     <footnote><para>This is still true even for Javascript packages
     that are deployed as minified, continuously available downloads
     from a canonical URL.  Minified JS downloads are equivalent to an
     executable form.  They're not what a developer would hack on to
     fix a bug&nbsp;&mdash;&nbsp;for that, you need developer-friendly
     source code.  You also need .</para></footnote>
-->

<!--
<para>The software should be downloadable as source code in standard
formats.  When a project is first getting started, binary (executable)
packages are not necessary, unless the software has such complicated
build requirements or dependencies that merely getting it to run would
be a lot of work for most people.  (But if this is the case, the
project is going to have a hard time attracting developers
anyway!)</para>
-->

<para>EL software debe poder ser descargable como código fuente en formatos estándares,
paquetes binarios (ejecutables) no son necesarios, a menos que el programa tenga requerimientos
muy complicados para su compilado o dependencias que hagan hacerlo funcionar sea muy laborioso
para la mayoría de las personas. (¡Aunque si es éste es el caso, el proyecto va a tenerlo muy
difícil atrayendo programadores de todas maneras!)</para>

<!--
<para>The distribution mechanism should be as convenient, standard,
and low-overhead as possible.  If you were trying to eradicate a
disease, you wouldn't distribute the medicine in such a way that it
requires a non-standard syringe size to administer.  Likewise,
software should conform to standard build and installation methods;
the more it deviates from the standards, the more potential users and
developers will give up and go away confused.</para>
-->
<para>El mecanismo de distribución debe de ser de lo más conveniente, estándar y sencillo posible.
Si se estuviese intentando erradicar una enfermedad, no distribuiría la medicina tal que requiriese
de una jeringuilla especial para administrarse. De igual manera, un programa debe ser conforme a métodos
de compilación e instalación estándar; entre más se desvíe de estos estándares, mayor será la cantidad
de usuarios y desarrolladores potenciales que se den por vencidos y abandonen el proyecto confundidos.</para>

<!--
<para>That sounds obvious, but many projects don't bother to
standardize their installation procedures until very late in the game,
telling themselves they can do it any time: <emphasis>"We'll sort all
that stuff out when the code is closer to being ready."</emphasis>
What they don't realize is that by putting off the boring work of
finishing the build and installation procedures, they are actually
making the code take longer to get ready&mdash;because they
discourage developers who might otherwise have contributed to the
code, if only they could build and test it.  Most insidiously, the
project won't even <emphasis>know</emphasis> it's
losing all those developers, because the process is an accumulation of
non-events: someone visits a web site, downloads the software, tries
to build it, fails, gives up and goes away.  Who will ever know it
happened, except the person themselves?  No one working on the project
will realize that someone's interest and good will have been silently
squandered.</para>
-->
<para>Esto parece obvio, pero muchos proyectos no se molestan en estandarizar sus procedimientos
de instalación hasta mucho después, diciéndose a si mismos que esto lo pueden hacer en cualquier momento:
<emphasis>"Ya resolveremos todas esas cosas cuando el código éste casi listo."</emphasis> De lo que no
se dan cuenta es de que al dejar de lado el trabajo aburrido de terminar los procedimientos de
compilado e instalación, en realidad están ralentizando todo&mdash;porque desalientan a los programadores
que de otra manera habrían contribuido al código, si tan sólo pudieran construir y probarlo. Más dañino aun, no <emphasis>saben</emphasis> que están
perdiendo a todos esos desarrolladores, porque el proceso es una acumulación de eventos que no suceden:
alguien visita un sitios web, descarga el programa, intenta compilarlo, falla, deja de intentarlo y abandona.
¿Quién sabrá que ocurrió exceptuando a ésta persona? Nadie en el proyecto se dará cuenta que el interés y
la buena voluntad de alguien a sido silenciosamente malgastada.</para>

<!--
<para>Boring work with a high payoff should always be done early, and
significantly lowering the project's barrier to entry through good
packaging brings a very high payoff.</para>
-->
<para>Las tareas aburridas con un alto beneficio siempre deben ser hechos al principio y disminuyendo
de manera significativa las barreras de entrada a un proyecto utilizando buenos paquetes brindan
altos beneficios.</para>

<!--
<para>When you release a downloadable package, give it a unique
version number, so that people can compare any two releases and know
which supersedes the other.  That way they can report bugs against a
particular release (which helps respondents to figure out if the bug
is already fixed or not).  A detailed discussion of version
numbering can be found in <xref linkend="release-numbering"/>, and the
details of standardizing build and installation procedures are covered
in <xref linkend="packaging"/><phrase output="printed">, both in <xref
linkend="development-cycle"/></phrase>.</para>
-->
<para>Cuando se lanza un paquete descargable, dale un número de versión único,
de manera que la gente pueda comparar dos versiones cualquiera diferentes y saber cual reemplaza a cual.
De esa manera pueden informar de los errores en contra de un lanzamiento
en particular (que ayuda a los que responden a averiguar si el error ya
está solucionado o no). Una
discusión detallada sobre la numeración de versiones puede ser encontrada en <xref linkend="release-numbering"/>,
y detalles sobre la estandarización de los procedimientos de compilado e instalación serán cubiertos
en <xref linkend="packaging"/><phrase output="printed">, ambos en el <xref linkend="development-cycle"/></phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<title>Control de versiones y Acceso al Bug Tracker</title>

<!--
<para>Downloading source packages is fine for those who just want to
install and use the software, but it's not enough for those who want
to debug or add new features.  Nightly source snapshots can help, but
they're still not fine-grained enough for a thriving development
community.  People need real-time access to the latest sources, and a
way to submit changes based on those sources.</para>
-->
<para>Descargar paquetes con el código fuente está bien para aquellos que sólo desean instalar y utilizar un programa,
pero no es suficiente para aquellos que desean buscar fallos o añadir nuevas mejoras. Instantáneas nocturnas del
código fuente pueden ayudar, pero esto no es suficiente para una prospera comunidad de desarrollo. Estas personas
necesitan de acceso en tiempo real a los últimos cambios, y una manera de enviar cambios basados en esas fuentes.</para>

<!--
<para>The solution is to use a version control
system&nbsp;&mdash;&nbsp;specifically, an online, publicly-accessible
version controlled repository, from which anyone can check out the
project's materials and subsequently get updates.  A version control
repository is a sign&mdash;to both users and developers&mdash;that
this project is making an effort to give people what they need to
participate.  As of this writing, many open source projects use <ulink
url="https://github.com/" >GitHub.com</ulink>, which offers unlimited
free public version control hosting for open source projects.  While
GitHub is not the only choice, nor even the only good choice, it's a
reasonable one for most projects<footnote><para>Although GitHub is
based on Git, a popular open source version control system, the code
that runs GitHub's web services is not itself open source.  Whether
this matters for your project is a complex question, and is addressed
in more depth in <xref linkend="canned-hosting"/><phrase
output="printed"> in <xref
linkend="technical-infrastructure"/></phrase></para></footnote>.
Version control infrastructure is discussed in detail in <xref
linkend="vc"/><phrase output="printed"> in <xref
linkend="technical-infrastructure"/></phrase>.</para>
-->

<para>La solución es utilizar un sistema de control de
versiones&nbsp;&mdash;&nbsp;en concreto, una repositorio controlado
por versiones, en línea, de acceso público, del que cualquiera
puede echar un vistazo al proyecto y, posteriormente, obtener
actualizaciones. Un repositorio de control de versiones es una señal
&nbsp;&mdash;&nbsp;para usuarios y desarrolladores&nbsp;&mdash;&nbsp;de
que este proyecto está haciendo un esfuerzo para dar a la gente lo que
necesitan para participar. Al escribir estas líneas, muchos proyectos
de código abierto usan <ulink
url="https://github.com/">GitHub.com</ulink>, que ofrece alojamiento
ilimitado y gratuito de control de versiones públicas para proyectos de
código abierto. Mientras GitHub no es la única opción, ni siquiera la
única buena elección, es bastante razonable para la mayoría de los
proyectos<footnote><para>Aunque GitHub se basa en Git, un sistema de
control de versiones de código abierto muy popular, el código que
ejecuta los servicios web de GitHub no es en sí mismo fuente abierta.
Si esto es importante para su proyecto es una cuestión compleja, y
se aborda con mayor profundidad en <xref
linkend="canned-hosting"/><phrase output="printed"> en <xref
linkend="technical-infrastructure"/></phrase></para></footnote>.
La infraestructura del control de versiones se discute detalladamente
en <xref linkend="vc"/><phrase output="printed"> en <xref
linkend="technical-infrastructure"/></phrase>.</para>

<!--
<para>The same goes for the project's bug tracker.  The importance of
a bug tracking system lies not only in its day-to-day usefulness to
developers, but in what it signifies for project observers.  For many
people, an accessible bug database is one of the strongest signs that
a project should be taken seriously: the higher the number of bugs in
the database, the <emphasis>better</emphasis> the project looks.  This
might seem counterintuitive, but remember that the number of bug
reports filed really depends on three things: the absolute number of
actual software defects present in the code, the number of people
using the software,
and the convenience with which those people can report new bugs.  Of
these three factors, the latter two are much more significant than the
first.  Any software of sufficient size and complexity has an
essentially arbitrary number of bugs waiting to be discovered.  The
real question is, how well will the project do at recording and
prioritizing those bugs?  A project with a large and well-maintained
bug database (meaning bugs are responded to promptly, duplicate bugs
are unified, etc.) therefore makes a better impression than a project
with no bug database, or a nearly empty database.</para>
-->
<para>Lo mismo ocurre con rastreador de errores del proyecto. La
importancia de un sistema de seguimiento de fallos no sólo radica en su
utilidad en el día a día para los desarrolladores, sino en lo que
significa para los observadores del proyecto. Para muchas personas, una
base de datos de errores accesible es uno de los signos más fuertes de
que un proyecto se debe tomar en serio: cuanto mayor sea el número de
errores en la base de datos, <emphasis>mejor</emphasis> se ve el
proyecto. Esto puede parecer contrario a la intuición, pero recuerde
que el número de informes de fallos archivados en realidad depende de
tres cosas: el número absoluto de defectos de software reales presentes
en el código, el número de personas que utilizan el software, y la
comodidad con la que las personas pueden denunciar nuevos errores. De
estos tres factores, los dos últimos son mucho más importante que el
primero. Cualquier software de suficiente tamaño y complejidad tiene
un número esencialmente arbitrario de fallos esperando a ser
descubiertos. La verdadera pregunta es, ¿qué tan bien va a hacer el
proyecto el registro y la priorización de esos fallos? Un proyecto con
una base de datos de errores grandes y bien cuidada (que significa que
los fallos sean atendidas sin demora, los errores duplicados están
unificados, etc.), produce por lo tanto una mejor impresión que un
proyecto con ninguna base de datos de errores, o de una base de datos
casi vacía.</para>

<!--
<para>Of course, if your project is just getting started, then the bug
database will contain very few bugs, and there's not much you can do
about that.  But if the status page emphasizes the project's youth,
and if people looking at the bug database can see that most filings
have taken place recently, they can extrapolate from that the project
still has a healthy <emphasis>rate</emphasis> of filings, and they
will not be unduly alarmed by the low absolute number of bugs
recorded.<footnote><para>For a more thorough argument that bug reports
should be treated as good news, see <ulink
url="http://www.rants.org/2010/01/10/bugs-users-and-tech-debt/"
>rants.org/2010/01/10/bugs-users-and-tech-debt</ulink>, an article I
wrote in 2010 about how bug reports do <emphasis>not</emphasis>
represent "<ulink url="http://en.wikipedia.org/wiki/Technical_debt"
>technical debt</ulink>" but rather user engagement.</para></footnote></para>
-->
<para>Claro está, que si un proyecto está empezando, que la base de datos de fallos
contenga algunos pocos, y no hay mucho que se pueda hacer al respecto.
Pero si la página de estado destaca la juventud del proyecto, y si la
gente que busca en la base de datos de errores puede ver que la mayoría
de los documentos presentados han tenido lugar recientemente, pueden
extrapolar a partir de ahí que el proyecto sigue teniendo una
<emphasis>tasa</emphasis> saludable de incidencias, y no van a alarmarse
indebidamente por el bajo número absoluto de errores
registrados.<footnote><para>Para una discusión más a fondo de que los
informes de fallos deben ser tratados como una buena noticia, consulte en
<ulink
url="http://www.rants.org/2010/01/10/bugs-users-and-tech-debt/">rants.org/2010/01/10/bugs-users-and-tech-debt</ulink>,
un artículo que escribí en 2010 sobre cómo los informes de error no
<emphasis>no</emphasis> representan una "<ulink
url="http://en.wikipedia.org/wiki/Technical_debt">deuda técnica</ulink>"
sino más bien participación de los usuarios.</para></footnote></para>

<!--
<para>Note that bug trackers are often used to track not only software
bugs, but enhancement requests, documentation changes, pending tasks,
and more.  The details of running a bug tracker are covered in
<xref linkend="bug-tracker"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>, so I won't
go into them here.  The important thing from a presentation point of
view is just to <emphasis>have</emphasis> a bug tracker, and to make
sure that fact is visible from the front page of the project.</para>
-->
<para>Hay que señalar que los bug trackers no sólo son usados para fallos en los programas sino también para
peticiones de mejoras, cambios en la documentación, tareas pendientes y mucho más. Los detalles de ejecutar
un sistema de seguimiento de fallos será cubierto en <xref linkend="bug-tracker"/><phrase output="printed"> en
el <xref linkend="technical-infrastructure"/></phrase>, así que no vamos a entrar en detalles. Lo importante desde la perspectiva
de la presentación está en <emphasis>tener</emphasis> un bug tracker y asegurarse de que es visible desde la
página principal del proyecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<title>Canales de Comunicación</title>

<!--
<para>Visitors usually want to know how to reach the human beings
involved with the project.  Provide the addresses of mailing lists,
chat rooms, IRC channels (<xref linkend="technical-infrastructure"/>),
and any other forums where others
involved with the software can be reached.  Make it clear that you and
the other authors of the project are subscribed to these mailing
lists, so people see there's a way to give feedback that will reach
the developers.  Your presence on the lists does not imply a
committment to answer all questions or implement all feature requests.
In the long run, probably only a fraction users will use the forums
anyway, but the others will be comforted to know that they
<emphasis>could</emphasis> if they ever needed to.</para>
-->
<para>Usualmente los visitantes desean saber cómo pueden contactar con los seres humanos detrás del proyecto.
Hay que suministrar direcciones de listas de correo, salas de chat, canales en IRC (<xref linkend="technical-infrastructure"/>), y cualquier otro foro
donde aquellos involucrados puedan ser contactados. Hay que dejar claro que los autores del proyecto
están suscritos a estas listas, de manera que la gente vea una forma de dar feedback a los desarrolladores. La
presencia de estos en las listas no implica obligación alguna de responder a todas las preguntas que se formulan
o de implementar todas las peticiones. A la larga, probablemente solo una fraccción de los usuarios se unan
a los foros de todas maneras, pero los demás estarán conformes con saber que <emphasis>podrían</emphasis> si fuese necesario.
</para>

<!--
<para>In the early stages of a project, there's no need to have
separate user and developer forums.  It's much better to have everyone
involved with the software talking together, in one "room."  Among
early adopters, the distinction between developer and user is often
fuzzy; to the extent that the distinction can be made, the ratio of
developers to users is usually much higher in the early days of the
project than later on.  While you can't assume that every early
adopter is a programmer who wants to hack on the software, you can
assume that they are at least interested in following development
discussions and in getting a sense of the project's direction.</para>
   
-->
<para>En la primeras etapas de cualquier proyecto, no existe la necesidad de que haya una diferenciación entre
los foros de los usuarios y los de los desarrolladores. Es mejor tener a todos los involucrados en el proyecto
hablando en conjunto en una sala. Dentro de los primeros en adoptar el proyecto, la distinción entre usuario
y desarrollador será muchas veces borrosa, hasta tal punto que la distinción no se puede hacer y la proporción
entre programadores y usuarios usualmente es mayor al principio que al final. Mientras que no se puede asumir
que todos quienes utilicen el programa sean programadores que quieren modificarlo, sí se puede asumir
que al menos estan interesados en seguir las discusiones sobre el desarrollo y en obtener una visión de
la dirección del proyecto.</para>

<!--
<para>As this chapter is only about getting a project started, it's
enough merely to say that these communications forums need to exist.
Later, in <xref linkend="growth"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>, we'll examine where
and how to set up such forums, the ways in which they might need
moderation or other management, and how to separate user forums from
developer forums, when the time comes, without creating an
unbridgeable gulf.</para>
-->
<para>Ya que éste capítulo es sólo sobre iniciar un proyecto, es suficiente decir que al menos
estos foros de comunicación deben existir. Luego en <xref linkend="growth"/><phrase output="printed">
en el <xref linkend="communications"/></phrase>, examinaremos dónde y cómo montar estos foros, cómo deben
ser moderados o cualquier otro tipo de dirección y cómo separar los foros de usuarios de los foros
de los desarrolladores, cuando llegue el momento, sin crear un espacio infranqueable.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<title>Pautas de Desarrollo</title>

<!--
<para>If someone is considering contributing to the project, she'll
look for developer guidelines.  Developer guidelines are not so much
technical as social: they explain how the developers interact with
each other and with the users, and ultimately how things get
done.</para>
-->
<para>Si alguien considera contribuir al proyecto, buscará por pautas de desarrollo. Estas pautas son más
sociales que técnicas: explican como los desarrolladores interactúan entre ellos y con los usuarios, y 
finalmente cómo hacer las cosas.</para>

<!--
<para>This topic is covered in detail in
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>, but the basic
elements of developer guidelines are:
-->
<para>Este tema es tratado en detalle en <xref linkend="written-rules"/><phrase output="printed"> en
<xref linkend="social-infrastructure"/></phrase>, pero los elementos básicos de unas pautas de desarrollo son:

<itemizedlist>
<!--
  <listitem><para>pointers to forums for interaction with other
            developers</para> 
  </listitem>
-->
  <listitem><para>enlaces a los foros para la interacción de los desarrolladores
            </para> 
  </listitem>
<!--
  <listitem><para>instructions on how to report bugs and submit
            patches</para>
  </listitem>
-->
  <listitem><para>instrucciones en cómo reportar fallos y enviar parches
            </para>
  </listitem>
<!--
  <listitem><para>some indication of <emphasis>how</emphasis>
            development is usually done and how decisions are
            made&mdash;is the project a benevolent dictatorship, a
            democracy, or something else</para>
  </listitem>
-->
  <listitem><para>alguna indicación de <emphasis>cómo</emphasis>
	    el desarrollo es usualmente llevado a cabo y cómo se toman las decisiones&mdash;es el
	    proyecto una dictadura benevolente, una democracia o algo más</para>
  </listitem>
</itemizedlist>

<!--
No pejorative sense is intended by "dictatorship", by the way.  It's
perfectly okay to run a tyranny where one particular developer has
veto power over all changes.  Many successful projects work this way.
The important thing is that the project come right out and say so.  A
tyranny pretending to be a democracy will turn people off; a tyranny
that says it's a tyranny will do fine as long as the tyrant is
competent and trusted.  (See <xref linkend="forkability"/><phrase
output="printed"> in <xref linkend="social-infrastructure"/></phrase>
for why dictatorship in open source projects doesn't have the same
implications as dictatorship in other areas of life.)</para>
  
-->
Ningún sentido peyorativo es intencional por lo de "dictadura" por cierto. Es perfectamente aceptable
ser un tirano donde un desarrollador en particular tiene el poder de veto sobre todos los cambios. Muchos
proyectos exitosos funcionan de ésta manera. Lo importante es que el proyecto sea consciente de esto y lo
comunique. Una tiranía pretendiendo ser una democracia desalentara a las personas; una tiranía que dice serlo
funcionará bien siempre que el tirano sea competente y de confianza.
(Ver <xref linkend="forkability"/><phrase output="printed"> en el <xref linkend="social-infrastructure"/></phrase>
para conocer por qué la dictadura en proyectos de código abierto
no tiene las mismas implicaciones que dictadura en otras áreas de
la vida.)</para>

<!--
<para><ulink
url="http://subversion.apache.org/docs/community-guide/"
>subversion.apache.org/docs/community-guide</ulink>
is an example of particularly thorough developer guidelines; the
LibreOffice guidelines at <ulink
url="https://wiki.documentfoundation.org/Development"
>wiki.documentfoundation.org/Development</ulink> are also a good
example.</para>
-->
<para><ulink
url="http://subversion.apache.org/docs/community-guide/"
>subversion.apache.org/docs/community-guide</ulink>
es un ejemplo de pautas de desarrollo particularmente exhaustivas;
las directrices de LibreOffice en <ulink
url="https://wiki.documentfoundation.org/Development"
>wiki.documentfoundation.org/Development</ulink> son también un
buen ejemplo.</para>

<!--
<para>The separate issue of providing a programmer's introduction to
the software is discussed in <xref
linkend="developer-documentation"/><phrase output="printed">
later in this chapter</phrase>.</para>
-->
<para>Proveer a los programadores una introducción a la aplicación es otro tema y será discutido en 
<xref linkend="developer-documentation"/><phrase output="printed"> más adelante en éste capítulo
</phrase>.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<title>Documentación</title>

<!--
<para>Documentation is essential.  There needs to be
<emphasis>something</emphasis> for people to read, even if it's
rudimentary and incomplete.  This falls squarely into the "drudgery"
category referred to earlier, and is often the first area where a new
open source project falls down.  Coming up with a mission statement
and feature list, choosing a license, summarizing development
status&mdash;these are all relatively small tasks, which can be
definitively completed and usually need not be revisited once done.
Documentation, on the other hand, is never really finished, which may
be one reason people sometimes delay starting it at all.</para>
-->
<para>La documentación es esencial. Debe haber <emphasis>algo</emphasis>
para que la gente lea, aunque sea algo rudimentario e incompleto. Esto
entra de lleno en la categoría antes referida y usualmente es la primera
área donde un proyecto falla. Conseguir una declaración de objetivos y
una lista de requerimientos, escoger una licencia, resumir el estado de
desarrollo&mdash;son todas tareas relativamente pequeñas que pueden ser
completadas y a las que usualmente no es necesario volver una vez
terminadas. La documentación, por otra parte, nunca está terminada
realmente, lo cual puede que sea una de las razones por las cuales se retrase 
su inicio.</para>

<!--
<para>The most insidious thing is that documentation's utility to
those writing it is the reverse of its utility to those who will read
it.  The most important documentation for initial users is the basics:
how to quickly set up the software, an overview of how it works,
perhaps some guides to doing common tasks.  Yet these are exactly the
things the <emphasis>writers</emphasis> of the documentation know all
too well&mdash;so well that it can be difficult for them to see
things from the reader's point of view, and to laboriously spell out
the steps that (to the writers) seem so obvious as to be unworthy of
mention.</para>
-->
<para>La cuestión más insidiosa sobre la utilidad de la documentación
es que es inversamente proporcional para quienes la escriben y para
quienes la leen. Lo más importante de la documentación para un usuario
inicial es lo más básico: cómo configurar la aplicación, una introducción
de cómo funciona y quizás algunas guías para realizar las tareas
más comunes. Pero a la vez son estas cosas las más sabidas por 
aquellos quienes <emphasis>escriben</emphasis> la documentación&mdash;
tan bien sabidas que puede ser difícil para estos ver las cosas desde
el punto de vista de los lectores, dificultando listar los pasos
que (para los escritores) parecen tan obvios que no merecen especial
atención.</para>

<!--
<para>There's no magic solution to this problem.  Someone just needs
to sit down and write the stuff, and then, most importantly,
incorporate feedback from readers.  Use a simple, easy-to-edit format
such as HTML, plain text, Markdown, ReStructuredText, or some
variant of XML&mdash;something that's convenient for lightweight,
quick improvements on the spur of the moment<footnote><para>Don't
worry too much about choosing the right format the first time.  If you
change your mind later, you can always do an automated conversion
using <ulink url="http://johnmacfarlane.net/pandoc/"
>Pandoc</ulink>.</para></footnote>.  This is not only to remove any
overhead that might impede the original writers from making
incremental improvements, but also for those who join the project
later and want to work on the documentation.</para>
-->
<para>No existe una solución mágica para éste problema. Alguien debe
sentarse y escribir todo esto, para luego, y lo más importante,
incorporar los comentarios de los lectores
nuevo tipo y probar la calidad. Hay que utilizar un formato simple y
fácil de modificar como HTML, texto plano, Markdown, ReStructuredText, o alguna variante de
XML&mdash;algo que sea conveniente para mejoras rápidas, ligeras e
imprevisibles para el momento<footnote><para>No te preocupes demasiado
por elegir el formato correcto la primera vez. Si cambias de opinión más
tarde, siempre se puede hacer una conversión automatizada usando <ulink
url="http://johnmacfarlane.net/pandoc/">Pandoc</ulink>.</para></footnote>.
Esto no es sólo para eliminar cualquier trabajo innecesario
a los escritores originales realizar cambios incrementales, sino
que también para quienes se unan al proyecto después y desean
trabajar en la documentación.</para>

<!--
<para>One way to ensure basic initial documentation gets done is to
limit its scope in advance.  That way, writing it at least won't feel
like an open-ended task.  A good rule of thumb is that it should meet
the following minimal criteria:</para>
-->
<para>Una manera de asegurarse de que la documentación básica inicial
se hace, es limitando su alcance. Al menos de ésta manera no parecerá que
se está escribiendo una tarea sin fin. Una buena regla es seguir unos
criterios mínimos:</para>

<itemizedlist>
<!--
  <listitem><para>Tell the reader clearly how much technical
            expertise they're expected to have.</para>
  </listitem>
-->
  <listitem><para>Avisar al lector claramente el nivel técnico
            que se espera que tenga.</para>
  </listitem>
<!--
  <listitem><para>Describe clearly and thoroughly how to set up
            the software, and somewhere near the beginning of the
            documentation, tell the user how to run some sort of
            diagnostic test or simple command to confirm that
            they've set things up correctly.  Startup
            documentation is in some ways more important than
            actual usage documentation.  The more effort someone has
            invested in installing and getting started with the
            software, the more persistent she'll be in figuring out
            advanced functionality that's not well-documented.
            When people abandon, they abandon early; therefore,
            it's the earliest stages, like installation, that need
            the most support.</para>
  </listitem>
-->
  <listitem><para>Describir clara y extensivamente cómo configurar
	    el programa y en alguna parte al inicio de la documentación
	    comunicarle al usuario cómo ejecutar algún tipo de prueba
	    de diagnóstico o un simple comando para confirmar que todo
	    funciona correctamente. La documentación inicial es a veces
	    más importante que la documentación de uso. Mientras mayor
	    sea el esfuerzo invertido en instalar y tener funcionando
	    la aplicación, mayor será la persistencia en descubrir
	    funcionalidades avanzadas o no documentadas. Cuando alguien
	    abandona, abandonan al principio; por ello, las primeras etapas
	    como la instalación, necesiten la mayor ayuda.</para>
  </listitem>
<!--
  <listitem><para>Give one tutorial-style example of how to do a
            common task.  Obviously, many examples for many tasks
            would be even better, but if time is limited, pick one
            task and walk through it thoroughly.  Once someone
            sees that the software <emphasis>can</emphasis> be
            used for one thing, they'll start to explore what else
            it can do on their own&mdash;and, if you're lucky,
            start filling in the documentation themselves.  Which
            brings us to the next point...</para>
  </listitem>
-->
  <listitem><para>Dar un ejemplo estilo tutorial de como realizar alguna
	    tarea común. Obviamente, muchos ejemplos para muchas tareas
	    sería mejor, pero si el tiempo es limitado, es mejor escoger
	    una tarea en específico y llevar al usuario de la mano
	    paso por paso. Una vez que se ve que la aplicación <emphasis>
	    puede</emphasis> ser utilizada , empezarán a explorar
	    qué más es lo que puede hacer&mdash;y si se tiene suerte
	    empezar a documentarlo ellos mismos. Lo que nos lleva
	    al siguiente punto...</para>
  </listitem>
<!--
  <listitem><para>Label the areas where the documentation is known
            to be incomplete.  By showing the readers that you are
            aware of its deficiencies, you align yourself with
            their point of view.  Your empathy reassures them that
            they don't face a struggle to convince the project of
            what's important.  These labels needn't represent
            promises to fill in the gaps by any particular date
           &mdash;it's equally legitimate to treat them as open
            requests for volunteer help.</para>
-->
  <listitem><para>Indicar las áreas donde se sabe que la documentación
	    es incompleta. Al mostrar a los lectores que se es consciente
	    de las deficiencias, nos alineamos con su punto de vista. La empatía
	    les da confianza en que no van a tener que luchar para convencer al
	    proyecto de su importancia. Estas indicaciones no necesitan representar
	    promesa alguna de completar los espacios en blanco en una fecha en
	    particular&mdash;es igualmente legitimo tratarlas como requisitos
	    abiertos para ayudantes voluntarios.</para>
  </listitem>
</itemizedlist>

<!--
<para>The last point is of wider importance, actually, and can be
applied to the entire project, not just the documentation.  An
accurate accounting of known deficiencies is the norm in the open
source world.  You don't have to exaggerate the project's
shortcomings, just identify them scrupulously and dispassionately when
the context calls for it (whether in the documentation, in the bug
tracking database, or on a mailing list discussion).  No one will
treat this as defeatism on the part of the project, nor as a
commitment to solve the problems by a certain date, unless the project
makes such a commitment explicitly.  Since anyone who uses the
software will discover the deficiencies for themselves, it's much
better for them to be psychologically prepared&mdash;then the
project will look like it has a solid knowledge of how it's
doing.</para>
-->
<para>Ese último criterio es de una especial importancia, y puede ser
aplicado al proyecto entero, no sólo a la documentación. Una gestión
exacta de las deficiencias conocidas es la norma en el mundo Open Source.
No se debe exagerar en las faltas del proyecto, solo identificarlas
escrupulosa y desapasionadamente cuando sea necesario (sea en la
documentación, en la base de datos de fallos o en discusiones en la
lista de correos). Nadie verá esto como derrotismo por parte del proyecto,
ni como una responsabilidad explícita. Ya que cualquiera que utilice la
aplicación descubrirá sus deficiencias por si mismos, es mejor que estén
psicológicamente preparados&mdash;entonces parece que el proyecto tiene
un sólido conocimiento acerca de como va progresando.</para>

<sidebar id="starting-a-faq">
  <title>Manteniendo un FAQ (Preguntas Más Frecuentes)</title>

<!--
  <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  document) can be one of the best investments a project makes in
  terms of educational payoff.  FAQs are highly tuned to the questions
  users and developers actually ask&mdash;as opposed to the questions
  you might have <emphasis>expected</emphasis> them to ask&mdash;and
  therefore, a well-maintained FAQ tends to give those who consult it
  exactly what they're looking for.  The FAQ is often the first place
  users look when they encounter a problem, often even in preference
  to the official manual, and it's probably the document in your
  project most likely to be linked to from other sites.</para>
-->

  <para>Un <firstterm>FAQ</firstterm> (del ingles "Frequently Asked Questions")
  puede ser uno de las mejores inversiones que un proyecto puede hacer
  en términos de beneficios educativos. Los FAQs están enfocados a las
  preguntas que desarrolladores y usuarios podrían formular&mdash;opuesto
  a aquellas que <emphasis>se espera</emphasis> que hagan&mdash;por lo cual,
  un FAQ bien cuidado tiende a dar a aquellos quienes lo consultan
  exactamente lo que están buscando. Por lo general es el primer lugar
  en el que se busca cuando se encuentran con un problema, incluso con
  preferencia sobre el manual oficial y es probablemente el documento
  más propenso a ser enlazado desde otros sitios.</para>

<!--
  <para>Unfortunately, you cannot make the FAQ at the start of the
  project.  Good FAQs are not written, they are grown.  They are by
  definition reactive documents, evolving over time in response to
  the questions people ask about the software.  Since it's impossible
  to correctly anticipate those questions, it is impossible to sit
  down and write a useful FAQ from scratch.</para>
-->
  <para>Desafortunadamente, no se puede hacer un FAQ al principio del
proyecto. Los buenos FAQs no son escritos, crecen. Son por definición
documentos reactivos, evolucionando con el tiempo como respuesta
a las preguntas que la gente hace. Ya que es imposible anticipar
correctamente esas preguntas, es imposible sentarse a escribir
un FAQ útil desde cero.</para>

<!--
  <para>Therefore, don't waste your time trying to.  You may, however,
  find it useful to set up a mostly blank FAQ template with just a few
  questions and answers, so there will
  be an obvious place for people to contribute questions and answers
  after the project is under way.  At this stage, the most important
  property is not completeness, but <emphasis>convenience</emphasis>:
  if the FAQ is easy to
  add to, people will add to it.  (Proper FAQ maintenance is a
  non-trivial and intriguing problem: see <xref
  linkend="faq-manager"/><phrase output="printed" >in
  <xref linkend="managing-volunteers"/></phrase>,
  <xref linkend="q-and-a-forums"/><phrase output="printed" >in
  <xref linkend="technical-infrastructure"/></phrase>, and <xref
  linkend="all-as-archives"/><phrase output="printed" >in <xref
  linkend="communications"/></phrase>.)</para>
-->

  <para>Así que, no hay que malgastar el tiempo en intentarlo. En cambio,
  podría ser útil crear una plantilla casi en blanco del FAQ con sólo
  algunas preguntas y respuestas, de forma que
  haya un lugar obvio donde las personas contribuyan con preguntas y
  respuestas después de que el proyecto esté en progreso. En ésta etapa
  lo más importante no es tenerlo todo completo, sino <emphasis>la
  conveniencia<emphasis>:
  si es sencillo agregar contenido al FAQ, la gente lo hará. (Un mantenimiento
  correcto de un FAQ es un problema no trivial e intrigante: Ver <xref
  linkend="faq-manager"/><phrase output="printed" > en el
  <xref linkend="managing-volunteers"/></phrase>,
  <xref linkend="q-and-a-forums"/><phrase output="printed" > en el
  <xref linkend="technical-infrastructure"/></phrase>, y <xref
  linkend="all-as-archives"/><phrase output="printed" > en el <xref
  linkend="communications"/></phrase>.)</para>
</sidebar>

<sect3 id="documentation-availability">
<title>Disponibilidad de la documentación</title>

<!--
<para>Documentation should be available from two places: online
(directly from the web site), <emphasis>and</emphasis> in the
downloadable distribution of the software (see
<xref linkend="packaging"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>).  It needs to be
online, in browsable form, because people often read documentation
<emphasis>before</emphasis> downloading software for the first time,
as a way of helping them decide whether to download at all.  But it
should also accompany the software, on the principle that downloading
should supply (i.e., make locally accessible) everything one needs to
use the package.</para>
-->
<para>La documentación debe ser accesible desde dos sitios:
en línea (directamente desde el sitio web), <emphasis>y</emphasis>
en la distribución descargable de la aplicación (consultar
<xref linkend="packaging" /><phrase output="printed"> en el 
<xref linkend="development-cycle" /></phrase>). Debe estar
en línea y navegable porque a menudo se lee la
documentación <emphasis>antes</emphasis> de descargar el
programa por primera vez, como una ayuda en la decisión de
descargarlo o no. Pero también debe acompañar al programa,
bajo la premisa de que la descarga debe suministrar todo lo
necesario para utilizar el paquete.</para>

<!--
<para>For online documentation, make sure that there is a link that
brings up the <emphasis>entire</emphasis> documentation in one HTML
page (put a note like "monolithic" or "all-in-one" or "single large
page" next to the link, so people know that it might take a while to
load).  This is useful because people often want to search for a
specific word or phrase across the entire documentation.  Generally,
they already know what they're looking for; they just can't remember
what section it's in.  For such people, nothing is more frustrating
than encountering one HTML page for the table of contents, then a
different page for the introduction, then a different page for
installation instructions, etc.  When the pages are broken up like
that, their browser's search function is useless.  The separate-page
style is useful for those who already know what section they need, or
who want to read the entire documentation from front to back in
sequence.  But this is not necessarily the most common way
documentation is accessed.  Often, someone who is basically
familiar with the software is coming back to search for a specific
word or phrase, and to fail to provide them with a single, searchable
document would only make their lives harder.</para>
-->
<para>Para la documentación en línea, hay que asegurarse de que hay
un enlace que muestra <emphasis>toda</emphasis> la documentación
en una página HTML (indicando algo como "monolito" o "todo-en-uno" o
"sólo un gran fichero" al lado del enlace, de tal manera que se sepa
que puede tardar un poco en cargar). Esto es muy útil porque a veces
sólo desean buscar una sola palabra o frase en la documentación.
Generalmente, las personas ya saben qué es lo que están buscando; sólo
que no recuerdan en cual sección está. Para estas personas, nada es más
frustrante que encontrar una página para la tabla de contenidos, luego
otra diferente para la introducción, luego otra diferente para las
instrucciones de instalación, etc. Cuando las páginas están divididas
de esta manera, la función de búsqueda de sus navegadores es inútil. Este
estilo de páginas separadas es útil para quienes ya saben cual es la
sección que necesitan, o que desean leer toda la documentación de
principio a fin en secuencia. Pero esta no es
la forma más común en que la documentación es leída. Ocurre más a menudo
que alguien que conoce algo básico de la aplicación vuelve para buscar
una palabra o frase. Fallar al suministrarles un sólo documento
en el que se puedan realizar búsquedas, es hacerles la vida más dura
</para>

</sect3>

<sect3 id="developer-documentation">
<title>Documentación para Desarrolladores</title>

<!--
<para>Developer documentation is written by programmers to help other
programmers
understand the code, so they can repair and extend it.  This is
somewhat different from the <emphasis>developer guidelines</emphasis>
discussed earlier, which are more social than technical.  Developer
guidelines tell programmers how to get along with each other;
developer documentation tells them how to get along with the code
itself.  The two are often packaged together in one document for
convenience (as with the <ulink
url="http://subversion.apache.org/docs/community-guide/"
>subversion.apache.org/docs/community-guide</ulink> example given
earlier), but they don't have to be.</para>
-->
<para>La documentación para los desarrolladores es escrita para ayudar
a los programadores a entender el código y puedan arreglarlo o extenderlo.
Esto es algo diferente a las <emphasis>pautas de desarrollo</emphasis>
discutidas anteriormente, que son más sociales que técnicas. Estas pautas
para los desarrolladores le dicen a los programadores como deben
desenvolverse entre ellos. La documentación les dice como deben
desenvolverse con el código en si mismo. Por conveniencia
las dos vienen juntas en un sólo documento (como sucede con el ejemplo
anterior <ulink url="http://subversion.apache.org/docs/community-guide/"
>subversion.apache.org/docs/community-guide</ulink>)
pero no es obligatorio.</para> 

<!--
<para>Although developer documentation can be very helpful, there's no
reason to delay a release to do it.  As long as the original authors
are available (and willing) to answer questions about the code, that's
enough to start with.  In fact, having to answer the same questions
over and over is a common motivation for writing documentation.  But
even before it's written, determined contributors will still manage to
find their way around the code.  The force that drives people to spend
time learning a code base is that the code does something useful for
them.  If people have faith in that, they will take the time to figure
things out; if they don't have that faith, no amount of developer
documentation will get or keep them.</para>
-->
<para>A pesar de que la documentación para los desarrolladores puede
ser de mucha ayuda, no existe ninguna razón para retrasar un lanzamiento
por hacerla. Es suficiente para empezar que los autores originales estén disponibles (y dispuestos)
a responder a preguntas sobre el código. De hecho,
tener que responder la misma pregunta varias veces es una motivación 
muy común para escribir dicha documentación. Pero antes de que sea escrita,
determinados contribuyentes serán capaces de desenvolverse con el código ya
que la fuerza que hace que las persones utilicen su tiempo en leer
el código base es que éste código les resulta útil. Si las personas tienen
fé en ello, ninguna cantidad de documentación hará que vengan o los
mantendrá.</para>

<!--
<para>So if you have time to write documentation for only one
audience, write it for users.  All user documentation is, in effect,
developer documentation as well; any programmer who's going to work on
a piece of software will need to be familiar with how to use it too.
Later, when you see programmers asking the same questions over and
over, take the time to write up some separate documents just for
them.</para>
-->
<para>Así que si hay tiempo para escribir documentación sólo para una
audiencia, que sea para los usuarios. Toda la documentación para los
usuarios es, en efecto, documentación para desarrolladores también. 
Cualquier programador que vaya a trabajar en un proyecto
necesita estar familiarizado con su uso. Luego, cuando se vea a
los programadores preguntando las mismas preguntas una y otra vez,
habrá que tomarse el tiempo de escribir algunos documentos aparte
sólo para estos.</para>

<!--
<para>Some projects use wikis for their initial documentation, or even
as their primary documentation.  In my experience, this works best
if the wiki is actively maintained by a few people who agree on how
the documentation is to be organized and what sort of "voice" it
should have.  See
<xref linkend="wikis"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for
more.</para>
-->
<para>Algunos proyectos utilizan wikis para su documentación inicial o
incluso para su documentación principal. En mi experiencia, esto es efectivo
si y sólo si, el wiki es editado activamente por algunas personas que se
ponen de acuerdo en como la documentación debe ser organizada y la voz
que debe tener. Más en <xref linkend="wikis"/><phrase output="printed">
en el <xref linkend="technical-infrastructure"/></phrase>.</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<!-- For link compatibility with the old section ID. -->
<anchor id="example-output" />
<title>Demos, Capturas de Pantalla, Videos y Ejemplos de Salidas</title>

<!-- For link compatibility with an old sidebar ID. -->
<anchor id="screenshots" />

<!--
<para>If the project involves a graphical user interface, or if it
produces graphical or otherwise distinctive output, put some samples
up on the project web site.  In the case of interface, this means
screenshots or, better yet, a brief (4 minutes or fewer) video with
subtitles or a narrator.  For output, it might be screenshots or just
sample files to download.  For web-based software, the gold standard
is a demo site, of course, assuming the software is amenable to
that.</para>
-->
<para>Si el proyecto incluye una interfaz gráfica de usuario, o si
produce una salida gráfica o alguna salida peculiar, coloca algunas
muestras en el sitio web del proyecto. En el caso de la interfaz, esto
significa capturas o, mejor aún, un breve video (de 4 minutos o menos)
con subtítulos o un narrador. Para la salida, podría ser capturas de
pantalla o sólo archivos de ejemplo para descargar. Para el software
basado en web, el patrón de oro es un sitio de demostración, por
supuesto, asumiendo que el software se presta para eso.</para>

<!--
<para>The main thing is to cater to people's desire for instant
gratification in the way they are most likely to expect.  A single
screenshot or video can be more convincing than paragraphs of
descriptive text and mailing list chatter, because it is proof
that the software <emphasis>works</emphasis>.  The code may still be
buggy, it may be hard to install, it may be incompletely documented,
but image-based evidence shows people that if one puts in enough effort,
one can get it to run.</para>
-->
<para>Lo principal es atender el deseo de gratificación que tiene la
gente de la manera más probable que ellos puedan esperar. Una sola
pantalla o video pueden ser más convincente que párrafos de texto
descriptivo y charlas en listas de correo, ya que es una prueba de
que el software <emphasis>funciona</emphasis>. El código todavía puede
tener errores, puede ser difícil de instalar, puede estar documentado de
forma incompleta, pero la evidencia basada en la imagen muestra a la
gente que si uno pone en el esfuerzo suficiente, se puede conseguir que
se ejecute.</para>

<sidebar id="video-brevity">
  <title>Mantén Breves los Videos y <emphasis>Di</ emphasis> Son Breves</title>

<!--
  <para>If you have a video demonstration of your project, keep the
  video under 4 minutes long, and make sure people can see the
  duration <emphasis>before</emphasis> they click on it.  This is in
  keeping with the "principle of scaled presentation" mentioned
  earlier: you want to make the decision to watch the video an easy
  one, by removing all the risk.  Visitors are more likely to click on
  a link that says "Watch our 3 minute video" than on one that just
  says "Watch our video", because in the former case they know what
  they're getting into before they click&nbsp;&mdash;&nbsp;and they'll
  watch it better, because they've mentally prepared the necessary
  amount of commitment beforehand, and so won't tire mid-way
  through.</para>
-->

  <para>Si tienes un video de demostración de tu proyecto, mantén el
  video de 4 minutos de duración, y asegurate de que la gente pueda ver
  la duración <emphasis>antes</emphasis> de que haga clic en él. Esto
  va de acuerdo con el "principio de la presentación a escala"
  mencionada anteriormente: tienes que hacer que tomar la decisión de
  ver el video sea fácil, eliminando todos los riesgos. Los visitantes
  son más propensos a hacer clic en un enlace que dice "Mira nuestro
  video de 3 minutos" que en uno que sólo dice "Mira nuestro video",
  porque en el primer caso saben en lo que se están metiendo antes de
  hacer clic&nbsp;&mdash;&nbsp;y van a verlo mejor, porque han
  preparado mentalmente de antemano la cantidad necesaria de
  compromiso, por lo que no se cansan a mitad de camino.</para>

<!--
  <para>As to where the four-minute limit came from: it's a scientific
  fact, determined through many attempts by the same experimental
  subject (who shall remain unnamed) to watch project videos.  The
  limit does not apply to tutorials or other instructional material,
  of course; it's just for introductory videos.</para>
  <para>In case you don't already have preferred software for
  recording desktop interaction videos: I've had good luck with
  <filename>gtk-recordmydesktop</filename> on Debian GNU/Linux, and
  then the <filename>OpenShot</filename> video editor for post-capture
  editing.</para>
-->

  <para>En relación a el límite de cuatro minutos y de donde viene: es
  un hecho científico, determinado a través de muchos intentos por parte
  del mismo sujeto experimental (que permanecerá sin nombre) para ver
  videos de proyectos. Este límite no se aplica a tutoriales u otros
  materiales de instrucción, por supuesto; es sólo para los vídeos
  introductorios.</para>
  <para>En caso de que no tengas un software preferido para la grabación
  de vídeos de interacción de escritorio: He tenido buena suerte
  con <filename>gtk-recordmydesktop</filename> en Debian GNU/Linux, y
  luego el editor de videos <filename>OpenShot</filename> para la edición
  posterior a la captura.</para>
</sidebar>
  
</sect2>

<!--
<para>There are many other things you could put on the project web
site, if you have the time, or if for one reason or another they are
especially appropriate: a news page, a project history page, a related
links page, a site-search feature, a donations link, etc.  None of
these are necessities at startup time, but keep them in mind for the
future.</para>
-->
<para>Existen muchas otras cosas que se pueden poner en el sitio web
del proyecto, si se tiene el tiempo, o si por alguna razón u otra
son especialmente apropiadas: página de noticias, historia,
enlaces relacionados, función de búsqueda, enlace para donaciones, etc.
Ninguno de estos es necesarios al principio, pero hay que tenerlos en
mente para el futuro.</para>

<sect2 id="hosting">
<title>Hosting</title>

<!-- For link compatibility with the old section id. -->
<anchor id="starting-with-canned-hosting" />
<!--
<para>Where on the Internet should you put the project's materials?</para>
-->
<para>¿Dónde en Internet hay que poner los materiales del proyecto?</para>

<!--
<para>A web site, obviously&nbsp;&mdash;&nbsp;but the full answer
is a little more complicated than that.</para>
-->
<para>Un sitio web, obviamente&nbsp;&mdash;&nbsp;pero la respuesta
completa es un poco más complicada que esa.</para>

<!--
<para>Many projects distinguish between their primary public user-facing
web site&nbsp;&mdash;&nbsp;the one with the pretty pictures and the
"About" page and the gentle introductions and videos and guided tours
and all that stuff&nbsp;&mdash;&nbsp;and their developers' site, where
everything's grungy and full of closely-spaced text in monospace fonts
and impenetrable abbreviations.</para>
-->
<para>Muchos proyectos distinguen entre su sitio web público primario de
cara al usuario&nbsp;&mdash;&nbsp;el que tiene las fotos bonitas y la
página "Acerca de..." y las presentaciones suaves y videos y visitas
guiadas y todo eso&nbsp;&mdash;&nbsp;y sus sitio para desarrolladores,
donde todo está sucio y lleno de texto estrechamente espaciado en fuentes
de espacio sencillo y abreviaturas impenetrables.</para>

<!--
<para>Well, I exaggerate.  A bit.  In any case, in the early stages of
your project it is not so important to distinguish between these two
audiences.  Most of the interested visitors you get will be
developers, or at least people who are comfortable trying out new
code.  Over time, you may find it makes sense to have a user-facing
site (of course, if your project is a code library, those "users"
might be other programmers) and a somewhat separate collaboration area
for those interested in participating in development.  The
collaboration site would have the code repository, bug tracker,
development wiki, links to development mailing lists, etc.  The two
sites should link to each other, and in particular it's important that
the user-facing site make it clear that the project is open source and
where the open source development activity can be
found.<footnote><para>As of August 2013, a good example of a project
with separate but cross-linked primary and developer sites is the
Ozone Widget Framework: compare their main user-facing site at <ulink
url="http://www.ozoneplatform.org/" >ozoneplatform.org</ulink> with
their development area at <ulink
url="https://github.com/ozoneplatform/owf"
>github.com/ozoneplatform/owf</ulink>.</para></footnote></para>
-->

<para>Bueno, estoy exagerando. Un poco. En cualquier caso, en las
primeras etapas de tu proyecto, no es tan importante distinguir entre
estos dos tipos de público. La mayoría de los visitantes interesados
que consigues son los desarrolladores, o por lo menos la gente que se
sienten cómodos probando nuevo código. Con el tiempo, puede que tenga
sentido tener un sitio de cara a los usuarios (por supuesto, si tu
proyecto es una biblioteca de código, los "usuarios" podrían ser otros
programadores) y un área de colaboración algo distinto para los
interesados ​​en participar en el desarrollo. El sitio de colaboración
tendría el repositorio de código, gestor de fallos, wiki desarrollo,
enlaces a listas de correo de desarrollo, etc. Los dos sitios deben
unirse entre sí, y, en particular, es importante que el sitio
orientado al usuario deje en claro que el proyecto es código abierto
y dónde se puede encontrar la actividad de desarrollo de ese código
abierto<footnote><para>A partir de agosto de 2013, un buen ejemplo
de un proyecto con los sitios primarios y de desarrolladores
independientes pero bien vinculados es el Ozone Widget Framework:
comparar su sitio principal orientado al usuario en <ulink
url="http://www.ozoneplatform.org/">ozoneplatform.org</ulink>, con su
área de desarrollo en <ulink
url="https://github.com/ozoneplatform/owf"
>github.com/ozoneplatform/spf</ulink>.</para></footnote></para>

<!--
<para>In the past, many projects set up the developer site and
infrastructure themselves.  Over the last decade or so, however, most
open source projects&nbsp;&mdash;&nbsp;and almost all the new
ones&nbsp;&mdash;&nbsp;just use one of the "canned hosting" sites that
have sprung up to offer these services for free to open source
projects.  By far the most popular such site, as of this writing in
mid-2013, is <ulink url="https://github.com/" >GitHub.com</ulink>, and
if you don't have a strong preference about where to host, you should
probably just choose GitHub; many developers are already familiar with
it and have personal accounts there.  <xref
linkend="canned-hosting"/><phrase output="printed"> in <xref
linkend="technical-infrastructure"/></phrase> has a more detailed
discussion of the questions to consider when choosing a canned hosting
site, and an overview of the most popular ones.</para>
-->

<para>En el pasado, muchos proyectos crearon su sitio de
desarrolladores y la infraestructura por sí mismos. Durante la última
década, sin embargo, la mayoría de los proyectos de código
abierto&nbsp;&mdash;&nbsp;y casi todos los nuevos&nbsp;&mdash;&nbsp;sólo
tienen que utilizar uno de los sitios de "alojamiento enlatado" que han
surgido para ofrecer estos servicios de forma gratuita a proyectos de
código abierto. Con mucho, el más popular de estos sitios, mientras
escribo esto, a mediados de 2013, es <ulink url="https://github.com/"
>GitHub.com</ulink>, y si usted no tiene una fuerte preferencia sobre
dónde alojar, probablemente debería simplemente elegir GitHub; muchos
desarrolladores ya están familiarizados con él y tienen cuentas
personales allí. <xref linkend="canned-hosting"/><phrase output="printed">
en <xref linkend="technical-infrastructure"/></phrase> tiene una discusión
más detallada de las cuestiones a considerar al elegir un sitio de
alojamiento enlatado, y un resumen de los más populares.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<title>Escogiendo una licencia y Aplicándola</title>

<!--
<para>This section is intended to be a very quick, very rough guide to
choosing a license.  Read <xref linkend="legal"/> to understand
the detailed legal implications of the different licenses, and how the
license you choose can affect people's ability to mix your software
with other software.</para>
-->
<para>Esta sección está concebida para ser una guía rápida y amplia
sobre como escoger una licencia. Leed el <xref linkend="legal"/> para entender
en detalle las implicaciones legales de diferentes licencias y como la
licencia escogida puede afectar la capacidad de otras personas
de mezclar el programa con otro software.</para>

<sidebar id="fsf-and-osi-approved">
  <title>Sinónimos: "licencia de software libre", "aprobadas por la
  FSF", "licencia de fuente abierta", y "aprobadas por la OSI"</title>

<!--
  <para>The terms "free software license" and "open source license"
  are essentially synonymous, and I treat them so throughout this
  book.</para>
-->
  <para>Los términos "licencia de software libre" y "licencia de
  fuente abierta" son esencialmente sinónimos, y los trato así a lo
  largo de este libro.</para>

<!--
  <para>Technically, the former term refers to licenses confirmed by
  the Free Software Foundation as offering the "four freedoms"
  necessary for free software (see <ulink
  url="http://www.gnu.org/philosophy/free-sw.html"
  >gnu.org/philosophy/free-sw.html</ulink>), while the latter term refers
  to licenses approved by the Open Source Initiative as meeting the
  Open Source Definition (<ulink url="http://opensource.org/osd"
  >opensource.org/osd</ulink>).  However, if you read the FSF's
  definition of free software, and the OSI's definition of open source
  software, it becomes obvious that the two definitions delineate the
  same freedoms&nbsp;&mdash;&nbsp;not surprisingly, as <xref
  linkend="free-vs-open-source"/><phrase output="printed"> in <xref
  linkend="introduction"/></phrase> explains.  The inevitable, and in
  some sense deliberate, result is that the two organizations have
  approved the same set of licenses.<footnote><para>There are actually
  some minor differences between the sets of approved licenses, but
  they are not significant for our purposes&nbsp;&mdash;&nbsp;or
  indeed for most practical purposes.  In some cases, one or the other
  organization has simply not gotten around to considering a given
  license, usually a license that is not widely-used anyway.  And
  apparently (so I'm told) there historically was a license that at
  least one of the organizations, and possibly both, agreed fit one
  definition but not the other.  Whenever I try to get the details on
  this, though, I seem to get a different answer as to what that
  license was, except that the license named is always one that was
  not many people used anyway.  So today, for any license you are
  likely to be using, the terms "OSI-approved" and "FSF-approved" can
  be treated as implying each other.</para></footnote></para>
-->
</sidebar>

  <para>Técnicamente, el primer término se refiere a las licencias
  confirmadas por la Free Software Foundation como las que ofrecen las
  "cuatro libertades" necesarias para el software libre (vea <ulink
  url="http://www.gnu.org/philosophy/free-sw.html"
  >gnu.org/philosophy/free-sw.html</ulink>), mientras que el segundo
  término se refiere a las licencias aprobadas por el Open Source
  Initiative como las que cumplen la Definición de Open Source (<ulink
  url="http://opensource.org/osd">opensource.org/osd</ulink>). Sin
  embargo, si usted lee la definición de la FSF de software libre, y
  la definición de la OSI del software de código abierto, se hace
  evidente que las dos definiciones delinean las mismas
  libertades&nbsp;&mdash;&nbsp;no es sorprendente, como lo
  explica <xref linkend="free-vs-open-source"/><phrase output="printed">
  en el <xref linkend="introduction"/></phrase>. El resultado inevitable,
  y en cierto sentido deliberado, es que las dos organizaciones han
  aprobado el mismo conjunto de licencias.<footnote><para>En realidad,
  hay algunas diferencias menores entre los grupos de las licencias
  aprobadas, pero no son significativos para nuestros
  propósitos&nbsp;&mdash;&nbsp;o de hecho, a efectos prácticos. En
  algunos casos, una u otra organización simplemente no ha llegado a
  considerar una licencia determinada, por lo general una licencia que
  que no se utiliza ampliamente de todos modos. Y al parecer
  (eso me han dicho) hubo históricamente una licencia que, al menos,
  una de las organizaciones, y posiblemente ambas, acordó que encajaba
  una definición pero no la otra. Siempre que trato de obtener los
  detalles sobre esto, sin embargo, me parece que obtengo una
  respuesta diferente en cuanto a cuál era esa licencia, salvo que la
  licencia mencionada es siempre una que no tenía mucha gente
  utilizandola de todos modos. Así que hoy, para cualquier licencia
  que probablemente sea utilizada, los términos "aprobada por OSI" y
  "aprobada por la FSF" pueden ser tratados como que una implica la
  otra.</para></footnote></para>

<!--
<para>There are a great many free software licenses to choose from.
Most of them we needn't consider here, as they were written to satisfy
the particular legal needs of some corporation or person, and wouldn't
be appropriate for your project.  We will restrict ourselves to just
the most commonly used licenses; in most cases, you will want to
choose one of them.</para>
-->

<para>Existen muchas licencias libres de donde escoger. Muchas de ellas
no necesitamos tenerlas en consideración aquí, ya que han sido escritas
para satisfacer las necesidades legales específicas de alguna corporación
o persona, así que no serian apropiadas para nuestro proyecto. Por ello nos vamos a
restringir a las más usadas. En la mayoría de los casos, querrás escoger
una de ellas.</para>


<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<title>Las licencias "Haz lo que quieras"</title>

<para><emphasis>29 August 2013: If you're reading this note, then
you've encountered this subsection while it's undergoing substantial
revision; see <ulink url="http://producingoss.com/v2.html"
>producingoss.com/v2.html</ulink> for details.</emphasis>  TODO: is
MIT or BSD still really the best default, given the modern patent
landscape?  Would Apache-2.0 be better&nbsp;&mdash;&nbsp;but then what
about the FSF's claim of GPL-incompatibility?  Need to get some advice
here.</para>

<!--
<para>If you're comfortable with your project's code potentially being
used in proprietary programs, then use
an <firstterm>MIT/X-style</firstterm> license.  It is the simplest of
several minimal licenses that do little more than assert nominal
copyright (without actually restricting copying) and specify that the
code comes with no warranty.  See
<xref linkend="license-choosing-mit-x"/> for details.</para>
-->

<para>Si se está conforme con que el código del proyecto sea potencialmente
usado en programas propietarios, entonces se puede utilizar una licencia estilo
<firstterm>MIT/X</firstterm>. Es la más sencilla de muchas licencias mínimas
que no hacen más que declarar un copyright nominal (sin restringir la copia)
y especificar que el código viene sin ninguna garantía. Id a
<xref linkend="license-choosing-mit-x"/> para más detalles.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<title>La GPL</title>

<!--
<para>If you don't want your code to be used in proprietary programs,
use the GNU General Public License, version 3 (<ulink
url="http://www.gnu.org/licenses/gpl.html"
>gnu.org/licenses/gpl.html</ulink>).  The GPL is probably the most
widely recognized free software license in the world today.  This is
in itself a big advantage, since many potential users and contributors
will already be familiar with it, and therefore won't have to spend
extra time to read and understand your license.  See <xref
linkend="license-choosing-gpl"/><phrase output="printed"> in <xref
linkend="legal"/></phrase> for details.</para>
-->
<para>Si no desea que el código sea utilizado en aplicaciones propietarias
utilice la Licencia Pública General o GPL, versión 3 (<ulink
url="http://www.gnu.org/licenses/gpl.html"
>gnu.org/licenses/gpl.html</ulink>). La GPL es
probablemente la licencia para software libre más reconocida a nivel
mundial hoy en día. Esto es en si mismo una gran ventaja, ya que muchos
usuarios potenciales y voluntarios ya estarán familiarizados con ella,
por lo cual, no tendrán que invertir tiempo extra en leer y entender
la licencia utilizada. Más detalles en 
<xref linkend="license-choosing-gpl"/><phrase output="printed">
en el <xref linkend="legal"/></phrase>.</para>

<sidebar>
<!--
<para>If users interact with your code primarily over a
network&mdash;that is, the software is usually part of a hosted
service, rather than being distributed as a binary&mdash;then consider
using the <firstterm>GNU Affero GPL</firstterm> instead.  The AGPL is
just the GPL with one extra clause establishing network accessibility
as a form of distribution for the purposes of the license.  See <xref
linkend="gnu-affero-gpl"/><phrase output="printed"> in <xref
linkend="legal"/></phrase> for more.</para>
-->

<para>Si los usuarios interactúan con tu código, principalmente a
través de una red&mdash;es decir, el software es generalmente parte de
un servicio alojado, en lugar de ser distribuido como binario, entonces
considera el uso de la <firstterm>GNU Affero GPL</firstterm> en su lugar.
La AGPL es sólo la GPL con una cláusula adicional en la que se establece
la accesibilidad en la red como una forma de distribución a los efectos
de la licencia. Ver <xref linkend="gnu-affero-gpl"/><phrase
output="printed"> en el <xref linkend="legal"/></phrase> para más
información.</para>

</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<title>Cómo aplicar una licencia a nuestro software</title>

<!--
<para>Once you've chosen a license, you'll need to apply it to the software.</para>
-->
<para>Una vez que hayas elegido una licencia, tendrás que aplicarla
al software.</para>

<!--
<para>The first thing to do is state the license clearly on the
project's front page.  You don't need to include the actual text of
the license there; just give its name and make it link to the full
license text on another page.  That tells the public what license you
<emphasis>intend</emphasis> the software to be released
under&mdash;but it's not quite sufficient for legal purposes.  The
other step is that the software itself should include the
license.</para>
-->
<para>Lo primero que debes hacer es presentar la licencia claramente
en la primera página del proyecto. No es necesario incluir el texto
real de la licencia allí; sólo dar su nombre y hacer que enlace con el
texto de la licencia completa en otra página. Eso le dice al público
bajo cuál licencia <emphasis>pretende</emphasis> distribuirse el
software&mdash;pero esto no es suficiente para los efectos legales. El
otro paso es que el propio software debe incluir la licencia.</para>

<!--
<para>The standard way to do this is to put the full license text in a
file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>) included with the source code, and then
put a short notice in a comment at the top of each source file, naming
the copyright date, holder, and license, and saying where to find the
full text of the license.</para>
-->
<para>La manera estándar de hacer esto es poner el texto de la licencia
completa en un archivo llamado <filename>COPYING</filename> (o 
<filename>LICENSE</filename>) incluido con el código fuente, y luego
poner un pequeño anuncio en un comentario en la parte superior de cada
archivo fuente, mencionando la fecha de copyright, titular, y la licencia,
y diciendo dónde encontrar el texto completo de la licencia.</para>

<!--
<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>
-->
<para>Hay muchas variaciones de éste patrón, así que miraremos a un
sólo ejemplo. La GPL de GNU indica que se debe colocar un aviso como
éste al principio de cada fichero con código fuente:</para>

<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;
</screen>

<!--
<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename> or <filename>LICENSE</filename>, but
that's where it's usually put.  (You could change the above notice to
state that directly, but there's no real need to.)</para>
-->

<para>No dice específicamente que la copia de la licencia que recibió
junto con el programa se encuentra en el archivo
<filename>COPYING</filename>, o <filename>LICENSE</filename>, pero ahí
es donde se suele poner. (Puede cambiar el aviso anterior para
indicarlo directamente, pero no hay necesidad real de hacerlo)</para>

<!--
<para>In general, the notice you put in each source file does not have
to look exactly like the one above, as long as it starts with the same
notice of copyright holder and date<footnote><para>The date should
show the dates the file was modified, for copyright purposes.  In
other words, for a file modified in 2008, 2009, and 2013, you would
write "2008, 2009, 2013"&nbsp;&mdash;&nbsp;<emphasis>not</emphasis>
"2008-2013", because the file wasn't modified in most of the years in
that range.</para></footnote>, states the name of the license, and
makes clear where to view the full license terms.  It's always best to
consult a lawyer, of course, if you can afford one.</para>
-->
<para>En general, el aviso que se coloca en cada archivo fuente no tiene
que ser exactamente como la de arriba, siempre que se inice con el mismo
aviso de titular del copyright y fecha<footnote><para>La fecha debe
mostrar la fecha en que el archivo se modificó, para los propósitos de
derechos de autor. En otras palabras, para un archivo modificado en 2008,
2009 y 2013, podrías escribir "2008, 2009, 2013"&nbsp;&mdash;&nbsp;
<emphasis>no</emphasis> "2008-2013", ya que el archivo no ha sido
modificado en la mayoría de los años en ese rango.</para></footnote>,
indicar el nombre de la licencia, y dejar claro donde ver los términos
completos de la licencia. Siempre es mejor consultar a un abogado, por
supuesto, si es posible costear uno.</para>
</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<title>Ajustar el tono</title>

<!--
<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  For
example, if the project is being opened up after years of closed,
in-house development, its development processes will change, and you
will have to prepare the existing developers for that change.</para>
-->
<para>Hasta ahora hemos cubierto tareas que se hacen sólo una vez durante
el proyecto: escoger la licencia, acomodar el sitio web inicial, etc. Pero
los aspectos más importantes al empezar un nuevo proyecto son dinámicos.
Escoger la dirección para la lista de correos es fácil; asegurarse de que
las conversaciones en ésta se mantengan en contexto y sean productivas
es otro tema. Por ejemplo, Si el proyecto es abierto después de años de
desarrollo cerrado propio, sus procesos de desarrollo cambiaran y habrá
que preparar a los desarrolladores existentes para éste cambio.</para>

<!--
<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>
-->
<para>Los primeros pasos son los más duros, porque los precedentes y las
expectaciones sobre la conducta futura aun no se han definido. La estabilidad
de un proyecto no viene de políticas formales, sino de un conocimiento colectivo
compartido muy difícil de definir y que se desarrolla con el tiempo. A veces
existen unas reglas escritas, pero tienden a ser un destilado de los
acuerdos intangibles y siempre cambiantes que realmente guían el proyecto.
Las políticas escritas no definen la cultura del proyecto mas que describirla,
he incluso así, sólo se aproximan.</para>

<!--
<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive for centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>
-->
<para>Hay algunas razones por las cuales las cosas funcionan de ésta manera.
El crecimiento y los grandes cambios no son tan dañinos para la acumulación
de las normas sociales como se puede pensar. Mientras que el cambio no
ocurra <emphasis>demasiado</emphasis> rápido, hay tiempo para que los novatos
aprendan como funcionan las cosas y después de que aprendan, ellos mismos
ayudaran a reforzar este funcionamiento. Consideremos cómo las canciones
infantiles sobreviven a lo largo de los siglos. Hay niños hoy en día cantando
casi las mismas rimas que los niños de hace cien años, aunque no haya ninguno
vivo hoy en día que haya vivido entonces. Los más pequeños escuchan estas
canciones de otros niños mayores y cuando son mayores, las cantarán frente
a otros niños menores que ellos. Conscientemente los niños no están iniciando un programa
de transmisión, por supuesto, pero la razón por la cual las canciones
sobreviven es nada más y nada menos porque son transmitidas regular y
repetidamente. La escala de tiempo de un proyecto de software libre
quizás no sea medido en siglos (aún no lo sabemos) pero las formas
de transmisión son las mismas. Aunque el índice de cambios es más rápido
y debe ser compensado con un esfuerzo deliberado de comunicación más activo.
</para>

<!--
<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; once
established, they will be largely self-perpetuating.</para>

-->
<para>A este esfuerzo le ayuda el hecho de que las personas por lo general
se presentan esperando y buscando normas sociales. Así es como los humanos
estamos construidos. En cualquier grupo unido por un mismo objetivo, las
personas que se unen, instintivamente buscan conductas las cuales
los marcarán como parte del grupo. El objetivo temprano de sentar precedentes
es hacer de esas conductas de grupo útiles para el proyecto; una vez
establecidas serán perpetuas por si mismas.</para>

<para>A continuación hay algunos ejemplos específicos de lo que se puede
hacer para establecer buenos precedentes. No se supone que sea una lista
exhaustiva, mas es una ilustración de la idea de que establecer un ambiente
de colaboración desde el principio ayuda enormemente al proyecto. Físicamente,
cada desarrollador puede que trabaje en solitario, pero se puede hacer
mucho para hacerlo <emphasis>sentir</emphasis> como si todos estuviesen
trabajando juntos en la misma habitación. Mientras mayor sea ésta sensación
mayor será el tiempo que quieran invertir en el proyecto. He escogido estos
ejemplos en particular porque han surgido en el proyecto de Subversion
(<ulink url="http://subversion.tigris.org/"/>), en el cual participé y observé
desde sus inicios. Pero estas no son únicas a Subversion, situaciones como estas
surgen en casi todos los proyectos open source, y deben ser tomadas
como oportunidades para empezar de la manera correcta.</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<!--
<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.apache.org/" >subversion.apache.org</ulink>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>
-->

<para>A continuación hay son algunos ejemplos de cosas que puedes hacer
para establecer buenos precedentes. No están pensados ​​como una lista
exhaustiva, sólo como ilustraciones de la idea de que establecer un
temprano estado de ánimo de colaboración ayuda a un proyecto
tremendamente. Físicamente, cada desarrollador puede trabajar solo en
una habitación por sí mismo, pero se puede hacer mucho para que ellos
se <emphasis>sientan</emphasis> como que están todos trabajando juntos
en la misma habitación. Cuanto más se sientan de esta manera, más tiempo
querrán invertir en el proyecto. Elegí estos ejemplos particulares,
porque surgieron en el proyecto Subversion (<ulink
url="http://subversion.apache.org/">subversion.apache.org</ulink>),
en el cual he participado y he observado desde su inicio. Pero no son
exclusivos de Subversion; situaciones como estas se van a plantear en la
mayoría de los proyectos de código abierto, y debe ser visto como una
oportunidad para empezar las cosas con el pie derecho.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<title>Evitar discusiones privadas</title>

<!--
<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>
-->
<para>Incluso después de haber hecho público el proyecto, usted
y los otros fundadores del proyecto se encontrarán a menudo intentado
resolver preguntas difíciles vía comunicaciones privadas dentro
de un circulo interno. Esto es especialmente cierto en los primeros
días del proyecto, cuando hay tantas decisiones importantes que tomar 
y usualmente pocos voluntarios cualificados para resolverlas. Todas
las obvias desventajas de una lista pública de discusión se perfilan
palpablemente frente a ti: el retraso inherente en las conversaciones
por correo, la necesidad de dejar que se forme un consenso, las
dificultades de tratar con voluntarios crédulos que piensan
que entienden todos los problemas pero que no es así (todo proyecto
tiene de estos; a veces son el voluntario estrella del próximo año,
a veces permanecen ingenuas durante el resto del proyecto), la persona
que no puede entender por qué quieres resolver el problema X cuando
es obviamente una parte del más grande problema Z y muchos otros.
La tentación de tomar decisiones a puerta cerrada y presentarlas como
<foreignphrase>faits accomplis</foreignphrase>, o al menos como
firmes recomendaciones de un bloque unido e influyente serian
geniales la verdad.</para>

<!--
<para>Don't do it.</para>
-->
<para>No lo hagas.</para>

<!--
<para>As slow and cumbersome as public discussion can be, it's
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious contributor would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:
-->
<para>Por muy lentas y engorrosas que puedan ser las discusiones publicas,
casi siempre son preferibles a largo plazo. Tomar decisiones importantes
en privado es como esparcir repelente anti-voluntarios sobre el proyecto.
Ningún contribuidor serio se quedaría mucho tiempo en un ambiente
donde un consejo secreto toma todas las grandes decisiones. Además,
las discusiones publicas tienen efectos secundarios beneficiosos que
durarán más que cualquier pregunta técnica que fuese el problema:

<itemizedlist>
  <listitem>
<!--
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be lurking
        silently, gleaning information about the software.</para>
-->
  <para>La discusión ayudará a entrenar y educar a nuevos desarrolladores.
	Nunca se sabe cuantos ojos están viendo una conversación así;
	Incluso si muchas de las personas no participan, muchas podrían
	estar monitorizando silenciosamente, deduciendo información
	acerca de la aplicación.</para>
  </listitem>
  <listitem>
<!--
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
-->
  <para>La discusión te entrenará en el arte de explicar temas técnicos
	a personas que no están tan familiarizadas con el programa.
	Esta es una capacidad que requiere de práctica y no se puede
	entrenar hablando con personas que ya saben lo mismo que tu.</para>

  </listitem>
  <listitem>
<!--
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
-->
  <para>La discusión y sus conclusiones estarán disponibles en un
	archivo público para siempre, evitando que futuras discusiones
	caigan en los mismos problemas. Más en <xref linkend="using-archives"/>
	<phrase output="printed">en el <xref linkend="communications"/></phrase>.</para>
  </listitem>
</itemizedlist>

</para>

<!--
<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than you might intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and he was emphatic about
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>
-->
<para>Finalmente, existe la posibilidad de que alguien en la lista
haga una contribución real a la conversación, ingeniando una idea
nunca antes anticipada. Es difícil decir cuan probable es que esto
suceda; depende en la complejidad del código y el nivel de
especialización requerida. Pero si se me permite utilizar evidencia
anecdótica, apostaría a que esto es más probable de lo que podemos
esperar. En el proyecto Subversion, nosotros (los fundadores) creíamos
encontrarnos ante una serie compleja y profunda de problemas, en los
cuales habíamos estado pensando durante meses, y francamente,
dudábamos de que alguien en la recientemente creada lista de correos
fueses a dar alguna contribución útil a la discusión. Así que tomamos
el camino más fácil y empezamos a lanzar ideas técnicas a diestra
y siniestra en correos privados, hasta que alguien observando el
proyecto <footnote><para>No hemos llegado a la sección de los
agradecimientos aún, pero sólo para practicar lo que luego
voy a enseñar: el nombre del observador era Brian Behlendorf, y
él fue enfático acerca de la importancia de mantener todas las discusiones
públicas a menos de que existiera alguna necesidad de privacidad</para></footnote>
descubrió lo que estaba pasando y pidió que se moviera la discusión
a la lista pública. Torciendo un poco los ojos, lo hicimos&mdash;y fuimos
asombrados por la cantidad de comentarios inspiradores y sugerencias
que rápidamente resultaron. En muchos casos ofreciendo ideas que no se
nos habían ocurrido anteriormente. Al final resultó que había gente
<emphasis>muy</emphasis> inteligente en esa lista, sólo estaban
esperando el anzuelo apropiado. Es cierto que las discusiones
tomaron más tiempo de haberlas hechas en privado, pero eran mucho
más productivas, lo cual hacía que valiera la pena el tiempo extra.</para>

<!--
<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>
-->
<para>Sin entrar en generalizaciones como "el grupo es siempre más
listo que el individuo" (ya hemos conocido muchos grupos para
saberlo) debe ser apuntado que hay ciertas actividades en las que
un grupo sobresale. Las revisiones distribuidas masivas son una de estas.
Generar un gran número de ideas rápidamente es otra. La calidad de 
las ideas depende en la calidad del pensamiento que se ha aplicado
a estas, por supuesto, pero no vas a saber qué clase de pensadores
hay hasta que los estimules con problemas desafiantes.</para>

<!--
<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>
-->
<para>Naturalmente, hay discusiones que deben ser llevadas a cabo en
privado; a lo largo de éste libro veremos algunos ejemplos. Pero el
principio que debe guiar siempre es: <emphasis>Si no existe razón
alguna para que sea privada, debe ser pública.</emphasis></para>

<!--
<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion with you and
there's no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>
-->
<para>Hacer que esto suceda requiere acciones. No es suficiente con
simplemente asegurarse de que todos los comentarios van a la lista pública.
También hay que atenerse a las conversaciones privadas innecesarias en la
lista. Si alguien intenta iniciar una conversación privada contigo, y no existe
razón alguna para que así sea, entonces es de tu incumbencia el abrir
la discusión apropiada inmediatamente. Ni siquiera intentes comentar
el tema original hasta que se haya direccionado exitosamente la conversación
a un sitio público, o asegurado que el tema era necesariamente
privado. Si se hace esto consistentemente, las personas se darán cuenta
rápidamente y empezarań a utilizar los foros públicos por defecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<title>Cortar de Raíz la Mala Educación</title>

<!--
<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack as a separate issue unto itself,
separate from the technical content.</para>
-->
<para>Desde el primero momento de la existencia pública de un proyecto
se deberá mantener una política de tolerancia cero ante la mala educación
o las actitudes insultantes en los foros. Tolerancia cero no implica esfuerzos
técnicos per se. No se deben eliminar personas de la lista de correos
cuando ataquen a otros usuarios, o quitarles sus accesos para realizar
commits porque hayan hecho comentarios peyorativos. (En teoría, habría que
llegar a tomar estas acciones, pero sólo después de que todas las otras
vías hayan fallado&mdash;lo cual, por definición, no significa que sea
al principio del proyecto.) Tolerancia cero simplemente significa nunca
permitir que este tipo de conductas pasen desapercibidas. Por ejemplo,
cuando alguien envía un comentario técnico mezclado con un ataque
<foreignphrase>ad hominem</foreignphrase> contra otros desarrolladores
del proyecto, es imperativo que tu respuesta sea primero dirigida a ese
ataque <foreignphrase>ad hominem</foreignphrase> como un tema aparte,
aparte del tema técnico.</para>

<!--
<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>
-->
<para>Desafortunadamente es muy fácil y típico, que conversaciones
constructivas terminen en una guerra. Las personas dirán cosas en un
correo electrónico que nunca dirían cara a cara. Los temas de discusión
sólo ayudan a ampliar éste efecto: en cuestiones técnicas, la gente
cree a menudo que sólo existe una sola respuesta correcta para la
mayoría de las preguntas y que el desacuerdo ante la respuesta sólo
puede ser explicado por la ignorancia o la estupidez. Hay una corta
distancia entre llamar la propuesta técnica de alguien estúpida y
llamar a esa persona estúpida. De hecho, es difícil definir cuando
un debate técnico lo deja de ser y se convierte en ataques personales,
por lo cual una respuesta drástica y el castigo no son buenas ideas.
En su lugar, cuando creas que lo estas viviendo, envía un mensaje que
remarque la importancia de mantener la discusión amistosa, sin acusar
a nadie de ser deliberadamente venenoso. Este tipo de "política
amable" de mensajes tienen la desafortunada tendencia a parecer
consejos de un profesor de kindergarten sobre la buena conducta
en el aula:</para>

    <blockquote>
<!--
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>
-->
      <para><emphasis>Primero, vamos a dejar a un lado los comentarios
      (potenciales) ad hominem por favor; por ejemplo, decir que el diseño
      para la capa de seguridad de J es "simple e ignorante de los principios
      de la seguridad informática." Quizás sea cierto o no, pero en cualquier caso
      no es la manera de mantener una discusión. J hizo su propuesta de buena fe y
      estoy seguro de que M no deseaba insultar a J, pero las maneras han sido
      inadecuadas y lo único que deseamos es mantener las cosas constructivas.
      </emphasis></para>

<!--
      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
-->
      <para><emphasis>Ahora, vamos con la propuesta de J. Creo que J tenía razón
      en decir que...</emphasis></para>
    </blockquote>

<!--
<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.</para>
-->
<para>Por muy artificial que parezcan respuestas como estas, tienen
un efecto notable. Si se llama la atención constantemente acerca de
estas malas actitudes, pero no se pide una disculpa o conocimiento
de la parte ofensora, entonces se deja a la gente calmarse y mostrar
una mejor cara comportándose con más decoro la próxima vez&mdash;y lo
harán.</para>

<!--
<para>One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>
-->
<para>Uno de los secretos para hacer esto con éxito es nunca hacer de la discusión el tema
principal. Siempre debe ser tratado a parte, una breve introducción a la mayor parte
de tu respuesta. Hay que señalar que "aquí no hacemos las cosas de ésta manera" y luego continuar
con el tema real, de manera que no dejemos nada a lo que los demás puedan responder.
Si alguien protesta diciendo que no merecían ese reproche, simplemente hay que negarse
a entrar en una disputa sobre esto. O no respondas (si crees que sólo están liberando
tensión y que no requiere de una respuesta) o responde disculpándote por haber sobreactuado
y que es difícil detectar matices en el correo electrónico, y ahora de vuelta al tema principal.
Nunca insistas en un reconocimiento, público o privado, de alguien que se haya
comportado inadecuadamente. Si deciden por voluntad propia enviar una disculpa, genial, pero
solicitar que lo hagan en contra de su voluntad, sólo causará resentimiento.
</para>

<!--
<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>
-->
<para>
El objetivo principal es de hacer que la buena educación se vea como
una de las actitudes del grupo. Esto ayuda al proyecto, porque otros
desarrolladores pueden ser espantados (incluso de proyectos que les gustan
y en los que quieren ayudar) por una flame war. Quizás ni siquiera se llegue
a saber que han sido espantados; pueden estar merodeando las listas de correo,
descubrir que se necesita de un grueso pelaje para participar en el proyecto y
decidir en contra de involucrarse de cualquier manera. Mantener los foros
amistosos es una estrategia de supervivencia a largo plazo y es más
fácil mientras el proyecto siga siendo pequeño. Una vez sea parte
de la cultura general, no será necesario ser la única persona promocionando
esto. Será mantenido por todos.
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<title>Practicar Revisiones Visibles del Código</title>

<!--
<para>One of the best ways to foster a productive development
community is to get people looking at each others'
code&nbsp;&mdash;&nbsp;ideally, to get them looking at each others'
code <emphasis>changes</emphasis> as those changes arrive.
<firstterm>Commit review</firstterm> (sometimes just called
<firstterm>code review</firstterm>) is the practice of reviewing
commits as they come in, looking for bugs and possible
improvements.</para>
-->
<para>Una de las mejores formas de fomentar una comunidad
productiva de desarrollo es hacer que cada uno pueda ver el código
de los demás&nbsp;&mdash;&nbsp;idealmente, para conseguir que se
observen los <emphasis>cambios</emphasis> de código de cada uno
mientras llegan. La <firstterm>revisión de commits</firstterm>
(algunas veces llamada simplemente la <firstterm>revisión de
código</firstterm>) es la práctica de la revisar los cambios a
medida que entran, en busca de errores y posibles mejoras.</para>

<!--
<para>There are a couple of reasons to focus on reviewing changes,
rather than on reviewing code that's been around for a while.  First,
it just works better socially: when someone reviews your change, she
is interacting with work you did recently.  That means if she comments
on it right away, you will be maximally interested in hearing what she
has to say; six months later, you might not feel as motivated to
engage, and in any case might not remember the change very well.
Second, looking at what changes in a codebase is a gateway to looking
at the rest of the code anyway&nbsp;&mdash;&nbsp;reviewing a change
often causes one to look at the surrounding code, at the affected
callers and callees elsewhere, at related module interfaces,
etc.<footnote><para>None of this is an argument against top-to-bottom
code review, of course, for example to do a security audit.  But while
that kind of review is important too, it's more of a generic
development best practice, and is not as specifically relevant to
running an open source project as change-by-change review
is.</para></footnote></para>
-->

<para>Hay un par de razones para centrarse en la revisión de cambios,
en lugar de revisar el código que ha estado alrededor por un tiempo.
En primer lugar, simplemente funciona mejor socialmente: cuando alguien
revisa tu cambio, está interactuando con el trabajo que has hecho
recientemente. Esto significa que si comenta de inmediato, estarás
máximamente interesados ​​en escuchar lo que tiene que decir; seis meses
más tarde, podrías no sentirte tan motivado a participar, y en todo
caso puede ser que no recuerdes el cambio muy bien. En segundo lugar,
mirar lo que cambia en un código base es una puerta a mirar el resto del
código&nbsp;&mdash;&nbsp;la revisión de un cambios a menudo hace que uno
mire el código de alrededor, los llamados y receptores afectados en
otros lugares, las interfaces de modulos relacionadas,
etc.<footnote><para>Nada de esto es un argumento en contra de las
revisiones de código top-to-bottom (De arriba hacia abajo), por supuesto,
por ejemplo, para hacer una auditoría de seguridad. Pero si bien ese
tipo de revisión es importante también, es más bien una buena
práctica genérica, y no es tan relevante específicamente con respecto
a la ejecución de un proyecto de código abierto como lo es la revisión
cambio por cambio.</para></footnote></para>

<!--
<para>Commit review thus serves several purposes simultaneously.  It's
the most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
commit review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>
-->
<para>Revisar el código sirve varios propósitos simultáneamente. 
Es el ejemplo más obvio de revisión en nodos en el mundo del open source
y directamente ayuda a mantener la calidad del programa. Cada fallo
que se envía junto a un programa llego allí después de ser comprometido
y no haber sido detectado; es por esto que mientras más ojos estén
revisando los cambios, menos fallos serán empaquetados. Pero indirectamente,
las revisiones tienen también otro propósito: confirmar a las personas que
lo que hacen importa, porque obviamente nadie se tomaría el tiempo de 
revisar un cambio a menos que le importara su efecto. La gente realiza una
mejor labor cuando saben que otros van a tomarse el tiempo de evaluarla.
</para>

<!--
<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with another developer, and one of
us has made a commit, we take care not to do the review verbally in
the room, but to send it to the appropriate online review forum
instead.  Everyone benefits from seeing the review happen.  People
follow the commentary and sometimes find flaws in it; even when they
don't, it still reminds them that review is an expected, regular
activity, like washing the dishes or mowing the lawn.</para>
-->
<para>Las revisiones deben ser públicas. Incluso en las ocasiones en
que he estado sentado en el mismo espacio físico con otro
desarrollador, y uno de nosotros ha hecho un commit, nosotros nos
encargamos de no hacer la revisión verbalmente en la habitación, en
vez de eso la enviamos al foro de opinión en línea adecuado.
Todos se benefician de ver como sucede la revisión. La gente sigue
el comentario y a veces encuentra fallas en el; aun cuando no lo
hacen, todavía les recuerda que la revisión es una actividad
esperarada y regular, como lavar los platos o cortar el césped.</para>

<!--
<para>Some technical infrastructure is required to do change-by-change
review effectively.  In particular, setting up commit emails is
extremely useful.  The effect of commit emails is that every time
someone commits a change to the central repository, an email goes out
showing the log message and diffs (unless the diff is too large; see
<xref linkend="vc-vocabulary-diff"/>, in <xref
linkend="vc-vocabulary"/>).  The review itself might take place on a
mailing list, or in a review tool such as Gerrit or the GitHub "pull
request" interface.  See <xref linkend="commit-emails" /><phrase
output="printed" > in <xref linkend="technical-infrastructure"
/></phrase> for details.</para>
-->
<para>Se requiere cierta infraestructura técnica para hacer
eficazmente la revisión cambio por cambio. En particular, la creación
de correos de commits es extremadamente útil. El efecto de los correos
con los commits es que cada vez que alguien hace un cambio al
repositorio central, un correo electrónico se envía mostrando el
mensaje de registro y los diffs o diferencias (a menos que el diff sea
demasiado grande; ver <xref linkend="vc-vocabulary-diff"/>, en <xref
linkend="vc-vocabulary"/>). La revisión en sí puede tener lugar en una
lista de correo, o en una herramienta de revisión, como Gerrit o la
interfaz "pull request" de GitHub. Ver <xref inkend="commit-emails"
/><phrase output="printed"> en <xref
linkend="technical-infrastructure" /></phrase> para obtener más
información.</para>

<sect3 id="subversion-commit-review">
<title>Caso de Estudio</title>

<!--
<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one were particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.</para>
-->
<para>
En el proyecto Subversion, no hicimos de la revisión del código una
práctica regular. No existía ninguna garantía de que después de cada
commit éste sería revisado, aunque a veces alguien se interesa en un cambio
que se realiza sobre una parte del código en el que se tiene particular
interés. Fallos que deberían y podrían haber sido detectados, se colarón. 
Un desarrollador llamado Greg Stein, quien sabia la importancia de las
revisiones del código de trabajos anteriores, decidió que iba a ser él quien
diera el ejemplo revisando cada línea de <emphasis>uno y cada uno de los
commits</emphasis> que hayan llegado al repositorio. Cada vez que alguien envía
un cambio era seguido de un correo electrónico de Greg a las lista de los desarrolladores,
diseccionándolos, analizando posibles problemas y ocasionalmente elogiando
ingeniosas piezas de código. De ésta manera, estaba atrapando fallos y prácticas
poco óptimas de programación que de otra manera habrían pasado desapercibidas.
Deliberadamente, nunca se quejó de ser la única persona revisando cada commit,
a pesar de que esto le tomaba una gran cantidad de tiempo, pero siempre
alababa las revisiones de código cada vez que tenía oportunidad. Muy pronto,
otros, yo incluso, empezamos a revisar los cambios regularmente también.</para>

<!--
<para>What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>
-->
<para>¿Cuál
era nuestra motivación? No había sido porque Greg conscientemente nos avergonzó
hacia esto. Nos había probado que revisar el código era una manera muy valiosa
de utilizar nuestro tiempo y que se podía contribuir tanto al proyecto revisando
los cambios de otros como escribiendo código nuevo. Una vez demostrado esto,
se volvió una conducta anticipada, hasta el punto en el que cada commit
que no generaba alguna reacción hacía que quien la realizaba se preocupara
e incluso que preguntase a la lista si alguien había tenido la oportunidad
de revisarlo aun. Luego, Greg consiguió un trabajo que no le dejaba mucho tiempo
libre para Subversion y tuvo que dejar de hacer revisiones regulares. Pero llegados
a éste punto, el habito se había integrado en el resto de nosotros tanto, que parecía
como algo que se hacía desde tiempos inmemoriables.
</para>

</sect3>

<!--
<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>
-->
<para>Hay que empezar a realizar las revisiones desde el primer commit. El tipo
de problemas que son más fáciles de descubrir con sólo revisar las diferencias
son las vulnerabilidades de seguridad, desbordamientos de memoria, comentarios
insuficientes o documentación del API, errores <foreignphrase>off-by-one</foreignphrase>,
emparejamientos mal hechos y otros problemas que requieren de un mínimo de contexto
para encontrar. Aunque incluso problemas a larga escala como el fallar en abstraer
patrones repetitivos a un sólo sitio sólo se pueden descubrir después de llevar
mucho tiempo realizando revisiones regularmente, porque el recuerdo de diferencias
anteriores ayuda a revisar las diferencias presentes.
</para>

<!--
<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood, that attention is being paid.  Of
course, code review does not absolve programmers of the responsibility
to review and test their changes before committing; no one should
depend on code review to catch things she ought to have caught on her
own.</para>
-->
<para>
No hay que preocuparse al no poder encontrar nada sobre lo que comentar
o de saber lo suficiente acerca de todas las áreas del código. Usualmente
habrá algo que decir sobre casi todos los cambios; incluso donde no hay nada
que criticar, se puede encontrar algo que elogiar. Lo importante es dejar
claro a cada programador, que lo que hacen es visto y entendido, que se
está prestando atención. Por supuesto, el revisar código no absuelve a
los desarrolladores de la responsabilidad de revisar y probar su código
antes de enviar los cambios; nadie debe depender de las revisiones para
encontrar cosas que debería haber encontrado por sí mismo.
</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="be-open-from-day-one">
<title>Se abierto desde el primer día</title>

<!--
<para>Start your project out in the open from the very first day.  The
longer a project is run in a closed source manner, the harder it is to
open source later.<footnote><para>This section started out as a blog
post, <ulink
url="http://blog.civiccommons.org/2011/01/be-open-from-day-one/"
>blog.civiccommons.org/2011/01/be-open-from-day-one</ulink>, though
it's been edited a lot for inclusion here.</para>
</footnote></para>
-->
<para>Comienza tu proyecto como algo abierto desde el primer día.
Cuanto más tiempo un proyecto se ejecuta en un modo de código cerrado,
más difícil es abrir el código más tarde.<footnote><para>Esta sección
comenzó como un blog, <ulink
url="http://blog.civiccommons.org/2011/01/be-open-from-day-one/"
>blog.civiccommons.org/2011/01/be-open-from-day-one</ulink>, aunque ha
sido editado mucho para su inclusión aquí.</para></footnote></para>

<!--
<para>Being open source from the start doesn't mean your developers
must immediately take on the extra responsibilities of community
management.  People often think that "open source" means "strangers
distracting us with questions", but that's
optional&nbsp;&mdash;&nbsp;it's something you might do down the road,
if and when it makes sense for your project.  It's under your control.
There are still major advantages to be had by running the project out
in open, publicly-visible forums from the beginning.  Conversely, the
longer the project is run closed-source, the more difficult it will be
to open up later.</para>
-->
<para>Ser de código abierto desde el principio no significa que los
desarrolladores deben tomar de inmediato las responsabilidades
adicionales de gestión de la comunidad. La gente suele pensar que
"fuente abierta" significa "extraños distrayendonos con preguntas",
pero eso es opcional&nbsp;&mdash;&nbsp;es algo que podrías hacer en el
futuro, siempre y cuando tenga sentido para tu proyecto. Está bajo tu
control. Todavía hay grandes ventajas que se tendrán al ejecutar el
proyecto en foros abiertos y visibles públicamente desde el principio.
Contrariamente, cuanto más tiempo el proyecto se ejecuta como código
cerrado, más difícil será para abrirlo más tarde.</para>

<!--
<para>I think there's one underlying cause for this:</para>
-->
<para>Creo que hay una causa subyacente para ello:</para>

<!--
<para>At each step in a project, programmers face a choice: to do that
step in a manner compatible with a hypothetical future open-sourcing,
or do it in a manner incompatible with open-sourcing.  And every time
they choose the latter, the project gets just a little bit harder to
open source.</para>
-->
<para>En cada paso de un proyecto, los programadores se enfrentan a una
elección: hacer ese paso de una forma compatible con una hipotética
apertura del código en el futuro, o lo hacen de una manera incompatible
con la apertura del código. Y cada vez que eligen la segunda, el
proyecto se vuelve un poco más difícil para liberar su código.</para>

<!--
<para>The crucial thing is, they can't help choosing the latter
occasionally&nbsp;&mdash;&nbsp;all the pressures of development propel
them that way.  It's very difficult to give a future event the same
present-day weight as, say, fixing the incoming bugs reported by the
testers, or finishing that feature the customer just added to the
spec.  Also, programmers struggling to stay on budget will inevitably
cut corners here and there (in Ward Cunningham's phrase, they will
incur "<ulink url="http://en.wikipedia.org/wiki/Technical_debt"
>technical debt</ulink>"), with the intention of cleaning it up
later.</para>
-->

<para>Lo crucial es, que ellos no pueden ayudar eligiendo la
última&nbsp;&mdash;&nbsp;todas las presiones de desarrollo los
impulsan por ese camino. Es muy difícil dar un evento futuro el mismo
peso que al día actual, por ejemplo, solucionar los errores entrantes
reportados por los probadores, o finalizar esa característica nueva
que el cliente acaba de agregar a la especificación. Además, los
programadores que luchan por mantenerse dentro del presupuesto
inevitablemente cortan las esquinas aquí y allá (en palabras de Ward
Cunningham, incurriren en una "<ulink
url="http://en.wikipedia.org/wiki/Technical_debt"
>deuda técnica</ulink>"), con la intención de solucionarlo más
tarde.</para>

<!--
<para>Thus, when it's time to open source, you'll suddenly find there
are things like:</para>
-->

<para>Por lo tanto, cuando llega el momento de abrir la fuente,
encontrarás de repente que hay cosas como:</para>

<itemizedlist>
-->
<!--
  <listitem>Customer-specific configurations and passwords checked
            into the code repository;</listitem>
-->
  <listitem>Configuraciones específicas del cliente y contraseñas
            controladas en el repositorio de código;</listitem>
<!--
  <listitem>Sample data constructed from live (and confidential)
            information;</listitem>
-->
  <listitem>Datos de ejemplo construidas a partir de información en
            tiempo real (y confidencial);</listitem>
<!--
  <listitem>Bug reports containing sensitive information that cannot
            be made public;</listitem>
-->
  <listitem>Informes de fallos que contienen información sensible que
            no puede hacerse pública;</listitem>
<!--
  <listitem>Comments in the code expressing perhaps overly-honest
            reactions to the customer's latest urgent request;</listitem>
-->
  <listitem>Comentarios en el código que expresan tal vez reacciones
            excesivamente honestas a última petición urgente del
            cliente;</listitem>

<!--
  <listitem>Archives of correspondence among the developer team, in
            which useful technical information is interleaved with
            personal opinions not intended for strangers;</listitem>
-->
<listitem>Archivos de correspondencia entre el equipo de desarrollo,
            en los que la información técnica de utilidad se intercala
            con opiniones personales no destinados a extraños;</listitem>
<!--
  <listitem>Licensing issues due to dependency libraries whose terms
            might have been fine for internal deployment (or not even
            that), but aren't compatible with open source
            distribution;</listitem>
-->
  <listitem>Temas sobre licencia debido a bibliotecas de dependencia
            cuyos términos podrían haber estado bien para la
            implementación interna (o ni siquiera eso), pero no son
            compatibles con la distribución de código abierto;</listitem>
<!--
  <listitem>Documentation written in the wrong format (e.g., that
            proprietary internal wiki your department uses), with no
            easy translation tool available to get it into formats
            appropriate for public distribution;</listitem>
-->
  <listitem>Documentación escrita en el formato incorrecto (por
            ejemplo, una wiki privativa interna que utiliza tu
            departamento), sin ninguna herramienta de traducción
            sencilla disponible para convertirla a formatos adecuados
            para su distribución pública;</listitem>
<!--
  <listitem>Non-portable build dependencies that only become apparent
            when you try to move the software out of your internal
            build environment;</listitem>
-->
  <listitem>Dependencias de construcción para no portables que sólo
            se manifiestan cuando intentas mover el software de su
            entorno de compilación interna;</listitem>
<!--
  <listitem>Modularity violations that everyone knows need cleaning
            up, but that there just hasn't been time to take care of
            yet...</listitem>
-->
  <listitem>Violaciónes modularidad que todo el mundo sabe que
            necesitan limpieza, pero que simplemente aún no ha
            habido tiempo para ocuparse de eso...</listitem>
<!--
  <listitem>(This list could go on.)</listitem>
-->
  <listitem>(La lista podŕia seguir)</listitem>
</itemizedlist>

<!--
<para>The problem isn't just the work of doing the cleanups; it's the
extra decision-making they sometimes require.  For example, if
sensitive material was checked into the code repository in the past,
your team now faces a choice between cleaning it out of the historical
revisions entirely, so you can open source the entire (sanitized)
history, or just cleaning up the latest revision and open-sourcing
from that (sometimes called a "top-skim").  Neither method is wrong or
right&nbsp;&mdash;&nbsp;and that's the problem: now you've got one
more discussion to have and one more decision to make.  In some
projects, that decision gets made and reversed several times before
the final release. The thrashing itself is part of the cost.</para>
-->
<para>El problema no es sólo el trabajo de hacer las limpiezas; es
la toma de decisiones extra que a veces se requieren. Por ejemplo, si
el material sensible se registró en el repositorio de código en el
pasado, su equipo se enfrenta ahora a una elección entre la limpieza de
las revisiones históricas por completo, por lo que puede abrir la fuente
de toda la historia (saneada), o simplemente la limpieza de la
última revisión y abriendo el código desde ahí (a veces llamado un
"top-skim"). Ningún método es correcto o incorrecto&nbsp;&mdash;&nbsp;y
ese es el problema: ahora usted tiene una discusión más a tener y una
decisión más que tomar. En algunos proyectos, la decisión es realizada e
devuelta varias veces antes de la versión final. La auto goleada es parte
del costo.</para>

<sect3 id="avoid-exposure-events">
<title>Esperar sólo crea un evento de exposición</title>

<!--
<para>The other problem with opening up a developed code base is that
it creates a needlessly large exposure event.  Whatever issues there
may be in the code (modularity corner-cutting, security
vulnerabilities, etc), they are all exposed to public scrutiny at
once&nbsp;&mdash;&nbsp;the open-sourcing event becomes an opportunity
for the technical blogosphere to pounce on the code and see what they
can find.</para>
-->
<para>El otro problema con la apertura de una base de código
desarrollado es que crea un evento de exposición innecesariamente grande.
Cualquiera que sea problema que pueda haber en el código (atajos de
modularidad, vulnerabilidades de seguridad, etc), todos ellos estarán
expuestos al escrutinio público a la vez&nbsp;&mdash;&nbsp;el evento de
apertura del código se convierte en una oportunidad para la blogosfera
técnica de abalanzarse sobre el código y ver lo que pueden
encontrar.</para>

<!--
<para>Contrast that with the scenario where development was done in
the open from the beginning: code changes come in one at a time, so
problems are handled as they come up (and are often caught sooner,
since there are more eyeballs on the code).  Because changes reach the
public at a low, continuous rate of exposure, no one blames your
development team for the occasional corner-cutting or flawed code
checkin.  Everyone's been there, after all; these tradeoffs are
inevitable in real-world development.  As long as the technical debt
is properly recorded in "FIXME" comments and bug reports, and any
security issues are addressed promptly, it's fine.  Yet if those same
issues were to appear suddenly all at once, unsympathetic observers
may jump on the aggregate exposure in a way they never would have if
the issues had come up piecemeal in the normal course of
development.</para>
-->

<para>Esto contrasta con el escenario donde el desarrollo se llevó a cabo
al aire libre desde el principio: los cambios de código vienen en uno a la
vez, así que los problemas se manejan a medida que surgen (y se atrapan
a menudo antes, ya que hay más ojos en el código). Dado que los cambios
llegan al público a una velocidad baja y constante de exposición, nadie
culpa a su equipo de desarrollo de los atajos ocasionales o chequeo
defectuoso del código. Todo el mundo ha estado allí, después de todo; estas
compensaciones son inevitables en el desarrollo del mundo real. Mientras la
deuda técnica sea registrada correctamente en los comentarios "FIXME" y
informes de errores, y los problemas de seguridad sean abordados prontamente,
está bien. Sin embargo, si esas mismas cuestiones hubieren aparecido
de repente todos a la vez, los observadores poco comprensivos pueden
saltar sobre la exposición global de una manera que nunca harían si los
problemas hubiesen surgido poco a poco en el curso normal del
desarrollo.</para>


<!--
<para>(These concerns apply even more strongly to government software
projects; see <xref linkend="starting-open-for-govs" /><phrase
output="printed" > in <xref linkend="governments-and-open-source"
/></phrase>.)</para>
-->
<para>(Estas preocupaciones se aplican incluso con más fuerza a los
proyectos de software de gobierno; ver <xref
linkend="starting-open-for-govs" /><phrase output="printed"> en el
<xref linkend="governments-and-open-source" /></phrase>)</para>

</sect3>

<!--
<para>The good news is that these are all unforced errors.  A project
incurs little extra cost by avoiding them in the simplest way
possible: by running in the open from Day One.</para>
-->
<para>La buena noticia es que estos son todos errores no forzados. Un
proyecto incurre en un pequeño coste adicional al evitarlos de la
manera más sencilla posible: mediante la ejecución abierta desde el
primer día.</para>

<!--
<para>"In the open" means the following things are publicly
accessible, in standard formats, from the first day of the project:
the code repository, bug tracker, design documents, user
documentation, wiki, and developer discussion forums. It also means
the code and documentation are placed under an open source license, of
course. It also means your team's day-to-day work takes place in the
publicly visible area.</para>
-->
<para>"Abierto", significa que las cosas siguientes son de
acceso público, en formatos estándar, desde el primer día del proyecto:
el repositorio de código, rastreador de errores, documentos de diseño,
documentación del usuario, wiki y foros de discusión para
desarrolladores. También significa que el código y la documentación se
encuentran bajo una licencia de código abierto, por supuesto. Significa
también que el trabajo del día a día de su equipo se lleva a cabo en una
zona visible públicamente.</para>

<!--
<para>"In the open" does not have to mean: allowing strangers to check
code into your repository (they're free to copy it into their own
repository, if they want, and work with it there); allowing anyone to
file bug reports in your tracker (you're free to choose your own QA
process, and if allowing reports from strangers doesn't help you, you
don't have to do it); reading and responding to every bug report
filed, even if you do allow strangers to file; responding to every
question people ask in the forums (even if you moderate them through);
reviewing every patch or suggestion posted, when doing so may cost
valuable development time; etc.</para>
-->
<para>"Abierto" no tiene por qué significar: permitir a extraños
comprobar el código en tu repositorio (son libres de copiar en su propio
repositorio, si quieren, y trabajar con él allí); permitiendo que
cualquiera pueda presentar informes de errores en su tracker (Eres libre
de elegir tu propio proceso de control de calidad, y si permitir
informes de extraños no te ayuda, no tienes que hacerlo); leer y
responder a todos los informes de errores presentada, incluso si
permites que extraños los creen; responder a cada pregunta que la gente
haga en los foros (incluso si son moderados); la revisión de cualquier
parche o sugerencia publicado, al hacerlo puede costar valioso tiempo
de desarrollo; etc.</para>

<!--
<para>One way to think of it is that you're open sourcing your code,
not your time.  One of those resources is infinitely replicable, the
other is not.  You'll have to determine the point at which engaging
with outside users and developers makes sense for your project.  In
the long run it usually does, and most of this book is about how to do
it effectively.  But it's still under your control.  Developing in the
open does not change this, it just ensures that everything done in the
project is, by definition, done in a way that's compatible with being
open source.</para>
-->

<para>Una forma de pensar en ello es que estás abriendo tu código, no
tu tiempo. Uno de esos recursos es infinitamente replicable, el otro no
los es. Vas a tener que determinar el punto en el que la participación
con los usuarios y los desarrolladores externos tiene sentido para tu
proyecto. A la larga lo tiene, y la mayor parte de este libro trata de
cómo hacerlo con eficacia. Pero está todavía bajo tu control.
Desarrollar de modo abierto no cambia esto, simplemente se asegura de
que todo lo hecho en el proyecto es, por definición, hecho de una
manera que sea compatible con ser de código abierto.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">

<title>Al abrir un proyecto cerrado, hay que ser sensible acerca de
la magnitud de los cambios</title>

<!-- TODO from hardcopy: Add a section or subsection on the mechanical
     details of how to open up a formerly closed project. -->

<!--
<para>As per <xref linkend="be-open-from-day-one" />, it's best to
avoid being in the situation of opening up a closed project in the
first place; just start the project in the open if you can.  But if
it's too late for that, and you find yourself opening up an existing
project that already has active developers accustomed to working in a
closed-source environment, make sure everyone understands that a big
change is coming&mdash;and make sure that you understand how it's
going to feel from their point of view.</para>
-->
<para>Según <xref linkend="be-open-from-day-one" />, lo mejor es
evitar estar en la situación de abrir por primera vez un proyecto
cerrado; comienza el proyecto siendo abierto, si puedes. Pero si es
demasiado tarde para eso, y te encuentras en la apertura de un proyecto
existente que ya tiene desarrolladores activos acostumbrados a trabajar
en un entorno de código cerrado, asegúrate de que todo el mundo
entiende que un gran cambio está llegando&mdash;y asegúrate de entender
cómo se va sentir desde su punto de vista.</para>

<!--
<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>
-->
<para>Intenta imaginar como la situación se presenta ante ellos: antes,
todas las decisiones sobre el código y diseño eran hechas con un grupo
de programadores quienes conocían el software más o menos al mismo nivel,
quienes compartían la misma presión de los mismos directores y quienes
conocían entre todos sus fuerzas y debilidades. Ahora se les pide que
expongan su código al escrutinio de extraños al azar, quienes formarán 
un juicio basado sólo en el código, sin la conciencia de las presiones
bajo las cuales se tomaron ciertas decisiones. Estos forasteros harán muchas
preguntas, preguntas que harán que los desarrolladores existentes se den
cuenta que la documentación en la que se han esclavizado tan duramente
<emphasis>sigue siendo</emphasis> inadecuada (esto es inevitable). Para
cerrar con broche de oro, todos estos forasteros son entidades desconocidas
y sin cara. Si alguno de los desarrolladores ya se siente de por si
inseguro sobre sus habilidades, imaginemos como éste sentimiento es
exacerbado cuando recién llegados empiezan a señalar fallos en el 
código que han escrito, y aun peor, frente a sus colegas.
A menos que se tenga un equipo con programadores perfectos, esto es
inevitable&mdash;de hecho, puede que le suceda a todos ellos al
principio. Esto no es porque sean malos programadores; es solo que todo
programa de cierto tamaño tiene fallos y una revisión distribuida 
descubrirá algunos de estos fallos ( Id a <xref linkend="code-review"/>
<phrase output="printed">anteriormente en éste capítulo</phrase>).
En algún momento, los recién llegados no serán sujetos a muchas revisiones
al principio, ya que no pueden contribuir con código hasta que estén
más familiarizados con el proyecto. Para tus desarrolladores, podrá
parecer que todas las críticas van hacia ellos y no por su parte. Por esto,
existe el peligro de que los viejos programadores se sientan asediados.
</para>

<!--
<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>
-->
<para>La mejor manera de prevenir esto, es advertir a todos acerca de
lo que se avecina, explicarlo, decirles que el desconcierto inicial
es perfectamente normal y asegurar que todo va a mejorar. Algunas de
estas advertencias deberán hacerse en privado, antes de que el proyecto
se haga público. Pero también puede llegar a ser útil recordarle a la
gente de las listas publicas que ésta es una nueva dirección en el
desarrollo del proyecto y que tomará algo de tiempo adaptarse. Lo mejor
que se puede hacer es enseñar con el ejemplo. Si no ves a tus
desarrolladores respondiendo suficiente preguntas a los nuevos, decirles que
deben responder más preguntas no será de gran ayuda. Quizás no tengan aún
una noción acerca de que requiere una respuesta y de que no, o puede
que no sepan como dar diferentes prioridades a escribir código y las
nuevas tareas de comunicación exterior. La manera de hacerlos
participantes es hacerlo uno mismo. Hay que estar en las listas
publicas y responder algunas preguntas. Cuando no se tenga la
experiencia necesaria en una materia para responder a una pregunta
entonces transfierela visiblemente a un desarrollador quien pueda
responderla&mdash;y vigila para asegurarte de que continua con
una respuesta. Naturalmente será tentador para los desarrolladores
más antiguos enfrascarse en discusiones privadas ya que a esto es
a lo que están acostumbrados. Asegurate de suscribirte a las listas
internas en las cuales estas discusiones puedan dar lugar, de manera
que puedas pedir que la discusión se continúe en las listas publicas
inmediatamente.</para>

<!--
<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="money"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>
-->
<para>Existen otros asuntos a largo plazo con abrir un proyecto cerrado.
<xref linkend="money"/> explora técnicas para mezclar
exitosamente desarrolladores asalariados y voluntarios y en <xref linkend="legal"/>
se discute la necesidad de ser diligente al abrir una base de código
que puede contener programas que han sido escritos o que pertenecen
a otras personas.</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<title>Anunciando</title>

<!--
<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.</para>
-->
<para>Una vez que el proyecto está presentable&mdash;no perfecto,
sólo presentable&mdash;se está listo para anunciarlo al mundo.</para>

<!--
<para>This is a simpler process than you might expect.  There are two kinds
of forums for making announcements: generic forums that display a
constant stream of new project announcements, and topic-specific
forums where your project would be appropriate news.</para>
-->
<para>Este es un proceso tan simple como se podría esperar. Hay dos
tipos de foros para hacer anuncios: foros genéricos que muestran un
flujo constante de nuevos anuncios de proyectos, y foros sobre temas
específicos donde su proyecto sería una noticia apropiada.</para>

<!-- TODO: erickcion: 2014/04/28 ####################################
     Continue updating translations from here to the end
-->

<!--
<para>The most useful generic place is probably <ulink
url="http://freecode.com/"
>freecode.com</ulink>&nbsp;&mdash;&nbsp;just click on the
<guimenuitem>Submit new project</guimenuitem> link in the top
navigation bar.  Freecode's list of recent new projects is embedded on
the front page of the popular <ulink url="http://slashdot.org/"
>Slashdot.org</ulink>, which means someone interested is likely to
notice it and help spread the news by word of mouth.  (Note that
Freecode was known as Freshmeat.net until it was renamed in Oct 2011.)
You might also want to register your project at <ulink
url="http://OhLoh.net/" >OhLoh.net</ulink>, which is the closest thing
there is to an integrated global database of free software projects
and their contributors.  (Some projects also successfully climb the
word-of-mouth / upvote tree to the point where they are featured on
the front page of <ulink url="http://news.ycombinator.com/"
>news.ycombinator.com</ulink>, one of the subreddit forums related to
<ulink url="http://www.reddit.com/r/technology/"
>reddit.com/r/technology</ulink>, or some similarly popular public
page.  While it's good news for your project if you can get mentioned
in a place like that, I hesitate to contribute to the marketing arms
race by suggesting any concrete steps to accomplish this.  Use your
judgement and try not to spam.)</para>
-->

<!--
<para>The topic-specific forums are probably where you'll get the most
interest.  Think about mailing lists or web frums where an
announcement of your project would be on-topic and of
interest&nbsp;&mdash;&nbsp;you might already be a member of some of
them&nbsp;&mdash;&nbsp;and post there.  Be careful to make exactly
<emphasis>one</emphasis> post per forum, and to direct people to your
project's own discussion areas for follow-up discussion (when posting
by email, you can do this by setting the
<systemitem>Reply-to</systemitem> header).  Your announcement should
be short and get right to the point, and the Subject line should make
it clear that it is an announcement of a new project:</para>
-->

<screen>
<!--
To: discuss@some.forum.about.search.indexers
Subject: [ANN] Scanley, a new full-text indexer project.
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites
   - (planned) Long-distance mind-reading

Requirements:
   - Python 3.2 or higher
   - SQLite 3.8.1 or higher

For more information, please come find us at scanley.org!

Thank you,
-J. Random
-->
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

Este es un sólo mensaje para anunciar la creación del proyecto
Scanley, un indexador y buscador de texto open source con
un extenso API para el uso de programadores quienes desean
crear servicios de búsqueda en grandes colecciones de
ficheros de texto. Scanley ejecuta, está siendo desarrollado
activamente y buscamos nuevos desarrolladores y testers.

Sitio Web: http://www.scanley.org/

Características:
   - Busca texto plano, HTML y XML
   - Búsqueda de palabras o frases
   - (planeado) Búsquedas borrosas
   - (planeado) Actualización incremental de los índices
   - (planeado) Indexación de sitios web remotos

Requerimientos:
   - Python 2.2 o mayor
   - Suficiente espacio en disco para contener los índices
     (aproximadamente dos veces el tamaño ocupado en disco)

Para más información, visitad scanley.org

Gracias
-J. Random
</screen>

<!--
<para>(See <xref linkend="publicity"/><phrase output="printed"> in
<xref linkend="communications"/></phrase> for advice on announcing
subsequent releases and other project events.)</para>

-->
<para>(Más información <xref linkend="publicity"/><phrase output="printed">
en<xref linkend="communications"/></phrase> para consejos sobre como
anunciar lanzamientos posteriores u otros eventos.)</para>

<!--
<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being announced even during the
design/discussion stage.  I used to think starting with running code
was crucial, that it was what separated successful projects from toys,
and that serious developers would only be attracted to software that
already does something concrete.</para>
-->
<para>Existe un debate en el mundo del software libre sobre si es
necesario empezar con código funcional o si el proyecto puede
empezar a beneficiarse aun cuando está en la fase de diseño y discusión.
Solía pensar que empezar con código funcional era el factor más importante,
que esto es lo que separaba proyectos exitosos de los juguetes y que
solo desarrolladores serios se verían atraídos que hacia algo
concreto ya.</para>

<!--
<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>
-->
<para>Esto resulto no ser del todo cierto. En el proyecto Subversion,
empezamos con un documento de diseño, un núcleo de desarrolladores
interesados e interconectados, mucha fanfarria y <emphasis>nada</emphasis>
de código funcional. Para mi completa sorpresa, el proyecto recibió
participantes activos desde el principio y para el momento en que
teníamos algo funcional ya habían unos cuantos desarrolladores
voluntarios involucrados profundamente. Subversion no es el único
ejemplo; el proyecto Mozilla también fue iniciado sin código
funcional y ahora es un navegador exitoso y popular.</para>

<!--
<para>On the evidence of this and other examples, I have to back away
from the assertion that running code is absolutely necessary for
launching a project.  Running code is still the best foundation for
success, and a good rule of thumb would be to wait until you have it
before announcing your project<footnote><para>Note that
<emphasis>announcing</emphasis> your project can come long after you
have open sourced the code.  My advice to consider carefully the
timing of your announcement should not be taken as advice to delay
open sourcing the code&nbsp;&mdash;&nbsp;ideally, your project should
be open source and publicly visible from the very first moment of its
existence, and this is entirely independent of when you announce it.
See <xref linkend="be-open-from-day-one"/> for
more.</para></footnote>.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>
-->
<para>En vista de ésta evidencia debo retirar mi afirmación sobre que
es necesario tener código funcional para lanzar un proyecto. EL código
funcional sigue siendo la mejor base para el éxito y una buena regla
del pulgar sería esperar a tener el código antes de anunciar el proyecto.
Por otra parte, pueden haber circunstancias cuando un anuncio temprano
puede tener sentido. Si creo que al menos un documento de diseño bien
desarrollado o algún otro tipo de marco de trabajo, es necesario&mdash;
claro que puede ser modificado en base a las respuestas publicas, pero
debe haber algo tangible, en el que las personas puedan hincar sus dientes.
</para>

<!--
<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>
-->
<para>Cuando sea que se anuncie un proyecto, no hay que esperar una horda
de voluntarios listos para unirse inmediatamente. Usualmente, el resultado
de anunciar es que se obtiene algunas preguntas casuales, algunas otras
personas se unen a la lista de correos y aparte de esto, todo continua
como antes. Pero con el tiempo, podréis notar un incremento gradual en
la participación tanto de usuarios como de nuevo código de voluntarios.
Anunciar es solo plantar una semilla, puede tomar un largo tiempo para
que la noticia se extienda. Si el proyecto recompensa constantemente
a quienes se involucran, las noticias se extenderán, pues la gente
desea compartir algo cuando han encontrado algo bueno. Si todo va bien,
la dinámica de las redes exponenciales de comunicación lentamente
transformaran el proyecto en una compleja comunidad donde no se conoce
el nombre de todos y no se puede seguir cada una de las conversaciones.
Los próximos capítulos son acerca de como trabajar en éste ambiente.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

