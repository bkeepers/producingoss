<chapter id="communications">

<title>Comunicaciones</title>

<simplesect>

<para>La capacidad de escribir claramente es quizás la más importante habilidad
que se puede tener en un ambiente de código abierto.  A largo plazo
es más importante que el talento para programar.  Un gran programador con pocas
habilidades comunicativas puede realizar sólo una cosa a la vez, y
puede tener problemas convenciendo a otros para que le presten atención.  Pero un mal
programador con buenas habilidades de comunicación puede coordinar y persuadir
mucha gente para realizar diferentes cosas, y de tal modo tener un
efecto significativo sobre la dirección y el ímpetu de un proyecto.</para>

<para>No parece haber mucha correlación, en cualquier sentido,
entre la capacidad de escribir buen código y la capacidad de comunicarse
con sus compañeros.  Hay cierta correlación entre
programar bien y describir bien cuestiones técnicas, pero describir
asuntos técnicos es sólo una pequeña parte de las comunicaciones en un
proyecto.  Más importante es la capacidad de enfatizar con su
audiencia, ver sus propios correos y comentarios como lo ven los demás, y
hacer que los demás vean sus propios correos con objetividad similar.
Igualmente importante es notificar cuando un medio o método
de comunicación determinado no está funcionando bien, quizás porque no escala al ritmo que
incrementa el número de usuarios, y tomar el tiempo para hacer algo
al respecto.</para>

<para>Aquello que es obvio en teoría y que se hace duro en la
práctica es que los ambientes de desarrollo de software libre son
desconcertadamente diversos tanto en audiencias como en mecanismos de
comunicación.  ¿Debería una opinión dada ser expresada en un mensaje a la
lista de correo, como una anotación en el gestor de fallos, o como un comentario
en el código?  Al contestar una pregunta en un foro público, ¿cuánto
conocimiento puedes asumir por parte del lector?, en primer lugar dado que "el
lector" no es el único que hizo la pregunta,
¿pueden todos ver tú respuesta?  ¿Como pueden los desarrolladores
permanecer en contacto constructivo con los usuarios, sin ser ahogado
por peticiones de características, informes falsos de fallos, y charla en general?  ¿Cómo
dices cuando un medio ha alcanzado los límites de su capacidad, y
que harías al respecto?</para>

<para>Las soluciones a estos problemas son usualmente parciales, ya que cualquier
solucion particular se vuelve finalmente obsoleta por el crecimiento del proyecto o 
los cambios en la estructura del mismo.  Son a menudo <foreignphrase>ad
hoc</foreignphrase>, ya que son respuestas improvisadas a situaciones 
dinámicas.  Todos los participantes necesitan darse cuenta de como y cuando
la comunicacion puede volverse farragosa, y deben estar implicados en 
buscar soluciones. Ayudar a la gente a hacer esto es una gran parte de la direccion en un proyecto
open source. Las secciones siguientes tratan sobre como conducir 
tu propia comunicacion y como hacer el mantenimiento de los mecanismos de 
comunicacion una prioridad para todo el mundo en el proyecto.<footnote><para>Se ha 
hecho alguna investigacion academica interesante en esta materia; por ejemplo,
vease <citetitle>Group Awareness in Distributed Software
Development</citetitle> por Gutwin, Penner, y Schneider (solia estar 
disponible on-line, pero parece que ha desaparecido, al menos
temporalmente; utiliza una herramienta de busqueda encontrarla).</para></footnote></para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="you-are-what-you-write">
<title>Tú eres lo que escribes</title>

<para>Considera esto: la única cosa que cualquier persona sabe de ti en
Internet viene de lo que tú escribes, o de lo que otros escriben acerca de ti.
Puedes ser brillante, perceptivo, y carismático en persona pero
si tus correos electrónicos son incoherentes y no estructurados, la gente asumirá
que esé es el verdadero tú.  O quizás realmente eres incoherente y
no estructurado en persona, pero nadie tiene por que saberlo, si tus mensajes
son claros e informativos.</para>

<para>Dedicar cierto cuidado a tu escritura valdrá enormemente la pena.
El veterano hacker de software libre Jim Blandy narra la siguiente
historia:</para>

<blockquote>
  <para>Por el año 1993 trabajaba para la Fundación de Software Libre,
  y estábamos llevando a cabo el beta-testing de la versión 19 de GNU Emacs.  Haríamos una 
  publicación beta más o menos cada semana, y la gente la probaría y nos enviaría 
  informes de error.  Había un chico que ninguno de nosotros conocía en 
  persona pero que hizo un gran trabajo: sus informes de error siempre fueron claros y 
  nos enfocaba hacia el problema y, cuando nos proporcionaba una corrección,
  casi siempre tenía razón.  Era un fuera de serie.</para>

  <para>Ahora, antes que la FSF pueda utilizar código escrito por alguien, hay que 
  realizar un papeleo legal para que el interés de esa persona hacia el copyright 
  del código pase a la FSF. Simplemente tomando el código de completos extraños 
  dejándolo dentro es una receta para el desastre legal.</para>

  <para>Por lo que le envié un correo al chico con los formularios diciéndole "Te envío algo de papeleo
  que necesitamos, esto es lo que significa, firmas este, haces que quien te tiene contratado 
  firme este otro y, entonces podemos comenzar a utilizar tus correcciones.  Muchas
  gracias."</para>

  <para>Me envió un mensaje de vuelta diciendo: "No trabajo para
  nadie."</para>

  <para>Por lo que le dije: "Bien, eso está bien, simplemente haz que firme tu universidad
  y envíamelo de vuelta."</para>

  <para>Después de un poco, me escribió de nuevo y me dijo: "Verás,
  realmente...  tengo trece años y vivo con mis padres."</para>
</blockquote>

<para>Debido a que ese chico no escribía como si tuviera trece años nadie
supuso que los tuviera. A continuación se exponen también algunas cosas que
conseguirán además que tu escritura de una buena impresión.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="structure-and-formatting">
<title>Estructura y formato</title>

<para>No caigas en la trampa de escribir todo como si fuera 
un mensaje de teléfono móvil.  Escribe frases completas, poniendo en mayúsculas 
la primera palabra de cada frase, y usando separaciones de párrafo donde 
sea necesario. Esto es lo más importante en correos electrónicos y otras composiciones.
En el IRC u otros foros efímeros similares, generalmente es correcto dejar de poner
mayúsculas, utilizar formas comprimidas o expresiones comunes, etc. Simplemente
no lleves esos hábitos a foros más formales o persistentes.
Correos electrónicos, documentación, informes de error y otras piezas de escritura que
suelen tener una larga vida deberían escribirse usando una gramática y 
una spelling estándar, y tener una estructura narrativa coherente. Esto 
no se debe a que haya algo inherentemente bueno siguiendo 
reglas arbitrarias, sino a que estas reglas 
<emphasis>no</emphasis> son arbitrarias: evolucionan en las formas presentes 
ya que hacen que el texto sea más leíble y, por esa razón, deberías 
seguirlas. La legibilidad no sólo es deseable para que 
la mayoría de gente entienda lo que escribes, sino porque hace que 
que parezcas la clase de persona que se toma su tiempo en comunicarse de una forma
clara: es decir, alguien a quien vale la pena prestar atención.</para>

<para>En particular, para correos electrónicos, desarrolladores experimientados de open source 
han decidido ciertas convenciones:</para>

<para>Envía correos solo de texto plano, no en HTML, texto enriquecido u otros formatos 
ya que podrían no ser leidos por lectores que leen sólo texto plano.  Formatea las líneas para 
que estén sobre las 72 columnas de largo.  No excedas las 80 columnas, que ha sido 
<foreignphrase>de facto</foreignphrase> el ancho estándar del terminal
(es decir, hay gente que utiliza terminales más anchos, pero nadie utiliza 
terminales no más estrechos).  Al hacer las líneas un poco 
<emphasis>menores</emphasis> de 80 columnas da cabida a unos cuantos 
niveles de caracteres de citado para ser añadidos en otras respuestas sin 
forzar un estrechamiento de tu texto.</para>

<para><emphasis>Utiliza saltos de línea reales.</emphasis> Algunos clientes de correo muestran
un falso formateo de línea, mientras estás escribiendo un correo, 
viéndose en la pantalla saltos de línea donde en realidad no los hay. Cuando se 
envía el correo, no tendrá los saltos de línea que se pensaba y se presentará
con un formato horroroso en la pantalla de la gente.  Si tu cliente de correo  
muestra falsos saltos de línea, busca posibilidad de quitar la opción para ver 
los saltos de línea reales a medida que escribes el correo.</para>

<para>Cuando incluyas salida de pantalla, trozos de código u otro 
texto preformateado, desplázalo claramente, de forma que a simple vista se pueda 
fácilmente ver los límites entre tu texto y el material que estés 
incluyendo.  (Nunca esperé escribir este consejo cuando comencé el
libro, pero en un número de listas de correo de código abierto posterior, he visto 
gente mezclando textos de diferentes fuentes sin dejar claro qué es 
qué. El efecto es muy frustante.  Hacen los correos
bastante difíciles de entender y, francamente, hace que esas personas
parezcan un poco desorganizadas).</para>

<para>Cuando cites el correo de alguien, inserta tus repuestas donde 
sea más apropiado, en diferentes lugares si es necesario,
y elimina las partes de su correo que no utilices.  Si estás
escribiendo un comentario rápido con referencia a todo el correo, es correcto
hacerlo <firstterm>top-post</firstterm> (Es decir, poner tu respuesta
encima del texto citado; de lo contrario, deberías citar primero
la parte relevante del texto original, seguido de tu
respuesta.</para>

<para>Construye el asunto de los nuevos correos con cuidado.  Es la
línea más importante de un correo, ya que permite a cualquier otra persona
del proyecto decidir si leer más o no.  Los lectores de 
correo modernos organizan los grupos de mensajes relacionados en 
hilos, que pueden no solo definirse por un asunto común sino por 
otras cabeceras (que a menudo no se muestran).  Entienden
que si un hilo comienza a derivar hacia un nuevo tema, puedes y 
debes ajustar el asunto adecuadamente cuando respondas.  La
integridad del hilo persistirá, debido a aquellas otras cabeceras, pero
el nuevo asunto ayudará a la gente que mira un resumen del hilo a
saber que el tema ha derivado.  Asimismo, si realmente quieres
comenzar un nuevo tema, hazlo creando un nuevo mensaje y no respondiendo uno
ya existente y cambiándole el asunto.  De esta forma, tu correo podría
estar agrupado en el mismo hilo del correo que estás respondiendo y
así volver loca a la gente pensando sobre algo que no es.  Recuerda: 
la penalización no será la pérdida de tiempo, sino la pequeña
hendidura en tu credibilidad como alguien fluido en el uso de las 
herramientas de comunicación.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-content">
<title>Contenido</title>

<para>Correos electrónicos bien formateados atraen a los lectores, pero el contenido los mantiene.
Ningún conjunto fijo de reglas puede garantizar el buen contenido, por supuesto, hay
algunos principios que lo hacen más prometedor.</para>

<para>Hacer las cosas fáciles para tus lectores.  Hay una tonelada de información
flotando alrededor en cualquier proyecto activo de software libre, y los lectores no
pueden esperar estar al corriente de la mayor parte de ella, de hecho, no
siempre pueden esperar familiarizarse.  En lo posible,
tus correos deben sumunistrar información en la forma más conveniente para
los lectores.  Si tienes que pasar unos dos minutos extra buscando el URL
de un hilo particular en los archivos de la lista de correo, atendiendo al objetivo de
librar a tus lectores de hacerlo, vale la pena.  Si tienes que
pasar unos 5 o 10 minutos extra resumiendo las conclusiones de
un hilo complejo, con la intención de brindarle a las personas el contexto en el cual
comprederán tu correo, entonces hazlo. Piénsalo de esta manera: el mayor
éxito en un proyecto, es aumentar el cociente lector-a-escritor en cualquier
foro dado.  Si cada correo tuyo es visto por <emphasis>n</emphasis>
personas, entonces como <emphasis>n</emphasis> aumenta, la utilidad de
realizar un esfuerzo adicional para ayudar a aquellas personas aumenta con el tiempo.  Y
como las personas te verán imponer este estándar, trabajarán
imitándolo en sus propias comunicaciones.  El resultado es, idealmente, un
incremento en la eficiencia global del proyecto: cuando hay una
elección entre <emphasis>n</emphasis> personas realizando un esfuerzo y una
persona haciendolo, el proyecto prefiere el segundo.</para>

<para>No acostumbrarse a la hipérbole. La exageración de correos online es una
clásica competencia de armamento.  Por ejemplo, a una persona que reporta un fallo puede preocuparle
que los desarrolladores no le presten la suficiente atención, así que lo
describirá como grave, gran problema que es prevenirle
(y a todos sus amigos/compañeros de trabajo/primos) de la utilización del software
productivamente, cuando es solamente una molestia leve.  Pero
la exageración no está limitada a los usuarios; los programadores frecuentemente
hacen lo mismo durante debates técnicos, especialmente cuando el
desacuerdo es una cuestión de gustos más que de corección:</para>

  <blockquote>
     <para>"Hacerlo de esa manera haría el código totalmente
     ilegible.  Sería una pesadilla para el mantenimiento, comparado a la
     propuesta de J. Random..."</para>
  </blockquote>

<para>El mismo sentimiento se vuelve más
<emphasis>fuerte</emphasis> cuando está expresado de una forma menos brusca:</para>

  <blockquote>
     <para>"Pienso que eso funciona, pero menos de lo ideal en términos de
     legibilidad y mantenimiento. La propuesta de J. Random
     evita esos problemas ya que..."</para>
  </blockquote>

<para>No podrás librarte completamente de la hipérbole, y en
general no es necesario hacerlo.  Comparada con otras formas
retóricas, la hipérbole no es globalmente dañina y perjudica 
principalmente al autor.  Los destinatarios pueden comprender, solamente que
el remitente pierde un poco más de credibilidad cada vez.  Por lo tanto, para
bien de tu influencia en el proyecto, intenta proceder
con moderación.  De esa manera, cuando  <emphasis>necesitas</emphasis>
presentar un punto fuerte, las personas te tomarán con seriedad.</para>

<para>Corregir dos veces.  Para cualquier mensaje más largo que el tamaño medio
de un párrafo, se recomienda volver a leerlo de arriba a abajo antes de enviarlo pero después de que
lo tengas listo.  Éste es un conocido consejo para cualquiera
que haya tomado una clase de composición, pero es especialmente importante para
las discusiones en línea.  Ya que el proceso de composición en línea tiende a
ser altamente discontinuo (en el transcurso de escritura de un mensaje, podrías
necesitar retroceder y revisar otros correos, visitar ciertas páginas web, ejecutar un
comando para capturar su salida de depuración, etc.), es especialmente fácil
perder el sentido de tu papel narrativo.  Mensajes que fueron escritos
discontinuamente y no fueron revisados antes de ser enviados son frecuentemente
reconocibles como tal, mucho el disgusto (o uno esperaría) de
sus autores.  Tómate el tiempo para examinar lo que envías.  Cuanto más
estructurados sean tus mensajes, más leidos serán.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-tone">
<title>Tono</title>

<para>Después de escribir miles de mensajes, probablemente notarás
que tu estilo tiende a ser extremadamente conciso.  Esto parece ser la norma en la mayoría
de los foros técnicos, y no hay nada malo con ello. Un nivel
de brevedad que sería inaceptable en interacciones sociales normales
es sencillamente el común para los hackers de software libre.  Aquí está una respuesta a la que
yo recurrí una vez en una lista de correo acerca de cierto software gratuito de administración
de contenido, citado en su totalidad:</para>

<screen>
¿Puedes explicar exactamente con que problema
te enfrentas?

Además:

¿Qué versión de Slash estás usando? No pude encontrarlo en
tu mensaje original.

¿Exactamente como compilaste el código de apache/mod_perl?

¿Probaste el parche de Apache 2.0 que fue colocado en
slashcode.com?

  Shane
</screen>

<para><emphasis>Eso</emphasis> es ser conciso!  No tiene bienvenida, ni despedida 
con excepción de su nombre, y el mensaje en sí es solamente una serie de
preguntas expresadas de la forma más compacta.  Su oración
declarativa fue una crítica implícita de mi mensaje original.  Aunque, me
alegra ver el correo de Shane, y no tomar su brevedad como un producto
de cualquier otro motivo que no sea el de ser una persona ocupada.  El mero hecho de que él
haga preguntas, en vez de ignorar mi mensaje, significa que él es
esta dispuesto a dedicarle cierto tiempo a mi problema.</para>

<para>¿Reaccionarán positivamente todos los lectores a este estilo?  No
necesariamente; depende de la persona y el contexto.  Por ejemplo,
si una persona envía un correo reconociendo que cometió un error
(quizás codificó un fallo), y sabes por experiencias pasadas que
esta persona tiende a ser un poco insegura, entonces mientras puedas escribir
una respuesta compacta, deberías asegurarte de dejarlo con algo de mención
hacia sus sentimientos.  La mayor parte de tu respuesta puede
ser un breve análisis de la situación desde el punto de vista del ingeniero, tan conciso como
quieras.  Pero al final, deberías despedirte con algo que indique que
la brevedad no debe ser tomada como frialdad.  Por ejemplo, si sólo
escribiste montones de consejos indicando exactamente como la persona debería corregir el fallo,
entonces debes despedirte con "Buena suerte, NOMBRE_DE_LA_PERSONA" para indicar
que le deseas suerte y que no eres malgeniado.  Una carita sonriente
colocada estratégicamente u otro emoticón, también puede con frecuencia ser suficiente para tranquilizar a un
interlocutor.</para>

<para>Puede resultar un tanto extraño centrarse en el sentimiento de los
colaboradores, asi como tambien en lo superficial de lo que dicen
por decirlo de alguna manera sin rodeos, los sentimientos afectan a la productividad.
Los sentimientos tambien son importantes por otras razones,
porque incluso confinandonos a nosotros mismos a razones puramente utilitarias, podemos notar
que la gente infeliz escribe peor software, y/o menos.  Dada la naturaleza
restrictiva de la mayoria de los medios electronicos, aunque, a menudo no habra
indicios patentes de como se siente una persona. Tendras que realizar una adecuada
suposicion basandote en a) como se sentiria la mayoria de la gente en
esa situacion, y b) que es lo que conoces de esa persona particular a partir
de interacciones pasadas. Algunas personas prefieren una actitud mas pasiva, y
simplemente estan de acuerdo con todo el mundo sin cuestionarlos, la idea tras esto
es que si un participante no dice abiertamente que es lo que piensa, entonces
uno no tiene nada que hacer tratandole como pensaba que lo hacia. No comparto este
enfoque, por un par de razones. Una, la gente no se comporta de esa manera
en la vida real, asi que porque deberian hacerlo online?  Dos, dado que la mayoria de las
interacciones tienen lugar en foros publicos, la gente tiende a ser incluso mas moderada expresando
las emociones que lo podrian ser en privado. Para ser mas preciso, a menudo estan deseando expresar
emociones directamente a otros, tales como de agradecimiento o indignacion,
pero no emociones directamente intimas como inseguridad u orgullo.
Todavía, la mayoría de los humanos trabajan mejor cuando saben que los demás son
conscientes de su estado de ánimo. Prestando atención a a pequeñas pistas, normalmente
podrás suponerlo acertadamente la mayoría del tiempo, y motivar a la gente a estar involucrada
con un mayor grado que de otra manera no podrían.</para>

<para>Por supuesto no quiero decir que, tú rol sea el de un terapeuta de grupo, ayudando
constantemente a todo el mundo a estar al corriente de sus sentimientos. Pero poniendo una
especial atención a patrones a largo-plazo en el comportamiento de la gente, empezarás a
tener una sensación de ellos como individuos incluso aunque nunca los hayas conocido cara a 
cara. Y siendo sensible en el tono de tus mensajes escritos, podrás tener una cantidad
sorprendente de influencia sobre los sentimientos de los demás, que es el último beneficio
del proyecto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="rudeness">
<title>Reconociendo la grosería</title>

<para>Una de las características que definen la cultura del código abierto son
son las nociones distintivas de qué constituye grosería y qué no.
Mientras que los convenios que se describen debajo no son únicos para el desarrollo de 
software libre, ni tampoco para el software en general debería ser 
familiar para cualquiera que trabaje en disciplinas de las matemáticas, ciencias puras o
la ingeniería el software libre, con sus porosos
límites y un constante influjo de recién llegados, es un entorno donde
es especialmente probable encontrar estas convenciones por gente
no familiarizada con ellas.</para>

<para>Comencemos con las cosas que <emphasis>no</emphasis> son
groseras (maleducadas):</para>

<para>La crítica técnica, incluso cuando es directa y sin tacto, no es una grosería.
De hecho, puede ser una forma de adulación: la crítica es decir, por
implicación, que vale la pena tomarse en serio el destinatario,y vale la pena 
invertir tiempo en él.  Es decir, cuanto más viable fuera simplemente 
ignorar  el mensaje de alguien, se entiende más por un cumplido 
molestarse en criticarlo (a no ser que la crítica se convierta, por su puesto, en un 
ataque <foreignphrase>ad hominem</foreignphrase> o alguna otra forma de 
grosería obvia).</para>

<para>Preguntas directas, sin adornos, como la que Shane me hizo en 
el correo anterior tampoco es grosería.  Preguntas que, en 
otros contextos, pueden parecer frias, retóricas e incluso a modo de burla, son formuladas
a menudo de una forma seria, y no tienen más intención que obtener
información lo más rápido posible.  La famosa pregunta del soporte
técnico "¿Está su ordenador conectado?" es un ejemplo clásico de esto.
La persona de soporte realmente necesita saber si tu ordenador está
contectado y, después de unos pocos días en el trabajo, se ha cansado
de adornar su pregunta de florituras ("Le pido
disculpas, quisiera que me contestara unas simples preguntas para descartar algunas
posibilidades.  Algunas pueden parecer muy básicas, pero tenga
paciencia...").  En este punto, no le importa seguir adornando más 
simplemente pregunta directamente: ¿está o no está conectado?  Preguntas
similares se hacen en todo momento en las lista de distribución del software libre.  La
intención no es insultar al destinatario, sino descartar rápidamente las 
explicaciones más obvias (y quizás más comunes).  Los destinatarios que 
lo entiendan y reaccionen de ese modo ganarán puntos en tener una 
visión tolerante sin provocarse.  Pero los destinatarios que reaccionen mal
tampoco deberían ser reprendidos.  Es simplemente una colisión de culturas,
no es culpa de nadie.  Explica amablemente que tu pregunta (o crítica)
no tiene significados ocultos; que solo significaba obtener (o transmitir)
la información de la forma más eficientemente posible, nada más.</para>

<para>Entonces, ¿qué es grosería?</para>

<para>Bajo el mismo principo por el cual las críticas a detalles técnicos es una forma
de halago, no proporcionar críticas de calidad puede ser un tipo de insulto. No quiero
decir simplemente que ignorando el trabajo de alguien, sea una propuesta, cambio en el
código, nuevas informaciones o cualquier cosa. A menos que explicitamente prometas
una reacción detallada más adelante, normalmente es OK simplemente no reaccionando de
ninguna manera. La gente asumirá así que no tuviste tiempo de decir nada.
Pero si tu <emphasis>reaccionas</emphasis> , no escatimes: tómate el tiempo para analizar detalladamente las
cosas, proporcionar ejemplos concretos allá donde sea apropiado, rebuscar a través de los
archivos para encontrar información relacionada del pasado, etc. O si no tienes tiempo
para realizar todo ese esfuerzo, pero todavía necesitas escribir algún tipo de respuesta
corta, entonces exponlo de manera abierta y breve en tu mensaje ("Creo que hay un tema
abierto para esto, pero desafortunadamente no tuve tiempo para buscarlo, lo siento").
Lo principal es reconocer la existencia de la norma cultural, ya sea algo satisfactorio
o reconociendo abiertamente que ha fallado ligeramente esta vez. Sea lo que sea, la norma
es reforzar. Pero el no cumplir esta norma mientras que al mismo tiempo no se explica
el <emphasis>porque</emphasis> fallaste en conecerlo, es lo mismo que decir el tópico
(y aquellos que participan en ello) no mereció tu tiempo. Es mejor mostrar que tu tiempo
es muy valioso siendo seco que siendo vago.</para>

<para>Hay muchas otras formas de grosería, por supuesto, pero la mayoría no
es específica del desarrollo de software libre, y el sentido común 
es una buena forma de evitarlas.  Véase también
<xref linkend="prevent-rudeness"></xref><phrase output="printed"> en
<xref linkend="getting-started"></xref></phrase>, si lo has hecho
todavía.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="face">
<title>Caras</title>

<para>Hay una parte en el cerebro humano dedicada específicamente a reconocer caras. Es conocida
informalmente como "área de fusión de caras", y sus capacidades son mayoritariamente innatas
, no se han aprendido. Resulta que reconocer a las personas individualmente es una técnica
tan crucial de supervivencia que hemos desarrollado un hardware especializado para ello..</para>

<para>La colaboración basada en Internet es por ello psicologicamente curiosa
porque implica una estrecha colaboración entre seres humanos que nunca se identificarían entre ellos por los
más naturales e intuitivos métodos: reconocimiento facial el primero de todos, pero tambien
por el sonido de la voz, postura, etc. Para compensar esto, intenta usar un consistente 
<firstterm>Nombre</firstterm> en todas partes. Debería ser la primera parte de tu dirección de
email (la parte antes de el signo @), tu nombre del IRC, tu nombre para hacer commit en los
repositorios, tu marca de nombre en cualquier lado y así. Este nombre es tu "cara" online
: un tipo de cadena de identificación que sirve el mismo propósito que tu cara real, aunque
no lo es, desafortunadamente, estimula el mismo hardware consitutido en el cerebro.</para>

<para>El nombre que muestras debería ser una permutación intuitiva de tu nombre real (el mío por
ejemplo, es "kfogel"). En algunas situaciones estará acompañado de tu nombre completo, por 
ejemplo en las cabeceras del correo:</para>

<screen>
From: "Karl Fogel" &lt;kfogel@whateverdomain.com&gt;
</screen>

<para>Actualmente, hay dos puntos a tener en cuenta en ese ejemplo. Como ya he mencionado
anteriormente, el nombre que mostraremos coincidirá con el nombre real de una manera 
intuitiva. Pero tambien, el nombre real es <emphasis>real</emphasis>.
Esto es, no se compone de una denominación como:</para>

<screen>
From: "Wonder Hacker" &lt;wonderhacker@whateverdomain.com&gt;
</screen>

<para>Hay una famosa tira cómica de Paul Steiner, del 5 de Julio de 1993
publicada en <citetitle>The New Yorker</citetitle>, que muestra a un perro que ha iniciado
sesión en un terminal de ordenador, menospreciando y contando a los demás de manera
conspiratoria: "En Internet, nadie sabe que tú eres un perro."  Este tipo de pensamiento
es una mentira detrás de tanto ensalzamiento propio, significado de estar a la moda con
las identidades online que la gente se atribuye a ellos mismos; como llamándose uno mismo
"Wonder Hacker" causará que la gente piense que uno <emphasis>es</emphasis> un maravilloso
hacker. Pero los hechos permanecen:
incluso si nadie sabe que tu eres un perro, todavía seras un perro. Una fantástica identidad
online nunca impresiona a los lectores. En vez de esto, les hace creer que eres más una
imagen que una persona con fundamento, o que simplemente eres inseguro. Utiliza tu nombre
real para todas las interacciones, o si por alguna razón necesitas un anónimo, entonces crea
un nombre que se parezca perfectamente a un nombre real, y úsalo consistentemente.</para>

<para>Además de mantener tu imagen online consistente, hay algunas cosas más que puedes
hacer para que resulte más atractiva. Si posees un título oficial
(ejem., "doctor", "profesor", "director"), no hagas obstentación de ello, no lo menciones a menos que sea directamente
relevante a la conversación. El mundo hacker en general y la cultura del Software Libre
en particular, tienden a ver la muestra de títulos como un signo de exclusión y de inseguridad.
Esta bien si tu título aparece como parte de un bloque de firma standard al final de cada
mail que envías, pero no lo utilices como una herramienta para reforzar tu posición en una
discusión; al intentarlo está garantizado el fracaso. Tu quieres que la gente te respete
como persona, no por el título.</para>

<para>Hablando de bloques de firma: mantelos pequeños y con buen gusto, o mejor todavía,
inexistentes. Evita largas responsabilidades legales fijadas al final de cada mail, 
especialmente cuando estos expresen sentimientos incompatibles con la participación en
un proyecto de software libre. Por ejemplo, el siguiente clásico del género aparece al
final de cada post que un usuario particular hace en una lista de mail pública donde
yo estoy:</para>

<screen>
IMPORTANT NOTICE

If you have received this e-mail in error or wish to read our e-mail
disclaimer statement and monitoring policy, please refer to the
statement below or contact the sender.

This communication is from Deloitte &amp; Touche LLP.  Deloitte &amp;
Touche LLP is a limited liability partnership registered in England
and Wales with registered number OC303675.  A list of members' names
is available for inspection at Stonecutter Court, 1 Stonecutter
Street, London EC4A 4TR, United Kingdom, the firm's principal place of
business and registered office.  Deloitte &amp; Touche LLP is
authorised and regulated by the Financial Services Authority.

This communication and any attachments contain information which is
confidential and may also be privileged.  It is for the exclusive use
of the intended recipient(s).  If you are not the intended
recipient(s) please note that any form of disclosure, distribution,
copying or use of this communication or the information in it or in
any attachments is strictly prohibited and may be unlawful.  If you
have received this communication in error, please return it with the
title "received in error" to IT.SECURITY.UK@deloitte.co.uk then delete
the email and destroy any copies of it.

E-mail communications cannot be guaranteed to be secure or error free,
as information could be intercepted, corrupted, amended, lost,
destroyed, arrive late or incomplete, or contain viruses.  We do not
accept liability for any such matters or their consequences.  Anyone
who communicates with us by e-mail is taken to accept the risks in
doing so.

When addressed to our clients, any opinions or advice contained in
this e-mail and any attachments are subject to the terms and
conditions expressed in the governing Deloitte &amp; Touche LLP client
engagement letter.

Opinions, conclusions and other information in this e-mail and any
attachments which do not relate to the official business of the firm
are neither given nor endorsed by it.
</screen>

<para>Para alguien que únicamente se quiere presentar para preguntar alguna
cuestión ahora y entonces, esta gran "renuncia" parece un poco fuera de lugar
pero probablemente no hace ningún daño. Sin embargo, si esta persona quería participar
activamente en el proyecto, este formalismo-legal empezaría a tener un efecto más
insidioso. Enviaría al menos dos señales potencialmente destructivas: primero, qué esta
persona no tiene un control total sobre sus herramientas; está atrapado dentro de una
cuenta de correo corporativa que acarrea un mensaje molesto al final de cada mail, y el
no tiene ningúna manera de evitarlo; y segundo, que tiene poco o ningún apoyo de su 
organización para contribuir en las actividades del software libre. Cierto, que la
organización claramente no le ha prohibido completamente de postear en listas públicas,
pero hace que sus posts se distingan con un mensaje frío, ya que el riesgo de dejar
información confidencial debe figurarse sobre las demás prioridades.</para>

<para>Si trabajas para una organización que insiste en añadir tales bloques de firma
en todos los mail salientes, entonces considera tener una cuenta de correo gratuito de,
por ejemplo, <ulink url="gmail.google.com"></ulink>,
<ulink url="www.hotmail.com"></ulink>, or <ulink url="www.yahoo.com"></ulink>, y utilizar
esta dirección para el proyecto.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->

<sect1 id="common-pitfalls">
<title>Evitando los obstáculos corrientes</title>

<!-- ======================== subsection ============================== -->

<sect2 id="post-with-purpose">
<title>No envíes un correo sin un propósito</title>

<para>Un obstáculo común en la participación de un proyecto online es pensar que tú
tienes que responder a todo. No tienes que hacerlo. Lo primero de todo, normalmente
se generarán más hilos de correo de los que tú puedas manejar, al menos después de que
el proyecto ha pasado sus primeros meses. Segundo, incluso en los hilos de correo en los
que has decidido tomar parte, mucho de lo que comenta la gente no requerirá una respuesta.
Los foros de desarrollo en particular tiendes a ser dominados por tres tipos de mensajes:</para>

<orderedlist>
  <listitem><para>Mensajes proponiendo algo que -no es trivial-</para></listitem>
  <listitem><para>Mensajes mostrando apoyo u oposición a algo o a lo que alguien ha dicho.</para></listitem>
  <listitem><para>Mensajes de recapitulación</para></listitem>
</orderedlist>

<para>Ninguno de esos<emphasis>de manera inherente</emphasis> requerirá una respuesta, 
particularmente si puedes ser justamente seguro, basándote en revisar el hilo desde el
principio, que alguien más probablemente dirá lo que tu ibas a decir de cualquier manera.
(Si te preocupa que te tomen en un bucle de esperar-esperar porque todos los demás están
usando esta táctica tambien, no lo hagas; casi siempre habrá <emphasis>alguien</emphasis> 
por ahí que se tenderá a crisparse.) Una respuesta debería ser motivada por un propósito
definitivo. Pregúntate a ti mismo primero: ¿Sabes que es lo que quieres conseguir? Y segundo: ¿no 
se conseguirá a menos que digas algo?</para>

<para>Dos buenas razones para añadir tu voz a un hilo de corre son a) cuando veas un
movimiento de proposición y sospeches que tú eres el único que así lo percibe, y b) cuando veas
que no hay entendimiento entre otros, y sepas que puedes solucionarlo con un correo 
clarificándolo todo. Tambien generalmente está bien escribir únicamente para dar las gracias
a alguien por algo, o para decir "Yo tambien!", porque un lector puede decir en seguida
que tal correo no requiere ninguna respuesta ni acción adicional, y por lo tanto el esfuerzo
mental demnadado por el post termina limpliamente cuando el lector llega a la última línea
de el correo. Pero incluso entonces, piensalo dos veces antes de decir algo; es siempre mejor
dejar a la gente deseando que escribas más a menudo que deseando que escribas menos. (Consulta la 
segunda parte de <xref linkend="bikeshed-full"></xref> para ver más ideas sobre como portarse
en una lista de correo muy concurrida.)</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="productive-threads">
<title>Hilos productivos vs Hilos Improductivos</title>

<para>En una lista de correo muy concurrida, tienes dos imperativos. Uno,
obviamente es comprender en que es lo que necesitas poner tu atención y que es lo
que puedes ignorar. El otro es evitar de alguna manera 
el <emphasis>causar</emphasis> ruido: no sólo quieres que tus propios posts
tengan un ratio de gran ruido/señal,  sino que tambien quieres que sean el tipo de
mensajes que estimulan a <emphasis>otra</emphasis> gente a escribir mails con un ratio
similar de señal/ruido, o no escribir nada.</para>

<para>Para ver como hacer eso, vamos a considerar el contexto en el cual se hace. 
¿Cuales son algunos de los sellos de un hilo improductivo?</para>

<itemizedlist>
  <listitem><para>Argumentos que ya se han hecho antes se empiezan a repetir, porque
	  el que los hace piensa que nadie le ha escuchado la primera vez.</para>
  </listitem>
  <listitem><para>Se incrementan los níveles de exageración y participación mientras el
  	  interés se hace cada vez más pequeño.</para>
  </listitem>
  <listitem><para>Una mayoría de comentarios que provienen de gente que hablan poco o nada,
  	  mientras que la gente que tiene a hacer las cosas permanece en silencio.</para>
  </listitem>
  <listitem><para>Muchas ideas se discuten sin un propósito claro de que hacer con ellas.
  	  Por supuesto, cualquier idea interesante empieza con una visión imprecisa; la cuestión
  	  importante es que dirección tomará a partir de ahí. Parece que el hilo empieza a convertir
  	  la visión en algo más concreto, o está derivando en sub-visiones y disputas ontológicas?)</para>
  </listitem>
</itemizedlist>

<para>Sólo porque un hilo de correo no sea productivo al principio no significa que sea
una perdida de tiempo. Puede tratar sobre un tema importante, en cuyo caso el hecho de
que no se está produciendo ningún progreseo es todo lo más molesto.</para>

<para>Guiar un hilo de correo hacia la utilidad sin ser agresivo es todo un arte. No 
funcionará simplemente amonestando a la gente para que pare de gastar su tiempo, o 
preguntándoles que no escriban a menos que tengan algo constructivo que decir. Por supuesto
puedes pensar en esas cosas en privado, pero si lo dices en la lista de correo sonará 
ofensivo. En lugar de eso, tienes que sugerir condiciones para promover progresos; guía a
la gente, un camino a seguir que lleve a los resultados que quieres, y todo ello sin que
tu conducta parezca dictatoria. La distinción es en gran parte el tono. Por ejemplo, esto
esta mal:</para>

  <blockquote>
     <para><emphasis>Esta discusión no va a ningún lado. Por favor podemos dejar este
     tema hasta que alguien tenga un parche que implemente una de esas proposiciones?
     No hay razón para mantenernos en ello todo el rato diciendo las mismas cosas. El código
     hace más ruido que las palabras, chicos.</emphasis></para>
  </blockquote>

<para>Donde esto esta bien:</para>

  <blockquote>
     <para><emphasis>Varias propuestas han estado flotando en este hilo, pero ninguno ha
     tenido todos los detalles completos, al menos no demasiados como para hacer una
     votación arriba-o-abajo. Y todavía no estamos diciendo nada nuevo; estamos simplemente
     reiterando lo que ya se ha dicho anteriormente. Así que lo mejor a partir de este punto
     será probablemente para posteriores correos contener tanto una especificación completa
     para la característica propuesta, o un parche. Entonces al menos tendríamos una acción
     definitiva que tomar (ejem, tener un consenso en la especificación, o aplicar el 
     parche).</emphasis></para>
  </blockquote>

<para>Compara la segunda propuesta con la primera. La segunda manera no traza una línea
entre tú y los demás, ni les acusa de mantener la discusión en una espiral. Habla sobre
"nosotros", que es lo importante hayas participado o no en el hilo de correo anteriormente, 
porque recuerada a todo el mundo que incluso aquellos que han estado en silencio hasta 
entonces en el hilo de correo todavía pueden participar en el resultado del hilo de correo.
Describe porque el hilo no va a ninguna parte, pero lo hace sin peyorativas ni juicios; 
simplemente muestra el estado de algunos hechos sin sentimiento. Lo más importante, ofrece
un curso de acción positivo, de manera que en vez de que la gente sienta que la discusión
esta siendo cerrada (una restricción contra la cual ellos pueden sólo estar tentados a rebelar),
se sentirán como si se les estuviera ofreciendo una manera de tomar parte en la conversación
a un nivel más constructivo. Este es un estándar con el cual la gente querrá quedarse.</para>

<para>Siempre no querrás convertir un hilo de correo en el siguiente nivel de construcción; 
otras veces querrás dejarlo pasar. El propósito de tu correo, entonces, es hacer una cosa o
la otra. Si puedes decir el camino que deberá tomar el hilo de correo de manera que nadie
lo está haciendo <emphasis>así</emphasis> para tomar los pasos que sugeriste, entonces tu
correo ha cerrado el hilo sin aparentar hacerlo. Por supuesto, no hay una manera infalibe
de cerrar un hilo, e incluso si la hubiera, no querrías usarla. Pero preguntando a los
participantes a crear progresos visibles o parar de escrbiri correos es perfectamente 
defendible, si se hace diplomáticamente. Sin embargo, se cauteloso de anular los hilos
de correo prematuramente. Alguna cantidad de charla especulativa puede llegar a ser
productiva, dependiendo del tema, y preguntando para que se resuelva demasiado rápida
apagará el proceso creativo, así como tambien te hara parecer impaciente.</para>

<para>Don't expect any thread to stop on a dime.  Probablemente habrá todavía unos
pocos correos despues del tuyo, ya sea porque los mails se cruzan en la red, o porque
la gente quiere tener la última palabra. Esto no es nada por lo que preocuparse, y no
necesitas escribir otro correo otra vez. Simplemente deja que el hilo se vaya esfumando o que no se
esfume como puede ser el caso. No puedes tener control completo; por otra parte, puedes 
esperar tener estadísticamente un efecto significativo a través de varios hilos de correo.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="bikeshed">
<title>Cuanto más blando sea el tema, más largo será el debate</title>

<para>Aunque las discusiones pueden extenderse a cualquier topico, la probabilidad de que se vayan extendiendo
va conforme la dificultad tecnica del tema disminuye. Despues de todo cuanta mas sea la dificultad tecnica,
menor sera el numero de participantes que realmente podran seguirla.
Aquellos quienes pueden ser los desarrolladores mas experimentados, quienes ya han tomado parte en esas
discusiones antes cientos de veces, y conocen el tipo de comportamiento es el que va a llevar a un
consenso con el cual todo el mundo este de acuerdo.</para>

<para>De esta manera, en cuestiones tecnicas que son simples de comprender y faciles de tener una opinion
sobre ellas, es dificil llegar a un consenso, y en temas "blandos" como organizacion, publicidad, ingresos, etc.
La gente puede participar en aquellos argumentos siempre, porque no es necesario ninguna cualificacion para
hacerlo, no hay un camino claro para decidir (incluso despues de todo) si una decision fue buena o mala, y porque
simplemente esperar a que otros discutan es a veces una tactica correcta. </para>

<para>El principio de que la cantidad de discusion es inversamente proporcional a la complejidad
del tema tratado, ha estado ahi durante algun tiempo, y es conocido informalmente como el 
<firstterm>Efecto Bikeshed </firstterm>. Aqui esta la explicacion de Poul-Henning Kamp's,
de un correo ahora famoso, hecho en la lista de desarrolladores de BSD:</para>

<blockquote>

<para>Es una larga historia o mas bien es una vieja historia, pero es bastante escasa actualmente.
C. Northcote Parkinson escribio un libro en los comienzoa de 1960 titulado "La ley de Parkinson", la cual 
contenia mucho entendimiento sobre la dinamica de la gestion.</para>

<para>[...]</para>

<para>En el ejemplo especifico cubriendo el refugio de bicicletas, el otro componente vital es una planta
de energia atomica, supongo que ilustra la epoca de el libro.
.</para>

<para>Parkinson nos muestra que puedes ir a un consejo de direccion y conseguir la aprobacion de un
edificio multi millonario o incluso de billones de dolares de una planta de energia atomica, pero si 
quieres construir un refugio de bicicletas te veras implicado en discusiones sin fin.</para>

<para>Parkinson explica que esto es porque una planta de energia atomica es tan enorme, tan cara y tan
complicada que la gente no tendra conocimiento de ello, y en lugar de intentarlo, recurriran al supuesto
de que alguien revisara todos los detalles antes de ir mas alla. 
Richard P.  Feynmann dio un par de interesantes, y muy cercanos a esto ejemplos en relacion a los Alamos
en sus libros.</para>

<para>Por otra parte, un refugio para bicletas. Cualquiera puede construir uno de esos en un fin de semana, y
todavia tendra tiempo para ver la TV. Asi que no importa lo bien preparado que estes, tampoco importa lo
razonable que seas en tu proposicion, alguien se hara con la oportunidad para demostrar que esta haciendo
su trabajo, que esta atento, que esta <emphasis>ahi</emphasis>.</para>

<para>En Dinamarca lo llamamos "deja tu huella". Trata sobre el orgullo personal y el prestigio, va sobre
ser capaz de señalar en algun sitio y decir "Hay! esto lo hice <emphasis>Yo</emphasis>."  Es fuerte, simplemente
piensa en las pisadas del semento mojado.</para>

</blockquote>

<para>(Su post completo es una lectura de mucho valor. Miralo.<xref linkend="bikeshed-full"></xref>; see also
<ulink url="http://bikeshed.com"></ulink>.)</para>

<para>Cualquiera que regularmente tome parte en decisiones hechas en grupo reconocera sobre que es lo que
esta hablando Kamp. Sin embargo, normalmente es imposible persuadir a <emphasis>todo el mundo</emphasis> a evitar
pintar un cobijo de bicis. Lo mejor que puedes hacer es señalar que el fenomeno existe, y cuando veas que esta
ocurriendo, persuadir al desarrollador senior; las personas cuyos mails llevan todo el peso; a soltar sus
brochas pronto, asi al menos no contribuiran al ruido. Las fiestas para pintar bicis nunca se esfumaran 
enteramente, pero puedes hacerlas mas cortas y menos frecuentes extendiendo una concienciacion del fenomeno en
la cultura del proyecto.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="holy-wars">
<title>Evitando las Guerras Santas</title>

<para>Una<firstterm>Guerra Santa</firstterm> es una disputa, a menudo pero no siempre sobre un tema relativamente
menor el cual no se puede resolver con los meritos de los argumentos, pero donde la gente se siente demasiado
apasionada para continuar discutiendo de cualquier manera con la esperanza de que su lado prevalecera.
Las Guerras Santas no son lo mismo que la pintura de un garaje de bicicletas. La gente de la pintura de bicicletas
normalmente salen rapido con una opinion (porque pueden), pero ellos, necesariamente no se sentiran demasiado
apasionados sobre ello, y por lo tanto, otras veces, expresaran opiniones incompatibles para mostrar que ellos
comprenden todas las caras del tema tratado. Por otra parte, en una Guerra Santa, comprender a las otras partes
es un signo de debilidad. En una Guerra Santa, todo el mundo sabe que hay UNA Respuesta Correcta; Per ellos no
estan de acuerdo con esta.</para>

<para>Una vez que una Guerra Santa ha empezado, generalmente no se puede resolver con la satisfaccion de todo
el mundo. No es bueno mostrar, en el medio de una Guerra Santa, que esta esta teniendo lugar. Todo el mundo
ya lo sabe. Desafortunadamente una caracteristica comun de las Guerra Santa es el desacuerdo en cada cuestion
<emphasis>si</emphasis> la disputa se puede resolver continuando la discusion. Visto desde fuera, esta claro que
ninguna parte va a cambiar la opinion de los otros. Visto desde dentro, la otra parte esta siendo obtusa y no esta
pensando claramente, pero pueden cambiar de opinion si las cosas se vuelven feas. Ahora,<emphasis>no</emphasis>
estoy diciendo que no haya una parte con razon en una guerra santa. A veces la hay en las Guerras Santas que yo he
participado, siempre ha sido mi bando, por supuesto. Pero no importa porque no hay algoritmo para demostrar convencidamente
que una parte o la otra estan en lo cierto.</para>

<para>Un comun, pero insatisfactorio modo de intentar solucinar una Guerra Santa es decir "Ya hemos gastado bastante
tiempo y energia de lo que vale discutiendo esto! Por favor, ¿podemos dejarlo? Hay dos problemas en esto. Primero, que 
el tiempo y la energia ya se han gastado y ya no se pueden recuperar; la unica cuestion ahora es, cuanto esfuerzo
<emphasis>mas</emphasis> permanecera?  Si todavia alguno siente que un poco mas de discusion resolvera la cuestion
pronto, entonces todavia tiene sentido (desde su punto de vista) continuar.</para>

<para>El otro problema en preguntar para que la cuestion sea zanjada  es que esto es a menudo equivalente a permitir
a una parte el status quo, a declarar la victoria por inaccion. Y en algunos casos, el status quo es conocido por ser
de cualquier forma inaceptable: todo el mundo esta de acuerdo en que se debe llegar a una decision, se debe tomar 
alguna accion. Dejar el tema seria peor para todo el mundo que simplemente apoyando el argumento que daria alguien.
Pero dado que el dilema se aplica igualmente a todo el mundo, todavia es posible terminar discutiendo por siempre sobre
que hacer.</para>

<para>¿Como deberias manejar una Guerra Santa?</para>


<para>Puedes anticipar ciertas Guerras Santa estandar: tienden a tratar sobre
lenguajes de programacion, licencias
(mira <xref linkend="license-compatibility"></xref><phrase output="printed"> in <xref linkend="legal"></xref></phrase>),
en respuesta a munging (mira <xref linkend="reply-to"></xref><phrase output="printed">
en <xref linkend="technical-infrastructure"></xref></phrase>), y algunos otros topicos.
Normalmente cada proyecto tiene una o dos Guerras Santas, tambien, las cuales los desarrolladores
mas experimentados estaran ya familiarizados. Las tecnicas para frenar las Guerras Santas, o al
menos limitar su daño, son casi las mismas en cualquier lugar. Incluso si eres positivo y tu parte es correcta, intenta
encontrar <emphasis>alguna</emphasis> manera de expresar simpatia y comprension hacia los puntos de vista que los otros
hacen. A menudo el problema en una Guerra Santa es porque cada parte ha construido sus muros
lo mas alto posible, y dejan claro que cualquier otra opinion es totalmente idiota, el acto de
rendirse o cambiar el pensamiento de alguien se hace psicologicamente insostenible: sería
un reconocimiento no solamente siendo erróneo, pero habiendo sido <emphasis>ciertamente</emphasis>y
todavia siendo erróneo. La manera en que puedes hacer este reconocimiento aceptable por la 
otra parte es expresar alguna duda tu mismo; precisamente mostrando que comprendes sus
argumentos y al menos eres sensible a ellos, si no persuasivo finalmente. Haz un gesto que
proporcione espacio para un gesto recíproco, y normalmente la situación mejorará. No es ni más
ni menos probable que consigas el resultado técnico que querías, pero al menos puedes evitar
el daño colateral innecesario a la moral del proyecto.</para>

<para>Cuando una Guerra Santa no se puede evitar, decide pronto cuanto la apoyas, y entonces
estáte dispuesto públicamente a ceder. Cuando hagas esto, puedes decir que no estás respaldándola
porque la Guerra Santa no lo vale, pero no expreses ningún rencor y <emphasis>no</emphasis> tomes
la oportunidad para una despedida disparando contra los argumentos de la otra parte. Darse por
vencido es efectivo sólo cuando se hace con elegancia.</para>

<para>Las Guerras Santas de lenguajes de programación son un caso especial, porque a menudo
son mayormente técnicas, todavía mucha gente se siente cualificada para tomar parte en ellas,
y el interes es muy alto, ya que el resultado puede determinar en gran medida en que lenguaje
se va a escribir el proyecto. La mejor solución es elegir el lenguaje pronto, con la influencia
de los desarrolladores iniciales, y entonces defenderlo en los terrenos en los que eres
comfortable escribiendo, <emphasis>no</emphasis> en el terreno que sería mejor en el que otro
lenguaje se pudiera utilizar. Nunca dejes que la conversación en una comparación académica de 
lenguajes de programación (esto parece ocurrir especialmente cuando alguien menciona Perl, por
alguna razón); éste es un tópico muerto en el que simplemente debes evitar caer.</para>

<para>Para consultar más fondo histórico de las Guerras Santas, mira
<ulink url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, y el artículo de Danny Cohen
que popularizó el término, <ulink url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="noisy-minority">
<title>El efecto "Ruido Minoritario"</title>

<para>En cualquier discusion de una lista de correo, es fácil para una pequeña minoría
dar la impresión de que hay un gran acuerdo de contrariead, esto es inundando la lista
con numerosos y largos emails. Es igual a hacer una maniobra obstruccionista, excepto que
la ilusión de la disensión general es incluso más poderosa, porque está dividida entre 
un número arbitrario de posts discretos y a la mayoría de la gente no le importa seguir
la pista de quién ha dicho que, cuando. Sólo tienen una impresión instintiva de que el 
tema es muy controvertido, y esperan a que el escándalo disminuya.
</para>

<para>La mejor manera de contrarrestar este efecto es indicarlo muy claramente 
y proporcionar pistas respaldadas mostrando cómo de pequeño es el número actual
de disidentes comparado a los que están en acuerdo. Para incrementar la disparidad,
puedes querer encuestar de manera privada a la gente que ha estado la mayor parte
del tiempo en silencio, pero que sospechas que estarán de acuerdo con la mayoría.
been mostly silent, but who you suspect would agree with the majority.
No digas nada que sugiera que los disidentes estaban intentando deliberadamente inflar
la impresión que estaban creando. Oportunidades que no tuvieron, e incluso si las tuvieron
no había una ventaja estratégica para señalarla. Todo lo que necesitas es mostrar el
número actual en una comparación cara-a-cara, y la gente se dara cuenta que su intuición
de la situación no coincidía con la realidad.
</para>

<para>Este consejo no sólo se aplica a temas con una clara posición a-favor-en-contra.
Se aplica a cualquier discusión donde hay un alboroto, pero no esta claro que la mayoría
de la gente considere ese tema bajo discusión que sea un problema real. Despues de todo,
si estas de acuerdo en que el tema no es digno de acción, y puedes ver que ha fallado
en atraer la atención (incluso si ha generado muchos mails), puedes observar públicamente
que no está teniendo tracción. Si el efecto "ruido minoritario" ha funcionado, tu post
parecerá un soplo de aire fresco. La mayoría de la impresión de la gente de la discusión
se dará cuenta de que ese punto habrá sido algo turbio: Huh, seguro que sienten como
que hay un gran acuerdo aqui, porque seguramente hay un montón de posts, pero no puedo
ver que esté habiendo ningún progreso claro." Explicando como la manera en que la discusión
se hizo parezca más turbulenta de lo que realmente es, tú retrospectivamente le darás una
nueva forma, a través de la cual la gente pueda recapitular su comprensión del resultado.
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="difficult-people">
<title>Difficult People</title>

<para>Difficult people are no easier to deal with in electronic forums
than they are in person.  By "difficult" I don't mean "rude".  Rude
people are annoying, but they're not necessarily difficult.  This book
has already discussed how to handle them: comment on the rudeness the
first time, and from then on, either ignore them or treat them the same
as anyone else.  If they continue being rude, they will usually make
themselves so unpopular as to have no influence on others in the
project, so they are a self-containing problem.</para>

<para>The really difficult cases are people who are not overtly rude,
but who manipulate or abuse the project's processes in a way that ends
up costing other people time and energy, yet do not bring any benefit
to the project.  Such people often look for wedgepoints in the
project's procedures, to give themselves more influence than they
might otherwise have.  This is much more insidious than mere rudeness,
because neither the behavior nor the damage it causes is apparent to
casual observers.  A classic example is the filibuster, in which
someone (always sounding as reasonable as possible, of course) keeps
claiming that the matter under discussion is not ready for resolution,
and offers more and more possible solutions, or new viewpoints on old
solutions, when what is really going on is that he senses that a
consensus or a ballot is about to form, and doesn't like where it is
probably headed.  Another example is when there's a debate that won't
converge on consensus, but the group tries to at least clarify the
points of disagreement and produce a summary for everyone to refer to
from then on.  The obstructionist, who knows the summary may lead to a
result he doesn't like, will often try to delay even the summary, by
relentlessly complicating the question of what should be in it, either
by objecting to reasonable suggestions or by introducing unexpected
new items.</para>

<sect2 id="handling-difficult-people">
<title>Handling Difficult People</title>

<para>To counteract such behavior, it helps to understand the
mentality of those who engage in it.  People generally do not do it
consciously.  No one wakes up in the morning and says to himself:
"Today I'm going to cynically manipulate procedural forms in order to
be an irritating obstructionist."  Instead, such actions are often
preceded by a semi-paranoid feeling of being shut out of group
interactions and decisions.  The person feels he is not being taken
seriously, or (in the more severe cases) that there is almost a
conspiracy against him&mdash;that the other project members have decided to
form an exclusive club, of which he is not a member.  This then
justifies, in his mind, taking rules literally and engaging in a
formal manipulation of the project's procedures, in order
to <emphasis>make</emphasis> everyone else take him seriously.  In
extreme cases, the person can even believe that he is fighting a
lonely battle to save the project from itself.</para>

<para>It is the nature of such an attack from within that not everyone
will notice it at the same time, and some people may not see it at all
unless presented with very strong evidence.  This means that
neutralizing it can be quite a bit of work.  It's not enough to
persuade yourself that it's happening; you have to marshal enough
evidence to persuade others too, and then you have to distribute that
evidence in a thoughtful way.</para>

<para>Given that it's so much work to fight, it's often better just to
tolerate it for a while.  Think of it like a parasitic but mild
disease: if it's not too debilitating, the project can afford to
remain infected, and medicine might have harmful side effects.
However, if it gets too damaging to tolerate, then it's time for
action.  Start gathering notes on the patterns you see.  Make sure to
include references to public archives&mdash;this is one of the reasons
the project keeps records, so you might as well use them.  Once you've
got a good case built, start having private conversations with other
project participants.  Don't tell them what you've observed; instead,
first ask them what they've observed.  This may be your last chance to
get unfiltered feedback about how others see the troublemaker's
behavior; once you start openly talking about it, opinion will
become polarized and no one will be able to remember what he
formerly thought about the matter.</para>

<para>If private discussions indicate that at least some others see
the problem too, then it's time to do something.  That's when you
have to get <emphasis>really</emphasis> cautious, because it's very
easy for this sort of person to try to make it appear as though you're
picking on them unfairly.  Whatever you do, never accuse them of
maliciously abusing the project's procedures, of being paranoid, or, in
general, of any of the other things that you suspect are probably
true.  Your strategy should be to look both more reasonable and more
concerned with the overall welfare of the project, with the goal of
either reforming the person's behavior, or getting them to go away
permanently.  Depending on the other developers, and your relationship
with them, it may be advantageous to gather allies privately first.
Or it may not; that might just create ill will behind the scenes, if
people think you're engaging in an improper whispering
campaign.</para>

<para>Remember that although the other person may be the one behaving
destructively, <emphasis>you</emphasis> will be the one who appears
destructive if you make a public charge that you can't back up.  Be
sure to have plenty of examples to demonstrate what you're saying, and
say it as gently as possible while still being direct.  You may not
persuade the person in question, but that's okay as long as you
persuade everyone else.</para>

</sect2>

<sect2 id="difficult-people-case-study">
<title>Case study</title>

<para>I remember only one situation, in more than 10 years of working
in free software, where things got so bad that we actually had to ask
someone to stop posting altogether.  As is so often the case, he was
not rude, and sincerely wanted only to be helpful.  He just didn't
know when to post and when not to post.  Our lists were open to the
public, and he was posting so often, and asking questions on so many
different topics, that it was getting to be a noise problem for the
community.  We'd already tried asking him nicely to do a little more
research for answers before posting, but that had no effect.</para>

<para>The strategy that finally worked is a perfect example of how to
build a strong case on neutral, quantitative data.  One of our
developers did some digging in the archives, and then sent the
following message privately to a few developers.  The offender (the
third name on the list below, shown here as "J. Random") had very
little history with the project, and had contributed no code or
documentation.  Yet he was the third most active poster on the mailing
lists:</para>

<screen>
From: "Brian W. Fitzpatrick" &lt;fitz@collab.net&gt;
To: [... recipient list omitted for anonymity ...]
Subject: The Subversion Energy Sink
Date: Wed, 12 Nov 2003 23:37:47 -0600

In the last 25 days, the top 6 posters to the svn [dev|users] list have
been:

    294  kfogel@collab.net
    236  "C. Michael Pilato" &lt;cmpilato@collab.net&gt;
    220  "J. Random" &lt;jrandom@problematic-poster.com&gt;
    176  Branko &Ccaron;ibej &lt;brane@xbc.nu&gt;
    130  Philip Martin &lt;philip@codematters.co.uk&gt;
    126  Ben Collins-Sussman &lt;sussman@collab.net&gt;

I would say that five of these people are contributing to Subversion
hitting 1.0 in the near future.

I would also say that one of these people is consistently drawing time
and energy from the other 5, not to mention the list as a whole, thus
(albeit unintentionally) slowing the development of Subversion.  I did
not do a threaded analysis, but vgrepping my Subversion mail spool tells
me that every mail from this person is responded to at least once by at
least 2 of the other 5 people on the above list.

I think some sort of radical intervention is necessary here, even if we
do scare the aforementioned person away.  Niceties and kindness have
already proven to have no effect.

dev@subversion is a mailing list to facilitate development of a version
control system, not a group therapy session.

-Fitz, attempting to wade through three days of svn mail that he let
 pile up
</screen>

<para>Though it might not seem so at first, J. Random's behavior was a
classic case of abusing project procedures.  He wasn't doing something
obvious like trying to filibuster a vote, but he was taking advantage
of the mailing list's policy of relying on self-moderation by its
members.  We left it to each individual's judgement when to post and
on what topics.  Thus, we had no procedural recourse for dealing with
someone who either did not have, or would not exercise, such judgement.
There was no rule one could point to and say the fellow was violating
it, yet everyone knew that his frequent posting was getting to be a
serious problem.</para>

<para>Fitz's strategy was, in retrospect, masterful.  He gathered
damning quantitative evidence, but then distributed it discreetly,
sending it first to a few people whose support would be key in any
drastic action.  They agreed that some sort of action was necessary,
and in the end we called J. Random on the phone, described the problem
to him directly, and asked him to simply stop posting.  He never
really did understand the reasons why; if he had been capable
of understanding, he probably would have exercised appropriate
judgement in the first place.  But he agreed to stop posting, and the
mailing lists became useable again.  Part of the reason this strategy
worked was, perhaps, the implicit threat that we could start
restricting his posts via the moderation software normally used for
preventing spam (see
<xref linkend="spam-prevention"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>).  But the
reason we were able to have that option in reserve was that Fitz had
gathered the necessary support from key people first.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="growth">
<title>Handling Growth</title>

<para>The price of success is heavy in the open source world.  As your
software gets more popular, the number of people who show up looking
for information increases dramatically, while the number of people
able to provide information increases much more slowly.  Furthermore,
even if the ratio were evenly balanced, there is still a fundamental
scalability problem with the way most open source projects handle
communications.  Consider mailing lists, for example.  Most projects
have a mailing list for general user questions&mdash;sometimes the
list's name is "users", "discuss", "help", or something else.
Whatever its name, the purpose of the list is always the same: to
provide a place where people can get their questions answered, while
others watch and (presumably) absorb knowledge from observing these
exchanges.</para>

<para>These mailing lists work very well up to a few thousand users
and/or a couple of hundred posts a day.  But somewhere after that, the
system starts to break down, because every subscriber sees every post;
if the number of posts to the list begins to exceed what any
individual reader can process in a day, the list becomes a burden to
its members.  Imagine, for instance, if Microsoft had such a mailing
list for Windows XP.  Windows XP has hundreds of millions of users; if
even one-tenth of one percent of them had questions in a given
twenty-four hour period, then this hypothetical list would get
hundreds of thousands of posts per day!  Such a list could never
exist, of course, because no one would stay subscribed to it.
This problem is not limited to mailing lists; the same logic applies
to IRC channels, online discussion forums, indeed to any system in
which a group hears questions from individuals.  The implications are
ominous: the usual open source model of massively parallelized support
simply does not scale to the levels needed for world
domination.</para>

<para>There will be no explosion when forums reach the breaking point.
There is just a quiet negative feedback effect: people unsubscribe
from the lists, or leave the IRC channel, or at any rate stop
bothering to ask questions, because they can see they won't be heard
in all the noise.  As more and more people make this highly rational
choice, the forum's activity will seem to stay at a manageable level.
But it is staying manageable precisely because the rational (or at
least experienced) people have started looking elsewhere for
information&mdash;while the inexperienced people stay behind and
continue posting.  In other words, one side effect of continuing to
use unscalable communications models as the project grows is that the
average quality of both questions and answers tends to go down, which
makes it look like new users are dumber than they used to be, when in
fact they're probably not.  It's just that the benefit/cost ratio of
using those high-population forums goes down, so naturally those with
the experience to do so start to look elsewhere for answers first.
Adjusting communications mechanisms to cope with project growth
therefore involves two related strategies:</para>

<orderedlist>
  <listitem><para>Recognizing when particular parts of a forum are
            <emphasis>not</emphasis> suffering unbounded growth, even
            if the forum as a whole is, and separating those parts
            off into new, more specialized forums (i.e., don't let
            the good be dragged down by the bad).</para>
  </listitem>
  <listitem><para>Making sure there are many automated sources
            of information available, and that they are kept
            organized, up-to-date, and easy to find.</para>
  </listitem>
</orderedlist>

<para>Strategy (1) is usually not too hard.  Most projects start out
with one main forum: a general discussion mailing list, on which
feature ideas, design questions, and coding problems can all be hashed
out.  Everyone involved with the project is on the list.  After a
while, it usually becomes clear that the list has evolved into several
distinct topic-based sublists.  For example, some threads are clearly
about development and design; others are user questions of the "How do
I do X?" variety; maybe there's a third topic family centered around
processing bug reports and enhancement requests; and so on.  A given
individual, of course, might participate in many different thread
types, but the important thing is that there is not a lot of overlap
between the types themselves.  They could be divided into separate
lists without causing any harmful balkanization, because the threads
rarely cross topic boundaries.</para>

<para>Actually doing this division is a two-step process.  You create
the new list (or IRC channel, or whatever it is to be), and then you
spend whatever time is necessary gently nagging and reminding people
to <emphasis>use</emphasis> the new forums appropriately.  That latter
step can last for weeks, but eventually people will get the idea.  You
simply have to make a point of always telling the sender when a post
is sent to the wrong destination, and do so visibly, so that other
people are encouraged to help out with routing.  It's also useful to
have a web page providing a guide to all the lists available; your
responses can simply reference that web page and, as a bonus, the
recipient may learn something about looking for guidelines before
posting.</para>

<para>Strategy (2) is an ongoing process, lasting the lifetime of the
project and involving many participants.  Of course it is partly a
matter of having up-to-date documentation (see
<xref linkend="documentation"></xref><phrase output="printed"> in
<xref linkend="getting-started"></xref></phrase>) and making sure to
point people there.  But it is also much more than that; the sections
that follow discuss this strategy in detail.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="using-archives">
<title>Conspicuous Use of Archives</title>

<para>Typically, all communications in an open source project (except
sometimes IRC conversations) are archived.  The archives are public
and searchable, and have referential stability: that is, once a given
piece of information is recorded at a particular address, it stays at
that address forever.</para>

<para>Use those archives as much as possible, and as conspicuously as
possible.  Even when you know the answer to some question off the top
of your head, if you think there's a reference in the archives that
contains the answer, spend the time to dig it up and present it.
Every time you do that in a publicly visible way, some people learn
for the first time that the archives are there, and that searching in
them can produce answers.  Also, by referring to the archives instead
of rewriting the advice, you reinforce the social norm against
duplicating information.  Why have the same answer in two different
places?  When the number of places it can be found is kept to a
minimum, people who have found it before are more likely to remember
what to search for to find it again.  Well-placed references also
contribute to the quality of search results in general, because they
strengthen the targeted resource's ranking in Internet search
engines.</para>

<para>There are times when duplicating information makes sense,
however.  For example, suppose there's a response already in the
archives, not from you, saying:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  To
unfrobnicate them, run these steps:

1. Shut down the Scanley server.
2. Run the 'defrobnicate' program that ships with Scanley.
3. Start up the server.
</screen>

<para>Then, months later, you see another post indicating that
someone's indexes have become frobnicated.  You search the archives
and come up with the old response above, but you realize it's missing
some steps (perhaps by mistake, or perhaps because the software has
changed since that post was written).  The classiest way to handle
this is to post a new, more complete set of instructions, and
explicitly obsolete the old post by mentioning it:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  We
saw this problem back in July, and J. Random posted a solution at
http://blahblahblah/blah.  Below is a more complete description of
how to unfrobnicate your indexes, based on J. Random's instructions
but extending them a bit:

1. Shut down the Scanley server.
2. Become the user the Scanley server normally runs as.
3. As that user, run the 'defrobnicate' program on the indexes.
4. Run Scanley by hand to see if the indexes work now.
5. Restart the server.
</screen>

<para>(In an ideal world, it would be possible to attach a note to the
old post, saying that there is newer information available and
pointing to the new post.  However, I don't know of any archiving
software that offers an "obsoleted by" feature, perhaps because it
would be mildly tricky to implement in a way that doesn't violate the
archives' integrity as a verbatim record.  This is another reason why
creating dedicated web pages with answers to common questions is a
good idea.)</para>

<para>Archives are probably most often searched for answers to
technical questions, but their importance to the project goes well
beyond that.  If a project's formal guidelines are its statutory law,
the archives are its common law: a record of all decisions made and
how they were arrived at.  In any recurring discussion, it's pretty
much obligatory nowadays to start with an archive search.  This allows
you to begin the discussion with a summary of the current state of
things, anticipate objections, prepare rebuttals, and possibly
discover angles you hadn't thought of.  Also, the other participants
will <emphasis>expect</emphasis> you to have done an archive search.
Even if the previous discussions went nowhere, you should include
pointers to them when you re-raise the topic, so people can see for
themselves a) that they went nowhere, and b) that you did your
homework, and therefore are probably saying something now that has not
been said before.</para>

<sect3 id="all-as-archives">
<title>Treat all resources like archives</title>

<para>All of the preceding advice applies to more than just mailing
list archives.  Having particular pieces of information at stable,
conveniently findable addresses should be an organizing principle for
all of the project's information.  Let's take the project FAQ as a
case study.</para>

<para>How do people use a FAQ?</para>

<orderedlist>
  <listitem>
    <para>They want to search in it for specific words and phrases.</para>
  </listitem>
  <listitem>
    <para>They want to browse it, soaking up information without
          necessarily looking for answers to specific questions.</para>
  </listitem>
  <listitem>
    <para>They expect search engines such as Google to know about the
          FAQ's content, so that searches can result in FAQ entries.</para>
  </listitem>
  <listitem>
    <para>They want to be able to refer other people directly to specific
          items in the FAQ.</para>
  </listitem>
  <listitem>
    <para>They want to be able to add new material to the FAQ, but
          note that this happens much less often than answers are
          looked up&mdash;FAQs are far more often read from than
          written to.</para>
  </listitem>
</orderedlist>

<para>Point 1 implies that the FAQ should be available in some sort of
textual format.  Points 2 and 3 imply that the FAQ should be available
as an HTML page, with point 2 additionally indicating that the HTML
should be designed for readability (i.e., you'll want some control
over its look and feel), and should have a table of contents.  Point 4
means that each individual entry in the FAQ should be assigned an HTML
<firstterm>named anchor</firstterm>, a tag that allows people to reach
a particular location on the page.  Point 5 means the source files for
the FAQ should be available in a convenient way (see <xref linkend="version-everything"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>), in a format
that's easy to edit.</para>

  <sidebar id="html-named-anchors-and-ids">
  <title>Named Anchors and ID Attributes</title>

  <para>There are two ways to get a browser to jump to a specific
  location within a web page: named anchors and id attributes.</para>

  <para>A <firstterm>named anchor</firstterm> is just a normal HTML
  anchor element (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), but with
  a "name" attribute:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>More recent versions of HTML support a generic <firstterm>id
  attribute</firstterm>, which can be attached to any HTML element,
  not just to <literal>&lt;a&gt;</literal>.  For example:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Both named anchors and id attributes are used in the same
  way.  One appends a hash mark and the label to a URL, to cause the
  browser to jump straight to that spot in the page:</para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtually all browsers support named anchors; most modern
  browsers support the id attribute.  To play it safe, I would
  recommend using either named anchors alone, or named anchors
  <emphasis>and</emphasis> id attributes together (with the same label
  for both in a given pair, of course).  Named anchors cannot be
  self-closing&mdash;even if there's no text inside the element, you
  must still write it in two-sided form:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...though normally there would be some text, such as the title
  of a section.</para>

  <para>Whether you use a named anchor, or an id attribute, or both,
  remember that the label will not be visible to someone who browses
  to that location without using the label.  But such a person might
  want to discover the label for a particular location, so they can
  mail the URL for a FAQ answer to a friend, for example.  To help
  them do this, add a <firstterm>title attribute</firstterm> to the
  same element(s) where you added the "name" and/or "id" attribute,
  for example:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>When the mouse pointer is held over the text inside the
  title-attributed element, most browsers will pop up a tiny box
  showing the title.  I usually include the hash-sign, to remind the
  user that this is what she would put at the end of the URL to jump
  straight to this location next time.</para>

  </sidebar>

<para>Formatting the FAQ like this is just one example of how to make
a resource presentable.  The same properties&mdash;direct
searchability, availability to major Internet search engines,
browsability, referential stability, and (where applicable)
editability&mdash;apply to other web pages, the source code tree, the
bug tracker, etc.  It just happens that most mailing list archiving
software long ago recognized the importance of these properties, which
is why mailing lists tend to have this functionality natively, while
other formats may require some extra effort on the maintainer's part
(<xref linkend="managing-volunteers"></xref> discusses how to spread
that maintenance burden across many volunteers).</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="codifying-tradition">
<title>Codifying Tradition</title>

<para>As a project acquires history and complexity, the amount of data
each incoming participant must absorb increases.  Those who have been
with the project a long time were able to learn, and invent, the
project's conventions as they went along.  They will often not be
consciously aware of what a huge body of tradition has accumulated, and
may be surprised at how many missteps recent newcomers seem to make.
Of course, the issue is not that the newcomers are of any lower
quality than before; it's that they face a bigger acculturation burden
than newcomers did in the past.</para>

<para>The traditions a project accumulates are as much about how to
communicate and preserve information as they are about coding
standards and other technical minutae.  We've already looked at both
sorts of standards, in
<xref linkend="developer-documentation"></xref><phrase output="printed"> 
in <xref linkend="getting-started"></xref></phrase> and
<xref linkend="written-rules"></xref><phrase output="printed"> in
<xref linkend="social-infrastructure"></xref></phrase> respectively, and
examples are given there.  What this section is about is how to keep
such guidelines up-to-date as the project evolves, especially
guidelines about how communications are managed, because those are the
ones that change the most as the project grows in size and
complexity.</para>

<para>First, watch for patterns in how people get confused.  If you
see the same situations coming up over and over, especially with new
participants, chances are there is a guideline that needs to be
documented but isn't.  Second, don't get tired of saying the same
things over and over again, and don't <emphasis>sound</emphasis> like
you're tired of saying them.  You and other project veterans will have
to repeat yourselves often; this is an inevitable side effect of the
arrival of newcomers.</para>

<para>Every web page, every mailing list message, and every IRC channel
should be considered advertising space&mdash;not for commercial
advertisements, but for ads about your project's own resources.  What
you put in that space depends on the demographics of those likely to
read it.  An IRC channel for user questions, for example, is likely to
get people who have never interacted with the project
before&mdash;often someone who has just installed the software, and
has a question he'd like answered immediately (after all, if it
could wait, he'd have sent it to a mailing list instead, which would
probably use less of his total time, although it would take longer
for an answer to come back).  People usually don't make a permanent
investment in the IRC channel; they'll show up, ask their question,
and leave.</para>

<para>Therefore, the channel topic should be aimed at people looking
for technical answers about the software <emphasis>right
now</emphasis>, rather than at, say, people who might get involved
with the project in a long term way and for whom community interaction
guidelines might be more appropriate.  Here's how a really busy
channel handles it (compare this with the earlier example in
<xref linkend="irc"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>):</para>

<screen>
You are now talking on #linuxhelp

Topic for #linuxhelp is Please READ
http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
rules are at http://www.nerdfest.org/lh_rules.html | Please consult
http://kerneltrap.org/node/view/799 before asking about upgrading to a
2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc -&gt;
update to 2.6.8.1 or 2.4.27 | hash algo disaster: http://tinyurl.com/6w8rf
| reiser4 out
</screen>

<para>With mailing lists, the "ad space" is a tiny footer appended to
every message.  Most projects put subscription/unsubscription
instructions there, and perhaps a pointer to the project's home page
or FAQ page as well.  You might think that anyone subscribed to the
list would know where to find those things, and they probably
do&mdash;but many more people than just subscribers see those mailing
list messages.  An archived post may be linked to from many places;
indeed, some posts become so widely known that they eventually have
more readers off the list than on it.</para>

<para>Formatting can make a big difference.  For example, in the
Subversion project, we were having limited success using the
bug-filtering technique described in
<xref linkend="bug-filtering"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>.  Many bogus
bug reports were still being filed by inexperienced people, and each
time it happened, the filer had to be educated in exactly the same way
as the 500 people before him.  One day, after one of our developers had
finally gotten to the end of his rope and flamed some poor user who
didn't read the issue tracker guidelines carefully enough, another
developer decided this pattern had gone on long enough.  He suggested
that we reformat the issue tracker front page so that the most
important part, the injunction to discuss the bug on the mailing lists
or IRC channels before filing, would stand out in huge, bold red
letters, on a bright yellow background, centered prominently above
everything else on the page.  We did so (you can see the results at
<ulink url="http://subversion.tigris.org/project_issues.html"></ulink>), and
the result was a noticeable drop in the rate of bogus issue filings.
We still get them, of course&mdash;we always will&mdash;but the rate
has slowed considerably, even as the number of users increases.  The
outcome is not only that the bug database contains less junk, but that
those who respond to issue filings stay in a better mood, and are more
likely to remain friendly when responding to one of the now-rare bogus
filings.  This improves both the project's image and the mental health
of its volunteers.</para>

<para>The lesson for us was that merely writing up the guidelines was
not enough.  We also had to put them where they'd be seen by those who
need them most, and format them in such a way that their status as
introductory material would be immediately clear to people unfamiliar
with the project.</para>

<para>Static web pages are not the only venue for advertising the
project's customs.  A certain amount of interactive policing (in the
friendly-reminder sense, not the handcuffs-and-jail sense) is also
required.  All peer review, even the commit reviews described in
<xref linkend="code-review"></xref><phrase output="printed"> in
<xref linkend="getting-started"></xref></phrase>, should include review
of people's conformance or non-conformance with project norms,
especially with regard to communications conventions.</para>

<para>Another example from the Subversion project: we settled on a
convention of "r12908" to mean "revision 12908 in the version control
repository."  The lower-case "r" prefix is easy to type, and because
it's half the height of the digits, it makes an easily-recognizable
block of text when combined with the digits.  Of course, settling on
the convention doesn't mean that everyone will begin using it
consistently right away.  Thus, when a commit mail comes in with a log
message like this:</para>

<screen>
------------------------------------------------------------------------
r12908 | qsimon | 2005-02-02 14:15:06 -0600 (Wed, 02 Feb 2005) | 4 lines

Patch from J. Random Contributor &lt;jrcontrib@gmail.com&gt;

* trunk/contrib/client-side/psvn/psvn.el:
  Fixed some typos from revision 12828.
------------------------------------------------------------------------
</screen>

<para>...part of reviewing that commit is to say "By the way, please
use 'r12828', not 'revision 12828' when referring to past changes."
This isn't just pedantry; it's important as much for automatic
parsability as for human readership.</para>

<para>By following the general principle that there should be
canonical referral methods for common entities, and that these
referral methods should be used consistently everywhere, the project
in effect exports certain standards.  Those standards enable people to
write tools that present the project's communications in more useable
ways&mdash;for example, a revision formatted as "r12828" could be
transformed into a live link into the repository browsing system.
This would be harder to do if the revision were written as "revision
12828", both because that form could be divided across a line break,
and because it's less distinct (the word "revision" will often appear
alone, and groups of numbers will often appear alone, whereas the
combination "r12828" can only mean a revision number).  Similar
concerns apply to issue numbers, FAQ items (hint: use a URL with a
named anchor, as described in
<xref linkend="html-named-anchors-and-ids"></xref>), etc.</para>

<para>Even for entities where there is not an obvious short, canonical
form, people should still be encouraged to provide key pieces of
information consistently.  For example, when referring to a mailing
list message, don't just give the sender and subject; also give the
archive URL <emphasis>and</emphasis> the Message-ID header.  The last
allows people who have their own copy of the mailing list (people
sometimes keep offline copies, for example to use on a laptop while
traveling) to unambiguously identify the right message even if they
don't have access to the archives.  The sender and subject wouldn't be
enough, because the same person might make several posts in the same
thread, even on the same day.</para>

<para>The more a project grows, the more important this sort of
consistency becomes.  Consistency means that everywhere people look,
they see the same patterns being followed, so they know to follow
those patterns themselves.  This, in turn, reduces the number of
questions they need to ask.  The burden of having a million readers is
no greater than that of having one; scalability problems start to
arise only when a certain percentage of those readers ask questions.
As a project grows, therefore, it must reduce that percentage by
increasing the density and accessibility of information, so that any
given person is more likely to find what he needs without having to
ask.</para>

<!--

<para><remark>See
<ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate concern.  Log message
templates.  Make sure that commit reviews apply to log messages and
other "meta" aspects of the commit as well as to the code
itself.</remark></para>

-->

</sect2>

<!-- todo: A lot of projects have designated summarizers, like the
Zack Brown (?) for the Linux kernel, and I think I've seen similar
stuff at DebianPlanet as well.  That's another thing to talk about in
this discussion of "Strategy (2)", and maybe something to add to the
Project Roles examples in <xref linkend="share-management"/>.
-->

</sect1>

<sect1 id="bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para>In any project that's making active use of its bug tracker,
there is always a danger of the tracker turning into a discussion
forum itself, even though the mailing lists would really be better.
Usually it starts off innocently enough: someone annotates an issue
with, say, a proposed solution, or a partial patch.  Someone else sees
this, realizes there are problems with the solution, and attaches
another annotation pointing out the problems.  The first person
responds, again by appending to the issue...and so it goes.</para>

<para>The problem with this is, first, that the bug tracker is a
pretty cumbersome place to have a discussion, and second, that other
people may not be paying attention&mdash;after all, they expect
development discussion to happen on the development mailing list, so
that's where they look for it.  They may not be subscribed to the
issue changes list at all, and even if they are, they may not follow it
very closely.</para>

<para>But exactly where in the process did something go wrong?  Was it
when the original person attached her solution to the
issue&mdash;should she have posted it to the list instead?  Or was it
when the second person responded in the issue, instead of on the
list?</para>

<para>There isn't one right answer, but there is a general principle:
if you're just adding data to an issue, then do it in the tracker, but
if you're starting a <emphasis>conversation</emphasis>, then do it on
the mailing list.  You may not always be able to tell which is the
case, but just use your best judgement.  For example, when attaching a
patch that contains a potentially controversial solution, you might be
able to anticipate that people are going to have questions about it.
So even though you would normally attach the patch to the issue
(assuming you don't want to or can't commit the change directly), in
this case you might choose to post it to a mailing list instead.  At
any rate, there eventually will come a point in the exchange where one
party or the other can tell that it is about to go from mere appending
of data to an actual conversation&mdash;in the example that started
this section, that would be the second respondent, who on realizing
that there were problems with the patch, could predict that a real
conversation is about to ensue, and therefore that it should be held
in the appropriate medium.</para>

<para>To use a mathematical analogy, if the information looks like it
will be quickly convergent, then put it directly in the bug tracker;
if it looks like it will be divergent, then a mailing list or IRC
channel would be a better place.</para>

<para>This doesn't mean there should never be any exchanges in the
bug tracker.  Asking for more details of the reproduction recipe
from the original reporter tends to be a highly convergent process,
for instance.  The person's response is unlikely to raise new issues;
it's simply going to flesh out information already filed.  There's no
need to distract the mailing list with that process; by all means,
take care of it with a series of comments in the tracker.  Likewise,
if you're fairly sure that the bug has been misreported (i.e., is not
a bug), then you can simply say so right in the issue.  Even pointing
out a minor problem with a proposed solution is fine, assuming the
problem is not a showstopper for the entire solution.</para>

<para>On the other hand, if you're raising philosophical issues about
the bug's scope or the software's proper behavior, you can be pretty
sure other developers will want to be involved.  The discussion is
likely to diverge for a while before it converges, so do it on the
mailing list.</para>

<para>Always link to the mailing list thread from the issue, when you
choose to post to the mailing list.  It's still important for someone
following the issue to be able to reach the discussion, even if the
issue itself isn't the forum of discussion.  The person who starts the
thread may find this laborious, but open source is fundamentally a
writer-responsible culture: it's much more important to make things
easy for the tens or hundreds of people who may read the bug than for
the three or five people writing about it.</para>

<para>It's fine to take important conclusions or summaries from the
list discussion and paste them into the issue, if that will make
things convenient for readers.  A common idiom is to start a list
discussion, put a link to the thread in the issue, and then when the
discussion finishes, paste the final summary into the issue (along
with a link to the message containing that summary), so someone
browsing the issue can easily see what conclusion was reached without
having to click to somewhere else.  Note that the usual "two masters"
data duplication problem does not exist here, because both archives
and issue comments are usually static, unchangeable data
anyway.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="publicity">
<title>Publicity</title>

<para>In free software, there is a fairly smooth continuum between
purely internal discussions and public relations statements.  This is
partly because the target audience is always ill-defined: given that
most or all posts are publicly accessible, the project doesn't have
full control over the impression the world gets.  Someone&mdash;say, a
<ulink url="slashdot.org"></ulink> editor&mdash;may draw millions of readers'
attention to a post that no one ever expected to be seen outside the
project.  This is a fact of life that all open source projects live
with, but in practice, the risk is usually small.  In general, the
announcements that the project most wants publicized are the ones that
will be most publicized, assuming you use the right mechanisms to
indicate relative newsworthiness to the outside world.</para>

<para>For major announcements, there tend to be four or five main
channels of distribution, on which announcements should be made as
nearly simultaneously as possible:</para>

<orderedlist>

  <listitem><para>Your project's front page is probably seen by more
            people than any other part of the project.  If you have a
            really major announcement, put a blurb there.  The blurb
            should be a very brief synopsis that links to the press
            release (see below) for more information.</para>
  </listitem>

  <listitem><para>At the same time, you should also have a "News" or
            "Press Releases" area of the web site, where the
            announcement can be written up in detail.  Part of the
            purpose of a press release is to provide a single,
            canonical "announcement object" that other sites can link
            to, so make sure it is structured accordingly: either as
            one web page per release, as a discrete blog entry, or
            as some other kind of entity that can be linked to while
            still being kept distinct from other press releases in the
            same area.</para>
  </listitem>

  <listitem><para>If your project has an RSS feed, make sure the
            announcement goes out there too.  This may happen
            automatically when you create the press release, depending
            on how things are set up at your site.
            (<firstterm>RSS</firstterm> is a mechanism for
            distributing meta-data-rich news summaries to
            "subscribers", that is, people who have indicated an
            interest in receiving those summaries.  See
     <ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html"></ulink>
            for more information about RSS.)</para>
  </listitem>

  <listitem><para>If the announcement is about a new release of the
            software, then update your project's entry on
            <ulink url="http://freshmeat.net/"></ulink> (see
            <xref linkend="announcing"></xref> about creating the entry
            in the first place).  Every time you update a Freshmeat
            entry, that entry goes onto the Freshmeat change list
            for the day.  The change list is updated not only on
            Freshmeat itself, but on various portal sites (including
            <ulink url="slashdot.org"></ulink>) which are watched eagerly by
            hordes of people.  Freshmeat also offers the same data via
            RSS feed, so people who are not subscribed to your
            project's own RSS feed might still see the announcement
            via Freshmeat's.</para>
  </listitem>

  <listitem><para>Send a mail to your project's announcement mailing
            list.  This list's name should actually be "announce",
            that is, <literal>announce@yourprojectdomain.org</literal>,
            because that's a fairly standard convention now, and the
            list's charter should make it clear that it is very
            low-traffic, reserved for major project announcements.
            Most of those announcements will be about new releases of
            the software, but occasionally other events, such as a
            fundraising drive, the discovery of a security
            vulnerability (see
            <xref linkend="security"></xref>)<phrase output="printed">
            later in this chapter</phrase>, or a
            major shift in project direction may be posted there as
            well.  Because it is low traffic and used only for
            important things, the <literal>announce</literal> list
            typically has the highest subscribership of any mailing
            list in the project (of course, this means you shouldn't
            abuse it&mdash;consider carefully before posting).  To
            avoid random people making announcements, or worse, spam
            getting through, the <literal>announce</literal> list must
            always be moderated.</para>
  </listitem>

</orderedlist>

<para>Try to make the announcements in all these places at the same
time, as nearly as possible.  People might get confused if they see an
announcement on the mailing list but then don't see it reflected on
the project's home page or in its press releases area.  If you get the
various changes (emails, web page edits, etc.) queued up and
then send them all in a row, you can keep the window of inconsistency
very small.</para>

<para>For a less important event, you can eliminate some or all of the
above outlets.  The event will still be noticed by the outside world
in direct proportion to its importance.  For example, while a new
release of the software is a major event, merely setting the date of
the next release, while still somewhat newsworthy, is not nearly as
important as the release itself.  Setting a date is worth an email to
the daily mailing lists (not the announce list), and an update of the
project's timeline or status web page, but no more.</para>

<para>However, you might still see that date appearing in discussions
elsewhere on the Internet, wherever there are people interested in the
project.  People who are lurkers on your mailing lists, just listening
and never saying anything, are not necessarily silent elsewhere.  Word
of mouth gives very broad distribution; you should count on it, and
construct even minor announcements in such a way as to encourage
accurate informal transmission.  Specifically, posts that you expect
to be quoted should have a clearly meant-to-be-quoted portion, just as
though you were writing a formal press release.  For example:</para>

  <blockquote>
     <para><emphasis>Just a progress update: we're planning to release
     version 2.0 of Scanley in mid-August 2005.  You can always check
     http://www.scanley.org/status.html for updates.  The major new
     feature will be regular-expression searches.</emphasis></para>

     <para><emphasis>Other new features include:&nbsp;... There will
     also be various bugfixes, including:&nbsp;...</emphasis></para>
  </blockquote>

<para>The first paragraph is short, gives the two most important
pieces of information (the release date and the major new feature),
and a URL to visit for further news.  If that paragraph is the only
thing that crosses someone's screen, you're still doing pretty well.
The rest of the mail could be lost without affecting the gist of the
content.  Of course, sometimes people will link to the entire mail
anyway, but just as often, they'll quote only a small part.  Given that
the latter is a possibility, you might as well make it easy for them,
and in the bargain get some influence over what gets quoted.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="security">
<title>Announcing Security Vulnerabilities</title>

<para>Handling a security vulnerability is different from handling any
other kind of bug report.  In free software, doing things openly and
transparently is normally almost a religious credo.  Every step of the
standard bug-handling process is visible to all who care to watch: the
arrival of the initial report, the ensuing discussion, and the
eventual fix.</para>

<para>Security bugs are different.  They can compromise users' data,
and possibly users' entire computers.  To discuss such a problem
openly would be to advertise its existence to the entire
world&mdash;including to all the parties who might make malicious use
of the bug.  Even merely committing a fix effectively announces the
bug's existence (there are potential attackers who watch the commit
logs of public projects, systematically looking for changes that
indicate security problems in the pre-change code).  Most open source
projects have settled on approximately the same set of steps to handle
this conflict between openness and secrecy, based on the these basic
guidelines:</para>

<orderedlist>
  <listitem><para>Don't talk about the bug publicly until a fix is
            available; then supply the fix at exactly the same moment
            you announce the bug.</para> 
  </listitem>
  <listitem><para>Come up with that fix as fast as you
            can&mdash;especially if someone outside the project
            reported the bug, because then you know there's at least
            one person outside the project who is able to exploit the
            vulnerability.</para>
  </listitem>
</orderedlist>

<para>In practice, those principles lead to a fairly standardized
series of steps, which are described in the sections below.</para>

<sect3 id="security-receiving">
<title>Receive the report</title>

<para>Obviously, a project needs the ability to receive security bug
reports from anyone.  But the regular bug reporting address won't do,
because it can be watched by anyone too.  Therefore, have a separate
mailing list for receiving security bug reports.  That mailing list
must not have publicly readable archives, and its subscribership must
be strictly controlled&mdash;only long-time, trusted developers can be
on the list.  If you need a formal definition of "trusted", you can
use "anyone who has had commit access for two years or more" or
something like that, to avoid favoritism.  This is the group that will
handle security bugs.</para>

<para>Ideally, the security list should not be spam-protected or
moderated, since you don't want an important report to get filtered
out or delayed just because no moderators happened to be online that
weekend.  If you do use automated spam-protection software, try to
configure it with high-tolerance settings; it's better to let a few spams
through than to miss a report.  For the list to be effective, you must
advertise its address, of course; but given that it will be unmoderated
and, at most, lightly spam-protected, try to never to post its address
without some sort of address hiding transformation, as described in
<xref linkend="address-hiding"></xref><phrase output="printed"> in
<xref linkend="technical-infrastructure"></xref></phrase>.
Fortunately, address-hiding need not make the address illegible; see
<ulink url="http://subversion.tigris.org/security.html"></ulink>, and view
that page's HTML source, for an example.</para>

</sect3>

<sect3 id="security-finding-a-fix">
<title>Develop the fix quietly</title>

<para>So what does the security list do when it receives a report?
The first task is to evaluate the problem's severity and
urgency:</para>

<orderedlist>
  <listitem><para>How serious is the vulnerability?  Does it allow a
            malicious attacker to take over the computer of someone
            who uses your software?  Or does it, say, merely leak
            information about the sizes of some of their files?</para>
  </listitem>

  <listitem><para>How easy is it to exploit the vulnerability?  Can
            an attack be scripted, or does it require circumstantial
            knowledge, educated guessing, and luck?</para>
  </listitem>

  <listitem><para><emphasis>Who</emphasis> reported the problem to
            you?  The answer to this question doesn't change the
            nature of the vulnerability, of course, but it does give
            you an idea of how many other people might know about it.
            If the report comes from one of the project's own
            developers, you can breathe a little easier (but only a
            little), because you can trust them not to have told
            anyone else about it.  On the other hand, if it came in an
            email from <literal>anonymous14@globalhackerz.net</literal>,
            then you'd better act as fast as you can.  The person did
            you a favor by informing you of the problem at all, but you
            have no idea how many other people she's told, or how long
            she'll wait before exploiting the vulnerability on live
            installations.</para>
  </listitem>
</orderedlist>

<para>Note that the difference we're talking about here is often just
a narrow range between <emphasis>urgent</emphasis>
and <emphasis>extremely&nbsp;urgent</emphasis>.  Even when the report
comes from a known, friendly source, there could be other people on
the Net who discovered the bug long ago and just haven't reported it.
The only time things aren't urgent is when the bug inherently does not
compromise security very severely.</para>

<para>The "<literal>anonymous14@globalhackerz.net</literal>" example
is not facetious, by the way.  You really may get bug reports from
identity-cloaked people who, by their words and behavior, never quite
clarify whether they're on your side or not.  It doesn't matter: if
they've reported the security hole to you, they'll feel they've done
you a good turn, and you should respond in kind.  Thank them for the
report, give them a date on or before which you plan to release a
public fix, and keep them in the loop.  Sometimes they may
give <emphasis>you</emphasis> a date&mdash;that is, an implicit threat
to publicize the bug on a certain date, whether you're ready or not.
This may feel like a bullying power play, but it's more likely a
pre&euml;mptive action resulting from past disappointment with
unresponsive software producers who didn't take security reports
seriously enough.  Either way, you can't afford to tick this person
off.  After all, if the bug is severe, he has knowledge that could
cause your users big problems.  Treat such reporters well, and hope
that they treat you well.</para>

<para>Another frequent reporter of security bugs is the security
professional, someone who audits code for a living and keeps up on the
latest news of software vulnerabilities.  These people usually have
experience on both sides of the fence&mdash;they've both received and
sent reports, probably more than most developers in your project have.
They too will usually give a deadline for fixing a vulnerability
before going public.  The deadline may be somewhat negotiable, but
that's up to the reporter; deadlines have become recognized among
security professionals as pretty much the only reliable way to get
organizations to address security problems promptly.  So don't treat
the deadline as rude; it's a time-honored tradition, and there are
good reasons for it.</para>

<para>Once you know the severity and urgency, you can start working on
a fix.  There is sometimes a tradeoff between doing a fix elegantly
and doing it speedily; this is why you must agree on the urgency
before you start.  Keep discussion of the fix restricted to the
security list members, of course, plus the original reporter (if she
wants to be involved) and any developers who need to be brought in for
technical reasons.</para>

<para>Do not commit the fix to the repository.  Keep it in patch form
until the go-public date.  If you were to commit it, even with an
innocent-looking log message, someone might notice and understand the
change.  You never know who is watching your repository and why they
might be interested.  Turning off commit emails wouldn't help; first
of all, the gap in the commit mail sequence would itself look
suspicious, and anyway, the data would still be in the repository.
Just do all development in a patch and keep the patch in some private
place, perhaps a separate, private repository known only to the people
already aware of the bug.  (If you use a decentralized version control
system like Arch or SVK, you can do the work under full version
control, and just keep that repository inaccessible to
outsiders.)</para>

</sect3>

<sect3 id="security-cve">
<title>CAN/CVE numbers</title>

<para>You may have seen a <firstterm>CAN number</firstterm> or
a <firstterm>CVE number</firstterm> associated with security problems.
These numbers usually look like "CAN-2004-0397" or
"CVE-2002-0092", for example.</para>

<para>Both kinds of numbers represent the same type of entity: an
entry in the list of "Common Vulnerabilities and Exposures" list
maintained at <ulink url="http://cve.mitre.org/"></ulink>.  The purpose of
the list is to provide standardized names for all known security
problems, so that everyone has a unique, canonical name to use when
discussing one, and a central place to go to find out more
information.  The only difference between a "CAN" number and a "CVE"
number is that the former represents a candidate entry, not yet
approved for inclusion in the official list by the CVE Editorial
Board, and the latter represents an approved entry.  However, both
types of entries are visible to the public, and an entry's number does
not change when it is approved&mdash;the "CAN" prefix is simply
replaced with "CVE".</para>

<para>A CAN/CVE entry does not itself contain a full description of
the bug and how to protect against it.  Instead, it contains a brief
summary, and a list of references to external resources (such as
mailing list archives) where people can go to get more detailed
information.  The real purpose of <ulink url="http://cve.mitre.org/"></ulink>
is to provide a well-organized space in which every vulnerability can
have a name and a clear route to more data.  See
<ulink url="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2002-0092"></ulink>
for an example of an entry.  Note that the references can be very
terse, with sources appearing as cryptic abbreviations.  A key to
those abbreviations is at
<ulink url="http://cve.mitre.org/cve/refs/refkey.html"></ulink>.</para>

<para>If your vulnerability meets the CVE criteria, you may wish to
acquire it a CAN number.  The process for doing so is deliberately
gated: basically, you have to know someone, or know someone who knows
someone.  This is not as crazy as it might sound.  In order for the
CVE Editorial Board to avoid being overwhelmed with spurious or
poorly written submissions, they take submissions only from sources
they already know and trust.  In order to get your vulnerability
listed, therefore, you need to find a path of acquaintance from your
project to the CVE Editorial Board.  Ask around among your developers;
one of them will probably know someone else who has either done the
CAN process before, or knows someone who has, etc.  The advantage of
doing it this way is also that somewhere along the chain, someone may
know enough to tell you that a) it wouldn't count as a vulnerability
or exposure according to MITRE's criteria, so there is no point
submitting it, or b) the vulnerability already
<emphasis>has</emphasis> a CAN or CVE number.  The latter can happen
if the bug has already been published on another security advisory
list, for example at <ulink url="http://www.cert.org/"></ulink> or on the
BugTraq mailing list at <ulink url="http://www.securityfocus.com/"></ulink>.
(If that happened without your project hearing about it, then you
should worry what else might be going on that you don't know
about.)</para>

<para>If you get a CAN/CVE number at all, you usually want to get it
in the early stages of your bug investigation, so that all further
communications can refer to that number.  CAN entries are embargoed
until the go-public date; the entry will exist as an empty placeholder
(so you don't lose the name), but it won't reveal any information
about the vulnerability until the date on which you will be announcing
the bug and the fix.</para>

<para>More information about the CAN/CVE process may be found at
<ulink url="http://cve.mitre.org/about/candidates.html"></ulink>, and a
particularly clear exposition of one open source project's use of
CAN/CVE numbers is at
<ulink url="http://www.debian.org/security/cve-compatibility"></ulink>.</para>

</sect3>

<sect3 id="security-prenotification">
<title>Pre-notification</title>

<para>Once your security response team (that is, those developers who
are on the security mailing list, or who have been brought in to deal
with a particular report) has a fix ready, you need to decide how to
distribute it.</para>

<para>If you simply commit the fix to your repository, or otherwise
announce it to the world, you effectively force everyone using your
software to upgrade immediately or risk being hacked.  It is sometimes
appropriate, therefore, to do <firstterm>pre-notification</firstterm>
for certain important users.  This is particularly true with
client/server software, where there may be well-known servers that are
tempting targets for attackers.  Those servers' administrators would
appreciate having an extra day or two to do the upgrade, so that they
are already protected by the time the exploit becomes public
knowledge.</para>

<para>Pre-notification simply means sending mails to those
administrators before the go-public date, telling them of the
vulnerability and how to fix it.  You should send pre-notification
only to people you trust to be discreet with the information.  That
is, the qualification for receiving pre-notification is twofold: the
recipient must run a large, important server where a compromise would
be a serious matter, <emphasis>and</emphasis> the recipient must be
known to be someone who won't blab about the security problem before
the go-public date.</para>

<para>Send each pre-notification mail individually (one at a time) to
each recipient.  Do <emphasis>not</emphasis> send to the entire list
of recipients at once, because then they would see each others'
names&mdash;meaning that you would essentially be alerting each
recipient to the fact that each <emphasis>other</emphasis> recipient
may have a security hole in her server.  Sending it to them all via
blind CC (BCC) isn't a good solution either, because some admins
protect their inboxes with spam filters that either block or reduce
the priority of BCC'd mail, since so much spam is sent via BCC these
days.</para>

<para>Here's a sample pre-notification mail:</para>

<screen>
From: Your Name Here
To: admin@large-famous-server.com
Reply-to: Your Name Here (not the security list's address)
Subject: Confidential Scanley vulnerability notification.


This email is a confidential pre-notification of a security alert
in the Scanley server.

Please *do not forward* any part of this mail to anyone.  The public
announcement is not until May 19th, and we'd like to keep the
information embargoed until then.

You are receiving this mail because (we think) you run a Scanley
server, and would want to have it patched before this security hole is
made public on May 19th.

References:
===========

   CAN-2004-1771: Scanley stack overflow in queries

Vulnerability:
==============

   The server can be made to run arbitrary commands if the server's
   locale is misconfigured and the client sends a malformed query.

Severity:
=========

   Very severe, can involve arbitrary code execution on the server.

Workarounds:
============

   Setting the 'natural-language-processing' option to 'off' in
   scanley.conf closes this vulnerability.

Patch:
======

   The patch below applies to Scanley 3.0, 3.1, and 3.2.

   A new public release (Scanley 3.2.1) will be made on or just before
   May 19th, so that it is available at the same time as this
   vulnerability is made public.  You can patch now, or just wait for
   the public release.  The only difference between 3.2 and 3.2.1 will
   be this patch.

[...patch goes here...]
</screen>

<para>If you have a CAN number, include it in the pre-notification (as
shown above), even though the information is still embargoed and
therefore the MITRE page will show nothing.  Including the CAN number
allows the recipient to know with certainty that the bug they were
pre-notified about is the same one they later hear about through
public channels, so they don't have to worry whether further action is
necessary or not, which is precisely the point of CAN/CVE
numbers.</para>

</sect3>

<sect3 id="security-announcing">
<title>Distribute the fix publicly</title>

<para>The last step in handling a security bug is to distribute the
fix publicly.  In a single, comprehensive announcement, you should
describe the problem, give the CAN/CVE number if any, describe how to
work around it, and how to permanently fix it.  Usually "fix" means
upgrading to a new version of the software, though sometimes it can
mean applying a patch, particularly if the software is normally run in
source form anyway.  If you do make a new release, it should differ
from some existing release by exactly the security patch.  That way,
conservative admins can upgrade without worrying about what else they
might be affecting; they also don't have to worry about future upgrades,
because the security fix will be in all future releases as a matter of
course.  (Details of release procedures are discussed in
<xref linkend="security-releases"></xref><phrase output="printed"> in
<xref linkend="development-cycle"></xref></phrase>.)</para>

<para>Whether or not the public fix involves a new release, do the
announcement with roughly the same priority as you would a new
release: send a mail to the project's <literal>announce</literal>
list, make a new press release, update the Freshmeat entry, etc.
While you should never try to play down the existence of a security
bug out of concern for the project's reputation, you may certainly set
the tone and prominence of a security announcement to match the actual
severity of the problem.  If the security hole is just a minor
information exposure, not an exploit that allows the user's entire
computer to be taken over, then it may not warrant a lot of fuss.  You
may even decide not to distract the <literal>announce</literal> list
with it.  After all, if the project cries wolf every time, users might
end up thinking the software is less secure than it actually is, and
also might not believe you when you have a really big problem to
announce.  See
<ulink url="http://cve.mitre.org/about/terminology.html"></ulink> for a good
introduction to the problem of judging severity.</para>

<para>In general, if you're unsure how to treat a security problem,
find someone with experience and talk to them about it.  Assessing and
handling vulnerabilities is very much an acquired skill, and it's easy
to make missteps the first few times.</para>

</sect3>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
