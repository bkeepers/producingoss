<chapter id="pfs-ch-1">

<title>Introduction</title>

<simplesect>

<para> Free software has been called a programming methodology, a
political movement, and, most recently, a business strategy.  It is
all of these things, but it is something more as well: it is a
culture.  It has its particular norms and conventions; it rewards
certain behaviors and punishes others; it has distinct (and sometimes
counterintuitive) concepts of rudeness and politeness.  While it is
not monolithic &mdash; it is at least as prone to internal dissent and
factionalism as any geographically bound culture &mdash; it still has
a recognizable and dependable core.  A person who understands this
core can travel far and wide in the open source world, encountering
many local variations in custom and dialect, yet be able to
participate effectively everywhere.  </para>

<para> This book is meant to be a practical guide to working with free
software communities, not an anthropological study.  Nevertheless, you
need some background knowledge to operate successfully.
</para>

<screen>
go to history here?
</screen>

<para> A key component of that core is that this is a culture by
choice.  Therefore, to operate successfully in it, you have to not
only understand the culture itself, you have to understand why people
choose to be in it.  Coercive techniques almost never work: when
people are unhappy at one project, they tend to wander off to another
one.  Free software is remarkable even among volunteer communities for
its lightness of investment.  Although the founders of a project may
put in significant initial effort to get it up and running, most of
those who work on it after that simply donate bits of time whenever
they feel like it.  They usually don't contribute money or physical
goods to the project, and often they have never actually met the other
participants face-to-face.  Thus, the normal conduits by which humans
bond with each other and form lasting groups are here narrowed down to
a small channel: the written word, carried over electronic wires.
Because of this, it can take a long time for a cohesive and dedicated
group to form.  Conversely, it's quite easy for a project to lose
large numbers of potential volunteers in the first five minutes of
acquaintanceship.  If a project doesn't make a good first impression,
it rarely gets a second chance.  No one had to get in their car and
drive out to a workshop, after all; they just browsed some web pages
and maybe subscribed to an email list.  If things don't work out, they
can unsubscribe and walk away without another thought.  </para>

<para>
The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships 
</para>


<para>
This anonymity results in 
</para>

<screen>
You also have to be careful not to exoticize it or believe the myths,
like some paradisical vacation island depicted on brochures.  The NYT
and NPR and whatnot may be running breathless articles and ads
(mention that Novell ad), but that doesn't mean the myths are true.
Segue into the myth-dispelling portion of the outline.

[Then basically follow the outline.]
</screen>


<screen> In twelve years, I've seen a lot of free software projects
fail.  This is not because I have an especially sensitive nose for
finding failures.  It's because most projects fail.  Failure is the
norm.  If I had to summarize the most common reasons for failure,
they would be:

   - failures of cultural navigation
   - failures of psychology (failure to place oneself in contributor's head)

Technical reasons would come last.  [refer to Aramis here?]
</screen>


<screen>
point out how training people to be "skilled" in the culture is not a
zero sum game.  I've always hated those books that claim to teach you
how to "get ahead" of the competition (for example, how to win at
tennis, how to win at arguments, etc) (and wondered why anyone writes
them).  It's logically impossible for everyone to be ahead.

For example, it's not an equal loss to all other projects when you
attract a volunteer.  had you lost them, it's no guarantee they would
have gone on to work somewhere else.  They might just watch more TV.

But with cooperative positive-sum systems like free software, it *is*
possible.  The more people are skilled at navigating this culture, the
better off the culture is.  Or, put another way, if *you* learn this
culture, *I* benefit -- and the more of it you do, the better off I
am / we all are.  </screen>

</simplesect>


<!-- ======================== SECTION 1 ============================== -->
<sect1 id="pfs-ch-1-sect-1">
<title>History</title>
<para> todo</para>
</sect1>


<!-- ======================== SECTION 2 ============================== -->
<sect1 id="pfs-ch-1-sect-2">
<title>Basics</title>
<para> todo </para>
</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
