<chapter id="pfs-ch-1">

<title>Introduction <!-- [ 10-15 pp ] --></title>

<simplesect>

<para> Most free software projects fail. </para>

<para> We tend not to hear very much about the failures.  Only
successful projects attract attention, and there are so many free
software projects in total<footnote><para>SourceForge.net, one popular
hosting site, had 79,225 projects registered as of mid-April, 2004.
This is nowhere near the total number of free software projects on the
Internet, of course, it's just the ones that chose to use
SourceForge.</para></footnote> that even if only a tiny percentage
succeed, the result is still a lot of useable free software.  We also
don't hear about the failures because failure is not an event.  There
is no single moment when a project ceases to be viable; people just
sort of drift away and stop working on it.  There may be a moment when
a final change is made to the project, but those who made it usually
didn't know at the time that it was the last one.  There is not even a
clear definition of when a project is expired.  Is it when it hasn't
been actively worked on for six months?  When its user base stops
growing, without having exceeded the developer base?  What if the
developers of one project abandon it because they realized they were
duplicating the work of another &mdash; and what if they join that
other project, then expand it to include much of their earlier effort?
Did the first project end, or just change homes? </para>

<para> Because of such complexities, it's impossible to put a precise
number on the failure rate.  But instinct, anecdotal evidence from
over a decade in open source, and a little Googling all point to the
same conclusion: the rate is extremely high, probably on the order 90%
or 95%.  The number climbs higher if you include surviving but
dysfunctional projects: those which <emphasis>are</emphasis> producing
running code, but which are not happy places to be, or are not making
progress as quickly or as dependably as they could.  </para>

<para> Yet everyone goes into a project expecting success.  No one
would take the trouble to set up a web site and mailing lists and
design documents all in the expectation of things turning out badly.
The collaborators who join later are not planning on failure either.
To participate in a project, even a little, is a clear statement of
belief in its potential.  But somewhere along the way, something often
goes wrong.  What happens?  </para>

<para> Frequently, the problems are not technical in nature, but
cultural and social.  Ten years ago, even five, it would have been
premature to talk about a global culture of free software, but not
now.  A recognizable culture has slowly emerged, and while it is
certainly not monolithic &mdash; it is at least as prone to internal
dissent and factionalism as any geographically bound culture &mdash;
it does have a basically consistent core.  Successful open source
projects usually exhibit some or all of the characteristics of this
core.  They reward certain types of behaviors, and punish others; they
create an atmosphere that encourages unplanned participation,
sometimes at the expense of central coordination; they have concepts
of rudeness and politeness that can differ substantially from those
prevalent elsewhere.  Most importantly, longtime participants have
generally internalized these standards, so that they share a rough
consensus about expected conduct.  Unsuccessful projects usually
deviate in one or more ways from this core, albeit unintentionally,
and often do not have a consensus about what constitutes reasonable
default behavior.  This means that when problems arise, the situation
can quickly deteriorate, as the participants may not have an
already-established stock of cultural reflexes to fall back on for
resolving differences. </para>

<para> This book is a practical guide to running open source projects,
not an anthropological study nor a history.  However, a working
knowledge of the origins of today's free software culture is an
essential foundation for any practical advice.  A person who
understands the culture can travel far and wide in the open source
world, encountering many local variations in custom and dialect, yet
still be able to participate comfortably and effectively everywhere.
A person who does not understand the culture will find the process of
organizing or participating in a project difficult and full of
surprises.  Since the number of people developing free software is
still growing by leaps and bounds, there are many people in that
latter category.  This is largely a culture of recent immigrants, and
will continue to be so for some time.  If you think you might be one,
then the next section will help provide background for discussions
you'll encounter later, both in this book and on the Internet.  (On
the other hand, if you've been working with open source for a while,
you may already know a lot of the history, so feel free to skip the
next section.)  </para>

</simplesect>


<!-- ======================== SECTION 1 ============================== -->
<sect1 id="pfs-ch-1-sect-1">
<title>History</title>

<para> Software sharing has been around as long as software itself.
In the early days of computers, manufacturers felt that competitive
advantages were to be had mainly in hardware innovation, and so didn't
pay much attention to software as a business asset.  Many of the
customers for these early machines were scientists or technicians, who
were able to modify and extend the software shipped with the machine
themselves.  Customers sometimes distributed their patches back not
only to the manufacturer, but to other owners of similar machines.
The manufacturers often tolerated and even encouraged this: in their
eyes, any improvement made to the software probably just made the
machine more attractive to other potential customers.  </para>

<para> Although this early period resembled today's free software
culture in many ways, it differed in two crucial respects.  First,
there was as yet little standardization of hardware, so software
written for one machine would generally not work on another.  It was a
time of flourishing innovation in computer design, and the diversity
of computing architectures meant that everything was incompatible with
everything else.  Programmers therefore tended to acquire expertise in
a particular architecture or family of architectures (whereas today
they would be more likely to acquire expertise in a programming
language or family of languages, confident that their expertise will
be transferable to whatever computing platform they happen to find
themselves working with).  Since code and expertise tended to be
specific to one kind of computer, their accumulation had the effect of
making that computer more valuable &mdash; thus it was in the
manufacturer's interests to for such code and knowledge to spread as
widely as possible.  </para>

<para> Second, there was no Internet.  Though there were fewer legal
restrictions on sharing than today, there were more technical ones:
the means of getting data from place to place were inconvenient and
cumbersome, relatively speaking.  There were some small, local
networks, good for sharing information among employees at the same
research lab or company.  But there remained barriers to overcome if
one wanted to share with everyone, no matter where they were.  Of
course, these barriers <emphasis>were</emphasis> overcome in many
cases.  Sometimes different groups made contact with each other
independently, sending disks or tapes through land mail, and sometimes
the manufacturers themselves served as central clearing houses for
patches.  But the physical realities of data transmission meant there
was always an impedance to sharing, an impedance proportional to the
distance (real or organizational) that the software had to travel.
Widespread, frictionless sharing, as we know it today, was not
possible.  </para>

<para> As the industry matured, several interrelated changes occurred
simultaneously.  The wild diversity of hardware designs gradually gave
way to a few clear winners &mdash; winners through superior
technology, superior marketing, or some combination thereof.  At the
same time, the development of so-called "high level" programming
languages meant that one could write a program once, in one language,
and have it automatically translated ("compiled") to run on different
kinds of computers.  The implications of this were not lost on the
hardware manufacturers: a customer could now undertake a major
software engineering effort without necessarily locking themselves
into one particular computer architecture.  When this was combined
with the fact that the performance differences between different
computers were gradually narrowing, as the less efficient designs were
weeded out, a manufacturer that treated its hardware as its only asset
could look forward to a future of declining profit margins.  Raw
computing power was becoming a fungible good, while software was
becoming the differentiator.  Selling software, or at least treating
it as an integral part of hardware sales, began to look like a good
strategy.  </para>

<para> Naturally, this meant that manufacturers had to start enforcing
the copyrights on their code more strictly.  If users simply continued
to share and modify code freely among themselves, they might
independently reimplement some of the improvements now being sold as
"added value" by the supplier.  Worse, shared code could get into the
hands of competitors.  The irony is that all this was happening around
the time the Internet was getting off the ground.  Just when truly
unobstructed software sharing was finally becoming technically
possible, changes in the computer business made it economically
undesirable, at least from the point of view of any single company.
The suppliers clamped down, either denying users access to the code
that ran their machines, or insisting on non-disclosure agreements
that made effective sharing impossible.  </para>

<para> As the world of unrestricted code swapping slowly faded away, a
counterreaction crystallized in the mind of at least one programmer.
Richard Stallman worked in the Artificial Intelligence Lab at the
Massachusetts Institute of Technology in the 1970s and early 80s,
during what turned out to be a golden age and a golden location for
code sharing.  The AI Lab had a strong "hacker
ethic"<footnote><para>Stallman uses the word "hacker" in the sense of
"someone who loves to program and enjoys being clever about it", not
the relatively new meaning of "someone who breaks into
computers".</para></footnote>, and people were not only encouraged but
expected to share whatever improvements they made to the system.  As
Stallman wrote later:
</para>

    <blockquote>
      <!-- Okay, I admire the whole semantic-not-presentational
           markup philosophy.  It's great.  It will end world hunger,
           prevent nuclear proliferation, and make Eddie Murphy funny
           again.  Nevertheless, *I want italics* in my blockquotes,
           dang it.  Not "the idea" of italics, not "the moral
           equivalent of italics", not "the font style formerly known
           as italic", but honest-to-goodness italics.  Every time.
           If <emphasis></emphasis> is how to do it, then that's what
           we'll use. --> 

      <para><emphasis>We did not call our software "free software",
      because that term did not yet exist; but that is what it was.
      Whenever people from another university or a company wanted to
      port and use a program, we gladly let them.  If you saw someone
      using an unfamiliar and interesting program, you could always
      ask to see the source code, so that you could read it, change
      it, or cannibalize parts of it to make a new program.
      </emphasis> </para>

      <para>(from <emphasis role="bold"><systemitem class="url"
      >http://www.gnu.org/gnu/thegnuproject.html</systemitem></emphasis>)
      </para>
    </blockquote>


<para> This edenic community collapsed around Stallman shortly after
1980.  A startup company hired away many of the AI Lab programmers, to
work on an operating system similar to what they had been working on
before, only now under an exclusive license.  At the same time, the
Lab acquired new equipment that came with a proprietary operating
system.  Stallman began to see a larger pattern to what was happening:
</para>

    <blockquote>
      <para><emphasis>The modern computers of the era, such as the VAX
      or the 68020, had their own operating systems, but none of them
      were free software: you had to sign a nondisclosure agreement
      even to get an executable copy.</emphasis> </para>

      <para><emphasis>This meant that the first step in using a
      computer was to promise not to help your neighbor. A cooperating
      community was forbidden. The rule made by the owners of
      proprietary software was, "If you share with your neighbor, you
      are a pirate. If you want any changes, beg us to make them."
      </emphasis> </para>

    </blockquote>

<para> By some quirk of personality, he decided to resist the trend.
Instead of continuing to work at the now-decimated AI Lab, or taking a
job write code at one of the new companies, where it would be kept
locked in a box, he resigned from the Lab and started the GNU Project
and the Free Software Foundation.  The goal of GNU<footnote><para>It
stands for "GNU's Not Unix", and the "GNU" in that expansion stands
for... the same thing.</para></footnote> was to develop a completely
free and open computer operating system and body of application
software, in which users would never be prevented from hacking or from
sharing their modifications.  He was, in essence, setting out to
recreate what had been destroyed at the AI Lab, but on a world-wide
scale and without the vulnerabilities that had made the AI Lab's
culture susceptible to disintegration.  </para>

<para> In addition to working on the new operating system, Stallman
devised a copyright license whose terms guaranteed that his code would
be perpetually free.  The GNU General Public License is a clever piece
of legal judo: it says that the code may copied and modified without
restriction, and that both copies and derivative works (i.e., modified
versions) must be distributed under the same license as the original,
with no additional restrictions.  In effect, it uses copyright law to
achieve an effect opposite to that of traditional copyright: instead
of limiting the software's distribution, it prevents
<emphasis>anyone</emphasis>, even the author, from limiting it.  For
Stallman, this was better than simply putting his code into the public
domain.  If it were in the public domain, any particular copy of it
could be taken and used as part of a proprietary program.  While this
wouldn't in any way diminish the original code's continued
availability in the public domain, it would have still meant that
Stallman's efforts could benefit the enemy &mdash; proprietary
software.  The GPL was a way of sealing off the free world from the
non-free world.  (The GNU General Public License and its relationship
to other free software licenses are discussed in detail in <xref
linkend="pfs-ch-3"/>.)  </para>

<para> With the help of many programmers, some of whom shared
Stallman's ideology and some of whom simply wanted to see a lot of
free code available, the GNU Project began releasing free replacements
for many of the most critical components of an operating system.
Because of the now-widespread standardization in computer hardware and
software, it was possible to use the GNU replacements on otherwise
non-free systems, and many people did.  The GNU text editor (Emacs)
and C compiler (GCC) were particularly successful, gaining large and
loyal followings not on ideological grounds, but simply because of
their technical merits.  By about 1990, GNU had produced most of a
free operating system, except for the kernel &mdash; the part that the
machine actually boots up, and that is resposible for managing memory,
disk, and other system resources.  </para>

<para> Unfortunately, the project had chosen a kernel design that
turned out to be harder to implement than expected.  The ensuing delay
prevented the Free Software Foundation from making the first release
of an entirely free operating system.  The final piece was put into
place instead by Linus Torvalds, a Finnish computer science student
who, with the help of volunteers around the world, had completed a
free kernel using a fairly conservative design.  He named it Linux,
and when it was combined with the existing GNU programs, the result
was a completely free operating system: for the first time, you could
boot up your computer and do work without once invoking a piece of
proprietary code<footnote><para>Technically, Linux was not the first.
A free operating system for IBM-compatible computers, called 386BSD,
had come out shortly before Linux.  However, it was a lot harder to
get 386BSD up and running.  The reason Linux made such a splash was
that not only was it free, but it actually had a high chance of
booting your computer when you installed it.</para></footnote> </para>

<para> Although he released the kernel under the GNU General Public
License, Torvalds was less ideologically driven than Stallman.  He
preferred to work on free software, but did not consider proprietary
software a social evil, and was even willing to use it himself on
occasion.  The appearance of the Linux kernel was one early sign of a
trend that would eventually grow to become very significant: the
participation of people who liked free software, liked writing free
software, liked cooperating with other people who like writing free
software, but who ultimately did not look on it as a moral position.
</para>

<para> This broadening of the free software movement was probably
inevitable, but it was helped along by another factor: free software
was often <emphasis>better</emphasis>.  In some cases, it was
demonstrably technically superior to the nearest non-free alternative;
in other cases, it was at least comparable, and of course it always
cost less.  So while only a few people were motivated to run free
software purely for philosophical reasons, a great many people were
happy to run it because it would do a better job.  This tendency to
produce good code was not confined to the GNU Project, nor to Linux's
band of volunteers.  It was happening, not universally but with at
least some frequency, in free software projects around the world.  It
turned out that having hordes of people hack on the same piece of
software in parallel could result in very high-quality code.  </para>

<para> Businesses that depended on software, but didn't sell it
themselves and therefore had no fear of lost royalties, slowly began
to take notice, and began funding free software projects.  The arrival
of money led to one of the enduring background tensions of free
software scene: the presence of both philosophical and mercantile
motivations.  As an analogy, imagine that a band of communist
revolutionaries succeeded in establishing a small state, only to find
that the manufacturing sector, by operating according to their
principles, suddenly started producing high-quality goods with a
blazing efficiency.  The capitalists in nearby states, seeing this,
become eager not only to acquire the cheap goods, but to reorganize
their own factories along superficially communist lines &mdash; not
because they care about the principles of the revolution, but because
communist manufacturing techniques offer a competitive edge.  </para>

<para> Keeping in mind that it's only an analogy &mdash; free software
is not communism, and claiming that it is is one sure way to annoy its
advocates &mdash; you can still imagine the chagrin of the
revolutionaries.  The reasons, the <emphasis>principles</emphasis>
behind what they're doing have taken a back seat to the
<emphasis>techniques</emphasis> by which they do it.  Suddenly
everyone's interested in communism, or so it seems, until one looks
closer and realizes that a lot of those people are mainly interested
in producing high-quality goods efficiently. </para>

<para> The immediate and most tangible result of this dichotomy was
the creation of the term <firstterm>open&nbsp;source</firstterm>, by a
coalition of programmers who eventually became The Open Source
Initiative (OSI), on the Web at <systemitem class="url"
>http://www.opensource.org/</systemitem>.  They created the term for
two reasons.  First, many people confuse the "free" in "free software"
with "zero cost".  This confusion is still so common that there is now
a standard formula in response: "No, it's <emphasis>free</emphasis> as
in <emphasis>freedom</emphasis> &mdash; think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is a real burden; OSI felt, with some
justification, that the lack of a clear and unambiguous label was
hampering the spread of free software.  </para>

<para> Their other motivation, however, was more controversial: they
felt that free software needed a marketing program to pitch it to the
corporate world, and that talk of morals and the social benefits of
sharing would never fly in corporate boardrooms. </para>

<para>
BRIDGE: these are quotes from opensource.org.  Cut, but leave enough
to represent OSI position concisely:
</para>

    <blockquote>

      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have. See the discussion of marketing for
      hackers for more.</emphasis> </para>

      <para>...</para>

      <para> <emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis>
      </para>

      <para> <emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict. You can read an extended discussion of this
      problem.</emphasis> </para>

      <para> <emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis> </para>

      <para> <emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis> </para>

      <para> <emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis> </para>

      <para> <emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis> </para>

    </blockquote>

<warning> <para>Okay Andy, this is basically the end of the ready text
so far.  Below is a precis of what's planned for immediately after
this point, then some dribbles floating around here and there, then
finally things fade into the outline, which you've already
seen.</para> </warning>


<screen>

- Explain how it has turned out to be significant for the later
  history of open source that it *started* as an overtly political
  position, but then (on average) depoliticized a bit as it achieved
  worldly success.  The effect (and this is where we begin
  the transition from history back into practical advice) is that both
  sides have had to find common ground, since most projects include
  programmers from both camps, and people who don't fit any clear
  definition.  But emphasize that this doesn't mean people never talk
  about moral motivations -- lapses in the traditional "hacker ethic"
  are sometimes called out, for example.  Rather, the effect is that
  it is mostly unacceptable in free software / open source culture to
  question the motivations of others in the project.  The
  contribution always trumps.  If someone wrote a good patch, you
  don't ask them whether they did it for moral reasons, or because
  IBM paid them to, or whatever.  You evaluate it on technical
  grounds, and respond on technical grounds.  Projects where people
  start questioning each others motivations frequently founder.

- Follow outline from here.

</screen>


</sect1>


<!-- ======================== SECTION 2 ============================== -->
<sect1 id="pfs-ch-1-sect-2">
<title>Motivations: Why Should You Open Source Something,
       and What to Expect.</title>
<para> todo </para>

<screen>
        [Subsection: Basics]
        Explain, at a high level, why people open-source things.
        Describe what to expect and what not to expect from open
        source processes.  Explain how there is no "magic pixie dust":
        an open license does not guarantee hordes of active developers
        suddenly volunteering their time, nor does open-sourcing a
        troubled project automatically cure its ills, etc.  Point out
        how open-sourcing costs *more* in the short term than
        strictly in-house development.
</screen>

</sect1>


<!-- ======================== SECTION 3 ============================== -->
<sect1 id="pfs-ch-1-sect-3">
<title>Project Scale and How It Matters </title>
<para> todo </para>

<screen>
        [Subsection: Different Species in the Genus:]
        Overview of different types of open source projects, from the
        just-scratching-an-itch-on-my-dorm-room-computer variety to
        highly publicized, centrally funded efforts such as Dresdner's
        OpenAdaptor project (see www.openadapter.org, see also
        www.softwareconservancy.org).

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.
</screen>

</sect1>


<!-- ======================== SECTION 4 ============================== -->
<sect1 id="pfs-ch-1-sect-4">
<title>other stuff</title>

<screen>
(to segue into outline)

You have to understand: why you're open-sourcing, what to expect and
not expect from the open source process, what end results will
please/displease you.
</screen>

<para> A key component of that core is that this is a culture by
choice.  Therefore, to operate successfully in it, you have to not
only understand the culture itself, you have to understand why people
choose to be in it.  Coercive techniques almost never work: when
people are unhappy at one project, they tend to wander off to another
one.  Free software is remarkable even among volunteer communities for
its lightness of investment.  Although the founders of a project may
put in significant initial effort to get it up and running, most of
those who work on it after that simply donate bits of time whenever
they feel like it.  They usually don't contribute money or physical
goods to the project, and often they have never actually met the other
participants face-to-face.  Thus, the normal conduits by which humans
bond with each other and form lasting groups are here narrowed down to
a small channel: the written word, carried over electronic wires.
Because of this, it can take a long time for a cohesive and dedicated
group to form.  Conversely, it's quite easy for a project to lose a
potential volunteer in the first five minutes of acquaintanceship.  If
a project doesn't make a good first impression, newcomers rarely give
ita second chance.  They didn't have to get in their car and drive out
to a workshop, after all; they just browsed some web pages and maybe
subscribed to an email list.  If things don't work out, they can
unsubscribe and walk away without another thought.  </para>

<para>
The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships 
</para>


<para>
This anonymity results in 
</para>

<screen>
You also have to be careful not to exoticize it or believe the myths,
like some paradisical vacation island depicted on brochures.  The NYT
and NPR and whatnot may be running breathless articles and ads
(mention that Novell ad), but that doesn't mean the myths are true.
Segue into the myth-dispelling portion of the outline.

[Then basically follow the outline.]
</screen>


<screen>
point out how training people to be "skilled" in the culture is not a
zero sum game.  I've always hated those books that claim to teach you
how to "get ahead" of the competition (for example, how to win at
tennis, how to win at arguments, etc) (and wondered why anyone writes
them).  It's logically impossible for everyone to be ahead.

For example, it's not an equal loss to all other projects when you
attract a volunteer.  had you lost them, it's no guarantee they would
have gone on to work somewhere else.  They might just watch more TV.

But with cooperative positive-sum systems like free software, it *is*
possible.  The more people are skilled at navigating this culture, the
better off the culture is.  Or, put another way, if *you* learn this
culture, *I* benefit -- and the more of it you do, the better off I
am / we all are.  </screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
