<chapter id="pfs-ch-1">

<title>Introduction [ 10-15 pp ]</title>

<simplesect>

<para> Most free software projects fail. </para>

<para> We tend not to hear very much about the failures.  Only
successful projects attract attention, and there are so many free
software projects in total<footnote><para>SourceForge.net, one popular
hosting site, had 79,225 projects registered as of mid-April, 2004.
This is nowhere near the total number of free software projects on the
Internet, of course, it's just the ones that chose to use
SourceForge.</para></footnote> that even if only a tiny percentage
succeed, the result is still a lot of useable free software.  We also
don't hear about the failures because failure is not an event.  There
is no single moment when a project ceases to be viable; people just
sort of drift away and stop working on it.  There may be a moment when
a final change is made to the project, but those who made it usually
didn't know at the time that it was the last one.  There is not even a
clear definition of when a project is expired.  Is it when it hasn't
been actively worked on for six months?  When its user base stops
growing, without having exceeded the developer base?  What if the
developers of one project abandon it because they realized they were
duplicating the work of another &mdash; and what if they join that
other project, then expand it to include much of their earlier effort?
Did the first project end, or just change homes? </para>

<para> Because of such complexities, it's impossible to put a precise
number on the failure rate.  But instinct, anecdotal evidence from
over a decade in open source, and a little Googling all point to the
same conclusion: the rate is extremely high, probably on the order 90%
or 95%.  The number climbs higher if you include surviving but
dysfunctional projects: those which <emphasis>are</emphasis> producing
running code, but which are not happy places to be, or are not making
progress as quickly or as dependably as they could.  </para>

<para> Yet everyone goes into a project expecting success.  No one
would take the trouble to set up a web site and mailing lists and
design documents all in the expectation of things turning out badly.
The collaborators who join later are not planning on failure either.
To participate in a project, even a little, is a clear statement of
belief in its potential.  But somewhere along the way, something often
goes wrong.  What happens?  </para>

<para> Frequently, the problems are not technical in nature, but
cultural and social.  Ten years ago, perhaps even five, it would have
been premature to talk about a global culture of free software, but
not now.  A recognizable culture has slowly emerged, and while it is
certainly not monolithic &mdash; it is at least as prone to internal
dissent and factionalism as any geographically bound culture &mdash;
it does have a basically consistent core.  Most successful open source
projects exhibit some or all of the characteristics of this core.
They reward certain types of behaviors, and punish others; they create
an atmosphere that encourages unplanned participation, sometimes at
the expense of central coordination; they have concepts of rudeness
and politeness that can differ substantially from those prevalent
elsewhere.  Most importantly, longtime participants have generally
internalized these standards, so that they share a rough consensus
about expected conduct.  Unsuccessful projects usually deviate in one
or more ways from this core, albeit unintentionally, and may not have
a consensus about what constitutes reasonable default behavior.  This
means that when problems arise, the situation can quickly deteriorate,
as the participants do not have an already-established core of
cultural reflexes to fall back on when resolving differences. </para>

<para> This book is mainly about the benefits of adhering to these
core practices, and the consequences of deviating from them.  It is
meant to be a practical guide, not an anthropological study.  However,
a working knowledge of the origins and current state of open source
culture is an essential foundation for any practical advice.  A person
who understands the culture can travel far and wide in the open source
world, encountering many local variations in custom and dialect, yet
still be able to participate comfortably and effectively everywhere.
A person who does not understand the culture will find the process of
organizing or participating in a project difficult and full of
surprises.  Since the number of people using and developing free
software is growing rapidly, there are many people in the latter
category.  This is largely a culture of recent immigrants, and will
continue to be so for some time.  If you think you might be in that
category, then the next section will help provide background for
discussions you'll encounter later, both in this book and on the
Internet.  (On the other hand, if you've been working with open source
for a while, you may already know a lot of the history, so feel free
to skip the next section.)  </para>

</simplesect>


<!-- ======================== SECTION 1 ============================== -->
<sect1 id="pfs-ch-1-sect-1">
<title>History</title>

<para> Software sharing has been around as long as software itself.
In the early days of computers, manufacturers felt that any
competitive advantages were to be had mainly in hardware innovation,
and therefore didn't pay much attention to software as a business
asset.  Many of the customers for these early machines were scientists
or technicians, who were able to write their own software, and the
manufacturers saw no reason to prevent them from doing so.  They even
let customers to modify the manufacturer's own software, which was
shipped with the machine.  Customers sometimes distributed their
patches back not only to the manufacturer, but to other owners of
similar machines.  </para>

<para> Although this early period resembled today's free software
culture in many ways, it differed in two crucial respects.  First,
there was as yet little standardization of hardware.  It was a time of
flourishing innovation, and the diversity of computing architectures
meant that everything was incompatible with everything else.  Software
written for one machine would generally not work on another, so
programmers tended to acquire expertise in a particular architecture
or family of architectures (whereas today they would be more likely to
acquire expertise in a programming language or family of languages,
confident that their expertise will be transferable to whatever
computing platform they happen to find themselves working with).
</para>

<para> Second, there was no Internet.  Thus, though there were few
legal restrictions on sharing, there were still technical ones: the
means of getting data from place to place were inconvenient and
cumbersome by today's standards.  There were some small, local
networks, good for sharing information among employees at the same
research lab or company.  But there remained barriers to overcome if
one wanted to share with everyone, no matter where they were.  Of
course, these barriers <emphasis>were</emphasis> overcome in many
cases.  Sometimes different groups made contact with each other
independently, sending disks or tapes through land mail, and sometimes
the manufacturers themselves served as central clearing houses for
patches.  But the physical realities of data transmission meant there
was always an impedance to sharing, and it was proportional to the
distance (real or organizational) that the software had to travel.
Frictionless widespread sharing was not possible, the way it is today.
</para>

<para> As the industry matured, several interrelated changes occurred
simultaneously.  The wild diversity of hardware designs gradually gave
way to a few clear winners &mdash; winners through superior
technology, superior marketing, or some combination thereof.  At the
same time, the development of so-called "high level", or portable,
programming languages meant that one could write a program once, in
one language, and have it automatically translated ("compiled") to run
on different kinds of computers.  The implications of this were not
lost on the hardware manufacturers: a customer could undertake a major
software engineering effort without necessarily locking themselves
into one particular computer architecture.  When combined with the
fact that the performance differences between different computers were
gradually narrowing, as the less efficient designs were weeded out,
any manufacturer that treated its hardware as its only asset could
look forward to a future of declining profit margins.  Meanwhile, with
the advent of high level programming languages, and the ubiquity of
the most successful computer architectures, selling software began to
look like a viable business.  </para>

<para> Thus, at roughly the same time that the smaller local networks
were connecting together to form the Internet, software began to be
worth money, to some degree independently of the machine it might run
on. </para>

<screen>

- Segue into Stallman (explain about origin myths: how this may be
  an oversimplified view, but nevertheless this history is so well
  known that it is a useful cultural token).

- Follow outline from here?

</screen>


</sect1>


<!-- ======================== SECTION 2 ============================== -->
<sect1 id="pfs-ch-1-sect-2">
<title>Motivations: Why Should You Open Source Something,
       and What to Expect.</title>
<para> todo </para>

<screen>
        [Subsection: Basics]
        Explain, at a high level, why people open-source things.
        Describe what to expect and what not to expect from open
        source processes.  Explain how there is no "magic pixie dust":
        an open license does not guarantee hordes of active developers
        suddenly volunteering their time, nor does open-sourcing a
        troubled project automatically cure its ills, etc.  Point out
        how open-sourcing costs *more* in the short term than
        strictly in-house development.
</screen>

</sect1>


<!-- ======================== SECTION 3 ============================== -->
<sect1 id="pfs-ch-1-sect-3">
<title>Project Scale and How It Matters </title>
<para> todo </para>

<screen>
        [Subsection: Different Species in the Genus:]
        Overview of different types of open source projects, from the
        just-scratching-an-itch-on-my-dorm-room-computer variety to
        highly publicized, centrally funded efforts such as Dresdner's
        OpenAdaptor project (see www.openadapter.org, see also
        www.softwareconservancy.org).

        [Subsection: Money and its Effects:]
        Preliminary discussion, essay-style, of funding in the open
        source world.  Cover the totally unfunded, the
        PayPal-for-Pizza world, full non-profits (ASF, Xiph.org,
        OpenOffice [sort of]), for-profit-but-free (find some
        examples), dual-licensing models (MySQL, Sendmail,
        BerkeleyDB), and all sorts of edge cases.  Describe how
        funding can affect a project both negatively and positively:
        solid funding can make people more willing to give it a chance
        (they feel they're investing their time into something that
        will be around a year from now), and reduces the project's
        vulnerability to the Forces Of Darkness; on the other hand, if
        not handled carefully, money can divide the project into
        in-group and out-group developers.  Refer to the relevant
        parts of Chapter 5.
</screen>

</sect1>


<!-- ======================== SECTION 4 ============================== -->
<sect1 id="pfs-ch-1-sect-4">
<title>other stuff</title>

<screen>
(to segue into outline)

You have to understand: why you're open-sourcing, what to expect and
not expect from the open source process, what end results will
please/displease you.
</screen>

<para> A key component of that core is that this is a culture by
choice.  Therefore, to operate successfully in it, you have to not
only understand the culture itself, you have to understand why people
choose to be in it.  Coercive techniques almost never work: when
people are unhappy at one project, they tend to wander off to another
one.  Free software is remarkable even among volunteer communities for
its lightness of investment.  Although the founders of a project may
put in significant initial effort to get it up and running, most of
those who work on it after that simply donate bits of time whenever
they feel like it.  They usually don't contribute money or physical
goods to the project, and often they have never actually met the other
participants face-to-face.  Thus, the normal conduits by which humans
bond with each other and form lasting groups are here narrowed down to
a small channel: the written word, carried over electronic wires.
Because of this, it can take a long time for a cohesive and dedicated
group to form.  Conversely, it's quite easy for a project to lose a
potential volunteer in the first five minutes of acquaintanceship.  If
a project doesn't make a good first impression, newcomers rarely give
ita second chance.  They didn't have to get in their car and drive out
to a workshop, after all; they just browsed some web pages and maybe
subscribed to an email list.  If things don't work out, they can
unsubscribe and walk away without another thought.  </para>

<para>
The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships 
</para>


<para>
This anonymity results in 
</para>

<screen>
You also have to be careful not to exoticize it or believe the myths,
like some paradisical vacation island depicted on brochures.  The NYT
and NPR and whatnot may be running breathless articles and ads
(mention that Novell ad), but that doesn't mean the myths are true.
Segue into the myth-dispelling portion of the outline.

[Then basically follow the outline.]
</screen>


<screen> In twelve years, I've seen a lot of free software projects
fail.  This is not because I have an especially sensitive nose for
finding failures.  It's because most projects fail.  Failure is the
norm.  If I had to summarize the most common reasons for failure,
they would be:

Technical reasons would come last.  [refer to Aramis here?]
</screen>


<screen>
point out how training people to be "skilled" in the culture is not a
zero sum game.  I've always hated those books that claim to teach you
how to "get ahead" of the competition (for example, how to win at
tennis, how to win at arguments, etc) (and wondered why anyone writes
them).  It's logically impossible for everyone to be ahead.

For example, it's not an equal loss to all other projects when you
attract a volunteer.  had you lost them, it's no guarantee they would
have gone on to work somewhere else.  They might just watch more TV.

But with cooperative positive-sum systems like free software, it *is*
possible.  The more people are skilled at navigating this culture, the
better off the culture is.  Or, put another way, if *you* learn this
culture, *I* benefit -- and the more of it you do, the better off I
am / we all are.  </screen>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
