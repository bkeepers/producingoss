<chapter id="introduction">

<title>Введение</title>

<simplesect>

<para>Большинство проектов с открытыми исходным кодом проваливаются.</para>

<para>Мы не склонны слышать слишком часто о провалах. Только успешные проекты
привлекают всеобщее внимание, но общее количество свободных проектов настолько 
велико<footnote><para>На SourceForge.net, одном из известных провайдеров хостинга для 
таких проектов, их было зарегестрировано 79,225, по данным от середины Апреля 2004 года.
И это даже не близко к общему числу свободных проектов в интернете, а лишь количество 
тех что избрали своим хостингом SourceForge</para></footnote>, что даже несмотря на 
низкий процет выживаемости, все еще остается внушительное число заметных проектов.
Также мы не слышим о провалах, потому что провал это не событие. Нет такого
единственного момента, когда проект вдруг внезапно перестает быть жизнеспособным;
по просту люди начинают потихоньку расходится, перестают над ним работать.
Бывают случаи, когда было внесено последнее изменение, но люди сделавшие
его зачастую не подозревали об этом на тот момент. Нет даже четкого 
определения когда можно начинать считать проект потухшим. Тогда ли это, когда над
проектом никто активно не работал на протяжении шести месяцев? Или же когда,
количество пользователей перестает расти, не успев перевалить за количество
разработчиков? А что если разработчики одного проекта забросили его после того
как обнаружили, что все это время они дублировали работу другого проекта &mdash; 
и что если они решили присоединиться к тому другому проекту, чтобы расширить его, 
вложив в него плоды своего прежнего труда?
Исчез ли прежний проект на совсем или просто поменял место жительства?
</para>


<para>Из-за этих сложностей, становится невозможно определить точное соотношение числа
успехов к числу провалов(процент, пропорция, отношение).
Но чуть ли не смешная статистика за десятилетнюю историю свободного ПО, 
немного копания на SourceForge.net и несколько поисков в гугле, все приводит
к одному и тому же выводу: процент провалов черезвычайнно велик, что-то
около(в пределах) 90&ndash;95 процентов. Это число подпрыгнет еще выше если учитывать
выжевшие, но дисфункциональные проекты: такие, которые вроде бы и производят рабочий
 код, но и не самые благоприятные места для существования разработчиков, или проекты 
не совершающие прогресса достаточно расторопно или настолько стабильно(надежно, регулярно), как могли бы.
</para>

<para>Эта книга посвящена тому как избежать провала.  В ней описано не только
как нужно правильно делать что-либо, но и как <emphasis>не</emphasis> делать, так чтобы
 вы научились распознавать и разрешать проблемы на раннем этапе их появления. Я надеюсь, что после прочтения этой книги, вы обзаведетесь
 большим арсеналом методов, которые позволят вам не только не наступать на наиболее частые 
 грабли разработки свободного ПО,  но и также, как считаться с ростом и поддержкой успешного открытого проекта. Успех проекта это не игра со счетом в ничью, и эта книга вовсе не о том как выйграть 
или выйти вперед в конкуренции. Наоборот, важной частью ведения открытого проекта
 является крепкое сотруднечество с остальными, связанными или похожими(!) проектами.
В конечном счете, каждый успешный проект делает вклад в благополучие всецелого, мирового фонда свободного програмного обеспечения.   
</para>

</simplesect>

<simplesect>

<para>
Было бы заманчивым(tempting) сказать, что причины неудач свободного ПО те же что и у коммерческих проектов. 
Разработка свободного ПО не означает отсутствие таких проблем, как 
завышенные требования, расплывчатые спецификации, неэффективное управление кадрами и других сложностнй давно известных индустрии 
разработки ПО.
 На эти темы уже написаны горы литературы и, в своей книге, я постараюсь избежать повторений ранее известного.
Вместо этого, я хочу 
описать проблемы характерые только для свободного ПО. 
Когда свободный програмный проект начинает рушиться, это часто потому что разработчики 
(или мененджеры) не учли уникальных проблем открытого програмного обеспечения, даже будучи
 основательно подготовленными к более известным проблеммам присущим коммерческому ПО. 
</para>

<para>Одной из наиболее распрастраненных ошибок является слишком большие надежды возлагаемые
на достоинства открытого ПО. Использование открытой лицензии не гарантирует, что орды активных
разработчиков неожиданно изволят  потратить свое драгоценное время на ваш проект, не решить 
проблем затрудненного проекта и простым открытием его исходников. Как раз наоборот: раскрытие проекта
может принести целую кучу дополнительных сложностей, и дороже стоить, с расчетом на короткий срок, 
чем было бы, оставайся он закрытым. Раскрыть проект означает переорганизовать код так, чтобы он был 
понятен новым разработчикам, незнакомым с вашим проектом, создать официальный веб сайт проекта и настроить 
списки рассылки(email lists), а также нередко впервые взяться за написание документации. Все это 
много работы. И если и появятся заинтересованные разработчики, еще к этому добавится и бремя отвечать на
кучи их вопросов, прежде чем от них будем какая-то польза от их присутствия.
Как выразился Jamie Zawinski о ранних турдных временах проекта Mozilla:
</para>

    <blockquote>
      <para><emphasis>Концепция свободного ПО и вправду работает, но не является лекарством от всех болезней. Если здесь и есть слово предосторожности, лишь можно сказать что нельзя просто взять чахнущий проект, присыпать его волшебной пылью "открытого ПО" и по волшебству разрешить все проблемы. Програмное обеспечение трудно. Проблемы(issues) не так просты.  </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

	
<para>
Также распространённой ошибкой является экономия на презентации и комплектации, наивно полагая 
что это всегда можно оставить на потом, уже задолго после начала проекта. Презентация и комплектация
заключают в себе широкий круг задач, посвященных теме упростить вступление в проект потенциальным 
разработчикам.
Сделать проект более привлекательным можно при помощи написания руководств для пользователей, 
документации разработчикам, созданием сайта проекта содержащего информацию для новичков, насколько 
возможно автоматизировать процессы компиляции установки и т.д.
Многие программисты к сожалению считают это второстепенной задачей после написания кода.
Есть несколько причин почему. Во первых, это может показаться трудной работой, потому что 
преимущества от этого заметны(ощутимы) лишь тем, кто меньше всего знаком с проектом и наоборот. 
В конце концов, людям написавшим код не нужна никакая комплектация.
Им уже известно как устанавливать, администрировать и использовать их 
собственное ПО. Во-вторых, умения необходимые для того чтобы завершить презентацию и комплектацию,
далеко отличны от тех что нужны для написания кода.
Люди склонны концентрироваться на том, что они лучше знают, даже
если немного времени проведенного над тем, что им кажется менее важным, помогло бы проекту гораздо больше.

В главе 
<xref
linkend="getting-started"/>, презентация и комплектация обсуждаются в подробностях и объясняется почему так важно чтобы они были приоритетом
с самого начала проекта. 

</para>


<para>
Следующим идет заблуждение, что свободному проекту нужно мало либо не нужно 
совсем никакого руководства, или наоборот, что теже принципы управления, используемые
для разработки впределах коммерческой организации, могут быть применены с тем же 
успехом и в открытом проекте. Управление внутри свободного проекта не всегда
так уж заметно, но в успешных проектах, оно обычно происходит за сценой
в той или иной форме. Достаточно небольшого мысленого эксперимента, чтобы увидеть почему.
Типичный свободный проект состоит из произвольного набора программистов&mdash;что уже заведомо
непредубежденная группа людей&mdash;, скорее всего незнакомых лично друг с другом,
каждый из которых, возможно преследует собственные личные цели в работе над проектом.
Представьте себе чтобы произошло с такой группой людей <emphasis>безо всякого</emphasis> руководства.
Если только не чудо, они бы претерпели крах либо разошлась кто куда довольно быстро. 
Дела не будут вестись сами собой, насколько нам того бы ни хотелось.
Но руководство в открытом проекте, даже будучи активным, зачастую лишь информотивно, неуловимо и неброско.
Единственное, что держит группу разработчиков вместе так это их раздельное
убеждение, что они могут достигнуть большего согласованной группой, нежели по отдельности.
Таким образом целью руководства, по большей мере является, поддерживать это
убеждение, устанавливая стандарты коммуникации, следя чтобы полезные разработчики <emphasis>не</emphasis>
оказывались изолироваными вследствии личных особенностей их характеров, и вообщем просто делая 
проект таким местом, куда бы хотелось возвращаться снова и снова. Конкретные способы достижения
этого и рассмотрены на протяжении всего остатка этой книги.
</para>


<para>
Наконец, существует общая категория проблем, которые можно классифицировать
как "ошибки культурного значения"(навигации). Лет десять назад или даже
пять, было бы преждевременно говорить о всемерной культуре свободного програмного 
обеспечения, но не теперь. Постепенно возникла значительная культура 
свободного ПО, и даже не будучи единой и монолитной, она все еще имеет единый общий 
фундамент(!core) и по меньшей мере настолько же склонна к внутренним разногласиям и партийным расколам как и любая
географически основанная(привязанная) культура.
Большинство успешных открытых проектов проявляют кое-что или все из этих фундаментальных
характеристик. Они вознаграждают определенные типы поведений и наказуют другие;
создают атмосферу, которая поощряет внеплановое участие, иногда в ущерб
центральной координации; у них есть понятия грубости и вежливости, которые 
могут значительно разниться с общепринятыми где-либо еще. И важнее всего, 
долгосрочные учасники усвоили основы этих неписанных(+) стандартов и 
пришли к взаимному единодушию о моральных принципах, которые следует ожидать от 
остальных учасников. Безуспешные проекты обычно,хотя и не намеренно, отклоняются в 
значительной степени от этих фундаментальных стандартов, и зачастую не имеют 
единогласного соглашения о том, что же представляет собой допустимое поведение.
Это означает, что когда возникают проблемы, ситуация может быстро ухудшиться, из-за что
учасники не обладают запасом общекультурных знаний(рефлексов) на которые бы можно было положиться в разрешении
сложностей.
</para>

<para>
Эта книга практическое руководство, а не курс антропологии или истории.
Тем не менее, понимание истоков современной культуры свободного ПО необходимо,
чтобы подкрепить любой практический совет. Человек, который понимает эту культуру,
пойдет далеко и широко в мире свободного ПО, встречая на своем пути местные
различия в обычаях и диалекте, и не смотря на это быть способным быстро и без
проблем втянуться в любой проект. Для контраста, человек, который эту культуру не
усвоил, найдет для себя процесс организации или участия в проекте сложным и полным
сюрпризов.
Так как количество людей разрабатывающих свободное ПО все еще растет
скачками и рывками, многие из них находятся в этой последней категории&mdash;
это по большинству культура недавних имигрантов и будет продолжать оставаться таковой
некоторое время. Если вы считаете себя одним из них, следующий раздел послужит
вам уроком истории и подготовит к дальнейшим дискуссиям, которые вы встретите позже, 
как в этой книге, так и в интернете. (С другой стороны, если вы уже работали над 
свободным проектом достаточно долго, вам уже наверно известна большая часть истории,
и вы можете пропустить следующий раздел.)
</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>История</title>

<para>
Обмен програмным обеспечением существовал столько же долго сколько и
сами програмы. В первые дни компьютеров, производители считали, что 
конкурентноспособные преимущества главным образом быть могут лишь извлечены 
от совершенствования аппаратных средств и следовательно не относились(уделяли
внимания) к программному обеспечению как к корпоротивному имуществу. 
Множество пользователей тех первых машин были учеными или техниками, 
способными изменить или расширить, поставляемое вместе с компьютерами,
програмное обеспечение самостоятельно. Иногда пользователи отправляли
свои програмные патчи не только обратно изготовителю, но и другим 
владельцам совместимых компьютеров. Компании изготовители очень часто
дозволяли это и даже поощряли:
в их глазах, усовершенствования сделанные над их ПО, без разницы чьи и откуда,
только делали машину более привлекательной для потенциальных покупателей.
</para>

<para>
Хотя этот ранний период и напоминает современную культуру свободного 
програмного обеспечения, он отличялся в двух ключевых моментах.
Во-первых, на тот момент не существовало почти никакой
стандартизации среди аппаратных средств&mdash;это было врменя
процветающей инновации в компьютерном дизайне, но разнообразие
компьютерных архетектур означало, что все было несовместимо 
со всем остальным. Таким образом, программы, написанные для одной машины
обычно было не возможно использовать на другой. Программисты были склонны
специализироваться в одной какой-либо архитектуре или семействе архитектур
(также как сегодня програмисты скорее специализируются в определенном 
языке прогаммирования или их семействе, в полной уверенности, что их знания 
можно будет перенести на любую вычислительную платформу, с которой им придется 
работать). Из-за того, что личные знания человека обычно относятся к одному виду компьютеров,
накопление знаний приводит к тому, что эти компьютеры становятся более привлекательными
для него и его коллег. Следовательно, в интересах производителя было распространять
машинно-зависимый код и знания как можно шире.</para>

<para>
Во-вторых, тогда небыло Интернета. И хотя в те времена было меньше
юридических ограничений на распространение чем сегодня, 
было гораздо больше технических: средства для получения данных из того
или другого источника были относительно неудобными и громоздкими.
Существовали некоторые маленькие, локальные сети, которые были хороши для 
обмена информацией между сотрудниками внутри одной исследовательской лаборатории
или предприятия. Но оставались преграды, которые нужно было преодолеть, если кто-то 
хотел обменяться информацием с кем-нибудь другим, не зависимо от того, 
где они находились.  Эти преграды <emphasis>преодолевались</emphasis> во многих случаях.
Иногда, различные группы вступали в контакт друг с другом независимо,
посылая диски или магнитные ленты с обычной почтой, а иногда сами производители 
служили центральным информационным центром для обновлений. Еще помогало и то,
что многие из разработчиков компьютеров раннего периода  работали в университетах,
где публикация чьих-либо знаний была ожидаемым явлением. Но реалии физической передачи данных означали, 
что всегда существовало сопротивление при обмене, сопротивление, пропорциональное
расстоянию (реальному или организационному), которое должно было преодолеть программное
обеспечение. Широко распространенный, свободный от трения обмен, каким мы знаем его сейчас,
был невозможен.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>Восход Проприетарного Программного обеспечения и Свободного Программного обеспечения</title>

<para>С развитием отрасли, одновременно произошло несколько взаимосвязанных изменений. 
Ужасающее разнообразие аппартных платформ, постепенно уступило место
нескольким бесспорным победителям - победителям, обладавшим лучшей технологией,
лучшим маркетингом или некоторй комбинацией обоих. В тоже время, и не совсем случайно,
разработка так называемых языков программирования "высокого уровня", означала, что, кто угодно
мог один раз написать программу, на одном языке, и потом автоматически перевести ("скомпилировать"),
на язык, который выполняется на другом типе компьютеров. Последствия коснулись и производителей 
аппартных платформ: теперь клиент мог приложить значительные усилия по проектированию 
и разработке программного обеспечения, без необходимости привязать себя к определенной
компьютерной архитектуре. Вместе с постепенным стиранием разницы в производительности 
различных компьютеров, происходившем из-за вытеснения менее эффективных архитектур, производители,
которые  рассматривали свое оборудование как единственный актив, могли предвидеть будущее падение прибыли.
Чистая вычислительная мощность стала взаимозаменяемым товаром, тогда как программное обеспечение
превратилось в отличительную черту. Продажа программного обеспечения, или, хотя бы, рассмотрение его как
неотъемлемой части продажи оборудования, становилось хорошей стратегией.</para>

<para>Это означало, что производители стали намного строже охранять авторские права
на свой код. Если пользователи просто продолжали бы свободно обмениваться между собой и
изменять код , они могли бы независимо реализовать какие-нибудь усовершенствования,
который теперь продавались поставщиком как "добавочная ценность". Еще хуже, свободный код мог бы попасть 
в руки конкурентов. Ирония в том, что все это происходило примернов то же время,
когда Интернет вставал на ноги. Как раз тогда, когда действительно беспрепятственный
обмен программным обеспечением стал наконец технически возможным, изменения в компьютерном бизнесе
сделали его экономчески нежелательным, как минимум с точки зрения каждой отдельной компании.
Поставщики предприняли меры, либо запрещающие пользователю доступ к коду, выполняющемуся на его
машине, либо настаивающие на соглашении о неразглашении, которые сделали обмен полезной информацией
невозможным.</para>

<sect3 id="history-conscious-resistance">
<title>Осознанное сопротивление</title>

<para>С медленным падением мира неограниченного обмена кодом, контрреакция 
выкристаллизовалась в уме минимум одного программиста. Ричард Столлмэн работал
в лаборатории Искусственного Интеллекта в Массачусетском Технологическом Институте
в 1970-х и в начале 80-х, в земле обетованной и в золотом веке свободного обмена кодом.
В лаборатории ИИ существовала строгая "этика хакеров",<footnote><para>Столлмэн использовал
слово "хакер", подразумевая под ним "любого, кто любит программировать и получает
удовольствие от того, что хорошо в этом разбирается", а не в относительно новом смысле
"любой, кто вторгается в компьютеры"</para></footnote>  и людям не только позволяли, но и ждали от них,
что любое изменение, внесенное в систему, станет достоянием общественности. Как Столлмэн
писал позже:</para>

    <blockquote>
      <para><emphasis>Мы не называли наше программное обеспечение "свободным программным
	  обеспечением", потому что тогда этого термина еще не было; но именно этим оно и было.
	  Когда человек из другого университета или компании хотел портировать и использовать
	  программу, мы охотно позволяли ему это сделать. Если ты видишь кого-нибудь, использующего
	  неизвестную и интересную программу, ты всегда можешь попросить посмотреть на исходный
	  код, так что ты можешь читать его, менять его или вырезать из него части, чтобы
	  создать новую программу.
      </emphasis></para>

      <para>(из <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Это райское сообщество, окружавшее Столлмэна, распалось очень быстро после 1980 года,
когда изменения, происходившие во всей остальной индустрии, в конце концов докатились 
и до лаборатории ИИ. Начинающая компания, наняла многих из программистов, работавших
в лаборатории, для разработки операционной системы, похожей на ту, над которой они
работали в лаборатории, только под полной лицензией. В тоже время, лаборатория ИИ получила 
новое оборудование, в состав которого входила проприетарная операционнная система.</para>

<para>В том, что происходило, Столлмэн увидел общую тенденцию:</para>

    <blockquote>
      <para><emphasis>Современные компьютеры того времени, такие, как VAX или 68020,
	  имели свои собственные операционные системы, но ни одна из них не была
	  свободным программным обеспечением: вам надо было подписать соглашение 
	  о неразглашении даже для того, чтобы получить работающую копию.</emphasis> </para>

      <para><emphasis>Это означало, что первым шагом в использовании компьютера
	  было обещание не помогать соседу. Совместная работа была запрещена. Правило, созданное
	  владельцами проприетарного программного обеспечения, гласило: "Если ты поделился
	  с соседом, то ты пират. Если ты хочешь что-то изменить, умоляй нас, чтобы мы это сделали."
      </emphasis> </para>

    </blockquote>

<para>По своему личному капризу, он решил сопротивляться общему течению.
Вместо продолжения работы в теперь уже опустошенной лаборатории ИИ,
или устройства на работу по написанию кода в одну из новых компаний, где 
результаты его труда были бы заперты в ящике, он отказался от лаборатории и начал проект
 GNU, а также основал Фонд свободного программного обеспечения (FSF). Целью GNU
<footnote><para>Это означает "GNU не Unix", и "GNU" в этом определении
означает...тоже самое</para></footnote> было разработать абсолютно бесплатную и открытую 
компьютерную операционную систему, и набор прикладных программ, где пользователю
никогда не запрещалось исследовать код или распространять свои изменения. Это, в сущности, было
попыткой воссоздать то, что было разрушено в лаборатории ИИ, но в масштабе всего мира и без
тех слабых мест, которые сделали сообщество лаборатории ИИ способным распасться на части.</para>

<para>Вместе с работой над новой операционной системой, Столлмэн 
разработал авторскую лицензию, чьи условия гарантировали,
что его код будет бесплатным всегда. Открытая лицензия (GPL) Фонда свободного программного обеспечения от GNU,
была очень умным образцом дзюдо в юридическом пространстве: в ней говорилось, 
что код может быть скопирован и изменен безо всяких ограничений, и что и копии
и работы, основанные на данном коде (например, измененные версии) должны 
распространяться по той же лицензии как и оригинал, без каких либо дополнительных 
ограничений. Таким образом, она использует закон об авторском праве, для достижения
эффекта, противоположного традиционному авторскому праву: вместо того, чтобы
ограничить распространение программного обеспечения, она не позволяет<emphasis>никому</emphasis>,
даже автору, ставить какие-либо ограничения. Для Столлмэна, это было даже лучше, чем просто
выкладывать код в общий доступ. Если бы он находился в общем доступе, любая отдельная 
копия могла бы быть встроена в проприетарную програму (такое, как  известно, случалось
с кодом, распространяемым по разрещающим правовым лицензиям).
Пока такое использование никаким образом не уменьшало существующую доступность оригинального кода,
 но оно могло значить, что усилия Столлмэна могли пойти на пользу врагу &mdash; проприетарному
 программному обеспечению. GPL может быть рассмотрена как вид протекционизма для бесплатного
 программного обеспечения, так как она не позволяет не-бесплатному программному обеспечению полностью
 воспользоваться преимуществами кода, доступного по GPL. GPL и ее отношения с другими лицензиями
 на бесплатное программное обеспечение подробно обсуждается в
<xref linkend="legal"/>.</para>

<para>С помощью многих программистов, некоторые из которых разделяли
идеи Столлмэна, а некоторые просто хотели увидеть некоторое количесво доступного
бесплатного кода, проект GNU начал выпускать бесплатные замены большинства
самых важных компонентов операционной системы. В связи с уже широкораспространенной 
стандартизацией в компьютерном аппаратном и программном обеспечении, стало возможным
использовать замены от GNU для не-бесплатных систем, и многие так и поступали. Текстовый
редактор от GNU (Emacs) и компилятор Си (GCC) были особенно успешны, получив большую 
и преданную армию поклонников не на идеологической основе, но просто из-за их технических
характеристик. Примерно к 1990 году, GNU создало большую часть бесплатной операционной
системы, за исключением ядра &mdash; части, с которой начинается загрузка компьютера, и которая
отвечает за управление памятью, диском и другими системными ресурсами.</para>

<para>К несчастью, проект GNU выбрал архитектуру ядра, которую оказалось
реализовать труднее, чем предполагалось. Получившаяся задержка не позволила 
Фонду свободного программного обеспечения выпустить первую версию полностью
бесплатной операционной системы. Вместо них, заключительная часть была 
вставлена на свое место Линусом Торвальдсом, финским студентом факультета компьютерных 
наук, который, с помощью добровольцев со всего мира, закончил ядро, использовав более
консервативный дизайн. Он назвал его Linux, и когда оно было соединено с существующими
GNU программами, результатом была полностью бесплатная операционная система.
В первый раз вы могли запустить компьютер и работать без использования какого-то ни было
проприетарного програмного обеспечения.<footnote><para>Технически, Linux не была первой. 
Бесплатная операционная система для IBM-совместимых компьютеров, называемая 386BSD, 
вышла незадолго до Linux. Однако, 386BSD было гораздо сложнее заставить работать. 
Linux наделала много шума не только потому что была бесплатной,но и потому,
что она с очень большой вероятностью загружала ваш компьютер после
того как вы ее установили.</para></footnote></para>

<para>Большое количество программного обеспечения для этой новой операционной системы
не было создано проектом GNU. В действительности, GNU была даже не единственной
группой, работавшей над созданием бесплатной операционной системы (например, код,
который в конечном итоге стал NetBSD и FreeBSD в то время уже находился в стадии
разработки). Значимость Фонда свободного программного обеспечения была не только в коде,
который они писали, но в их политической риторике. Так как они вели разговор о свободном программном
обеспечении как о причине, а не следствии, программистам было сложно <emphasis>не</emphasis> 
иметь своего политического отношения к нему. Даже те, кто не соглашался с ФСПО, все равно
имели с ним дело, просто занимая другую позицию. Эффективность ФСПО как пропагандистов, состояла
в том, что они связывали код со своим посланием, посредством GPL и других документов. 
По мере того, как их код распространялся все шире, распространялось и их послание.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Случайное сопротивление</title>

<para>В зарождающемся мире свободного программного обеспечения,однако,  происходило
еще и множество други вещей, и лишь некоторые из них были явно идеологическими, как
GNU проект Столлмэна. Одной из самых важных была <firstterm>Программный пакет
 университета Беркли (Berkeley Software Distribution)</firstterm> 
(<firstterm>BSD </firstterm>), последовательная переработка операционной системы
Unix, которая до начала 1970-х была в некоторой степени проприетарным исследовательским
проектом в AT&amp;T, выполняемым программистами Калифорнийского Университета в Беркли.
Группа BSD не делала никаких открытых политических заявлений о том, что программистам
нужно объединятся и обмениваться друг с другом, но они <emphasis>воплощали</emphasis> эту
идею со вкусом и энтузиазмом, координируя сильно распределенную разработку, где
Unix-утилиты коммандной строки и билиотеки кода, а иногда и само ядро операционной системы,
были переписаны с нуля добровольцами. Проект BSD стал первым примером не-идеологической
разработки свободного программного обеспечения, а так же служил тренировочной площадкой
для многих разработчиков, которые хотели продолжать работать, чтобы оставаться действующими
лицами мира программного обеспечения с открытым исходным кодом.</para>

<para>Другим горнилом совместной разработки была система <firstterm>X
Window System</firstterm>, бесплатная, обладающая сетевой прозрачностью,
вычислительная среда, разработанная в Массачусетсском технологическом институте
(Massachusetts Institute of Technology, MIT) в середине 1980-х в сотрудничестве
с продавцами оборудования, чьи интересы сходились на возможности предоставить заказчикам
многооконный интерфейс. Будучи далека от того, чтобы противопоставлять себя проприетарному
программному обеспечению, лицензия X умышленно позволяла проприетарные расширения,
поверх бесплатного ядра&mdash;каждый член консорциума получал шанс расширить
стандартную поставку X, и таким образом, получить конкурентное преимущество над
другими членами. X Windows<footnote><para>Они предпочитали чтобы ее называли 
"Оконная система X (X Window System)", но на практике, люди обычно называли ее
"Икс Окна (X Windows,в России неформально "иксы́")", потому что три слова просто 
слишком громоздко.</para></footnote>сама по себе была свободным программным обеспечением,
но по большей части служила способом установить единые правила игры для конкурирующих
бизнес-интересов, а не желала покончить с преобладанием проприетарного программного
обеспечения. Еще одним примером, предшествовашим проекту проекту GNU нескольими годами ранее,
был TeX,свободная издательская система Дональда Кнута. Он выпустил
ее под лицензией, которая позволяла любому изменять и распространять код, но не
называть ее "TeX" до тех пор, пока она не пройдет набор очень строгих тестов на
совместимость (это пример из класса свободных "защищающих-товарный-знак" лицензий,
подробнее обсуждаемых в <xref linkend="legal"/>). Кнут не занимал ту или иную позщицию
в вопросе свободного-против-проприетарного программного обеспечения, ему просто была 
нужна улучшенная компьтерная типографская система, чтобы достичь своей <emphasis>настоящей</emphasis>
цели&mdash;книги о компьютерном программировании&mdash;и он не видел причин не
выпустить систему в мир по завершении.</para>

</sect3>

<para>Не перечисляя каждый отдельный проект и каждую лицензию, определенно
можно сказать, что в начале 1980-х, существовало достаточно свободного
программного обеспечения, доступного под широким набором лицензий.
Разнообразие лицензий отражало соответсвующее разнообразие мотивов.
Даже некоторые из тех прграммистов, которые выбрали GNU GPL были
намного меньше движимы идеологией, чем сам проект GNU. Хотя им и доставляло
удовольствие работать над свободным программным обеспечением, многие
разработчики не рассматривали проприетарное программное обеспечение как
социальное зло. Были люди, которые почувствовали душевный порыв к освобождению
мира от "программного обеспечения за забором" (термин Столлмэна для не-свободного
программного обеспечения), но мотивом остальных в большей степени было техническое
возбуждение, или удовольствие от работы с соратниками, объединенными общими
взглядами, или даже простое человеческое желание славы. В общем и целом,
взаимодействие этих несопоставимых мотивов не шло по пути разрушения. Частично,
из-за того, что программное обеспечение, в отличие от других форм творчества,
таких как проза или изобразительные искусства, должно пройти полу-объективный
тест, чтобы можно было признать его успешным:оно должно работать, и быть, в разумной
степени, лишено ошибок. Это дает всем учавствующим в проекте некоторый автоматический
общий язык, основание и инфраструктуру для совместной работы, позволяя не слишком 
заботиться о квалификации, кроме технической.</para>

<para>У разработчиков была так же и другая причина держаться вместе:
получилось так, что мир свободного программного обеспечения производил
очень высококачественный код. В некоторых случаях, он был очевидно
технически лучше, чем ближайшая не-свободная альтернатива;в других, он
был, как минимум сопоставим, и, конечно, он всегда стоил дешевле.
В то время как лишь несколько человек могли быть мотивированы заниматься
свободным программным обеспечением исключительно на философской основе,
подавляющее большинство людей были счастливы заниматься им, потому что
оно лучше справлялось со своей работой. А из тех, кто использовал его, 
некоторый процент всегда хотел пожертвовать своим временем и навыками,
чтобы помочь поддержать и улучшить программное обеспечение.</para>

<para>Эта тенденция производить хороший код, была конечно не всеобщей, 
но проявлялась со все возрастающей частотой в свободных программных проектах
по всему миру. Направления бизнеса, которые сильно зависели от программного 
обеспечения постепенно стали обращать на это внимание. Многие из них обнаружили,
что они уже используют свободное программное обеспечение в повседневных операциях
и просто не знали об этом (высший менеджемент не всегда интересуется всем, что 
делает отдел ИТ). Корпорации стали играть более активную и заметную роль в 
проектах свободно программного обеспечения, вкладывая время и оборудование, 
а иногда даже напрямую финансируя разработку свободных программ. Такие 
инвестиции могут, в лучших случаях, оправдать себя во много раз. Спонсор
оплачивает небольшое число высококвалифицированных программистов, которые
посвящают проекту полный рабочий день, но получает результат еще и от
<emphasis>любого</emphasis> участника, включая работу неоплачиваемых волонтеров 
и программистов, оплачиваемых другими корпорациями.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Свободное" Против "С Открытым Исходным Кодом"</title>

<para>По мере того, как корпоративный мир уделял все больше и больше внимания
свободному программному обеспечению, программисты столкнулись с новыми проблемами
понятий. Одной было слово "свободный" само по себе. Впервые слыша термин
"свободное программное обеспечение" многие люди ошибочно думают, что оно 
обозначает только "программное обеспечение с нулевой стоимостью". Это
правда, что все свободное программное обеспечение является продуктом с нулевой
стоимостью,<footnote><para>Кто-либо может брать деньги за раздачу копий
свободного программного обеспечения, но, так как он не может запретить
получателям в дальнейшем предлагать их бесплатно, цена фактически немедленно
упадет до нуля.</para></footnote>но не все программное обеспечение с нулевой стоимостью
является свободным. Например, во время войны браузеров в 1990-х, и Netscape и
Microsoft предоставляли свои конкурирующие браузеры бесплатно, в борьбе за
завоевание доли рынка. Ни один из браузеров не был свободным в понятии
"свободного программного обеспечения". Вы не могли получить исходный код, и
даже если вы сможете, вы не имели прав изменять его или распространять его дальше.<footnote><para>
Исходный код Netscape Navigator <emphasis>был</emphasis> в конце концов выпущен под
лицензией с открытым исходным кодом в 1998 и стал основой для браузера от Mozilla.
Смотрите <ulink url="http://www.mozilla.org/"/>.</para></footnote> Единственной
вещью, которую вы могли сделать, это загрузить исполняемый файл и запустить его.
Браузеры были не более свободны, чем программное обеспечение в упаковке, купленное
в магазине; у них просто цена была ниже.</para>

<para>Эта путанница вокруг слова "свободное" возникло исключительно
из-за неудачной двойсвенности в английском языке.  Большинство других
языков отличают низкую цену от свободы (например,разница между <emphasis>gratis</emphasis>
и <emphasis>libre</emphasis> сразу понятна говорящим на Романских языках).
Но место англиийского языка как де факто связующего языка Интернета, означает,
что проблема с английским, в некоторой степени, проблема для всех. 
Неправильное понимание слова "свободный" было так широко распространено,
что программисты, разрабатывающие свободное программное обеспечение
выработали стандартную формулу ответа: "Оно <emphasis>свободное</emphasis>как
<emphasis>свобода</emphasis>&mdash;как <emphasis>свобода слова</emphasis>, 
не как <emphasis>бесплатное пиво</emphasis>." И все же, необходимость объяснять
снова и снова утомительна. Многие программисты чувствовали, с некоторой оговоркой,
что двойственность слова "свободный" препятствует общественному пониманию такого
программного обеспечения.</para>

<para>Но проблема зашла еще дальше. Слово "свободный" несло с собой неотъемлемую
моральную коннотацию: если свобода была конечна сама в себе, то не важно, будет ли
свободное программное обеспечение лучше или выгоднее для какого-то бизнеса в 
каких-либо обстоятельствах. Это были просто приятные побочные эффекты мотивации,
которая была,в основе, не технической и не меркантильной, но духовной. Более того,
позиция "свободный как свобода" привела к ослепительному несоответствию в корпорациях,
которые хотели поддерживать определнные свободные программы в одном направлении
их бизнеса, но продолжали торговать проприетарным программным обеспечением в других.</para>

<para>Эта дилемма пришла в сообщество, которое уже было на пороге кризиса самоопределения.
Программисты, которые действительно <emphasis>писали</emphasis> свободное программное обеспечение,
никогда не приходили к единому мнению относительно общей цели, если она была вообще, движения
по созданию свободного программного обеспечения. Можно даже утверждать, что разброс мнений из
крайности в крайность вводил в заблуждение, так как он ложно внушал линейную последовательность,
в то время, как вместо нее существовала многомерный разброс. Однако, можно различить
две широкие категории убеждений, если мы пока не будем обращать внимания на тонкости.
Одна группа приняла точку зрения Столлмэна о том, что свобода распространения и изменения
является самой важной, и, следовательно, если перестать говорить о свободе, то перестаешь
принимать во внимание главную проблему. Другие чувствовали, что программное обеспечение
само по себе&mdash;самы главный агрумент в свою пользу, и чувствовали себя неудобно,
объявляя проприетарное программное обеспечение плохим по своей сути. Большинство,
но не все разработчики свободного программного обеспечения, верили, что автор
(или работодатель, в случае оплачиваемой работы)<emphasis>должен</emphasis>
иметь право следить за условиями распространения что не нужно добавлять никаких
моральных суждений при выборе определенных условий.</para>

<para>В течение долгого времени эти различия не нуждались во внимательном изучении или 
четких формулировках, но все возрастающий успех свободного программного обеспечения
в мире бизнеса, сделал проблему неизбежной. В 1998, коалицией программистов, которая в последствии
стала Комитетом по Программному Обеспечению с Открытым Исходным Кодом 
(Open Source Initiative (OSI)) был создан термин <firstterm>с&nbsp;открытым&nbsp;исходным
&nbsp;кодом</firstterm>,как альтернатива термину "свободный".<footnote><para>страница OSI в
интернете <ulink url="http://www.opensource.org/"/>.</para></footnote>
OSI чувствовало, что не только термин "свободное программное обеспечение" был
потенциально сбивающим с толку, но и слово "свободный" было только одним симптомом
общей проблемы: движение нуждалось в маркетинговой программе, позволяющей продвинуть
его в корпоративный мир, и так, чтобы разговоры о морали и социальном благе свободного
обмена никогда не долетели до корпоративных залов заседаний совета директоров.

  По их собственным словам:</para>

    <blockquote>
      <para><emphasis>Комитетом по Программному Обеспечению с Открытым
	  Исходным Кодом&mdash;это маркетинговая программа для свободного
	  программного обеспечения. Это продвижение "свобоного программного
	  обеспечения" на твердой прагматичной основе, вместо идеологической
	  ярости. Победившая сущность не изменилась, изменилось проигрышное 
	  отношение и символизм.&nbsp;...</emphasis></para>

      <para><emphasis>Что надо было изменить многим технарям,
	  так это не концепция открытого исходного кода, но его имя.
	  Почему бы не называть его, по традиции, свободным программным 
	  обеспечением?</emphasis></para>

      <para><emphasis>Одной важной причиной является то, что термин
	  "свободное программное обеспечение" может очень легко быть
	  неправильно понят, таким образом, что это ведет к конфликту.&nbsp;...</emphasis></para>

      <para><emphasis>Но настоящей причиной для смены ярлыка
	  является маркетинг. Мы пытаемся теперь продвинуть нашу
	  концепцию в корпоративный мир. У нас есть выигрышный
	  продукт, но наше позиционирование, в прошлом, было 
	  отвратительным. Термин "свободное программное обеспечение"
	  неправильно понимался бизнесменами, которые ошибочно принимали
	  желание обмениваться за анти-коммерцию, или, еще хуже,
	  за воровство.</emphasis></para>

      <para><emphasis>Президенты и технические директора основных корпораций
	  никогда не купят "свободное программное обеспечение". Но если мы 
	  возьмем абсолютно ту же традицию, тех же людей и те же свободные
	  лицензии и поменяем название на "с открытым исходным кодом"? Такое
	  они купят.</emphasis></para>

      <para><emphasis>Многим хакерам трудно в это поверить, но это потому,
	  что они технари, которые думают конкретными, реальными терминами,
	  и не понимают, как важен образ, когда вы что-нибудь продаете.</emphasis></para>

      <para><emphasis>В маркетинге внешний вид&mdash;это реальность.
	  Именно внешний вид мы хотели спустить с баррикад и работать,
	  считаясь с корпоративным миром настолько, насколько позволяют
	  реалии нашего поведения, убеждений и программного обеспечения.</emphasis></para>

      <para>(из <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      и <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>Вершины целых айсбергов противоречий видны в этом тексте. Он ссылается
на "наши убеждения", но очень умно избегает точного изложения того, каковы
эти убеждения. Для одних это может быть убеждение в том, что код разработанный
согласно положениям об открытости будет лучшим кодом; для других это может
быть убеждение в том, что вся информация должна быть общедоступна. Встречающееся 
использование слова "воровство" для ссылки (предположительно) на незаконное 
копирование&mdash;использование, на которое указывают многие, так как по своей сути
это не является воровством, если первоначальный владелец и после этого владеет предметом.
Неоднозначно и замечание о том, что движение за свободное программное обеспечение
может быть ошибочно обвинено в анти-коммерции, но очень осторожно в стороне оставлен
вопрос, имеет ли это обвинение под собой какую-либо фактическую основу.</para>

<para>Но ничто из этого не может служить утверждением того, что сайт OSI 
непоследователен или вводит в заблуждение. Это не так. Скорее, это хороший пример
того, что, по утверждению OSI, отсутсвует в движении свободного программного 
обеспечения: хороший маркетинг, где "хороший" означает "жизнеспособный в мире бизнеса."
Комитет по Программному Обеспечению с Открытым Исходным Кодом дала большому
количеству людей именно то, что они искали&mdash;словарь для разговора о свободном программном
обеспечении как о методике разработки и стратегии бизнеса, вместо идеологического
крестового похода.</para>

</sect2>

<para>Появление Комитета по Программному Обеспечению с Открытым Исходным Кодом
изменило ландшафт свободного программного обеспечения. Оно формализовало
двойственность, которая долгое время была безымянной, и делая это, заставило
движение признать, что у него существует как внутренняя, так и
внешняя политика. Результатом сегодня является то, что обеим сторонам нужно
найти общий язык, так как большинство проектов включают разработчиков из обоих
лагерей, так же как и участников, которые не попадают ни в одну определенную
категорию. Это не значит, что люди никогда не говорят о моральной мотивации&mdash;
иногда, например, обнаруживаются отклонения от традиционной "хакерской этики".
Но разработчик свободного программного обеспечения/программного обеспечения с открытым 
исходным кодом редко в открытую спрашивает об основной мотивации других учавствующих
в проекте. Вклад главнее вкладчика. Если кто-то пишет хороший код, вы не спрашиваете его,
делает ли он это по нравственным соображениям, или потому что ему платит работодатель, или
потому что он улучшает свое резюме, или по любой другой причине. Вы оцениваете вклад на
основе технических знаний и отвечаете на основе технических знаний. Даже явно политические
организации, такие как проект Debian, чьей целью является предоставление 100% свободной
(именно так, "свободной как свобода") вычислительной среды, явно не беспокоятся об
интеграции с не-свободным кодом и о сотрудничестве с программистами, которые не 
разделяют точно таких же целей.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>Ситуация сегодня</title>

<para>Работая над свободным программным проектом, вам не нужно разговаривать
о подобных сложных философских понятиях каждый день. Программисты не настаивают
на том, чтобы все остальные в проекте соглашались с их точкой зрения на все
(те кто настаивают на этом, быстро приходят к невозможности работать ни на
каком проекте). Но вам нужно обращать внимание на то, что вопрос "свободный"
против "с открытым исходным кодом" существует, частично для того, чтобы 
избежать высказываний, которые могут быть неприятны некоторым участникам,
и частично, чтобы лучшим образом понять мотивацию разработчиковy&mdash;в каком-то
смысле это <emphasis>единственно возможный</emphasis>&mdash; способ управлять проектом.</para>

<para>Свободное программное обеспечение&mdash;это культура, которую выбирают.
Чтобы успешно действовать внутри нее, нужно в первую очередь понимать, почему
люди ее выбирают. Техники принуждения не работают. Если люди недовольны на
одном проекте, они просто переберутся на другой. Свободное программное обеспечение
замечательно даже среди сообществ добровольцев, своей легкостью вкладов. 
Большинство вовлеченных в проект людей в действительности никогда не встречались
лицом к лицу с другими участниками, и просто отдавали биты времени, когда им
это нравилось. Нормальный канал, по которому люди связываются друг с другом и
образуют устойчивые группы, сузился до тоненького канала: написанного слова,
перенесенного по электронным сетям. Из-за этого, формирование сплоченных и
целенаправленных групп может занять длительное время. Наоборот, проекту
очень легко потерять потенциального добровольца в первые пять минут 
знакомства. Если проект не производит хорошего первого впечатления,
новички редко дают ему второй шанс.</para>

<para>Быстротечность, или, скорее <emphasis>потенциальная</emphasis>
быстротечность взаимоотношений, возможно, единственная обескураживающая
задача, с которой сталкивается новый проект. Что убедит всех этих людей
оставаться сплоченными достаточно долго, чтобы произвести что-нибудь
полезное? Ответ на этот вопрос достаточно сложен, чтобы занять оставшуюся
часть этой книги, но если бы его нужно было выразить одним предложением,
оно было бы таким:</para>

    <blockquote>
      <para><emphasis>Люди должны чувствовать, что их связь
	  с проектом и влияние на него, прямо пропорционально
	  их вкладам.</emphasis></para> 
    </blockquote>

<para>Никакая группа разработчиков или потенциальных разработчиков, никогда
не должна чувствовать себя обделенной или дискриминированной по не-техническим
причинам. Очевидно, что проекты с корпоративным спонсированием и/или разработчиками
на зарплатедолжны быть особенно осторожны в этом отношении, как <xref linkend="money"/>
обсуждает детально. Конечно, это не значит, что если нет корпоративного спонсирования,
то вам не о чем беспокоиться. Деньги это просто один из многих факторов, которые могут
повлиять на успех проекта. Есть вопрос о том, какой язык выбрать, какую лицензию,
какой процесс разработки, какую точно инфраструктуру создать, как эффективно
известить о начале проекта, и многое другое. Начало работы с той ноги - тема
 <link linkend="getting-started"> следующей главы.</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->


