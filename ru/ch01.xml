<chapter id="introduction"><неи<неи<title>Введение</title><неи<неи<simplesect><неи<неи<para>Большенство проектов с открытыми исходным кодом гибнут.(оказываются неудачными(проваливаются)).</para><неи<неи<para>Мы не склонны слышать слишком часто о провалах. Только успешные проекты<неипривлекают всеобщее внимание, но общее количество свободных проектов настолько <неивелико<footnote><para>На SourceForge.net, одном из известных провайдеров хостинга для <неитаких проектов, их было зарегестрировано 79,225, по данным от середины Апреля 2004 года.<неиИ это даже не близко к общему числу свободных проектов в интернете, а лишь количество <неитех что избрали своим хостингом SourceForge</para></footnote>, что даже несмотря на <неинизкий процет выживаемости, все еще остается внушительное число заметных проектов.<неиТакже мы не слышим о провалах, потому что провал это не событие. Нет такого<неиединственного момента, когда проект вдруг внезапно перестает быть жизнеспособным;<неипо просту люди начинают потихоньку расходится, перестают над ним работать.<неиБывают случаи, когда было внесено последнее изменение, но люди сделавшие<неиего зачастую не подозревали об этом на тот момент. Нет даже четкого <неиопределения когда можно начинать считать проект потухшим. Тогда ли это, когда над<неипроектом никто активно не работал на протяжении шести месяцев? Или же когда,<неиколичество пользователей перестает расти, не успев перевалить за количество<неиразработчиков? А что если разработчики одного проекта забросили его после того<неикак обнаружили, что все это время они дублировали работу другого проекта &mdash; <неии что если они решили присоединиться к тому другому проекту, чтобы расширить его, <неивложив в него плоды своего прежнего труда?<неиИсчез ли прежний проект на совсем или просто поменял место жительства?<неи</para><неи<неи<неи<para>Из-за этих сложностей, становится невозможно определить точное соотношение числа<неиуспехов к числу провалов(процент, пропорция, отношение).<неиНо чуть ли не смешная статистика за десятилетнюю историю свободного ПО, <неинемного копания на SourceForge.net и несколько поисков в гугле, все приводит<неик одному и тому же выводу: процент провалов черезвычайнно велик, что-то<неиоколо(в пределах) 90&ndash;95 процентов. Это число подпрыгнет еще выше если учитывать<неивыжевшие, но дисфункциональные проекты: такие, которые вроде бы и производят рабочий<неи код, но и не самые благоприятные места для существования разработчиков, или проекты <неине совершающие прогресса достаточно расторопно или настолько стабильно(надежно, регулярно), как могли бы.<неи</para><неи<неи<para>Эта книга посвящена тому как избежать провала.  В ней описано не только<неикак нужно правильно делать что-либо, но и как <emphasis>не</emphasis> делать, так чтобы<неи вы научились распознавать и разрешать проблемы на раннем этапе их появления. Я надеюсь, что после прочтения этой книги, вы обзаведетесь<неи большим арсеналом методов, которые позволят вам не только не наступать на наиболее частые <неи грабли разработки свободного ПО,  но и также, как считаться с ростом и поддержкой успешного открытого проекта. Успех проекта это не игра со счетом в ничью, и эта книга вовсе не о том как выйграть <неиили выйти вперед в конкуренции. Наоборот, важной частью ведения открытого проекта<неи является крепкое сотруднечество с остальными, связанными или похожими(!) проектами.<неиВ конечном счете, каждый успешный проект делает вклад в благополучие всецелого, мирового фонда свободного програмного обеспечения.   <неи</para><неи<неи</simplesect><неи<неи<simplesect><неи<неи<para><неиБыло бы заманчивым(tempting) сказать, что причины неудач свободного ПО те же что и у коммерческих проектов. <неиРазработка свободного ПО не означает отсутствие таких проблем, как <неизавышенные требования, расплывчатые спецификации, неэффективное управление кадрами и других сложностнй давно известных индустрии <неиразработки ПО.<неи На эти темы уже написаны горы литературы и, в своей книге, я постараюсь избежать повторений ранее известного.<неиВместо этого, я хочу <неиописать проблемы характерые только для свободного ПО. <неиКогда свободный програмный проект начинает рушиться, это часто потому что разработчики <неи(или мененджеры) не учли уникальных проблем открытого програмного обеспечения, даже будучи<неи основательно подготовленными к более известным проблеммам присущим коммерческому ПО. <неи</para><неи<неи<para>Одной из наиболее распрастраненных ошибок является слишком большие надежды возлагаемые<неина достоинства открытого ПО. Использование открытой лицензии не гарантирует, что орды активных<неиразработчиков неожиданно изволят  потратить свое драгоценное время на ваш проект, не решить <неипроблем затрудненного проекта и простым открытием его исходников. Как раз наоборот: раскрытие проекта<неиможет принести целую кучу дополнительных сложностей, и дороже стоить, с расчетом на короткий срок, <неичем было бы, оставайся он закрытым. Раскрыть проект означает переорганизовать код так, чтобы он был <неипонятен новым разработчикам, незнакомым с вашим проектом, создать официальный веб сайт проекта и настроить <неисписки рассылки(email lists), а также нередко впервые взяться за написание документации. Все это <неимного работы. И если и появятся заинтересованные разработчики, еще к этому добавится и бремя отвечать на<неикучи их вопросов, прежде чем от них будем какая-то польза от их присутствия.<неиКак выразился Jamie Zawinski о ранних турдных временах проекта Mozilla:<неи</para><неи<неи    <blockquote><неи      <para><emphasis>Концепция свободного ПО и вправду работает, но не является лекарством от всех болезней. Если здесь и есть слово предосторожности, лишь можно сказать что нельзя просто взять чахнущий проект, присыпать его волшебной пылью "открытого ПО" и по волшебству разрешить все проблемы. Програмное обеспечение трудно. Проблемы(issues) не так просты.  </emphasis></para><неи<неи      <para>(from <emphasis role="bold"><ulink<неи      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para><неи    </blockquote><неи<неи	<неи<para><неиТакже распространённой ошибкой является экономия на презентации и комплектации, наивно полагая <неичто это всегда можно оставить на потом, уже задолго после начала проекта. Презентация и комплектация<неизаключают в себе широкий круг задач, посвященных теме упростить вступление в проект потенциальным <неиразработчикам.<неиСделать проект более привлекательным можно при помощи написания руководств для пользователей, <неидокументации разработчикам, созданием сайта проекта содержащего информацию для новичков, насколько <неивозможно автоматизировать процессы компиляции установки и т.д.<неиМногие программисты к сожалению считают это второстепенной задачей после написания кода.<неиЕсть несколько причин почему. Во первых, это может показаться трудной работой, потому что <неипреимущества от этого заметны(ощутимы) лишь тем, кто меньше всего знаком с проектом и наоборот. <неиВ конце концов, людям написавшим код не нужна никакая комплектация.<неиИм уже известно как устанавливать, администрировать и использовать их <неисобственное ПО. Во-вторых, умения необходимые для того чтобы завершить презентацию и комплектацию,<неидалеко отличны от тех что нужны для написания кода.<неиЛюди склонны концентрироваться на том, что они лучше знают, даже<неиесли немного времени проведенного над тем, что им кажется менее важным, помогло бы проекту гораздо больше.<неи<неиВ главе <неи<xref<неиlinkend="getting-started"/>, презентация и комплектация обсуждаются в подробностях и объясняется почему так важно чтобы они были приоритетом<неис самого начала проекта. <неи<неи</para><неи<неи<неи<para><неиСледующим идет заблуждение, что свободному проекту нужно мало либо не нужно <неисовсем никакого руководства, или наоборот, что теже принципы управления, используемые<неидля разработки впределах коммерческой организации, могут быть применены с тем же <неиуспехом и в открытом проекте. Управление внутри свободного проекта не всегда<неитак уж заметно, но в успешных проектах, оно обычно происходит за сценой<неив той или иной форме. Достаточно небольшого мысленого эксперимента, чтобы увидеть почему.<неиТипичный свободный проект состоит из произвольного набора программистов&mdash;что уже заведомо<неинепредубежденная группа людей&mdash;, скорее всего незнакомых лично друг с другом,<неикаждый из которых, возможно преследует собственные личные цели в работе над проектом.<неиПредставьте себе чтобы произошло с такой группой людей <emphasis>безо всякого</emphasis> руководства.<неиЕсли только не чудо, они бы претерпели крах либо разошлась кто куда довольно быстро. <неиДела не будут вестись сами собой, насколько нам того бы ни хотелось.<неиНо руководство в открытом проекте, даже будучи активным, зачастую лишь информотивно, неуловимо и неброско.<неиЕдинственное, что держит группу разработчиков вместе так это их раздельное<неиубеждение, что они могут достигнуть большего согласованной группой, нежели по отдельности.<неиТаким образом целью руководства, по большей мере является, поддерживать это<неиубеждение, устанавливая стандарты коммуникации, следя чтобы полезные разработчики <emphasis>не</emphasis><неиоказывались изолироваными вследствии личных особенностей их характеров, и вообщем просто делая <неипроект таким местом, куда бы хотелось возвращаться снова и снова. Конкретные способы достижения<неиэтого и рассмотрены на протяжении всего остатка этой книги.<неи</para><неи<неи<неи<para><неиНаконец, существует общая категория проблем, которые можно классифицировать<неикак "ошибки культурного значения"(навигации). Лет десять назад или даже<неипять, было бы преждевременно говорить о всемерной культуре свободного програмного <неиобеспечения, но не теперь. Постепенно возникла значительная культура <неисвободного ПО, и даже не будучи единой и монолитной, она все еще имеет единый общий <неифундамент(!core) и по меньшей мере настолько же склонна к внутренним разногласиям и партийным расколам как и любая<неигеографически основанная(привязанная) культура.<неиБольшинство успешных открытых проектов проявляют кое-что или все из этих фундаментальных<неихарактеристик. Они вознаграждают определенные типы поведений и наказуют другие;<неисоздают атмосферу, которая поощряет внеплановое участие, иногда в ущерб<неицентральной координации; у них есть понятия грубости и вежливости, которые <неимогут значительно разниться с общепринятыми где-либо еще. И важнее всего, <неидолгосрочные учасники усвоили основы этих неписанных(+) стандартов и <неипришли к взаимному единодушию о моральных принципах, которые следует ожидать от <неиостальных учасников. Безуспешные проекты обычно,хотя и не намеренно, отклоняются в <неизначительной степени от этих фундаментальных стандартов, и зачастую не имеют <неиединогласного соглашения о том, что же представляет собой допустимое поведение.<неиЭто означает, что когда возникают проблемы, ситуация может быстро ухудшиться, из-за что<неиучасники не обладают запасом общекультурных знаний(рефлексов) на которые бы можно было положиться в разрешении<неисложностей.<неи</para><неи<неи<para><неиЭта книга практическое руководство, а не курс антропологии или истории.<неиТем не менее, понимание истоков современной культуры свободного ПО необходимо,<неичтобы подкрепить любой практический совет. Человек, который понимает эту культуру,<неипойдет далеко и широко в мире свободного ПО, встречая на своем пути местные<неиразличия в обычаях и диалекте, и не смотря на это быть способным быстро и без<неипроблем втянуться в любой проект. Для контраста, человек, который эту культуру не<неиусвоил, найдет для себя процесс организации или участия в проекте сложным и полным<неисюрпризов.<неиТак как количество людей разрабатывающих свободное ПО все еще растет<неискачками и рывками, многие из них находятся в этой последней категории&mdash;<неиэто по большинству культура недавних имигрантов и будет продолжать оставаться таковой<неинекоторое время. Если вы считаете себя одним из них, следующий раздел послужит<неивам уроком истории и подготовит к дальнейшим дискуссиям, которые вы встретите позже, <неикак в этой книге, так и в интернете. (С другой стороны, если вы уже работали над <неисвободным проектом достаточно долго, вам уже наверно известна большая часть истории,<неии вы можете пропустить следующий раздел.)<неи</para><неи<неи</simplesect><неи<неи<!-- ========================== SECTION =========================== --><неи<sect1 id="history"><неи<title>История</title><неи<неи<para><неиОбмен програмным обеспечением существовал столько же долго сколько и<неисами програмы. В первые дни компьютеров, производители считали, что <неиконкурентноспособные преимущества главным образом быть могут лишь извлечены <неиот совершенствования аппаратных средств и следовательно не относились(уделяли<неивнимания) к программному обеспечению как к корпоротивному имуществу. <неиМножество пользователей тех первых машин были учеными или техниками, <неиспособными изменить или расширить, поставляемое вместе с компьютерами,<неипрограмное обеспечение самостоятельно. Иногда пользователи отправляли<неисвои програмные патчи не только обратно изготовителю, но и другим <неивладельцам совместимых компьютеров. Компании изготовители очень часто<неидозволяли это и даже поощряли:<неив их глазах, усовершенствования сделанные над их ПО, без разницы чьи и откуда,<неитолько делали машину более привлекательной для потенциальных покупателей.<неи</para><неи<неи<para><неиХотя этот ранний период и напоминает современную культуру свободного <неипрограмного обеспечения, он отличялся в двух ключевых моментах.<неиВо-первых, на тот момент не существовало почти никакой<неистандартизации среди аппаратных средств&mdash;это было врменя<неипроцветающей инновации в компьютерном дизайне, но разнообразие<неикомпьютерных архетектур означало, что все было несовместимо <неисо всем остальным. Таким образом, программы, написанные для одной машины<неиобычно было не возможно использовать на другой. Программисты были склонны<неиспециализироваться в одной какой-либо архитектуре или семействе архитектур<неи(также как сегодня програмисты скорее специализируются в определенном <неиязыке прогаммирования или их семействе, в полной уверенности, что их знания <неиможно будет перенести на любую вычислительную платформу, с которой им придется <неиработать). Из-за того, что личные знания человека обычно относятся к одному виду компьютеров,<неинакопление знаний приводит к тому, что эти компьютеры становятся более привлекательными<неидля него и его коллег. Следовательно, в интересах производителя было распространять<неимашинно-зависимый код и знания как можно шире.</para><неи<неи<para><неиВо-вторых, тогда небыло Интернета. И хотя в те времена было меньше<неиюридических ограничений на распространение чем сегодня, <неибыло гораздо больше технических: средства для получения данных из того<неиили другого источника были относительно неудобными и громоздкими.<неиСуществовали некоторые маленькие, локальные сети, которые были хороши для <неиобмена информацией между сотрудниками внутри одной исследовательской лаборатории<неиили предприятия. Но оставались преграды, которые нужно было преодолеть, если кто-то <неихотел обменяться информацием с кем-нибудь другим, не зависимо от того, <неигде они находились.  Эти преграды <emphasis>преодолевались</emphasis> во многих случаях.<неиИногда, различные группы вступали в контакт друг с другом независимо,<неипосылая диски или магнитные ленты с обычной почтой, а иногда сами производители <неислужили центральным информационным центром для обновлений. Еще помогало и то,<неичто многие из разработчиков компьютеров раннего периода  работали в университетах,<неигде публикация чьих-либо знаний была ожидаемым явлением. Но реалии физической передачи данных означали, <неичто всегда существовало сопротивление при обмене, сопротивление, пропорциональное<неирасстоянию (реальному или организационному), которое должно было преодолеть программное<неиобеспечение. Широко распространенный, свободный от трения обмен, каким мы знаем его сейчас,<неибыл невозможен.</para><неи<неи<!-- ========================== subsection ========================== --><неи<sect2 id="propertization"><неи<title>Восход Проприетарного Программного обеспечения и Свободного Программного обеспечения</title><неи<неи<para>С развитием отрасли, одновременно произошло несколько взаимосвязанных изменений. <неиУжасающее разнообразие аппартных платформ, постепенно уступило место<неинескольким бесспорным победителям - победителям, обладавшим лучшей технологией,<неилучшим маркетингом или некоторй комбинацией обоих. В тоже время, и не совсем случайно,<неиразработка так называемых языков программирования "высокого уровня", означала, что, кто угодно<неимог один раз написать программу, на одном языке, и потом автоматически перевести ("скомпилировать"),<неина язык, который выполняется на другом типе компьютеров. Последствия коснулись и производителей <неиаппартных платформ: теперь клиент мог приложить значительные усилия по проектированию <неии разработке программного обеспечения, без необходимости привязать себя к определенной<неикомпьютерной архитектуре. Вместе с постепенным стиранием разницы в производительности <неиразличных компьютеров, происходившем из-за вытеснения менее эффективных архитектур, производители,<неикоторые  рассматривали свое оборудование как единственный актив, могли предвидеть будущее падение прибыли.<неиЧистая вычислительная мощность стала взаимозаменяемым товаром, тогда как программное обеспечение<неипревратилось в отличительную черту. Продажа программного обеспечения, или, хотя бы, рассмотрение его как<неинеотъемлемой части продажи оборудования, становилось хорошей стратегией.</para><неи<неи<para>Это означало, что производители стали намного строже охранять авторские права<неина свой код. Если пользователи просто продолжали бы свободно обмениваться между собой и<неиизменять код , они могли бы независимо реализовать какие-нибудь усовершенствования,<неикоторый теперь продавались поставщиком как "добавочная ценность". Еще хуже, свободный код мог бы попасть <неив руки конкурентов. Ирония в том, что все это происходило примернов то же время,<неикогда Интернет вставал на ноги. Как раз тогда, когда действительно беспрепятственный<неиобмен программным обеспечением стал наконец технически возможным, изменения в компьютерном бизнесе<неисделали его экономчески нежелательным, как минимум с точки зрения каждой отдельной компании.<неиПоставщики предприняли меры, либо запрещающие пользователю доступ к коду, выполняющемуся на его<неимашине, либо настаивающие на соглашении о неразглашении, которые сделали обмен полезной информацией<неиневозможным.</para><неи<неи<sect3 id="history-conscious-resistance"><неи<title>Сознательное сопротивление</title><неи<неи<para>С медленным падением мира неограниченного обмена кодом, контрреакция <неивыкристаллизовалась в уме минимум одного программиста. Ричард Столлмэн работал<неив лаборатории Искусственного Интеллекта в Массачусетском Технологическом Институте<неив 1970-х и в начале 80-х, в земле обетованной и в золотом веке свободного обмена кодом.<неиВ лаборатории ИИ существовала строгая "этика хакеров",<footnote><para>Столлмэн использовал<неислово "хакер", подразумевая под ним "любого, кто любит программировать и получает<неиудовольствие от того, что хорошо в этом разбирается", а не в относительно новом смысле<неи"любой, кто вторгается в компьютеры"</para></footnote>  и людям не только позволяли, но и ждали от них,<неичто любое изменение, внесенное в систему, станет достоянием общественности. Как Столлмэн<неиписал позже:</para><неи<неи    <blockquote><неи      <para><emphasis>Мы не называли наше программное обеспечение "свободным программным<неи	  обеспечением", потому что тогда этого термина еще не было; но именно этим оно и было.<неи	  Когда человек из другого университета или компании хотел портировать и использовать<неи	  программу, мы охотно позволяли ему это сделать. Если ты видишь кого-нибудь, использующего<неи	  неизвестную и интересную программу, ты всегда можешь попросить посмотреть на исходный<неи	  код, так что ты можешь читать его, менять его или вырезать из него части, чтобы<неи	  создать новую программу.<неи      </emphasis></para><неи<неи      <para>(из <emphasis role="bold"><ulink<неи      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para><неи    </blockquote><неи<неи<неи<para>Это райское сообщество, окружавшее Столлмэна, распалось очень быстро после 1980 года,<неикогда изменения, происходившие во всей остальной индустрии, в конце концов докатились <неии до лаборатории ИИ. Начинающая компания, наняла многих из программистов, работавших<неив лаборатории, для разработки операционной системы, похожей на ту, над которой они<неиработали в лаборатории, только под полной лицензией. В тоже время, лаборатория ИИ получила <неиновое оборудование, в состав которого входила проприетарная операционнная система.</para><неи<неи<para>В том, что происходило, Столлмэн увидел общую тенденцию:</para><неи<неи    <blockquote><неи      <para><emphasis>Современные компьютеры того времени, такие, как VAX или 68020,<неи	  имели свои собственные операционные системы, но ни одна из них не была<неи	  свободным программным обеспечением: вам надо было подписать соглашение <неи	  о неразглашении даже для того, чтобы получить работающую копию.</emphasis> </para><неи<неи      <para><emphasis>Это означало, что первым шагом в использовании компьютера<неи	  было обещание не помогать соседу. Совместная работа была запрещена. Правило, созданное<неи	  владельцами проприетарного программного обеспечения, гласило: "Если ты поделился<неи	  с соседом, то ты пират. Если ты хочешь что-то изменить, умоляй нас, чтобы мы это сделали."<неи      </emphasis> </para><неи<неи    </blockquote><неи<неи<para>По своему личному капризу, он решил сопротивляться общему течению.<неиВместо продолжения работы в теперь уже опустошенной лаборатории ИИ,<неиили устройства на работу по написанию кода в одну из новых компаний, где <неирезультаты его труда были бы заперты в ящике, он отказался от лаборатории и начал проект<неи GNU, а также основал Фонд бесплатного программного обеспечения (FSF). Целью GNU<неи<footnote><para>Это означает "GNU не Unix", и "GNU" в этом определении<неиозначает...тоже самое</para></footnote> было разработать абсолютно бесплатную и открытую <неикомпьютерную операционную систему, и набор прикладных программ, где пользователю<неиникогда не запрещалось исследовать код или распространять свои изменения. Это, в сущности, было<неипопыткой воссоздать то, что было разрушено в лаборатории ИИ, но в масштабе всего мира и без<неитех слабых мест, которые сделали сообщество лаборатории ИИ способным распасться на части.</para><неи<неи<para>Вместе с работой над новой операционной системой, Столлмэн <неиразработал авторскую лицензию, чьи условия гарантировали,<неичто его код будет бесплатным всегда. Открытая лицензия (GPL) фонда бесплатного программного обеспечения от GNU,<неибыла очень умным образцом дзюдо в юридическом пространстве: в ней говорилось, <неичто код может быть скопирован и изменен безо всяких ограничений, и что и копии<неии работы, основанные на данном коде (например, измененные версии) должны <неираспространяться по той же лицензии как и оригинал, без каких либо дополнительных <неиограничений. Таким образом, она использует закон об авторском праве, для достижения<неиэффекта, противоположного традиционному авторскому праву: вместо того, чтобы<неиограничить распространение программного обеспечения, она не позволяет<emphasis>никому</emphasis>,<неидаже автору, ставить какие-либо ограничения. Для Столлмэна, это было даже лучше, чем просто<неивыкладывать код в общий доступ. Если бы он находился в общем доступе, любая отдельная <неикопия могла бы быть встроена в проприетарную програму (такое, как  известно, случалось<неис кодом, распространяемым по разрещающим правовым лицензиям).<неиПока такое использование никаким образом не уменьшало существующую доступность оригинального кода, но оно могло значить, что усилия Столлмэна могли пойти на пользу врагу &mdash; проприетарному программному обеспечению. GPL может быть рассмотрена как вид протекционизма для бесплатного программного обеспечения, так как она не позволяет не-бесплатному программному обеспечению полностью воспользоваться преимуществами кода, доступного по GPL. GPL и ее отношения с другими лицензиями на бесплатное программное обеспечение, подробно обсуждается в<неи<xref linkend="legal"/>.</para><неи<неи<para>With the help of many programmers, some of whom shared<неиStallman's ideology and some of whom simply wanted to see a lot of<неиfree code available, the GNU Project began releasing free replacements<неиfor many of the most critical components of an operating system.<неиBecause of the now-widespread standardization in computer hardware and<неиsoftware, it was possible to use the GNU replacements on otherwise<неиnon-free systems, and many people did.  The GNU text editor (Emacs)<неиand C compiler (GCC) were particularly successful, gaining large and<неиloyal followings not on ideological grounds, but simply on their<неиtechnical merits.  By about 1990, GNU had produced most of a free<неиoperating system, except for the kernel&mdash;the part that the<неиmachine actually boots up, and that is responsible for managing memory,<неиdisk, and other system resources.</para><неи<неи<para>Unfortunately, the GNU project had chosen a kernel design that<неиturned out to be harder to implement than expected.  The ensuing delay<неиprevented the Free Software Foundation from making the first release<неиof an entirely free operating system.  The final piece was put into<неиplace instead by Linus Torvalds, a Finnish computer science student<неиwho, with the help of volunteers around the world, had completed a<неиfree kernel using a more conservative design.  He named it Linux, and<неиwhen it was combined with the existing GNU programs, the result was a<неиcompletely free operating system.  For the first time, you could boot<неиup your computer and do work without using any proprietary<неиsoftware.<footnote><para>Technically, Linux was not the first.  A free<неиoperating system for IBM-compatible computers, called 386BSD, had come<неиout shortly before Linux.  However, it was a lot harder to get 386BSD<неиup and running.  Linux made such a splash not only because it was<неиfree, but because it actually had a high chance of booting your<неиcomputer when you installed it.</para></footnote></para><неи<неи<para>Much of the software on this new operating system was not<неиproduced by the GNU project.  In fact, GNU wasn't even the only group<неиworking on producing a free operating system (for example, the code<неиthat eventually became NetBSD and FreeBSD was already under<неиdevelopment by this time).  The importance of the Free Software<неиFoundation was not only in the code they wrote, but in their political<неиrhetoric.  By talking about free software as a cause instead of a<неиconvenience, they made it difficult for<неиprogrammers <emphasis>not</emphasis> to have a political consciousness<неиabout it.  Even those who disagreed with the FSF had to engage the<неиissue, if only to stake out a different position.  The FSF's<неиeffectiveness as propagandists lay in tying their code to a message,<неиby means of the GPL and other texts.  As their code spread widely,<неиthat message spread as well.</para><неи<неи</sect3><неи<неи<sect3 id="history-accidental-resistance"><неи<title>Accidental resistance</title><неи<неи<para>There were many other things going on in the nascent free<неиsoftware scene, however, and few were as explictly ideological as<неиStallman's GNU Project.  One of the most important was<неиthe <firstterm>Berkeley Software Distribution</firstterm><неи(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix<неиoperating system&mdash;which up until the late 1970's had been a<неиloosely proprietary research project at AT&amp;T&mdash;by programmers<неиat the University of California at Berkeley.  The BSD group did not<неиmake any overt political statements about the need for programmers to<неиband together and share with one another, but they<неи<emphasis>practiced</emphasis> the idea with flair and<неиenthusiasm, by coordinating a massive distributed development effort<неиin which the Unix command-line utilities and code libraries, and<неиeventually the operating system kernel itself, were rewritten from<неиscratch mostly by volunteers.  The BSD project became a prime example<неиof non-ideological free software development, and also served as a<неиtraining ground for many developers who would go on to remain active<неиin the open source world.</para><неи<неи<para>Another crucible of cooperative development was the <firstterm>X<неиWindow System</firstterm>, a free, network-transparent graphical<неиcomputing environment, developed at MIT in the mid-1980's in<неиpartnership with hardware vendors who had a common interest in being<неиable to offer their customers a windowing system.  Far from opposing<неиproprietary software, the X license deliberately allowed proprietary<неиextensions on top of the free core&mdash;each member of the consortium<неиwanted the chance to enhance the default X distribution, and thereby<неиgain a competitive advantage over the other members.  X<неиWindows<footnote><para>They prefer it to be called the "X Window<неиSystem", but in practice, people usually call it "X Windows", because<неиthree words is just too cumbersome.</para></footnote> itself was free<неиsoftware, but mainly as a way to level the playing field between<неиcompeting business interests, not out of some desire to end the<неиdominance of proprietary software.  Yet another example, predating the<неиGNU project by a few years, was TeX, Donald Knuth's free,<неиpublishing-quality typesetting system.  He released it under a license<неиthat allowed anyone to modify and distribute the code, but not to call<неиthe result "TeX" unless it passed a very strict set of compatibility<неиtests (this is an example of the "trademark-protecting" class of free<неиlicenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't<неиtaking a stand one way or the other on the question of<неиfree-versus-proprietary software, he just needed a better typesetting<неиsystem in order to complete his<неи<emphasis>real</emphasis> goal&mdash;a book on computer<неиprogramming&mdash;and saw no reason not to release his system to the<неиworld when done.</para><неи<неи</sect3><неи<неи<para>Without listing every project and every license, it's safe to<неиsay that by the late 1980's, there was a lot of free software<неиavailable under a wide variety of licenses.  The diversity of licenses<неиreflected a corresponding diversity of motivations.  Even some of the<неиprogrammers who chose the GNU GPL were much less ideologically driven<неиthan the GNU project itself.  Although they enjoyed working on free<неиsoftware, many developers did not consider proprietary software a<неиsocial evil.  There were people who felt a moral impulse to rid the<неиworld of "software hoarding" (Stallman's term for non-free software),<неиbut others were motivated more by technical excitement, or by the<неиpleasure of working with like-minded collaborators, or even by a<неиsimple human desire for glory.  Yet by and large these disparate<неиmotivations did not interact in destructive ways.  This is partly<неиbecause software, unlike other creative forms like prose or the visual<неиarts, must pass semi-objective tests in order to be considered<неиsuccessful: it must run, and be reasonably free of bugs.  This gives<неиall participants in a project a kind of automatic common ground, a<неиreason and a framework for working together without worrying too much<неиabout qualifications beyond the technical.</para><неи<неи<para>Developers had another reason to stick together as well: it<неиturned out that the free software world was producing some very<неиhigh-quality code.  In some cases, it was demonstrably technically<неиsuperior to the nearest non-free alternative; in others, it was at<неиleast comparable, and of course it always cost less.  While only a few<неиpeople might have been motivated to run free software on strictly<неиphilosophical grounds, a great many people were happy to run it<неиbecause it did a better job.  And of those who used it, some<неиpercentage were always willing to donate their time and skills to help<неиmaintain and improve the software.</para><неи<неи<para>This tendency to produce good code was certainly not universal,<неиbut it was happening with increasing frequency in free software<неиprojects around the world.  Businesses that depended heavily on<неиsoftware gradually began to take notice.  Many of them discovered that<неиthey were already using free software in day-to-day operations, and<неиsimply hadn't known it (upper management isn't always aware of<неиeverything the IT department does).  Corporations began to take a more<неиactive and public role in free software projects, contributing time<неиand equipment, and sometimes even directly funding the development of<неиfree programs.  Such investments could, in the best scenarios, repay<неиthemselves many times over.  The sponsor only pays a small number of<неиexpert programmers to devote themselves to the project full time, but<неиreaps the benefits of <emphasis>everyone's</emphasis> contributions,<неиincluding work from unpaid volunteers and from programmers being paid<неиby other corporations.</para><неи<неи</sect2><неи<неи<!-- ========================== subsection ========================== --><неи<sect2 id="free-vs-open-source"><неи<title>"Free" Versus "Open Source"</title><неи<неи<para>As the corporate world gave more and more attention to free<неиsoftware, programmers were faced with new issues of presentation.  One<неиwas the word "free" itself.  On first hearing the term "free software"<неиmany people mistakenly think it means just "zero-cost software."  It's<неиtrue that all free software is zero-cost,<footnote><para>One may charge<неиa fee for giving out copies of free software, but since one cannot<неиstop the recipients from offering it at no charge afterwards, the<неиprice is effectively driven to zero immediately.</para></footnote><неиbut not all zero-cost software is free.  For example, during the<неиbattle of the browsers in the 1990s, both Netscape and Microsoft gave<неиaway their competing web browsers at no charge, in a scramble to gain<неиmarket share.  Neither browser was free in the "free software" sense.<неиYou couldn't get the source code, and even if you could, you didn't<неиhave the right to modify or redistribute it.<footnote><para>The source<неиcode to Netscape Navigator<неи<emphasis>was</emphasis> eventually released under an open source<неиlicense, in 1998, and became the foundation for the Mozilla web<неиbrowser.  See <ulink<неиurl="http://www.mozilla.org/"/>.</para></footnote>  The only thing<неиyou could do was download an executable and run it.  The browsers were<неиno more free than shrink-wrapped software bought in a store; they<неиmerely had a lower price.</para><неи<неи<para>This confusion over the word "free" is due entirely to an<неиunfortunate ambiguity in the English language.  Most other tongues<неиdistinguish low prices from liberty (the distinction between<неи<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is<неиimmediately clear to speakers of Romance languages, for example).  But<неиEnglish's position as the de facto bridge language of the Internet<неиmeans that a problem with English is, to some degree, a problem for<неиeveryone.  The misunderstanding around the word "free" was so<неиprevalent that free software programmers eventually evolved a standard<неиformula in response: "It's <emphasis>free</emphasis> as in<неи<emphasis>freedom</emphasis>&mdash;think <emphasis>free<неиspeech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having<неиto explain it over and over is tiring.  Many programmers felt, with<неиsome justification, that the ambiguous word "free" was hampering the<неиpublic's understanding of this software.</para><неи<неи<para>But the problem went deeper than that.  The word "free" carried<неиwith it an inescapable moral connotation: if freedom was an end in<неиitself, it didn't matter whether free software also happened to<неиbe better, or more profitable for certain businesses in certain<неиcircumstances.  Those were merely pleasant side effects of a motive<неиthat was, at bottom, neither technical nor mercantile, but moral.<неиFurthermore, the "free as in freedom" position forced a glaring<неиinconsistency on corporations who wanted to support particular free<неиprograms in one aspect of their business, but continue marketing<неиproprietary software in others.</para><неи<неи<para>These dilemmas came to a community that was already poised for<неиan identity crisis.  The programmers who actually<неи<emphasis>write</emphasis> free software have never been of one mind<неиabout the overall goal, if any, of the free software movement.  Even<неиto say that opinions run from one extreme to the other would be<неиmisleading, in that it would falsely imply a linear range where there<неиis instead a multidimensional scattering.  However, two broad<неиcategories of belief can be distinguished, if we are willing to ignore<неиsubtleties for the moment.  One group takes Stallman's view, that the<неиfreedom to share and modify is the most important thing, and that<неиtherefore if you stop talking about freedom, you've left out the core<неиissue.  Others feel that the software itself is the most important<неиargument in its favor, and are uncomfortable with proclaiming<неиproprietary software inherently bad.  Some, but not all, free<неиsoftware programmers believe that the author (or employer, in the case<неиof paid work)<неи<emphasis>should</emphasis> have the right to control the terms of<неиdistribution, and that no moral judgement need be attached to the<неиchoice of particular terms.</para><неи<неи<para>For a long time, these differences did not need to be carefully<неиexamined or articulated, but free software's burgeoning success in the<неиbusiness world made the issue unavoidable.  In 1998, the term<неи<firstterm>open&nbsp;source</firstterm> was created as an alternative<неиto "free", by a coalition of programmers who eventually became The<неиOpen Source Initiative (OSI).<footnote><para>OSI's web home is <ulink<неиurl="http://www.opensource.org/"/>.</para></footnote>  The OSI felt<неиnot only that "free software" was potentially confusing, but that the<неиword "free" was just one symptom of a general problem: that the<неиmovement needed a marketing program to pitch it to the corporate<неиworld, and that talk of morals and the social benefits of sharing<неиwould never fly in corporate boardrooms.  In their own words:</para><неи<неи    <blockquote><неи      <para><emphasis>The Open Source Initiative is a marketing<неи      program for free software. It's a pitch for "free software" on<неи      solid pragmatic grounds rather than ideological<неи      tub-thumping. The winning substance has not changed, the losing<неи      attitude and symbolism have.&nbsp;...</emphasis></para><неи<неи      <para><emphasis>The case that needs to be made to most techies<неи      isn't about the concept of open source, but the name. Why not<неи      call it, as we traditionally have, free software?</emphasis></para><неи<неи      <para><emphasis>One direct reason is that the term "free<неи      software" is easily misunderstood in ways that lead to<неи      conflict.&nbsp;...</emphasis></para><неи<неи      <para><emphasis>But the real reason for the re-labeling is a<неи      marketing one. We're trying to pitch our concept to the<неи      corporate world now. We have a winning product, but our<неи      positioning, in the past, has been awful. The term "free<неи      software" has been misunderstood by business persons, who<неи      mistake the desire to share with anti-commercialism, or worse,<неи      theft.</emphasis></para><неи<неи      <para><emphasis>Mainstream corporate CEOs and CTOs will never<неи      buy "free software." But if we take the very same tradition, the<неи      same people, and the same free-software licenses and change the<неи      label to "open source" ? that, they'll buy.</emphasis></para><неи<неи      <para><emphasis>Some hackers find this hard to believe, but<неи      that's because they're techies who think in concrete,<неи      substantial terms and don't understand how important image is<неи      when you're selling something.</emphasis></para><неи<неи      <para><emphasis>In marketing, appearance is reality. The<неи      appearance that we're willing to climb down off the barricades<неи      and work with the corporate world counts for as much as the<неи      reality of our behavior, our convictions, and our<неи      software.</emphasis></para><неи<неи      <para>(from <emphasis role="bold"><ulink<неи      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis><неи      and <emphasis role="bold"><ulink<неи      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"<неи      /></emphasis>)</para><неи    </blockquote><неи<неи<para>The tips of many icebergs of controversy are visible in that<неиtext.  It refers to "our convictions", but smartly avoids spelling out<неиexactly what those convictions are.  For some, it might be the<неиconviction that code developed according to an open process will be<неиbetter code; for others, it might be the conviction that all<неиinformation should be shared.  There's the use of the word "theft" to<неиrefer (presumably) to illegal copying&mdash;a usage that many object<неиto, on the grounds that it's not theft if the original possessor still<неиhas the item afterwards.  There's the tantalizing hint that the free<неиsoftware movement might be mistakenly accused of anti-commercialism,<неиbut it leaves carefully unexamined the question of whether such an<неиaccusation would have any basis in fact.</para><неи<неи<para>None of which is to say that the OSI's web site is inconsistent<неиor misleading.  It's not.  Rather, it is an example of exactly what<неиthe OSI claims had been missing from the free software movement: good<неиmarketing, where "good" means "viable in the business world."  The<неиOpen Source Initiative gave a lot of people exactly what they had been<неиlooking for&mdash;a vocabulary for talking about free software as a<неиdevelopment methodology and business strategy, instead of as a moral<неиcrusade.</para><неи<неи</sect2><неи<неи<para>The appearance of the Open Source Initiative changed the<неиlandscape of free software.  It formalized a dichotomy that had long<неиbeen unnamed, and in doing so forced the movement to acknowledge that<неиit had internal politics as well as external.  The effect today is<неиthat both sides have had to find common ground, since most projects<неиinclude programmers from both camps, as well as participants who don't<неиfit any clear category.  This doesn't mean people never talk about<неиmoral motivations&mdash;lapses in the traditional "hacker ethic" are<неиsometimes called out, for example.  But it is rare for a free software<неи/ open source developer to openly question the basic motivations of<неиothers in a project.  The contribution trumps the contributor.  If<неиsomeone writes good code, you don't ask them whether they do it for<неиmoral reasons, or because their employer paid them to, or because<неиthey're building up their resum&eacute;, or whatever.  You evaluate<неиthe contribution on technical grounds, and respond on technical<неиgrounds.  Even explicitly political organizations like the Debian<неиproject, whose goal is to offer a 100% free (that is, "free as in<неиfreedom") computing environment, are fairly relaxed about integrating<неиwith non-free code and cooperating with programmers who don't share<неиexactly the same goals.</para><неи<неи</sect1><неи<неи<!-- ========================== SECTION =========================== --><неи<sect1 id="today"><неи<title>The Situation Today</title><неи<неи<para>When running a free software project, you won't need to talk<неиabout such weighty philosophical matters on a daily basis.<неиProgrammers will not insist that everyone else in the project agree<неиwith their views on all things (those who do insist on this quickly<неиfind themselves unable to work in any project).  But you do need to be<неиaware that the question of "free" versus "open source" exists, partly<неиto avoid saying things that might be inimical to some of the<неиparticipants, and partly because understanding developers' motivations<неиis the best way&mdash;in some sense, the <emphasis>only</emphasis><неиway&mdash;to manage a project.</para><неи<неи<para>Free software is a culture by choice.  To operate successfully<неиin it, you have to understand why people choose to be in it in the<неиfirst place.  Coercive techniques don't work.  If people are unhappy in<неиone project, they will just wander off to another one.  Free software<неиis remarkable even among volunteer communities for its lightness of<неиinvestment.  Most of the people involved have never actually met the<неиother participants face-to-face, and simply donate bits of time<неиwhenever they feel like it.  The normal conduits by which humans bond<неиwith each other and form lasting groups are narrowed down to a tiny<неиchannel: the written word, carried over electronic wires.  Because of<неиthis, it can take a long time for a cohesive and dedicated group to<неиform.  Conversely, it's quite easy for a project to lose a potential<неиvolunteer in the first five minutes of acquaintanceship.  If a project<неиdoesn't make a good first impression, newcomers rarely give it a<неиsecond chance.</para><неи<неи<para>The transience, or rather the <emphasis>potential</emphasis><неиtransience, of relationships is perhaps the single most daunting task<неиfacing a new project.  What will persuade all these people to stick<неиtogether long enough to produce something useful?  The answer to that<неиquestion is complex enough to occupy the rest of this book, but if it<неиhad to be expressed in one sentence, it would be this:</para><неи<неи    <blockquote><неи      <para><emphasis>People should feel that their connection to a<неи      project, and influence over it, is directly proportional to<неи      their contributions.</emphasis></para> <неи    </blockquote><неи<неи<para>No class of developers, or potential developers, should ever<неиfeel discounted or discriminated against for non-technical reasons.<неиClearly, projects with corporate sponsorship and/or salaried<неиdevelopers need to be especially careful in this regard, as <xref<неиlinkend="money"/> discusses in detail.  Of course, this doesn't<неиmean that if there's no corporate sponsorship then you have nothing to<неиworry about.  Money is merely one of many factors that can affect the<неиsuccess of a project.  There are also questions of what language to<неиchoose, what license, what development process, precisely what kind of<неиinfrastructure to set up, how to publicize the project's inception<неиeffectively, and much more.  Starting a project out on the right foot<неиis the topic of <link linkend="getting-started">the next<неиchapter</link>.</para><неи<неи</sect1><неи<неи</chapter><неи<неи<!--<неиlocal variables: <неиsgml-parent-document: ("book.xml" "chapter")<неиend:<неи--><неи<неи