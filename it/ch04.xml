<chapter id="social-infrastructure">

<title>L'Infrastruttura Sociale e Politica</title>

<simplesect>

<para>Le prime domande che la gente fa sul software libero sono: Come funziona? Cosa mantiene il progetto in funzione? Chi prende le decisioni? Io sono sempre insoddisfatto dalle risposte blande sulla meritocrazia, sullo spirito di collaborazione, sul fatto che il codice parla da sé, ecc.. Il fatto è che, alla domanda non è facile rispondere.
La meritocrazia, e il codice funzionante sono parte di esso, ma essi fanno poco nello spiegare come gira il progetto sulla base del giorno per giorno, e non dicono nulla su come i conflitti vengono risolti.</para>

<para>Questo capitolo cerca di mostrare i puntellamenti che progetti di successo hanno in comune. Io intendo di successo non solo in termini di qualità tecniche, ma anche di salute operativa e di capacità di sopravvivere. La salute operativa è la capacità di incorporare strada facendo nuovi contributi di codice e di sviluppatori, e di essere reattivi ai rapporti di bugs che arrivano. La capacità di sopravvivere in un progetto è la capacità di esistere indipendentemente da un partecipante individuale o sponsor&mdash;tpensate ad essa come alla probabilità che il progetto continuerebbe anche se tutti i suoi membri fondatori si spostassero su un'altra cosa. Il successo tecnico non è difficile da conseguire, ma senza una robusta base di sviluppo e un fondamento sociale, un progetto può essere incapace di gestire la crescita che il successo iniziale porta, alla partenza di individualità carismatiche.</para>

<para>Ci sono molti modi per raggiungere questo tipo di successo. Alcuni riguardano una struttura di amministrazione formale, con la quale le discussioni sono risolte, nuovi sviluppatori sono invitati (o talvolta estromessi), nuove funzionalità sono pianificate, e così via. Altri riguardano strutture meno formali, ma un più conscio auto contenimento, per produrre un'atmosfera essere piacevole, cosa su cui la gente può contare come una forma di amministrazione <foreignphrase>de facto</foreignphrase>. Tutte e due le vie portano allo stesso risultato: un senso di stabilità istituzionale, supportata da comportamenti e procedure che possono essere ben compresi da chiunque partecipi. Queste caratteristiche sono anche più importanti in sistemi di auto organizzazione, che in sistemi controllati dal centro, perché in sistemi di auto organizzazione ognuno è conscio che poche mele  marce possono rovinare l'intero canestro, almeno per un certo tempo.</para>

<sect1 id="forkability">
<title>La Possibilità di Diramazione</title>

<para>L'ingrediente indispensabile che tiene legati gli sviluppatori in un progetto di software libero, e li rende desiderosi di arrivare a un compromesso quando necessario, è<firstterm>la possibilità di una diramazione</firstterm> del codice: l'abilità di ciascuno di prendere una copia del codice sorgente e partire con un progetto concorrente, cosa nota come<firstterm>forchetta</firstterm>.
La cosa paradossale è che la <emphasis>eventualità</emphasis> di forchette nei progetti di software libero è usualmente una forza molto più grande che le forchette reali, che sono molto rare. Poichè una forchetta è un male per chiunque (per le ragioni esaminate in dettaglio in
<xref linkend="forks"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase>), più seria diventa la minaccia di una forchetta, più le persone sono desiderose di un compromesso per evitarla.</para>

<para>Le forchette, o piuttosto il potenziale delle forchette, sono la ragione per cui non vi sono veri dittatori nei progetti di software libero. Questo può sembrare una affermazione sorprendente, considerato quanto è comune ascoltare qualcuno chiamato dittatore o tiranno in un dato progetto open source. Ma questo tipo di tirannia è speciale, completamente differente dall'intendere convenzionale della parola. Immaginate un re i cui sudditi potessero copiare il suo intero regnare in ogni momento e muoversi a copiarne il ruolo nella misura in cui lo vedano giusto. Non governerebbe un tale re molto diversamente da uno i cui sudditi fossero soggetti a sottostare al suo dominio, qualunque cosa facesse?</para>

<para>Questo è il perché anche progetti non formalmente organizzati come democrazie, in pratica, sono democrazie quando ci si trova davanti a importanti decisioni. La replicabilità suggerisce possibilità di diramazione; la possibilità di diramazione suggerisce consenso. Può ben essere che ognuno voglia far riferimento a un unico leader (l'esempio più famoso è Linus Torvalds nello sviluppo del kernel di Linux), ma ciò avviene perchè essi <emphasis>scelgono</emphasis> di fare così in un modo completamente non cinico e sinistro. Il dittatore non ha un magico potere sul progetto. Una proprietà chiave di tutte le licenze open source è che esse non danno a una parte un maggior potere che a qualche altra di decidere come il codice possa essere cambiato o usato. Se il dittatore stesse improvvisamente incominciando a prendere cattive decisioni, ci sarebbe un'agitazione, seguita probabilmente da una rivolta e da una scissione. A meno che, indubbiamente, le cose raramente vanno così lontano, il dittatore venga prima a un compromesso. </para>

<para>Ma appunto perché la possibilità di diramazione mette un limite superiore al potere che uno può esercitare su un progetto non significa che non ci siano importanti differenze su come il progetto viene condotto. Voi non avete bisogno del fatto che ogni decisione venga presa alla richiesta di ultima spiaggia di chi sta prendendo in considerazione una forchetta. Cosa che seccherebbe molto rapidamente e toglierebbe energia al lavoro reale. Le prossime due sezioni esaminano differenti modi di organizzare un progetto in modo tale che la maggior parte delle decisioni vadano per il verso giusto. Questi due esempi sono in qualche modo idealizzati come casi limite. Molti progetti cadono con una certa continuità fra di essi. </para>

</sect1>

</simplesect>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator"></simplesect>
<!-- ======================== SECTION ============================== -->
<sect1 id="benevolent-dictator">
<title>I Dittatori Benevoli</title>

<para>Il modello di <firstterm>dittatore benevolo</firstterm> è esattamente ciò che suona come: l'autorità delle decisioni finali di pende da un'unica persona, che, in virtù della personalità e dell'esperienza, si prevede che la usi saggiamente. </para>

<para>Sebbene dittatore benevolo (o <firstterm>BD</firstterm>)sia il termine standard per questo ruolo, è bene pensare ad esso come arbitro approvato dalla comunità o giudice. Generalmente i dittatori benevoli, in realtà non prendono tutte le decisioni, e nemmeno la maggioranza delle decisioni. Non è verosimile che un'unica persona potrebbe avere la necessaria esperienza per prendere costantemente buone decisioni lungo tutta l'area del progetto, e comunque, gli sviluppatori di qualità non starebbero intorno se non avessero qualche influenza sull'orientamento del progetto. Quindi i dittatori benevoli non dettano molto. Invece essi lasciano che le cose vadano avanti da sole attraverso discussioni ed esperimenti ogni volta che sia possibile. Essi partecipano a tutte le discussioni di persona, ma coma regolari sviluppatori, ma facendo riferimento a un reggente di area che ha più esperienza. Solo quando è chiaro che non può essere raggiunto il consenso, e che la maggior parte del gruppo <emphasis>vuole</emphasis> che qualcuno guidi le decisione in modo che lo sviluppo vada avanti, puntano i pedi e dicono questo è il modo in cui deve andare. La riluttanza a prendere decisioni per decreto è una prerogativa condivisa virtualmente da tutti i dittatori benevoli di successo; è una delle ragioni per cui essi riescono a mantenere il ruolo.</para>

<!-- For link compatibility with a previous misspelling. -->
<simplesect id="benevolant-dictator-qualifications"></simplesect>
<sect2 id="benevolent-dictator-qualifications">
<title>Chi Può Essere un Dittatore Benevolo?</title>

<para>Essere un BD richiede una combinazione di caratteristiche. C'è bisogno, prima di tutto, di una sensibilità ben affilata per quanto riguarda la propria influenza nel progetto, che di volta in volta porta a un auto controllo. Nei primi stadi di una discussione un singolo non esprimerebbe opinioni e conclusioni con così tanta certezza che altri potrebbero percepire come  inutile il dissentire. La gente deve esprimere pubblicamente e liberamente le idee, anche sciocche idee. E' inevitabile che il BD anche esprimerà una idea sciocca di volta in volta, certamente, e quindi il ruolo richiede anche una abilità a rendersi conto e a riconoscere quando uno ha preso una cattiva decisione  sebbene questo sia un caratteristica che <emphasis>ogni</emphasis> buon sviluppatore dovrebbe avere, specialmente se rimane col progetto per un lungo tempo. Ma la differenza è che i BD può permettersi un lapsus di volta in volta senza preoccuparsi per sua credibilità a lungo termine. Gli sviluppatori con minore anzianità possono non sentirsi così sicuri, così il BD dovrebbe esprimere critiche o decisione contrarie con una certa sensibilità per quanto riguarda il peso che hanno le sue parole, sia tecnicamente che psicologicamente.</para>

<para>Il BD  <emphasis>non</emphasis> deve aver bisogno di avere la più evidente esperienza di tutti nel progetto. Egli deve aver sufficiente esperienza sul suo codice, e capire e commentare ogni cambiamento in considerazione, ma questo è tutto. La posizione di BD è né acquisita né mantenuta per virtù di una abilità nello scrivere codice che intimidisce. Quello che <emphasis>è</emphasis> importante è l'esperienza e il senso dell'insieme nella progettazione non necessariamente la capacità di produrre una buona progettazione su richiesta, ma la capacitò di riconoscere la buona progettazione, qualunque sia la sua origine.</para>

<para>E' comune che il dittatore benevolo sia il fondatore del progetto. Ma questa è più una correlazione che una causa. Il tipo di qualità che rende uno capace di avviare un progetto con successo&mdash;competenza tecnica, capacità di persuadere altri ad unirsi ad esso, ecc...&mdash;sono esattamente le qualità di cui ogni BD avrebbe bisogno. E, certamente, i fondatori incominciano con una sorta di anzianità automatica, che può spesso essere sufficiente a far si che la dittatura benevola appaia il percorso di minor difficoltà per tutti gli interessati. </para>

<para>Ricordate che la possibilità per la forchetta esiste in entrambi i casi. Un BD può fare una diramazione dal progetto appunto facilmente come ciascun altro, e alcuni hanno occasionalmente fatto così, quando hanno visto che la direzione che essi volevano che prendesse il progetto era diversa da quella che gli altri sviluppatori volevano. A causa della possibilità di diramazione, non ha importanza se il dittatore benevolo ha la radice (i privilegi di amministratore del sistema) sui principali servers del progetto. La gente a volte parla del controllo del server  come se essa fosse la fonte principale del potere in un progetto, ma nei fatti ciò è irrilevante. Il fatto di aggiungere o rimuovere le password di invio su un particolare server riguarda solo la copia del progetto che è sul server. Un prolungato abuso di questo potere, da parte del BD o di qualche altro, spingerebbe solamente lo sviluppo a spostarsi su un altro server.</para>

</sect2>

<para>Se il progetto dovrebbe avere un dittatore benevolo o se andrebbe meglio con qualche sistema meno centralizzato, dipende largamente da chi è disponibile a ricoprire il ruolo. Come regola generale, se  è semplicemente ovvio per ognuno chi dovrebbe essere il BD, allora quella è la strada da prendere. Ma se non c'è un candidato per il BD immediatamente scontato, allora il progetto dovrebbe usare un processo di di presa delle decisioni decentralizzato, come descritto nella prossima sezione.</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="consensus-democracy">
<title>Democrazia Basata sul Consenso</title>

<para>Quando un progetto diventa più vecchio, tende a spostarsi altrove rispetto alla benevola dittatura. Questa non è necessariamente insoddisfazione nei riguardi di un particolare BD. E' semplicemente che il comando basato sul gruppo è più stabile dal punto di vista dell'evoluzione, per prendere in prestito una metafora dalla biologia. Ogni volta che un dittatore benevolo si ritira, un sistema non dittatoriale&mdash;stabilisce una costituzione, per così dire.  TIl gruppo può non cogliere questa occasione la prima volta, o la seconda, ma alla fine lo farà; una volta fatto, la decisione è improbabile che sia mai revocata. Il senso comune spiega il perché: se un gruppo di N persone fosse per l'investire una persona di un potere speciale, ciò significherebbe che N&nbsp;-&nbsp;1 persone stessero accettando una diminuzione della loro personale influenza. Le persone usualmente non vogliono fare ciò. Anche se lo facessero, la dittatura risultante sarebbe ancora condizionata. Il gruppo consacrò il BD, chiaramente il gruppo potrebbe deporre il BD. Perciò, una volta che il progetto ha abbandonato la leadership da parte di un individuo carismatico per un più formale sistema basato sul gruppo, è raro che torni indietro. </para>

<para>I dettagli su come questo sistema funziona variano largamente, ma ci sono due elementi comuni: uno, il gruppo lavora per consenso la maggior parte del tempo; due: c'è un formale meccanismo di voto con cui aiutarsi quando il consenso non può essere raggiunto. </para>

<para><firstterm>Consenso</firstterm> ha solamente il significato di un accordo con il quale ognuno vuol vivere. Non è uno stato ambiguo: un gruppo ha raggiunto il consenso quando qualcuno propone che quel consenso è stato raggiunto, e nessuno contraddice questa affermazione. La persona che propone il consenso dovrebbe, certamente, stabilire di quale consenso di tratta, e quali azioni possono essere intraprese in conseguenza di esso, se non sono scontate.</para>

<para>La maggior parte delle conversazioni nel progetto sono su argomenti tecnici, come il giusto modo per correggere un bug, se o non aggiungere una funzionalità, quanto particolareggiatamente documentare le interfacce, ecc.. La conduzione basata sul consenso funziona bene perché si armonizza senza problemi con la discussione tecnica stessa. Alla fine di una discussione c'è generalesse l'accordo su che via intraprendere. Qualcuno può usualmente fare un post che è allo stesso tempo un sommario su quello che è stato deciso e una implicita proposta di consenso. Ciò fornisce anche ad ognuno un'ultima occasione per dire: Aspettate, io non sono d'accordo su questo. Dobbiamo sviscerare ciò ancora per un po'.</para>

<para>Per piccole, non controverse decisioni, la proposta di consenso è implicita. Per esempio, quando uno sviluppatore invia spontaneamente un correzione di bug, l'invio stesso è una proposta di consenso: Io prendo per buono che tutti concordino sul fatto che questo bug debba essere corretto, e che questo sia il modo di correggerlo. Ovviamente lo sviluppatore non dice in realtà ciò; egli semplicemente invia la correzione, e gli altri nel progetto, non si infastidiscono a  dare il loro ok, perché il silenzio è consenso. Se qualcuno invia un cambiamento che non riscuote il consenso, il risultato è semplicemente che il progetto discute il cambiamento come se non fosse stato ancora inviato. Il motivo per cui ciò funziona nell'argomento della prossima sezione.</para>

<sect2 id="version-control-relaxation">
<title>Controllo di Versione Significa Che Vi Potete Rilassare</title>

<para>Il fatto che il codice sorgente è  tenuto sotto il controllo di versione significa che si può tornare indietro dalla maggior parte delle decisioni. Il più comune modo in cui ciò avviene è che ognuno invia un cambiamento pensando erroneamente che ognuno sarebbe contento di esso, solo che si trova di fronte a obiezioni dopo il fatto. E' tipico che tali obiezioni incomincino con un obbligatorio encomio per aver evitato una precedente discussione, anche se questo si può evitare se chi fa l'obiezione non ricorda di una tale discussione negli archivi della mailing list. In un modo o nell'altro, non c'è ragione per la quale il tono della discussione debba essere differente se l'invio del cambiamento è avvenuto prima o dopo. Ogni modifica può essere annullata, almeno fino a quando modifiche dipendenti da essa siano introdotte (cioè la nuova codifica così verrebbe fermata se la modifica originaria fosse subito rimossa). Il sistema del controllo di versione dà al progetto il modo di annullare gli effetti di giudizi cattivi o frettolosi. Questo, a sua volta, libera la gente dall'affidarsi al proprio istinto su quante conferme siano necessarie prima di fare qualcosa.</para>

<para>Ciò significa anche che il processo dello stabilire il consenso non ha bisogno di essere molto formale. La maggior parte dei progetti con esso si comportano a sensazione. Le modifiche minori possono andare avanti confidenzialmente senza discussione, o con un minimo di discussione seguito da pochi cenni di accordo. Per le modifiche più significative, specialmente quelle che possono destabilizzare una gran quantità di codice, le persone dovrebbero aspettare un giorno o due prima di dare per acquisito che c'è il consenso, essendo razionale che nessuno dovrebbe essere marginalizzato in una importante conversazione semplicemente perché non ha controllato la posta abbastanza frequentemente.</para>

<para>Così, quando qualcuno confida di sapere quello che deve essere fatto, dovrebbe procedere e farlo. Questo non si applica solo alla correzione del software, ma all'aggiornamento del sito, alle modifiche della documentazione, e a ogni altra cosa, a meno che la cosa non sia controversa. Usualmente ci saranno solo poche occasioni in cui una azione avrà bisogno di essere annullata, e queste saranno trattate sulla base del caso per caso. Certamente, uno non dovrebbe incoraggiare la gente ad essere testarda. C'è ancora una differenza psicologica fra una decisione sotto discussione e una che ha già avuto effetto, anche se questa è tecnicamente reversibile. La gente pensa sempre che la velocità è alleata dell'azione e sarà leggermente più riluttante ad annullare un cambiamento che a prevenirlo innanzitutto. Se uno sviluppatore abusa di questo fatto inviando modifiche potenzialmente controverse troppo velocemente, comunque, la gente può e dovrebbe protestare e costringere quello sviluppatore a uno standard più stringente finché le cose migliorino. </para>

</sect2>

<sect2 id="voting">
<title>Quando Il Consenso Non Può Essere Raggiunto, Votate </title>

<para>Inevitabilmente alcuni dibattiti potranno arrivare al consenso. Quando tutte le altre vie per venir fuori da un punto morto falliscono, la soluzione è votare. Ma prima che sia raccolto il voto ci deve essere una chiara serie di scelte sulla scheda. Qui, di nuovo, il normale procedimento della discussione tecniche si unisce in modo benefico col procedimento del progetto di presa della decisioni. Il tipo di questione che vengono al voto spesso comprendono complessi e sfaccettati problemi. In ogni discussione così complessa ci sono usualmente una o due persone che occupano il ruolo di <firstterm>onesti mediatori</firstterm>: che postano sommari periodici dei vari argomenti e che tengono traccia di dove sono i punti di disaccordo 
(e di accordo). Questi sommari aiutano ciascuno a misurare quanto progresso è stato fatto e quanti problemi rimangono da essere elencati. Questi medesimi sommari possono servire come prototipo di scheda elettorale, dovrebbe diventare necessario un voto. Se gli onesti mediatori hanno fatto bene il loro lavoro, saranno capaci di chiamare con credibilità per il voto quando viene il momento, e il gruppo sarà contento di  usare una scheda elettorale basata sui loro sommari di problemi. I mediatori stessi potranno esser partecipi al dibattito; non è necessario che essi rimangano superiori alla lite, fino a quando essi possono capire e rappresentare in modo imparziale i punti di vista, e non permettere che i propri sentimenti di parte gli impediscano di riassumere lo stato del dibattito in una maniera neutrale.</para>

<para>Il reale contenuto della scheda non è oggetto di controversie. Col tempo le materie vengono al voto, i disaccordi vengono condensati in pochi problemi chiave, con etichette riconoscibili e brevi descrizioni. Occasionalmente lo sviluppatore farà obiezione alla forma della scheda stessa. A volte il suo interessamento è legittimo, per esempio, che una scelta importante è stata lasciata fuori o non è stata descritta accuratamente. Ma altre volte uno sviluppatore può star cercando si evitare l'inevitabile, forse sapendo che il voto non andrà come lui vuole.
Vedere <xref linkend="difficult-people"/><phrase output="printed">
in <xref linkend="communications"/></phrase> su come affrontare questo tipo do ostruzionismo.</para>

<para>Ricordatevi di specificare il sistema di voto, se ci sono molti differenti modi, e se la gente potrebbe potrebbe fare delle cattive supposizioni sulla procedura che viene usata. Una buona scelta nella maggior parte dei casi è il
<firstterm>voto per approvazione</firstterm>, dove ogni votante può votare per quante scelte vuole nella scheda. Il voto per approvazione è semplice da spiegare a da contare, e diversamente da altri metodi, richiede un solo giro di voto. Vedere <ulink
url="http://en.wikipedia.org/wiki/Voting_system#List_of_systems"/> per maggiori dettagli sul voto di approvazione ed altri sistemi di voto, ma cercate si evitare di entrare in una lunga discussione su quale sistema usare (perché, certamente, allora voi stessi vi troverete in una discussione su quale sistema di voto usare per decidere quale sistema di voto usare). Una ragione per cui il voto di approvazione è una buona scelta è che è molto difficile per ognuno farvi obiezione;&mdash;è all'incirca tanto giusto quanto un sistema di voto può esserlo.</para>

<para>Infine portate il voto in pubblico. Non c'è bisogno di segretezza o anonimato nel voto su questioni che avete dibattuto pubblicamente comunque. Ogni partecipante deve postare il suo voto nella mailing list, in modo che ogni osservatore possa registrare e controllare il risultato per se stesso, e in modo tale che ogni cosa sia registrata negli archivi.</para>

</sect2>

<sect2 id="when-to-vote">
<title>Quando Votare</title>

<para>La cosa più difficile nel voto è determinare quando farlo. In generale passare al voto dovrebbe essere molto raro&mdash;un ultimo ricorso quando tutte le altre opzioni sono fallite. Non pensate che il voto sia un gran modo di risolvere i dibattiti. Non lo è. Esso mette fine alle discussioni e quindi mette fine a un modo creativo di pesare ai problemi. Nella misura in cui la discussione continua, c'è la possibilità che qualcuno venga fuori con una nuova soluzione che piace a tutti. Ciò avviene sorprendentemente spesso. Un dibattito acceso può produrre un nuovo modo di pensare ai problemi, e portare a proposte che possono soddisfare tutti. Anche quando non vengono fuori nuove proposte, è usualmente ancora meglio venire a un compromesso che sostenere un voto. Dopo un compromesso, ognuno e un po' scontento, mentre dopo un voto, alcuni sono scontenti mentre altri sono contenti. Da un punto di vista politico è preferibile la prima situazione: almeno ciascuno può avvertire di aver ricavato una ricompensa per la sua scontentezza. Egli può essere insoddisfatto, ma così è anche per gli altri.</para>

<para>Il principale vantaggio del voto è che finalmente sistema una questione in modo che ognuno possa andare avanti, ma esso la sistema con un conto delle teste, invece che con un dialogo razionale che porti tutti alla medesima conclusione. Più le persone hanno esperienza con i progetti open source, meno desiderose le trovo di sistemare le cose col voto. Invece essi cercheranno di esplorare soluzione non precedentemente considerate, o arrivare a un compromesso più forte di quanto avessero precedentemente pianificato. Sono disponibili varie tecniche per impedire di arrivare ad un voto prematuro. La più ovvia è semplicemente dire Io penso che non siete ancora pronti per il voto, e spiegare perché no. Un'altra è chiedere una informale (non vincolante) alzata di mano. Se il responso tende chiaramente da una parte o dall'altra, ciò spingerà alcuni a volere subito un compromesso, ovviando al bisogno di voto. Ma il modo più efficace è semplicemente offrire una nuova soluzione, o un nuovo punto di vista su una vecchia proposta, in modo che le persone si occupino nuovamente dei problemi invece di ripetere solamente i vecchi argomenti.</para>

<para>In certi rari casi ognuno può convenire che tutte le soluzioni di compromesso sono peggiori di quelle di non compromesso. Quando ciò avviene, votare è meno spiacevole, sia perché è più probabile arrivare a una soluzione migliore sia perché la gente non si dispiacerà troppo non importa quale sia il risultato. Anche allora il voto non dovrebbe essere affretto. La discussione che porta al voto è ciò che educa l'elettorato, cosicché fermare quella discussione può prematuramente abbassare la qualità del risultato.</para>

<para>(Notate che questo avvertimento a non chiamare il voto non si applica al voto di cambio inclusione descritto in
<xref linkend="stabilizing-a-release"/><phrase output="printed">
in <xref linkend="development-cycle"/></phrase>.  Lì il voto è più di un meccanismo di comunicazioni, un mezzo per registrare il coinvolgimento di uno nel processo di revisione del cambiamento, così che ognuno può dire quanta revisione ha avuto un dato cambiamento.)</para>

</sect2>

<sect2 id="electorate">
<title>Chi Vota?</title>

<para>Avere un sistema di voto solleva la questione dell'elettorato: chi accede al voto? Ciò ha la potenzialità di essere un problema sensibile, perché obbliga il progetto a riconoscere alcune persone come più coinvolte, o come aventi più giudizio di altre. </para>

<para>La miglior soluzione è assumere una distinzione esistente, l'accesso all'invio, e annettere il privilegio di votare ad esso. In progetti che offrono sia il pieno che il parziale accesso all'invio, la questione se coloro che hanno l'invio parziale possano votare dipende largamente dal procedimento col quale è concesso l'accesso all'invio. Se il progetto lo distribuisce liberalmente, per esempio come un modo di mantenere molti mezzi conferiti da terze parti nel deposito, allora dovrebbe essere chiaro che l'accesso all'invio parziale è in realtà solo per l'invio, non per il voto. Naturalmente permane la implicazione inversa: poiché i possessori del pieno invio
<emphasis>avranno</emphasis> privilegi di voto, essi devono essere scelti non solo nella qualità di programmatori, ma anche in quella di membri dell'elettorato. Se qualcuno mostra tendenze distruttive o ostruzioniste nella mailing list, il gruppo dovrebbe esser molto prudente sul fatto di renderlo uno che può fare gli invii, anche se la persona è tecnicamente competente.</para>

<para>Lo stesso sistema di voto dovrebbe essere usato per scegliere nuove persone che possono fare l'invio, sia pieno che parziale. Ma qui c'è uno dei rari casi in cui la segretezza è appropriata. Non potete ricevere voti sulle potenziali persone con diritto di voto postati in una pubblica mailing list, perché la sensibilità (e la reputazione) dei candidati potrebbero essere ferite. Invece, il modo usuale è che uno con diritto di invio posti su una mailing list privata costituita solo da altri con diritto di invio, che propongono che a qualcuno sia concesso l'accesso all'invio. Gli altri con diritto di invio parlano di quello che pensano liberamente, sapendo che la discussione è privata. Spesso non ci sarà disaccordo, e quindi non ci sarà necessità del voto. Dopo aver aspettato pochi giorni per essere sicuri che tutti quelli con diritto di voto abbiano avuto modo di rispondere, il proponente manda una email al candidato, e gli offre l'accesso all'invio. Se c'è disaccordo, ne deriva una discussione come per ogni altra questione, con la possibilità che si arrivi a votare. Perché questo procedimento sia aperto e franco, il solo fatto che la discussione sta avendo luogo dovrebbe punto essere segreto.
Se la persona in considerazione sapesse che essa sta andando avanti, e che quindi non gli è offerto l'accesso all'invio, potrebbe concludere che ha perso il voto, e presumibilmente ne sarebbe dispiaciuto. Certamente se qualcuno fa richiesta di accesso all'invio, allora non c'è scelta al di fuori di quella di prendere in considerazione la proposta e apertamente accettarla o respingerla. Se la seconda, allora la cosa dovrebbe essere fatta quanto più educatamente possibile, con una chiara spiegazione: A noi piacciono le tue rettifiche, ma non ne abbiamo viste a sufficienza o Noi apprezziamo tutte le tue rettifiche, ma esse richiedevano considerevoli miglioramenti prima di poter essere applicate, così non ci sentiamo a nostro agio nel darti già l'accesso all'invio. Speriamo che ciò cambierà, tuttavia, col tempo Ricordate, ciò che state dicendo potrebbe riuscire come un colpo, a seconda del livello e della confidenza con la persona. Cercate di vederla dal loro punto di vista quando gli mandate l'email.</para>

<para>Poiché aggiungere una nuova persona che possa fare gli invii è più conseguenziale che la maggior parte delle decisioni di una volta, alcuni progetti hanno speciali requisiti per il voto. Per esempio essi possono richiedere che la proposta riceva almeno<emphasis>n</emphasis> voti positivi e nessun voto negativo, che una super maggioranza voti a favore. Il parametro esatto non è importante; l'idea base è far si che il gruppo sia cauto nell'aggiungere nuove persone che possono fare l'invio. Simili o più stringenti requisiti possono applicarsi ai voti per<emphasis>rimuovere</emphasis> uno che può fare gli invii, sebbene si speri che ciò non sarà mai necessario.  Vedere <xref
linkend="committers"/><phrase output="printed"> in
<xref linkend="managing-volunteers"/></phrase> di più sugli aspetti del non voto per aggiungere o rimuovere le persone che possono fare gli invii.</para>

</sect2>

<sect2 id="polls">
<title>Sondaggi Contro Voti.</title>

<para>Per certi tipi di voto può essere utile espandere l'elettorato. Per esempio, se gli sviluppatori semplicemente non possono capire se la scelta di una data interfaccia si adatta al modo in cui la gente in realtà usa il software, un modo è chiedere a tutti gli iscritti alla mailig list del progetto di votare. Questi sono in realtà
<firstterm>sondaggi</firstterm> piuttosto che voti, ma gli sviluppatori possono scegliere di trattare il risultato come vincolante. Come con ogni sondaggio, assicuratevi che sia chiaro ai partecipanti che c'è una opzione inclusa: se qualcuno pensa che non sia offerta una migliore scelta nelle domande del sondaggio, la sua risposta può riuscire come il più importante risultato del sondaggio.</para>

</sect2>

<sect2 id="veto">
<title>I Veti</title>

<para>Alcuni progetti permettono una specie di voto conosciuto come
<firstterm>veto</firstterm>.  Un veto è un modo per lo sviluppatore per mettere un alt a un frettoloso o mal considerato cambiamento. Pensate a un veto come a qualcosa fra una forte obiezione e una ostruzione. Il suo esatto significato varia da un progetto all'altro. Alcuni progetti rendono molto difficile ignorare un veto; altri consento loro di essere ignorati da un regolare voto della maggioranza, magari dopo un rallentamento forzato per una ulteriore discussione. Ogni veto dovrebbe essere accompagnato da una accurata spiegazione; un veto senza una tale spiegazione dovrebbe essere considerato invalido o una comparsa. </para>

<para>Con il veto viene l'abuso del veto. A volte gli sviluppatori sono troppo desiderosi di sollevare steccati per sbarazzarsi di un veto, quando in realtà quello per cui erano stati chiamati era un maggior discussione. Potete prevenire un abuso di veto con l'essere molto riluttanti verso il veto voi stessi e richiedendolo quando qualcun altro usa il suo veto troppo spesso. Se necessario potete ricordare al gruppo che i veti sono vincolanti solo finché il gruppo è d'accordo che lo siano dopotutto se una chiara maggioranza di sviluppatori vuole X, allora X sta per succedere in un modo o nell'altro. O gli sviluppatori che pongono i veti fanno marcia indietro, o il gruppo deciderà di sminuire il significato di un veto. </para>

<para>Potete vedere gente scrivere -1 per esprimere un veto. Questo uso proviene dall'Apache Software Foundation che ha estremamente strutturato il procedimento di voto e di veto descritto a <ulink
url="http://www.apache.org/foundation/voting.html"/>.  Gli standard Apache si sono diffusi agli altri progetti, e voi vedrete le loro convenzioni usate con varie sfumature in molti posti nel mondo dell'open source. Tecnicamente -1 non indica sempre un veto formale anche in accordo con lo standard Apache, ma in modo informale ciò viene preso a significare un veto, o almeno una obiezione molto forte.</para>

<para>Come i voti, i veti possono applicarsi retroattivamente. Non sta bene per obiettare a un veto, sulla base del fatto che il cambiamento in questione è stato già inviato, o che l'iniziativa è stata presa (a meno che non sia qualcosa di irrevocabile, come l'emissione un comunicato stampa). D'altra parte un veto che arrivi con un ritardo di settimane o di mesi verosimilmente non è da prendere molto sul serio, nè dovrebbe esserlo.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="written-rules">
<title>Metter Giù Tutto Per Iscritto</title>

<para>A un certo punto il numero degli accordi e delle convenzioni che girano nel vostro progetto diventa talmente grande che avete bisogno di registrarli da qualche parte. Per dare una tale legittimazione documentale, chiarite che essa è basata sulle discussioni della mailing list e sugli accordi già effettivi. Quando componete il documento, fate riferimento alle discussioni rilevanti negli archivi della mailing list, e dove c'è un punto di cui non siete sicuri, chiedete. Il documento non deve contenere sorprese: esso non è la fonte di accordi, esso è solamente la loro descrizione. Certamente, se ha successo, la gente incomincerà a citarlo come una fonte di autorità in se stesso, ma ciò significa appunto che esso riflette la volontà generale del gruppo accuratamente.</para>

<para>Questo è il documento a cui si allude in <xref
linkend="developer-guidelines"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>.  Naturalmente, quando il progetto è molto giovane, avrete da mettere giù linee guida senza il beneficio di una lunga storia del progetto da cui trarre ispirazione. Ma appena la comunità di sviluppo matura, potete adattare il linguaggio per rispecchiare le cose che via via vengono fuori.</para>

<para>Non cercate di essere completi. Nessun documento può contenere ogni cosa che la gente ha bisogno di sapere sulla partecipazione al progetto. Molte delle convenzioni che il progetto elabora rimangono per sempre non dette, mai menzionate esplicitamente, eppure accolte da tutti. Altre cose sono semplicemente troppo ovvie per essere menzionate, e solamente distrarrebbero dall'importante, ma non ovvio materiale. Per esempio non ha senso scrivere linee guida come Siate puliti e rispettosi verso gli altri nella mailing list e non incominciate guerre di offese, o scrivete un codice chiaro, leggibile e libero da bugs. Certamente queste cose sono desiderabili, ma poiché non c'è universo concepibile in cui esse potrebbero non essere desiderabili non vale la pena menzionarle. Se la gente è ruvida nella mailing list, o scrivere codice con bugs, essi non si fermeranno perché lo hanno detto le linee guida del progetto. C'è bisogno che queste situazioni siano affrontate quando nascono, non con ammonizioni generali ad essere buoni. D'altra parte se il progetto ha delle linee guida specifiche su
<emphasis>come</emphasis> scrivere buon codice come le regole per documentare le API in un certo formato, allora queste linee guida devono essere messe giù nella maniera più completa possibile.</para>

<para>Una buona maniera per individuare cosa includervi, è basare il documento sulle domande che i nuovi arrivati fanno più spesso e sulle lamentele più frequenti degli sviluppatori. Questo non significa necessariamente che ciò dovrebbe finire nel foglio delle FAQ &mdash;probabilmente ciò ha bisogno di una struttura più narrativa di quanto le FAQ possano offrire; ma essa dovrebbe seguire lo stesso principio basato sul reale di dare un indirizzo ai problemi che realmente sorgono, piuttosto che quelli che voi anticipate possano sorgere.</para>

<para>Se il progetto è una benevola dittatura, o ha funzionari investiti di speciali poteri (presidente, poltrona, qualcos'altro), allora il documento è una buona opportunità di codificare le procedure di successione. A volte questo può essere semplice come nominare specifiche persone come sostituti nel caso che il BD lasci il improvvisamente il progetto per qualche ragione. Generalmente, se c'è un BD, solo il BD può andarsene nominando un successore. Se ci sono funzionari per elezione, allora la procedura di elezione e di nomina che è stata usata per sceglierli in primo luogo dovrebbe essere descritta nel documento. Se non c'era nessuna procedura all'origine, allora ottenete il consenso sulla procedura nella mailing list <emphasis>prima</emphasis> di scriverla.  La gente a volte può essere permalosa con le strutture gerarchiche, così il soggetto bisogna prenderlo con tatto.</para>

<para>Forse la cosa più importante è chiarire che i ruoli possono essere riconsiderati. Se le convenzioni descritte nel documento incominciano ad ostacolare il progetto, ricordate a tutti che si suppone che ci sia una viva riflessione delle intenzioni del gruppo, non un sorta di frustrazione o di blocco. Se qualcuno ha il vizio di chiedere inappropriatamente che le regole vengano riconsiderate ogni volta che le regole vanno a suo modo, voi non dovete discutere ciò con lui&mdash;a volte il silenzio è la miglior tattica. Se altre persone si aggiungono alla protesta, suoneranno insieme, e sarà ovvio che qualcosa bisogna cambiarla. Se nessuna altro si aggiunge, allora la persona non raccoglierà molto consenso e le cose resteranno così come sono.</para>

<para>Due buoni esempi di linee guida di un progetto sono il Subversion
<filename>hacking.html</filename> file, a <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>, a e i documenti dell'amministrazione dell'Apache Software Foundation, a <ulink
url="http://www.apache.org/foundation/how-it-works.html"/> e <ulink
url="http://www.apache.org/foundation/voting.html"/>.  La ASF in realtà è un insieme di progetti di software, legalmente organizzata come una organizzazione no profit, così i suoi documenti tendono a descrivere le procedure di organizzazione, più che le convenzioni di sviluppo. Esse sono anche letture di pregio, tuttavia, perché rappresentano l'esperienza accumulata di un gran numero di progetti open source.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
