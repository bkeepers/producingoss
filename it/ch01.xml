<chapter id="introduction">

<title>Introduzione</title>

<simplesect>

<para>La maggioranza dei progetti di software libero fallisce.</para>

<para>Noi tendiamo a non dare molto ascolto alla notizia di questi fallimenti. Solo i progetti che hanno successo attraggono l'attenzione e ci sono tanti progetti di software libero in totale<footnote><para>SourceForge.net, sito popolare solo di hosting aveva 79.225 progetti registrati a metà Aprile 2004. Questo non è neanche lontanamente il numero dei progetti in Internet, certamente; è solo il numero di quelli che scelgono di usare SourceForge.</para></footnote> che, anche se solo una piccola percentuale di essi ha successo il risultato è che a noi appare essere tuttavia una gran quantità. Inoltre noi non abbiamo notizia dei fallimenti perchè i fallimenti non fanno notizia. Non c'è un particolare momento in cui il progetto cessa di essere praticabile. La gente semplicemente sceglie di allontanarsene. Ci può essere un momento in cui  un cambiamento finale viene fatto nel progetto, ma quelli che lo hanno fatto generalmente non sanno che quel cambiamento è l'ultimo. Non è facile stabilire  quando il progetto si è esaurito. Quando non è stato lavorato per sei mesi? Quando la base di utenti ha smesso di crescere senza aver superato la base di sviluppatori? E se  gli sviluppatori di un progetto lo abbandonano perchè si rendono conto che stanno duplicando il lavoro di un altro?&mdash;e se essi si uniscono a quell'altro progetto dunque lo espandono per immettervi molto del loro sforzo primitivo? Il progetto precedente è finito o ha semplicemente cambiato casa?</para>

<para>A causa di una tale complessità è impossibile stabilire il numero dei fallimenti. Ma una evidenza annedotica  da più di un decennio di open source, qualche ricerca su SourceForge.net e un piccolo googling tutti puntano alla stessa conclusione: il numero è estremamente alto, probabilmente dell'ordine del 90–95%. Il numero sale se includete i progetti che sopravvivono ma son disfunzionali: quelli che <emphasis>stanno</emphasis> producendo codice che gira ma che non hanno motivo di esistere, o che non stanno progredendo così velocemente o così affidabilmente come dovrebbero.</para>

<para>Questo libro parla di come evitare i fallimenti. Esso esamina non solo come fare le cose bene ma come farle sbagliate in modo che voi possiate riconoscere e correggere gli errori piuttosto in anticipo. La mia speranza è che dopo averlo letto voi abbiate un repertorio di tecniche non tanto per evitare i trabocchetti dello sviluppo open source quanto per operare per la crescita e la manutenzione di un progetto di successo. Successo non è un gioco senza perdite e questo libro non parla di come vincere o farsi strada nella competizione. Indubbiamente una importante parte dei progetti open source che girano sta funzionando regolarmente con altri progetti simili. Nel lungo periodo ogni progetto che ha successo contribuisce allo stato di benessere dell'insieme complessivo del software libero nel web.</para>

</simplesect>

<simplesect>

<para>Si sarebbe tentati di dire che i progetti di software libero falliscono per lo stesso tipo di motivi del software proprietario. Certamente il software libero non non è il solo a trovarsi di fronte a presupposti non realistici,  specifiche vage, insufficiente amministrazione di risorse, non adeguata fase di progetto o alcuni degli altri spauracchi ben noti all'industria del software. C'è una enorme quantità di cose scritte su questi argomenti, e non tenterò di ripeterle in questo libro. Invece  tenterò di descrivere i problemi peculiari del software libero. Quando i progetti di software libero vanno in secca ciò avviene perchè gli sviluppatori (o gli organizzatori) non si sono resi conto dei problemi peculiari dello sviluppo open source anche se essi possono essere ben consci delle meglio note difficoltà dello sviluppo closed source.</para>

<para>Uno dei più comuni errori è l'aspettativa circa i benefici dell'open source stesso. Una licenza open source non garantisce il fatto che orde di sviluppatori mettano subito a disposizione i loro tempo  per il vostro progetto, nè l'open sourcing cura automaticamente i mali di un progetto che dà problemi. Di fatto è proprio l'opposto: l'aprire un progetto può aggiungere una serie di complessità e costo
<emphasis>specialmente</emphasis> nel breve periodo che non mantenendolo chiuso. Aprirlo significa adattare il codice per renderlo comprensibile a persone completamente nuove, metter su un sito di sviluppo e liste email e spesso scrivere documentazione per la prima volta.  Tutto ciò costa molto lavoro  E certamente se alcuni sviluppatori interessati  
<emphasis>lo aprono</emphasis> c'è il carico aggiuntivo di rispondere alle domande dei nuovi arrivati per un certo tempo prima di vedere i benefici della loro presenza. Come sviluppatore Jamie Zawinski sui primi giorni del progetto Mozilla disse:</para>

    <blockquote>
      <para><emphasis>L'open source funziona ma non è del tutto certo che sia una panacea. Se c'è una diceria che mette in guardia qui è che tu non puoi prendere un progetto che sta morendo, cospargerlo con la magica polvere dell'open source e ottenere che ogni cosa funzioni. Il software è difficile. I problemi non sono così semplici</emphasis></para>

      <para>(da <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
    </blockquote>

<para>Un errore correlato è quello di essere avari nella presentazione e nel confezionamento della relativa applicazione. La presentazione e il confezionamento dell'applicazione relativa richiedono una larga serie di compiti che girano tutti intorno al tema di ridurre la difficoltà di chi entra nel progetto. Rendere il progetto invitante per i non iniziati significa scrivere un documentazione per l'utente e per lo sviluppatore, metter su un sito che sia di informazione per i nuovi arrivati, automatizzare la compilazione e l'installazione quanto più sia possibile, ecc. Molti programmatori purtroppo trattano questo compito come se fosse secondario rispetto alla scrittura del codice. C'è una duplice ragione perchè questo avviene: in primo luogo ciò può essere percepito come un lavoro di poco conto perchè i suoi benefici sono più visibili a coloro che hanno meno familiarità col progetto e viceversa.
Dopotutto, coloro che sviluppano il progetto non hanno bisogno dell'applicazione relativa. Essi sanno già come installare , gestire e usare il software perchè lo hanno scritto. In secondo luogo le abilità richieste per fare una presentazione e confezionare la relativa applicazione sono spesso completamente differenti da quelle richieste per scrivere codice. Le persone tendono a focalizzarsi su ciò in cui essi sono brave anche se potrebbe servire di più al progetto spendere tempo su ciò a cui esse sono meno adatte.  <xref
linkend="getting-started"/> discute in dettaglio sulla presentazione e sul confezionamento dell'applicazione e spiega perchè è cruciale che essi abbiano la priorità in una una corretta partenza del progetto.</para>

<para>Poi viene la credenza errata che in un progetto open source occorra un una piccola o nessuna organizzazione o al contrario che funzionerà la stessa organizzazione di un progetto non aperto. L'organizzazione in un progetto open source non è sempre visibile, eccetto che nei progetti di successo, usualmente  avviene dietro le quinte in una forma o nell'altra. Un  esperimento in apparenza insignificante è sufficiente a mostrare come. Un progetto open source è fatto di un casuale numero di programmatori una già nota categoria di liberi pensatori&mdash;che molto verosimilmente non si sono mai incontrati e che possono avere differenti obbiettivi nel lavorare al progetto. L'esperimento pensato consiste nell'immaginare cosa succederebbe ad un simile gruppo <emphasis>senza</emphasis> una organizzazione.
A meno di un miracolo fallirebbe o scomparirebbe dalla vista molto rapidamente. Le cose semplicemente non gireranno da se, per quanto noi vorremmo altrimenti.
Ma l'organizzazione malgrado possa essere alquanto attiva è spesso irregolare, scarsa, riservata. La sola cosa che tiene unito un gruppo di sviluppatori è il pensiero condiviso che si possa fare di più in concerto che non individualmente. Così l'obiettivo dell'organizzazione è sopratutto assicurarsi che essi continuino a pensare questo, stabilendo standards di comunicazione, rendendo sicuramente utile che gli sviluppatori non siano emarginati a causa di peculiarità di comportamento, e in generale facendo in modo che per gli sviluppatori il progetto sia un luogo dove ritornare. Tecniche specifiche per far ciò sono discusse per il resto di questo libro.</para>

<para>Infine c'è una categoria generica di problemi che può essere chiamata "fallimenti della navigazione culturale" Dieci anni fa, anche cinque, sarebbe stato prematuro parlare di cultura globale del software libero, ma ora non più. Una cultura riconoscibile è lentamente emersa e mentre essa è certamente non monolitica è per lo meno soggetta al dissenso alla faziosità come una cultura geograficamente chiusa&mdash;essa ha un consistente nocciolo di base. Molti progetti di successo mostrano alcune o tutte le caratteristiche di questo nocciolo. Essi premiano certi tipi di comportamento e ne puniscono altri; essi creano un'atmosfera che incoraggia una partecipazione non pianificata, a volte a spese di un coordinamento centrale; essi hanno concetti di rudezza e garbo che possono differire sostanzialmente da quelli che prevalgono altrove. Ciò che è molto importante è il fatto che partecipanti veterani fanno propri questi comportamenti, dimodochè hanno in comune un forte consenso sul comportamento previsto. Progetti che falliscono deviano in modo significativo da questo nocciolo, sebbene senza intenzione, e spesso non hanno l'unanimità su ciò che costituisce un comportamento ragionevole non predefinito. Ciò significa che quando insorgono problemi la situazione può rapidamente deteriorarsi, giacchè i partecipanti non hanno quell'insieme di riflessi culturali per aiutarsi a risolvere i dissensi. </para>

<para>Questo libro è una guida pratica, non uno studio antropologico o una storia. In tutti i casi una valida conoscenza dell'odierna cultura del software libero è un fondamento essenziale per ogni consiglio pratico.
Una persona che comprende la cultura può viaggiare in lungo e in largo per il mondo dell'open source, incontrando molte varianti in abitudini e linguaggi, sarà sempre capace di partecipare effettivamente e con agio ovunque. Invece una persona che non comprende la cultura troverà il processo dell'organizzazione e della partecipazione difficile e pieno di sorprese. Siccome il numero di persone che sviluppano software libero è sempre in crescita a balzi e rimbalzi c'è sempre gente in questa seconda categoria&mdash; questa è in maniera preponderante la cultura dei nuovi arrivati e le cose continueranno ad essere tali per qualche tempo.
Se voi pensate di poter essere fra questi la prossima sezione dà le basi per discutere cose che incontrerete più tardi sia in questo libro sia in Internet. (Se invece avete lavorato con l'open source per un certo tempo forse conoscete molto della sua storia e di conseguenza vi sentirete liberi di saltare questa sezione).</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<title>Storia</title>

<para>La condivisione del software è esistita da quando è esistito il software . Nei primi giorni dei computers i costruttori videro che risultati positivi nella competizione si erano avuti principalmente nell'innovazione dell' hardware e quindi non dedicarono attenzione al software come risorsa commerciale. Molti dei primi clienti che usavano queste macchine erano scienziati o tecnici che avevano l'abilità di modificare e ampliare il software inviato con la  macchina. I clienti a volte distribuirono le modifiche non solo ai costruttori ma anche agli altri possessori di macchine simili.
I costruttori spesso tollerarono e incoraggiarono ciò: ai loro occhi miglioramenti al software di qualunque origine rendevano la macchina più allettante per gli altri potenziali acquirenti.</para>

<para>Anche se questo periodo iniziale somigliava all'attuale cultura del software libero per diverse ragioni, differiva per due principali aspetti. Uno, c'era già una certa standardizzazione dell'hardware; era il tempo di una fiorente innovazione nel progetto dei computers, ma la diversità nelle architetture di calcolo voleva dire che ogni cosa era diversa da ogni altra. Cosicchè il software scritto per una macchina non avrebbe funzionato con un'altra. I programmatori si orientarono ad acquisire abilità con una certa architettura o famiglia di architettura (laddove oggi essi sarebbero più adatti ad acquistare esperienza in un linguaggio di programmazione o famiglia di linguaggio confidando nel fatto che la propria esperienza sarebbe trasferibile a qualsiasi hardware di calcolo a cui a loro capiterà di lavorare). Poiché l'esperienza di una persona tende a essere specifica di un tipo di computer la loro accumulazione di esperienza fece sì che quel computer fosse preferibile e ai suoi colleghi. Ci fu quindi da parte dei costruttori l'interesse a che  si estendesse quanto più possibile il codice e la conoscenza della macchina. </para>

<para>Due, non c'era Internet. Sebbene ci fossero minori restrizioni legali sulla condivisione rispetto ad oggi i limiti erano più di carattere tecnico. I mezzi per spostare dati da un posto all'altro erano sconvenienti e scomodi, relativamente parlando. C'era qualche piccolo network buono per scambiare informazione fra impiegati in una stessa ricerca o compagnia. Ma rimanevano barriere da superare si si voleva scambiare con chiunque, ovunque fosse. Queste barriere  <emphasis>furono</emphasis> superate in molti casi.  A volte differenti gruppi stabilirono reciproci contatti autonomamente inviando dischi o nastri tramite posta terrestre e a volte i costruttori stessi servirono come centrali di scambio per le modifiche.  Fu di aiuto anche il fatto che molto dei primi sviluppatori lavoravano alle università dove era previsto che uno pubblicasse le sue conoscenze. Ma la realtà fisica della trasmissione dati diceva che c'era sempre un impedimento alla condivisione, un impedimento proporzionale al tratto (fisico o organizzativo) che il software doveva percorrere. Una condivisione larga e priva di attriti, come la conosciamo oggi era impossibile.</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<title>L'ascesa del software proprietario e del software libero</title>

<para>Come conseguenza del fatto che l'industria maturava avvennero molti cambiamenti. La grande varietà del software prodotto diede strada ai pochi chiari vincitori&mdash;vincitori per la tecnologia superiore, per una organizzazione commerciale superiore, o una combinazione delle due cose.
Allo stesso tempo, e non completamente in simultaneità, lo sviluppo dei cosiddetti linguaggi di “alto livello” volle dire che uno avrebbe potuto scrivere un programma una volta sola in un unico linguaggio e ottenere che esso fosse tradotto (“compilato”) in modo da poter girare su differenti tipi di computer. Le implicazioni di ciò non furono perse dai costruttori di hardware. Il cliente così poteva dedicarsi a un impegno maggiore nello sviluppo del software senza necessariamente limitarsi a farlo in relazione a una specifica architettura. Quando ciò si combino con una graduale diminuzione delle differenze di prestazione dei vari computers man mano che i progetti meno efficienti furono fatti fuori un costruttore che considerava il suo hardware come sua unica risorsa poteva prevedere un futuro di margini di guadagno in diminuzione. Da sola la potenza di calcolo stava diventando un bene commerciale e il software ciò faceva la differenza. Vendere software o almeno trattarlo come parte della vendita di hardware cominciò a sembrare una buona strategia.</para>

<para>Ciò significò che i costruttori incominciarono a rafforzare i diritti d'autore sul loro codice in maniera più rigorosa. Se gli utenti continuarono a condividere i cambiamenti liberamente. Se coloro che lo usavano avessero semplicemente continuato a condividerlo e modificarlo avrebbero potuto reimplementare una alcuni dei miglioramenti ora venduti come “valore aggiunto” da coloro che lo fornivano. Peggio il codice condiviso avrebbe potuto finire nella mani dei concorrenti. L'ironia è che questo stava succedendo nel tempo che Internet stava emergendo. Proprio quando il software veramente non impedito stava finalmente diventando tecnicamente possibile, i cambiamenti nell'affare dei computers lo rendeva indesiderabile almeno dal punto di vista di ogni singola compagnia. I fornitori misero un freno sia negando l'accesso agli utenti al codice che girava sulle proprie macchine sia insistendo su un accordo di non apertura che rende il codice condivisibile.</para>

<sect3 id="history-conscious-resistance">
<title>Deliberata resistenza</title>

<para>Mentre il mondo del codice libero perdeva colore lentamente una reazione prendeva forma nella mente di almeno un programmatore. Richard Stallman aveva lavorato nell' Artificial Intelligence Lab al Massachusetts Institute of Technology negli anni 70 e nei primi anni 80 si rivelò essere un periodo d'oro e il luogo un luogo d'oro per la condivisione del codice. L'Artificial Intelligence Lab aveva una forte “etica hacker”,<footnote><para>Stallman usa la parola “hacker” per indicare “chi ama programmare ed è abile nel farlo” non nel relativamente nuovo significato di “chi entra nei computers”.</para></footnote> e la gente non solo era incoraggiata ma voleva fortemente condividere ogni miglioramento avesse apportato al sistema. Come Stallman scrisse poi:</para>

    <blockquote>
      <para><emphasis>Noi non chiamavamo il nostro software software libero perchè quel termine non esisteva ancora; ma quello era. Quando persone di un'altra università o compagnia volevano trasferire su un'altra piattaforma e usare un programma noi eravamo contenti di permetterglielo. Se voi aveste detto ad uno di usare un programma non familiare ed interessante avreste potuto sempre chiedere di vedere il codice sorgente in modo da poterlo leggere, cambiarlo o usare parti di esso per costruire un altro programma.
      </emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
    </blockquote>


<para>Questa comunità da paradiso terrestre si esaurì intorno a Stallmann bruscamente dopo il 1980 con i cambiamenti che erano avvenuti nel resto dell'industria raggiunsero anche l'Artificial Intelligence Lab. Una nuova compagnia impiegò molto programmatori del Lab per farli lavorare a un sistema operativo simile a quello su cui avevano lavorato nel Lab, ora  solamente sotto una licenza esclusiva. Contemporaneamente l' l'Artificial Intelligence Lab acquistò una nuova apparecchiatura che mise a disposizione di un nuovo sistema operativo proprietario.</para>

<para>Stallmann tracciò un chiaro saggio di quello che stava accadendo:</para>

    <blockquote>
      <para><emphasis>I moderni computers dell'epoca come il VAX o il 68020 avevano i loro sistemi operativi ma nessuno dei due era software libero: tu dovevi firmare un accordo di non rivelazione persino per prendere una copia dell'eseguibile.</emphasis> </para>

      <para><emphasis>Ciò significava che la prima cosa nell'usare un computer era quella di non aiutare il tuo vicino. Una comunità operativa era proibita. La regola stabilita dai proprietari del software era “Se tu condividi col vicino sei un pirata. Se tu vuoi un cambiamento chiedi umilmente a noi.” 
      </emphasis> </para>

    </blockquote>

<para>Per qualche bizzarria nel carattere lui decise di resistere alla tendenza. Invece di continuare a lavorare presso l'ora decimato Lab o di prendere lavoro come scrittore di codice presso una delle nuove compagnie dove i risultati di questo lavoro sarebbero stati tenuti chiusi in una scatola si licenziò dal Lab e iniziò il progetto GNU dando il via alla Free Software Foundation (FSF). Lo scopo del GNU <footnote><para>Esso sta per "GNU's Not Unix" e il “GNU” in quella espansione sta per ...la stessa cosa.</para></footnote> era quello sviluppare un sistema operativo completamente libero e parte principale di software applicativo al quale a coloro che lo usavano non sarebbe stato impedito di accedere e di condividerne le modifiche. Egli stava in sostanza rimettendo in piedi ciò che era stato distrutto dall'Artificial Intelligence Lab ma in una scala mondiale e senza quella vulnerabilità che aveva reso la cultura dell'Artificial Intelligence Lab suscettibile di disintegrazione.  </para>

<para>Oltre a lavorare al nuovo sistema operativo Stallman lasciò in eredità una licenza di copyright i cui termini garantivano che il suo codice sarebbe stato libero per sempre. La The GNU General Public License (GPL) è un pezzo geniale di judo legale: essa dice che il codice può essere copiato e modificato senza restrizioni e che le copie e i lavori derivati (cioè le versioni modificate) devono essere distribuite sotto la stessa licenza originale senza nessuna restrizione aggiuntiva. Nei fatti essa usa la legge sul copyright per raggiungere l'effetto opposto di quello del copyright tradizionale: invece di limitare la distribuzione del software faceva in modo che nessuno, compreso l'autore, potesse limitarla. Per Stallman questo era meglio che porre semplicemente il suo codice sotto pubblico dominio Se essa fosse stato di pubblico dominio una copia particolare avrebbe potuto essere incorporata in un software proprietario come si era anche appreso avvenire sotto licenze di copyright permissive. Mentre tale incorporazione non avrebbe potuto compromettere in nessun modo la continua disponibilità del codice, avrebbe potuto avere il significato che gli sforzi di Stallman avrebbero potuto beneficiare il nemico software proprietario. La GPL può essere pensata come una forma di protezionismo per il software libero perchè impedisce al software proprietario di trarre pieno vantaggio dal codice GPL. La GPL e le sue relazioni con le altre licenze libere è discussa in dettaglio in
<xref linkend="legal"/>.</para>

<para>Con l'aiuto di molti programmatori, molti dei quali condividevano le idee di Stallman e alcuni dei quali volevano semplicemente vedere una gran quantità di software libero, il progetto GNU  incominciò a rilasciare molti ricambi dei componenti più critici di un sistema operativo. A causa della ora assai diffusa standardizzazione nell'hardware e nel software dei computers fu possibile usare i ricambi GNU su sistemi per il resto non liberi. E molti lo fecero. L'editor di testi GNU (Emacs) e il compilatore C (GCC) ebbero particolare successo guadagnando seguaci numerosi e fedeli, non per le loro origini ideologiche ma semplicemente per il loro meriti tecnici. Dal 1990 circa GNU ha prodotto molti sistemi operativi, eccetto il kernel&mdash;la parte che attualmente avvia la macchina e che è responsabile della memoria operativa, dei dischi e di altre risorse di sistema.</para>

<para>Sfortunatamente il progetto GNU aveva scelto un progetto di kernel che si dimostrò essere più difficile da implementare di quanto ci si fosse aspettato. Il ritardo che ne risultò impedì alla Free Software Foundation di creare la prima release di un intero sistema operativo libero. Il pezzo finale fu invece messo a posto da uno studente finlandese della scienza dei computers che con l'aiuto di volontari per il mondo aveva completato un kernel libero usando un progetto più tradizionale. Lo chiamò Linux e quando questo fu combinato con i programmi GNU esistenti il risultato fu un sistema operativo completamente libero. Per la prima volta si sarebbe potuto avviare un computer e lavorare senza alcuno dei software proprietari. <footnote><para>ecnicamente Linux non era il primo. Un sistema operativo libero per computers IBM compatibili, chiamato 386BSD era venuto fuori poco prima di Linux. Comunque sarebbe stato molto più difficile rifinire 386BSD e farlo girare. Linux così fece tale colpo non solo perchè era libero ma perchè aveva realmente una grande possibilità di avviare il vostro computer quando lo aveste installato.</para></footnote></para>

<para>Molto software su questo sistema operativo non fu prodotto dal progetto GNU. Infatti GNU non era nemmeno l'unico gruppo che lavorava ad un sistema operativo libero (per esempio il codice che alla fine diventò NetBSD e FreeBSD era già in sviluppo in questo periodo). L'importanza della Free Software Foundation stava non solo nel codice che essi scrivevano ma nella loro retorica politica.
Col parlare del software libero come un ideale anzichè come una convenienza essi resero difficile per i programmatori <emphasis>non</emphasis> avere una consapevolezza di esso. Persino quelli che si dissociarono dalla  Free Software Foundation ebbero ad affrontare il problema, se prendere solamente una differente posizione. L'efficacia della propaganda della Free Software Foundation poggiò sull'associare il loro codice a un messaggio per mezzo della GPL e di altri testi. Il loro messaggio si diffuse alla stessa maniera in cui si diffuse il loro codice.</para>

</sect3>

<sect3 id="history-accidental-resistance">
<title>Accidental resistance</title>

<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>

<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>

</sect3>

<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
programmers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>

<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>

<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<title>"Free" Versus "Open Source"</title>

<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>

<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>

<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>

<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>

<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>

    <blockquote>
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>

      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>

      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>

      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>

      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>

      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>

      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>

      <para>(from <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://opensource.feratech.com/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
    </blockquote>

<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>

<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>

</sect2>

<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<title>The Situation Today</title>

<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>

<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>

<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>

    <blockquote>
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
    </blockquote>

<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
