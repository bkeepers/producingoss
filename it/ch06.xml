<chapter id="communications">

<title>Comunicazione</title>

<simplesect>

<para>L'abilità  di scrivere chiaramente è forse la più importante capacità 
che uno possa avere in un ambiente open source. Sulla lunga distanza, importa
più del talento nella programmazione. Un bravo programmatore con pessime capacità 
di comunicazione fare una sola cosa per volta, e comunque avere dei problemi a
convincere altri a prestargli attenzione. Ma un pessimo programmatore con buone
capacità  comunicative può coordinare e persuadere molte persone a fare molte
cose diverse, quindi avere un effetto significativo sulla direzione e sulla forza
del progetto.</para>

<para>Non sembra esserci molta correlazione, in nessuna direzione, tra l'abilità 
di scrivere buon codice e l'abilità  di comunicare con i propri simili. C'è una qualche
correlazione tra la buona programmazione e una buona descrizione dei problemi tecnici, ma
descrivere problemi tecnici è solo una piccola parte della comunicazione in un progetto.
Molto più importante è l'abilità  di identificarsi con la audience di qualuno, di vedere i propri
post e commenti come altri li vedono, e di fare in modo che altri vedano i loro post con
simile oggettività .
Altrettanto importante è notare quando un certo mezzo di comunicazione non sta più
lavorando bene, magari perchè non scala al crescere del numero di utenti, e prendere
tempo per farci qualcosa.</para>

<para>Tutto questo è in teoria ovvio&mdash;cosa lo rende difficile in pratica
è che gli ambienti di software libero sono 
practice is that free software development environments are
incoerentemente diversi sia nelle audience che nei meccanismi di comunicazione.
Un certo pensiero deve esserre espresso in un messaggio sulla mailing list, come 
annotazione nel bug tracker o come commento nel codice? Quando rispondere ad una domanda
in forum pubblico, quanta conoscenza si può assumere esistere dal lato di chi legge, dato che
"chi legge" non sempre è solo chi ha posto la domanda all'inizio, ma tutti quelli che potrebbero
vedere la risposta?
Come possono gli sviluppatori stare in contatto costruttivo con gli utenti, senza essere
sommersi dalle richieste di funzionalità , scarne segnalazioni di bug e chiacchiera generale?
Come dire quando un canale ha raggiunto i limiti della sua capacità , e cosa farci?</para>

<para>Le soluzioni a questi problemi sono solitamente parziali, perchè ogni singola soluzione
è alla fine resa obsoleta dalla crescita del progetto o dai cambiamenti nella struttura del progetto.
Sono anche spesso<foreignphrase>ad
hoc</foreignphrase>, perchè sono improvvisato risposte a situazioni dinamiche.
Tutti i partecipanti possono diventare consci di quando e come la comunicazione può crollare,
ed essere coinvolti nelle soluzioni. Aiutare la gente a fare questo è una grossa parte della gestione
di un progetto open source. Le sezioni che seguono trattano sia di come portare avanti la propria comunicazione.
e di come rendere una priorità  la cura dei meccanismi di comunicazione per tutti nel progetto.<footnote><para>
C'è stata un po' di interessante ricerca accademica su questo argomento; per esempio vedi
 <citetitle>Group Awareness in Distributed Software
Development</citetitle> di Gutwin, Penner, e Schneider. Questo articolo è stato online per un po', poi non disponibile,
quindi online di nuovo a <ulink
url="http://www.st.cs.uni-sb.de/edu/empirical-se/2006/PDFs/gutwin04.pdf"/>.
Quindi provate lì prima, ma siate pronti ad usare un motore di ricerca se si è di nuovo spostato.</para></footnote></para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="you-are-what-you-write">
<title>Sei quello che scrivi</title>

<para>Considerate questo: la sola cosa che ognuna sa di voi su Internet viene
da quello che scrivete, o cosa altri scrivono di voi. Potrete essere brillanti,
attenti e carismatici di persona&mdash;ma se le vostre email sono confusionarie
e non strutturate, la gente assumerà  che siate così. O magari siete davvero confusionari
e disordinati di persona, ma nessuno ha bisogno di saperlo, se i vostri messaggi sono lucidi
e informativi.</para>

<para>Dedicare un po' di cura alla vostra scrittura vi ripagherà  enormemente.
Lo smanettone di lunga data di free software Jim Blandy racconta la seguente storiella;
</para>

<blockquote>
  <para>Nel 1993, stavo lavorando per la Free Software Foundation,
  e stavamo facendo il beta testing della versione 19 di GNU Emacs.
  Facevamo un rilascio della beta all'incirca ogni settimana, e la gente
  la provava e ci mandava le segnalazioni di bug. C'era questo tizio ch
  nessuno di noi aveva mai incontrato di persona ma che faceva un gran lavoro:
  le sue segnalazioni di bug erano sempre chiare e ci portavano dritti al problema,
  e quando ci forniva un fix lui stesso, era quasi sempre corretta. Era incredibile.</para>

  <para>Prima che la FSF possa usare codice scritto da qualcun altro, dobbiamo fargli fare
  alcune pratiche legali per assegnare i diritti di copyright per quel codice alla FSF. Solo
  prendere codice da perfetti sconosciuti e buttarlo lì è la ricetta per un disastro legale.</para>

  <para>Ho mandato una email al tizio con le pratiche, dicendo, "Qui ci sono
  alcune pratiche di cui abbiamo bisogno, qui c'è cosa significa, firmi questa, fai firmare
  al tuo datore di lavoro quest'altra, e poi possiamo iniziare a integrare i tuoi fix. Grazie mille."</para>

  <para>Mi risponde dicendo "Non ho un datore di lavoro."</para>

  <para>Allora gli dico, "OK, va bene, fallo firmare dalla tua università  e mandacelo indietro."</para>

  <para>Dopo un po' mi risponde di nuovo e dice, "Bè, veramente... ho tredici anni e vivo con i miei genitori."</para>
</blockquote>

<para>Dato che il ragazzino non scriveva come un tredicenne, nessuno sapeva che lo fosse. In seguito ci sono alcuni
modi per far fare una buona impressione anche alla vostra scrittura.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="structure-and-formatting">
<title>Struttura e Formattazione</title>

<para>Non cadete nella trappola di scrivere tutto come se fosse un messaggio
di testo per il telefono cellulare. Scrivete frasi complete, mettendo la maiuscola
alla prima parola di ogni frase, e usate interruzione di paragrafo dove necessario.
Ciò è fondamentale nelle email e in altri scritti strutturati.
In IRC o forum similarmente effimeri, va generalmente bene lasciare perdere le maiuscole
usare abbreviazioni di espressioni comuni eccetera. Soltanto non portate queste
abitudini in forum più formali, persistenti. Email, documentazione, segnalazioni di bug,
e altre forme di scrittura pensate per persistere dovrebbero essere scritte usando la 
grammatica e la sintassi standard, e avere una struttura narrativa coerente
Questo non è perchè c'è qualcosa di interiormente buono nel seguire regole arbitrarie, ma
piuttosto queste regole <emphasis>non</emphasis> sono arbitrarie: sono evolute nella forme
attuali perchè rendono il testo più leggibile, e dovreste seguirle per questa ragione.
La leggibilità  è desiderabile non solo perchè significa che più persone capiranno cosa scrivete, ma
perchè vi fa apparire come il tipo di persona che usa del tempo per comunicare chiaramente:
cioà  qualcuno a cui valga la pena dare attenzione.</para>

<para>Soprattutto per le email, gli sviluppatori esperti di open source hanno stabilito alcune
convenzioni:</para>

<para>Mandare solo email di puro testo, no HTML, RichText, o altri formati che potrebbero essere opachi
ad alcuni lettori di email di solo testo. Impostate le vostre righe per essere lunghe circa 72 colonne.
Non andate oltre le 80 colonne, che sono diventate lo standard <foreignphrase>de facto</foreignphrase> 
della lunghezza di terminale (cioè alcuni usano terminali più larghi, ma nessuno ne usa di più stretti).
Facendo le vostre righe un po' <emphasis>meno</emphasis> di 80 colonne, lasciate spazio per alcuni livelli
di caratteri di citazione aggiunti nelle risposte di altri senza costringere alla riformattazione
del vostro testo.</para>

<para><emphasis>Usate vere interruzioni di linea.</emphasis> Alcuni programmi di mail
fanno una specie di falsa delimitazione di riga, quindi quando state scrivendo una mail,
il display mostra delle interruzioni di linea che in realtà  non ci sono. Quando la email
viene spedita, potrebbe non avere le interruzioni di linea voi pensiate che abbia, e si disporrà 
in maniera orrenda sugli schermi di un po' di gente. Se il vostro programma può usare false
interruzioni di linea, cercate una qualche impostazione che possiate attivare per fare in modo 
di mostrare le vere interruzioni di linea quando scrivete.</para>

<para>Quando si includono output video, stralci di codice, o altro
testo preformattato, delimitatelo chiaramente, così che anche un occhio
pigro possa facilmente vedere i confini tra le vostre parole e il materiale
che state evidenziando. (Non mi sarei mai aspettato di scrivere un consiglio come 
questo quando iniziai questo libro, ma più avanti su un gran numero di mailing list
open source, ho visto gente mischiare testo da diverse fonti senza rendere chiaro
cosa fosse cosa. L'effetto è molto frustrante. Rende i loro post decisamente più difficili
da capire, e sinceramente fa vedere queste persone come un po' disordinate.)</para>

<para>Quando citate una email di qualcun altro, inserite le vostre risposte
dove è più appropriato, in molti posti diversi se necessario, e tagliate via
le parti della mail che non usate. Se state scrivendo un breve commento che 
riguarda all'intero messaggio, va bene <firstterm>anticipare</firstterm> il commento
(cioè mettere la vostra risposta al di sopra del testo citato della email); altrimenti,
dovreste prima citare la porzione rilevante del testo originale, seguita dalla
vostra risposta.
</para>

<para>Scegliete attentamente l'oggetto delle vostre email. E' la riga
più importante della vostra email, perchè permette ad ogni altra persona nel
progetto di decidere se leggerla o meno. I moderni software di lettura email
organizzano gruppi di messaggi correlati in thread, che possono essere definiti
non solo da un oggetto comune, ma da vari altri header (che a volte non sono
mostrati) Ne consegue che se un thread inizia ad andare verso un nuovo argomento,
potete&mdash;e dovreste&mdash;aggiustare di conseguenza l'oggetto quando rispondete.
L'integrità  del thread sarà  preservata, grazie a quegli altri header, ma il nuovo oggetto
aiuterà  la gente che cerca un'idea del thread a sapere che il soggetto è cambiato.
Similarmente, se davvero volete iniziare un nuovo argomento, fatelo mandando una
nuova email, e non rispondendo a email esistenti e cambiandone l'oggetto. Altrimenti, la
vostra email sarebbe ancora raggruppata con quelle dello stesso thread a cui state rispondendo,
e quindi confonderebbe la gente nel pensare che sia su qualcosa che non è. Di nuovo, la pena
non sarebbe solo lo spreco del loro tempo, ma la piccola falla nella vostra credibilità  come
qualcuno spigliato nell'uso dei mezzi di comunicazione.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-content">
<title>Contenuto</title>

<para>Email ben formattate attraggono i lettori, ma il contenuto li mantiene.
Nessun insieme di regole fisse può garantire un buon contenuto, certo, ma ci sono
alcuni principi che lo rendono possibile.</para>

<para>Rendete le cose facili ai vostri lettori. Ci sono tonnellate di informazioni
in giro in ogni progetto open source attivo, e non ci si può aspettare che i lettori
siano familiari con la maggior parte dell'informazione&mdash;infatti, non ci si può
aspettare che sappiano come diventarne familiari. Ovunque possibile, i vostri messaggi
dovrebbero fornire informazione nella forma più appropriata per i lettori.
Se dovete usare due minuti in più per cercare una URL di un particolare thread negli
archivi della mailing list per risparmiare ai lettori di farlo, ne vale la pena.
Se dovete spendere 5 o 10 minuti riassumendo le conclusioni fino a questo punto
di un thread complesso, così da dare alla gente un contesto in cui capire il messaggio,allora
fate così. Pensatela in questo modo: più un progetto ha successo, più alto sarà  il rapporto
lettori per scrittore in ogni dato forum. Se ogni messaggio che pubblicate è visto da <emphasis>n</emphasis>
persone, allora quando <emphasis>n</emphasis> cresce, la convenienza di fare uno sforzo extra per risparmiare
tempo a questa gente sale con lui. E quando la gente vi vede imporre a voi stessi questo standard, lavorerà  per
fare altrettanto nelle loro comunicazioni. Il risultato è, idealmente, un aumento dell'efficienza globale del
progetto: quando c'è una scelta tra che <emphasis>n</emphasis> persone facciano uno sforzo e una persona farlo,
il progetto preferisce la seconda ipotesi.</para>

<para>Non perdetevi in iperboli. Esagerare nei messaggi in linea è una
tipica corsa alle armi. Per esempio, una persona che segnala un bug potrebbe
preoccuparsi che gli sviluppatori non gli presteranno sufficente attenzione, quindi lo
descriverà  come un problema serio e bloccante che sta impedendo a lui (e a tutti i suoi
amici/colleghi/cugini) di usare il software in maniera produttiva, quando è soltanto
una piccola noia. Ma l'esagerazione non è limitata agli utenti&mdash;i programmatori a volte
fanno lo stesso durante dibattiti tecnici, in particolare quando il disaccordo è su di una
questione di gusto piuttosto che di correttezza:</para>

  <blockquote>
     <para>"Fare in questo modo renderebbe il codice totalmente
     illegibile. Sarebbe un incubo mantenerlo, rispetto alla proposta di
     J. Random..."</para>
  </blockquote>

<para>Lo stesso sentimento in realtà  diventa
<emphasis>più forte</emphasis> quando espresso in maniera meno netta:</para>

  <blockquote>
     <para>"Funziona, ma non è ideale in termini di leggibilità  e mantenibilità , io penso.
     La proposta di J.Random evita questi problemi perchè..."</para>
  </blockquote>

<para>Non sarete in grado di liberarvi completamente dalle iperboli, e in generale
non è necessario. Rispetto ad altre forme di cattiva comunicazione, l'iperbole non 
è globalmente dannosa&mdash;danneggia principalmente chi la fa. I destinatari possono
compensarla, soltanto il mittente perde un po' più credibilità  ogni volta. Quindi, per 
l'amore della vostra stessa influenza nel progetto, provate a stare nel lato della moderazione.
In questo modo, quando voi <emphasis>avete bisogno</emphasis> di fare un'affermazione forte,
la gente vi prenderà  seriamente.</para>

<para>Controllate due volte. Per ogni messaggio più lungo di un paragrafo di media grandezza,
rileggetelo dall'inizio alla fine prima di mandarlo ma dopo che pensate di averlo finito una prima
volta. Questo è un consiglio noto a chiunque abbia seguito lezioni di composizione, ma è soprattutto
importante nelle discussioni online. Dato che il processo di comporre online tende ad essere
altamente discontinuo (durante la scrittura di un messaggio, potreste aver bisogno di andare indietro
e controllare altre email, visitare alcune pagine web, usare un comando per catturare il suo output di
debug eccetera) è incredibilmente facile perdere il vostro senso di posizione nella narrazione. I 
messaggi che sono stati composti in maniera discontinua e non controllati prima di essere inviati sono
spesso riconoscibili come tali, soprattutto dallo smarrimento ( o così si dovrebbe sperare) dei loro autori.
Prendetevi del tempo per rivedere cosa mandate. Più i vostri messaggi stanno assieme strutturalmente, più saranno
letti.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="writing-tone">
<title>Tono</title>

<para>Dopo aver scritto migliaia di messaggi, probabilmente
noterete il vostro stile diventare conciso. Questa sembra essere la norma nella
maggior parte dei forum tecnici, e non c'è nulla di sbagliato di per sè. Un grado
di concisione che sarebbe inaccettabile nelle normali interazioni sociali è semplicemente
la normalità  per chi ha a che fare con il free software. Qui c'è una risposta che una
volta presi da una mailing list su qualche CMS (content management system) ben in
evidenza:</para>

<screen>
Puoi spiegare un po' di più esattamente qual'è il tuo problema,eccetera?

Anche:

Che versione di Slash stai usando? Non l'ho capito dal tuo precedente messaggio.

Esattamente, come hai fatto il build del codice apache/mod_perl?

Hai provato la patch di Apache 2.0 di cui si è parlato su slashcode.com?

  Shane
</screen>

<para>Ora, <emphasis>questo</emphasis> è conciso! Nessun saluto, nessuna firma
a parte il nome, e il messaggio stesso è solo un serie di domande poste nel modo più
compatto possibile. La sua unica frase dichiarativa era una implicita critica al mio
messaggio originale. Eppure, fui felice di vedere la email di Shane, e non presi la sua
concisione come segno di nient'altro se non essere una persona occupata. Il mero fatto che 
stava chiedendo domande, invece di ignorare il mio messaggio, significava che voleva spendere
del tempo sul mio problema.</para>

<para>Tutti i lettori reagiranno positivamente al suo stile? Non necessariamente; dipende dalla
persona e dal contesto. Per esempio, se qualcuno ha appena scritto riconoscendo di aver fatto
un errore (magari aveva segnalato un bug), e sapete dalla vostra esperienza passata che questa persona tende ad essere 
un po' insicura, allora mentre potreste scrivere una risposta compatta, dovreste fare in
modo di completarlo con un qualche tipo di presa di coscienza dei suoi sentimenti. Il grosso
della vostra risposta può essere una precisa, ingegneristica analisi della situazione, concisa
quanto volete. Ma alla fine, scrivete qualcosa che indichi che la vostra concisione non
deve essere presa per freddezza. Per esempio, se avete appena dato una gran quantità  di 
consigli esattamente su come la persona deve riparare il bug, poi concludete con 
"Buona fortuna, &lt;il vostro nome&gt;" per indicare che gli augurate del bene e che non 
è pazzo. Uno smiley strategicamente piazzato o altro genere di emoticon può a volte essere
anche abbastanza per rassicurare un interlocutore.</para>

<para>Può sembrare strano focalizzarsi tanto sui sentimenti dei partecipanti quanto sulla
superficie di cosa dicono, ma per dirla semplicemente, i sentimenti condizionano la produttività .
I sentimenti sono importanti anche per altre ragioni, ma anche limitandoci a livelli puramente
utilitaristici, possiamo notare che persone infelici scrivono software peggiore, e meno. Data la
natura ristretta della maggior parte dei media elettronici, comunque, non ci sarà  spesso alcuna
indicazione di come una persona si sente. Dovrete farvi una educata idea basata su a) come la maggior
parte della gente si sentirebbe in quella situazione, e b) cosa sapete di questa particolare persona
da passate interazioni. Alcune persone preferiscono un atteggiamento diretto, e trattare semplicemente
con chiunque come fossero faccia a faccia, con l'idea che se un partecipante non tira fuori che si sente
in un particolare modo, allora uno non ha modo di trattare con lui come dovrebbe. Non seguo
questo approccio, per alcune ragioni. Uno, la gente non si comporta così nella vita reale, quindi
perchè dovrebbero online? Due, dato che la maggior parte delle interazioni avviene in
forum pubblici, la gente tende ad essere ancora più riservata nell'esprimere emozioni
che se fosse in privato. Per essere più precisi, spesso vogliono esprimere emozioni dirette
agli altri, come gratitudine o rabbia, ma non emozioni dirette verso se stessi, come insicurezza
o orgoglio. Comunque, la maggior parte degli umani lavora meglio quando sanno che gli altri
sono al corrente del loro stato di pensiero. Prestando attenzione a piccoli indizi, potete solitamente
indovinare giusto la maggior parte delle volte, e motivare la gente a rimanere coinvolta ad un livello
maggiore di quello che altrimenti farebbero.</para>

<para>Certo non voglio dire che il vostro ruolo sia di essere un terapista di gruppo,
aiutanto costantemente tutti a rimanere in contatto con i loro sentimenti. Ma facendo
molta attenzione ai percorsi sul lungo periodo del comportamento umano, inizierete ad
avere un'idea di loro come individui anche se non li avete mai incontrati faccia a faccia.
Ed essendo sensibile al tono del vostro scrivere, potete avere una sorprendente influenza
su come gli altri si sentono, per il bene finale del progetto.</para>

</sect2>


<!-- ======================== subsection ============================== -->
<sect2 id="rudeness">
<title>Riconoscere la maleducazione</title>

<para>Una delle caratteristiche distintive della cultura open source è la sua
	nozione di cosa costituisce maleducazione e cosa no.
	Mentre le convenzioni descritte in seguito non sono peculiari dello sviluppo
	di software libero, nè del software in generale&mdash; dovrebbero essere familiari
	a chiunque lavori in matematica, scienze dure, o discipline ingegneristiche&mdash;il software
	libero, con i suoi confini porosi e il costante afflusso di nuove leve, è un ambienete dove la gente
	non abituata a queste convenzioni si contri con loro.</para>

<para>Cominciamo con le cose che <emphasis>non</emphasis> sono maleducate:</para>

<para>Il criticismo tecnico, anche quando diretto e non filtrato, non è maleducato.
	Invece, può essere una forma di adulazione: la critica sta dicendo, per implicazione,
	che vale la pensa prendere seriamente in considerazione il suo bersaglio, e vale la 
	pena spenderci un po' di tempo. Vale a dire, più sarebbe stato facile ignorare il post
	di qualcuno, più diventa un complimento prendere del tempo per criticarlo (ovviamente a meno che la
	critica diventi un attacco <foreignphrase>ad hominem</foreignphrase> o qualche altra farma di palese 
	maleducazione).</para>

<para>Anche domande grezze e spoglie, come quelle di Shane a me nella mail prima citata,
	non sono maleducate. Domanede che in altri contesti sembrano fredde, retoriche o persino
	ironiche, sono spesso intese come serie, e non hanno nessun obbiettivo nascosto tranne
	ottenere informazioni il più velocemente possibile.
	La famosa domanda del supporto tecnico "Il tuo computer è attaccato alla corrente?" è un classico esempio di questo.
	La persona di supporto davvero ha bisogno di sapere se il tuo computer è attaccato alla corrente, e dopo i primi
	giorni di lavoro, si è stancato di premettere alla domanda qualche educato preambolo ("Chiedo scusa, vorrei 
	soltanto farle alcune semplici domande per escludere alcune possibilità. Alcune di queste sono molto
	elementari,ma mi aiuti...").
	A questo punto, non gli interessano più i preamboli, chiede direttamente: è attaccato o no?
	Domande simili sono fatte di continuo nelle mailing list di software libero. L'intento non è 
	insultare il destinatario, ma per escludere velocemente le spiegazioni più ovvie ( e magari le più
	comuni). I destinatari che capiscono questo e rispondono di conseguenza, guadagnano punti nell'ottenere
	una visione ampia senza chiedere pressantemente. Ma i destinatari che reagiscono male non devono 
	essere neanche esclusi. E' solo uno scontro di culture, non è colpa di nessuno. Spiegate amabilmente che
	le vostre domande (o critiche) non avevano significati nascosti; erano solo tesi ad ottenere (o trasmettere)
	informazioni nel modo più efficiente possibile, nient'altro.</para>

<para>Cos'è allora maleducato?</para>

<para>Per lo stesso principio per cui un dettagliato criticismo tecnico
	è una forma di adulazione, non fornire critica di qualità può essere
	un insulto.
	Non intendo semplicemente ignorare il lavoro di qualcuno, sia esso una proposta,
	un cambiamento al codice, la segnalazione di un nuovo problema o altro.
	A meno che non abbiate esplicitamente promesso in anticipo una risposta dettagliata,
	va solitamente bene semplicemente non rispondere per niente. La gente assumerà che 
	non avevate tempo di dire nulla. Ma se <emphasis>rispondete</emphasis>, non
	risparmiate; prendete il tempo per analizzare davvero le cose, fornire esempi
	concreti dove appropriato, spulciare negli archivi per cercare post correlati
	nel passato eccetera. O se non avete tempo di imbarcarvi in questo tipo di sforzo,
	ma tuttavia avete bisogno di scrivere qualche tipo di risposta veloce, allora
	scrivetelo apertamente nel messaggio ("Penso che ci sia un problema registrato per 
	questo, ma sfortunatamente non ho avuto il tempo di cercarlo, mi dispiace").  
	La cosa principale è riconoscere l'esistenza della norma culturale, o assecondandola
	o riconoscendo apertamente di non aver avuto tempo. In entrambi i modi, la norma
	è rispettata. Ma non rispettarla, allo stesso tempo non spiegando  <emphasis>perchè</emphasis>
	non l'avete fatto, è come dire che la discussione (e coloro che vi partecipano) non valeva il vostro tempo.
	E' meglio mostrare che il vostro tempo è prezioso essendo chiari che essendo pigri.</para>

<para>Ci sono certamente molte altre forme di maleducazione, ma la maggior parte di queste non
	sono peculiari del software libero, e il senso comune è una sufficiente guida per evitarle.
	Vedete anche
<xref linkend="prevent-rudeness"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>, se non l'avete ancora fatto.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="face">
<title>Facce</title>

<para>C'è una regione nel cervello umano che è dedicata in maniera specifica al 
	riconoscimento delle facce. E' informalmente nota come 'area fusiforme della faccia',
	e le sue capacità sono nella maggior parte innate, non imparate. Ne consegue che riconoscere
	gli individui è talmente una capacità cruciale per la sopravvivenza che abbiamo
	sviluppato hardware specializzato per farlo.</para>

<para>La collaborazione basata su Internet è quindi psicologicamente strana,
	perchè implica una stretta collaborazione tra esseri umani che non riescono
	praticamente mai ad identificarsi l'un l'altro con i metodi più naturali ed intuitivi:
	il riconoscimento facciale innanzitutto, ma anche il suono della voce, la postura eccetera.
	Per compensare a questo, provate ad usare un <firstterm>nome immagine</firstterm> consistente ovunque.
	Potrebbe essere la parte iniziale del vostro indirizzo email (la parte prima del simbolo @), il vostro
	username IRC, il nome che usate nei commit, lo username del tracciamento dei problemi, eccetera.
	Questo nome è la vostra "faccia" online : una breve stringa identificativa che provvede ad alcuni degli stessi
	usi della vostra vera faccia, anche se sfortunatamente non stimola lo stesso hardware integrato
	nel cervello.</para>

<para>Il nome immagine dovrebbe essere qualche permutazione intuitiva del vostro
	nome reale (il mio, per esempio, è "kfogel"). In alcune situazioni sarà comunque accompagnato
	dal vostro nome completo, per esempio nelle testate delle email:</para>

<screen>
From: "Karl Fogel" &lt;kfogel@whateverdomain.com&gt;
</screen>

<para>In realtà, ci sono due cose in questo esemio. Come menzionato prima, il nome immagine
	rimanda al nome reale in modo intuitivo. Inoltre, il nome reale è <emphasis>reale</emphasis>.
	cioè non è qualche appellativo costruito come:</para>

<screen>
From: "Fantastico Hacker" &lt;fantasticohacker@undominio.com&gt;
</screen>

<para>C'è un famosto fumetto di Paul Steiner, del 5 luglio 1993 uscito sul
	 <citetitle>The New Yorker</citetitle>, che mostra un cane loggato ad un computer,
	guardare in basso e dire ad un altro in modo cospirativo: "In Internet, nessuno
	sa che sei un cane". Questo tipo di pensiero risiede probabilmente dietro a molte delle 
	identità da fighi, auto-esaltanti che la gente si dà in rete&mdash;come se chiamarsi
	"Fantastico Hacker" farà davvero credere alla gente di <emphasis>esserlo</emphasis>.
	Ma il fatto rimane: anche se nessuno sa che sei un cane, sei ancora un cane. Una fantastica
	identità online non impressiona mai i lettori. Invece, li fa pensare che sei più
	forma che sostanza, o semplicemente che sei insicuro. Usate il vostro vero nome per
	tutte le interazioni, o se per qualche ragione avete bisogno di anonimato, allora costruite
	un nome che sembri come un nome perfettamente reale, ed usatelo consistentemente.</para>

<para>Oltre a tenere il vostro nome immagine consistente, ci sono alcune cose che potete fare
	per renderlo più attraente. Se avete un titolo ufficiale (per esempio "dottore", "professore", 
	"direttore"), non ostentatelo, nè menzionatelo tranne quando è direttamente rilevante nella
	conversazione. Il mondo hacker in generale, e la cultura del software libero in particolare,
	tende a vedere l'esposizione del titolo come esclusiva e segno di insicurezza.
	Va bene se il vostro titolo appare come parte del blocco di firma standard alla fine di ogni email,
	solo non usatelo mai come mezzo per rinforzare la vostra posizione in una discussione&mdash;il tentativo
	garantisce fuoco di risposta. Volete la gente che rispetta voi, non il titolo.</para>

<para>Parlando dei blocchi di firma: manteneteli brevi e gradevoli, o meglio ancora, inesistenti.
	Evitate ingombranti disclaimer legali alla fine di ogni email, specialmente quando esprimono
	sentimenti incompatibili con la partecipazione ad un progetto di software libero. Per esempio,
	il seguente classico appare alla fine di ogni messaggio che un particolare utente manda su una
	pubblica mailing list di cui faccio parte:</para>

<screen>
OSSERVAZIONE IMPORTANTE

Se avete ricevuto questa email per errore o volete leggere il nostro disclaimer
per le email e la politica di monitoraggio, per favore fate riferimento sotto o contattate
il mittente.

Questa comunicazione proviene da Deloitte &amp; Touche LLP.  Deloitte &amp;
Touche LLP è una società a responsabilità limitata registrata in Inghilterra e Galles con
il numero registrato OC303675. Una lista dei nomi dei membri è disponibile
per ispezioni a Stonecutter Court, 1 Stonecutter
Street, London EC4A 4TR, United Kingdom, la sede principale dell'attività ed ufficio registrato. 
Deloitte &amp; Touche LLP è autorizzato e regolato dalla Financial Services Authority.

Questa comunicazione e tutti gli allegati contengono
informazioni che sono confidenziali e possono essere legalmente protette.
Sono per l'uso esclusivo dei destinatari. Se non siete il destinatario, per favore
notate che ogni forma di comunicazione, pubblicazione, copia o uso di questa comunicazione
o delle informazioni contenute o degli allegati è strettamente proibita e può essere illegale.
Se avete ricevuto questa comunicazione per errore, per favore rimandatela con "ricevuta per errore"
come oggetto a to IT.SECURITY.UK@deloitte.co.uk e poi cancellate la email e distruggetene ogni copia.

Non si può garantire che le comunicazioni email siano sicure e senza errori,
dato che le informazioni possono essere intercettate, corrotte, stralciate, perse,
distrutte, in ritardo o incomplete, o contenenti virus. Non ci assumiamo
la responsabilità di nessuno di questi fatti o delle loro conseguenze. Chiunque comunichi
con noi via email accetta il rischio di farlo.

Quando inviate ai nostri clienti, tutti le opinioni o i consigli contenuti in questa
email ed ogni allegato sono soggetti ai termini e alle condizioni espresse nella lettera
di ingaggio del cliente in uso a Deloitte &amp; Touche LLP.

Opinioni, conclusioni e altre informazioni in questa email e tutti gli allegati che non
riguardano gli affari ufficiali della ditta non sono da lei forniti nè supportati.
</screen>

<para>Per qualcuno che si mostra appena per chiedere qualcosa ogni tanto, questo
enorme disclaimer sembra un po' strano ma probabilmente non fa male. Comunque,
se questa persona volesse partecipare attivamente al progetto, questa sbrodolata
legale inizierebbe ad avere effetti più insidiosi. Manderebbe almeno due segnali
potenzialmente distruttivi: primo, che questa persona non ha pieno controllo dei
suoi strumenti&mdash;è intrappolato in qualche programma di posta aziendale che appioppa
un noioso messaggio alla fine di ogni email, e non ha avuto modo di evitarlo&mdash;
e, secondo, che ha poco o nessun supporto organizzativo per le sue attività di software libero.
Si che l'organizzazione chiaramente non gli ha impedito di lasciare messaggi sulle mailing list,
ma ha fatto sembrare i suoi messaggi nettamente ostili, come se il rischio di far uscire informazioni
confidenziali debba smorzare tutte le altre priorità.</para>

<para>Se lavorate in un'azienda che insiste nell'aggiungere tali blocchi di firma
a tutte le email in uscita, allora cercate di avere un account email gratis come, per esempio, <ulink url="gmail.google.com"/>,
<ulink url="www.hotmail.com"/>, o <ulink url="www.yahoo.com"/>, e usare questo come indirizzo per il progetto.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->

<sect1 id="common-pitfalls">
<title>Evitare le Trappole Comuni</title>

<!-- ======================== subsection ============================== -->

<sect2 id="post-with-purpose">
<title>Non mandare messaggi senza motivo</title>

<para>Una trappola comune nella partecipazione a progetti in rete è pensare
che dobbiate rispondere a tutto. Non dovete. Prima di tutto, solitamente
ci saranno più thread che vanno avanti di quelli a cui potete star dietro,
almeno dopo che il progetto ha passato i primi suoi mesi. Secondo, anche nei
thread a cui avete deciso di partecipare, la maggior parte delle cose che la
gente dice non avrà bisogno di risposta. I forum di sviluppo in particolare tendono
ad essere dominati da tre tipi di messaggi:</para>

<orderedlist>
  <listitem><para>Messaggi che propongono qualcosa di non banale</para></listitem>
  <listitem><para>Messaggi che esprimono supporto od opposizione a qualcosa che qualcun
  altro ha detto</para></listitem>
  <listitem><para>Messaggi di ricapitolazione</para></listitem>
</orderedlist>

<para>Nessuno di questi richiede <emphasis>inerentemente</emphasis> di risposta,
in particolare se potete essere sicuri, basandovi sull'esperienza accumulata nei thread,
che qualcun altro probabilmente dirà comunque cosa avreste detto.
(Se siete preoccupati di essere presi in un ciclo di attesa-attesa perchè anche tutti gli altri
stanno usando la stessa tattica, non siatelo; c'è praticamente sempre  <emphasis>qualcuno</emphasis>
là fuori che si sentirà di saltare nel mucchio.)
Una risposta dovrebbe essere motivata da un proposito definito. Innanzitutto chiedetevi:
sapete cosa volete raggiungere? E poi: non sarà raggiunto a meno che voi diciate qualcosa?</para>

<para>Due buone ragioni per aggiungere la vostra voce ad un thread sono a) quando vedete un difetto
in una proposta e sospettate di essere l'unico a vederlo, e b) quando vedete che sta succedendo qualche equivoco
tra altri, e sapete che potete appianarlo con un messaggio chiarificatore. Va solitamente bene
fare un messaggio per ringraziare qualcuno per aver fatto qualcosa, o per dire "Anche io!", affinchè un lettore
possa capire facilmente che tale messaggio non ha bisogno di nessuna risposta o ulteriore azione, e quindi
lo sforzo mentale richiesto dal messaggio finisce nettamente quando il lettore arriva
all'ultima riga delle email. Ma anche allora, pensateci due volte prima di dire qualcosa;
è sempre meglio lasciare la gente desiderare che voi postiate di più invece che di meno. (Vedete la seconda
metà di <xref linkend="bikeshed-full"/> per ulteriori pensieri su come comportarsi su mailing list trafficate.)</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="productive-threads">
<title>Thread Produttivi vs Thread Improduttivi</title>

<para>Su una mailing list trafficata, avete due imperativi.
Uno, ovviamente, è capire di cosa avete bisogno di seguire e cosa potete ignorare.
L'altro è di comportarvi in modo da evitare di <emphasis>causare</emphasis>
rumore: non solo volete che i vostri messaggi abbiano un alto tasso segnale/rumore,
volete anche che siano quel tipo di messaggio che stimola <emphasis>altra</emphasis> gente
a scrivere con un simile tasso segnale/rumore o non scrivere per niente.</para>

<para>Per vedere come fare ciò, considerate il contesto in cui avviene.
Quali sono alcuni dei segnali di un thread improduttivo?</para>

<itemizedlist>
  <listitem><para>Argomenti che hanno già iniziato ad essere ripetuti, dato che
  chi ha scritto pensa che nessuno li abbia sentiti la prima volta.</para>
  </listitem>
  <listitem><para>Aumento dei livelli di iperbole e coinvolgimento dato che
  i limiti si fanno sempre più stretti.</para>
  </listitem>
  <listitem><para>Una preponderanza di commenti di persone che fanno poco
  o niente, mentre le persone che tendono a fare le cose sono in silenzio.</para>
  </listitem>
  <listitem><para>Molte idee discusse senza che una chiara proposta sia stata fatta.
  (Certo, ogni idea interessante nasce da una visione imprecisa; la domanda importante è in
  quale direzione si va da lì. Il thread sembra voler cambiare la visione in
  qualcosa di più concreto, o stanno nascendo sotto-visioni, visioni laterali e dispute ontologiche?)</para>
  </listitem>
</itemizedlist>

<para>Solo perchè un thread non è produttivo non basta per stabilire che sia una
	perdita di tempo. Potrebbe trattare un argomento importante, nel qual caso il fatto
	che non si stia risolvendo rende tutto più problematico.</para>

<para>Guidare un thread verso l'utilità senza essere pressanti è un'arte.
	Non funzionerà semplicemente consigliando alla gente di smettere di perdere
	il loro tempo, o chiedendo loro di non scrivere a meno di avere qualcosa di costruttivo
	da dire. Potreste, certo, pensare queste cose privatamente, ma se lo dite ad alta voce
	allora sarete offensivi. Invece, dovete suggerire le condizioni per ulteriori progressi&mdash;dare
	alla gente una strada, un sentiero da seguire che porta ai risultati che volete, pur senza
	sembrare di stare dettando la strada. La distinzione è principalmente di tono. Per esempio, questo
	non va bene:</para>

  <blockquote>
     <para><emphasis>Questa discussione non sta andando da nessuna parte. Possiamo per favore
	abbandonare questo argomento finchè qualcuno ha una patch per implementare una di queste
	proposte? Non c'è ragione per continuare a girarci attorno dicendo le stesse cose. Il 
	codice parla più forte delle parole, gente.</emphasis></para>
  </blockquote>

<para>Mentre questo è buono:</para>

  <blockquote>
     <para><emphasis>Molte proposte sono passate in questo thread, ma 
	nessuna ha avuto tutti i dettagli definiti, almeno non abbastanza
	per un voto si/no. Comunque non stiamo dicendo nulla di nuovo ora;
	stiamo solo ripetendo cosa è stato detto prima. Quindi la cosa migliore
	sarebbe probabilmente che i prossimi messaggi contengano o una completa
	specifica delle funzionalità proposte, o una patch. Quindi almeno avremmo una
	azione definita da compiere (cioè avere consenso sulla specifica, o applicare
	e testare la patch).</emphasis></para>
  </blockquote>

<para>Confrontate il secondo approccio con il primo. Il secondo modo
	non traccia una linea tra voi e gli altri, nè li accusa di procedere in
	una discussione a spirale. Parlo di "noi", che è importante sia che abbiate
	o meno partecipato veramente nel thread in precedenza, perchè ricorda a tutti
	che anche quelli che sono stati in silenzio fino ad ora possono ancora contribuire
	al risultato del thread. Descrive perchè il thread non sta andando da nessuna parte,
	ma lo fa senza peggiorazioni o giudizi&mdash;spassionatamente preciso solo alcuni fatti.
	Più importante, offre un corso positivo di azioni, così che invece di sentirsi come se
	la discussione sia stata troncata (una restrizione verso cui potrebbero solo tentare
	di ribellarsi), la gente si sentirà come se fosse stata loro offerto un modo di portare
	la conversazione ad un livello più costruttivo. Questo è uno standard che la gente vorrà
	naturalmente raggiungere.</para>

<para>Non vorrete sempre portare un thread al prossimo livello di costruttività&mdash;a volte
	vorrete solo farlo finire. Il proposito del vostro messaggio allora è fare uno o l'altro.
	Se potete dire dal modo in cui il thread è andato fino ad allora che nessuno da veramente
	<emphasis>facendo</emphasis> i passi che suggerite, allora il vostro messaggio effettivamente
	chiude il thread senza sembrare di farlo. Di certo non c'è nessun modo a prova di idiota per 
	chiudere un thread, e anche se ci fosse, non vorreste usarlo. Ma chiedere ai partecipanti o
	di mostrare progressi visibili o di smettere di scrivere è perfettamente difendibile, se fatto
	diplomaticamente. Siate comunque attenti nel fermare prematuramente i thread. Un po' di chiacchiere
	possono essere produttive, a seconda dell'argomento, e chiedere che sia risolto troppo velocemente
	soffocherà il processo creativo, così come vi farà sembrare impazienti.</para>

<para>Non aspettatevi che un thread si stoppi all'istante. Ci saranno comunque ancora
	alcuni messaggi dopo al vostro, sia perchè le mail si saranno incrociate nell'instradamento,
	o perchè la gente vuole avere l'ultima parola. Questo non è nulla di cui preoccuparsi, e non
	avete bisogno di scrivere di nuovo. Lasciate la gente calmarsi, o non calmarsi, a seconda dei casi.
	Non potete avere completo controllo; dall'altro lato, potete aspettarvi di avere
	statisticamente un effetto significativo su molti thread.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="bikeshed">
<title>Più semplice l'argomento, più lungo il dibattito</title>

<para>Anche se la discussione può deviare su ogni argomento, la probabilità
di deviazione sale quando la difficoltà tecnica di un argomento diminuisce.
Dopo tutto, maggiore è la difficoltà tecnica, meno partecipanti potranno veramente
seguire cosa sta succedendo. Quelli che possono essere gli sviluppatori più esperti,
 che hanno già preso parte in queste discussioni migliaia di volte in precedenza, e sanno che tipo
 di comportamento può portarli ad ottenere quel consenso con cui ognuno può andare avanti.</para>

<para>Quindi, il consenso è più difficile da ottenere nelle questioni tecniche che sono semplici da capire
ed è facile farsi un'opinione, ed in argomenti "leggeri" come l'organizzazione, la pubblicità, i fondi, eccetera.
La gente può partecipare a queste discussioni sempre, poichè non sono necessarie qualifiche per farlo, nessun modo
chiaro per decidere (anche dopo) se una decisione sia stata giusta o sbagliata, e perchè aspettare più
a lungo degli altri partecipanti alla discussione è a volte una tattica vincente.</para>

<para>Il principio che la quantità di discussione è inversamente proporzionale
alla complessità dell'argomento ha circolato per molto tempo, ed è noto informalmente
come l'<firstterm>Effetto Bikeshed</firstterm>.  Segue la spiegazione di Poul-Henning Kamp,
da un messaggio ora famoso fatto agli sviluppatori BSD:</para>

<blockquote>

<para>E' una lunga storia, o meglio è una vecchia storia, ma in realtà
è abbastanza breve. C. Northcote Parkinson scrisse un libro nei primi anni 60, chiamato
"Parkinson's Law" ("Legge di Parkinson"), che contiene molti aspetti delle dinamiche della
gestione.</para>

<para>[...]</para>

<para>Nello specifico esempio che coinvolge la rastrelliera delle biciclette,
l'altro componente vitale è una centrale atomica, penso che questo illustri l'età del libro.</para>

<para>Parkinson mostra come puoi andare nell'ufficio del direttore e ottenere
l'approvazione per costruire una centrale atomica da milioni o persino miliardi di dollari,
ma se volete costruire una rastrelliera per le biciclette sarete bloccati in discussioni
senza fine.</para>

<para>Parkinson spiega che questo accade perchè una centrale atomica è così vasta,
così costosa e così complicata che la gente non può percepirla, e piuttosto che provarci,
ricadono nell'assunzione che qualcun altro abbia controllato tutti i dettagli prima di andare
così avanti.  Richard P.  Feynmann da alcuni esempi interessanti e molto pertinenti, riguardanti
Los Alamos nei suoi libri.</para>

<para>Dall'altro lato una rastrelliera per bici. Chiunque può costruirne una in un fine settimana,
e ancora avere il tempo di guardare la partita in TV. Quindi non importa quanto ben preparato, quanto
ragionevole con la vostra proposta, qualcuno coglierà la possibilità di mostrare che sta facendo il suo
lavoro, che sta prestando attenzione, che è<emphasis>qui</emphasis>.</para>

<para>In Danimarca lo chiamiamo "lasciare l'impronta". Riguarda l'orgoglio personale e il prestigio,
si tratta di essere in grado di indicare da qualche parte e dire "Qui!  <emphasis>io</emphasis> l'ho fatto."
E' un importante tratto nei politici, ma presente in molta gente se viene data l'occasione. Pensate ai passi
nel cemento fresco.</para>

</blockquote>

<para>(Vale anche la pena leggere il suo messaggio completo. Vedete <xref
linkend="bikeshed-full"/>; o anche
<ulink url="http://bikeshed.com"/>.)</para>

<para>Chiunque abbia mai preso regolarmente parte in qualche gruppo di decision riconoscerà
di cosa Kamp sta parlando. Comunque, è solitamente impossibile persuadere <emphasis>tutti</emphasis>
di evitare di disegnare rastrelliere. La cosa migliore che possiate fare è precisare che il fenomeno
esiste, quando vedete che sta succedendo, e persuadere gli sviluppatori anziani&mdash;le persone
i cui messaggi hanno maggior peso&mdash;di posare i loro pennelli presto, così almeno loro non contribuiscono
al rumore. Dipingere rastrelliere non scomparirà mai del tutto, ma potete renderlo più breve e meno
frequente diffondendo la coscienza del fenomeno nella cultura del progetto.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="holy-wars">
<title>Evitare le Guerre Sante</title>

<para>Una <firstterm>Guerra Santa</firstterm> è una disputa, spesso ma non sempre
riguardo ad un problema relativamente secondario, in cui la gente si sente
abbastanza appassionata da continuare a discutere in ogni caso nella speranza che
la loro parte prevalga. Le guerre sante non sono come dipingere rastrelliere. La gente
che dipinge rastrelliere è solitamente rapida nel saltare su con un'opinione (perchè
loro possono), ma non se ne sentiranno necessariamente convinti, infatti potranno a
volte esprimere altre opinioni incompatibili, per mostrare che capiscono tutti i versi
del problema. In una guerra santa, d'altro canto, capire le altre posizioni è un segno
di debolezza. In una guerra santa, tutti sanno che c'è Una Risposta Giusta; solo non sono
d'accordo su quale sia.</para>

<para>Una volta che una guerra santa è iniziata, in genere non può
essere risolta accontentando tutti. Non fa bene puntualizzare, nella
mischia di una guerra santa, che una guerra santa è in corso. Tutti lo sanno già.
Purtroppo, un tratto comune delle guerre sante è il disaccordo sulla domanda
<emphasis>se</emphasis> la disputa è risolvibile continuando la discussione.
Visto da fuori, è chiaro che nessuno schieramento sta cambiando le idee dell'altro.
Visto da dentro, l'altro schieramento è ottuso e non sta pensando in modo chiaro,
ma ci potrebbero arrivare se pressati abbastanza. Ora,
<emphasis>non</emphasis> sto dicendo che non ci sia mai uno
schieramento giusto in una guerra santa. A volte c'è&mdash;nelle guerre sante a cui
ho partecipato, è sempre stato il mio ovviamente. Ma non importa, perchè non c'è un
algoritmo per dimostrare in modo convincente che uno schieramento o l'altro abbia ragione.</para>

<para>Un modo comune ma non soddisfacente con cui la gente prova a risolvere le guerre sante
è dire "Abbiamo già speso più tempo ed energia discutendo ciò di quanto ne valga la pena! Possiamo
per favore semplicemente lasciare stare?" Ci sono due problemi in questo. Primo, questo tempo
e questa energia sono già stati spesi e non potranno mai essere recuperati&mdash;
l'unica domanda è quanto <emphasis>altro</emphasis> sforzo rimane?  Se certa gente pensa che
solo ancora un poco di discussione porterà il problema alla fine, allora ha ancora senso (dal loro punto
di vista) continuare.</para>

<para>L'altro problema nel chiedere di lasciare perdere il problema è che questo è
spesso equivalente a permettere ad uno schieramento, lo status quo, di dichiarare la
vittoria per mancanza di azioni. E in alcuni casi, lo status quo è comunque noto per essere
inaccettabile: tutti sono d'accordo che qualche decisione deve essere presa, qualche azione intrapresa.
Lasciare il soggetto sarebbe peggio per tutti di quanto lo sarebbe per qualcuno lasciare perdere.
Ma dato che il dilemma si applica ugualmente a tutti, è comunque possibile finire
a discutere per sempre su cosa fare.
</para>

<para>So how should you handle holy wars?</para>
<para>Allora come dovreste trattare le guerre sante?</para>

<para>La prima risposta è fate in modo che non succedano.
Non è una cosa così senza speranza come sembra:</para>

<para>Potete anticipare alcune guerre sante standard: tendono a venire fuori
sui linguaggi di programmazione, licenze (vedi
<xref linkend="license-compatibility"/><phrase output="printed">
in <xref linkend="legal"/></phrase>), blocco dei reply-to ( vedi
<xref linkend="reply-to"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), e alcuni altri
argomenti. Ogni progetto solitamente ha una sua guerra santa o due, con cui gli
sviluppatori di lunga data diventeranno presto familiari.
Le tecniche per fermare le guerre sante, o almeno limitarne i danni, sono sempre
le stesse ovunque. Anche se siete convinti che il vostro schieramento abbia ragione,
cercate di trovare <emphasis>qualche</emphasis> modo di esprimere simpatia
e comprensione per gli argomenti che l'altro schieramento propone.
Spesso il problema in una guerra santa è che poichè ogni schieramento ha costruito
le proprie mura le più alte possibile, e reso chiero che ogni altra opinione
è pura follia, l'atto di arrendersi o cambiare la propria idea diventa psicologicamente
intollerabile: sarebbe l'ammissione non solo di aver sbagliato, ma di essere stati <emphasis>certi</emphasis>
e comunque aver sbagliato. Il modo in cui potete rendere questa ammissione accettabile
per l'altro schieramento è di esprimere voi stessi qualche dubbio&mdash;precisamente mostrando
che capite gli argomenti che stanno facendo e trovarli almeno interessanti, se non alla fine
convincenti. Fate un gesto che dia spazio per un gesto reciproco, e solitamente la situazione
migliorerà. Non sarà più facile nè difficile raggiungere il risultato tecnico che volevate, ma almeno
potete evitare inutili danni morali al morale del progetto.</para>

<para>Quando una guerra santa non può essere evitata, decidete presto quanto ci tenete,
e poi vogliate pubblicamente lasciarla perdere. Quando fate così. potete dire che vi tirate
indietro perchè non ne vale la pena, ma non esprimete amarezza e  <emphasis>non</emphasis> usate
l'occasione per un ultimo colpo agli argomenti dello schieramento opposto.
Lasciare perdere è efficace solo quando fatto con grazia.</para>

<para>Le guerre sante sui linguaggi di programmazione sono un po' un caso speciale,
perchè spesso sono altamente tecnici, e comunque molte persone si sentono qualificate
a prenderne parte, e la posta è molto alta, dato che il risultato può determinare in quale
linguaggio una buona parte del codice del progetto sarà scritta.
La soluzione migliore è scegliere presto il linguaggio, con l'appoggio degli
influenti sviluppatori iniziali, e poi difenderlo per il fatto che è quello per cui siete
a vostro agio ad usarlo, <emphasis>non</emphasis> sul fatto che è meglio di qualche
altro linguaggio che avrebbe invece potuto essere usato. Non lasciate mai degenerare
la conversazione in un confronto accademico sui linguaggi di programmazione ( che sembra
accadere in particolare spesso quando qualcuno tira fuori Perl, per qualche ragione); è
l'argomento mortale in cui dovete semplicemente rifiutarvi di farvi trascinare.</para>

<para>Per una maggiore conoscenza delle guerre sante, vedi <ulink
url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, e l'articolo di Danny Cohen
che rese popolare il termine, <ulink
url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="noisy-minority">
<title>L'Effetto "Minoranza Rumorosa"</title>

<para>In ogni discussione su mailing list, è facile per una piccola minoranza
dare l'impressione che ci sia un grande problema di dissenso, inondando
la mailing list con numerose lunghe email. E' un po' come una guerriglia, tranne
il fatto che l'illusione di dissenso diffuso è persino più potente, perchè è divisa
in un arbitrario numero di messaggi discreti e la maggior parte della gente non si
preoccuperà di tenere traccia di chi ha detto cosa, quando. Avranno la vaga impressione
che l'argomento è molto controverso, aspetteranno che la confusione finisca.</para>

<para>Il modo migliore per contrastare questo effetto è puntualizzare chiaramente
e fornire prove a supporto di quanto piccolo sia il vero numero dei dissidenti, rispetto
a quelli che sono d'accordo. Per incrementare la disparità, potreste voler chiedere privatamente
alla gente che è stata quasi sempre zitta, ma che sospettate che sarebbe d'accordo con la
maggioranza. Non dite nulla che suggerisca che i dissidenti volessero deliberatamente
provare ad accrescere l'impressione che stavano dando. Ci sono possibilità che non
lo facessero, e se anche lo avessero fatto, non c'è nessun vantaggio strategico
nel puntualizzarlo. Tutto ciò di cui avete bisogno è mostrare i veri numeri in un
confronto faccia a faccia, e la gente capirà che la loro percezione della situazione
non corrisponde alla realtà.</para>

<para>Questo consiglio non vale solo per problemi con chiare posizioni pro e contro.
Vale in ogni discussione dove c'è confusione, ma non è chiaro che la maggior parte
della gente consideri il problema in discussione un vero problema. Dopo un po', se siete
d'accordo che il problema non vale l'azione, potete vedere che ha fallito nell'ottenere
seguito (anche se ha generato molte email), potete semplicemente osservare pubblicamente
che non c'è seguito. Se l'effetto "minoranza rumorosa" ha lavorato, il vostro messaggio
sembrerà come un respiro di aria fresca. L'impressione della maggior parte della gente della
disussione fino a quel momento sarà stata in qualche modo confusa: "Huh, di sicuro sembra che
ci sia qualche grosso problema qui, perchè ci sono molti messaggi, ma non riesco a vedere succedere
nessun progresso". Spiegando come la forma della discussione la faccia apparire più turbolenta di
quando sia davvero, gli date retrospettivamente una nuova forma, in cui la gente può
rivedere la propria comprensione di cosa ne veniva fuori.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="difficult-people">
<title>Gente Difficile</title>

<para>Non è più facile avere a che fare con gente difficile nei forum elettronici
di quanto lo sia di persona. Per "difficile" non intendo "maleducata". La gente
maleducata è fastidiosa, ma non necessariamente difficile. In questo libro si è già
discusso di come trattarli: commentare la maleducazione la prima volta, e da allora
in poi, o ignorarli o trattarli come chiunque altro. Se continuano ad essere maleducati,
si renderanno di solito così impopolari da non avere influenza su altri nel progetto,
quindi sono un problema che si circoscrive da sè.</para>

<para>I casi veramente difficile sono persone che
non sono apertamente maleducate, ma che manipolano o abusano dei processi
del progetto in un modo che finisce col costare tempo ed energia di altra gente,
pur non portando alcun beneficio al progetto. Questa gente spesso cerca punti limite
nelle procedure del progetto, per darsi più influenza di quella che altrimenti avrebbero.
Questo è molto più insidioso della mera maleducazione, perchè nè il comportamento nè il
danno che causa è evidente all'osservatore casuale. Un classico esempio è il guerrigliero,
in cui qualcuno (sempre sembrando il più ragionevole possibile) continua a sostenere
che il problema in discussione non è pronto per una soluzione, e propone molte possibili
soluzioni, o nuovi punti di vista su vecchie soluzioni, quando cosa sta davvero succedendo
è che capisce che un consenso o uno scontro sta per formarsi, e non gli piace dove il
problema è andato a finire. Un altro esempio è quando c'è un dibattito che non convergerà
ad un consenso, ma il gruppo cerca almeno di chiarificare i punti di disaccordo e produrre
un riassunto per chiunque si aggiunga da quel momento in poi. L'ostruzionista, che sa che il
riassunto potrebbe portare ad un risultato che non gli piace, spesso proverà a ritardare
il sommario, complicando sempre di più le domande di cosa dovrebbe esserci, o obbiettando
a consigli ragionevoli o introducendo nuovi e inaspettati punti.</para>

<sect2 id="handling-difficult-people">
<title>Gestire la Gente Difficile</title>

<para>Per contrastare tale comportamento, aiuta capire la mentalità
	di coloro che lo adottano. Solitamente la gente non lo fa di proposito.
	Nessuno si sveglia al mattino e dice a se stesso: "Oggi cinicamente manipolerò
	i form procedurali per essere un irritante ostruzionista." Piuttosto, tali azioni
	sono spesso precedute da una sensazione semi-paranoica di essere tagliato fuori
	dalle interazioni e decisioni del gruppo. La persona sente che non sarà presa in
	considerazione seriamente, o (nei casi più gravi) che c'è quasi una cospirazione
	contro di lui&mdash;che gli altri membri del gruppo hanno deciso di
	formare un club esclusivo, di cui lui non è membro. Questo allora giustifica, nella
	sua mente, il prendere le regole alla lettera e procedere in una manipolazione
	formale delle procedure del progetto, per farsi prendere<emphasis>seriamente</emphasis> 
	in considerazione da tutti gli altri. In casi estremi, la persona può persino pensare che sta combattendo
	una battaglia solitaria per salvare il progetto da se stesso.</para>

<para>E' la natura di questo tipo di attacco dall'interno che non tutti lo
noteranno nello stesso momemento, e certa gente potrebbe non vederlo del tutto
a meno che presentato con forte evidenza. Questo significa che neutralizzarlo potrebbe
essere un bel po' di lavoro. Non è abbastanza persuadere voi stessi che sta
succedendo; dovete trovare abbastanza prove anche per persuadere gli altri, e poi
dovete far conoscere queste prove in modo intelligente.</para>

<para>Dato che è così tanto lavoro combattere, è spesso meglio tollerarlo
giusto un po'. Pensatelo come una malattia da parassiti, ma leggera: se non
è troppo debilitante, il progetto può permettersi di rimanere infetto, e le medicine
avrebbero dolorosi effetti collaterali. Comunque, se tollerarla diventa troppo dannoso,
allora è il momento di agire. Iniziate a prendere appunti sulle modalità che vedete. Fate in
modo di includere riferimenti agli archivi pubblici&mdash;questa è una delle ragioni per cui
il progetto registra le cose, così potete anche usarle. Una volta che avete
costruito un buon caso, iniziate ad avere conversazioni private con altri partecipanti al progetto.
Non dite loro cosa avete osservato, piuttosto, chiedete prima a loro cosa hanno osservato.
Questa potrebbe essere la vostra ultima possibilità di avere un riscontro non filtrato di come
gli altri vedono il comportamento di chi crea problemi; una volta che iniziate a parlarne
apertamente, l'opinione diventerà polarizzata e nessuno sarà in grado di ricordare cosa
avesse pensato in precedenza riguardo al problema.</para>

<para>Se le discussioni private indicano che almeno anche qualcun altro vede il
problema, allora è il momento di fare qualcosa. Questo è quando dovete diventare
<emphasis>veramente</emphasis> cauti, perchè è molto facile per questo tipo di gente
cercare di far sembrare come se li steste criticando ingiustamente. Qualunque cosa
facciate, non accusateli mai di abusare in modo malizioso delle procedure del progetto,
di essere paranoici, o, in generale, di tutte le altre cose che sospettate siano probabilmente
vere. La vostra strategia deve essere di sembrare sia più ragionevole e più concentrato
con la salute generale del progetto, con l'obiettivo di o riformare il comportamento della
persona, o farlo andare via in maniera definitiva. A seconda degli altri sviluppatori, e della
vostra relazione con loro, potrebbe essere vantaggioso prima cercare alleati privatamente.
O potrebbe non esserlo; potrebbe solo creare malumori dietro le quinte, se la gente pensa
che stiate intraprendendo una impropria campagna silenziosa.</para>

<para>Ricordate che anche se l'altra persona potrebbe essere
uno che si comporta in maniera distruttiva,  <emphasis>voi</emphasis> sarete quelli
che appaiono distruttivi se fate una pubblica accusa da cui non potete tornare indietro.
Siate sicuri di avere molti esempi per dimostrare quello che state dicendo, e ditelo il
più gentilmente possibile pur essendo diretti. Magari non persuaderete la persona
in questione, ma va bene fino a quando persuadete tutti gli altri.</para>

</sect2>

<sect2 id="difficult-people-case-study">
<title>Caso di Studio</title>

<para>Ricordo solo una situazione, in più di 10 anni di lavoro
nel software libero, dove le cose si fecero così cattiva che dovemmo
chiedere tutti insieme a qualcuno di smettere di scrivere. Come spesso accade,
non era maleducato, e sinceramente voleva solo essere d'aiuto. Solo non sapeva quando
scrivere e quando non scrivere. Le nostre mailing list sono aperte al pubblico,
e lui stava scrivendo così spesso, e chiedendo domande su così tanti argomenti
diversi, che stava diventando un problema di rumore per la comunità. Avevamo
già provato a chiedergli gentilmente di fare un po' più di ricerca di risposte
prima di scrivere, ma non aveva avuto effetto.</para>

<para>La strategia che alla fine funzionò è un perfetto esempio di come
costruire un caso robusto su dati neutrali e in quantità. Uno dei nostri
sviluppatori fece un po' di scavi negli archivi, e poi mandò il seguente
messaggio privatamente a pochi sviluppatori. L'imputato (il terzo nome nella
lista sotto, mostrato qui come "J. Random") aveva una storia molto breve nel progetto,
e non aveva contribuito codice nè documentazione. E comunque era il terzo più attivo
produttore di messaggi sulla mailing list:</para>

<screen>
From: "Brian W. Fitzpatrick" &lt;fitz@collab.net&gt;
To: [... lista dei destinatari omessa per riservatezza ...]
Subject: Il Lavandino dell'energia di Subversion
Date: Wed, 12 Nov 2003 23:37:47 -0600

Negli ultimi 25 giorni, i sei maggiori produttori di messaggi sulla mailing list svn
[sviluppatori|utenti] sono stati:

    294  kfogel@collab.net
    236  "C. Michael Pilato" &lt;cmpilato@collab.net&gt;
    220  "J. Random" &lt;jrandom@problematic-poster.com&gt;
    176  Branko &Ccaron;ibej &lt;brane@xbc.nu&gt;
    130  Philip Martin &lt;philip@codematters.co.uk&gt;
    126  Ben Collins-Sussman &lt;sussman@collab.net&gt;

Vorrei dire che cinque di queste persone stanno contribuendo a Subversion, che
raggiungerà 1.0 nel prossimo futuro.

Vorrei anche dire che una di queste persone sta consumando in maniera consistente il tempo
e l'energia degli altri 5, per non dire della mailing list intera,
quindi (magari non intenzionalmente) rallentando lo sviluppo di Subversion. Non ho
fatto un'analisi di tutti i thread, ma facendo il vgrep delle mie mail di Subversion si vede
che ogni mail di persona ha ricevuto risposta almeno una volta da almeno 2 delle altre 5 persone
della lista sopra.

Penso che qui sia necessario qualche tipo di intervento radicale, anche se faremo scappare
via la persona sopracitata. Carinerie e gentilezze si sono già dimostrate senza effetto.

dev@subversion è una mailing list per facilitare lo sviluppo di un sistema
di controllo di versione, non una sessione di terapia di gruppo.

-Fitz, che prova a guadare attraverso tre giorni di email svn che ha lasciato accumulare
</screen>

<para>Anche se potrebbe non sembrare così a prima vista, il comportamento di J.Random era un
	classico esempio di abuso delle procedure di progetto. Non stava facendo nulla di ovvio
	come provare a sabotare un voto, ma stava abusando della politica della mailing list di 
	affidarsi sulla auto moderazione dei suoi membri.
	Abbiamo lasciato al giudizio di ogni individuo quando scrivere messaggi e su
	quali argomenti. Quindi, non avevamo procedure di ricorso per gestire qualcuno
	che o non aveva, o non usava, tale giudizio. Non c'era alcuna regola a cui riferirsi
	e dire che il tizio la stava violando, eppur tutti sapevano che il suo frequente scrivere messaggi
	stava diventando un problema serio.</para>

<para>La strategia di Fitz era, in retrospettiva, da maestro. Ha trovato
	un esempio dannatamente fondato, ma poi l'ha distribuito discretamente,
	mandandolo prima alle poche person il cui supporto sarebbe stato la chiave
	per ogni azione drastica. Si sono trovati d'accordo che qualche tipo di azione
	era necessaria, e alla fine abbiamo chiamato J. Random al telefono, descritto
	il problema a lui direttamente, e gli abbiamo chiesto semplicemente di smetterla di scrivere messaggi.
	Lui non ha mai veramente capito il perchè; se fosse stato in grado di capire, probabilmente
	avrebbe fin dall'inizio usato un criterio adeguato. Ma accettò di smettere di scrivere, e la
	mailing list tornò ad essere utilizzabile. Parte del motivo per cui questa strategia ha funzionato,
	magari, è stata l'implicita minaccia che avremmo potuto iniziare a limitare i suoi messaggi usando
	il software di moderazione solitamente usato per prevenire lo spam (vedi
<xref linkend="spam-prevention"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>).  Ma la ragione per cui eravamo in grado
di avere questa opzione di riserva è stata il fatto che Fitz ha in primo luogo trovato il 
necessario supporto nelle persone importanti.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="growth">
<title>Handling Growth</title>

<para>The price of success is heavy in the open source world.  As your
software gets more popular, the number of people who show up looking
for information increases dramatically, while the number of people
able to provide information increases much more slowly.  Furthermore,
even if the ratio were evenly balanced, there is still a fundamental
scalability problem with the way most open source projects handle
communications.  Consider mailing lists, for example.  Most projects
have a mailing list for general user questions&mdash;sometimes the
list's name is "users", "discuss", "help", or something else.
Whatever its name, the purpose of the list is always the same: to
provide a place where people can get their questions answered, while
others watch and (presumably) absorb knowledge from observing these
exchanges.</para>

<para>These mailing lists work very well up to a few thousand users
and/or a couple of hundred posts a day.  But somewhere after that, the
system starts to break down, because every subscriber sees every post;
if the number of posts to the list begins to exceed what any
individual reader can process in a day, the list becomes a burden to
its members.  Imagine, for instance, if Microsoft had such a mailing
list for Windows XP.  Windows XP has hundreds of millions of users; if
even one-tenth of one percent of them had questions in a given
twenty-four hour period, then this hypothetical list would get
hundreds of thousands of posts per day!  Such a list could never
exist, of course, because no one would stay subscribed to it.
This problem is not limited to mailing lists; the same logic applies
to IRC channels, online discussion forums, indeed to any system in
which a group hears questions from individuals.  The implications are
ominous: the usual open source model of massively parallelized support
simply does not scale to the levels needed for world
domination.</para>

<para>There will be no explosion when forums reach the breaking point.
There is just a quiet negative feedback effect: people unsubscribe
from the lists, or leave the IRC channel, or at any rate stop
bothering to ask questions, because they can see they won't be heard
in all the noise.  As more and more people make this highly rational
choice, the forum's activity will seem to stay at a manageable level.
But it is staying manageable precisely because the rational (or at
least experienced) people have started looking elsewhere for
information&mdash;while the inexperienced people stay behind and
continue posting.  In other words, one side effect of continuing to
use unscalable communications models as the project grows is that the
average quality of both questions and answers tends to go down, which
makes it look like new users are dumber than they used to be, when in
fact they're probably not.  It's just that the benefit/cost ratio of
using those high-population forums goes down, so naturally those with
the experience to do so start to look elsewhere for answers first.
Adjusting communications mechanisms to cope with project growth
therefore involves two related strategies:</para>

<orderedlist>
  <listitem><para>Recognizing when particular parts of a forum are
            <emphasis>not</emphasis> suffering unbounded growth, even
            if the forum as a whole is, and separating those parts
            off into new, more specialized forums (i.e., don't let
            the good be dragged down by the bad).</para>
  </listitem>
  <listitem><para>Making sure there are many automated sources
            of information available, and that they are kept
            organized, up-to-date, and easy to find.</para>
  </listitem>
</orderedlist>

<para>Strategy (1) is usually not too hard.  Most projects start out
with one main forum: a general discussion mailing list, on which
feature ideas, design questions, and coding problems can all be hashed
out.  Everyone involved with the project is on the list.  After a
while, it usually becomes clear that the list has evolved into several
distinct topic-based sublists.  For example, some threads are clearly
about development and design; others are user questions of the "How do
I do X?" variety; maybe there's a third topic family centered around
processing bug reports and enhancement requests; and so on.  A given
individual, of course, might participate in many different thread
types, but the important thing is that there is not a lot of overlap
between the types themselves.  They could be divided into separate
lists without causing any harmful balkanization, because the threads
rarely cross topic boundaries.</para>

<para>Actually doing this division is a two-step process.  You create
the new list (or IRC channel, or whatever it is to be), and then you
spend whatever time is necessary gently nagging and reminding people
to <emphasis>use</emphasis> the new forums appropriately.  That latter
step can last for weeks, but eventually people will get the idea.  You
simply have to make a point of always telling the sender when a post
is sent to the wrong destination, and do so visibly, so that other
people are encouraged to help out with routing.  It's also useful to
have a web page providing a guide to all the lists available; your
responses can simply reference that web page and, as a bonus, the
recipient may learn something about looking for guidelines before
posting.</para>

<para>Strategy (2) is an ongoing process, lasting the lifetime of the
project and involving many participants.  Of course it is partly a
matter of having up-to-date documentation (see
<xref linkend="documentation"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>) and making sure to
point people there.  But it is also much more than that; the sections
that follow discuss this strategy in detail.</para>

<!-- ======================== SECTION ============================== -->
<sect2 id="using-archives">
<title>Conspicuous Use of Archives</title>

<para>Typically, all communications in an open source project (except
sometimes IRC conversations) are archived.  The archives are public
and searchable, and have referential stability: that is, once a given
piece of information is recorded at a particular address, it stays at
that address forever.</para>

<para>Use those archives as much as possible, and as conspicuously as
possible.  Even when you know the answer to some question off the top
of your head, if you think there's a reference in the archives that
contains the answer, spend the time to dig it up and present it.
Every time you do that in a publicly visible way, some people learn
for the first time that the archives are there, and that searching in
them can produce answers.  Also, by referring to the archives instead
of rewriting the advice, you reinforce the social norm against
duplicating information.  Why have the same answer in two different
places?  When the number of places it can be found is kept to a
minimum, people who have found it before are more likely to remember
what to search for to find it again.  Well-placed references also
contribute to the quality of search results in general, because they
strengthen the targeted resource's ranking in Internet search
engines.</para>

<para>There are times when duplicating information makes sense,
however.  For example, suppose there's a response already in the
archives, not from you, saying:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  To
unfrobnicate them, run these steps:

1. Shut down the Scanley server.
2. Run the 'defrobnicate' program that ships with Scanley.
3. Start up the server.
</screen>

<para>Then, months later, you see another post indicating that
someone's indexes have become frobnicated.  You search the archives
and come up with the old response above, but you realize it's missing
some steps (perhaps by mistake, or perhaps because the software has
changed since that post was written).  The classiest way to handle
this is to post a new, more complete set of instructions, and
explicitly obsolete the old post by mentioning it:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  We
saw this problem back in July, and J. Random posted a solution at
http://blahblahblah/blah.  Below is a more complete description of
how to unfrobnicate your indexes, based on J. Random's instructions
but extending them a bit:

1. Shut down the Scanley server.
2. Become the user the Scanley server normally runs as.
3. As that user, run the 'defrobnicate' program on the indexes.
4. Run Scanley by hand to see if the indexes work now.
5. Restart the server.
</screen>

<para>(In an ideal world, it would be possible to attach a note to the
old post, saying that there is newer information available and
pointing to the new post.  However, I don't know of any archiving
software that offers an "obsoleted by" feature, perhaps because it
would be mildly tricky to implement in a way that doesn't violate the
archives' integrity as a verbatim record.  This is another reason why
creating dedicated web pages with answers to common questions is a
good idea.)</para>

<para>Archives are probably most often searched for answers to
technical questions, but their importance to the project goes well
beyond that.  If a project's formal guidelines are its statutory law,
the archives are its common law: a record of all decisions made and
how they were arrived at.  In any recurring discussion, it's pretty
much obligatory nowadays to start with an archive search.  This allows
you to begin the discussion with a summary of the current state of
things, anticipate objections, prepare rebuttals, and possibly
discover angles you hadn't thought of.  Also, the other participants
will <emphasis>expect</emphasis> you to have done an archive search.
Even if the previous discussions went nowhere, you should include
pointers to them when you re-raise the topic, so people can see for
themselves a) that they went nowhere, and b) that you did your
homework, and therefore are probably saying something now that has not
been said before.</para>

<sect3 id="all-as-archives">
<title>Treat all resources like archives</title>

<para>All of the preceding advice applies to more than just mailing
list archives.  Having particular pieces of information at stable,
conveniently findable addresses should be an organizing principle for
all of the project's information.  Let's take the project FAQ as a
case study.</para>

<para>How do people use a FAQ?</para>

<orderedlist>
  <listitem>
    <para>They want to search in it for specific words and phrases.</para>
  </listitem>
  <listitem>
    <para>They want to browse it, soaking up information without
          necessarily looking for answers to specific questions.</para>
  </listitem>
  <listitem>
    <para>They expect search engines such as Google to know about the
          FAQ's content, so that searches can result in FAQ entries.</para>
  </listitem>
  <listitem>
    <para>They want to be able to refer other people directly to specific
          items in the FAQ.</para>
  </listitem>
  <listitem>
    <para>They want to be able to add new material to the FAQ, but
          note that this happens much less often than answers are
          looked up&mdash;FAQs are far more often read from than
          written to.</para>
  </listitem>
</orderedlist>

<para>Point 1 implies that the FAQ should be available in some sort of
textual format.  Points 2 and 3 imply that the FAQ should be available
as an HTML page, with point 2 additionally indicating that the HTML
should be designed for readability (i.e., you'll want some control
over its look and feel), and should have a table of contents.  Point 4
means that each individual entry in the FAQ should be assigned an HTML
<firstterm>named anchor</firstterm>, a tag that allows people to reach
a particular location on the page.  Point 5 means the source files for
the FAQ should be available in a convenient way (see <xref
linkend="version-everything"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>), in a format
that's easy to edit.</para>

  <sidebar id="html-named-anchors-and-ids">
  <title>Named Anchors and ID Attributes</title>

  <para>There are two ways to get a browser to jump to a specific
  location within a web page: named anchors and id attributes.</para>

  <para>A <firstterm>named anchor</firstterm> is just a normal HTML
  anchor element (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), but with
  a "name" attribute:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>More recent versions of HTML support a generic <firstterm>id
  attribute</firstterm>, which can be attached to any HTML element,
  not just to <literal>&lt;a&gt;</literal>.  For example:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Both named anchors and id attributes are used in the same
  way.  One appends a hash mark and the label to a URL, to cause the
  browser to jump straight to that spot in the page:</para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtually all browsers support named anchors; most modern
  browsers support the id attribute.  To play it safe, I would
  recommend using either named anchors alone, or named anchors
  <emphasis>and</emphasis> id attributes together (with the same label
  for both in a given pair, of course).  Named anchors cannot be
  self-closing&mdash;even if there's no text inside the element, you
  must still write it in two-sided form:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...though normally there would be some text, such as the title
  of a section.</para>

  <para>Whether you use a named anchor, or an id attribute, or both,
  remember that the label will not be visible to someone who browses
  to that location without using the label.  But such a person might
  want to discover the label for a particular location, so they can
  mail the URL for a FAQ answer to a friend, for example.  To help
  them do this, add a <firstterm>title attribute</firstterm> to the
  same element(s) where you added the "name" and/or "id" attribute,
  for example:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>When the mouse pointer is held over the text inside the
  title-attributed element, most browsers will pop up a tiny box
  showing the title.  I usually include the hash-sign, to remind the
  user that this is what she would put at the end of the URL to jump
  straight to this location next time.</para>

  </sidebar>

<para>Formatting the FAQ like this is just one example of how to make
a resource presentable.  The same properties&mdash;direct
searchability, availability to major Internet search engines,
browsability, referential stability, and (where applicable)
editability&mdash;apply to other web pages, the source code tree, the
bug tracker, etc.  It just happens that most mailing list archiving
software long ago recognized the importance of these properties, which
is why mailing lists tend to have this functionality natively, while
other formats may require some extra effort on the maintainer's part
(<xref linkend="managing-volunteers"/> discusses how to spread
that maintenance burden across many volunteers).</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="codifying-tradition">
<title>Codifying Tradition</title>

<para>As a project acquires history and complexity, the amount of data
each incoming participant must absorb increases.  Those who have been
with the project a long time were able to learn, and invent, the
project's conventions as they went along.  They will often not be
consciously aware of what a huge body of tradition has accumulated, and
may be surprised at how many missteps recent newcomers seem to make.
Of course, the issue is not that the newcomers are of any lower
quality than before; it's that they face a bigger acculturation burden
than newcomers did in the past.</para>

<para>The traditions a project accumulates are as much about how to
communicate and preserve information as they are about coding
standards and other technical minutae.  We've already looked at both
sorts of standards, in
<xref linkend="developer-documentation"/><phrase output="printed"> 
in <xref linkend="getting-started"/></phrase> and
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase> respectively, and
examples are given there.  What this section is about is how to keep
such guidelines up-to-date as the project evolves, especially
guidelines about how communications are managed, because those are the
ones that change the most as the project grows in size and
complexity.</para>

<para>First, watch for patterns in how people get confused.  If you
see the same situations coming up over and over, especially with new
participants, chances are there is a guideline that needs to be
documented but isn't.  Second, don't get tired of saying the same
things over and over again, and don't <emphasis>sound</emphasis> like
you're tired of saying them.  You and other project veterans will have
to repeat yourselves often; this is an inevitable side effect of the
arrival of newcomers.</para>

<para>Every web page, every mailing list message, and every IRC channel
should be considered advertising space&mdash;not for commercial
advertisements, but for ads about your project's own resources.  What
you put in that space depends on the demographics of those likely to
read it.  An IRC channel for user questions, for example, is likely to
get people who have never interacted with the project
before&mdash;often someone who has just installed the software, and
has a question he'd like answered immediately (after all, if it
could wait, he'd have sent it to a mailing list instead, which would
probably use less of his total time, although it would take longer
for an answer to come back).  People usually don't make a permanent
investment in the IRC channel; they'll show up, ask their question,
and leave.</para>

<para>Therefore, the channel topic should be aimed at people looking
for technical answers about the software <emphasis>right
now</emphasis>, rather than at, say, people who might get involved
with the project in a long term way and for whom community interaction
guidelines might be more appropriate.  Here's how a really busy
channel handles it (compare this with the earlier example in
<xref linkend="irc"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>):</para>

<screen>
You are now talking on #linuxhelp

Topic for #linuxhelp is Please READ
http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
rules are at http://www.nerdfest.org/lh_rules.html | Please consult
http://kerneltrap.org/node/view/799 before asking about upgrading to a
2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc -&gt;
update to 2.6.8.1 or 2.4.27 | hash algo disaster: http://tinyurl.com/6w8rf
| reiser4 out
</screen>

<para>With mailing lists, the "ad space" is a tiny footer appended to
every message.  Most projects put subscription/unsubscription
instructions there, and perhaps a pointer to the project's home page
or FAQ page as well.  You might think that anyone subscribed to the
list would know where to find those things, and they probably
do&mdash;but many more people than just subscribers see those mailing
list messages.  An archived post may be linked to from many places;
indeed, some posts become so widely known that they eventually have
more readers off the list than on it.</para>

<para>Formatting can make a big difference.  For example, in the
Subversion project, we were having limited success using the
bug-filtering technique described in
<xref linkend="bug-filtering"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.  Many bogus
bug reports were still being filed by inexperienced people, and each
time it happened, the filer had to be educated in exactly the same way
as the 500 people before him.  One day, after one of our developers had
finally gotten to the end of his rope and flamed some poor user who
didn't read the issue tracker guidelines carefully enough, another
developer decided this pattern had gone on long enough.  He suggested
that we reformat the issue tracker front page so that the most
important part, the injunction to discuss the bug on the mailing lists
or IRC channels before filing, would stand out in huge, bold red
letters, on a bright yellow background, centered prominently above
everything else on the page.  We did so (you can see the results at
<ulink url="http://subversion.tigris.org/project_issues.html"/>), and
the result was a noticeable drop in the rate of bogus issue filings.
We still get them, of course&mdash;we always will&mdash;but the rate
has slowed considerably, even as the number of users increases.  The
outcome is not only that the bug database contains less junk, but that
those who respond to issue filings stay in a better mood, and are more
likely to remain friendly when responding to one of the now-rare bogus
filings.  This improves both the project's image and the mental health
of its volunteers.</para>

<para>The lesson for us was that merely writing up the guidelines was
not enough.  We also had to put them where they'd be seen by those who
need them most, and format them in such a way that their status as
introductory material would be immediately clear to people unfamiliar
with the project.</para>

<para>Static web pages are not the only venue for advertising the
project's customs.  A certain amount of interactive policing (in the
friendly-reminder sense, not the handcuffs-and-jail sense) is also
required.  All peer review, even the commit reviews described in
<xref linkend="code-review"/><phrase output="printed"> in
<xref linkend="getting-started"/></phrase>, should include review
of people's conformance or non-conformance with project norms,
especially with regard to communications conventions.</para>

<para>Another example from the Subversion project: we settled on a
convention of "r12908" to mean "revision 12908 in the version control
repository."  The lower-case "r" prefix is easy to type, and because
it's half the height of the digits, it makes an easily-recognizable
block of text when combined with the digits.  Of course, settling on
the convention doesn't mean that everyone will begin using it
consistently right away.  Thus, when a commit mail comes in with a log
message like this:</para>

<screen>
------------------------------------------------------------------------
r12908 | qsimon | 2005-02-02 14:15:06 -0600 (Wed, 02 Feb 2005) | 4 lines

Patch from J. Random Contributor &lt;jrcontrib@gmail.com&gt;

* trunk/contrib/client-side/psvn/psvn.el:
  Fixed some typos from revision 12828.
------------------------------------------------------------------------
</screen>

<para>...part of reviewing that commit is to say "By the way, please
use 'r12828', not 'revision 12828' when referring to past changes."
This isn't just pedantry; it's important as much for automatic
parsability as for human readership.</para>

<para>By following the general principle that there should be
canonical referral methods for common entities, and that these
referral methods should be used consistently everywhere, the project
in effect exports certain standards.  Those standards enable people to
write tools that present the project's communications in more useable
ways&mdash;for example, a revision formatted as "r12828" could be
transformed into a live link into the repository browsing system.
This would be harder to do if the revision were written as "revision
12828", both because that form could be divided across a line break,
and because it's less distinct (the word "revision" will often appear
alone, and groups of numbers will often appear alone, whereas the
combination "r12828" can only mean a revision number).  Similar
concerns apply to issue numbers, FAQ items (hint: use a URL with a
named anchor, as described in
<xref linkend="html-named-anchors-and-ids"/>), etc.</para>

<para>Even for entities where there is not an obvious short, canonical
form, people should still be encouraged to provide key pieces of
information consistently.  For example, when referring to a mailing
list message, don't just give the sender and subject; also give the
archive URL <emphasis>and</emphasis> the Message-ID header.  The last
allows people who have their own copy of the mailing list (people
sometimes keep offline copies, for example to use on a laptop while
traveling) to unambiguously identify the right message even if they
don't have access to the archives.  The sender and subject wouldn't be
enough, because the same person might make several posts in the same
thread, even on the same day.</para>

<para>The more a project grows, the more important this sort of
consistency becomes.  Consistency means that everywhere people look,
they see the same patterns being followed, so they know to follow
those patterns themselves.  This, in turn, reduces the number of
questions they need to ask.  The burden of having a million readers is
no greater than that of having one; scalability problems start to
arise only when a certain percentage of those readers ask questions.
As a project grows, therefore, it must reduce that percentage by
increasing the density and accessibility of information, so that any
given person is more likely to find what he needs without having to
ask.</para>

<!--

<para><remark>See
<ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate concern.  Log message
templates.  Make sure that commit reviews apply to log messages and
other "meta" aspects of the commit as well as to the code
itself.</remark></para>

-->

</sect2>

<!-- todo: A lot of projects have designated summarizers, like the
Zack Brown (?) for the Linux kernel, and I think I've seen similar
stuff at DebianPlanet as well.  That's another thing to talk about in
this discussion of "Strategy (2)", and maybe something to add to the
Project Roles examples in <xref linkend="share-management"/>.
-->

</sect1>

<sect1 id="bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para>In any project that's making active use of its bug tracker,
there is always a danger of the tracker turning into a discussion
forum itself, even though the mailing lists would really be better.
Usually it starts off innocently enough: someone annotates an issue
with, say, a proposed solution, or a partial patch.  Someone else sees
this, realizes there are problems with the solution, and attaches
another annotation pointing out the problems.  The first person
responds, again by appending to the issue...and so it goes.</para>

<para>The problem with this is, first, that the bug tracker is a
pretty cumbersome place to have a discussion, and second, that other
people may not be paying attention&mdash;after all, they expect
development discussion to happen on the development mailing list, so
that's where they look for it.  They may not be subscribed to the
issue changes list at all, and even if they are, they may not follow it
very closely.</para>

<para>But exactly where in the process did something go wrong?  Was it
when the original person attached her solution to the
issue&mdash;should she have posted it to the list instead?  Or was it
when the second person responded in the issue, instead of on the
list?</para>

<para>There isn't one right answer, but there is a general principle:
if you're just adding data to an issue, then do it in the tracker, but
if you're starting a <emphasis>conversation</emphasis>, then do it on
the mailing list.  You may not always be able to tell which is the
case, but just use your best judgement.  For example, when attaching a
patch that contains a potentially controversial solution, you might be
able to anticipate that people are going to have questions about it.
So even though you would normally attach the patch to the issue
(assuming you don't want to or can't commit the change directly), in
this case you might choose to post it to a mailing list instead.  At
any rate, there eventually will come a point in the exchange where one
party or the other can tell that it is about to go from mere appending
of data to an actual conversation&mdash;in the example that started
this section, that would be the second respondent, who on realizing
that there were problems with the patch, could predict that a real
conversation is about to ensue, and therefore that it should be held
in the appropriate medium.</para>

<para>To use a mathematical analogy, if the information looks like it
will be quickly convergent, then put it directly in the bug tracker;
if it looks like it will be divergent, then a mailing list or IRC
channel would be a better place.</para>

<para>This doesn't mean there should never be any exchanges in the
bug tracker.  Asking for more details of the reproduction recipe
from the original reporter tends to be a highly convergent process,
for instance.  The person's response is unlikely to raise new issues;
it's simply going to flesh out information already filed.  There's no
need to distract the mailing list with that process; by all means,
take care of it with a series of comments in the tracker.  Likewise,
if you're fairly sure that the bug has been misreported (i.e., is not
a bug), then you can simply say so right in the issue.  Even pointing
out a minor problem with a proposed solution is fine, assuming the
problem is not a showstopper for the entire solution.</para>

<para>On the other hand, if you're raising philosophical issues about
the bug's scope or the software's proper behavior, you can be pretty
sure other developers will want to be involved.  The discussion is
likely to diverge for a while before it converges, so do it on the
mailing list.</para>

<para>Always link to the mailing list thread from the issue, when you
choose to post to the mailing list.  It's still important for someone
following the issue to be able to reach the discussion, even if the
issue itself isn't the forum of discussion.  The person who starts the
thread may find this laborious, but open source is fundamentally a
writer-responsible culture: it's much more important to make things
easy for the tens or hundreds of people who may read the bug than for
the three or five people writing about it.</para>

<para>It's fine to take important conclusions or summaries from the
list discussion and paste them into the issue, if that will make
things convenient for readers.  A common idiom is to start a list
discussion, put a link to the thread in the issue, and then when the
discussion finishes, paste the final summary into the issue (along
with a link to the message containing that summary), so someone
browsing the issue can easily see what conclusion was reached without
having to click to somewhere else.  Note that the usual "two masters"
data duplication problem does not exist here, because both archives
and issue comments are usually static, unchangeable data
anyway.</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="publicity">
<title>Publicity</title>

<para>In free software, there is a fairly smooth continuum between
purely internal discussions and public relations statements.  This is
partly because the target audience is always ill-defined: given that
most or all posts are publicly accessible, the project doesn't have
full control over the impression the world gets.  Someone&mdash;say, a
<ulink url="http://slashdot.org/">slashdot.org</ulink>
editor&mdash;may draw millions of readers' attention to a post that no
one ever expected to be seen outside the project.  This is a fact of
life that all open source projects live with, but in practice, the
risk is usually small.  In general, the announcements that the project
most wants publicized are the ones that will be most publicized,
assuming you use the right mechanisms to indicate relative
newsworthiness to the outside world.</para>

<para>For major announcements, there tend to be four or five main
channels of distribution, on which announcements should be made as
nearly simultaneously as possible:</para>

<orderedlist>

  <listitem><para>Your project's front page is probably seen by more
            people than any other part of the project.  If you have a
            really major announcement, put a blurb there.  The blurb
            should be a very brief synopsis that links to the press
            release (see below) for more information.</para>
  </listitem>

  <listitem><para>At the same time, you should also have a "News" or
            "Press Releases" area of the web site, where the
            announcement can be written up in detail.  Part of the
            purpose of a press release is to provide a single,
            canonical "announcement object" that other sites can link
            to, so make sure it is structured accordingly: either as
            one web page per release, as a discrete blog entry, or
            as some other kind of entity that can be linked to while
            still being kept distinct from other press releases in the
            same area.</para>
  </listitem>

  <listitem><para>If your project has an RSS feed, make sure the
            announcement goes out there too.  This may happen
            automatically when you create the press release, depending
            on how things are set up at your site.
            (<firstterm>RSS</firstterm> is a mechanism for
            distributing meta-data-rich news summaries to
            "subscribers", that is, people who have indicated an
            interest in receiving those summaries.  See
     <ulink url="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html"/>
            for more information about RSS.)</para>
  </listitem>

  <listitem><para>If the announcement is about a new release of the
            software, then update your project's entry on
            <ulink url="http://freshmeat.net/"/> (see
            <xref linkend="announcing"/> about creating the entry
            in the first place).  Every time you update a Freshmeat
            entry, that entry goes onto the Freshmeat change list
            for the day.  The change list is updated not only on
            Freshmeat itself, but on various portal sites (including
            <ulink url="http://slashdot.org"/>) which are watched eagerly by
            hordes of people.  Freshmeat also offers the same data via
            RSS feed, so people who are not subscribed to your
            project's own RSS feed might still see the announcement
            via Freshmeat's.</para>
  </listitem>

  <listitem><para>Send a mail to your project's announcement mailing
            list.  This list's name should actually be "announce",
            that is, <literal>announce@yourprojectdomain.org</literal>,
            because that's a fairly standard convention now, and the
            list's charter should make it clear that it is very
            low-traffic, reserved for major project announcements.
            Most of those announcements will be about new releases of
            the software, but occasionally other events, such as a
            fundraising drive, the discovery of a security
            vulnerability (see
            <xref linkend="security"/>)<phrase output="printed">
            later in this chapter</phrase>, or a
            major shift in project direction may be posted there as
            well.  Because it is low traffic and used only for
            important things, the <literal>announce</literal> list
            typically has the highest subscribership of any mailing
            list in the project (of course, this means you shouldn't
            abuse it&mdash;consider carefully before posting).  To
            avoid random people making announcements, or worse, spam
            getting through, the <literal>announce</literal> list must
            always be moderated.</para>
  </listitem>

</orderedlist>

<para>Try to make the announcements in all these places at the same
time, as nearly as possible.  People might get confused if they see an
announcement on the mailing list but then don't see it reflected on
the project's home page or in its press releases area.  If you get the
various changes (emails, web page edits, etc.) queued up and
then send them all in a row, you can keep the window of inconsistency
very small.</para>

<para>For a less important event, you can eliminate some or all of the
above outlets.  The event will still be noticed by the outside world
in direct proportion to its importance.  For example, while a new
release of the software is a major event, merely setting the date of
the next release, while still somewhat newsworthy, is not nearly as
important as the release itself.  Setting a date is worth an email to
the daily mailing lists (not the announce list), and an update of the
project's timeline or status web page, but no more.</para>

<para>However, you might still see that date appearing in discussions
elsewhere on the Internet, wherever there are people interested in the
project.  People who are lurkers on your mailing lists, just listening
and never saying anything, are not necessarily silent elsewhere.  Word
of mouth gives very broad distribution; you should count on it, and
construct even minor announcements in such a way as to encourage
accurate informal transmission.  Specifically, posts that you expect
to be quoted should have a clearly meant-to-be-quoted portion, just as
though you were writing a formal press release.  For example:</para>

  <blockquote>
     <para><emphasis>Just a progress update: we're planning to release
     version 2.0 of Scanley in mid-August 2005.  You can always check
     http://www.scanley.org/status.html for updates.  The major new
     feature will be regular-expression searches.</emphasis></para>

     <para><emphasis>Other new features include:&nbsp;... There will
     also be various bugfixes, including:&nbsp;...</emphasis></para>
  </blockquote>

<para>The first paragraph is short, gives the two most important
pieces of information (the release date and the major new feature),
and a URL to visit for further news.  If that paragraph is the only
thing that crosses someone's screen, you're still doing pretty well.
The rest of the mail could be lost without affecting the gist of the
content.  Of course, sometimes people will link to the entire mail
anyway, but just as often, they'll quote only a small part.  Given that
the latter is a possibility, you might as well make it easy for them,
and in the bargain get some influence over what gets quoted.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="security">
<title>Announcing Security Vulnerabilities</title>

<para>Handling a security vulnerability is different from handling any
other kind of bug report.  In free software, doing things openly and
transparently is normally almost a religious credo.  Every step of the
standard bug-handling process is visible to all who care to watch: the
arrival of the initial report, the ensuing discussion, and the
eventual fix.</para>

<para>Security bugs are different.  They can compromise users' data,
and possibly users' entire computers.  To discuss such a problem
openly would be to advertise its existence to the entire
world&mdash;including to all the parties who might make malicious use
of the bug.  Even merely committing a fix effectively announces the
bug's existence (there are potential attackers who watch the commit
logs of public projects, systematically looking for changes that
indicate security problems in the pre-change code).  Most open source
projects have settled on approximately the same set of steps to handle
this conflict between openness and secrecy, based on the these basic
guidelines:</para>

<orderedlist>
  <listitem><para>Don't talk about the bug publicly until a fix is
            available; then supply the fix at exactly the same moment
            you announce the bug.</para> 
  </listitem>
  <listitem><para>Come up with that fix as fast as you
            can&mdash;especially if someone outside the project
            reported the bug, because then you know there's at least
            one person outside the project who is able to exploit the
            vulnerability.</para>
  </listitem>
</orderedlist>

<para>In practice, those principles lead to a fairly standardized
series of steps, which are described in the sections below.</para>

<sect3 id="security-receiving">
<title>Receive the report</title>

<para>Obviously, a project needs the ability to receive security bug
reports from anyone.  But the regular bug reporting address won't do,
because it can be watched by anyone too.  Therefore, have a separate
mailing list for receiving security bug reports.  That mailing list
must not have publicly readable archives, and its subscribership must
be strictly controlled&mdash;only long-time, trusted developers can be
on the list.  If you need a formal definition of "trusted", you can
use "anyone who has had commit access for two years or more" or
something like that, to avoid favoritism.  This is the group that will
handle security bugs.</para>

<para>Ideally, the security list should not be spam-protected or
moderated, since you don't want an important report to get filtered
out or delayed just because no moderators happened to be online that
weekend.  If you do use automated spam-protection software, try to
configure it with high-tolerance settings; it's better to let a few spams
through than to miss a report.  For the list to be effective, you must
advertise its address, of course; but given that it will be unmoderated
and, at most, lightly spam-protected, try to never to post its address
without some sort of address hiding transformation, as described in
<xref linkend="address-hiding"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.
Fortunately, address-hiding need not make the address illegible; see
<ulink url="http://subversion.tigris.org/security.html"/>, and view
that page's HTML source, for an example.</para>

</sect3>

<sect3 id="security-finding-a-fix">
<title>Develop the fix quietly</title>

<para>So what does the security list do when it receives a report?
The first task is to evaluate the problem's severity and
urgency:</para>

<orderedlist>
  <listitem><para>How serious is the vulnerability?  Does it allow a
            malicious attacker to take over the computer of someone
            who uses your software?  Or does it, say, merely leak
            information about the sizes of some of their files?</para>
  </listitem>

  <listitem><para>How easy is it to exploit the vulnerability?  Can
            an attack be scripted, or does it require circumstantial
            knowledge, educated guessing, and luck?</para>
  </listitem>

  <listitem><para><emphasis>Who</emphasis> reported the problem to
            you?  The answer to this question doesn't change the
            nature of the vulnerability, of course, but it does give
            you an idea of how many other people might know about it.
            If the report comes from one of the project's own
            developers, you can breathe a little easier (but only a
            little), because you can trust them not to have told
            anyone else about it.  On the other hand, if it came in an
            email from <literal>anonymous14@globalhackerz.net</literal>,
            then you'd better act as fast as you can.  The person did
            you a favor by informing you of the problem at all, but you
            have no idea how many other people she's told, or how long
            she'll wait before exploiting the vulnerability on live
            installations.</para>
  </listitem>
</orderedlist>

<para>Note that the difference we're talking about here is often just
a narrow range between <emphasis>urgent</emphasis>
and <emphasis>extremely&nbsp;urgent</emphasis>.  Even when the report
comes from a known, friendly source, there could be other people on
the Net who discovered the bug long ago and just haven't reported it.
The only time things aren't urgent is when the bug inherently does not
compromise security very severely.</para>

<para>The "<literal>anonymous14@globalhackerz.net</literal>" example
is not facetious, by the way.  You really may get bug reports from
identity-cloaked people who, by their words and behavior, never quite
clarify whether they're on your side or not.  It doesn't matter: if
they've reported the security hole to you, they'll feel they've done
you a good turn, and you should respond in kind.  Thank them for the
report, give them a date on or before which you plan to release a
public fix, and keep them in the loop.  Sometimes they may
give <emphasis>you</emphasis> a date&mdash;that is, an implicit threat
to publicize the bug on a certain date, whether you're ready or not.
This may feel like a bullying power play, but it's more likely a
pre&euml;mptive action resulting from past disappointment with
unresponsive software producers who didn't take security reports
seriously enough.  Either way, you can't afford to tick this person
off.  After all, if the bug is severe, he has knowledge that could
cause your users big problems.  Treat such reporters well, and hope
that they treat you well.</para>

<para>Another frequent reporter of security bugs is the security
professional, someone who audits code for a living and keeps up on the
latest news of software vulnerabilities.  These people usually have
experience on both sides of the fence&mdash;they've both received and
sent reports, probably more than most developers in your project have.
They too will usually give a deadline for fixing a vulnerability
before going public.  The deadline may be somewhat negotiable, but
that's up to the reporter; deadlines have become recognized among
security professionals as pretty much the only reliable way to get
organizations to address security problems promptly.  So don't treat
the deadline as rude; it's a time-honored tradition, and there are
good reasons for it.</para>

<para>Once you know the severity and urgency, you can start working on
a fix.  There is sometimes a tradeoff between doing a fix elegantly
and doing it speedily; this is why you must agree on the urgency
before you start.  Keep discussion of the fix restricted to the
security list members, of course, plus the original reporter (if she
wants to be involved) and any developers who need to be brought in for
technical reasons.</para>

<para>Do not commit the fix to the repository.  Keep it in patch form
until the go-public date.  If you were to commit it, even with an
innocent-looking log message, someone might notice and understand the
change.  You never know who is watching your repository and why they
might be interested.  Turning off commit emails wouldn't help; first
of all, the gap in the commit mail sequence would itself look
suspicious, and anyway, the data would still be in the repository.
Just do all development in a patch and keep the patch in some private
place, perhaps a separate, private repository known only to the people
already aware of the bug.  (If you use a decentralized version control
system like Arch or SVK, you can do the work under full version
control, and just keep that repository inaccessible to
outsiders.)</para>

</sect3>

<sect3 id="security-cve">
<title>CAN/CVE numbers</title>

<para>You may have seen a <firstterm>CAN number</firstterm> or
a <firstterm>CVE number</firstterm> associated with security problems.
These numbers usually look like "CAN-2004-0397" or
"CVE-2002-0092", for example.</para>

<para>Both kinds of numbers represent the same type of entity: an
entry in the list of "Common Vulnerabilities and Exposures" list
maintained at <ulink url="http://cve.mitre.org/"/>.  The purpose of
the list is to provide standardized names for all known security
problems, so that everyone has a unique, canonical name to use when
discussing one, and a central place to go to find out more
information.  The only difference between a "CAN" number and a "CVE"
number is that the former represents a candidate entry, not yet
approved for inclusion in the official list by the CVE Editorial
Board, and the latter represents an approved entry.  However, both
types of entries are visible to the public, and an entry's number does
not change when it is approved&mdash;the "CAN" prefix is simply
replaced with "CVE".</para>

<para>A CAN/CVE entry does not itself contain a full description of
the bug and how to protect against it.  Instead, it contains a brief
summary, and a list of references to external resources (such as
mailing list archives) where people can go to get more detailed
information.  The real purpose of <ulink url="http://cve.mitre.org/"/>
is to provide a well-organized space in which every vulnerability can
have a name and a clear route to more data.  See
<ulink url="http://cve.mitre.org/cgi-bin/cvename.cgi?name=2002-0092"/>
for an example of an entry.  Note that the references can be very
terse, with sources appearing as cryptic abbreviations.  A key to
those abbreviations is at
<ulink url="http://cve.mitre.org/cve/refs/refkey.html"/>.</para>

<para>If your vulnerability meets the CVE criteria, you may wish to
acquire it a CAN number.  The process for doing so is deliberately
gated: basically, you have to know someone, or know someone who knows
someone.  This is not as crazy as it might sound.  In order for the
CVE Editorial Board to avoid being overwhelmed with spurious or
poorly written submissions, they take submissions only from sources
they already know and trust.  In order to get your vulnerability
listed, therefore, you need to find a path of acquaintance from your
project to the CVE Editorial Board.  Ask around among your developers;
one of them will probably know someone else who has either done the
CAN process before, or knows someone who has, etc.  The advantage of
doing it this way is also that somewhere along the chain, someone may
know enough to tell you that a) it wouldn't count as a vulnerability
or exposure according to MITRE's criteria, so there is no point
submitting it, or b) the vulnerability already
<emphasis>has</emphasis> a CAN or CVE number.  The latter can happen
if the bug has already been published on another security advisory
list, for example at <ulink url="http://www.cert.org/"/> or on the
BugTraq mailing list at <ulink url="http://www.securityfocus.com/"/>.
(If that happened without your project hearing about it, then you
should worry what else might be going on that you don't know
about.)</para>

<para>If you get a CAN/CVE number at all, you usually want to get it
in the early stages of your bug investigation, so that all further
communications can refer to that number.  CAN entries are embargoed
until the go-public date; the entry will exist as an empty placeholder
(so you don't lose the name), but it won't reveal any information
about the vulnerability until the date on which you will be announcing
the bug and the fix.</para>

<para>More information about the CAN/CVE process may be found at
<ulink url="http://cve.mitre.org/about/candidates.html"/>, and a
particularly clear exposition of one open source project's use of
CAN/CVE numbers is at
<ulink
url="http://www.debian.org/security/cve-compatibility"/>.</para>

</sect3>

<sect3 id="security-prenotification">
<title>Pre-notification</title>

<para>Once your security response team (that is, those developers who
are on the security mailing list, or who have been brought in to deal
with a particular report) has a fix ready, you need to decide how to
distribute it.</para>

<para>If you simply commit the fix to your repository, or otherwise
announce it to the world, you effectively force everyone using your
software to upgrade immediately or risk being hacked.  It is sometimes
appropriate, therefore, to do <firstterm>pre-notification</firstterm>
for certain important users.  This is particularly true with
client/server software, where there may be well-known servers that are
tempting targets for attackers.  Those servers' administrators would
appreciate having an extra day or two to do the upgrade, so that they
are already protected by the time the exploit becomes public
knowledge.</para>

<para>Pre-notification simply means sending mails to those
administrators before the go-public date, telling them of the
vulnerability and how to fix it.  You should send pre-notification
only to people you trust to be discreet with the information.  That
is, the qualification for receiving pre-notification is twofold: the
recipient must run a large, important server where a compromise would
be a serious matter, <emphasis>and</emphasis> the recipient must be
known to be someone who won't blab about the security problem before
the go-public date.</para>

<para>Send each pre-notification mail individually (one at a time) to
each recipient.  Do <emphasis>not</emphasis> send to the entire list
of recipients at once, because then they would see each others'
names&mdash;meaning that you would essentially be alerting each
recipient to the fact that each <emphasis>other</emphasis> recipient
may have a security hole in her server.  Sending it to them all via
blind CC (BCC) isn't a good solution either, because some admins
protect their inboxes with spam filters that either block or reduce
the priority of BCC'd mail, since so much spam is sent via BCC these
days.</para>

<para>Here's a sample pre-notification mail:</para>

<screen>
From: Your Name Here
To: admin@large-famous-server.com
Reply-to: Your Name Here (not the security list's address)
Subject: Confidential Scanley vulnerability notification.


This email is a confidential pre-notification of a security alert
in the Scanley server.

Please *do not forward* any part of this mail to anyone.  The public
announcement is not until May 19th, and we'd like to keep the
information embargoed until then.

You are receiving this mail because (we think) you run a Scanley
server, and would want to have it patched before this security hole is
made public on May 19th.

References:
===========

   CAN-2004-1771: Scanley stack overflow in queries

Vulnerability:
==============

   The server can be made to run arbitrary commands if the server's
   locale is misconfigured and the client sends a malformed query.

Severity:
=========

   Very severe, can involve arbitrary code execution on the server.

Workarounds:
============

   Setting the 'natural-language-processing' option to 'off' in
   scanley.conf closes this vulnerability.

Patch:
======

   The patch below applies to Scanley 3.0, 3.1, and 3.2.

   A new public release (Scanley 3.2.1) will be made on or just before
   May 19th, so that it is available at the same time as this
   vulnerability is made public.  You can patch now, or just wait for
   the public release.  The only difference between 3.2 and 3.2.1 will
   be this patch.

[...patch goes here...]
</screen>

<para>If you have a CAN number, include it in the pre-notification (as
shown above), even though the information is still embargoed and
therefore the MITRE page will show nothing.  Including the CAN number
allows the recipient to know with certainty that the bug they were
pre-notified about is the same one they later hear about through
public channels, so they don't have to worry whether further action is
necessary or not, which is precisely the point of CAN/CVE
numbers.</para>

</sect3>

<sect3 id="security-announcing">
<title>Distribute the fix publicly</title>

<para>The last step in handling a security bug is to distribute the
fix publicly.  In a single, comprehensive announcement, you should
describe the problem, give the CAN/CVE number if any, describe how to
work around it, and how to permanently fix it.  Usually "fix" means
upgrading to a new version of the software, though sometimes it can
mean applying a patch, particularly if the software is normally run in
source form anyway.  If you do make a new release, it should differ
from some existing release by exactly the security patch.  That way,
conservative admins can upgrade without worrying about what else they
might be affecting; they also don't have to worry about future upgrades,
because the security fix will be in all future releases as a matter of
course.  (Details of release procedures are discussed in
<xref linkend="security-releases"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>.)</para>

<para>Whether or not the public fix involves a new release, do the
announcement with roughly the same priority as you would a new
release: send a mail to the project's <literal>announce</literal>
list, make a new press release, update the Freshmeat entry, etc.
While you should never try to play down the existence of a security
bug out of concern for the project's reputation, you may certainly set
the tone and prominence of a security announcement to match the actual
severity of the problem.  If the security hole is just a minor
information exposure, not an exploit that allows the user's entire
computer to be taken over, then it may not warrant a lot of fuss.  You
may even decide not to distract the <literal>announce</literal> list
with it.  After all, if the project cries wolf every time, users might
end up thinking the software is less secure than it actually is, and
also might not believe you when you have a really big problem to
announce.  See
<ulink url="http://cve.mitre.org/about/terminology.html"/> for a good
introduction to the problem of judging severity.</para>

<para>In general, if you're unsure how to treat a security problem,
find someone with experience and talk to them about it.  Assessing and
handling vulnerabilities is very much an acquired skill, and it's easy
to make missteps the first few times.</para>

</sect3>

</sect2>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
