* An outline, about 50 to 100 lines long

   Title: 

                     The Free Software Way: 
                How to Manage Open Source Projects

   Contents:

   0. Introduction                                    [ 5-7 pp ]
        History - Background - Terminology.

        Then: What to expect and not expect from open source process.
        Explain how there is no "magic pixie dust": an open license
        does not guarantee hordes of active developers suddenly
        volunteering their time, nor does open-sourcing a troubled
        project automatically cure its ills, etc.

   1. Getting Started                                 [ 8-15 pp ]

        How much initial design to do, how strictly to define the
        projects' goals.  How and where to announce.  How to make a
        project appear developer-friendly from the very beginning;
        understanding potential volunteers' motivations.  Choosing a
        language; avoiding language holy wars.

   2. Licenses and copyrights.                        [ 7-10 pp ]

        The different DFSG-compliant licenses and what they mean.
        What DFSG-compliance means :-).  Basic legal primer: the
        difference between holding a copyright and having distribution
        rights; and between open copyright and public domain.
        Avoiding licensing holy wars.

   3. Technical Infrastructure.                       [ 10-20 pp ]

        What kind of infrastructure to provide: a project web site, a
        source code repository, mailing lists, bug tracking, IRC
        channels, etc.

        Describe various sites that provide these services for free,
        such as SourceForge, Savannah, freenode, etc.  Evaluate
        pros/cons of each, against the possibility of a roll-your-own
        solution.

   4. Social and Political Infrastructure.            [ 15-25 pp ]

        What are the precise mechanisms by which meritocracies
        organize themselves?  When does a project need a written
        constitution, what properties should such a document have?

        Consensus vs voting: the importance of having a voting system,
        but also, the importance of rarely using it.

   6. Communications.                                 [ 20-30 pp ]

        Distinguishing productive threads from unproductive ones.
        Guiding threads toward usefulness without being pushy.

        Dealing with difficult/rude participants on an open mailing
        list; avoiding being difficult or rude oneself.  When to
        operate in the open, when to operate behind the scenes.

        Internal vs external communications: In open source projects,
        there tends to be a smooth continuum between purely internal
        discussions and public relations statements.  Discuss how to
        tie the two together so that the "press releases" aren't
        overwhelmed with confusing detail, yet still reflect the state
        of the project accurately.  Describe how to hook into the
        standard real-time news distribution forums (RSS, CIA, etc),
        and the meta-distribution sites such as Freshmeat.

   7. Daily development, packaging, and releasing.    [ 15-25 pp ]

        How the normal development cycle works.  How to tie it in with
        the revision control system and the bug tracker, so that they
        become integral parts of the distributed development cycle.
        How to decide whether to formalize regression test requirements.

        Stabilizing active development in preparation for release
        (i.e., avoiding the last minute feature rush).  Organizing
        testing for candidate releases, absorbing feedback, and making
        sure the process terminates in a finite amount of time.

        Whether and how to maintain multiple release lines.

   8. Distributed labor.                              [ 15-25 pp ]

        When to do something yourself, when to step aside and let
        someone else do it.  Harnessing volunteers to distribute the
        management burden as well as the technical burden:

           - patch management
           - bug management
           - release management
           - documentation and FAQ maintenance
           - distributing meta-management tasks

        When and how to ask someone to step aside from a role for
        which they're not suited.

   9. Credit.                                         [ 5-7 pp ]

        The importance of openly giving credit; also, how to allocate
        it without starting a credit war.  How make sure credit
        preservation is encouraged by the technical infrastructure.

  10. Reconcilable and irreconcilable differences.    [ 15-20 pp ]

        Arguments happen.  Politics are inevitable.  How to deal with
        this, especially in communities where people like to think
        that they're above politics, or that if everyone would just
        look at the technical issues "they'd see that I'm right!".

        How to recognize when a fork is inevitable, how to prevent one
        if it isn't.  How to handle forks both amicable and hostile.

        Case study #1: The GDB maintainership structure debate.
        Case study #2: FSF Emacs / XEmacs fork (?maybe?)

  11. The Consent Of The Governed.                    [ 5-8 pp ]

        What leadership means when you have no control over people
        you've never met :-).  A summary of what techniques work in
        this environment and which don't, and a list of the principles
        by which one's actions should appear to be governed.  (The
        phrasing is deliberate, apologies to Niccolo Machiavelli.)

  12. Money.                                          [ 10-12 pp ]

        If funded by a corporation or a consortium, how to balance the
        funder's interests with the volunteers' interests -- they may
        be very different! -- without either side becoming disgruntled.

        Case studies: CVS, Subversion.


* An estimated page count and date when you'll go to tech review

  According to the estimates above, the book would be somewhere
  between 130 and 204 pages (average is 167).  The last time I made a
  page estimate for a book, I guessed around 200-250, and it ended up
  being 300 when published.  So here, I *suspect* the 204 page figure
  is closer to the mark, but as it's all guesswork at this stage, I
  haven't bothered to tweak the chapter counts above to make the
  average come out to 200.

* Bio

  In 1995, Jim Blandy and I co-founded Cyclic Software, a company
  offering commercial CVS support.  With the blessing of the previous
  maintainers, we then became the official maintainers of the public
  CVS code, including the first public releases of network-enabled
  CVS.  In 1999 I wrote "Open Source Development With CVS" (published
  by Coriolis), which is now in its third edition (through Paraglyph
  Press).

  Since early 2000, I've been working at CollabNet, Inc on the
  Subversion project, a successor to CVS.  Subversion was an open
  source project since day one, and we've thought carefully not just
  about its technical aspects, but about how to run it socially, to
  maximize volunteer involvement.  Subversion currently has about 60
  developers with commit access, only a few of whom are employed by
  CollabNet.

  I also maintain several packages in the GNU Emacs distribution, and
  have participated in many other open source projects as a patch
  contributor.

###
  I've actually wanted to write this for a while, but only after
  seeing the Subversion project through to this point did I feel I had
  the requisite experience.  I've participated in many other free
  software projects, of course, of all sizes (CVS, GNU-Emacs, various
  smaller ones), so my point of view won't be based solely on
  Subversion.  And although Subversion counts as a successful project,
  it's equally important to analyze failed & struggling ones, to tease
  out some of the patterns they have in common.  I know plenty of
  examples in that department too, both directly and secondhand.


* An explanation of the market--how many people you think
  are an appropriate audience

  It might seem there's a lot of overlap here with the book I wrote
  for Coriolis in 1999, "Open Source Development with CVS".  But it's
  not really so much, for two reasons.  First, the bulk of that book
  was about CVS, and how to use CVS to support an open source project.
  Second, frankly, a lot of what I wrote then seems a bit naive today.
  I have a lot more experience now, and I think we can produce a book
  that will be snapped up not just by developers, but by managers at
  some of the large corporations that are beginning to embrace open
  source as a methodology (IBM, Sun, HP, for example).
