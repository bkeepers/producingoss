* An outline, about 50 to 100 lines long

  "The Free Software Way: How to Manage an Open Source Project."

   Introduction:
       History - Background - Terminology.

       What to expect from an open source project, what not to expect.

       (Explain how there is no "magic pixie dust": an open license
       does not guarantee hordes of active developers suddenly
       volunteering their time, open-sourcing a troubled project does
       not automatically cure its ills, etc.)

   1. Getting Started.  
        How much initial design to do, how strictly to define the
        projects' goals.  How to announce, where to announce.  How to
        make a project appear developer-friendly from the very
        beginning; understanding potential volunteers' motivations.

   2. Licenses and copyrights: the different DFSG-compliant licenses
        and what they mean.  What DFSG-compliance means :-).  Basic
        legal primer: the difference between holding a copyright and
        holding exclusive redistribution rights.

   3. Technical Infrastructure.

        What kind of infrastructure to provide: a project web site
        with some form of user management, a source code repository,
        mailing lists, bug tracking, IRC channels, etc.

        Subtopic: various sites that provide these services for free,
        such as SourceForge, Savannah, freenode, etc.  RSS, CIA, etc.

   4. Social and Political Infrastructure.

        When does a project need a written constitution, and what
        properties should one have?

   5. Consensus vs voting: the importance of having a voting system,
      but also, the importance of rarely using it.

   6. How to behave / not behave on a mailing list.

   7. Harnessing volunteers to distribute the management burden as
      well as the technical burden (i.e, patch management, issue
      management, release management, etc)

   8. The importance of credit; also, how to allocate credit without
      starting a credit war.

   9. How to handle a fork, either amicable or hostile.

  10. The Consent Of The Governed: what leadership means when you have
      no control over people you've never met :-).

  11. Money: If funded by a corporation or a consortium, how to balance
      the funder's interests with the volunteers' interests; they
      may be very different.

* Your bio

  I've actually wanted to write this for a while, but only after
  seeing the Subversion project through to this point did I feel I had
  the requisite experience.  I've participated in many other free
  software projects, of course, of all sizes (CVS, GNU-Emacs, various
  smaller ones), so my point of view won't be based solely on
  Subversion.  And although Subversion counts as a successful project,
  it's equally important to analyze failed & struggling ones, to tease
  out some of the patterns they have in common.  I know plenty of
  examples in that department too, both directly and secondhand.

* An estimated page count and date when you'll go to tech review

   ???

* An explanation of the market--how many people you think
  are an appropriate audience

  It might seem there's a lot of overlap here with the book I wrote
  for Coriolis in 1999, "Open Source Development with CVS".  But it's
  not really so much, for two reasons.  First, the bulk of that book
  was about CVS, and how to use CVS to support an open source project.
  Second, frankly, a lot of what I wrote then seems a bit naive today.
  I have a lot more experience now, and I think we can produce a book
  that will be snapped up not just by developers, but by managers at
  some of the large corporations that are beginning to embrace open
  source as a methodology (IBM, Sun, HP, for example).
