<chapter id="pfs-ch-6">

<title>Communications</title>

<simplesect>

<para>The ability to communicate clearly in written form is perhaps
the most important skill one can have in an open source environment.
In the long run it matters more than programming talent.  A great
programmer with lousy communications skills can only get one thing
done at a time, and even then may have trouble convincing others to
pay attention.  But a lousy programmer with good communications skills
can coordinate and persuade many people to do many different things,
and thereby have a significant effect on a project's direction and
momentum.</para>

<para>There does not seem to be much correlation, in either direction,
between the ability to write good code and the ability to communicate
with one's fellow human beings.  There is some correlation between
programming well and describing technical issues well, but describing
technical issues is only a tiny part of the communications in a
project.  Much more important is the ability to empathize with one's
audience, to see one's own posts and comments as others see them, and
to cause others to do the same.  Equally important is noticing when a
given medium or communications method is no longer working well
(perhaps because it doesn't scale as the number of users increases),
and taking the time to do something about it.</para>

<para>All of which is obvious in theory&mdash;what makes it hard in
practice is that free software development environments are
bewilderingly diverse both in audiences and in communications
mechanisms.  Should a given thought be expressed in a post to the
mailing list, or as an annotation in the bug tracker, or as a comment
in the code?  When answering a question in a public forum, how much
knowledge can you assume on the part of the reader, given that "the
reader" is not only the one who asked the question in the first place,
but all those who might see your response?  How can the developers
stay in constructive contact with the users, without getting swamped
by feature requests, spurious bug reports, and general chatter?  How
do you tell when a medium has reached the limits of its capacity, and
what do you do about it?</para>

<para>Solutions to these problems are usually partial, because any
particular solution is eventually made obsolete by project growth or
changes in project structure.  They are also often <foreignphrase>ad
hoc</foreignphrase>, because they're improvised responses to dynamic
situations.  All participants need to be aware of when and how
communications can become bogged down, and to be involved in
solutions.  Helping people do this is a big part of managing an open
source project.  The sections that follow discuss both how to conduct
your own communications, and how to make maintenance of communications
mechanisms a priority for everyone in the project<footnote><para>There
has been some interesting academic research on this topic, for example
see <citetitle>Group Awareness in Distributed Software
Development</citetitle> by Gutwin, Penner, and Schneider, at <ulink
url="http://hci.usask.ca/publications/2004/awareness-cscw04/"
/>.</para></footnote>.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-you-are-what-you-write">
<title>You Are What You Write</title>

<para>Consider this: the only thing anyone knows about you on the
Internet comes from what you write, or what others write about you.
You may be brilliant, perceptive, and charismatic in person&mdash;but
if your emails are rambling and unstructured, then people will assume
that's that's the real you.  Or perhaps you really are rambling and
unstructured in person, but no one need ever know it, if your posts
are lucid and informative.</para>

<para>Devoting some care to your writing will pay off hugely.
Long-time free software hacker Jim Blandy tells the following
story:</para>

  <blockquote>
     <para><remark>(Have asked Jim to supply the story in his own
     words, which I will offset in this blockquote.)</remark></para>
  </blockquote>

<para>Here are some things you can do to ensure your written persona
gives a good impression.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-structure-and-formatting">
<title>Structure and Formatting</title>

<para>Don't fall into the trap of writing everything as though it were
a cellphone text message.  Write in complete sentences, capitalizing
the first word of each sentence, and use paragraph breaks where
needed.  This is most important in emails and other composed
writings&mdash;in IRC or similarly ephemeral forums, it's generally
okay to leave out capitalization, use compressed forms of common
expressions, etc.  Just don't carry those habits over into the
composed world.  Emails, documentation, bug reports, and other pieces
of writing that are intended to have a permanent life should be
written using standard grammar and spelling, and have a coherent
narrative structure.  This is not because there's something inherently
good about following arbitrary rules, but rather that these rules are
<emphasis>not</emphasis> arbitrary: they evolved into their present
forms for sound reasons, and adhering to them will make your posts
more readable.  That's desirable not only because it means more people
will understand your words, but because it makes you look like the
sort of person who takes the time to communicate clearly: that is,
someone worth paying attention to.</para>

<para>For email in particular, experienced open source developers have
settled on certain conventions:</para>

<para>Send plain text mails only, not HTML, RichText, or other formats
that might be opaque to text-only mailreaders.  Format your lines to
be around 72 columns long.  Don't exceed 80 columns, which has become
the <foreignphrase>de facto</foreignphrase> standard maximum terminal
width (that is, some people may use wider terminals, but no one uses a
narrower one).  And by making your lines a little
<emphasis>less</emphasis> than 80 columns, you leave room for a few
levels of quoting characters to be added in others' replies without
forcing a rewrapping of your text.  Note that some mailers do a kind
of fake line-wrapping, whereby when you're writing your mail, the
display shows line breaks that aren't actually there.  When the mail
goes out, it may not have the line breaks you thought it had.  If your
mailer does this, look for a setting you can tweak to make it show
true line breaks as you compose.</para>

<para>When including screen output, snippets of code, etc, offset them
clearly from the rest of your text, so that even a lazy eye can easily
see the boundaries between your prose and the material you're quoting.
(I never expected to write that advice when I started this book, but
on a number of open source mailing lists lately I've seen people mix
texts from different sources without making it clear which is which.
The effect is very frustrating.  It makes their posts significantly
harder to understand, and frankly makes those people look a little bit
disorganized.)</para>

<para>When quoting someone else's mail, insert your responses where
they're most appropriate, at several different places if necessary,
and trim off the parts of their mail you didn't use.  If you're
writing a quick comment that applies to their entire post, it's okay
to <firstterm>top-post</firstterm> (that is, to put your response
above the quoted text of their mail), but otherwise, you should quote
the relevant portion of the original text first, followed by your
response.</para>

<para>Construct the subject lines of new mails carefully.  It's the
most important line in your mail, because it allows each other person
in the project to decide whether or not to read more.  Modern
mailreading software organizes groups of related messages into
threads, which can be defined not only by a common subject, but by
various other headers (headers which are sometimes not displayed).  It
follows that if a thread starts to drift to a new topic, you can
change&mdash;and should&mdash;adjust the subject line accordingly when
replying.  The thread's integrity will be preserved, due to those
other headers, but the new subject will help people looking at an
overview of the thread know that the topic has drifted.  Likewise, if
you really want to start a new topic, do it by posting fresh, not by
replying to an existing mail and just changing the subject.  Your mail
would still be grouped in to the same thread as what you're replying
to, and thus fool people into thinking it's about something it's not.
Again, the penalty would not only be the waste of their time, but the
slight dent in your credibility as someone fluent in using
communications tools.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-writing-content">
<title>Content</title>

<para>Well-formatted mails attract readers, but the content keeps
them.</para>

<para>First, make things easy.  There's usually a ton of information
floating around in an open source project, and readers cannot be
expected to be familiar with most of it&mdash;indeed, they cannot
always be expected to know how to <emphasis>become</emphasis>
familiar.  Your posts should lead by example, providing information

</para>

<screen>
  (... working here ...)

* Good prose.

* Make it easy for people -- do more work so your readers won't have
  to.  There are N of them and only 1 of you, after all.

* Understand context.

* Empathy: divining people's moods from what they write (or knowing
  when to privchat for more)

* The meta-mandate: persuading others to communicate well.  Because
  (see the next two paragraphs)...

* Make it easy for people (that is, include references, even when it
  costs you more time to do so, because it's a form of cultural training)

* Don't engage in hyperbole.

* ...refer to Ben's Notes now?

</screen>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-writing-tone">
<title>Tone</title>

* Terse is good, but always sign off with an emoticlue ("Good luck,",
  etc), so people understand that terse means simply terse and nothing
  more.  (See 'thoughts' for example.)  Give an example from #svn
  whereby someone asks a long complex torturous question about their
  repository perms, and the response is simply a URL.

<screen>
* What is rude / not rude in the free software world?
    - technical criticism is a form of flattery
    - unadorned questions are less often rhetorical or mocking
    - accusing someone of a certain "tone" without concrete examples
    - not taking time to *provide* concrete examples, and not
      acknowledging that one has not taken the time.  None of this
      means that you must do these things every time; rather, it
      means you must recognize when you don't that you have fallen on
      one side of a cultural norm, and this must be acknowledged
      and/or accounted for in some way.

* Shane's response to my slashcode-general post is a *perfect* example
  of what sounds like coldness, but is actually an unadorned offer to
  help.  It's in examples.mbox.

* humor?  yes, but watch out...
</screen>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-common-pitfalls">
<title>Avoiding Common Pitfalls</title>

<para> Avoiding common pitfalls; distinguishing productive threads
from unproductive ones; guiding threads toward usefulness without
being pushy.  </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-difficult-people">
<title>Difficult People</title>

<para> Dealing with difficult/rude participants on mailing lists.
Also, dealing with people who misuse or abuse procedural forms (such
as vetos, voting, filibustering, etc, which sadly
<emphasis>has</emphasis> been known to happen from time to time).  Ask
J about his experiences with you-know-who in this regard.</para>

<para><remark>Some truly insidious people look for wedgepoints in the
procedures.  For example, in a debate that won't consense, the group
will try to at least clarify the points of disagreement, so that a
reasonable ballot can be made up for voting.  The obstructionist who
knows the vote could go against him will try to delay it, by
constantly complexifying the questino of what should be on the ballot
in the first place (usually by objecting to reasonable suggestions or
by introducing unexpected new items to the ballot).  Strategy:
tolerate this for a while.  Then start keeping notes.  Then gather
allies privately.  Then raise the issue publicly, using the notes as
evidence... Unfortunately, there is a great danger of looking bad
yourself when you try to combat this, so you may need to engage in a
whispering campaign first.  Of course, it can't
<emphasis>look</emphasis> like a whispering campaign, it has to look
like innocent inquiry.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-codifying-tradition">
<title>Codifying Tradition</title>

<para><remark>See <ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate
concern.  Log message templates.  Make sure that commit reviews apply
to log messages and other "meta" aspects of the commit as well as to
the code itself.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-growth">
<title>Handling Growth</title>

<para><remark>Dividing into multiple forums.  Key is to make sure the
purpose of each forum is clear, consciously steer people (e.g.,
mailing list crossposts, irc channel redirects) to the right place,
make sure there is no psychological balkanization (lurkers are always
allowed, etc).  Link to guidelines; then, instead of shouting at
people, calmly point them to the guidelines.</remark></para>

<para><remark>The part below was originally in the IRC section in
Chapter 3, but really belongs here.  Open questions: should it be a
separate subsection?  Should it combine mailing lists and IRC, or just
focus on IRC?</remark></para>

<para>As a project gets more popular, it is inevitable that more and
more inexperienced people will show up in the IRC channels.  Although
this is desirable and a sign of success, it will naturally have
destabilizing effects at first.  Longtime channel users will begin to
feel overwhelmed, as the old strategy of individually training each
newcomer in channel conventions fails to scale to the new population
size.  There will be more of a tendency for conversations to drift off
topic and become "noise" as far as the channel's purpose is concerned.
Experienced users may react by venting their frustration, often at
people who had no idea they were doing anything wrong.</para>

<para><remark>Here's how a really busy channel handles it.  Compare
this with the earlier topic example given in Chapter 3:</remark></para>

<screen>
   You are now talking on #linuxhelp
   
   Topic for #linuxhelp is Please READ
   http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
   http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
   rules are at http://www.nerdfest.org/lh_rules.html | Please consult
   http://kerneltrap.org/node/view/799 before asking about upgrading to a
   2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc ->
   update to 2.6.8.1 or 2.4.27 | hash algo disaster:
   http://tinyurl.com/6w8rf | reiser4 out
</screen>

<para><remark>(Also, note how on-topic enforcement should be much
looser in IRC, because it is really a social medium.  Don't ask people
to go out-of-band unless they're actually interfering with stuff, and
even then make it clear that the request is only temporary, and that
when the channel's less busy it won't matter so much.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-using-archives">
<title>Conspicuous Use of Archives</title>

<!-- <remark>get Brian B's story of the FreeBSD IRC archives
     here?</remark> -->

<para>Typically, all communications in an open source project (with
the exception of chat room conversations) are archived.  The archives
are public and searchable, and have referential stability: that is,
once a given piece of information is recorded at a particular address,
it stays at that address forever.</para>

<para>Use those archives as much as possible, and as conspicuously as
possible.  Even when you know the answer to some question off the top
of your head, if you think there's a reference in the archives that
contains the answer, spend the time to dig it up and present it.
Every time you do that in a publically visible way, some people learn
for the first time that the archives are there, and that searching in
them can produce answers.  Also, by referring to the archives instead
of rewriting the advice, you reinforce the social norm against
duplicating information.  Why have the same answer in two different
places?  When the number of places it can be found is kept to a
minimum, people who have found it before are more likely to remember
what to search for to find it again.</para>

<para>There are times when duplicating information makes sense,
however.  For example, suppose there's a response already in the
archives, not from you, saying:</para>

<screen>
   It appears that your Scanley indexes have become frobnicated.  To
   unfrobnicate them, run these steps:
   
   1. Shut down the Scanley server.
   2. Run the 'defrobnicate' program that ships with Scanley.
   3. Start up the server.
</screen>

<para>Then, months later, you see another post indicating that
someone's indexes have become frobnicated.  You search the archives
and come up with the old response above, but you realize it's missing
some steps (perhaps by mistake, or perhaps because the software has
changed since that post was written).  The classiest way to handle
this is to post a new, more complete set of instructions, and
explicitly obsolete the old post by mentioning it:</para>

<screen>
   It appears that your Scanley indexes have become frobnicated.  We
   saw this problem back in July, and J. Random posted a solution at
   http://blahblahblah/blah.  Below is a more complete description of
   how to unfrobnicate your indexes, based on J. Random's instructions
   but extending them a bit:

   1. Shut down the Scanley server.
   2. Become the user the Scanley server normally runs as.
   3. As that user, run the 'defrobnicate' program on the indexes.
   4. Run Scanley by hand to see if the indexes work now.
   5. Restart the server.
</screen>

<para>(In an ideal world, it would be possible to attach a note to the
<emphasis>old</emphasis> post, saying that there is newer information
available and pointing to the new post.  However, I don't know of any
archiving software that offers an "obsoleted by" feature, perhaps
because it would be mildly tricky to implement in a way that doesn't
violate the archives' integrity as a verbatim record.)</para>

<para>Archives are probably most often searched for answers to
technical questions, but their importance to the project goes well
beyond that.  If a project's formal guidelines are its statutory law,
the archives are its common law: a record of all decisions made and
how they were arrived at.  In any recurring discussion, it's pretty
much obligatory nowadays to start with an archive search.  This allows
you to begin the discussion with a summary of the current state of
things, anticipate objections, prepare rebuttals, and possibly
discover angles you hadn't thought of.  Also, the other participants
will <emphasis>expect</emphasis> you to have done an archive search.
Even if the previous discussions went nowhere, you should include
pointers to them when you re-raise the topic, so people can see for
themselves a) that they went nowhere, and b) that you did your
homework, and therefore are probably saying something now that has not
been said before.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-all-as-archives">
<title>Treat All Resources Like Archives</title>

<para>All of the preceding advice applies to more than just mailing
list archives.  Having particular pieces of information at stable,
conveniently findable addresses is an organizing principle for all of
the project's information.  Let's take the project FAQ as a case
study.</para>

<para>How do people use a FAQ?</para>

<orderedlist>
  <listitem>
    <para>They want to search in it for specific words and phrases.</para>
  </listitem>
  <listitem>
    <para>They want to browse it, soaking up information without
          necessarily looking for answers to specific questions.</para>
  </listitem>
  <listitem>
    <para>They expect search engines such as Google to know about the
          FAQ's content, so that searches can result in FAQ entries.</para>
  </listitem>
  <listitem>
    <para>They want to be able to refer other people directly to specific
          items in the FAQ.</para>
  </listitem>
  <listitem>
    <para>They want to be able to add new material to the FAQ, but
          note that this happens much less often than answers are
          looked up&mdash;FAQs are far more often read from than
          written to.</para>
  </listitem>
</orderedlist>

<para>Point 1 implies that the FAQ should be available in some sort of
textual format.  Points 2 and 3 imply that the FAQ should be available
as an HTML page, with point 2 additionally indicating that the HTML
should be designed for readability (i.e., you'll want some control
over its look and feel), and should have a table of contents.  Point 4
means that each individual entry in the FAQ should be assigned an HTML
<firstterm>named anchor</firstterm>, a tag that allows people to reach
a particular location on the page.  Point 5 means the source files for
the FAQ should be available in a convenient way (see <xref
linkend="pfs-version-everything"/>), in a format that's easy to edit.</para>

  <sidebar id="pfs-html-named-anchors-and-ids">
  <title>Named Anchors and ID Attributes</title>

  <para>There are two ways to get a browser to jump to a specific
  location within a web page: named anchors, and id attributes.</para>

  <para>A <firstterm>named anchor</firstterm> is just a normal HTML
  anchor element (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), but with
  a "name" attribute:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>More recent versions of HTML support a generic <firstterm>id
  attribute</firstterm>, which can be attached to any HTML element,
  not just to <literal>&lt;a&gt;</literal>.  For example:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Both named anchors and id attributes are used in the same
  way.  One appends a hash mark and the label to a URL, to cause the
  browser to jump straight to that spot in the page:</para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtually all browsers support named anchors; most modern
  browsers support the id attribute.  To play it safe, I would
  recommend using either named anchors alone, or named anchors
  <emphasis>and</emphasis> id attributes together (with the same label
  for both in a given pair, of course).  For reasons mysterious to me,
  doing named anchors as self-closing tags does not seem to work.  So
  even if there's no text inside the element, you should still write
  it in two-sided form:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...though normally there would be some text, such as the title
  of a section.</para>

  <para>Whether you use a named anchor or id attribute or both,
  remember that the label will not be visible to someone who browses
  to that location without using the label.  But such a person might
  want to discover the label for a particular location, so they can
  mail the URL for a FAQ answer to a friend, for example.  To help
  them do this, add a <firstterm>title attribute</firstterm> to the
  same element(s) where you added the "name" and/or "id" attribute,
  for example:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>When the mouse pointer is held over the text inside the
  title-attributed element, most browsers will pop up a tiny box
  showing the title.  I usually include the hash-mark, to remind the
  user that this is what they would put at the end of the URL to jump
  straight to this location next time.</para>

  </sidebar>

<para>Tuning the FAQ like this is just one example of how to make a
resource presentable.  The same properties&mdash;direct searchability,
availability to major Internet search engines, browseability,
referential stability, and (where applicable) editability&mdash;apply
to other web pages, the source code tree, the bug tracker, etc.  It
just happens that most mailing list archiving software long ago
recognized the importance of these properties, which is why mailing
lists tend to have this functionality natively, while other formats
may require some extra effort on the maintainer's part (<xref
linkend="pfs-ch-8"/> discusses how to spread that maintenance burden
across many volunteers).</para>

</sect2>

</sect1>

<sect1 id="pfs-bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para><remark>Note the danger of the bug tracker turning into a
discussion forum, when mailing lists should really be used.  Keep the
mathematical analogy in mind, though this may not be the best way to
describe it in words: the question is, is the discussion potentially
divergent or convergent?  If it's stuff like getting more technical
details from the original reporter, or pointing out a gotcha with a
proposed solution, then it's convergent.  If it's a philosophical
questioning of the bug's justification for being, or if the bug is one
specific case that reveals a much wider problem, then the discussion
might end up divergent, which means it should be on the development
mailing list, and the URL to the thread should be recorded in the bug
when the discussion dies down.  Note that those involved with the bug
may find this laborious, but this is a writer-responsible culture:
more important to make things easy for the tens or hundreds of people
who may read the bug than for the 3 or 5 people writing to
it.</remark></para>

<para><remark>How much to reproduce data in the tracker?  Link to the
mail thread, or cut-and-paste it, or summarize it with some pasting
but then link to thread for details?  The overriding concern should
be convenience of readers.  So, paste all you want, *and* link to the
thread.  Remember, the usual problem of data duplication does not
exist here, because archives are static data anyway.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-private-chatting">
<title>Open vs Private Interactions</title>

<para>When to operate overtly, when to operate behind the scenes.</para>

<para><remark>(Give the example of bouncing a review back to Mike (or
was it Ben?) to have them post it, so the exchange could be public,
even though we were sitting right next to each other.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-internal-vs-external">
<title>Internal vs External Communications</title>

<para> Internal vs external communications.  In free software
projects, there tends to be a smooth continuum between purely internal
discussions and public relations statements.  Discuss how to navigate
this continuum.  Describe how to hook into the standard real-time news
distribution forums (RSS, CIA, etc), and the meta-distribution sites
such as Freshmeat.  </para>

</sect1>


<!-- This used to be in Chapter 2.  It's not really about
     communications either, but where is a better place?  Should it
     be cut entirely? 

   Understanding potential volunteers' motivations will help you set
   things up to attract them.  You can't build the lamp until you know
   what frequencies of light the moths are attracted to.  Oh, wait,
   maybe that's not such a good metaphor...

   For example, talk about the sharp distinction between those who
   were interested in reaching 1.0 versus those who were interested in
   adding new features to Subversion.  (Philip, Ghudson, etc.)
-->

<para><remark>(Another example: inclusion of internal issue numbers in
scarab commits.  Though not strictly about money, it is about the
relationship between internal/profit-driven, and external/volunteer
development.)</remark></para>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-soft-topics">
<title>The Softer the Topic, the Longer the Debate</title>

<para><remark>The need for this section grows out of Andy's comment
in <xref linkend="pfs-consensus-democracy"/>: "I think consensus is
probably most likely to fail in non-technical issues: publicity,
organization, funding, support issues, etc."  Sort of.  It doesn't
necessarily fail more often, but it does require more patience.
People can participate in these arguments forever, because there are
no qualifications necessary for doing so, no clear way to decide
(even afterwards) if a decision was wrong, and because simply
outwaiting the opposition is sometimes a successful tactic.  Also,
the process of reaching consensus can be more damaging, because the
potential for ad hominem or other unfair attacks is higher in "soft"
issues.</remark></para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-bikesheds">
<title>Why Should I Care What Color the Bikeshed Is?</title>

<para><remark>Put the Poul-Henning Kamp bikeshed material here.  We've
got his permission to include it in the book; he'll probably want to
me clean up the few typos first.</remark></para>

<para><remark>The original is at <ulink
url="http://www.freebsd.org/cgi/getmsg.cgi?fetch=506636+517178+/usr/local/www/db/text/1999/freebsd-hackers/19991003.freebsd-hackers"/>.
Its enshrinement in the FreeBSD documentation is at <ulink
url="http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING"/>.</remark></para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-holy-wars">
<title>Avoid Holy Wars</title>

<para>A <firstterm>Holy War</firstterm> is a dispute, usually over a
relatively minor issue, which has no hope of being resolved on the
merits of the arguments, but where people feel passionate enough to
continue arguing anyway in the hope that their side will
prevail.</para>

<para>Once a holy war has started, it generally cannot be resolved to
everyone's satisfaction.  It does no good to point out, in the midst
of a holy war, that a holy war is going on.  Everyone knows that
already.  Unfortunately, a common feature of holy wars is disagreement
on the very question of <emphasis>whether</emphasis> the dispute is
resolveable by continued discussion.  Viewed from outside, it is clear
that neither side is changing the other's mind.  Viewed from inside,
the other side is being obtuse and not thinking clearly, but they
might come around if browbeaten enough.  Now, I am
<emphasis>not</emphasis> saying there's never a right side in a holy
war.  Sometimes there is&mdash;in the holy wars I've participated
in, it's always been my side, of course.  But it doesn't matter,
because there's no algorithm for convincingly demonstrating that one
side or the other is right.</para>

<para>A common, but unsatisfactory, way people try to resolve holy
wars is to say "We've already spent far more time and energy
discussing this than it's worth!  Can we please just drop it?"  There
are two problems with this.  First, that time and energy has already
been spent and can never be retrieved&mdash;the only question now
is, how much <emphasis>more</emphasis> effort remains?  If some people
feel that just a little more discussion will bring the issue to a
close, then it still makes sense (from their point of view) to
continue.</para>

<para>The other problem with asking for the matter to be dropped is
that this is often equivalent to allowing one side, the status quo, to
declare victory by inaction.  And in some cases, the status quo is
known to be unacceptable anyway: everyone agrees that some decision
must be made, some action taken.  Dropping the subject would be worse
for everyone than simply giving up the argument would be for anyone.
But since that dilemma applies to all equally, it's still possible to
end up arguing forever about what to do.</para>

<para>So how should you handle a holy war?</para>

<para>The first answer is, try to set things up so they don't happen.
This is not as hopeless as it sounds:</para>

<para><remark>(finish) This is done by anticipating standard holy
wars: languages, licences (<xref linkend="pfs-avoiding-license-wars"/>),
reply-to munging.  Regarding language holy wars: most important thing
is, choose a language that you and the the other initial developers
are comfortable with, and defend the language on *those* grounds,
*not* on the grounds that it's better than some other possible
language.  Never ever let the conversation degenerate into an academic
comparison of programming languages (this seems to happen especially
often when someone brings up Perl); that's one of many examples of a
death topic that should be stopped before it gets
started.</remark></para>

<para><remark>When a holy war can't be avoided, decide early how much
you care, and then be willing to publicly give up.  When you do so,
say that you're backing out because the holy war isn't worth it, but
don't be bitter and <emphasis>don't</emphasis> take the opportunity
for a last parting shot at the opposing side's arguments.  Giving up
is only effective when done gracefully.</remark></para>

<para>For more historical background on holy wars, see <ulink
url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, and the
paper by Danny Cohen that popularized the term, <ulink
url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
