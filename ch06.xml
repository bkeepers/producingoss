<chapter id="pfs-ch-6">

<title>Communications</title>

<simplesect>

<para>The ability to communicate clearly in written form is perhaps
the most important skill one can have in an open source environment.
In the long run it matters more than programming talent.  A great
programmer with lousy communications skills can only get one thing
done at a time, and even then may have trouble convincing others to
pay attention.  But a lousy programmer with good communications skills
can coordinate and persuade many people to do many different things,
and thereby have a significant effect on a project's direction and
momentum.</para>

<para>There does not seem to be much correlation, in either direction,
between the ability to write good code and the ability to communicate
with one's fellow human beings.  There is some correlation between
programming well and describing technical issues well, but describing
technical issues is only a tiny part of the communications in a
project.  Much more important is the ability to empathize with one's
audience, to see one's own posts and comments as others see them, and
to cause others to do the same.  Equally important is noticing when a
given medium or communications method is no longer working well
(perhaps because it doesn't scale as the number of users increases),
and taking the time to do something about it.</para>

<para>All of which is obvious in theory&mdash;what makes it hard in
practice is that free software development environments are
bewilderingly diverse both in audiences and in communications
mechanisms.  Should a given thought be expressed in a post to the
mailing list, or as an annotation in the bug tracker, or as a comment
in the code?  When answering a question in a public forum, how much
knowledge can you assume on the part of the reader, given that "the
reader" is not only the one who asked the question in the first place,
but all those who might see your response?  How can the developers
stay in constructive contact with the users, without getting swamped
by feature requests, spurious bug reports, and general chatter?  How
do you tell when a medium has reached the limits of its capacity, and
what do you do about it?</para>

<para>Solutions to these problems are usually partial, because any
particular solution is eventually made obsolete by project growth or
changes in project structure.  They are also often <foreignphrase>ad
hoc</foreignphrase>, because they're improvised responses to dynamic
situations.  All participants need to be aware of when and how
communications can become bogged down, and to be involved in
solutions.  Helping people do this is a big part of managing an open
source project.  The sections that follow discuss both how to conduct
your own communications, and how to make maintenance of communications
mechanisms a priority for everyone in the project<footnote><para>There
has been some interesting academic research on this topic, for example
see <citetitle>Group Awareness in Distributed Software
Development</citetitle> by Gutwin, Penner, and Schneider, at <ulink
url="http://hci.usask.ca/publications/2004/awareness-cscw04/"
/>.</para></footnote>.</para>

</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-you-are-what-you-write">
<title>You Are What You Write</title>

<para>Consider this: the only thing anyone knows about you on the
Internet comes from what you write, or what others write about you.
You may be brilliant, perceptive, and charismatic in person&mdash;but
if your emails are rambling and unstructured, then people will assume
that's that's the real you.  Or perhaps you really are rambling and
unstructured in person, but no one need ever know it, if your posts
are lucid and informative.</para>

<para>Devoting some care to your writing will pay off hugely.
Long-time free software hacker Jim Blandy tells the following
story:</para>

  <blockquote>
     <para><remark>(Have asked Jim to supply the story in his own
     words, which I will offset in this blockquote.)</remark></para>
  </blockquote>

<para>Here are some things you can do to ensure your written persona
gives a good impression.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-structure-and-formatting">
<title>Structure and Formatting</title>

<para>Don't fall into the trap of writing everything as though it were
a cellphone text message.  Write in complete sentences, capitalizing
the first word of each sentence, and use paragraph breaks where
needed.  This is most important in emails and other composed
writings&mdash;in IRC or similarly ephemeral forums, it's generally
okay to leave out capitalization, use compressed forms of common
expressions, etc.  Just don't carry those habits over into the
composed world.  Emails, documentation, bug reports, and other pieces
of writing that are intended to have a permanent life should be
written using standard grammar and spelling, and have a coherent
narrative structure.  This is not because there's anything inherently
good about following arbitrary rules, but rather that these rules are
<emphasis>not</emphasis> arbitrary: they evolved into their present
forms because they make text more readable, and you should adhere to
them for that reason.  Readability is desirable not only because it
means more people will understand what you write, but because it makes
you look like the sort of person who takes the time to communicate
clearly: that is, someone worth paying attention to.</para>

<para>For email in particular, experienced open source developers have
settled on certain conventions:</para>

<para>Send plain text mails only, not HTML, RichText, or other formats
that might be opaque to text-only mailreaders.  Format your lines to
be around 72 columns long.  Don't exceed 80 columns, which has become
the <foreignphrase>de facto</foreignphrase> standard maximum terminal
width (that is, some people may use wider terminals, but no one uses a
narrower one).  And by making your lines a little
<emphasis>less</emphasis> than 80 columns, you leave room for a few
levels of quoting characters to be added in others' replies without
forcing a rewrapping of your text.

<emphasis>Use real line breaks.</emphasis> Some mailers do a kind of
fake line-wrapping, whereby when you're composing an email, the
display shows line breaks that aren't actually there.  When the mail
goes out, it may not have the line breaks you thought it had, and it
will wrap awkwardly on some people's screens.  If your mailer might
use fake line breaks, look for a setting you can tweak to make it show
the true line breaks as you compose.</para>

<para>When including screen output, snippets of code, or other
preformatted text, offset it clearly, so that even a lazy eye can
easily see the boundaries between your prose and the material you're
quoting.  (I never expected to write that advice when I started this
book, but on a number of open source mailing lists lately I've seen
people mix texts from different sources without making it clear which
is which.  The effect is very frustrating.  It makes their posts
significantly harder to understand, and frankly makes those people
look a little bit disorganized.)</para>

<para>When quoting someone else's mail, insert your responses where
they're most appropriate, at several different places if necessary,
and trim off the parts of their mail you didn't use.  If you're
writing a quick comment that applies to their entire post, it's okay
to <firstterm>top-post</firstterm> (that is, to put your response
above the quoted text of their mail), but otherwise, you should quote
the relevant portion of the original text first, followed by your
response.</para>

<para>Construct the subject lines of new mails carefully.  It's the
most important line in your mail, because it allows each other person
in the project to decide whether or not to read more.  Modern
mailreading software organizes groups of related messages into
threads, which can be defined not only by a common subject, but by
various other headers (which are sometimes not displayed).  It follows
that if a thread starts to drift to a new topic, you can&mdash;and
should&mdash;adjust the subject line accordingly when replying.  The
thread's integrity will be preserved, due to those other headers, but
the new subject will help people looking at an overview of the thread
know that the topic has drifted.  Likewise, if you really want to
start a new topic, do it by posting fresh, not by replying to an
existing mail and just changing the subject.  Your mail would still be
grouped in to the same thread as what you're replying to, and thus
fool people into thinking it's about something it's not.  Again, the
penalty would not only be the waste of their time, but the slight dent
in your credibility as someone fluent in using communications
tools.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-writing-content">
<title>Content</title>

<para>Well-formatted mails attract readers, but content keeps them.
No set of fixed rules can guarantee good content, of course, but there
are some guidelines that can make it more likely to occur.</para>

<para>Make things easy for your readers.  There's a ton of information
floating around in any active open source project, and readers cannot
be expected to be familiar with most of it&mdash;indeed, they cannot
always be expected to know how to <emphasis>become</emphasis>
familiar.  Wherever possible, your posts should provide information in
the form most convenient for readers.  If you have to spend an extra
two minutes to dig up the URL to a particular thread in the mailing
list archives, in order to save your readers the trouble of doing so,
it's worth it.  If you have to spend an extra five or ten minutes
summarizing the conclusions so far of a complex thread, in order to
give people context in which to understand your post, then do so.
Think of it this way: the more successful a project, the lower the
writer-to-reader ratio in any given forum.  If every post you make is
seen by N people, then as N rises, the worthwhileness of expending
extra effort to save those people time rises with it.  And as people
see you imposing this standard on yourself, they will work to match it
in their own communications.  The result is, ideally, an increase in
the global efficiency of the project: when there is a choice between N
people making an effort and 1 person doing so, the project prefers the
1.</para>

<para>Don't engage in hyperbole.  Exaggerating in online posts is a
classic arms race.  For example, a person reporting a bug may worry
that the developers will not pay sufficient attention, so he'll
describe it as a severe, showstopper problem that is preventing him
(and all his friends/coworkers/cousins) from using the software
productively, when it's actually only a mild annoyance.  But
exaggeration is not limited to users&mdash;programmers often do the
same thing during technical debates, particularly when the
disagreement is over a matter of taste rather than correctness:</para>

  <blockquote>
     <para>"Doing it that way would make the code totally
     unreadable.  It'd be a maintenance nightmare, compared to
     J. Random's proposal..."</para>
  </blockquote>

<para>The same sentiment actually becomes
<emphasis>stronger</emphasis> when phrased less sharply:</para>

  <blockquote>
     <para>"That works, but it's less than ideal in terms of
     readability and maintainability, I think.  J. Random's proposal
     avoids those problems because it..."</para>
  </blockquote>

<para><remark>(todo: if possible, find particularly glaring examples
of counterproductive hyperbole from the dev@ or users@ list.  Sadly,
this shouldn't be too hard, at least from the latter.)</remark></para>

<para>You will not be able to get rid of hyperbole completely, and in
general it's not necessary to do so.  Compared to other forms of
miscommunication, hyperbole is not globally damaging&mdash;it hurts
mainly to the perpetrator.  The recipients can compensate, it's just
that the sender loses a little more credibility each time.  Therefore,
for the sake of your own influence in the project, try to err on the
side of accuracy.  That way, when you <emphasis>do</emphasis> need to
make a strong point, people will take you seriously.</para>

<para>Edit twice.  For any message longer than a medium-sized
paragraph, reread it from top to bottom, before sending it but after
you think it's done the first time.  This is familiar advice to anyone
who's taken a composition class, but it's especially important in
online discussion.  Because the process of composition tends to be
highly discontinuous (in the course of writing a message, you may need
to go back and check other mails, visit certain web pages, run a
command to capture its debugging output, etc), it's especially easy to
lose your sense of narrative place.  Messages that were composed
discontinuously and not checked before being sent are usually
instantly recognizeable, much to the chagrin (or so one would hope) of
their authors.  Take the time to review what you send.  The more your
posts hold together structurally, the more they will be read.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-writing-tone">
<title>Tone</title>

<para>After writing thousands of messages, you will probably find your
style tending toward the terse.  This seems to be the norm in most
technical forums, and there's nothing wrong with it per se.  A degree
of terseness that would be unacceptable in normal social interactions
is simply the default for free software hackers.  Here's a response I
once drew on a mailing list about some free content management
software, quoted in full:</para>

<screen>
Can you possibly elaborate a bit more on exactly what problems you ran 
into, etc?

Also:

What version of Slash are you using? I couldn't tell from your original 
message.

Exactly how did you build the apache/mod_perl source?

Did you try the Apache 2.0 patch that was posted about on slashcode.com 
?

  Shane
</screen>

<para>Now <emphasis>that's</emphasis> terse!  No greeting, no sign-off
other than his name, and the message itself is just a series of
questions phrased as compactly as possible.  His one declarative
sentence was an implicit criticism of my original message.  And yet, I
was happy to see Shane's mail, and didn't take his terseness as a sign
of anything other than him being a busy person.  The mere fact that he
was asking questions, instead of ignoring my post, meant that he was
willing to spend some time on my problem.</para>

<para>Would all readers react to this style as I did?  Not
necessarily; it depends on the person and the context.  For example,
if someone has just posted acknowledging that they made a mistake
(perhaps they wrote a bug), and you know from past experience that
this person tends to be a bit insecure, then while you may still write
a compact response, you should make sure to leaven it with some sort
of acknowledgement of their feelings.  The bulk of your response might
be a brief, engineer's-eye analysis of the situation, as terse as you
want, but at the end, sign off with something indicating that your
terseness is not to be taken as coldness.  For example, if you've just
given reams of advice about exactly how the person should fix the bug,
then sign off with "Good luck, &lt;your name here&gt;" to indicate
that you wish them well and are not mad.  A strategically placed
smiley face or other emoticlue can often be enough to reassure an
interlocutor, too. <remark>(Yes, Andy, I expected to get spanked for
coining "emoticlue", but what can I do?  I am
irrepressible!)</remark></para>

<para>It may seem odd to focus as much on the participant's feelings
as on the surface of what they say, but to put it baldly, feelings
affect productivity.  They're important for other reasons too, but
even those seeking a purely utilitarian justification need only keep
in mind that unhappy people write worse software, and less of it.
Given the restricted nature of most electronic media, though, there
will often be no overt clue as to how a person is feeling.  You will
have to make an educated guess based on a) how most people would feel
in that situation, and b) what you know of this particular person from
past interactions.  Some people prefer a more hands-off attitude, and
simply deal with everyone at face value, the idea being that if a
participant doesn't say outright that she feels a particular way, then
one has no business treating her as though she does.  I don't buy this
approach, for a couple of reasons.  One, people don't behave that way
in real life, so why would they online?  Two, since most interactions
take place in public forums, people tend to be even more restrained in
expressing emotions than they might be in private.  To be more
precise, they are often willing to express emotions directed at
others, such as gratitude or outrage, but not emotions directed
inwardly, such as insecurity or pride.  Yet most humans work better
when they know that others are aware of their state of mind.  By
paying attention to small clues, you can usually guess right most of
the time, and motivate people to stay involved to a greater degree
than they otherwise might.</para>

<para>I don't mean, of course, that your role is to be a group
therapist, constantly helping everyone to get in touch with their
feelings.  But by paying careful attention to long-term patterns in
people's behavior, you will begin to get a sense of them as
individuals even if you never meet them face-to-face.  And by being
sensitive to the tone of your own writing, you can have a surprising
amount of influence over how others feel, to the ultimate benefit of
the project.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-rudeness">
<title>Recognizing Rudeness</title>

<para>One of the defining characteristics of open source culture is
its distinctive notions of what does and does not constitute rudeness.
While the conventions described below are not unique to free software
development, nor even to software in general&mdash;they would be
familiar to anyone working in mathematics, the hard sciences, or
engineering disciplines&mdash;free software, with its porous
boundaries and constant influx of newcomers, is an environment where
these conventions are especially likely to be encountered by people
not familiar with them.</para>

<para>Let's start with things that are <emphasis>not</emphasis> rude:</para>

<para>Technical criticism, even when direct and unpadded, is not rude.
Indeed, it can be a form of flattery: the critic is saying, by
implication, that the target is worth taking seriously, is worth
spending some time on.  That is, the more viable it would have been to
simply ignore someone's post, the more of a compliment it becomes to
take the time to criticize it (unless the critique descends into an
<foreignphrase>ad hominem</foreignphrase> attack or some other form of
obvious rudeness, of course).</para>

<para>Blunt, unadorned questions, such as Shane's questions to me in
the previously-quoted email, are not rude either.  Questions that in
other contexts might seem cold, rhetorical, or even mocking, are often
intended seriously, and have no hidden agenda other than eliciting
information as quickly as possible.  The famous technical support
question "Is your computer plugged in?" is a classic example of this.
The support person really does need to know if your computer is
plugged in, and after the first few days on the job, has gotten tired
of prefixing her question with polite recusals ("I beg your pardon, I
just want to ask a few simple questions to rule out some
possibilities.  Some of these might seem pretty basic, but bear with
me...").  At this point, she doesn't bother with the padding anymore,
she just asks straight out, is it plugged in or not?  Equivalent
questions are asked all the time on free software mailing lists.  The
intent is not to insult the recipient, but to quickly rule out the
most obvious (and perhaps most common) explanations.  Recipients who
understand this and react accordingly win points for taking a wide
point of view without prompting.  But those recipients react badly
should not be reprimanded, either.  It's just a collision of cultures,
not anyone's fault.  Explain amiably that your question (or criticism)
had no hidden meanings, it was just meant to get (or transmit)
information as efficiently as possible, nothing more.</para>

<para>So what is rude?</para>

<para>By the same principle under which detailed technical criticism
is a form of flattery, failure to provide quality criticism can be a
kind of insult.  I don't mean simply ignoring someone's work, be it
proposal, code change, new issue filing, or whatever.  Unless you
explicitly promised a detailed reaction in advance, it's usually okay
to simply not react at all.  People will assume you just didn't have
time to say anything.  But if you <emphasis>do</emphasis> react, don't
skimp: take the time to really analyze things, provide concrete
examples where appropriate, dig around in the archives to find related
posts from the past, etc.  Or if you don't have time to put in that
kind of effort, but still need to write some sort of brief response,
then state the shortcoming openly in your message ("I think there's an
issue about this, but unfortunately didn't have time to search for it,
sorry.")  The main thing is to recognize the existence of the cultural
norm, either by fulfilling it, or by openly acknowledging that one has
fallen short this time.  Either way, the norm is strengthened, which
is, I think, worthwhile, as it's a very useful convention given the
need of free software development for constant review.  Failing to
meet that norm, while at the same time not explaining why you didn't,
is like saying the topic (and those participating in it) were not
worth much of your time.  Better to show that your time is valuable by
being terse than by being lazy.</para>

<para>There are many other forms of rudeness, of course, but most of
them are not specific to free software development, and common sense
is a good enough guide to them.  See also <xref
linkend="pfs-prevent-rudeness"/>, if you haven't already.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-writing-face">
<title>Face</title>

<para>There is a region in the human brain devoted specifically to
recognizing faces.  It is known informally as the "fusiform face
area", and its capabilities are mostly inborn, not learned.  It turns
out that recognizing individual people is such a crucial survival
skill that we have evolved specialized hardware to do it.</para>

<para>Internet-based collaboration is therefore psychologically odd,
because it involves tight cooperation between human beings who almost
never get to identify each other by the most natural, intuitive
method: facial recognition.  This needs to be compensated for.  Have a
single <firstterm>screen name</firstterm> that you use everywhere.  It
should be the front part of your email address (the part before the
@-sign), your IRC username, your repository committer name, your issue
tracker username, and so on.  This name is your online "face": a short
identifying string that serves some of the same purpose as your real
face, although it does not, unfortunately, stimulate the same built-in
hardware in the brain.</para>

<para>The screen name should be some intuitive permutation of your
real name (mine, for example, is "kfogel").  In some situations it
will be accompanied by your full name anyway, for example in mail
headers:</para>

<screen>
From: "Karl Fogel" &lt;kfogel@whateverdomain.com&gt;
</screen>

<para>Actually, there are two things going on in that example.  As
mentioned earlier, the screen name matches the real name in an
intuitive way.  But also, the real name is <emphasis>real</emphasis>.
That is, it's not some made-up appellation like:</para>

<screen>
From: "Wonder Hacker" &lt;wonderhacker@whateverdomain.com&gt;
</screen>

<para>There's a famous cartoon by Paul Steiner, from the July 5, 1993
issue of <citetitle>The New Yorker</citetitle>, that shows one dog
logged into a computer terminal, looking down and telling another
conspiratorially: "On the Internet, nobody knows you're a dog."  This
kind of thought probably lies behind a lot of the self-aggrandizing,
meant-to-be-hip online identities people give themselves&mdash;as if
calling oneself "Wonder Hacker" will actually cause people to believe
one <emphasis>is</emphasis> a wonderful hacker.  But the fact remains,
even if no one knows you're a dog, you're still a dog.  A fantastical
online identity never impresses readers.  Instead, it makes them think
you're more into image than substance.  Use your real name for all
interactions, or if for some reason you require anonymity, then make
up a name that sounds like a perfectly normal real name, and use it
consistently.</para>

<para>In addition to keeping your online face consistent, there are
some things you can do to make it more attractive.  If you have an
official title (e.g., "doctor", "professor", "director"), don't flaunt
it, nor even mention it except when it's directly relevant to the
conversation.  Hackerdom in general, and free software culture in
particular, tends to view title displays as a sign of insecurity.
It's okay if your title appears as part of a standard signature
block at the end of every mail you send, just don't ever use it as a
tool to bolster your position in a discussion&mdash;the attempt is
guaranteed to backfire.  You want people to respect the person, not
the title.</para>

<para>Speaking of signature blocks: keep them small and tasteful, or
better yet, nonexistent.  Avoid large legal disclaimers tacked on to
the end of every mail, especially when they express sentiments
incompatible with participation in a free software project.  For
example, the following classic of the genre appears at the end of
every post a particular user makes to a public mailing list I'm
on:</para>

<screen>
IMPORTANT NOTICE

If you have received this e-mail in error or wish to read our e-mail
disclaimer statement and monitoring policy, please refer to the
statement below or contact the sender.

This communication is from Deloitte &amp; Touche LLP.  Deloitte &amp;
Touche LLP is a limited liability partnership registered in England
and Wales with registered number OC303675.  A list of members' names
is available for inspection at Stonecutter Court, 1 Stonecutter
Street, London EC4A 4TR, United Kingdom, the firm's principal place of
business and registered office.  Deloitte &amp; Touche LLP is
authorised and regulated by the Financial Services Authority.

This communication and any attachments contain information which is
confidential and may also be privileged.  It is for the exclusive use
of the intended recipient(s).  If you are not the intended
recipient(s) please note that any form of disclosure, distribution,
copying or use of this communication or the information in it or in
any attachments is strictly prohibited and may be unlawful.  If you
have received this communication in error, please return it with the
title "received in error" to IT.SECURITY.UK@deloitte.co.uk then delete
the email and destroy any copies of it.

E-mail communications cannot be guaranteed to be secure or error free,
as information could be intercepted, corrupted, amended, lost,
destroyed, arrive late or incomplete, or contain viruses.  We do not
accept liability for any such matters or their consequences.  Anyone
who communicates with us by e-mail is taken to accept the risks in
doing so.

When addressed to our clients, any opinions or advice contained in
this e-mail and any attachments are subject to the terms and
conditions expressed in the governing Deloitte &amp; Touche LLP client
engagement letter.

Opinions, conclusions and other information in this e-mail and any
attachments which do not relate to the official business of the firm
are neither given nor endorsed by it.
</screen>

<para>For someone who's just showing up to ask a question now and
then, that huge disclaimer looks a bit silly but probably doesn't do
any lasting harm.  However, if this person wanted to participate
actively in the project, that legal boilerplate would start to have a
more insidious effect.  It would send at least two potentially
destructive signals: first, that this person doesn't have full control
over her tools&mdash;she's trapped inside some corporate mailer that
tacks an annoying message to the end of every email, and she hasn't
got any way to route around it&mdash;and second, that she has little
or no organizational support for her free software activities.  True,
the organization has clearly not banned her outright from posting to
public lists, but it has made her posts look distinctly unwelcoming,
as though the risk of letting out confidential information must trump
all other communications priorities.</para>

<para>If you work for an organization that insists on adding such
signature blocks to all outgoing mail, then consider getting a free
email account from, e.g., <ulink url="gmail.google.com"/>,
<ulink url="www.hotmail.com"/>, or <ulink url="www.yahoo.com"/>, and
using that as your address for the project.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->

<sect1 id="pfs-common-pitfalls">
<title>Avoiding Common Pitfalls</title>

<para><remark>(Write small introductory paragraph, leading into the
subsections below, where the bulk of the material is.)</remark></para>

<!-- ======================== subsection ============================== -->

<sect2 id="pfs-post-with-purpose">
<title>Don't Post Without a Purpose</title>

<para>The most common pitfall in online project participation is to
think that you have to respond to everything.  First of all, there
will usually be more threads going on than you can keep track of, at
least after the project is past its first few months.  Second, even in
the threads that you have decided to engage with, much of what people
say will not require a response.  Development forums in particular
tend to be dominated by three kinds of messages:</para>

<orderedlist>
  <listitem><para>Messages proposing something non-trivial.</para></listitem>
  <listitem><para>Messages expressing support or opposition to
                  something someone else has said.</para></listitem>
  <listitem><para>Summing-up messages.</para></listitem>
</orderedlist>

<para>None of these <emphasis>inherently</emphasis> requires a
response, particularly if you can be fairly sure, based on watching
the thread so far, that someone else is likely to say what you would
have said anyway.  (Worried that you'll be caught in a wait-wait loop
because all the others are following this advice too?  Don't be; they
won't.)  A response should be motivated by a definite purpose.  Ask
yourself first: do you know what you want to accomplish?  And second:
will it not get accomplished unless you say something?</para>

<para>Two good reasons to post are a) when you see a flaw in a
proposal and suspect that you're the only one who sees it, and b) when
you see that miscommunication is happening between others, and know
that you can fix it with a clarifying post.  It's fine to chime in
with a "Me too!"  as long as your purpose is something other than
gratuitous self-expression; there are circumstances where a well-timed
"Me too" can actually shorten the length of a thread by providing
momentum to a burgeoning consensus.</para>

<para>But even then, if you can tell that consensus is coming anyway,
and you're in favor, sometimes the best thing to do is just get out of
the way and let it happen.  After all, it's always better to leave
people wishing you'd post more than wishing you'd post less.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="pfs-productive-threads">
<title>Productive vs Unproductive Threads</title>

<para>On a busy mailing list, you have two imperatives.  One,
obviously, is to figure out what you need to pay attention to and what
you can ignore.  The other is to behave in a way that
avoids <emphasis>causing</emphasis> noise: not only do you want your
own posts to have a high signal/noise ratio, you also want them to be
the sorts of messages that stimulate <emphasis>other</emphasis> people
to either post with a similarly high signal/noise ratio, or not post
at all.</para>

<para>To see how to do that, let's consider the context in which it is
done.  What are some of the hallmarks of an unproductive thread?</para>

<orderedlist>
  <listitem><para>Arguments that have been made already start being
            repeated, as though the poster thinks no one heard them
            the first time.</para>
  </listitem>
  <listitem><para>Increasing levels of excitement and involvement as
            the stakes get smaller and smaller.</para>
  </listitem>
  <listitem><para>A majority of comments coming from people who do
            little or nothing, while the people who tend to get things
            done are silent.</para>
  </listitem>
  <listitem><para>Many ideas are discussed, but no clear proposals
            are ever made.  (Of course, any interesting idea starts out
            as an imprecise vision; the important question is what
            direction it goes from there.  Does the thread seem to be
            turning the vision into something more concrete, or is it
            spinning off into sub-visions, side-visions, and
            ontological disputes?)</para>
  </listitem>
</orderedlist>

<para>Just because a thread is not productive doesn't mean its
useless.  It might be about an important topic, in which case the fact
that it's not making any headway is all the more troublesome.</para>

<para>Guiding a thread toward usefulness without being pushy is an
art.  It won't work to simply admonish people to stop wasting their
time, or ask them not to post unless they have something constructive
to say.  You may, of course, think these things privately, but if you
say them out loud then you will be offensive.  Instead, you have to
suggest conditions for further progress&mdash;give people a route, a
path to follow that leads to the results you want, yet without
sounding like you're dictating conduct.  The distinction is largely
one of tone.  For example, this is bad:</para>

  <blockquote>
     <para><emphasis>This discussion is going nowhere.  Can we please
     drop this topic until someone has a patch to implement one of
     these proposals?  There's no reason to keep going around and
     around saying the same things.  Code speaks louder than
     words, folks.</emphasis></para>
  </blockquote>

<para>Whereas this is good:</para>

  <blockquote>
     <para><emphasis>Several proposals have been floated in this
     thread, but none have had all the details fleshed out, at least
     not enough for an up-or-down vote.  Yet we're also not saying
     anything new now; we're just reiterating what has been said
     before.  So the best thing at this point would probably be for
     further posts to contain either a complete specification for the
     proposed behavior, or a patch.  Then at least we'll have a
     definite action to take (i.e., get consensus on the
     specification, or apply and test the patch).</emphasis></para>
  </blockquote>

<para>Contrast the second approach with the first.  The second way
does not draw a line between you and the others, or accuse them of
taking the discussion into a spiral.  It talks about "we", which is
important whether or not you actually participated in the thread
before now, because it reminds everyone that even those who have been
silent thus far still have a stake in the thread's outcome.  It
describes why the thread is going nowhere, but does so without
pejoratives and without judgments&mdash;it just dispassionately states
some facts.  Most importantly, it offers a positive course of action,
so that instead of people feeling like discussion is being closed off
(a restriction against which they can only be tempted to rebel), they
will feel as if they're being offered a way to take the conversation
to a more constructive level.  This is a standard people naturally
want to meet.</para>

<para>You won't always want a thread to make it to the next level of
constructiveness&mdash;sometimes you'll just want it to go away.  The
purpose of your response is to make the thread do one or the other,
where you have some idea in advance of which outcome is more likely.
If you can tell from the way the thread has gone so far that no one is
actually <emphasis>going</emphasis> to take the steps you suggested,
then your post effectively shuts down the thread without seeming to do
so.  Of course, there isn't any foolproof way to shut down a thread,
and even if there were, you wouldn't want to use it.  But asking
participants to either make visible progress or stop posting is
perfectly defensible, if done diplomatically.</para>

<para>Don't expect any thread to stop on a dime.  There will probably
still be a few posts after yours, either because mails got crossed in
the pipe, or because people want to have the last word.  This is
nothing to worry about, and you don't need to post again.  Just let
the thread peter out, or not peter out, as the case may be.  You can't
have complete control; on the other hand, you can expect to have a
statistically significant effect across many threads.</para>

<para>A word of caution: Be wary of jumping on a thread prematurely.
Some amount of speculative chatter can be productive, depending on the
topic, and asking for it to be resolved too quickly will stifle the
creative process, as well as make you look impatient.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-soft-topics">
<title>The Softer the Topic, the Longer the Debate</title>

<para>Although discussion can meander in any topic, the probability of
meandering goes up as the the technical difficulty of the topic goes
down.  As technical difficulty increases, the number of participants
who can really follow what's going on decreases.  Those who are left
are likely to be the most experienced developers, who have already
taken part in such discussions thousands of times before, and know
what sort of behavior is likely to lead to a consensus everyone can
live with.</para>

<para>Consensus is hardest to achive in technical questions that are
simple to understand and easy to have an opinion about, and in "soft"
topics such as organization, publicity, funding, etc.  People can
participate in those arguments forever, because there are no
qualifications necessary for doing so, no clear way to decide (even
afterwards) if a decision was wrong, and because simply outwaiting the
opposition is sometimes a successful tactic.</para>

<para>The principle that the amount of discussion generated by a topic
is inversely proportional to its complexity has been around for a long
time, and is known informally as the <firstterm>Bikeshed
Effect</firstterm>.  Here is Poul-Henning Kamp's explanation of it,
from a now-famous post made to BSD developers:</para>

<blockquote>

<para>It's a long story, or rather it's an old story, but it is quite
short actually.  C. Northcote Parkinson wrote a book in the early
1960'ies, called "Parkinson's Law", which contains a lot of insight
into the dynamics of management.</para>

<para>[...]</para>

<para>In the specific example involving the bike shed, the other vital
component is an atomic power-plant, I guess that illustrates the age
of the book.</para>

<para>Parkinson shows how you can go in to the board of directors and
get approval for building a multi-million or even billion dollar
atomic power plant, but if you want to build a bike shed you will be
tangled up in endless discussions.</para>

<para>Parkinson explains that this is because an atomic plant is so
vast, so expensive and so complicated that people cannot grasp it, and
rather than try, they fall back on the assumption that somebody else
checked all the details before it got this far.  Richard P.  Feynmann
gives a couple of interesting, and very much to the point, examples
relating to Los Alamos in his books.</para>

<para>A bike shed on the other hand.  Anyone can build one of those
over a weekend, and still have time to watch the game on TV.  So no
matter how well prepared, no matter how reasonable you are with your
proposal, somebody will seize the chance to show that he is doing his
job, that he is paying attention, that he is *here*.</para>

<para>In Denmark we call it "setting your fingerprint".  It is about
personal pride and prestige, it is about being able to point somewhere
and say "There!  *I* did that."  It is a strong trait in politicians,
but present in most people given the chance.  Just think about
footsteps in wet cement.</para>

</blockquote>

<para>(Poul-Henning Kamp's entire post, of which that is only a part,
is very much worth reading; see <xref linkend="pfs-app-c"/>.)</para>

<para>Anyone who's ever taken regular part in group decision-making
will recognize what Kamp is talking about.  However, it is usually
impossible to persuade <emphasis>everyone</emphasis> to avoid painting
bikesheds.  The best you can do is point out that the phenomenon
exists, when you see it happening, and persuade the senior
developers&mdash;the people whose posts carry the most weight&mdash;to
drop their paintbrushes early, so at least they're not contributing to
the noise.  Bikeshed painting parties will never go away entirely, but
you can make them shorter and less frequent by spreading an awareness
of the phenomenon in the project's culture.</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="pfs-holy-wars">
<title>Avoid Holy Wars</title>

<para>A <firstterm>Holy War</firstterm> is a dispute, often but not
always over a relatively minor issue, which has no hope of being
resolved on the merits of the arguments, but where people feel
passionate enough to continue arguing anyway in the hope that their
side will prevail.  Holy wars are not quite the same as bikeshed
paintings.  People painting bikesheds are usually quick to jump in
with an opinion (because they can), but they won't necessarily feel
strongly about it, and indeed will sometimes express other,
incompatible opinions, to show that they understand all sides of the
issue.  In a holy war, on the other hand, understanding the other
sides is a sign of weakness.  In a holy war, everyone knows there is
One Right Answer, they just don't agree on what it is.</para>

<para>Once a holy war has started, it generally cannot be resolved to
everyone's satisfaction.  It does no good to point out, in the midst
of a holy war, that a holy war is going on.  Everyone knows that
already.  Unfortunately, a common feature of holy wars is disagreement
on the very question of <emphasis>whether</emphasis> the dispute is
resolveable by continued discussion.  Viewed from outside, it is clear
that neither side is changing the other's mind.  Viewed from inside,
the other side is being obtuse and not thinking clearly, but they
might come around if browbeaten enough.  Now, I am
<emphasis>not</emphasis> saying there's never a right side in a holy
war.  Sometimes there is&mdash;in the holy wars I've participated
in, it's always been my side, of course.  But it doesn't matter,
because there's no algorithm for convincingly demonstrating that one
side or the other is right.</para>

<para>A common, but unsatisfactory, way people try to resolve holy
wars is to say "We've already spent far more time and energy
discussing this than it's worth!  Can we please just drop it?"  There
are two problems with this.  First, that time and energy has already
been spent and can never be recovered&mdash;the only question now is,
how much <emphasis>more</emphasis> effort remains?  If some people
feel that just a little more discussion will bring the issue to a
close, then it still makes sense (from their point of view) to
continue.</para>

<para>The other problem with asking for the matter to be dropped is
that this is often equivalent to allowing one side, the status quo, to
declare victory by inaction.  And in some cases, the status quo is
known to be unacceptable anyway: everyone agrees that some decision
must be made, some action taken.  Dropping the subject would be worse
for everyone than simply giving up the argument would be for anyone.
But since that dilemma applies to all equally, it's still possible to
end up arguing forever about what to do.</para>

<para>So how should you handle a holy war?</para>

<para>The first answer is, try to set things up so they don't happen.
This is not as hopeless as it sounds:</para>

<para>You can anticipate certain standard holy wars: they tend to come
up over programming languages, licences
(<xref linkend="pfs-avoiding-license-wars"/>), reply-to munging
(<xref linkend="pfs-reply-to"/>), and a few other topics.  Each
project usually has a holy war or two all its own, as well, which
longtime developers will quickly become familiar with.  The techniques
for stopping holy wars, or at least limiting their damage, are pretty
much the same everywhere.  Even if you are positive your side is
right, try to find <emphasis>some</emphasis> way to express sympathy
and understanding for the points the other side is making.  Often the
problem in a holy war is that because each side has built their walls
as high as possible, and made it clear that any other opinion is sheer
foolishness, the act of surrendering or changing one's mind becomes
psychologically unbearable: it would be an admission not just of being
wrong, but of having been <emphasis>certain</emphasis> and still being
wrong.  The way you can make this admission palatable for the other
side is to express some uncertainty yourself&mdash;precisely by
showing that you understand the arguments they are making and find
them at least sensible, if not finally persuasive.  Make a gesture
that provides space for a reciprocal gesture, and usually the
situation will improve.  You are no more or less likely to get the
technical result you wanted, but at least you can avoid unnecessary
collateral damage to the project's morale.</para>

<para>When a holy war can't be avoided, decide early how much you
care, and then be willing to publicly give up.  When you do so, you
can say that you're backing out because the holy war isn't worth it,
but don't express any bitterness and <emphasis>don't</emphasis> take
the opportunity for a last parting shot at the opposing side's
arguments.  Giving up is only effective when done gracefully.</para>

<para>Programming language holy wars are a bit of a special case,
because they are often highly technical, yet many people feel
qualified to take part in them, and the stakes are almost infinitely
high, since the result may determine what language a good portion of
the project's code is written in.  The best solution is to choose the
language early, with buy-in from influential initial developers, and
then defend it on the grounds that it's what you are all comfortable
writing in, <emphasis>not</emphasis> on the grounds that it's better
than some other language that could have been used instead.  Never let
the conversation degenerate into an academic comparison of programming
languages (this seems to happen especially often when someone brings
up Perl, for some reason); that's a death topic that you must simply
refuse to be drawn into.</para>

<para>For more historical background on holy wars, see <ulink
url="http://catb.org/~esr/jargon/html/H/holy-wars.html"/>, and the
paper by Danny Cohen that popularized the term, <ulink
url="http://www.ietf.org/rfc/ien/ien137.txt"/>.</para>

</sect2>

<!-- ======================== subsection ============================== -->

<sect2 id="pfs-noisy-minority">
<title>The "Noisy Minority" Effect</title>

<para>In any mailing list discussion, it's easy for a small minority
to give the impression that there is a great deal of dissent, by
flooding the list with numerous lengthy emails.  It's a bit like a
filibuster, except that the illusion of widespread dissent is even
more powerful, because it's divided across an arbitrary number of
discrete posts, and most people won't bother to keep track of who said
what when.  They'll just have an instinctive impression that the topic
is very controversial, and wait for the fuss to die down.</para>

<para>The best way to counteract this effect is to point it out very
clearly, and provide supporting evidence showing how small the actual
number of unique dissenters is compared to those in agreement.  In
order to increase the disparity, you may want to privately poll people
who have been mostly silent, but who you suspect would agree with the
majority.  Don't say anything that suggests the dissenters were
deliberately trying to inflate the impression they were making.
Chances are they weren't, and even if they were, there would be no
strategic advantage to pointing it out.  All you need do is show the
actual numbers in a side-by-side comparison, and people will realize
that their intuition of the situation does not match reality.</para>

<para>This advice doesn't just apply to issues with clear
for-and-against positions.  It applies to any discussion where a fuss
is being made, but it's not clear that most people consider the issue
under discussion to be a real problem.  After a while, if you agree
the issue is not worthy of action, and can see that it has failed to
get much traction (even if it has generated a lot of mails), you can
just state outright that it's not getting traction.  If the Noisy
Minority effect has been at work, your post will seem like a breath of
fresh air.  Most people's impression of the discussion up to that
point will have been somewhat murky: "Huh, it sure feels like there's
some big deal here, because there sure are a lot of posts, but I can't
see any clear progression happening."  By explaining how the form of
the discussion made it appear more turbulent than it really was, you
retrospectively give it a new shape, through which they can recast
their understanding of what transpired.</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-difficult-people">
<title>Difficult People</title>

<para> Dealing with difficult/rude participants on mailing lists.
Also, dealing with people who misuse or abuse procedural forms (such
as vetos, voting, filibustering, etc, which sadly
<emphasis>has</emphasis> been known to happen from time to time).  Ask
J about his experiences with you-know-who in this regard.</para>

<para><remark>Some truly insidious people look for wedgepoints in the
procedures.  For example, in a debate that won't consense, the group
will try to at least clarify the points of disagreement, so that a
reasonable ballot can be made up for voting.  The obstructionist who
knows the vote could go against him will try to delay it, by
constantly complexifying the questino of what should be on the ballot
in the first place (usually by objecting to reasonable suggestions or
by introducing unexpected new items to the ballot).  Strategy:
tolerate this for a while.  Then start keeping notes.  Then gather
allies privately.  Then raise the issue publicly, using the notes as
evidence... Unfortunately, there is a great danger of looking bad
yourself when you try to combat this, so you may need to engage in a
whispering campaign first.  Of course, it can't
<emphasis>look</emphasis> like a whispering campaign, it has to look
like innocent inquiry.</remark></para>

<para><remark>todo: talk about empathy here, and how surprisingly much
one can tell about what people are feeling from what they write, if
one tries consciously to keep track (&amp; knowing when to privchat
for more).  Possibly refer to Ben's Notes now.</remark></para>

<para><remark>[taken from an earlier section, needs to be recast to
fit this section] Another form of rudeness, certainly not confined to
free software but often seen there, is to accuse someone
<emphasis>else</emphasis> of rudeness without taking the trouble to
back it up.  Note that must distinguish between rude and
counterproductive: the trick is to be able to point out someone's
rudeness in a way that persuades the audience (even if not them),
while not being so antagonistic as to perpetuate the
cycle.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-codifying-tradition">
<title>Codifying Tradition</title>

<para><remark>See <ulink
url="http://subversion.tigris.org/mailing-list-guidelines.html"/> for
an example of mailing list guidelines, talk about which problems such
guidelines can solve and which they can't.  Also, log message
guidelines (if that gets its own section, remember to adjust the xrefs
in Version Control Vocabulary and elsewhere in Chapter 3).  Mention
the parseability concern; point out that it can overdone, too.
Formatting of bug tracker numbers in log messages is an excellent
example of where parseability is an appropriate
concern.  Log message templates.  Make sure that commit reviews apply
to log messages and other "meta" aspects of the commit as well as to
the code itself.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-growth">
<title>Handling Growth</title>

<para><remark>Dividing into multiple forums.  Key is to make sure the
purpose of each forum is clear, consciously steer people (e.g.,
mailing list crossposts, irc channel redirects) to the right place,
make sure there is no psychological balkanization (lurkers are always
allowed, etc).  Link to guidelines; then, instead of shouting at
people, calmly point them to the guidelines.</remark></para>

<para><remark>The part below was originally in the IRC section in
Chapter 3, but really belongs here.  Open questions: should it be a
separate subsection?  Should it combine mailing lists and IRC, or just
focus on IRC?</remark></para>

<para>As a project gets more popular, it is inevitable that more and
more inexperienced people will show up in the IRC channels.  Although
this is desirable and a sign of success, it will naturally have
destabilizing effects at first.  Longtime channel users will begin to
feel overwhelmed, as the old strategy of individually training each
newcomer in channel conventions fails to scale to the new population
size.  There will be more of a tendency for conversations to drift off
topic and become "noise" as far as the channel's purpose is concerned.
Experienced users may react by venting their frustration, often at
people who had no idea they were doing anything wrong.</para>

<para><remark>Here's how a really busy channel handles it.  Compare
this with the earlier topic example given in Chapter 3:</remark></para>

<screen>
You are now talking on #linuxhelp

Topic for #linuxhelp is Please READ
http://www.catb.org/~esr/faqs/smart-questions.html &amp;&amp;
http://www.tldp.org/docs.html#howto BEFORE asking questions | Channel
rules are at http://www.nerdfest.org/lh_rules.html | Please consult
http://kerneltrap.org/node/view/799 before asking about upgrading to a
2.6.x kernel | memory read possible: http://tinyurl.com/4s6mc ->
update to 2.6.8.1 or 2.4.27 | hash algo disaster:
http://tinyurl.com/6w8rf | reiser4 out
</screen>

<para><remark>(Also, note how on-topic enforcement should be much
looser in IRC, because it is really a social medium.  Don't ask people
to go out-of-band unless they're actually interfering with stuff, and
even then make it clear that the request is only temporary, and that
when the channel's less busy it won't matter so much.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-using-archives">
<title>Conspicuous Use of Archives</title>

<!-- <remark>get Brian B's story of the FreeBSD IRC archives
     here?</remark> -->

<para>Typically, all communications in an open source project (with
the exception of chat room conversations) are archived.  The archives
are public and searchable, and have referential stability: that is,
once a given piece of information is recorded at a particular address,
it stays at that address forever.</para>

<para>Use those archives as much as possible, and as conspicuously as
possible.  Even when you know the answer to some question off the top
of your head, if you think there's a reference in the archives that
contains the answer, spend the time to dig it up and present it.
Every time you do that in a publically visible way, some people learn
for the first time that the archives are there, and that searching in
them can produce answers.  Also, by referring to the archives instead
of rewriting the advice, you reinforce the social norm against
duplicating information.  Why have the same answer in two different
places?  When the number of places it can be found is kept to a
minimum, people who have found it before are more likely to remember
what to search for to find it again.</para>

<para>There are times when duplicating information makes sense,
however.  For example, suppose there's a response already in the
archives, not from you, saying:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  To
unfrobnicate them, run these steps:

1. Shut down the Scanley server.
2. Run the 'defrobnicate' program that ships with Scanley.
3. Start up the server.
</screen>

<para>Then, months later, you see another post indicating that
someone's indexes have become frobnicated.  You search the archives
and come up with the old response above, but you realize it's missing
some steps (perhaps by mistake, or perhaps because the software has
changed since that post was written).  The classiest way to handle
this is to post a new, more complete set of instructions, and
explicitly obsolete the old post by mentioning it:</para>

<screen>
It appears that your Scanley indexes have become frobnicated.  We
saw this problem back in July, and J. Random posted a solution at
http://blahblahblah/blah.  Below is a more complete description of
how to unfrobnicate your indexes, based on J. Random's instructions
but extending them a bit:

1. Shut down the Scanley server.
2. Become the user the Scanley server normally runs as.
3. As that user, run the 'defrobnicate' program on the indexes.
4. Run Scanley by hand to see if the indexes work now.
5. Restart the server.
</screen>

<para>(In an ideal world, it would be possible to attach a note to the
<emphasis>old</emphasis> post, saying that there is newer information
available and pointing to the new post.  However, I don't know of any
archiving software that offers an "obsoleted by" feature, perhaps
because it would be mildly tricky to implement in a way that doesn't
violate the archives' integrity as a verbatim record.)</para>

<para>Archives are probably most often searched for answers to
technical questions, but their importance to the project goes well
beyond that.  If a project's formal guidelines are its statutory law,
the archives are its common law: a record of all decisions made and
how they were arrived at.  In any recurring discussion, it's pretty
much obligatory nowadays to start with an archive search.  This allows
you to begin the discussion with a summary of the current state of
things, anticipate objections, prepare rebuttals, and possibly
discover angles you hadn't thought of.  Also, the other participants
will <emphasis>expect</emphasis> you to have done an archive search.
Even if the previous discussions went nowhere, you should include
pointers to them when you re-raise the topic, so people can see for
themselves a) that they went nowhere, and b) that you did your
homework, and therefore are probably saying something now that has not
been said before.</para>

<!-- ======================== subsection ============================== -->
<sect2 id="pfs-all-as-archives">
<title>Treat All Resources Like Archives</title>

<para>All of the preceding advice applies to more than just mailing
list archives.  Having particular pieces of information at stable,
conveniently findable addresses is an organizing principle for all of
the project's information.  Let's take the project FAQ as a case
study.</para>

<para>How do people use a FAQ?</para>

<orderedlist>
  <listitem>
    <para>They want to search in it for specific words and phrases.</para>
  </listitem>
  <listitem>
    <para>They want to browse it, soaking up information without
          necessarily looking for answers to specific questions.</para>
  </listitem>
  <listitem>
    <para>They expect search engines such as Google to know about the
          FAQ's content, so that searches can result in FAQ entries.</para>
  </listitem>
  <listitem>
    <para>They want to be able to refer other people directly to specific
          items in the FAQ.</para>
  </listitem>
  <listitem>
    <para>They want to be able to add new material to the FAQ, but
          note that this happens much less often than answers are
          looked up&mdash;FAQs are far more often read from than
          written to.</para>
  </listitem>
</orderedlist>

<para>Point 1 implies that the FAQ should be available in some sort of
textual format.  Points 2 and 3 imply that the FAQ should be available
as an HTML page, with point 2 additionally indicating that the HTML
should be designed for readability (i.e., you'll want some control
over its look and feel), and should have a table of contents.  Point 4
means that each individual entry in the FAQ should be assigned an HTML
<firstterm>named anchor</firstterm>, a tag that allows people to reach
a particular location on the page.  Point 5 means the source files for
the FAQ should be available in a convenient way (see <xref
linkend="pfs-version-everything"/>), in a format that's easy to edit.</para>

  <sidebar id="pfs-html-named-anchors-and-ids">
  <title>Named Anchors and ID Attributes</title>

  <para>There are two ways to get a browser to jump to a specific
  location within a web page: named anchors, and id attributes.</para>

  <para>A <firstterm>named anchor</firstterm> is just a normal HTML
  anchor element (<literal>&lt;a&gt;...&lt;/a&gt;</literal>), but with
  a "name" attribute:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;...&lt;/a&gt;</screen>

  <para>More recent versions of HTML support a generic <firstterm>id
  attribute</firstterm>, which can be attached to any HTML element,
  not just to <literal>&lt;a&gt;</literal>.  For example:</para>

  <screen>&lt;p&nbsp;id="mylabel"&gt;...&lt;/p&gt;</screen>

  <para>Both named anchors and id attributes are used in the same
  way.  One appends a hash mark and the label to a URL, to cause the
  browser to jump straight to that spot in the page:</para>

  <screen>http://myproject.example.com/faq.html#mylabel</screen>

  <para>Virtually all browsers support named anchors; most modern
  browsers support the id attribute.  To play it safe, I would
  recommend using either named anchors alone, or named anchors
  <emphasis>and</emphasis> id attributes together (with the same label
  for both in a given pair, of course).  For reasons mysterious to me,
  doing named anchors as self-closing tags does not seem to work.  So
  even if there's no text inside the element, you should still write
  it in two-sided form:</para>

  <screen>&lt;a&nbsp;name="mylabel"&gt;&lt;/a&gt;</screen>

  <para>...though normally there would be some text, such as the title
  of a section.</para>

  <para>Whether you use a named anchor or id attribute or both,
  remember that the label will not be visible to someone who browses
  to that location without using the label.  But such a person might
  want to discover the label for a particular location, so they can
  mail the URL for a FAQ answer to a friend, for example.  To help
  them do this, add a <firstterm>title attribute</firstterm> to the
  same element(s) where you added the "name" and/or "id" attribute,
  for example:</para>

  <screen>&lt;a&nbsp;name="mylabel"&nbsp;title="#mylabel"&gt;...&lt;/a&gt;</screen>

  <para>When the mouse pointer is held over the text inside the
  title-attributed element, most browsers will pop up a tiny box
  showing the title.  I usually include the hash-mark, to remind the
  user that this is what they would put at the end of the URL to jump
  straight to this location next time.</para>

  </sidebar>

<para>Tuning the FAQ like this is just one example of how to make a
resource presentable.  The same properties&mdash;direct searchability,
availability to major Internet search engines, browseability,
referential stability, and (where applicable) editability&mdash;apply
to other web pages, the source code tree, the bug tracker, etc.  It
just happens that most mailing list archiving software long ago
recognized the importance of these properties, which is why mailing
lists tend to have this functionality natively, while other formats
may require some extra effort on the maintainer's part (<xref
linkend="pfs-ch-8"/> discusses how to spread that maintenance burden
across many volunteers).</para>

</sect2>

</sect1>

<sect1 id="pfs-bug-tracker-usage">
<title>No Conversations in the Bug Tracker</title>

<para><remark>Note the danger of the bug tracker turning into a
discussion forum, when mailing lists should really be used.  Keep the
mathematical analogy in mind, though this may not be the best way to
describe it in words: the question is, is the discussion potentially
divergent or convergent?  If it's stuff like getting more technical
details from the original reporter, or pointing out a gotcha with a
proposed solution, then it's convergent.  If it's a philosophical
questioning of the bug's justification for being, or if the bug is one
specific case that reveals a much wider problem, then the discussion
might end up divergent, which means it should be on the development
mailing list, and the URL to the thread should be recorded in the bug
when the discussion dies down.  Note that those involved with the bug
may find this laborious, but this is a writer-responsible culture:
more important to make things easy for the tens or hundreds of people
who may read the bug than for the 3 or 5 people writing to
it.</remark></para>

<para><remark>How much to reproduce data in the tracker?  Link to the
mail thread, or cut-and-paste it, or summarize it with some pasting
but then link to thread for details?  The overriding concern should
be convenience of readers.  So, paste all you want, *and* link to the
thread.  Remember, the usual problem of data duplication does not
exist here, because archives are static data anyway.</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-private-chatting">
<title>Open vs Private Interactions</title>

<para>When to operate overtly, when to operate behind the scenes.</para>

<para><remark>(Give the example of bouncing a review back to Mike (or
was it Ben?) to have them post it, so the exchange could be public,
even though we were sitting right next to each other.)</remark></para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-internal-vs-external">
<title>Internal vs External Communications</title>

<para> Internal vs external communications.  In free software
projects, there tends to be a smooth continuum between purely internal
discussions and public relations statements.  Discuss how to navigate
this continuum.  Describe how to hook into the standard real-time news
distribution forums (RSS, CIA, etc), and the meta-distribution sites
such as Freshmeat.  </para>

</sect1>


<!-- This used to be in Chapter 2.  It's not really about
     communications either, but where is a better place?  Should it
     be cut entirely? 

   Understanding potential volunteers' motivations will help you set
   things up to attract them.  You can't build the lamp until you know
   what frequencies of light the moths are attracted to.  Oh, wait,
   maybe that's not such a good metaphor...

   For example, talk about the sharp distinction between those who
   were interested in reaching 1.0 versus those who were interested in
   adding new features to Subversion.  (Philip, Ghudson, etc.)
-->

<para><remark>(Another example: inclusion of internal issue numbers in
scarab commits.  Though not strictly about money, it is about the
relationship between internal/profit-driven, and external/volunteer
development.)</remark></para>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
