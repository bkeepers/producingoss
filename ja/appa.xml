<appendix id="vc-systems">
<!-- <title>Free Version Control Systems</title> -->
<title>フリーなバージョン管理システム</title>

<simplesect>

<!--
<para>These are all the open source version control systems I was
aware of as of mid-2007.  The only one I use on a regular basis is
Subversion.  I have little or no experience with most of these
systems, except for Subversion and CVS; the information here is taken
from their web sites.  See also
<ulink
url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>.
</para>
-->
<para>
  2007 年半ばの時点で私が把握しているオープンソースのバージョン管理システムは、
  これらがすべてです。このうち、私が常用しているのは Subversion のみです。
  Subverion と CVS 以外の大半のシステムについては、
  使用経験がないに等しいものばかりです。
  ここにあげた情報は、それぞれのシステムのウェブサイトを参考にしたものです。
  <ulink url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>
  もご覧ください。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvs">
<title><emphasis role="bold">CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/cvs/"/></title>

<!--
<para>CVS has been around for a long time, and many developers are
already familiar with it.  In its day it was revolutionary: it was the
first open source version control system with wide-area network access
for developers (as far as I know), and the first to offer anonymous
read-only checkouts, which gave new developers an easy way to get
involved in projects.  CVS versions files only, not directories; it
offers branching, tagging, and good client-side performance, but
doesn't handle large files or binary files very well.  It also does
not support atomic commits.<emphasis>[Disclaimer: I was active in CVS
development for about five years, before helping to start the
Subversion project to replace it.]</emphasis></para>
-->
<para>
  CVS は長い歴史を持っており、多くの開発者にとっておなじみのものです。
  公開された当時は革命的な存在でした。
  オープンソースのバージョン管理システムとしては初めて
  (少なくとも私の知る限り) 離れた場所にいる開発者達によるネットワーク経由のアクセスに対応し、
  また初めて匿名での読み込み専用チェックアウトに対応しました。
  これにより、新しい開発者が容易にプロジェクトに参加できるようになったのです。
  CVS がバージョン管理するのはファイルのみであり、
  ディレクトリのバージョンは管理しません。
  ブランチやタグの機能を持っており、
  クライアント側でも高速に動作しますが、
  巨大なファイルやバイナリファイルはうまく扱うことができません。
  また、アトミックなコミットにも対応していません。
  <emphasis>
    [注: 私はかつて、約 5 年にわたって精力的に CVS の開発に携わってきました。
    その後、CVS にかわるシステムとしての Subversion プロジェクトの立ち上げにかかわりました。]
  </emphasis>
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-subversion">
<title><emphasis role="bold">Subversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://subversion.tigris.org/"/></title>

<!--
<para>Subversion was written first and foremost to be a replacement
for CVS&mdash;that is, to approach version control in roughly the same
way CVS does, but without the problems and feature omissions that most
frequently annoy users of CVS.  One of Subversion's goals is for
people already accustomed to CVS to find the transition to Subversion
relatively smooth.  There is not space here to go into detail about
Subversion's features; see its web site for more information.
<emphasis>[Disclaimer: I am involved in Subversion development, and it
is the only one of these systems that I use on a regular
basis.]</emphasis></para>
-->
<para>
  Subversion が書かれた最大の目的は、CVS にとってかわるシステムを作ることです。
  CVS とほぼ同じような方法でバージョン管理を行いますが、
  CVS ユーザーがしばしば悩まされていた問題点や機能不備などを解消するようにしています。
  Subversion の目標のひとつは、CVS になじみのある人たちが
  比較的スムーズに Subversion に移行できるようにすることです。
  Subverion の機能についてここで事細かに語ることは控えます。
  詳細はウェブサイトをご覧ください。
  <emphasis>
    [注: 私は Subversion の開発に参加しています。
    また、この一覧の中で私が常用しているシステムは Subversion だけです。]
  </emphasis>
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-svk">
<title><emphasis role="bold">SVK</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://svk.elixus.org/"/></title>

<!--
<para>Although it is built on top of Subversion, SVK probably
resembles some of the decentralized systems below more than it does
Subversion.  SVK supports distributed development, local commits,
sophisticated change merging, and the ability to mirror trees from
non-SVK version control systems.  See its web site for details.</para>
-->
<para>
  Subversion 上で構築されているシステムではあるものの、SVK
  はおそらく Subversion よりも以下にあげる分散管理型のシステムに似ています。
  SVK は、分散型の開発やローカルでのコミットをサポートしています。
  また変更点のマージ機能も洗練されており、
  SVK 以外のバージョン管理システムのツリーを複製する機能もあります。
  詳細はウェブサイトをご覧ください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-mercurial">
<title><emphasis role="bold">Mercurial</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.selenic.com/mercurial/"/></title>

<!--
<para>Mercurial is a distributed version control system that offers,
among other things, "complete cross-indexing of files and changesets;
bandwidth and CPU efficient HTTP and SSH sync protocols; arbitrary
merging between developer branches; integrated stand-alone web
interface; [portability to] UNIX, MacOS X, and Windows" and more (the
preceding feature list was paraphrased from the Mercurial web
site).</para>
-->
<para>
  Mercurial は分散型のバージョン管理システムで、
  "ファイルやチェンジセットの完全なクロスインデクシング、
  ネットワーク帯域や CPU に優しい同期プロトコル (HTTP および SSH)、
  任意の開発ブランチ間でのマージ、単体で動作するウェブインターフェイスの同梱、
  UNIX でも MacOS X でも Windows でも同じように動作する"
  といった機能を持っています
  (この機能一覧は、Mercurial のウェブサイトの内容をまとめたものです)。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-git">
<title><emphasis role="bold">GIT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://git.or.cz/"/></title>

<!--
<para>GIT is a project started by Linus Torvalds to manage the Linux
kernel source tree.  At first GIT was rather narrowly focused on the
needs of kernel development, but it has expanded beyond that and is
now used by projects other than the Linux kernel.  Its home page says
it is "...designed to handle very large projects with speed and
efficiency; it is used mainly for various open source projects, most
notably the Linux kernel.  Git falls in the category of distributed
source code management tools, similar to e.g. GNU Arch or Monotone (or
BitKeeper in the proprietary world).  Every Git working directory is a
full-fledged repository with full revision tracking capabilities, not
dependent on network access or a central server."</para>
-->
<para>
  GIT は、Linus Torvalds が Linux
  カーネルのソースツリーを管理するためにはじめたプロジェクトです。
  最初のうちはカーネルの開発で必要となる機能に特化したものでしたが、
  今では機能も増え、Linux カーネル以外のプロジェクトでも用いられるようになっています。
  ホームページでの説明によると、GIT は
  「……巨大なプロジェクトを高速かつ効率的に管理するように設計されており、
  主に各種オープンソースプロジェクトで使用されています。
  中でも有名なのは Linux カーネルです。
  Git は分散型ソースコード管理ツールの一種で、GNU Arch や Monotone
  (あるいは独占的ソフトウェア界での BitKeeper) と似ています。
  Git のすべての作業ディレクトリは、
  それ単体で完全なリビジョン追跡機能を持つリポジトリであり、
  ネットワークアクセスや中央サーバがなくても機能します」。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar">
<title><emphasis role="bold">Bazaar</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar-vcs.org/"/></title>

<!--
<para>Bazaar (or bzr) is a distributed version control system that Just
Works and an official GNU project. It offers a choice between centralized
and decentralized work within a single project.  For example, when in the
office, you can work on a shared central branch; for experimental changes
or offline work, you can make a branch on your laptop and merge back in
later. In the past, Bazaar was under development as a fork of GNU Arch.
But currently, it is written from scratch and has no relation with GNU Arch.</para>
-->

<para>
  Bazaar (bzr) は インストールすればすぐに使うことができる分散バージョン管理システムで、GNU の公式プロジェクトです。
  ひとつのプロジェクト内で、中央管理型の作業か分散型の作業かを選択することができます。
  たとえば、オフィス内でふだんは共有の中央ブランチで作業し、
  実験的な変更を行ったりオフラインになったりするときには
  ラップトップ上にブランチを作成してあとでマージするといったことが可能です。
  以前は GNU Arch の派生プロジェクトとして開発が行われていましたが、現在は1から書き直され、GNU Arch とは関連がなくなっています。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-darcs">
<title><emphasis role="bold">Darcs</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://darcs.net/"/></title>

<!--
<para>"David's Advanced Revision Control System is yet another
replacement for CVS.  It is written in Haskell, and has been used on
Linux, MacOS X, FreeBSD, OpenBSD and Microsoft Windows.  Darcs
includes a cgi script, which can be used to view the contents of your
repository."</para>
-->
<para>
  「David's Advanced Revision Control System は、
  CVS のかわりとなるソフトウェアのひとつです。Haskell で書かれており、
  Linux や MacOS X、FreeBSD、OpenBSD そして Microsoft Windows
  で動作します。Darcs には cgi スクリプトも含まれており、
  これを用いてリポジトリの中身を見ることができます。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arch">
<title><emphasis role="bold">Arch</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.gnu.org/software/gnu-arch/"/></title>

<!--
<para>GNU Arch supports both distributed and centralized development.
Developers commit their changes to an "archive", which may be local,
and the changes can be pushed and pulled to other archives as the
managers of those archives see fit.  As such a methodology implies,
Arch has more sophisticated merge support than CVS.  Arch also allows
one to easily make branches of archives to which one does not have
commit access.  This is only a brief summary; see the Arch web pages
for details.</para>
-->
<para>
  GNU Arch は、分散型の開発と中央管理型の開発の両方に対応しています。
  開発者は、変更内容を「アーカイブ」にコミットします。
  アーカイブはローカルに持つこともできます。
  また、変更内容を他のアーカイブとの間でやりとりし、
  アーカイブの管理者がそれを適用することもできます。
  その方式からも想像できるように、Arch のマージ機能は
  CVS のものより洗練されています。Arch はまた、
  コミット権を持たない人でも簡単にアーカイブのブランチを作れるようになっています。
  ここで紹介したのは概要にすぎません。詳細は Arch のウェブページをご覧ください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-monotone">
<title><emphasis role="bold">monotone</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.venge.net/monotone/"/></title>

<!--
<para>"monotone is a free distributed version control system.  it
provides a simple, single-file transactional version store, with fully
disconnected operation and an efficient peer-to-peer synchronization
protocol.  it understands history-sensitive merging, lightweight
branches, integrated code review and 3rd party testing.  it uses
cryptographic version naming and client-side RSA certificates.  it has
good internationalization support, has no external dependencies, runs
on linux, solaris, OSX, and windows, and is licensed under the GNU
GPL."</para>
-->
<para>
  「monotone は、フリーな分散型バージョン管理システムです。
   単一のファイルからなるシンプルかつトランザクショナルな形式でデータを格納し、
   ネットワークから切断されていても完全に機能します。また、
   効率的なピアツーピア同期プロトコルを持っています。
   履歴を考慮したマージ、軽量なブランチ作成、コードレビュー、
   サードパーティによるテストなどの機能があります。
   バージョンの命名は暗号化されており、クライアント側で RSA 証明書を使用します。
  国際化対応も十分にされており、別のソフトウェアに依存することもありません。
  linux や solaris、OSX、windows で動作し、GNU GPL のもとで公開されています」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-codeville">
<title><emphasis role="bold">Codeville</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://codeville.org/"/></title>

<!--
<para>"Why yet another version control system? All other version
control systems require that you keep careful track of the
relationships between branches so as not have to repeatedly merge the
same conflicts.  Codeville is much more anarchic.  It allows you to
update from or commit to any repository at any time with no
unnecessary re-merges."</para>
-->
<para>
  「なぜいまだにそんなバージョン管理システムを使ってるんですか?
  ほかのバージョン管理システムってみんな、
  ブランチをマージするときの衝突を起こさないように
  細心の注意を払わなければならいじゃないですか。
  Codeville ならそんな心配は無用。
  いつでもどのリポジトリからでもアップデート可能で、
  無駄なマージは発生しません」
</para>

<!--
<para>"Codeville works by creating an identifier for each change which
is done, and remembering the list of all changes which have been
applied to each file and the last change which modified each line in
each file.  When there's a conflict, it checks to see if one of the
two sides has already been applied to the other one, and if so makes
the other side win automatically.  When there's an actual not
automatically mergeable version conflict, Codeville behaves in almost
exactly the same way as CVS."</para>
-->
<para>
  「Codeville は、それぞれの変更に対して ID を作成します。
  そして、各ファイルに対して行われたすべての変更の一覧と
  ファイル内の各行がどの変更で更新されたのかを覚えておきます。
  衝突が発生した場合は、お互いが相手側の変更を適用済みかどうかを調べ、
  変更済みであった場合は自動的にそちらが優先されます。
  自動的にマージできない衝突があった場合は、Codeville
  の挙動は CVS とほぼ同じものとなります」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-vesta">
<title><emphasis role="bold">Vesta</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.vestasys.org/"/></title>

<!--
<para>"Vesta is a portable SCM [Software Configuration Management]
system targeted at supporting development of software systems of
almost any size, from fairly small (under 10,000 source lines) to very
large (10,000,000 source lines)."</para>
-->
<para>
  「Vesta はポータブルな SCM [ソフトウェア設定管理]
  システムで、小規模 (ソースコード 10,000 行未満) から大規模
  (ソースコード 10,000,000 行以上)
  まであらゆる規模のソフトウェアシステムの開発をサポートします」
</para>

<!--
<para>"Vesta is a mature system.  It is the result of over 10 years of
research and development at the Compaq/Digital Systems Research
Center, and it was in production use by Compaq's Alpha microprocessor
group for over two and a half years.  The Alpha group had over 150
active developers at two sites thousands of miles apart, on the east
and west coasts of the United States.  The group used Vesta to manage
builds with as much as 130 MB of source data, each producing 1.5 GB of
derived data.  The builds done at the eastern site in an average day
produced about 10-15 GB of derived data, all managed by Vesta.
Although Vesta was designed with software development in mind, the
Alpha group demonstrated the system's flexibility by using it for
hardware development, checking their hardware description language
files into Vesta's source code control facility and building
simulators and other derived objects with Vesta's builder.  The
members of the former Alpha group, now a part of Intel, are continuing
to use Vesta today in a new microprocessor project."</para>
-->
<para>
  「Vesta は円熟したシステムです。Compaq/Digital Systems Research Center
  における 10 年以上の研究開発の結果として生まれたものであり、
  2 年半以上にわたって Compaq の Alpha マイクロプロセッサグループが実際に使用しています。
  Alpha グループには 150 人以上のアクティブな開発者がおり、
  彼らは何千マイルも離れた 2 拠点 (アメリカの東海岸と西海岸)
  で働いています。彼らが Vesta を使って管理しているのは、
  130 MB におよぶソースデータとビルドで、
  そこから生成される派生データは 1.5 GB になります。
  ビルド作業は東海岸の拠点で行われ、平均して 10-15 GB
  の派生データを生成しますが、これらもすべて Vesta で管理しています。
  Vesta はソフトウェア開発のために設計されたものですが、
  Alpha グループはこのシステムがハードウェア開発にも使えることを示しました。
  ハードウェア記述言語ファイルを Vesta のソースコード管理機構にチェックインし、
  Vesta のビルダーを使ってシミュレータやその他の派生オブジェクトをビルドしたのです。
  かつての Alpha グループのメンバーは今は Intel にいますが、
  今もなお新しいマイクロプロセッサのプロジェクトで Vesta を使い続けています」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-aegis">
<title><emphasis role="bold">Aegis</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://aegis.sourceforge.net/"/></title>

<!--
<para>"Aegis is a transaction-based software configuration management
system.  It provides a framework within which a team of developers may
work on many changes to a program independently, and Aegis coordinates
integrating these changes back into the master source of the program,
with as little disruption as possible."</para>
-->
<para>
  「Aegis は、トランザクションベースのソフトウェア構成管理システムです。
   Aegis が提供するフレームワークを使用すると、
   開発者チームの各メンバーがそれぞれ独自にプログラムに変更を加えることができます。
   Aegis が各変更点を統合してプログラムのマスターソースに書き戻しますが、
   その際に面倒な作業が極力起こらないようにします」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvsnt">
<title><emphasis role="bold">CVSNT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://cvsnt.org/"/></title>

<!--
<para>"CVSNT is an advanced multiplatform version control system.
Compatible with the industry standard CVS protocol it now supports
many more features. ... CVSNT is Open Source, Free software licensed
under the GNU General Public License."  Its feature list includes
authentication via all standard CVS protocols, plus Windows specific
SSPI and Active Directory; secure transport support, via sserver or
encrypted SSPI; cross platform (runs in Windows or Unix environments);
NT version is fully integrated with Win32 system; MergePoint
processing means no more tagging to merge; under active
development.</para>
-->
<para>
  「CVSNT は、高機能なマルチプラットフォーム対応バージョン管理システムです。
  業界標準の CVS プロトコルをサポートしているだけでなく、さまざまな機能があります。
  CVSNT はオープンソースで、GNU Geleral Public License で公開されているフリーソフトウェアです」
  機能一覧には以下のような内容が書かれています。
  すべての標準 CVS プロトコルによる認証だけでなく
  Windows 固有の SSPI や Active Directory による認証、
  sserver あるいは暗号化 SSPI による安全な転送のサポート、
  クロスプラットフォーム (Windows でも Unix 環境でも動作する)、
  Win32 システムと完全に統合した NT バージョン、
  マージポイント処理 (タグを打たなくてもマージができる)、
  活発に開発が進行中です。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-meta-cvs">
<title><emphasis role="bold">META-CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://common-lisp.net/project/meta-cvs/"/></title>

<!--
<para>"Meta-CVS is a version control system built around CVS.
Although it retains most of the features of CVS, including all of the
networking support, it is more capable than CVS, and easier to use."
The features listed on META-CVS's web site include: directory
structure versioning, improved file type handling, simpler and more
user-friendly branching and merging, support for symbolic links,
property lists attached to versioned data, improved third-party data
importing, and easy upgrading from stock CVS.</para>
-->
<para>
  「Meta-CVS は CVS を基にしてつくられたバージョン管理システムです。
  ネットワーク対応を含む CVS のほとんどの機能を保持しているだけでなく、
  CVS よりも機能的で簡単に使用できます」
  META-CVS のウェブサイトの機能一覧には、次のような機能が記載されています。
  ディレクトリ構造のバージョン管理、より改善されたファイルタイプ処理、
  シンプルでユーザーに優しいブランチ/マージ処理、シンボリックリンクのサポート、
  バージョン管理データへのプロパティリストの付加、
  より改善されたサードパーティデータの取り込み処理、
  そして CVS からの移行が容易であるということです。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-opencm">
<title><emphasis role="bold">OpenCM</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.opencm.org/"/></title>

<!--
<para>"OpenCM is designed as a secure, high-integrity replacement for
CVS.  A list of the key features can be found on the features page.
While not as 'feature rich' as CVS, it supports some useful things
that CVS lacks.  Briefly, OpenCM provides first-class support for
renames and configuration, cryptographic authentication and access
control, and first-class branches."</para>
-->
<para>
  「OpenCM は、安全で高品質な CVS 代替システムとして設計されています。
  主要な機能については機能一覧ページに掲載されています。CVS ほど
  『機能満載』なわけではありませんが、CVS にはない便利な機能をいくつか持っています。
  簡単にまとめると、OpenCM はファイルのリネームに対応しており、
  また暗号化した認証処理やアクセス制御、そして高機能なブランチ処理にも対応しています」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-prcs">
<title><emphasis role="bold">PRCS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://prcs.sourceforge.net/"/></title>

<!--
<para>"PRCS, the Project Revision Control System, is the front end to
a set of tools that (like CVS) provide a way to deal with sets of
files and directories as an entity, preserving coherent versions of
the entire set. ... Its purpose is similar to that of SCCS, RCS, and
CVS, but (according to its authors, at least), it is much simpler than
any of those systems."</para>
-->
<para>
  「PRCS は Project Revision Control System の略で、(CVS のように)
  ファイルやディレクトリのバージョンを管理するツール群のフロントエンドとなります。
  その目的は SCCS や RCS、CVS と同じですが、(少なくとも作者によると)
  それらのシステムよりもずっとシンプルだということです」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arx">
<title><emphasis role="bold">ArX</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/arx/"/></title>

<!--
<para>ArX is a distributed version control system offering branching
and merging features, cryptographic data integrity verification, and
the ability to publish archives easily on any HTTP server.</para>
-->
<para>
  ArX は分散型のバージョン管理システムです。ブランチやマージ機能、
  暗号化したデータの整合性の検証機能があります。また、
  任意の HTTP サーバ上で用意にアーカイブを公開できる機能もあります。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-sourcejammer">
<title><emphasis role="bold">SourceJammer</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.sourcejammer.org/"/></title>

<!--
<para>"SourceJammer is a source control and versioning system written
in Java.  It consists of a server-side component that maintains the
files and version history, and handles check-in, check-out, etc. and
other commands; and a client-side component that makes requests of the
server and manages the files on the client-side file system."</para>
-->
<para>
  「SourceJammer は、Java で書かれたソース管理/バージョン管理システムです。
  サーバサイドのコンポーネントとクライアントサイドのコンポーネントで構成されており、
  サーバサイドではファイルやバージョン履歴の管理、チェックインやチェックアウトなどの処理、
  そしてその他のコマンドを扱います。
  クライアントサイドでは、サーバからのリクエストを受けてファイルシステム上のファイルを管理します」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-fastcst">
<title><emphasis role="bold">FastCST</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.zedshaw.com/projects/fastcst/index.html"/></title>

<!--
<para>"A 'modern' system that uses changesets over file revisions and
distributed operation rather than centralized control.  As long as you
have an e-mail account you can use FastCST.  For larger distribution
you only need an FTP server and/or an HTTP server or use the built in
'serve' command to serve your stuff up directly.  All changesets are
universally unique and have tons of meta-data so you can reject
anything you don't [want] before you try it.  Merging is done by comparing a
merged changeset against the current directory contents, rather than
trying to merge it with another changeset."</para>
-->
<para>
  「ファイル単位のリビジョンではなくチェンジセットを扱い、
  中央管理ではなく分散型で処理を行う『モダンな』システムです。
  メールアカウントさえあれば FastCST を使うことができます。
  大規模な分散開発に必要なのは、FTP サーバあるいは HTTP サーバのみです。
  あるいは、組み込みの 'serve' コマンドを使って直接管理することもできます。
  すべてのチェンジセットは完全に一意であり、大量のメタデータを含んでいます。
  そのため、チェンジセットをわざわざ適用してみなくても、不要なものを判断することができます。
  マージ処理は、別のチェンジセットにマージするのではなく、
  マージされたチェンジセットを現在のディレクトリの内容と比較することで行います」
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-superversion">
<title><emphasis role="bold">Superversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.superversion.org/"/></title>

<!--
<para>"Superversion is a multi-user distributed version control system
based on change sets. It aims to be an industrial-strength, open
source alternative to commercial solutions that is equally easy to use
(or even easier) and similarly powerful. In fact, intuitive and
efficient usability has been one of the top priorities in
Superversion's development from the very beginning."</para>
-->
<para>
  「Superversion は、マルチユーザー対応の分散型バージョン管理システムで、
  チェンジセットにもとづいた処理を行います。
  商用製品に取って代わるオープンソースの選択肢として、
  商用製品なみ (あるいはそれ以上) の使いやすさと同等の機能を持つことを目指しています。
  実際のところ、直感的で使いやすい操作性というのは Superversion
  の開発が始まった当初から最も重視してきたものです」
</para>

</sect2>

</simplesect>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
