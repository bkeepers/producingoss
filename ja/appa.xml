<appendix id="vc-systems">
<!-- <title>Free Version Control Systems</title> -->
<title>フリーなバージョン管理システム</title>

<simplesect>

<!--
<para>These are all the open source version control systems I was
aware of as of mid-2007.  The only one I use on a regular basis is
Subversion.  I have little or no experience with most of these
systems, except for Subversion and CVS; the information here is taken
from their web sites.  See also
<ulink
url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>.
</para>
-->
<para>
  2007 年半ばの時点で私が把握しているオープンソースのバージョン管理システムは、
  これらがすべてです。このうち、私が常用しているのは Subversion のみです。
  Subverion と CVS 以外の大半のシステムについては、
  使用経験がないに等しいものばかりです。
  ここにあげた情報は、それぞれのシステムのウェブサイトを参考にしたものです。
  <ulink url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>
  もごらんください。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvs">
<title><emphasis role="bold">CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/cvs/"/></title>

<!--
<para>CVS has been around for a long time, and many developers are
already familiar with it.  In its day it was revolutionary: it was the
first open source version control system with wide-area network access
for developers (as far as I know), and the first to offer anonymous
read-only checkouts, which gave new developers an easy way to get
involved in projects.  CVS versions files only, not directories; it
offers branching, tagging, and good client-side performance, but
doesn't handle large files or binary files very well.  It also does
not support atomic commits.<emphasis>[Disclaimer: I was active in CVS
development for about five years, before helping to start the
Subversion project to replace it.]</emphasis></para>
-->
<para>
  CVS は長い歴史を持っており、多くの開発者にとっておなじみのものです。
  公開された当時は革命的な存在でした。
  オープンソースのバージョン管理システムとしては初めて
  (少なくとも私の知る限り) 離れた場所にいる開発者達によるネットワーク経由のアクセスに対応し、
  また初めて匿名での読み込み専用チェックアウトに対応しました。
  これにより、新しい開発者が容易にプロジェクトに参加できるようになったのです。
  CVS がバージョン管理するのはファイルのみであり、
  ディレクトリのバージョンは管理しません。
  ブランチやタグの機能を持っており、
  クライアント側でも高速に動作しますが、
  巨大なファイルやバイナリファイルはうまく扱うことができません。
  また、アトミックなコミットにも対応していません。
  <emphasis>
    [注: 私はかつて、約 5 年にわたって精力的に CVS の開発に携わってきました。
    その後、CVS にかわるシステムとしての Subversion プロジェクトの立ち上げにかかわりました。]
  </emphasis>
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-subversion">
<title><emphasis role="bold">Subversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://subversion.tigris.org/"/></title>

<!--
<para>Subversion was written first and foremost to be a replacement
for CVS&mdash;that is, to approach version control in roughly the same
way CVS does, but without the problems and feature omissions that most
frequently annoy users of CVS.  One of Subversion's goals is for
people already accustomed to CVS to find the transition to Subversion
relatively smooth.  There is not space here to go into detail about
Subversion's features; see its web site for more information.
<emphasis>[Disclaimer: I am involved in Subversion development, and it
is the only one of these systems that I use on a regular
basis.]</emphasis></para>
-->
<para>
  Subversion が書かれた最大の目的は、CVS にとってかわるシステムを作ることです。
  CVS とほぼ同じような方法でバージョン管理を行いますが、
  CVS ユーザがしばしば悩まされていた問題点や機能不備などを解消するようにしています。
  Subversion の目標のひとつは、CVS になじみのある人たちが
  比較的スムーズに Subversion に移行できるようにすることです。
  Subverion の機能についてここで事細かに語ることは控えます。
  詳細はウェブサイトをごらんください。
  <emphasis>
    [注: 私は Subversion の開発に参加しています。
    また、この一覧の中で私が常用しているシステムは Subversion だけです。]
  </emphasis>
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-svk">
<title><emphasis role="bold">SVK</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://svk.elixus.org/"/></title>

<!--
<para>Although it is built on top of Subversion, SVK probably
resembles some of the decentralized systems below more than it does
Subversion.  SVK supports distributed development, local commits,
sophisticated change merging, and the ability to mirror trees from
non-SVK version control systems.  See its web site for details.</para>
-->
<para>
  Subversion 上で構築されているシステムではあるものの、SVK
  はおそらく Subversion よりも以下にあげる分散管理型のシステムに似ています。
  SVK は、分散型の開発やローカルでのコミットをサポートしています。
  また変更点のマージ機能も洗練されており、
  SVK 以外のバージョン管理システムのツリーを複製する機能もあります。
  詳細はウェブサイトをごらんください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-mercurial">
<title><emphasis role="bold">Mercurial</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.selenic.com/mercurial/"/></title>

<para>Mercurial is a distributed version control system that offers,
among other things, "complete cross-indexing of files and changesets;
bandwidth and CPU efficient HTTP and SSH sync protocols; arbitrary
merging between developer branches; integrated stand-alone web
interface; [portability to] UNIX, MacOS X, and Windows" and more (the
preceding feature list was paraphrased from the Mercurial web
site).</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-git">
<title><emphasis role="bold">GIT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://git.or.cz/"/></title>

<para>GIT is a project started by Linus Torvalds to manage the Linux
kernel source tree.  At first GIT was rather narrowly focused on the
needs of kernel development, but it has expanded beyond that and is
now used by projects other than the Linux kernel.  Its home page says
it is "...designed to handle very large projects with speed and
efficiency; it is used mainly for various open source projects, most
notably the Linux kernel.  Git falls in the category of distributed
source code management tools, similar to e.g. GNU Arch or Monotone (or
BitKeeper in the proprietary world).  Every Git working directory is a
full-fledged repository with full revision tracking capabilities, not
dependent on network access or a central server."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar">
<title><emphasis role="bold">Bazaar</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar.canonical.com/"/></title>

<para>Bazaar is still under development.  It will be an implementation
of the GNU Arch protocol, will retain compatability with the GNU Arch
protocol as it evolves, and work with the GNU Arch community process
for any protocol changes that might be required for user
friendliness.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar-ng">
<title><emphasis role="bold">Bazaar-NG</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar-ng.org/"/></title>

<para>Bazaar-NG (or bzr) is currently under development by Canonical
(<ulink url="http://canonical.com/"/>).  It offers a choice between
centralized and decentralized work within a single project.  For
example, when in the office, you can work on a shared central branch;
for experimental changes or offline work, you can make a branch on your
laptop and merge back in later.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-darcs">
<title><emphasis role="bold">Darcs</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://abridgegame.org/darcs/"/></title>

<para>"David's Advanced Revision Control System is yet another
replacement for CVS.  It is written in Haskell, and has been used on
Linux, MacOS X, FreeBSD, OpenBSD and Microsoft Windows.  Darcs
includes a cgi script, which can be used to view the contents of your
repository."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arch">
<title><emphasis role="bold">Arch</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.gnu.org/software/gnu-arch/"/></title>

<para>GNU Arch supports both distributed and centralized development.
Developers commit their changes to an "archive", which may be local,
and the changes can be pushed and pulled to other archives as the
managers of those archives see fit.  As such a methodology implies,
Arch has more sophisticated merge support than CVS.  Arch also allows
one to easily make branches of archives to which one does not have
commit access.  This is only a brief summary; see the Arch web pages
for details.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-monotone">
<title><emphasis role="bold">monotone</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.venge.net/monotone/"/></title>

<para>"monotone is a free distributed version control system.  it
provides a simple, single-file transactional version store, with fully
disconnected operation and an efficient peer-to-peer synchronization
protocol.  it understands history-sensitive merging, lightweight
branches, integrated code review and 3rd party testing.  it uses
cryptographic version naming and client-side RSA certificates.  it has
good internationalization support, has no external dependencies, runs
on linux, solaris, OSX, and windows, and is licensed under the GNU
GPL."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-codeville">
<title><emphasis role="bold">Codeville</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://codeville.org/"/></title>

<para>"Why yet another version control system? All other version
control systems require that you keep careful track of the
relationships between branches so as not have to repeatedly merge the
same conflicts.  Codeville is much more anarchic.  It allows you to
update from or commit to any repository at any time with no
unnecessary re-merges."</para>

<para>"Codeville works by creating an identifier for each change which
is done, and remembering the list of all changes which have been
applied to each file and the last change which modified each line in
each file.  When there's a conflict, it checks to see if one of the
two sides has already been applied to the other one, and if so makes
the other side win automatically.  When there's an actual not
automatically mergeable version conflict, Codeville behaves in almost
exactly the same way as CVS."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-vesta">
<title><emphasis role="bold">Vesta</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.vestasys.org/"/></title>

<para>"Vesta is a portable SCM [Software Configuration Management]
system targeted at supporting development of software systems of
almost any size, from fairly small (under 10,000 source lines) to very
large (10,000,000 source lines)."</para>

<para>"Vesta is a mature system.  It is the result of over 10 years of
research and development at the Compaq/Digital Systems Research
Center, and it was in production use by Compaq's Alpha microprocessor
group for over two and a half years.  The Alpha group had over 150
active developers at two sites thousands of miles apart, on the east
and west coasts of the United States.  The group used Vesta to manage
builds with as much as 130 MB of source data, each producing 1.5 GB of
derived data.  The builds done at the eastern site in an average day
produced about 10-15 GB of derived data, all managed by Vesta.
Although Vesta was designed with software development in mind, the
Alpha group demonstrated the system's flexibility by using it for
hardware development, checking their hardware description language
files into Vesta's source code control facility and building
simulators and other derived objects with Vesta's builder.  The
members of the former Alpha group, now a part of Intel, are continuing
to use Vesta today in a new microprocessor project."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-aegis">
<title><emphasis role="bold">Aegis</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://aegis.sourceforge.net/"/></title>

<para>"Aegis is a transaction-based software configuration management
system.  It provides a framework within which a team of developers may
work on many changes to a program independently, and Aegis coordinates
integrating these changes back into the master source of the program,
with as little disruption as possible."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvsnt">
<title><emphasis role="bold">CVSNT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://cvsnt.org/"/></title>

<para>"CVSNT is an advanced multiplatform version control system.
Compatible with the industry standard CVS protocol it now supports
many more features. ... CVSNT is Open Source, Free software licensed
under the GNU General Public License."  Its feature list includes
authentication via all standard CVS protocols, plus Windows specific
SSPI and Active Directory; secure transport support, via sserver or
encrypted SSPI; cross platform (runs in Windows or Unix environments);
NT version is fully integrated with Win32 system; MergePoint
processing means no more tagging to merge; under active
development.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-meta-cvs">
<title><emphasis role="bold">META-CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://users.footprints.net/~kaz/mcvs.html"/></title>

<para>"Meta-CVS is a version control system built around CVS.
Although it retains most of the features of CVS, including all of the
networking support, it is more capable than CVS, and easier to use."
The features listed on META-CVS's web site include: directory
structure versioning, improved file type handling, simpler and more
user-friendly branching and merging, support for symbolic links,
property lists attached to versioned data, improved third-party data
importing, and easy upgrading from stock CVS.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-opencm">
<title><emphasis role="bold">OpenCM</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.opencm.org/"/></title>

<para>"OpenCM is designed as a secure, high-integrity replacement for
CVS.  A list of the key features can be found on the features page.
While not as 'feature rich' as CVS, it supports some useful things
that CVS lacks.  Briefly, OpenCM provides first-class support for
renames and configuration, cryptographic authentication and access
control, and first-class branches."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-stellation">
<title><emphasis role="bold">Stellation</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.eclipse.org/stellation/"/></title>

<para>"Stellation is an advanced, extensible software configuration
management system, originally developed at IBM Research.  While
Stellation provides all of the standard functions available in any SCM
system, it is distinguished by a number of advanced features, such as
task-oriented change management, consistent project versioning and
lightweight branching, intended to ease the development of software
systems by large groups of loosely coordinated developers."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-prcs">
<title><emphasis role="bold">PRCS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://prcs.sourceforge.net/"/></title>

<para>"PRCS, the Project Revision Control System, is the front end to
a set of tools that (like CVS) provide a way to deal with sets of
files and directories as an entity, preserving coherent versions of
the entire set. ... Its purpose is similar to that of SCCS, RCS, and
CVS, but (according to its authors, at least), it is much simpler than
any of those systems."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arx">
<title><emphasis role="bold">ArX</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/arx/"/></title>

<para>ArX is a distributed version control system offering branching
and merging features, cryptographic data integrity verification, and
the ability to publish archives easily on any HTTP server.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-sourcejammer">
<title><emphasis role="bold">SourceJammer</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://sourcejammer.org/"/></title>

<para>"SourceJammer is a source control and versioning system written
in Java.  It consists of a server-side component that maintains the
files and version history, and handles check-in, check-out, etc. and
other commands; and a client-side component that makes requests of the
server and manages the files on the client-side file system."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-fastcst">
<title><emphasis role="bold">FastCST</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.zedshaw.com/projects/fastcst/index.html"/></title>

<para>"A 'modern' system that uses changesets over file revisions and
distributed operation rather than centralized control.  As long as you
have an e-mail account you can use FastCST.  For larger distribution
you only need an FTP server and/or an HTTP server or use the built in
'serve' command to serve your stuff up directly.  All changesets are
universally unique and have tons of meta-data so you can reject
anything you don't [want] before you try it.  Merging is done by comparing a
merged changeset against the current directory contents, rather than
trying to merge it with another changeset."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-superversion">
<title><emphasis role="bold">Superversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.superversion.org/"/></title>

<para>"Superversion is a multi-user distributed version control system
based on change sets. It aims to be an industrial-strength, open
source alternative to commercial solutions that is equally easy to use
(or even easier) and similarly powerful. In fact, intuitive and
efficient usability has been one of the top priorities in
Superversion's development from the very beginning."</para>

</sect2>

</simplesect>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
