<chapter id="getting-started">

<!--
<title>Getting Started</title>
-->
<title>さあ始めましょう</title>

<simplesect>

<!--
<para>The classic model of how free software projects get started was
supplied by Eric Raymond, in a now-famous paper on open source
processes entitled <citetitle>The Cathedral and the
Bazaar</citetitle>.  He wrote:</para>
-->
<para>
  フリーソフトウェアプロジェクトがどのようにして始まるのかについては、
  Eric Raymond が説明しています。彼は、今や超有名になった文書
  「<citetitle>伽藍とバザール (The Cathedral and the Bazaar)</citetitle>」
  の中で次のように述べています。
</para>

    <blockquote>
<!--
      <para><emphasis>Every good work of software starts by scratching
      a developer's personal itch.</emphasis></para>
-->
      <para><emphasis>
        よいソフトはすべて、開発者の個人的な悩み解決から始まる。
      </emphasis></para>

<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis>)</para>
-->
      <para>(<emphasis role="bold"><ulink
      url="http://www.catb.org/~esr/writings/cathedral-bazaar/"/>
      </emphasis> より引用。日本語訳は <emphasis role="bold"><ulink
      url="http://www.tlug.jp/docs/cathedral-bazaar/cathedral-paper-jp.html"/></emphasis>)</para>
    </blockquote>

<!--
<para>Note that Raymond wasn't saying that open source projects happen
only when some individual gets an itch.  Rather, he was saying that
<emphasis>good</emphasis> software results when the programmer has a
personal interest in seeing the problem solved; the relevance of this
to free software was that a personal itch happened to be the most
frequent motivation for starting a free software project.</para>
-->
<para>
  Raymond は、決して「開発者の個人的な悩み解決」
  だけがオープンソースプロジェクトの始まるきっかけだとは言っていないことに注意しましょう。
  というよりは、プログラマ自身が問題の解決に関心を持っているときに
  よいソフトウェアが出来上がることが多いと言っているのです。
  フリーソフトウェアを作り始める動機としていちばん多いのが
  「個人的な悩み解決」だったということでしょう。
</para>

<!--
<para>This is still how most free software projects are started, but less so
now than in 1997, when Raymond wrote those words.  Today, we have the
phenomenon of organizations&mdash;including for-profit
corporations&mdash;starting large, centrally-managed open source
projects from scratch.  The lone programmer, banging out some code to
solve a local problem and then realizing the result has wider
applicability, is still the source of much new free software, but is
not the only story.</para>
-->
<para>
  現在でも同じ理由で始まるフリーソフトウェアプロジェクトは多いでしょうが、Raymond
  がこの文章を書いた 1997 年当時に比べるとその割合は少なくなっています。
  現在では、巨大な中央管理型のオープンソースプロジェクト
  (営利団体が管理するものも含む) を最初から作ろうとする空気があります。
  一匹狼のプログラマが個人的な問題を解決するためにガシガシ書いたコードが
  結果として広く受け入れられるということは今でもあるでしょうが、
  いまやそれだけではなくなったということです。
</para>

<!--
<para>Raymond's point is still insightful, however.  The essential
condition is that the producers of the software have a direct interest
in its success, because they use it themselves.  If the software
doesn't do what it's supposed to do, the person or organization
producing it will feel the dissatisfaction in their daily work.  For
example, the OpenAdapter project (<ulink
url="http://www.openadapter.org/"/>), which was started by investment
bank Dresdner Kleinwort Wasserstein as an open source framework for
integrating disparate financial information systems, can hardly be
said to scratch any individual programmer's personal itch.  It
scratches an institutional itch.  But that itch arises directly from
the experiences of the institution and its partners, and therefore if
the project fails to relieve them, they will know.  This arrangement
produces good software because the feedback loop flows in the right
direction.  The program isn't being written to be sold to someone else
so they can solve <emphasis>their</emphasis> problem.  It's being
written to solve one's <emphasis>own</emphasis> problem, and then
shared with everyone, much as though the problem were a disease and
the software were medicine whose distribution is meant to completely
eradicate the epidemic.</para>
-->
<para>
  しかし、Raymond の指摘は今でも洞察に満ちています。
  ソフトウェアの作者自身がそのソフトウェアに興味を持っているというのは、
  成功するために必要不可欠なことです。なぜなら、
  彼らは自分自身でそれを使うことになるからです。
  もしそのソフトウェアが期待通りに動かなければ、
  日々それを使用している作者は不満に思うことになるでしょう。
  たとえば OpenAdapter プロジェクト (<ulink url="http://www.openadapter.org/"/>)
  を考えてみましょう。これは投資銀行 Dresdner Kleinwort Wasserstein
  が始めたオープンソースのフレームワークで、
  さまざまな金融情報システムを統合するためのものです。
  どう考えても、これは「開発者の個人的な悩み解決」
  のために作られたものとはいえないでしょう。
  どちらかというと「制度上の問題を解決」するためのものです。
  しかし、この問題はその機関とパートナーの経験から直接くるものです。
  したがって、もしこのプロジェクトがうまくいかなければ、それが直接影響することになるでしょう。
  このようなプロジェクトは、よりよいソフトウェアを産み出すでしょう。
  なぜなら、あるべき方向に導こうとみんながフィードバックを行うからです。
  プログラムというのは、見知らぬ誰かが彼ら自身の問題を解決できるように書くものではありません。
  最初は自分たち自身の問題を解決するために書かれます。
  そしてそれがみんなと共有されるようになります。
  「問題」を病気にたとえると、ソフトウェアは薬のようなものです。
  流行病を完全に根絶するために薬をばらまくのと同じように、ソフトウェアを配布するようになります。
</para>

<!--
<para>This chapter is about how to introduce a new free software
project to the world, but many of its recommendations would sound
familiar to a health organization distributing medicine.  The goals
are very similar: you want to make it clear what the medicine does,
get it into the hands of the right people, and make sure that those
who receive it know how to use it.  But with software, you also want
to entice some of the recipients into joining the ongoing research
effort to improve the medicine.</para>
-->
<para>
  本章では、新しいフリーソフトウェアプロジェクトをスタートさせる方法を扱います。
  しかし、本章にかかれている内容の多くは、
  保険所が薬を配布するときの方法と似ていることでしょう。
  両者の目標はよく似ています。薬の効能ははっきり示さないといけないでしょうし、
  それを本当に必要とする人に手渡さないといけないでしょうし、
  またそれを受け取った人は薬の扱い方を知っていなければなりません。
  しかしソフトウェアの場合はさらに、
  薬を改良するための研究に参加してもらうように患者を勧誘するという作業もあります。
</para>

<!--
<para>Free software distribution is a twofold task.  The software
needs to acquire users, and to acquire developers.  These two needs
are not necessarily in conflict, but they do add some complexity to a
project's initial presentation.  Some information is useful for both
audiences, some is useful only for one or the other.  Both kinds of
information should subscribe to the principle of scaled presentation;
that is, the degree of detail presented at each stage should
correspond directly to the amount of time and effort put in by the
reader.  More effort should always equal more reward.  When the two do
not correlate tightly, people may quickly lose faith and stop
investing effort.</para>
-->
<para>
  フリーソフトウェアの配布作業は、通常の２倍の作業量となります。
  ソフトウェアのユーザーを獲得すると同時に、開発者も獲得しなければならないからです。
  これら２つは決して競合するものではありません。
  しかし、プロジェクトをどのように見せるかという点において、これは少々複雑な話になります。
  ユーザーと開発者の両方に対して有用な情報もあれば、
  そのどちらか一方にしか役立たない情報もあります。
  これら２種類の情報の割合には気をつける必要があります。つまり、
  読み手が時間をかけて熱心に読めば読むほど、
  それにあわせた詳細な情報が得られるようになっていなければなりません。
  努力すればするほど、それに対する見返りが得られるべきです。
  ユーザー向けと開発者向けの情報がうまく関連していなければ、
  人はそこに参加する意欲を失ってしまうでしょう。
</para>

<!--
<para>The corollary to this is that <emphasis>appearances
matter</emphasis>.  Programmers, in particular, often don't like to
believe this.  Their love of substance over form is almost a point of
professional pride.  It's no accident that so many programmers exhibit
an antipathy for marketing and public relations work, nor that
professional graphic designers are often horrified at what programmers
come up with on their own.</para>
-->
<para>
  ここで登場するのが、<emphasis>見栄えよくするという問題 (appearances matter)</emphasis> です。
  プログラマという人種は、これをあまり好まないようです。
  見栄えなんかよりもその本質にこだわるという、プロとしてのプライドがあるからです。
  多くのプログラマはマーケティングや広報活動を毛嫌いしているようだし、
  プロのグラフィックデザイナも「プログラマって人たちはいったい何を考えているのか」
  と恐れているようです。
</para>

<!--
<para>This is a pity, because there are situations where form
<emphasis>is</emphasis> substance, and project presentation is one of
them.  For example, the very first thing a visitor learns about a
project is what its web site looks like.  This information is absorbed
before any of the actual content on the site is
comprehended&mdash;before any of the text has been read or links
clicked on.  However unjust it may be, people cannot stop themselves
from forming an immediate first impression.  The site's appearance
signals whether care was taken in organizing the project's
presentation.  Humans have extremely sensitive antennae for detecting
the investment of care.  Most of us can tell in one glance whether a
web site was thrown together quickly or was given serious thought.
This is the first piece of information your project puts out, and the
impression it creates will carry over to the rest of the project by
association.</para>
-->
<para>
  これは残念な話です。見栄えのよさもその本質の一部であり、
  プロジェクトをどのように見せるかも本質の一部であるからです。
  たとえば、あるプロジェクトの存在を知った人が最初に目にするのは、
  そのプロジェクトのウェブサイトの見た目です。
  実際に何が書かれているかとかどこにリンクされているとかよりも前に、
  まずそのウェブサイトがどんな感じかということが目に入るわけです。
  おかしな話だと思われるかもしれませんが、
  第一印象っていうのは結構重要なものなのです。
  見た目に気を使って作ったか否かにかかわらず、そのサイトの見た目は人に何らかの影響を与えます。
  見た目に気を使って作っているかどうかは、意外と簡単に見抜かれてしまうものです。
  たいていの人は、そのサイトが片手間に作られたものか
  よく練りこまれているものかを一目見て判断することができます。
  そのプロジェクトを世に出すにあたって最初に見てもらうところがウェブサイトなのですから、
  そのできばえはプロジェクト全体に大きくかかわってきます。
</para>

<!--
<para>Thus, while much of this chapter talks about the content your
project should start out with, remember that its look and feel matter
too.  Because the project web site has to work for two different types
of visitors&mdash;users and developers&mdash;special attention
must be paid to clarity and directedness.  Although this is not the
place for a general treatise on web design, one principle is important
enough to deserve mention, particularly when the site serves multiple
(if overlapping) audiences: people should have a rough idea where a
link goes before clicking on it.  For example, it should be obvious
<emphasis>from looking at the links</emphasis> to user documentation
that they lead to user documentation, and not to, say, developer
documentation.  Running a project is partly about supplying
information, but it's also about supplying comfort.  The mere presence
of certain standard offerings, in expected places, reassures users and
developers who are deciding whether they want to get involved.  It
says that this project has its act together, has anticipated the
questions people will ask, and has made an effort to answer them in a
way that requires minimal exertion on the part of the asker.  By
giving off this aura of preparedness, the project sends out a message:
"Your time will not be wasted if you get involved," which is exactly
what people need to hear.</para>
-->
<para>
  したがって、本章で「プロジェクトのはじめ方」
  として書かれている内容の多くは、見栄えの問題も含めたものであることを念頭においておきましょう。
  プロジェクトのウェブサイトは (エンドユーザーと開発者の) ２種類の人たちが利用するものなので、
  どちらを対象としたものなのかをはっきりさせる必要があります。
  本書はウェブデザインの専門書ではありませんが、
  ひとつだけ重要な法則を示しておきます。
  このようにさまざまな相手 (部分的に重複することもあるでしょう)
  を対象とするときは特に重要なことです。
  リンク先に何があるのかが、リンクをクリックしなくても大まかにわかるようにしておきましょう。
  たとえば、ユーザー向けのドキュメントなのか開発者向けのドキュメントなのかが、
  <emphasis>リンク先ではなくリンクそのものを見ただけで</emphasis>
  判断できるようにしておくべきです。情報を提供することは、
  プロジェクト運営のひとつの側面になります。そして、それは同時に安心感を提供することにもなります。
  あるべき場所に普通に情報が提供されているというだけで、
  そのプロジェクトに興味を持っているユーザーや開発者は非常に安心します。
  「このプロジェクトはやるべきことを行い、想定される質問に対応し、
  その質問に対する答えをできるだけ簡単に得られるようにしている」という努力が見えるからです。
  このような気合を見せることで「このプロジェクトは決してあなたの期待を裏切らない」
  というメッセージを送ることができます。それこそが皆が聞きたいメッセージです。
</para>


<!-- ======================== subsection ============================== -->
<sect2 id="look-around">
<!--
<title>But First, Look Around</title>
-->
<title>まずは周りを見渡すことから</title>

<!--
<para>Before starting an open source project, there is one important
caveat:</para>
-->
<para>
  オープンソースプロジェクトを始める前に、ひとつ忠告しておきます。
</para>

<!--
<para>Always look around to see if there's an existing project that
does what you want.  The chances are pretty good that whatever problem
you want solved now, someone else wanted solved before you.  If they
did solve it, and released their code under a free license, then
there's no reason for you to reinvent the wheel today.  There are
exceptions, of course: if you want to start a project as an
educational experience, pre-existing code won't help; or maybe the
project you have in mind is so specialized that you know there is zero
chance anyone else has done it.  But generally, there's no point not
looking, and the payoff can be huge.  If the usual Internet search
engines don't turn up anything, try searching on
<ulink url="http://freshmeat.net/"/> (an open source project news
site, about which more will be said later), on
<ulink url="http://www.sourceforge.net/"/>, and in the Free Software
Foundation's directory of free software at
<ulink url="http://directory.fsf.org/"/>.</para>
-->
<para>
  まずは周りを見渡して、同じようなプロジェクトが既に存在しないかどうかを確認しましょう。
  あなたが今まさに解決しようと思っている問題を、
  別の誰かがもっと前に解決しているという可能性は大いにあります。
  別の誰かが同じことをやっていてそれをすでにフリーなライセンスで公開しているのなら、
  あえて車輪の再発明をする必然性はありません。
  もちろん、例外もあります。自分の勉強のためにプロジェクトを開始するのなら、
  既存のコードは助けにならないでしょう。あるいは
  これからはじめようとしているプロジェクトがあまりにも特定の分野に特化したものであり、
  他の人が同じことをしている可能性がゼロに等しい場合などもあるでしょう。
  しかし通常は、あえて周りを見渡さない理由はありません。
  見渡すことで得られる利益はかなりのものになるでしょう。
  一般的なサーチエンジンで結果が得られなければ、
  <ulink url="http://freshmeat.net/"/>
  (オープンソースプロジェクトに関するニュースサイト。
  詳細は後ほど説明します)
  や <ulink url="http://www.sourceforge.net/"/>、
  そして Free Software Foundation のフリーソフトウェアディレクトリ
  (<ulink url="http://directory.fsf.org/"/>) を調べてみましょう。
</para>

<!--
<para>Even if you don't find exactly what you were looking for, you
might find something so close that it makes more sense to join that
project and add functionality than to start from scratch
yourself.</para>
-->
<para>
  そのものずばりのものが見つからなかったとしても、
  よく似たものが見つかるかもしれません。
  そんな場合は、そのプロジェクトに合流して必要な機能を追加するほうが、
  １から作り直すよりもいいでしょう。
</para>

</sect2>

</simplesect>


<!-- ========================== SECTION =========================== -->
<sect1 id="starting-from-what-you-have">
<!--
<title>Starting From What You Have</title>
-->
<title>手持ちのもので始めよう</title>

<!--
<para>You've looked around, found that nothing out there really fits
your needs, and decided to start a new project.</para>
-->
<para>
  まわりを見渡してみたけれど望みどおりのものが見つかりませんでした。
  ということで、結局新しいプロジェクトを始めることになりました。
</para>

<!--
<para>What now?</para>
-->
<para>さて何をしたらいいのでしょう？</para>

<!--
<para>The hardest part about launching a free software project is
transforming a private vision into a public one.  You or your
organization may know perfectly well what you want, but expressing
that goal comprehensibly to the world is a fair amount of work.  It is
essential, however, that you take the time to do it.  You and the
other founders must decide what the project is really about&mdash;that
is, decide its limitations, what it <emphasis>won't</emphasis> do as
well as what it will&mdash;and write up a mission statement.  This
part is usually not too hard, though it can sometimes reveal unspoken
assumptions and even disagreements about the nature of the project,
which is fine: better to resolve those now than later.  The next step
is to package up the project for public consumption, and this is,
basically, pure drudgery.</para>
-->
<para>
  フリーソフトウェアプロジェクトの立ち上げ時に最も厄介なのは、
  個人的なビジョンをみんなにわかる形に置き換えることです。
  あなた (あるいはあなたの属する組織) にとっては何がやりたいのかは明白でしょう。
  しかし、そのプロジェクトの目標が何なのかを一般にもわかるように表明することは、
  それなりに大変な作業です。しかし、これは基本的なことなので、
  時間を割いてでもやる必要があります。
  あなた (そして共同でプロジェクトを立ち上げた他のメンバー)
  は、まず「そのプロジェクトがどんなものなのか」「何をやりたいのか」
  「何を<emphasis>やらない</emphasis>のか」といったことをきちんと把握し、
  それを表明する必要があります。
  普通は、これはそれほど困難なことではありません。
  しかし、この作業によって、暗黙の了解であったことや意見の相違が浮かび上がってくるかもしれません。
  それでいいんです。後になってからそれが判明するよりも、
  早いうちに見つけてしまったほうが解決しやすくなります。
  この作業が終われば、次にすることは
  一般公開用のパッケージを作成することです。
  これは、ぶっちゃけて言うと単純でつまらない骨折り仕事です。
</para>

<!--
<para>What makes it so laborious is that it consists mainly of
organizing and documenting things everyone already
knows&mdash;"everyone", that is, who's been involved in the project so
far.  Thus, for the people doing the work, there is no immediate
benefit.  They do not need a <filename>README</filename> file giving
an overview of the project, nor a design document or user manual.
They do not need a carefully arranged code tree conforming to the
informal but widespread standards of software source distributions.
Whatever way the source code is arranged is fine for them, because
they're already accustomed to it anyway, and if the code runs at all,
they know how to use it.  It doesn't even matter, for them, if the
fundamental architectural assumptions of the project remain
undocumented; they're already familiar with that too.</para>
-->
<para>
  何がそんなに面倒くさいのかというと、その作業の大半が、既にみんなが知っている
  &mdash;ここでいう「みんな」とは、これまでずっとプロジェクトにかかわってきた人のことです&mdash;
  ことをまとめ上げて文書化するということだからです。
  つまり、その作業を実際に行う人には直接的なメリットは何もないのです。
  彼らにとっては「このプロジェクトは……」というような <filename>README</filename>
  ファイルは不要ですし、もちろん設計文書やユーザーマニュアルなんかも不要です。
  ソフトウェアをソースで配布するときにみんなが標準的に使っているような
  コードツリーを構成する必要も感じていないでしょう。
  別にディレクトリ構成がどうであっても彼らは気にしません。
  だってもうそのコードの内容を熟知しているのだし、
  コードが動き出せば、あとはどう使えばいいのかも知っているわけですから。
  彼らにとっては、そのプロジェクトの基本的な設計方針が文書化されていなくても平気です。
  だってそれは彼らの頭の中にちゃんとあるのですから。
</para>

<!--
<para>Newcomers, on the other hand, need these things.  Fortunately,
they don't need them all at once.  It's not necessary for you to
provide every possible resource before taking a project public.  In a
perfect world, perhaps, every new open source project would start out
life with a thorough design document, a complete user manual (with
special markings for features planned but not yet implemented),
beautifully and portably packaged code, capable of running on any
computing platform, and so on.  In reality, taking care of all these
loose ends would be prohibitively time-consuming, and anyway, it's
work that one can reasonably hope volunteers will help with once the
project is under way.</para>
-->
<para>
  一方、新参者にとってはそのようなドキュメントは必須です。
  とはいえ、幸いなことにすべてのドキュメントが一度に必要となるわけではありません。
  プロジェクトを公開する前に、あらゆるリソースを提供できるようにしておく必要はありません。
  理想を言えば、新しいオープンソースプロジェクトを始めるときには
  設計文書や完全なユーザーマニュアル (今後実装予定の機能についての説明も含む)、
  複数プラットフォームで動作するきれいにパッケージされたコードなどがそろっているといいのでしょう。
  しかし現実的には、これらをばっちりそろえることは手間がかかりすぎます。
  とにかく一度プロジェクトを始めてしまい、
  プロジェクトが動き出してから協力者を探すという手もあるでしょう。
</para>

<!--
<para>What <emphasis>is</emphasis> necessary, however, is that enough
investment be put into presentation that newcomers can get past the
initial obstacle of unfamiliarity.  Think of it as the first step in a
bootstrapping process, to bring the project to a kind of minimum
activation energy.  I've heard this threshold called the
<firstterm>hacktivation energy</firstterm>: the amount of energy a
newcomer must put in before she starts getting something back.  The
lower a project's hacktivation energy, the better.  Your first task is
bring the hacktivation energy down to a level that encourages people
to get involved.</para>
-->
<para>
  しかし、必要なのは<emphasis>何なのか</emphasis>といえば、
  見栄えの調整に十分に力をいれ、新入りさんがプロジェクトになじみやすくすることです。
  ちょっと面倒な作業ですが、これを
  新規プロジェクトを立ち上げる際に最低限必要な動力と考えてみましょう。
  新入りさんが「このプロジェクトに対して何らかのかかわりと持とう」
  と考えるために必要なエネルギーの閾値のことを、どこかの誰かが
  <firstterm>ハクティベーション (hacktivation)
  <footnote>
    <para>
      (訳注) hack と activation を組み合わせた造語？
      おそらく http://www.gnu.org/software/guile/docs/docs-1.6/guile-ref/Programming-Overview.html
      からの引用だと思われます。
    </para>
  </footnote>
  エネルギー</firstterm>
  と呼んでいました。ハクティベーションエネルギーが低ければ低いほどいい、
  というわけです。あなたが最初に行う作業は、
  プロジェクトのハクティベーションエネルギーを下げて
  いろいろな人たちがプロジェクトに参加しやすくすることとなります。
</para>

<!--
<para>Each of the following subsections describes one important aspect
of starting a new project.  They are presented roughly in the order
that a new visitor would encounter them, though of course the order in
which you actually implement them might be different.  You can treat
them as a checklist.  When starting a project, just go down the list
and make sure you've got each item covered, or at least that you're
comfortable with the potential consequences if you've left one
out.</para>
-->
<para>
  以下の各項では、新しいプロジェクトをはじめるにあたって重要となる内容について個別に説明します。
  そのプロジェクトをはじめて知った人が遭遇するであろう順に並べていますが、
  もちろんこのとおりの順で作成しなければならないというわけではありません。
  これらの項目を、チェックリストとして用いるといいでしょう。
  プロジェクトをはじめる際にはこれらの各項目が網羅されていることを確認しましょう。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="choosing-a-name">
<!--
<title>Choose a Good Name</title>
-->
<title>名前の決定</title>

<!--
<para>Put yourself in the shoes of someone who's just heard about your
project, perhaps by having stumbled across it while searching for
software to solve some problem.  The first thing they'll encounter is
the project's name.</para>
-->
<para>
  どこかの誰かがあなたのプロジェクトのことを聞きつけたとしましょう。
  おそらく、何かの問題を解決するためのソフトウェアを検索しているときに見つけたのでしょう。
  彼らが真っ先に目にするのは、そのプロジェクトの名前です。
</para>

<!--
<para>A good name will not automatically make your project successful,
and a bad name will not doom it&mdash;well, a
<emphasis>really</emphasis> bad name probably could do that, but we
start from the assumption that no one here is actively trying to make
their project fail.  However, a bad name can slow down adoption of the
project, either because people don't take it seriously, or because
they simply have trouble remembering it.</para>
-->
<para>
  すばらしい名前をつけたからといって、
  そのプロジェクトの成功が約束されるわけではありません。
  また、変な名前をつけたからといって
  それだけの理由でプロジェクトが失敗するというわけでもありません
  &mdash;もちろん、<emphasis>あまりにも</emphasis>
  マズい名前をつけてしまったら悪影響があるかもしれません。
  しかし、わざわざプロジェクトを失敗に持っていくようなことはしないだろう
  という前提の下で話を進めます。
  ただ、(あまりにも不真面目だったり覚えにくかったりといった)
  変な名前をつけてしまうと、そのプロジェクトの利用に踏み切るまでに
  時間がかかってしまうかもしれません。
</para>

<!--
<para>A good name:
-->
<para>よい名前とは、次のような条件を満たすものです。

<itemizedlist>
<!--
  <listitem><para>Gives some idea what the project does, or at least
            is related in an obvious way, such that if one knows the
            name and knows what the project does, the name will come
            quickly to mind thereafter.</para>
  </listitem>
-->
  <listitem>
    <para>
      そのプロジェクトが何をするものなのか、
      あるいは少なくとも何に関するものなのかがはっきりわかること。
      そうすると、名前を聞いただけで何をするものなのかが判断でき、
      名前を覚えてもらいやすくなります。
    </para>
  </listitem>
<!--
  <listitem><para>Is easy to remember.  Here, there is no getting
            around the fact that English has become the default
            language of the Internet: "easy to remember" means "easy
            for someone who can read English to remember."  Names that
            are puns dependent on native-speaker pronounciation, for
            example, will be opaque to the many non-native English
            readers out there.  If the pun is particularly compelling
            and memorable, it may still be worth it; just keep in mind
            that many people seeing the name will not hear it in their
            head the way a native speaker would.</para>
  </listitem>
-->
  <listitem>
    <para>
      覚えやすいこと。
      ここで、インターネットのデフォルト言語が英語となっている
      という事実を無視することはできません。つまり「覚えやすい」
      とは「英語が読める人にとって覚えやすい」ということです。
      英語のネイティブスピーカーの発音に基づくだじゃれを用いた名前などは、
      英語を母国語としない多くの人たちにとってはわかりにくいものとなるでしょう。
      ただ、それが人の心をひきつけるほど印象的なものならば
      だじゃれを使用する価値もあるでしょう。
      英語を母国語としない人たちからみると、
      だじゃれを用いたプロジェクト名を見てもその読み方を想像しにくくなる
      ということを覚えておきましょう。
    </para>
  </listitem>
<!--
  <listitem><para>Is not the same as some other project's name, and
            does not infringe on any trademarks.  This is just good
            manners, as well as good legal sense.  You don't want to
            create identity confusion.  It's hard enough to keep track
            of everything that's available on the Net already, without
            different things having the same name.</para>

            <para>The resources mentioned earlier in
            <xref linkend="look-around"/> are useful in
            discovering whether another project already has the name
            you're thinking of.  Free trademark searches are
            available at <ulink url="http://www.nameprotect.org/"/>
            and <ulink url="http://www.uspto.gov/"/>.</para>
  </listitem>
-->
  <listitem>
    <para>
      既存の別のプロジェクト名と重複しない、
      そして商標権を侵害しないものであること。
      これは、礼儀の問題であると同時に法的にもよい考えです。
      別のプロジェクトと混同されてしまうようなことは望ましくないでしょう。
      ネット上ですでにさまざまな情報が流れているものと同じ名前にしてしまうと、
      そのプロジェクトの情報を追いかけにくくなります。
    </para>

    <para>
      あなたが考えているのと同じ名前のプロジェクトが既に存在するかどうかを調べるには、
      <xref linkend="look-around"/> で示したリソースを使用するといいでしょう。
      登録商標に関する検索は <ulink url="http://www.nameprotect.org/"/>
      や <ulink url="http://www.uspto.gov/"/> で行えます。
    </para>
  </listitem>
<!--
  <listitem><para>If possible, is available as a domain name in the
            <systemitem>.com</systemitem>,
            <systemitem>.net</systemitem>, and
            <systemitem>.org</systemitem> top-level domains.  You
            should pick one, probably <systemitem>.org</systemitem>,
            to advertise as the official home site for the project;
            the other two should forward there and are simply to
            prevent third parties from creating identity confusion
            around the project's name.  Even if you intend to host the
            project at some other site (see
            <xref linkend="starting-with-canned-hosting"/>), you
            can still register project-specific domains and forward
            them to the hosting site.  It helps users a lot to have a
            simple URL to remember.</para>
    </listitem>
-->
  <listitem>
    <para>
      できれば、<systemitem>.com</systemitem> や
      <systemitem>.net</systemitem>、<systemitem>.org</systemitem>
      のようなトップレベルドメインが利用できる名前を選びましょう。
      この中のいずれか (おそらく <systemitem>.org</systemitem>
      でしょう) を利用すると、プロジェクトのウェブサイトを簡単に広めることができます。
      他の２つのトップレベルドメインについては単純に
      プロジェクトのサイトに転送させるだけにしておきます。
      これにより、第三者にそのドメインを悪用される心配をなくします。
      仮にそのプロジェクトのサイトを別の場所
      (<xref linkend="starting-with-canned-hosting"/> を参照してください)
      におくとしても、プロジェクト名のドメインは取得しておくべきです。
      そして、それらのサイトからプロジェクトの本来のページに転送させるようにしましょう。
      そうすることで、覚えやすいシンプルな URL を提供することができます。
    </para>
  </listitem>
</itemizedlist>

</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="mission-statement">
<!--
<title>Have a Clear Mission Statement</title>
-->
<title>明確な目標を掲げる</title>

<!--
<para>Once they've found the project's web site, the next thing people
will look for is a quick description, a mission statement, so they can
decide (within 30 seconds) whether or not they're interested in
learning more.  This should be prominently placed on the front page,
preferably right under the project's name.</para>
-->
<para>
  プロジェクトのウェブサイトを訪れた人たちが次に見るものは、
  そのプロジェクトについての簡単な説明や目標などのメッセージです。
  それらを見て (たいていは 30 秒程度で)、人は
  そこから先に進むか引き返すかを決断します。
  このメッセージは、トップページの目立つ場所に配置しなければなりません。
  プロジェクト名のすぐ下に置くといいでしょう。
</para>

<!--
<para>The mission statement should be concrete, limiting, and above
all, short.  Here's an example of a good one, from <ulink
url="http://www.openoffice.org/"/>:</para>
-->
<para>
  この声明は、具体的で内容を絞り込み、そしてなによりも簡潔でなければなりません。
  たとえば、以下に引用した <ulink url="http://www.openoffice.org/"/>
  の記述などがよい例です。
</para>

  <blockquote>
<!--
  <para><emphasis>To create, as a community, the leading international
  office suite that will run on all major platforms and provide access
  to all functionality and data through open-component based APIs and
  an XML-based file format.</emphasis></para>
-->
    <para><emphasis>
      To create, as a community, the leading international
      office suite that will run on all major platforms and provide access
      to all functionality and data through open-component based APIs and
      an XML-based file format.
      (コミュニティとして、国際的な最先端のオフィススイートを作成します。
      すべての主要なプラットフォーム上で動作し、
      そのすべての機能やデータに対して
      オープンコンポーネントベースの API と
      XML ベースのファイルフォーマットでのアクセス機能を提供します)
    </emphasis></para>
  </blockquote>

<!--
<para>In just a few words, they've hit all the high points, largely by
drawing on the reader's prior knowledge.  By saying "<emphasis>as a
community</emphasis>", they signal that no one corporation will
dominate development; "<emphasis>international</emphasis>" means that
the software will allow people to work in multiple languages and
locales; "<emphasis>all major platforms</emphasis>" means it will be
portable to Unix, Macintosh, and Windows.  The rest signals that open
interfaces and easily understandable file formats are an important
part of the goal.  They don't come right out and say that they're
trying to be a free alternative to Microsoft Office, but most people
can probably read between the lines.  Although this mission statement
looks broad at first glance, in fact it is quite circumscribed: the
words "<emphasis>office suite</emphasis>" mean something very concrete
to those familiar with such software.  Again, the reader's presumed
prior knowledge (in this case probably from MS Office) is used to keep
the mission statement concise.</para>
-->
<para>
  たったこれだけの文章ですが、訪問者に予備知識を与えるという意味ではこれで十分です。
  "<emphasis>コミュニティとして (as a community)</emphasis>" と明記することにより、
  どこかの企業が開発するものではないことを表しています。また
  "<emphasis>国際的な (international)</emphasis>" という言葉によって、
  このソフトウェアが複数の言語や地域で動作することを示しています。
  そして "<emphasis>すべての主要なプラットフォーム (all major platforms)</emphasis>"
  とあることから、おそらく Unix、Macintosh そして Windows で動作するであろうことが読み取れます。
  その他の箇所からは、インターフェイスが公開されていることや
  ファイルのフォーマットが一般的なものであることなどがわかるでしょう。
  彼らが Microsoft Office の代わりとなるフリーソフトウェアを作ろうとしているとはどこにも書かれていません。
  しかし、たいていの人は行間からその気持ちを読み取ることができるでしょう。
  この声明はかなり大風呂敷を広げているように見えますが、
  事実上これらは密接に絡み合っています。
  また "<emphasis>オフィススイート (office suite)</emphasis>"
  という言葉を使用することで、その手のソフトウェアになじみがある人たちにとって
  かなり具体的な印象を与えることができます。つまり、
  訪問者が持っているであろうと思われる前提知識 (この場合は MS Office に関するもの)
  を利用して、この声明を簡潔にまとめているのです。
</para>

<!--
<para>The nature of a mission statement depends partly on who is
writing it, not just on the software it describes.  For example, it
makes sense for OpenOffice.org to use the words "<emphasis>as a
community</emphasis>", because the project was started, and is still
largely sponsored, by Sun Microsystems.  By including those words, Sun
indicates its sensitivity to worries that it might try to dominate the
development process.  With this sort of thing, merely demonstrating
awareness of the <emphasis>potential</emphasis> for a problem goes a
long way toward avoiding the problem entirely.  On the other hand,
projects that aren't sponsored by a single corporation probably don't
need such language; after all, development by community is the norm,
so there would ordinarily be no reason to list it as part of the
mission.</para>
-->
<para>
  この声明の本質は、それが対象としているソフトウェアだけではなく
  「だれがそれを書いたか」にも依存します。
  たとえば、OpenOffice.org があえて "<emphasis>コミュニティとして
  (as a community)</emphasis>" と書いているのがいい例です。
  このプロジェクトはもともと Sun Microsystems が始めたものであり、
  現在も同社が主なスポンサーとなっているからです。
  あえてこの文言を含めることで Sun は「開発プロセスを
  支配するようなつもりはない」ということを示しているわけです。
  このように「そのような懸念があることを認識している」
  ということを示すだけでも、あとで問題が発生する
  <emphasis>可能性</emphasis>を減らすことができます。
  一方、特定の企業の支援を受けているわけではないプロジェクトについては
  このような文言は不要でしょう。結局のところ、
  普通はコミュニティベースの開発になるわけですから、
  それをわざわざ示す必要はないわけです。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="state-freedom">
<!--
<title>State That the Project is Free</title>
-->
<title>フリーであることを宣言する</title>

<!--
<para>Those who remain interested after reading the mission statement
will next want to see more details, perhaps some user or developer
documentation, and eventually will want to download something.  But
before any of that, they'll need to be sure it's open source.</para>
-->
<para>
  プロジェクトの目標についての説明 (ミッションステートメント)
  を読んで興味を持ったひとたちは、もっと詳細な情報を知りたくなることでしょう。
  たとえばユーザー向けドキュメントや開発者向けドキュメントなど。
  そして、何かをダウンロードしたくなるでしょうね。
  でもその前に、まずはそれがオープンソースなのかどうかを知る必要があります。
</para>

<!--
<para><emphasis>The front page must make it unambiguously clear that
the project is open source.</emphasis> This may seem obvious, but you
would be surprised how many projects forget to do it.  I have seen
free software project web sites where the front page not only did not
say which particular free license the software was distributed under,
but did not even state outright that the software was free at all.
Sometimes the crucial bit of information was relegated to the
Downloads page, or the Developers page, or some other place that
required one more mouse click to get to.  In extreme cases, the
license was not given anywhere on the web site at all&mdash;the only
way to find it was to download the software and look inside.</para>
-->
<para>
  <emphasis>プロジェクトのトップページで、
  それがオープンソースであることを明記しておかなければなりません。</emphasis>
  当然のことだとお考えかもしれません。しかし、
  世の中にはそれができていないオープンソースプロジェクトが山ほどあります。
  私がかつて見たとあるフリーソフトウェアプロジェクトのウェブサイトのトップページでは、
  そのソフトウェアの配布時にどのライセンスを適用するかが示されておらず、
  さらにそのソフトウェアがフリーなのかどうかさえ書かれていませんでした。
  また、このような重要な情報が
  ダウンロードページや開発者向けページなどにしか存在しないというページもよくあります。
  このような場合は、重要な情報を得るためにさらにマウスクリックが必要となってしまいます。
  最もひどかった例では、ウェブサイト上のどこにもライセンスが示されていなかったものもありました。
  ソフトウェアをダウンロードしてその中身を見ない限り、ライセンスの内容がわからなかったのです。
</para>

<!--
<para>Don't make this mistake.  Such an omission can lose many
potential developers and users.  State up front, right below the
mission statement, that the project is "free software" or "open source
software", and give the exact license.  A quick guide to choosing a
license is given in
<xref linkend="license-quickstart"/><phrase output="printed">
later in this chapter</phrase>, and
licensing issues are discussed in detail in <xref
linkend="legal"/>.</para>
-->
<para>
  同じようなミスはしないでください。
  そんなことをすると、せっかくの開発者候補やユーザー候補の多くを失うことになります。
  トップページのミッションステートメント部の次に、そのプロジェクトが
  「フリーソフトウェア」あるいは「オープンソース」であることを示し、
  さらに具体的なライセンスについても記しておきましょう。
  どのライセンスを適用すればいいかについては
  <xref linkend="license-quickstart"/>で説明します。
  また、ライセンスに関するさまざまな問題については
  <xref linkend="legal"/> で詳しく説明します。
</para>

<!--
<para>At this point, our hypothetical visitor has
determined&mdash;probably in a minute or less&mdash;that she's
interested in spending, say, at least five more minutes investigating
this project.  The next sections describe what she should encounter in
that five minutes.</para>
-->
<para>
  ここまでの情報を見るのに、訪問者が要する時間は１分かそれ以下でしょう。
  これらの内容をもとに、彼/彼女 らがさらに次を読み進めるかどうかを決断するわけです。
  次のセクションでは、最初の５分間で訪問者が見るであろう内容について扱います。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="features-and-requirements">
<!--
<title>Features and Requirements List</title>
-->
<title>機能一覧・要件一覧</title>

<!--
<para>There should be a brief list of the features the software
supports (if something isn't completed yet, you can still list it, but
put "<emphasis>planned</emphasis>" or
"<emphasis>in&nbsp;progress</emphasis>" next to it), and the kind of
computing environment required to run the software.  Think of the
features/requirements list as what you would give to someone asking
for a quick summary of the software.  It is often just a logical
expansion of the mission statement.  For example, the mission
statement might say:</para>
-->
<para>
  そのソフトウェアのちょっとした機能一覧
  (まだ完成していない機能を一覧に含めてもかまいません。しかしその場合は
  "<emphasis>予定</emphasis>" とか "<emphasis>開発中</emphasis>"
  などとはっきり示して置くようにしましょう)、
  そしてそれを動かすために必要な要件についての説明が必要です。
  機能一覧/要件一覧は、そのプロジェクトについて誰かに聞かれたときに
  答えるためにまとめたものと考えるといいでしょう。
  これは、単にミッションステートメントの内容をより深く掘り下げたものと考えてもかまいません。
  たとえば、ミッションステートメントで次のように説明したとすると、
</para>

  <blockquote>
<!--
  <para><emphasis>To create a full-text indexer and search engine
  with a rich API, for use by programmers in providing search
  services for large collections of text files.</emphasis></para>
-->
  <para><emphasis>
    全文検索用のインデックスを作成し、
    高機能な API つきのサーチエンジンを用意します。
    これらを使用することで、
    大量のテキストファイルに対する検索処理をプログラマが行えるようにします。
  </emphasis></para>
  </blockquote>

<!--
<para>The features and requirements list would give the details,
clarifying the mission statement's scope:</para>
-->
<para>
  機能一覧、要件一覧でその詳細を説明することによって
  ミッションステートメントの範囲を明確にします。
</para>

  <blockquote>
<!--
    <para><emphasis>Features:</emphasis></para>
-->
    <para><emphasis>機能</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Searches plain text, HTML, and
                XML</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>プレーンテキスト、HTML および XML
                の検索</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Word or phrase searching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>単語あるいはフレーズによる検索</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Fuzzy matching</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(予定) あいまい検索</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Incremental updating of
                indexes</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(予定) インデックスの差分更新</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>(planned) Indexing of remote web
                sites</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>(予定) リモートのウェブサイトのインデックス化</emphasis></para>
      </listitem>
    </itemizedlist>
<!--
    <para><emphasis>Requirements:</emphasis></para>
-->
    <para><emphasis>要件</emphasis></para>
    <itemizedlist>
<!--
      <listitem><para><emphasis>Python 2.2 or higher</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>Python 2.2 以降</emphasis></para>
      </listitem>
<!--
      <listitem><para><emphasis>Enough disk space to hold the indexes
                (approximately 2x original data size)</emphasis></para>
      </listitem>
-->
      <listitem><para><emphasis>インデックス作成用のディスク領域
                (元のデータの約２倍の大きさ)</emphasis></para>
      </listitem>
    </itemizedlist>
  </blockquote>

<!--
<para>With this information, readers can quickly get a feel for
whether this software has any hope of working for them, and they can
consider getting involved as developers too.</para>
-->
<para>
  これらの情報によって、訪問者はそのソフトウェアが自分の希望を満たすものかどうかを判断します。
  また場合によっては開発者としてプロジェクトに参加することを検討してくれるかもしれません。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="development-status">
<!--
<title>Development Status</title>
-->
<title>開発の進捗状況</title>

<!--
<para>People always want to know how a project is doing.  For new
projects, they want to know the gap between the project's promise and
current reality.  For mature projects, they want to know how actively
it is maintained, how often it puts out new releases, how responsive
it is likely to be to bug reports, etc.</para>
-->
<para>
  そのプロジェクトがいったい何をやっているのか、訪問者たちはきっと気になることでしょう。
  特に新しいプロジェクトの場合は、
  そのプロジェクトが掲げている目標のうち
  現在どれくらいが達成されているのかが気になるところです。
  十分に成熟したプロジェクトの場合に気になるのは、
  「そのプロジェクトが現在活発に保守されているのか」
  「どれくらいの頻度で新しいバージョンがリリースされているのか」
  「バグレポートに対する反応の速さはどれくらいか」
  などとなります。
</para>

<!--
<para>To answer these questions, you should provide a development
status page, listing the project's near-term goals and needs (for
example, it might be looking for developers with a particular kind of
expertise).  The page can also give a history of past releases, with
feature lists, so visitors can get an idea of how the project defines
"progress" and how quickly it makes progress according to that
definition.</para>
-->
<para>
  これらの質問に答えるために、開発状況を示すページを作らなければなりません。
  ここには、直近の目標とそれを達成するために必要なもの
  (たとえば「ある特定の分野に強い開発者を募集しています」など)
  を表示します。また、過去のリリース履歴や機能一覧などもここに掲載するといいでしょう。
  そうすることで、そのプロジェクトの「進捗状況」がわかりやすくなります。
</para>

<!--
<para>Don't be afraid of looking unready, and don't give in to the
temptation to hype the development status.  Everyone knows that
software evolves by stages; there's no shame in saying "This is alpha
software with known bugs.  It runs, and works at least some of the
time, but use at your own risk."  Such language won't scare away the
kinds of developers you need at that stage.  As for users, one of the
worst things a project can do is attract users before the software is
ready for them.  A reputation for instability or bugginess is very
hard to shake, once acquired.  Conservativism pays off in the long
run; it's always better for the software to be
<emphasis>more</emphasis> stable than the user expected than less, and
pleasant surprises produce the best kind of word-of-mouth.</para>
-->
<para>
  まだできあがっていないことを恐れる必要はありません。
  できあがってもいないことを変にごまかすこともやめましょう。
  ソフトウェアの開発にはいくつかの段階があることを、みんな知っています。
  "このソフトウェアはアルファ版です。まだバグが存在します。
  とりあえずは動作するでしょう。しかし、自己責任のもとで使用するようにしてください"
  と言ったところで、何も恥ずかしいことはありません。
  そのような段階でプロジェクトが必要としている開発者は、
  「アルファ版」という説明なんかではおびえたりしません。対エンドユーザーという面では、
  まだできあがってもいないソフトウェアにユーザーが群がってしまうほどまずいことはありません。
  いったん「不安定」だとか「バグだらけだ」だとかいう評判が出てしまうと、
  それを払拭するのは大変な話になります。
  結局のところ、多少保守的なほうがうまくいきます。
  そのソフトウェアが「ユーザーが期待しているよりも安定していた」
  ほうが、期待はずれだった場合よりもずっといいでしょう。
  そしてそのほうが、口コミによる広がりが期待できます。
</para>

<sidebar id="alpha-and-beta">
<!--
  <title>Alpha and Beta</title>
-->
  <title>アルファ版/ベータ版</title>
<!--
  <para>The term <firstterm>alpha</firstterm> usually means a first
  release, with which users can get real work done and which has all
  the intended functionality, but which also has known bugs.  The main
  purpose of alpha software is to generate feedback, so the developers
  know what to work on.  The next stage, <firstterm>beta</firstterm>,
  means the software has had all the serious bugs fixed, but has not
  yet been tested enough to certify for release.  The purpose of beta
  software is to either become the official release, assuming no bugs
  are found, or provide detailed feedback to the developers so they
  can reach the official release quickly.  The difference between
  alpha and beta is very much a matter of judgement.</para>
-->
  <para>
    <firstterm>アルファ版</firstterm> とは、通常は一番最初のリリースのことを指します。
    とりあえずは動かすことができ、ひととおりの機能はそろっていますが、
    まだバグが残っている状態です。アルファ版の主な目的は、
    利用者からのフィードバックを得ることです。それによって開発者は、
    そのソフトウェアがどのように動いているのかをよく知ることができるようになります。
    その次の段階となるのが<firstterm>ベータ版</firstterm>です。
    これは、致命的なバグはすべて修正済みとなっていますが、
    まだリリースに向けての十分なテストが行われていない状態です。
    ベータ版の主な目的は、バグが見つからないことを確認して
    公式リリースに向けての準備を行うことです。また、
    開発者からの具体的なフィードバックを受け取ることで
    公式リリースをより早く行うという意味もあります。
    アルファ版とベータ版の差をどこにおくかは、あなたしだいです。
  </para>
</sidebar>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="downloads">
<!--
<title>Downloads</title>
-->
<title>ダウンロード</title>

<!--
<para>The software should be downloadable as source code in standard
formats.  When a project is first getting started, binary (executable)
packages are not necessary, unless the software has such complicated
build requirements or dependencies that merely getting it to run would
be a lot of work for most people.  (But if this is the case, the
project is going to have a hard time attracting developers
anyway!)</para>
-->
<para>
  標準的な形式で、ソフトウェアのソースコードをダウンロードできるようにする必要があります。
  プロジェクトを立ち上げた最初のうちは、バイナリ (実行可能) パッケージはなくてもかまわないでしょう。
  ただし、ビルド手順が面倒だったり依存性が複雑だったりする場合は
  バイナリ版も必要です (でも、
  そんなプロジェクトは開発者にとってはあまり魅力的ではありません)。
</para>

<!--
<para>The distribution mechanism should be as convenient, standard,
and low-overhead as possible.  If you were trying to eradicate a
disease, you wouldn't distribute the medicine in such a way that it
requires a non-standard syringe size to administer.  Likewise,
software should conform to standard build and installation methods;
the more it deviates from the standards, the more potential users and
developers will give up and go away confused.</para>
-->
<para>
  配布形態は、便利で標準的なものにしましょう。
  また、できるだけ利用者の負担を減らすべきです。
  あなたがある病気の撲滅を狙っているなら、
  薬を配る際に独自の注射器が必要となるような面倒な手段はとらないでしょう。
  同様に、ソフトウェアについても標準的な手順で
  ビルド・インストールできるようにしておきましょう。
  標準から外れれば外れるほど、
  ユーザー候補や開発者候補はそのプロジェクトから離れてしまいます。
</para>

<!--
<para>That sounds obvious, but many projects don't bother to
standardize their installation procedures until very late in the game,
telling themselves they can do it any time: <emphasis>"We'll sort all
that stuff out when the code is closer to being ready."</emphasis>
What they don't realize is that by putting off the boring work of
finishing the build and installation procedures, they are actually
making the code take longer to get ready&mdash;because they
discourage developers who might otherwise have contributed to the
code.  Most insidiously, they don't <emphasis>know</emphasis> they're
losing all those developers, because the process is an accumulation of
non-events: someone visits a web site, downloads the software, tries
to build it, fails, gives up and goes away.  Who will ever know it
happened, except the person themselves?  No one working on the project
will realize that someone's interest and good will have been silently
squandered.</para>
-->
<para>
  当然のことだと思われるかもしれません。
  しかし、多くのプロジェクトは本当に切羽詰るまで
  インストール手順を標準化しようとはしないものです。
  <emphasis>"ま、リリース予定日が迫ってきたら、
  そのときにやろうよ。そんなことはいつでもできるんだから。"</emphasis>
  といった言い訳をしてしまいがちです。
  彼らはわかっていないのです。そういった作業を後回しにしてしまうと、
  結果的に余計に時間がかかってしまうということを。
  また、それによって多くの開発者を失っていることにも気づいていないでしょう。
  「誰かがウェブサイトを訪れた→ソフトウェアをダウンロードした
  →ビルドしようとした→失敗した→あきらめた」
  ということがあちこちで積み重なっているはずです。
  あきらめた本人以外には、そんなことがあったということはわかりません。
  もともとあなたのプロジェクトに興味を持っていてくれたはずの人が黙って立ち去ってしまった、
  そしてそれをプロジェクトのメンバーは誰も気づかないのです。
</para>

<!--
<para>Boring work with a high payoff should always be done early, and
significantly lowering the project's barrier to entry through good
packaging brings a very high payoff.</para>
-->
<para>
  面倒だが見返りの大きい作業は、できるだけ早めに済ませてしまいましょう。
  パッケージをきちんと作成すると、
  プロジェクトへの参加障壁を劇的におろすことができ、
  結果として大きな見返りを得ることになります。
</para>

<!--
<para>When you release a downloadable package, it is vital that you
give a unique version number to the release, so that people can
compare any two releases and know which supersedes the other.  A
detailed discussion of version numbering can be found in <xref
linkend="release-numbering"/>, and the details of standardizing
build and installation procedures are covered in
<xref linkend="packaging"/><phrase output="printed">, both
in <xref linkend="development-cycle"/></phrase>.</para>
-->
<para>
  ダウンロード用のパッケージを作成したら、それに対して
  一意なバージョン番号を与えることが大切です。
  それによって人は、２つのリリースのうちどちらが新しいのかを知ることになるのです。
  バージョン番号のつけかたについては
  <phrase output="printed"><xref linkend="development-cycle"/></phrase> の
  <xref linkend="release-numbering"/> で、
  そしてビルド手順やインストール手順の標準化については同じ章の
  <xref linkend="packaging"/>
  でそれぞれ詳しく説明します。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-and-bug-tracker-access">
<!--
<title>Version Control and Bug Tracker Access</title>
-->
<title>バージョン管理システムやバグ追跡システムへのアクセス</title>

<!--
<para>Downloading source packages is fine for those who just want to
install and use the software, but it's not enough for those who want
to debug or add new features.  Nightly source snapshots can help, but
they're still not fine-grained enough for a thriving development
community.  People need real-time access to the latest sources, and
the way to give them that is to use a version control system.  The
presence of anonymously accessible version controlled sources is a
sign&mdash;to both users and developers&mdash;that this project is
making an effort to give people what they need to participate.  If you
can't offer version control right away, then put up a sign saying you
intend to set it up soon.  Version control infrastructure is discussed
in detail in <xref linkend="vc"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>.</para>
-->
<para>
  単にそのソフトをインストールして使いたいだけという人にとっては、
  ソースパッケージで十分でしょう。しかし、デバッグをしたり
  機能追加をしたりしたい人たちにとってはそれだけでは不十分です。
  毎晩最新ソースのスナップショットを作成するという手もありますが、
  開発が活発に行われているコミュニティではまだこれでも完璧だとはいえません。
  常にその時点の最新のソースにアクセスしたいという人たちにその手段を提供するのが、
  バージョン管理システムです。
  バージョン管理システム上のソースに匿名でアクセスできるようにしておくと、
  「このプロジェクトは、新しいメンバーの参加を歓迎しています」
  というメッセージをユーザーと開発者の両方に送ることになります。
  もし今すぐにバージョン管理システムを用意できない場合は、
  近々公開予定であるというメッセージを書いておくようにしましょう。
  バージョン管理システムについては
  <phrase output="printed"><xref linkend="technical-infrastructure"/></phrase>
  の <xref linkend="vc"/> で詳しく説明します。
</para>

<!--
<para>The same goes for the project's bug tracker.  The importance of
a bug tracking system lies not only in its usefulness to developers,
but in what it signifies for project observers.  For many people, an
accessible bug database is one of the strongest signs that a project
should be taken seriously.  Furthermore, the higher the number of bugs
in the database, the better the project looks.  This might seem
counterintuitive, but remember that the number of bugs recorded really
depends on three things: the absolute number of bugs present in the
software, the number of users using the software, and the convenience
with which those users can register new bugs.  Of these three factors,
the latter two are more significant than the first.  Any software of
sufficient size and complexity has an essentially arbitrary number of
bugs waiting to be discovered.  The real question is, how well will
the project do at recording and prioritizing those bugs?  A project
with a large and well-maintained bug database (meaning bugs are
responded to promptly, duplicate bugs are unified, etc.) therefore
makes a better impression than a project with no bug database, or a
nearly empty database.</para>
-->
<para>
  バグ追跡システムについても同じです。
  バグ追跡システムは、単に開発者たちにとって便利であるだけではなく、
  周りでそのプロジェクトの進み具合を見守っている人たちにとっても便利なものなのです。
  多くの人は、バグデータベースが公開されていると
  「熱心に開発が進められているようだ」と感じます。
  さらに、バグデータベースにたくさんのバグが登録されていればいるほど、
  そのプロジェクトの見栄えはよくなります。
  ちょっと直感に反しているように思われるかもしれません。でも考えてもみてください。
  バグデータベースにたくさんのバグが報告されているということからわかるのは、
  次の３つの事実です。まず、そのソフトウェアにたくさんのバグが存在すること。
  次に、多くのユーザーがそのソフトウェアを使用しているということ。
  そして最後に、ユーザーが気軽にバグを登録できるということ。
  最初の１つはともかく、残りの２つは特に重要です。
  ある程度の規模と複雑さを持つソフトウェアには、
  基本的にバグが含まれているものです。本当の問題は、
  それらのバグをいかにして見つけ、どのように優先順位を設定するかというところにあります。
  したがって、よく整備された (バグに対する対応がすばやく、
  重複したバグ報告はきちんと統一されているなど) 大規模なバグデータベースがあると、
  バグデータベースがなかったりほとんど機能していなかったりするプロジェクトより
  ずっと印象がよくなります。
</para>

<!--
<para>Of course, if your project is just getting started, then the bug
database will contain very few bugs, and there's not much you can do
about that.  But if the status page emphasizes the project's youth,
and if people looking at the bug database can see that most filings have
taken place recently, they can extrapolate from that that the project
still has a healthy <emphasis>rate</emphasis> of filings, and they
will not be unduly alarmed by the low absolute number of bugs
recorded.</para>
-->
<para>
  もちろん、そのプロジェクトが本当に始まったばかりなのなら
  バグデータベースに登録される内容はほんのちょっとだけになるでしょう。
  それについてはどうにもしようがありません。
  しかし、プロジェクトが始まったばかりであることがどこかにきちんと書いてあり、
  かつデータベースに登録されているのが最近登録されたバグばかりであったとすると、
  訪問者はそのプロジェクトがちゃんと運営されていることを読み取ってくれるでしょう。
  バグの登録数があまりにも少ないからといって、心配されることはありません。
</para>

<!--
<para>Note that bug trackers are often used to track not only software
bugs, but enhancement requests, documentation changes, pending tasks,
and more.  The details of running a bug tracker are covered in
<xref linkend="bug-tracker"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase>, so I won't
go into them here.  The important thing from a presentation point of
view is just to <emphasis>have</emphasis> a bug tracker, and to make
sure that fact is visible from the front page of the project.</para>
-->
<para>
  バグ追跡システムに登録されるのはソフトウェアのバグだけではありません。
  機能追加の要望やドキュメントの変更、
  とりあえず保留になっている作業などが登録されることも多々あります。
  バグ追跡システムの運用方法については
  <phrase output="printed"><xref linkend="technical-infrastructure"/></phrase>
  の <xref linkend="bug-tracker"/> で詳しく説明するので、
  ここでは深く立ち入りません。プロジェクトの見栄えという観点から見て大切なのは、
  まずバグ追跡システムが <emphasis>存在する</emphasis> ということ。
  そしてそれがプロジェクトのトップページからたどれる場所にあるということです。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="communications-channels">
<!--
<title>Communications Channels</title>
-->
<title>連絡手段</title>

<!--
<para>Visitors usually want to know how to reach the human beings
involved with the project.  Provide the addresses of mailing lists,
chat rooms, and IRC channels, and any other forums where others
involved with the software can be reached.  Make it clear that you and
the other authors of the project are subscribed to these mailing
lists, so people see there's a way to give feedback that will reach
the developers.  Your presence on the lists does not imply a
commitment to answer all questions or implement all feature requests.
In the long run, most users will probably never join the forums
anyway, but they will be comforted to know that they
<emphasis>could</emphasis> if they ever needed to.</para>
-->
<para>
  プロジェクトの関係者の連絡先を知りたいという人もあらわれることでしょう。
  関係者と連絡を取れるように、メーリングリストのアドレスや
  チャットルーム、IRC チャンネル、掲示板などの場所を示しておきましょう。
  あなた、あるいはその他のプロジェクト関係者がこのメーリングリストに参加していることも明記しておきましょう。
  そうすることで、「そこに行けば開発者と話すことができる」ということが伝わります。
  あなたがメーリングリストに参加しているからといって、
  すべての質問に答えなければならないとか
  すべての要望に答えなければならないとかいった義務が発生するわけではありません。
  長い目で見れば、ユーザーのほとんどはこのようなメーリングリストや掲示板には参加しません。
  とはいえ、必要ならいつでも参加できるということを示すだけで、
  安心感を与えることができます。
</para>

<!--
<para>In the early stages of a project, there's no need to have
separate user and developer forums.  It's much better to have everyone
involved with the software talking together, in one "room."  Among
early adopters, the distinction between developer and user is often
fuzzy; to the extent that the distinction can be made, the ratio of
developers to users is usually much higher in the early days of the
project than later on.  While you can't assume that every early
adopter is a programmer who wants to hack on the software, you can
assume that they are at least interested in following development
discussions and in getting a sense of the project's direction.</para>
-->
<para>
  プロジェクトを立ち上げたばかりのころは、
  エンドユーザー向けと開発者向けにフォーラムを分ける必要はありません。
  それよりも、プロジェクトにかかわる人たちが１つの「部屋」
  に集まってわいわいがやがや話をするほうがずっといいでしょう。
  アーリーアダプター層においては、開発者とユーザーの区別はあいまいです。
  あえて分類するとしても、プロジェクトの初期には開発者の比率がかなり高くなります。
  アーリーアダプターのすべてがそのソフトウェアをハックしたいと思っているとは限りません。
  しかし、少なくともそのプロジェクトの今後の方向性に関する議論には
  興味を持っていることでしょう。
</para>

<!--
<para>As this chapter is only about getting a project started, it's
enough merely to say that these communications forums need to exist.
Later, in <xref linkend="growth"/><phrase output="printed"> in
<xref linkend="communications"/></phrase>, we'll examine where
and how to set up such forums, the ways in which they might need
moderation or other management, and how to separate user forums from
developer forums, when the time comes, without creating an
unbridgeable gulf.</para>
-->
<para>
  本章では「プロジェクトをどのように立ち上げるか」についてのみを扱っています。
  この段階では「とりあえずコミュニケーション用の場所が必要だ」というくらいで十分でしょう。
  後で、<phrase output="printed"><xref linkend="communications"/></phrase>
  の <xref linkend="growth"/> においてさらに詳しく説明します。
  ここでは、掲示板の設置や管理の方法について扱います。
  また、いつかユーザー向け会議室と開発者向け会議室を分割することになったときに、
  両者の間に溝を生じさせないための方法も説明します。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="developer-guidelines">
<!--
<title>Developer Guidelines</title>
-->
<title>開発者向けのガイドライン</title>

<!--
<para>If someone is considering contributing to the project, she'll
look for developer guidelines.  Developer guidelines are not so much
technical as social: they explain how the developers interact with
each other and with the users, and ultimately how things get
done.</para>
-->
<para>
  開発者としてプロジェクトに参加しようと考えた人は、
  まず開発者向けのガイドラインを探すことになるでしょう。
  このガイドラインは、技術的なものというよりもむしろ社会的なものとなります。
  たとえば開発者同士のやりとりの方法、ユーザーとのやりとりの方法、
  プロジェクトをうまく進めるためにどのようにしていくかなどです。
</para>

<!--
<para>This topic is covered in detail in
<xref linkend="written-rules"/><phrase output="printed"> in
<xref linkend="social-infrastructure"/></phrase>, but the basic
elements of developer guidelines are:
-->
<para>
  このトピックについては
  <phrase output="printed"><xref linkend="social-infrastructure"/></phrase>
  の <xref linkend="written-rules"/> で詳しく説明します。
  ここでは、そこに含める基本的な内容だけをまとめておきます。

<itemizedlist>
<!--
  <listitem><para>pointers to forums for interaction with other
            developers</para> 
  </listitem>
-->
  <listitem>
    <para>
      他の開発者とのやり取りのためのフォーラムの場所
    </para> 
  </listitem>
<!--
  <listitem><para>instructions on how to report bugs and submit
            patches</para>
  </listitem>
-->
  <listitem>
    <para>
      バグ報告やパッチの投稿の方法
    </para>
  </listitem>
<!--
  <listitem><para>some indication of <emphasis>how</emphasis>
            development is usually done&mdash;is the project a
            benevolent dictatorship, a democracy, or something
            else</para>
  </listitem>
-->
  <listitem>
    <para>
      開発の基本方針&mdash;
      「慈悲深い独裁者」式でいくのか「民主主義」式でいくのか、
      あるいはそれ以外の手法をとるのか
    </para>
  </listitem>
</itemizedlist>

<!--
No pejorative sense is intended by "dictatorship", by the way.  It's
perfectly okay to run a tyranny where one particular developer has
veto power over all changes.  Many successful projects work this way.
The important thing is that the project come right out and say so.  A
tyranny pretending to be a democracy will turn people off; a tyranny
that says it's a tyranny will do fine as long as the tyrant is
competent and trusted.</para>
-->
  ところで、「独裁者」という言い方には、特にそれを批判する意図はありません。
  特定の開発者だけがすべての変更に対する拒否権を行使できる
  というような専制政治を行ってもまったく問題はありません。
  実際、多くのプロジェクトはこの方式で成功しています。
  大事なのは、そのプロジェクトがそういう方針で運営されているとはっきり示しておくことです。
  実際には独裁型なのに無理に民主主義っぽく見せようとすると、
  人は離れていってしまいます。きちんと独裁型であることを宣言しておけば、
  少なくともその独裁者が有能で信頼できる人である限りはうまく進みます。
</para>

<!--
<para>See <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
for an example of particularly thorough developer guidelines, or
<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/> for
broader guidelines that focus more on governance and the spirit of
participation and less on technical matters.</para>
-->
<para>
  開発者向けガイドラインの実例は
  <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
  をご覧ください。また、<ulink url="http://www.openoffice.org/dev_docs/guidelines.html"/>
  には、より一般的なガイドラインがあります。こちらは、
  技術的な話題よりもプロジェクトの管理体制やプロジェクトへの参加方法に重点を置いています。
</para>

<!--
<para>The separate issue of providing a programmer's introduction to
the software is discussed in <xref
linkend="developer-documentation"/><phrase output="printed">
later in this chapter</phrase>.</para>
-->
<para>
  プログラマ向けにソフトウェアについての説明を行うことについては、
  <phrase output="printed">本章の後半</phrase>の
  <xref linkend="developer-documentation"/> で取り上げます。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="documentation">
<!--
<title>Documentation</title>
-->
<title>ドキュメント</title>

<!--
<para>Documentation is essential.  There needs to be
<emphasis>something</emphasis> for people to read, even if it's
rudimentary and incomplete.  This falls squarely into the "drudgery"
category referred to earlier, and is often the first area where a new
open source project falls down.  Coming up with a mission statement
and feature list, choosing a license, summarizing development
status&mdash;these are all relatively small tasks, which can be
definitively completed and usually need not be returned to once done.
Documentation, on the other hand, is never really finished, which may
be one reason people sometimes delay starting it at all.</para>
-->
<para>
  ドキュメントは必要不可欠です。
  人はみな、<emphasis>何か</emphasis>を読みたいものです。
  たとえそれがごく簡単な未完成のものであってもかまいません。
  これは、最初のうちは非常に "たいへんな" 作業でしょう。
  新しいオープンソースプロジェクトがつまづく原因として最も多いのもこの分野です。
  これまでに考えてきたミッションステートメントや機能一覧、
  ライセンス、開発状況のまとめなどは、どれも比較的小規模な作業でした。
  しかも「ここまでできたら完了」という点がはっきりしており、
  通常は一度作成すればそれ以降は手を加える必要のないものでした。
  ドキュメント作成はこれらとは異なり、
  決して終わることのない作業です。
  みんながドキュメント作成を嫌がるひとつの理由がここにあります。
</para>

<!--
<para>The most insidious thing is that documentation's utility to
those writing it is the reverse of its utility to those who will read
it.  The most important documentation for initial users is the basics:
how to quickly set up the software, an overview of how it works,
perhaps some guides to doing common tasks.  Yet these are exactly the
things the <emphasis>writers</emphasis> of the documentation know all
too well&mdash;so well that it can be difficult for them to see
things from the reader's point of view, and to laboriously spell out
the steps that (to the writers) seem so obvious as to be unworthy of
mention.</para>
-->
<para>
  ドキュメント作成において最も注意すべき点は、
  ドキュメントの書き手にとって有用な内容と読み手にとって有用な内容とは
  まったく正反対であるということです。
  はじめて使用するユーザーにとって必要なドキュメントは、
  基本をまとめたものです。ソフトウェアを手っ取り早くセットアップする方法や
  動作の概要、そして一般的な作業をするための手引きなどが必要でしょう。
  しかし、これらの内容は、ドキュメントの<emphasis>書き手</emphasis>
  にとってはどれも既知のことばかりです。つまり、これらの内容を
  利用者側の視点で説明することはかなり難しくなるのです。
  (ドキュメントの書き手にとっては) 明らかなことを、
  順を追って説明しなければならないのは大変でしょう。
</para>

<!--
<para>There's no magic solution to this problem.  Someone just needs
to sit down and write the stuff, and then run it by typical new users
to test its quality.  Use a simple, easy-to-edit format such as HTML,
plain text, Texinfo, or some variant of XML&mdash;something that's
convenient for lightweight, quick improvements on the spur of the
moment.  This is not only to remove any overhead that might impede the
original writers from making incremental improvements, but also for
those who join the project later and want to work on the
documentation.</para>
-->
<para>
  この問題を解決するためのマル秘手段は存在しません。
  誰かが腰を落ち着けてそれを書かなければならないのです。
  そして、初心者にそれを見せて内容をチェックしてもらわなければなりません。
  ドキュメントの書式は、シンプルで編集しやすいものにしましょう。
  たとえば HTML やプレーンテキスト、Texinfo あるいは各種 XML などがいいでしょう。
  これらの書式はどれも便利で軽量であり、
  とりあえずどんどんドキュメントを書き進めるには最適です。
  これらを使用すると、ドキュメントの作成者があとからそれを更新する際の手間も少なくなります。
  また、後からプロジェクトに合流した人にとっても、作業に参加しやすくなるでしょう。
</para>

<!--
<para>One way to ensure basic initial documentation gets done is to
limit its scope in advance.  That way, writing it at least won't feel
like an open-ended task.  A good rule of thumb is that it should meet
the following minimal criteria:</para>
-->
<para>
  基本ドキュメントをきちんと整備できるようにするためのひとつの方法としては、
  ドキュメントで網羅する範囲を事前に限定してしまうというものがあります。
  このようにしてしまうと、少なくともドキュメントの作成が
  果てしない作業に思えてしまうことはなくなるでしょう。
  おおざっぱに言うと、最低限として次の内容を満たしていればいいということにしましょう。
</para>

<itemizedlist>
<!--
  <listitem><para>Tell the reader clearly how much technical
            expertise they're expected to have.</para>
  </listitem>
-->
  <listitem>
    <para>
      読者に対して、そのドキュメントを読むために必要となる
      技術的な前提知識を明確に示す。
    </para>
  </listitem>
<!--
  <listitem><para>Describe clearly and thoroughly how to set up
            the software, and somewhere near the beginning of the
            documentation, tell the user how to run some sort of
            diagnostic test or simple command to confirm that
            they've set things up correctly.  Startup
            documentation is in some ways more important than
            actual usage documentation.  The more effort someone has
            invested in installing and getting started with the
            software, the more persistent she'll be in figuring out
            advanced functionality that's not well-documented.
            When people abandon, they abandon early; therefore,
            it's the earliest stages, like installation, that need
            the most support.</para>
  </listitem>
-->
  <listitem>
    <para>
      そのソフトウェアのセットアップ手順を、
      明確かつ完全に説明する。
      そしてドキュメントの最初のほうで
      簡単な動作テストの方法や基本的なコマンドを説明し、
      セットアップが正常に完了したのかを確認できるようにする。
      導入に関するドキュメントは、
      ある意味実際の使用法のドキュメントよりも重要です。
      より多くの人がインストールしてくれればくれるほど、
      ドキュメント化されていない高度な機能を発見してもらえる可能性も高くなります。
      ユーザーがつまづくとしたら、それは初期であることが多くなります。
      つまり、最も初期の段階であるインストール時にこそ最大のサポートが必要となるわけです。
    </para>
  </listitem>
<!--
  <listitem><para>Give one tutorial-style example of how to do a
            common task.  Obviously, many examples for many tasks
            would be even better, but if time is limited, pick one
            task and walk through it thoroughly.  Once someone
            sees that the software <emphasis>can</emphasis> be
            used for one thing, they'll start to explore what else
            it can do on their own&mdash;and, if you're lucky,
            start filling in the documentation themselves.  Which
            brings us to the next point...</para>
  </listitem>
-->
  <listitem>
    <para>
      チュートリアル形式の例を用いて、一般的な作業の方法を示すこと、
      もちろんさまざまな作業に対するたくさんの例があるにこしたことはありませんが、
      時間が限られている場合は、どれかひとつに絞ってそれを完璧にするようにしましょう。
      そのソフトウェアがなにかひとつの場面で
      <emphasis>使える</emphasis>ことがわかれば、
      あとは自分自身で他の使い方を見つけてくれるようになります。
      また、もしかしたら「残りのドキュメントを書いてあげようか？」
      なんていう幸運なことになるかもしれません。
      これについては次のポイントで取り上げます。
    </para>
  </listitem>
<!--
  <listitem><para>Label the areas where the documentation is known
            to be incomplete.  By showing the readers that you are
            aware of its deficiencies, you align yourself with
            their point of view.  Your empathy reassures them that
            they don't face a struggle to convince the project of
            what's important.  These labels needn't represent
            promises to fill in the gaps by any particular date
           &mdash;it's equally legitimate to treat them as open
            requests for volunteer help.</para>
  </listitem>
-->
  <listitem>
    <para>
      ドキュメントがまだ出来上がっていないところについては、
      それを示しておくこと。このように結果を認めることによって、
      あなたは読者と同じ視点に立つことができるようになります。
      また、これによって読者は、
      そのプロジェクトにとって重要なことを理解できるようになります。
      別に「いつまでにこのドキュメントを仕上げる」と表明する必要はありません。
      これを示すのは、だれかの助けを必要としていることを示すのと同じことになります。
    </para>
  </listitem>
</itemizedlist>

<!--
<para>The last point is of wider importance, actually, and can be
applied to the entire project, not just the documentation.  An
accurate accounting of known deficiencies is the norm in the open
source world.  You don't have to exaggerate the project's
shortcomings, just identify them scrupulously and dispassionately when
the context calls for it (whether in the documentation, in the bug
tracking database, or on a mailing list discussion).  No one will
treat this as defeatism on the part of the project, nor as a
commitment to solve the problems by a certain date, unless the project
makes such a commitment explicitly.  Since anyone who uses the
software will discover the deficiencies for themselves, it's much
better for them to be psychologically prepared&mdash;then the
project will look like it has a solid knowledge of how it's
doing.</para>
-->
<para>
  最後に、より広い意味で重要なことを述べて起きます。
  これは、単にドキュメントだけに限らずプロジェクト全体にあてはまることですが、
  足りていない部分をちゃんと認めるということは、
  オープンソースの世界においては当たり前のことだということです。
  そのプロジェクトの欠点を必要以上に誇張する必要はありません。
  単に、きちんと公平に適切な場所
  (ドキュメントやバグトラッキングデータベース、あるいはメーリングリストなど)
  でそれを認めればいいだけのことです。
  それを負け犬根性だという人はいないでしょうし、
  明示的に示さない限りは「いつまでにこれを解決する」という期限を問われることもありません。
  ソフトウェアを使用していると、だれでもそのソフトウェアの欠陥を発見してしまうものです。
  彼らが心の準備をできるようにしておいてあげましょう。
  すると、そのプロジェクトは自分たちのことがよくわかっているとみなされるようになります。
</para>

<sidebar id="starting-a-faq">
<!--
  <title>Maintaining a FAQ</title>
-->
  <title>FAQ の管理</title>

<!--
  <para>A <firstterm>FAQ</firstterm> ("Frequently Asked Questions"
  document) can be one of the best investments a project makes in
  terms of educational payoff.  FAQs are highly tuned to the questions
  users and developers actually ask&mdash;as opposed to the questions
  you might have <emphasis>expected</emphasis> them to ask&mdash;and
  therefore, a well-maintained FAQ tends to give those who consult it
  exactly what they're looking for.  The FAQ is often the first place
  users look when they encounter a problem, often even in preference
  to the official manual, and it's probably the document in your
  project most likely to be linked to from other sites.</para>
-->
  <para>
    <firstterm>FAQ</firstterm> ("Frequently Asked Questions"、
    つまり "よくある質問集") は、時間をかけて作成するだけの価値があるものです。
    FAQ には、ユーザーや開発者が実際に質問した内容
    &mdash;彼らが <emphasis>質問するであろう</emphasis>
    と予測した内容ではありません&mdash;をまとめます。
    その結果、よくメンテナンスされている FAQ
    を見ればたいていの質問に対する答えが見つかるようになります。
    ユーザーは、何か問題に出くわすとまず FAQ を調べます。
    公式マニュアルよりも FAQ のほうを先に見ることも多いでしょう。
    そして、他のサイトから最も多くリンクされることになるのも
    FAQ となるでしょう。
  </para>

<!--
  <para>Unfortunately, you cannot make the FAQ at the start of the
  project.  Good FAQs are not written, they are grown.  They are by
  definition reactive documents, evolving over time in response to
  people's day-to-day usage of the software.  Since it's impossible to
  correctly anticipate the questions people will ask, it is impossible
  to sit down and write a useful FAQ from scratch.</para>
-->
  <para>
    残念なことに、プロジェクトが始まったばかりのころは
    FAQ を用意することはできません。FAQ は誰かが書くものではなく、
    徐々に成長していくものだからです。FAQ は、
    多くの人が日々ソフトウェアを使っていく過程でできあがっていくドキュメントです。
    これから受けることになるであろう質問を正確に予測することなど不可能なので、
    有用な FAQ をゼロから書き上げることなどできないのです。
  </para>

<!--
  <para>Therefore, don't waste your time trying to.  You may, however,
  find it useful to set up a mostly blank FAQ template, so there will
  be an obvious place for people to contribute questions and answers
  after the project is under way.  At this stage, the most important
  property is not completeness, but convenience: if the FAQ is easy to
  add to, people will add to it.  (Proper FAQ maintenance is a
  non-trivial and intriguing problem, and is discussed more in <xref
  linkend="faq-manager"/><phrase output="printed"> in
  <xref linkend="managing-volunteers"/></phrase>.)</para>
-->
  <para>
    したがって、FAQ の作成にあまり時間をとられないようにしてください。
    しかし、ほとんど空っぽの FAQ のテンプレートを用意しておくことは良い考えかもしれません。
    そうすることによって、プロジェクトが動き始めた後に
    ユーザーが質問と回答を投稿してくれるかもしれません。
    この段階で大事なのは、完全性ではなく利便性です。
    FAQ が追加しやすいようになっていれば、皆がそこに追加してくれるでしょう
    (FAQ を適切に管理するという作業は決して簡単なものではなく、
    興味をそそる問題です。これについては、
    <phrase output="printed"><xref linkend="managing-volunteers"/></phrase>
    の <xref linkend="faq-manager"/> でより詳しく説明します)。
  </para>
</sidebar>

<sect3 id="documentation-availability">
<!--
<title>Availability of documentation</title>
-->
<title>ドキュメントの公開方法</title>

<!--
<para>Documentation should be available from two places: online
(directly from the web site), <emphasis>and</emphasis> in the
downloadable distribution of the software (see
<xref linkend="packaging"/><phrase output="printed"> in
<xref linkend="development-cycle"/></phrase>).  It needs to be
online, in browsable form, because people often read documentation
<emphasis>before</emphasis> downloading software for the first time,
as a way of helping them decide whether to download at all.  But it
should also accompany the software, on the principle that downloading
should supply (i.e., make locally accessible) everything one needs to
use the package.</para>
-->
<para>
  ドキュメントは２通りの方法で公開しなければなりません。オンライン
  (ウェブサイト上で直接公開するもの)、<emphasis>そして</emphasis>
  ソフトウェアの配布物としてダウンロード可能なもの
  (<phrase output="printed"><xref linkend="development-cycle"/></phrase>
  の <xref linkend="packaging"/> を参照してください) の２通りです。
  オンラインで公開しなければならない理由は、
  人は普通そのソフトウェアをダウンロードする <emphasis>前に</emphasis>
  ドキュメントを読むことが多いからです。
  ダウンロードに値するかどうかを、ドキュメントの内容で判断するわけです。
  しかし、それだけでなくソフトウェアにも同梱しておく必要があります。
  というわけで、ダウンロード版をサポートする理由は、
  そのパッケージを使用するすべての人が
  ドキュメントにローカルからアクセスできる必要があるからです。
</para>

<!--
<para>For online documentation, make sure that there is a link that
brings up the <emphasis>entire</emphasis> documentation in one HTML
page (put a note like "monolithic" or "all-in-one" or "single large
page" next to the link, so people know that it might take a while to
load).  This is useful because people often want to search for a
specific word or phrase across the entire documentation.  Generally,
they already know what they're looking for; they just can't remember
what section it's in.  For such people, nothing is more frustrating
than encountering one HTML page for the table of contents, then a
different page for the introduction, then a different page for
installation instructions, etc.  When the pages are broken up like
that, their browser's search function is useless.  The separate-page
style is useful for those who already know what section they need, or
who want to read the entire documentation from front to back in
sequence.  But this is <emphasis>not</emphasis> the most common way
documentation is accessed.  Far more often, someone who is basically
familiar with the software is coming back to search for a specific
word or phrase.  To fail to provide them with a single, searchable
document would only make their lives harder.</para>
-->
<para>
  ドキュメントをオンラインで提供する際には、ドキュメント
  <emphasis>全体</emphasis>を単一の HTML
  ページにまとめたものへのリンクを用意しておくようにしましょう
  (このページへのリンクには、"完全版" や "すべてをひとまとめにしたもの"、
  あるいは "単一の大きなページ" といった説明をつけておきます。
  これによって、そのページの読み込みに時間がかかることを示します)。
  これは、ドキュメント全体から特定の単語やフレーズを検索したいといった用途において便利です。
  一般に、そのような場合は何を探したいのかが既にわかっています。
  単に、それが第何章にあるのかが思い出せないだけなのです。
  そんな人たちにとっては、あるページには目次だけ、次のページには導入だけ、
  その次のページにはインストール方法だけ、……
  といったドキュメントだとちょっと困り者です。
  こんな形式のページ構成だと、ブラウザの検索機能が無意味になってしまいます。
  個別に分割した形式が便利なのは、必要な内容が第何章にあるのかが事前にわかっている場合です。
  あるいは、ドキュメント全体を頭から最後まで順に読んでいきたい人にとっても便利でしょう。
  しかし、ドキュメントにアクセスする人の多くは、このパターンには
  <emphasis>当てはまりません</emphasis>。
  よくあるパターンは、そのソフトウェアの基本的な内容をある程度理解している人が、
  特定の単語やフレーズを検索するといった使い方です。
  そんな人たちに対して単一の検索可能なドキュメントを提供しなければ、
  彼らにとっては非常に生きにくい世界になってしまいます。
</para>

</sect3>

<sect3 id="developer-documentation">
<!--
<title>Developer documentation</title>
-->
<title>開発者向けドキュメント</title>

<!--
<para>Developer documentation is written to help programmers
understand the code, so they can repair and extend it.  This is
somewhat different from the <emphasis>developer guidelines</emphasis>
discussed earlier, which are more social than technical.  Developer
guidelines tell programmers how to get along with each other;
developer documentation tells them how to get along with the code
itself.  The two are often packaged together in one document for
convenience (as with the <ulink
url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/> example given
earlier), but they don't have to be.</para>
-->
<para>
  開発者向けドキュメントを書く目的は、
  プログラマがコードを理解するのを助けること、
  そしてコードの修正や拡張ができるようになるのを助けることです。
  先ほど説明した <emphasis>開発者向けガイドライン</emphasis>
  は技術的というよりも社会的な内容でしたが、
  今回説明するドキュメントはこれとは少々異なります。
  開発者向けガイドラインは、
  プログラマ同士がお互いうまくやっていくための方法をまとめたものです。
  一方、開発者向けドキュメントはコードそのものとうまくやっていくための方法を示すものとなります。
  利便性のためにこれらの２つのドキュメントがひとつにまとめられていることもあります
  (先ほど例でしめした <ulink url="http://svn.collab.net/repos/svn/trunk/www/hacking.html"/>
  のように) が、そうしなければならないというわけではありません。
</para>

<!--
<para>Although developer documentation can be very helpful, there's no
reason to delay a release to do it.  As long as the original authors
are available (and willing) to answer questions about the code, that's
enough to start with.  In fact, having to answer the same questions
over and over is a common motivation for writing documentation.  But
even before it's written, determined contributors will still manage to
find their way around the code.  The force that drives people to spend
time learning a code base is that the code does something useful for
them.  If people have faith in that, they will take the time to figure
things out; if they don't have that faith, no amount of developer
documentation will get or keep them.</para>
-->
<para>
  開発者ドキュメントがいかに有用なものであったとしても、
  それが原因でリリースを遅らせるようなことがあってはなりません。
  そのプログラムの作者自身がコードに関する質問に答えられる
  (そして答える気がある) のなら、当面はそれで十分です。
  実際のところ、何度も何度も同じ質問に答える羽目になるっていうことが
  ドキュメント作成の動機となることもあります。
  しかし、ドキュメントを書き始める前であっても、
  プロジェクトに協力することを決心した人たちは
  何とかコードと格闘しようとするものです。
  何が人をそこまでさせるのかといえば、
  そのコードがきっと何か自分の役に立つだろうと考えているからです。
  人がそれを信じていれば、自分自身で何とかしようとするでしょう。
  信じていなければ、大量の開発者向けドキュメントがあったとしてもあまり役立たないでしょう。
</para>

<!--
<para>So if you have time to write documentation for only one
audience, write it for users.  All user documentation is, in effect,
developer documentation as well; any programmer who's going to work on
a piece of software will need to be familiar with how to use it.
Later, when you see programmers asking the same questions over and
over, take the time to write up some separate documents just for
them.</para>
-->
<para>
  そう。そんなドキュメントを書く時間があるのなら、
  まずユーザー向けのドキュメントを作成しましょう。
  ユーザー向けのドキュメントは、事実上
  開発者向けのドキュメントでもあります。
  そのソフトウェアの開発に参加しようとしているプログラマは、
  まずそのソフトウェアの使い方を身に着けなければならないからです。
  後になって他のプログラマが同じような質問を
  何度も何度も繰り返すようになったときに、
  あらためて時間をとってドキュメントを作成すればいいでしょう。
</para>

<!--
<para>Some projects use wikis for their initial documentation, or even
as their primary documentation.  In my experience, this really only
works if the wiki is actively edited by a few people who agree on how
the documentation is to be organized and what sort of "voice" it
should have.  See
<xref linkend="wikis"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for
more.</para>
-->
<para>
  プロジェクトによっては wiki を用いてドキュメントを書き始めるところもあります。
  それどころか、wiki をメインのドキュメントとしているところもあります。
  私の経験上、これはあまりうまくいかないものです。
  もしうまくいくとすれば、それはドキュメントの構成をしっかり把握し、
  そこに何を書くべきかを熟知した数人の人間が頻繁に wiki を更新している場合のみでしょう。
  詳細は、<phrase output="printed"><xref linkend="technical-infrastructure"/></phrase>
  の <xref linkend="wikis"/> をご覧ください。
</para>

</sect3>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="example-output">
<!--
<title>Example Output and Screenshots</title>
-->
<title>使用例とスクリーンショット</title>

<!--
<para>If the project involves a graphical user interface, or if it
produces graphical or otherwise distinctive output, put some samples
up on the project web site.  In the case of interface, this means
screenshots; for output, it might be screenshots or just files.  Both
cater to people's need for instant gratification: a single screenshot
can be more convincing than paragraphs of descriptive text and mailing
list chatter, because a screenshot is inarguable proof that the
software <emphasis>works</emphasis>.  It may be buggy, it may be hard
to install, it may be incompletely documented, but that screenshot is
still proof that if one puts in enough effort, one can get it to
run.</para>
-->
<para>
  そのプロジェクトがグラフィカルなユーザーインターフェイスを持っていたり
  グラフィカルな出力を行ったりする場合は、
  そのサンプルをプロジェクトのウェブサイトに公開しておきましょう。
  インターフェイスの場合は、スクリーンショットがこれにあたります。
  出力の場合は、同じくスクリーンショットか、
  あるいは実際の出力ファイルとなります。
  これはどちらも、ユーザーの要望に応えるために必要となります。
  長々とした説明やメーリングリストでのやりとりよりも、
  ほんの一枚のスクリーンショットのほうが説得力を持つこともあります。
  なぜなら、スクリーンショットはまさにそのソフトウェアが
  <emphasis>動作した</emphasis>結果であることに疑いの余地がないからです。
  バグだらけかもしれません。インストールが難しいかもしれません。
  ドキュメントが足りないかもしれません。
  でも、スクリーンショットさえあれば、
  何とかがんばれば動かすことができるんだということの証明になります。
</para>

<sidebar id="screenshots">
<!--
  <title>Screenshots</title>
-->
  <title>スクリーンショット</title>
<!--
  <para>Since screenshots can be daunting until you've actually made a
  few, here are basic instructions for making them.  Using the Gimp
  (<ulink url="http://www.gimp.org/"/>), open
  <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>,
  choose <guimenuitem>Single&nbsp;Window</guimenuitem> or
  <guimenuitem>Whole&nbsp;Screen</guimenuitem>, then click
  <guimenuitem>OK</guimenuitem>.  Now your next mouse click will
  capture the window or screen clicked on as an image in the Gimp.
  Crop and resize the image as necessary, using the instructions at 
  <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>.</para> 
-->
  <para>
    作ったことがない人にとっては、スクリーンショットの作成は大変なものに感じられるかもしれません。
    そこで、ここではその基本的な方法を説明します。Gimp (<ulink url="http://www.gimp.org/"/>)
    を立ち上げて、メニューから
    <guimenu>File</guimenu>-&gt;<guimenu>Acquire</guimenu>-&gt;<guimenu>Screenshot</guimenu>
    を選び、<guimenuitem>Single&nbsp;Window</guimenuitem> あるいは
    <guimenuitem>Whole&nbsp;Screen</guimenuitem> のいずれかを指定して
    <guimenuitem>OK</guimenuitem> をクリックします。
    その次にマウスでクリックしたウィンドウあるいはスクリーンが、
    Gimp に画像として取り込まれます。あとは、必要に応じて画像の一部を切り出したり
    サイズを変更したりします。その方法は
    <ulink url="http://www.gimp.org/tutorials/Lite_Quickies/#crop"/>
    で説明されています。
  </para> 
</sidebar>
  
</sect2>

<!--
<para>There are many other things you could put on the project web
site, if you have the time, or if for one reason or another they are
especially appropriate: a news page, a project history page, a related
links page, a site-search feature, a donations link, etc.  None of
these are necessities at startup time, but keep them in mind for the
future.</para>
-->
<para>
  プロジェクトのウェブサイトに置くことのできる情報は、これら以外にもたくさんあります。
  最新情報のページやプロジェクトの歴史のページ、関連サイトへのリンク、
  サイト内検索の機能、寄付の受付などです。
  もし時間が許したり何か特別な理由があるのなら、これらを作成してもよいでしょうが、
  プロジェクトの立ち上げ時には通常はどれも不要です。
  しかし、将来はこれらも考慮する必要が出てくることを覚えておきましょう。
</para>

<sect2 id="starting-with-canned-hosting">
<!--
<title>Canned Hosting</title>
-->
<title>公開場所</title>

<!--
<para>There are a few sites that provide free hosting and
infrastructure for open source projects: a web area, version control,
a bug tracker, a download area, chat forums, regular backups, etc.
The details vary from site to site, but the same basic services are
offered at all of them.  By using one of these sites, you get a lot
for free; what you give up, obviously, is fine-grained control over
the user experience.  The hosting service decides what software the
site runs, and may control or at least influence the look and feel of
the project's web pages.</para>
-->
<para>
  オープンソースプロジェクトのために、
  ウェブサイト用の領域やバージョン管理機能、バグ追跡システム、ダウンロードエリア、
  掲示板、バックアップなどの機能を無料で提供するサイトがいくつかあります。
  詳細はサイトによって異なりますが、基本的な機能はどこでも同じようなものです。
  これらのサイトのいずれかを使用すると、無料で多くのものを手に入れることができます。
  ただ、ユーザーへの見せ方をきめ細かく調整するといったことはあきらめなければなりません。
  そのサイトでどんなソフトウェアを用いるのかを決めるのはホスティング業者であり、
  プロジェクトの見た目はその業者が選んだソフトウェアに左右されることになります。
</para>

<!--
<para>See
<xref linkend="canned-hosting"/><phrase output="printed"> in
<xref linkend="technical-infrastructure"/></phrase> for a more
detailed discussion of the advantages and disadvantages of canned
hosting, and a list of sites that offer it.</para>
-->
<para>
  あらかじめ用意されているホスティングサイトを使うことの利点と欠点、
  ホスティングサイトの一覧などについての詳細は、
  <phrase output="printed"><xref linkend="technical-infrastructure"/></phrase>
  の <xref linkend="canned-hosting"/> をご覧ください。
</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="license-quickstart">
<!--
<title>Choosing a License and Applying It</title>
-->
<title>ライセンスの選択と適用</title>

<!--
<para>This section is intended to be a very quick, very rough guide to
choosing a license.  Read <xref linkend="legal"/> to understand
the detailed legal implications of the different licenses, and how the
license you choose can affect people's ability to mix your software
with other free software.</para>
-->
<para>
  このセクションでは、ライセンスの選択方法について
  手っ取り早く大雑把に説明します。
  個々のライセンスについての法的な意味合いや
  他のフリーソフトウェアと組み合わせて使用する際に出てくる影響などについての詳細は
  <xref linkend="legal"/> をご覧ください。
</para>

<!--
<para>There are a great many free software licenses to choose from.
Most of them we needn't consider here, as they were written to satisfy
the particular legal needs of some corporation or person, and wouldn't
be appropriate for your project.  We will restrict ourselves to just
the most commonly used licenses; in most cases, you will want to
choose one of them.</para>
-->
<para>
  世の中には、フリーソフトウェア用の優れたライセンスがたくさんあります。
  ここでは、そのほとんどについては取り上げません。
  なぜならそれらは特定の人や組織の法的な需要を満たすためだけに書かれたものだったり
  あなたのプロジェクトには適切でないものだったりするからです。
  ここで取り上げるのは、よく用いられているものに限定します。
  ほとんどの場合は、ここで取り上げたものの中からライセンスを選択することになるでしょう。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-non-gpl">
<!--
<title>The "Do Anything" Licenses</title>
-->
<title>「何でもできる」ライセンス</title>

<!--
<para>If you're comfortable with your project's code potentially being
used in proprietary programs, then use
an <firstterm>MIT/X-style</firstterm> license.  It is the simplest of
several minimal licenses that do little more than assert nominal
copyright (without actually restricting copying) and specify that the
code comes with no warranty.  See
<xref linkend="license-choosing-mit-x"/> for details.</para>
-->
<para>
  あなたプロジェクトのコードが独占的ソフトウェアに流用されることが気にならないのなら、
  <firstterm>MIT/X スタイル</firstterm> のライセンスを使用しましょう。
  これは必要最小限のことのみを記したライセンスです。
  このライセンスは、名目上の著作権 (実際には複製を制限しません)
  と無保証であるということだけを明記するシンプルなものです。
  詳細は <xref linkend="license-choosing-mit-x"/> を参照してください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-gpl">
<!--
<title>The GPL</title>
-->
<title>GPL</title>

<!--
<para>If you don't want your code to be used in proprietary programs,
use the GNU General Public License
(<ulink url="http://www.gnu.org/licenses/gpl.html"/>).  The GPL is
probably the most widely recognized free software license in the world
today.  This is in itself a big advantage, since many potential users
and contributors will already be familiar with it, and therefore won't
have to spend extra time to read and understand your license.  See
<xref linkend="license-choosing-gpl"/><phrase output="printed">
in <xref linkend="legal"/></phrase> for details.</para>
-->
<para>
  あなたプロジェクトのコードが独占的ソフトウェアに流用されることが気にいらないのなら、
  GNU General Public License
  (<ulink url="http://www.gnu.org/licenses/gpl.html"/>) を使用しましょう。
  GPL は、おそらく現在世界中でいちばんよく知られているフリーソフトウェアライセンスです。
  これは最大の利点です。というのも、
  プロジェクトに参加しようと考えているユーザーの多くはこのライセンスを知っており、
  そのライセンスについて学習する手間が省けるからです。
  詳細は、<phrase output="printed"><xref linkend="legal"/></phrase>
  の <xref linkend="license-choosing-gpl"/> を参照してください。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="license-quickstart-applying">
<!--
<title>How to Apply a License to Your Software</title>
-->
<title>ライセンスを適用する方法</title>

<!--
<para>Once you've chosen a license, you should state it on the
project's front page.  You don't need to include the actual text of
the license there; just give the name of the license, and make it link
to the full license text on another page.</para>
-->
<para>
  適用するライセンスを決めたら、それをプロジェクトのトップページに記述します。
  実際のライセンスの本文をここで示す必要はありません。単にライセンスの名前を示すだけにしておき、
  ライセンスの本文は別のページに置いてそこにリンクするようにしましょう。
</para>

<!--
<para>This tells the public what license you
<emphasis>intend</emphasis> the software to be released under, but
it's not sufficient for legal purposes.  For that, the software itself
must contain the license.  The standard way to do this is to put the
full license text in a file called <filename>COPYING</filename> (or
<filename>LICENSE</filename>), and then put a short notice at the top
of each source file, naming the copyright date, holder, and license,
and saying where to find the full text of the license.</para>
-->
<para>
  これにより、そのソフトウェアをどのようなライセンスのもとで提供
  <emphasis>するつもり</emphasis> なのかを示すことはできます。
  しかし、法的な側面からみるとこれだけでは不十分です。
  法的な面を考えると、ソフトウェア自身にライセンスが含まれていなければなりません。
  標準的な方法は、ライセンスの全文を含んだテキストファイル <filename>COPYING</filename>
  (あるいは <filename>LICENSE</filename>) をソフトウェアに同梱し、
  それと同時に各ソースファイルの先頭に簡単な説明を付加します。
  この説明に含めるのは、著作権の発生した日付や著作権の保持者、
  ライセンス名、そしてライセンスの全文がどこで取得できるかなどです。
</para>

<!--
<para>There are many variations on this pattern, so we'll look at just
one example here.  The GNU GPL says to put a notice like this at the
top of each source file:</para>
-->
<para>
  これにはさまざまなパターンがあります。ここでは、ひとつの例として
  GNU GPL を見てみましょう。各ソースファイルの先頭には、次のような説明を付加します。
</para>

<!--
<screen>
Copyright (C) &lt;year&gt;  &lt;name of author&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>
-->
<screen>
Copyright (C) &lt;年&gt;  &lt;作者名&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</screen>

<!--
<para>It does not say specifically that the copy of the license you
received along with the program is in the file
<filename>COPYING</filename>, but that's where it's usually put.  (You
could change the above notice to state that directly.)  This template
also gives a geographical address from which to request a copy of the
license.  Another common method is to give a link to a web page
containing the license.  Just use your judgement and point to wherever
you feel the most permanent copy of the license is maintained, which
might simply be somewhere on your project's web site.  In general, the
notice you put in each source file does not have to look exactly like
the one above, as long as it starts with the same notice of copyright
holder and date, states the name of the license, and makes it clear
where to view the full license.</para>
-->
<para>
  この文面では、ライセンスの全文がプログラムに同梱されているファイル <filename>COPYING</filename>
  に存在することは明記されていません。しかし、通常はこの名前のファイルを使用することになります
  (上の文面を変更して、このファイル名を明記するようにしてもかまいません)。
  このテンプレートには、ライセンスのコピーを取得するための手紙の宛先も記載されています。
  これ以外の一般的な方法としては、ライセンスの本文を記載したウェブページへのリンクを用意するというものもあります。
  あなたの自己判断で、ライセンスのコピーが最も恒常的に存在すると思われる場所を使用するようにしましょう。
  たとえば、あなたのプロジェクトのウェブサイト上のどこかでもかまいません。
  一般的には、各ソースファイル中に含める注意書きは上のものと全く同じである必要はありません。
  著作権保有者と日付、ライセンスの名前、そしてライセンスの全文がどこで取得できるのか
  といったことが含まれていればいいのです。
</para>

</sect2>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="setting-tone">
<!--
<title>Setting the Tone</title>
-->
<title>うまく引っ張っていく</title>

<!--
<para>So far we've covered one-time tasks you do during project setup:
picking a license, arranging the initial web site, etc.  But the most
important aspects of starting a new project are dynamic.  Choosing a
mailing list address is easy; ensuring that the list's conversations
remain on-topic and productive is another matter entirely.  If the
project is being opened up after years of closed, in-house
development, its development processes will change, and you will have
to prepare the existing developers for that change.</para>
-->
<para>
  ここまで取り上げてきたのは、プロジェクトの立ち上げ時に一度だけ必要となる作業でした。
  ライセンスの選択や最初のウェブサイトの作成などです。
  しかし、プロジェクト開始時に最も大切なのは、それ以外の動的な作業です。
  メーリングリストのアドレスを決めるなんていうのは簡単なことです。
  でも、そのメーリングリストでのやり取りを有益で前向きなものに保つのは
  それとはまったく別の話となります。
  これまで何年にもわたって社内の閉じた環境で開発が進められてきたものをオープンにすると、
  その開発プロセスはこれまでとはかわります。これまでの開発者たちに対して、
  その変更に対応できるように準備をさせなければなりません。
</para>

<!--
<para>The first steps are the hardest, because precedents and
expectations for future conduct have not yet been set.  Stability in a
project does not come from formal policies, but from a shared,
hard-to-pin-down collective wisdom that develops over time.  There are
often written rules as well, but they tend to be essentially a
distillation of the intangible, ever-evolving agreements that really
guide the project.  The written policies do not define the project's
culture so much as describe it, and even then only
approximately.</para>
-->
<para>
  最も困難なのが、はじめの一歩です。なぜなら、今後の方向性に関する先例もなければ
  今後どのようになっていくのかもまだはっきりわからないからです。
  プロジェクトの安定性は、形式張った方針からくるものではなく、
  開発者の間で徐々にできあがっていく集合知によってもたらされるものです。
  そして、これはしっかりとらえにくいものです。
  明文化された規則があることもありますが、それはたいてい、
  プロジェクトを本当に動かしているこれらの無形の合意をまとめあげたものにすぎません。
  明文化された方針によってプロジェクトの文化を定義することはできませんし、
  それに近づくことさえできません。
</para>

<!--
<para>There are a few reasons why things work out this way.  Growth
and high turnover are not as damaging to the accumulation of social
norms as one might think.  As long as change does not happen
<emphasis>too</emphasis> quickly, there is time for new arrivals to
learn how things are done, and after they learn, they will help
reinforce those ways themselves.  Consider how children's songs
survive the centuries.  There are children today singing roughly the
same rhymes as children did hundreds of years ago, even though there
are no children alive now who were alive then.  Younger children hear
the songs sung by older ones, and when they are older, they in turn
will sing them in front of other younger ones.  The children are not
engaging in a conscious program of transmission, of course, but the
reason the songs survive is nonetheless that they are transmitted
regularly and repeatedly.  The time scale of free software projects
 may not be measured in centuries (we don't know yet), but the dynamics
of transmission are much the same.  The turnover rate is faster,
however, and must be compensated for by a more active and deliberate
transmission effort.</para>
-->
<para>
  このようになるには、いくつかの理由があります。
  成長と変化の速さは、人が考えるほどには文化の蓄積に影響を与えません。
  変化の速度があまりにも高速にならない限り、新入りさんがそれを学ぶ時間はあります。
  そして学び終えた後は、自分自身でそのやりかたを補強してくれるでしょう。
  童謡が、いったいどのようにして何百年も歌い継がれるようになったのかを考えてみましょう。
  現在の子どもたちが歌っている童謡は、基本的には数百年前の子どもたちの歌っているものと同じです。
  もちろん、昔の子どもたちが童謡を歌っていた頃には現在の子どもたちはまだ産まれていません。
  子どもたちはその歌を年長者から聞いて覚えます。そして子どもたちが成長すると、
  年少者の前でそれを歌って聞かせるわけです。もちろん、
  子どもたちは意識的にそうするよう指示されているわけではありません。
  しかし、何百年も同じ歌が歌い継がれているという事実は、
  このような伝承が常に繰り返し行われていることを示しています。
  フリーソフトウェアプロジェクトの歴史が今後何百年も続くかどうかはわかりません
  (どうなるかはまだわかりません) が、この仕組みは似たり寄ったりでしょう。
  しかし、その回転率はより高速になるので、
  より活発かつ慎重に伝承を行うようにしなければなりません。
</para>

<!--
<para>This effort is aided by the fact that people generally show up
expecting and looking for social norms.  That's just how humans are
built.  In any group unified by a common endeavor, people who join
instinctively search for behaviors that will mark them as part of the
group.  The goal of setting precedents early is to make those
"in-group" behaviors be ones that are useful to the project; for once
established, they will be largely self-perpetuating.</para>
-->
<para>
  この動きは、人が基本的に社会規範を求めているという性質があるので成功しやすくなります。
  それこそが人が存在する理由なのですから。
  一般的な方法でまとめあげられた集団なら、そこに参加しようとする人々は
  本能的にその集団の一員として振る舞うためのやりかたを見つけようとするものです。
  より早い時期に先例を確立するには、そのプロジェクトに役立つ
  「グループとしての」振る舞いを作ることです。いったんできあがってしまえば、
  あとは勝手にそれが広まっていきます。
</para>

<!-- todo: maybe say this:

     Point out how the sponsor's noble fair-mindedness and balanced
     judgement are not properties that can usefully be written down
     formally, because they wouldn't be believed.  They'd just look
     like propaganda anyway, so there's no point.  This is one of
     those areas where conduct and informal precedent is the *only*
     way to solidify a social norm.  And refer to the relevant parts
     of Chapter 5.
-->

<!--
<para>Following are some examples of specific things you can do to set
good precedents.  They're not meant as an exhaustive list, just as
illustrations of the idea that setting a collaborative mood early
helps a project tremendously.  Physically, every developer may be
working alone in a room by themselves, but you can do a lot to make
them <emphasis>feel</emphasis> like they're all working together in
the same room.  The more they feel this way, the more time they'll
want to spend on the project.  I chose these particular examples
because they came up in the Subversion project (<ulink
url="http://subversion.tigris.org/"/>),
which I participated in and observed from its very beginning.  But
they're not unique to Subversion; situations like these will come up
in most open source projects, and should be seen as opportunities to
start things off on the right foot.</para>
-->
<para>
  以下に示すいくつかの例は、
  よりよい先例を作るためにできる具体的なことをまとめたものです。
  これだけを行えば完全だというものではありません。単に、
  「早いうちに協力的なムードを作り上げておくとプロジェクトを運営しやすくなりますよ」
  ということを説明するためだけのものです。
  物理的には、個々の開発者がそれぞれ別の場所で作業をしているのかもしれません。
  しかし、まるで同じ部屋で一緒に開発しているかのように <emphasis>感じさせる</emphasis>
  ために、いろいろなことができます。
  彼らがこのように感じてくれればくれるほど、プロジェクトに対してより時間をさきたいと思うようになるでしょう。
  以下の例は、Subversion プロジェクト (<ulink url="http://subversion.tigris.org/"/>)
  から選びました。私は、開始当時からこのプロジェクトに参加しています。
  しかし、これらの例は決して Subversion 独特のものではありません。
  同様の状況は大半のオープンソースプロジェクトで起こりえるでしょう。
  また、プロジェクトに片足を突っ込む際には意識しておく必要があることばかりです。
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="avoid-private-discussions">
<!--
<title>Avoid Private Discussions</title>
-->
<title>個人的な議論を避ける</title>

<!--
<para>Even after you've taken the project public, you and the other
founders will often find yourselves wanting to settle difficult
questions by private communications among an inner circle.  This is
especially true in the early days of the project, when there are so
many important decisions to make, and, usually, few volunteers
qualified to make them.  All the obvious disadvantages of public list
discussions will loom palpably in front of you: the delay inherent in
email conversations, the need to leave sufficient time for consensus
to form, the hassle of dealing with naive volunteers who think they
understand all the issues but actually don't (every project has these;
sometimes they're next year's star contributors, sometimes they stay
naive forever), the person who can't understand why you only want to
solve problem X when it's obviously a subset of larger problem Y, and
so on.  The temptation to make decisions behind closed doors and
present them as <foreignphrase>faits accomplis</foreignphrase>, or at
least as the firm recommendations of a united and influential voting
block, will be great indeed.</para>
-->
<para>
  プロジェクトを一般に向けて公開した後でも、難しい問題についての話し合いは
  内輪の関係者たちだけで行いたいと考えることもあるでしょう。
  これは、プロジェクトが始まったばかりのときにはあり得ることです。
  話し合うべきことは山ほどありますし、通常は
  その話し合いに参加する資格のある外部の協力者はほとんどいないからです。
  公開されている場所で議論することによるさまざまな損失があなたの頭の中に浮かぶことでしょう。
  メールでのやりとりに特有ののんびりした速度、
  合意を形成するのにかかる時間、本当は何もわかっていないのに
  「自分はすべてわかっている」と勘違いしているボランティアへの対応
  (どんなプロジェクトでもこの手の人がいます。彼らのうち何人かは将来すばらしい貢献をしてくれることになるでしょうが、
  中にはずっと勘違いしたままの人だっています)、ある問題 X がより大きい問題 Y の一部であるときに、
  なぜ問題 Y ではなく問題 X だけを解決したいのかを理解してくれない人たち、
  などなど。こんなときに、密室の話し合いで決めた内容を "既成事実 (<foreignphrase>faits accomplis</foreignphrase>)"、
  あるいは少なくとも有力な選択肢として提示できればどんなに楽なことでしょう。
</para>

<!--
<para>Don't do it.</para>
-->
<para>
  でも、そんなことをしてはいけません。
</para>

<!--
<para>As slow and cumbersome as public discussions can be, they're
almost always preferable in the long run.  Making important decisions
in private is like spraying contributor repellant on your project.  No
serious volunteer would stick around for long in an environment where
a secret council makes all the big decisions.  Furthermore, public
discussion has beneficial side effects that will last beyond whatever
ephemeral technical question was at issue:
-->
<para>
  たとえ公開の場での議論の進行が遅くて厄介だとしても、
  長い目で見ればそれが一番望ましい方法です。
  重要な決定を内輪でこっそり行うのは、まるでそのプロジェクトに
  「貢献者よけスプレー」を振りまくようなものです。
  秘密の協議会がすべての重要な決定を行うというような環境では、
  やる気のあるボランティアは決してついてこないでしょう。
  さらに、公開の場での議論にはよい副作用もあります。

<itemizedlist>
<!--
  <listitem>
  <para>The discussion will help train and educate new developers.
        You never know how many eyes are watching the conversation;
        even if most people don't participate, many may be tracking
        silently, gleaning information about the software.</para>
  </listitem>
-->
  <listitem>
    <para>
      その議論が、新しく参加する開発者の訓練や教育に役立ちます。
      その議論をいったいどれだけの人が注目しているかは決してわかりません。
      大半の人たちは単なる傍観者として見ているだけで、
      黙ってそのソフトウェアについての情報を追いかけているのです。
    </para>
  </listitem>
<!--
  <listitem>
  <para>The discussion will train <emphasis>you</emphasis> in the art
        of explaining technical issues to people who are not as
        familiar with the software as you are.  This is a skill that
        requires practice, and you can't get that practice by talking
        to people who already know what you know.</para>
  </listitem>
-->
  <listitem>
    <para>
      その議論は、<emphasis>あなた自身</emphasis> の訓練にもなります。
      技術的な問題を、そのソフトウェアにあまり詳しくない人たちにもわかるように説明するという技術を磨くことができます。
      これは実際に必要となる技術であり、
      すでにそのソフトウェアについて熟知している人たちと話しているだけでは身につけることができません。
    </para>
  </listitem>
<!--
  <listitem>
  <para>The discussion and its conclusions will be available in public
        archives forever after, enabling future discussions to avoid
        retracing the same steps.  See
        <xref linkend="using-archives"/><phrase output="printed">
        in <xref linkend="communications"/></phrase>.</para>
  </listitem>
-->
  <listitem>
    <para>
      議論の内容とその結論が公開されたアーカイブに残るようになります。
      後に同じような問題が発生したときに、同じ議論を繰り返す必要がなくなります。
      詳細は <phrase output="printed"><xref linkend="communications"/></phrase>
      の <xref linkend="using-archives"/> を参照してください。
    </para>
  </listitem>
</itemizedlist>

</para>

<!--
<para>Finally, there is the possibility that someone on the list may
make a real contribution to the conversation, by coming up with an
idea you never anticipated.  It's hard to say how likely this is; it
just depends on the complexity of the code and degree of
specialization required.  But if anecdotal evidence may be permitted,
I would hazard that this is more likely than one would intuitively
expect.  In the Subversion project, we (the founders) believed we
faced a deep and complex set of problems, which we had been thinking
about hard for several months, and we frankly doubted that anyone on
the newly created mailing list was likely to make a real contribution
to the discussion.  So we took the lazy route and started batting some
technical ideas back and forth in private emails, until an observer of
the project<footnote><para>We haven't gotten to the section on
crediting yet, but just to practice what I'll later preach: the
observer's name was Brian Behlendorf, and it was he who pointed out
the general importance of keeping all discussions public unless there
was a specific need for privacy.</para></footnote> caught wind of what
was happening and asked for the discussion to be moved to the public
list.  Rolling our eyes a bit, we did&mdash;and were stunned by the
number of insightful comments and suggestions that quickly resulted.
In many cases people offered ideas that had never even occurred to us.
It turned out there were some <emphasis>very</emphasis> smart people
on that list; they'd just been waiting for the right bait.  It's true
that the ensuing discussions took longer than they would have if we
had kept the conversation private, but they were so much more
productive that it was well worth the extra time.</para>
-->
<para>
  最後に、メーリングリスト上の誰かがそのやり取りに対して真の貢献をしてくれるかもしれません。
  つまり、あなたが思いもしなかった新たな考え方を示してくれるということです。
  これがどのくらいの頻度で起こるのかは断言できません。
  そのコードの複雑さがどれくらいか、そしてどの程度の専門知識を要するかによっても異なります。
  ただ、私のこれまでの経験上、その頻度はみなさんが思っているよりもかなり高くなります。
  Subversion プロジェクトで、私たち (プロジェクトを開始した当時のメンバー)
  は深く複雑なさまざまな問題に直面していました。私たちは何ヶ月も悩み続けました。
  そして、率直に言って、当時できたてのメーリングリストにいるメンバーがこの手の議論に貢献してくれるとは期待していませんでした。
  そこで私たちは安易な方法をとることにしました。技術的なアイデアについての議論を個人的なメールのやりとりで行うようにしだしたのです。
  その様子を嗅ぎ付けた人
  <footnote>
    <para>
      ここまではまだ個人の名前を挙げることはありませんでしたが、
      これ以降では必要に応じて名前を挙げていきます。ここでいう「嗅ぎ付けた人」
      とは Brian Behlendorf のことです。彼は、
      プライバシーの侵害の恐れがない議論はすべて公開の場で行うべきだという一般論を指摘してくれました。
    </para>
  </footnote>
  から「議論は公開されたメーリングリストでしてくれ」
  と言われるまで、その状態が続きました。私たちはそれを受け入れ、その話題をメーリングリストに移動しました。
  そのとたん、数々の洞察に満ちた意見や提案が寄せられるようになり、私たちは驚きました。
  寄せられた意見の多くは、これまで私たちが考えもしなかったものでした。
  メーリングリスト上には、<emphasis>非常に</emphasis> 優秀な人間がいたのです。
  彼らはただ、メーリングリスト上にネタが投下されるのを待ちわびていたのです。
  確かに、すべて密室の議論ですませるのに比べれば時間はかかりました。
  しかし、時間をかけたのに十分見合うだけの成果が得られました。
</para>

<!--
<para>Without descending into hand-waving generalizations like "the
group is always smarter than the individual" (we've all met enough
groups to know better), it must be acknowledged that there are certain
activities at which groups excel.  Massive peer review is one of them;
generating large numbers of ideas quickly is another.  The quality of
the ideas depends on the quality of the thinking that went into them,
of course, but you won't know what kinds of thinkers are out there
until you stimulate them with a challenging problem.</para>
-->
<para>
  "三人寄れば文殊の知恵" だとか "個人よりも集団のほうが常によい判断ができる"
  とかいうように一般化して逃げてしまうのではなく、
  集団のほうがよい結果がでる活動としてはどんなものがあるのかを知っておきましょう。
  大規模なピア-レビューなどがその例のひとつです。
  あるいは、とにかくたくさんの案を手早く出していくといった作業もそれにあたります。
  もちろんアイデアの質はそれを考えた人たちの質に依存しますが、
  困難な問題を皆にぶつけてみるまで、誰がどのような案を持っているかはわからないものです。
</para>

<!--
<para>Naturally, there are some discussions that must be had
privately; throughout this book we'll see examples of those.  But the
guiding principle should always be: <emphasis>If there's no reason for
it to be private, it should be public.</emphasis></para>
-->
<para>
  当然、内容によっては個人的に議論しなければならないものもあります。
  本書の中でもそのような例がいくつか登場します。
  しかし、基本方針として、<emphasis>隠す必要がないものは、すべて公開すべきである</emphasis>
  ということは常に心においておきましょう。
</para>

<!--
<para>Making this happen requires action.  It's not enough merely to
ensure that all your own posts go to the public list.  You also have
to nudge other people's unnecessarily private conversations to the
list too.  If someone tries to start a private discussion, and there's
no reason for it to be private, then it is incumbent on you to open
the appropriate meta-discussion immediately.  Don't even comment on
the original topic until you've either successfully steered the
conversation to a public place, or ascertained that privacy really was
needed.  If you do this consistently, people will catch on pretty
quickly and start to use the public forums by default.</para>
-->
<para>
  そのためには何らかのアクションが必要です。
  あなた自身が常に公開のメーリングリストに投稿しようと心がけるだけでは不十分です。
  隠す必要がない内容のメールを他の人から受け取ったら、
  それをメーリングリストにも流すようにしなければなりません。
  誰かが個人的に議論を始めようとしているとき、もしそれが個人的にする必要のないものなら、
  それを個人的に行うのか公開で行うのかに関する議論をすぐに始める責任があります。
  首尾よくその議論を公開の場に持ち出すか、
  あるいは個人的に話し合うのが適切であることがわかるまで、
  元の話題にはコメントしないでください。
  常にこのようにすることを心がければ、
  人はやがてデフォルトで公開の場を使用することになるでしょう。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="prevent-rudeness">
<!--
<title>Nip Rudeness in the Bud</title>
-->
<title>炎上を阻止する</title>

<!--
<para>From the very start of your project's public existence, you
should maintain a zero-tolerance policy toward rude or insulting
behavior in its forums.  Zero-tolerance does not mean technical
enforcement per se.  You don't have to remove people from the mailing
list when they flame another subscriber, or take away their commit
access because they made derogatory comments.  (In theory, you might
eventually have to resort to such actions, but only after all other
avenues have failed&mdash;which, by definition, isn't the case at the
start of the project.)  Zero-tolerance simply means never letting bad
behavior slide by unnoticed.  For example, when someone posts a
technical comment mixed together with an <foreignphrase>ad
hominem</foreignphrase> attack on some other developer in the project,
it is imperative that your response address the <foreignphrase>ad
hominem</foreignphrase> attack <emphasis>first</emphasis>, as a
separate issue unto itself, and only afterward move on to the
technical content.</para>
-->
<para>
  プロジェクトを一般に公開したら、
  フォーラムにおける失礼な振る舞いや侮辱的な発言にはゼロトレランスで (情け容赦なく)
  対処しなければなりません。「ゼロトレランスで」とは、
  何か技術的に特別なことをしなければならないという意味ではありません。
  別の参加者を罵倒した参加者をメーリングリストから強制退会させる必要はありませんし、
  人を傷つけるようなコメントをしたからといってその人のコミット権を剥奪する必要もありません
  (理屈上は、結局のところそういった措置をとらざるを得ないことになるかもしれません。
  しかし、それはさまざまな対策がすべて失敗したときの最後の手段とすべきです。
  つまり、プロジェクトの開始当初にはそのようなことは起こりません)。
  ここで言うゼロトレランスとは、そんな振る舞いを決して見過ごさないということです。
  たとえば、技術的なコメントといっしょに
  プロジェクトの他の開発者に対する個人攻撃 (<foreignphrase>ad hominem</foreignphrase>)
  を含むコメントが投稿されたとしましょう。そんな場合は、<emphasis>まず</emphasis>
  その個人攻撃に対する指摘をしたうえで、技術的な内容についてはそれとは分けて返答するようにしましょう。
</para>

<!--
<para>It is unfortunately very easy, and all too typical, for
constructive discussions to lapse into destructive flame wars.
People will say things in email that they would never say
face-to-face.  The topics of discussion only amplify this effect: in
technical issues, people often feel there is a single right answer to
most questions, and that disagreement with that answer can only be
explained by ignorance or stupidity.  It's a short distance from
calling someone's technical proposal stupid to calling the person
themselves stupid.  In fact, it's often hard to tell where technical
debate leaves off and character attack begins, which is one reason why
drastic responses or punishments are not a good idea.  Instead, when
you think you see it happening, make a post that stresses the
importance of keeping the discussion friendly, without accusing anyone
of being deliberately poisonous.  Such "Nice Police" posts do have an
unfortunate tendency to sound like a kindergarten teacher lecturing a
class on good behavior:</para>
-->
<para>
  残念ながら、これは易しいことではありません。
  そして、たいていは建設的な議論が不毛な罵倒合戦に陥ってしまいます。
  人は、面と向かっては決して言えないことでもメールでは平気で言ってしまうものです。
  また、議論の内容もこの傾向に拍車をかけます。
  技術的な問題に関して、多くの人は「ほとんどの質問には正解がひとつしかない」
  と考えがちです。そしてその答えに同意しない人のことを無知で愚かな人だと思ってしまうのです。
  誰かの技術的な提案を否定すると、その人自身の人格を否定したように受け取られることもあります。
  実際、技術的な議論が人格攻撃に切り替わる瞬間を見極めるのは非常に難しいものです。
  厳しめの返答や処罰がいい考えではないひとつの理由がここにあります。
  そのかわりに、ちょっと雰囲気が怪しくなってきたなと感じたら、
  議論を友好的に進めるように促す投稿をするようにしましょう。
  その際に、特定の人物が意図的にそんなことをしているように非難することは避けなければいけません。
  しかし、そのような "町のおまわりさん" 的な投稿は、
  時として園児をしつける幼稚園の先生のように見えてしまうという傾向があります。
</para>

    <blockquote>
<!--
      <para><emphasis>First, let's please cut down on the
      (potentially) ad hominem comments; for example, calling J's
      design for the security layer "naive and ignorant of the basic
      principles of computer security."  That may be true or it may
      not, but in either case it's no way to have the discussion.  J
      made his proposal in good faith.  If it has deficiencies, point
      them out, and we'll fix them or get a new design.  I'm sure M
      meant no personal insult to J, but the phrasing was unfortunate,
      and we try to keep things constructive around here.
      </emphasis></para>
-->
      <para><emphasis>
        まず最初にひとこと。個人攻撃につながる (あるいはその恐れのある)
        コメントは控えてください。たとえば、J が設計したセキュリティ層について
        "コンピュータのセキュリティに関する基礎知識に欠ける無能な設計だ"
        と語るようなことです。それが正しいかどうかは別にして、
        これは議論の進め方としては間違っています。
        J は信念を持ってこの提案をしたわけです。
        もし問題があるならその問題を指摘しましょう。
        そして皆でそれを修正するか、新しく設計をやりなおせばいいじゃないですか。
        M は決して J を個人攻撃するつもりがないことは知っています。
        でも、その言い方はちょっとまずかった。もっと建設的な議論を進めましょう。
      </emphasis></para>

<!--
      <para><emphasis>Now, on to the proposal.  I think M was right
      in saying that...</emphasis></para>
-->
      <para><emphasis>
        さて、提案内容に話を戻しましょう。
        私は、M の言うことはもっともだと思います……
      </emphasis></para>
    </blockquote>

<!--
<para>As stilted as such responses sound, they have a noticeable
effect.  If you consistently call out bad behavior, but don't demand
an apology or acknowledgment from the offending party, then you leave
people free to cool down and show their better side by behaving more
decorously next time&mdash;and they will.  One of the secrets of
doing this successfully is to never make the meta-discussion the main
topic.  It should always be an aside, a brief preface to the main
portion of your response.  Point out in passing that "we don't do
things that way around here," but then move on to the real content, so
that you're giving people something on-topic to respond to.  If
someone protests that they didn't deserve your rebuke, simply refuse
to be drawn into an argument about it.  Either don't respond (if you
think they're just letting off steam and don't require a response), or
say you're sorry if you overreacted and that it's hard to detect
nuance in email, then get back to the main topic.  Never, ever insist
on an acknowledgment, whether public or private, from someone that
they behaved inappropriately.  If they choose of their own volition to
post an apology, that's great, but demanding that they do so will only
cause resentment.</para>
-->
<para>
  ちょっと堅苦しく感じるかも知れませんが、これはかなりの効果があります。
  何かあったら必ず口を出すが、決して攻撃側に謝罪を要求したり落ち度を認めさせたりしない。
  そうではなく、そのまま放っておいて次回はよりおだやかに振舞うように促すのです。
  そうすれば彼らはきっとそれに従ってくれます。
  これをうまく行う秘訣のひとつは、どっちが悪いかとかどうすべきかといった
  メタ議論を主題にしてしまわないことです。そうではなく、
  本題に入る前の前置き程度の扱いにしておくべきです。
  「ここではそんな振る舞いはやめてください」と指摘した後はすぐに本題に移ります。
  そうすることで、相手側にも本題に返答する機会を与えることができるのです。
  もしそれでも「あなたに非難されるいわれはない」といったことを言われたら、
  もうそれ以上その話題を引きずるのはやめましょう。
  単にその話題に関する返信をやめておく (単に彼らは自分の主張を振りかざしているだけであり、
  返事を求めているわけではなさそうな場合) か、あるいは
  「出すぎたまねをしてしまってごめんなさい。メールではなかなかニュアンスが伝わりにくいので」
  と謝ったうえで本題に戻ればいいのです。
  不適切な振る舞いをした人たちの主張は、公開の場であるか否かにかかわらず
  決して認めないでください。もしかれらの方から謝罪があればすばらしいことですが、
  こちらから謝罪を要求しても相手をさらに怒らせるだけでしょう。
</para>

<!--
<para>The overall goal is to make good etiquette be seen as one of the
"in-group" behaviors.  This helps the project, because developers can
be driven away (even from projects they like and want to support) by
flame wars.  You may not even know that they were driven away; someone
might lurk on the mailing list, see that it takes a thick skin to
participate in the project, and decide against getting involved at
all.  Keeping forums friendly is a long-term survival strategy, and
it's easier to do when the project is still small.  Once it's part of
the culture, you won't have to be the only person promoting it.  It
will be maintained by everyone.</para>
-->
<para>
  最終的な目標は、その集団に「礼儀をわきまえる」という空気を作り上げることです。
  これは、プロジェクトにとって大きな助けとなります。なぜなら、開発者が
  (自分が好んでサポートしようとしている) プロジェクトで罵倒合戦に巻き込まれる心配がなくなるからです。
  そんなことが原因で開発者候補がプロジェクトが離れていることに、あなたは気づかないかもしれません。
  誰かがメーリングリストにひっそり参加してそのプロジェクトの状況を観察し、
  参加するための障壁が厚いことがわかり、結局参加することをあきらめるということがあるかもしれません。
  フォーラムを友好的な雰囲気にしておくことが、長期的に生き残るための作戦として有効です。
  また、これはプロジェクトが小さいうちから心がけておいたほうが実現しやすいことです。
  いちどそんな文化ができあがってしまえば、あなたひとりがいちいちそれを主張して回る必要もなくなるでしょう。
  皆がそういうふうに持って行ってくれるからです。
</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="code-review">
<!--
<title>Practice Conspicuous Code Review</title>
-->
<title>きちんとしたコードレビューの習慣</title>

<!--
<para>One of the best ways to foster a productive development
community is to get people looking at each others' code.  Some
technical infrastructure is required to do this effectively&mdash;in
particular, commit emails must be turned on; see
<xref linkend="commit-emails"/> for more details.  The effect of
commit emails is that every time someone commits a change to the
source code, an email goes out showing the log message and diffs for
the change (see <xref linkend="vc-vocabulary-diff"/>, in
<xref linkend="vc-vocabulary"/>).  <firstterm>Code review</firstterm>
is the practice of reviewing commit emails as they come in, looking
for bugs and possible improvements.<footnote><para>This is how code
review is usually done in open source projects, at any rate.  In more
centralized projects, "code review" can also mean multiple people
sitting down together and going over printouts of source code, looking
for specific problems and patterns.</para></footnote></para>
-->
<para>
  開発コミュニティをうまく育てていくために最適な方法は、
  開発者どうしがお互いのコードを見せ合うことです。
  これを効率的に行うには、技術的な支援が効果的です。特に便利なのが、コミット時のメール通知です。
  これについては <xref linkend="commit-emails"/> で詳しく説明します。
  コミットメールとは、誰かがソースコードに加えた変更をコミットするたびに
  そのログメッセージと変更内容をメールで送る機能のことです
  (<xref linkend="vc-vocabulary"/> の <xref linkend="vc-vocabulary-diff"/> を参照してください)。
  <firstterm>コードレビュー</firstterm> とは、コミットメールがやってくるたびにその内容を確認し、
  バグや改善点がないかどうかを探す作業を指します。
  <footnote>
    <para>
      これは、オープンソースプロジェクトでごく一般的に行われているコードレビューの方法を示したものです。
      より中央集権的なプロジェクトでは、複数の人が集まってソースコードのプリントアウトを見つめ、
      特定の問題やパターンを探すことを称して "コードレビュー" という場合もあります。
    </para>
  </footnote>
</para>

<!--
<para>Code review serves several purposes simultaneously.  It's the
most obvious example of peer review in the open source world, and
directly helps to maintain software quality.  Every bug that ships in
a piece of software got there by being committed and not detected;
therefore, the more eyes watch commits, the fewer bugs will ship.  But
code review also serves an indirect purpose: it confirms to people
that what they do matters, because one obviously wouldn't take time to
review a commit unless one cared about its effect.  People do their
best work when they know that others will take the time to evaluate
it.</para>
-->
<para>
  コードレビューは、さまざまな点で役立ちます。
  オープンソースの世界におけるコードレビューの最大の効果は、
  ソフトウェアの品質を一定に保つことです。
  ソフトウェアにバグが含まれる原因は、
  コミットされたコードをきちんとチェックしなかったことにあります。
  コミットの内容を多くの目でチェックすることで、
  バグを残したまま公開してしまう危険性を減らすことになります。
  しかし、コードレビューの目的はこのような直接的なものだけではありません。
  コードレビューによって、自分たちの作業の内容を確認させることができます。
  コミットの内容をレビューするには、その作業についてよく知っておく必要があるからです。
  他の人が自分の作業を評価すると知っていれば、
  人は最善を尽くして作業を行うようになります。
</para>

<!--
<para>Reviews should be public.  Even on occasions when I have been
sitting in the same physical room with developers, and one of us has
made a commit, we take care not to do the review verbally in the room,
but to send it to the development mailing list instead.  Everyone
benefits from seeing the review happen.  People follow the commentary
and sometimes find flaws in it, and even when they don't, it still
reminds them that review is an expected, regular activity, like
washing the dishes or mowing the lawn.</para>
-->
<para>
  レビューは公開の場で行わなければなりません。
  開発者同士が物理的に同じ部屋にいる場合であっても、
  誰かがコミットしたときにそのレビューを部屋の中だけで済ませてしまってはいけません。
  面倒でも開発者用のメーリングリストに投稿するようにしましょう。
  そのレビューを見ることで、参加者全員が何かを得ることになります。
  レビューの結果、何らかのコメントをしたり、
  場合によっては不具合を見つけたりすることもあります。
  レビューは日常の作業のひとつととらえましょう。
  そう。ちょうど皿洗いや芝生の手入れと同じような感覚です。
</para>

<!--
<para>In the Subversion project, we did not at first make a regular
practice of code review.  There was no guarantee that every commit
would be reviewed, though one might sometimes look over a change if
one was particularly interested in that area of the code.  Bugs
slipped in that really could and should have been caught.  A developer
named Greg Stein, who knew the value of code review from past work,
decided that he was going to set an example by reviewing every line of
<emphasis>every single commit</emphasis> that went into the code
repository.  Each commit anyone made was soon followed by an email to
the developer's list from Greg, dissecting the commit, analyzing
possible problems, and occasionally praising a clever bit of code.  Right
away, he was catching bugs and non-optimal coding practices that would
otherwise have slipped by without ever being noticed.  Pointedly, he
never complained about being the only person reviewing every commit,
even though it took a fair amount of his time, but he did sing the
praises of code review whenever he had the chance.  Pretty soon, other
people, myself included, started reviewing commits regularly too.
What was our motivation?  It wasn't that Greg had consciously shamed
us into it.  But he had proven that reviewing code was a valuable way
to spend time, and that one could contribute as much to the project by
reviewing others' changes as by writing new code.  Once he
demonstrated that, it became expected behavior, to the point where any
commit that didn't get some reaction would cause the committer to
worry, and even ask on the list whether anyone had had a chance to
review it yet.  Later, Greg got a job that didn't leave him as much
time for Subversion, and had to stop doing regular reviews.  But by
then, the habit was so ingrained for the rest of us as to seem that it
had been going on since time immemorial.</para>
-->
<para>
  Subversion プロジェクトの開始当初は、日常的なコードレビューの習慣はありませんでした。
  すべてのコミットがレビューの対象になるという保証はありませんでしたが、
  変更されたコードの内容に興味のある人がそれを眺めるということはありました。
  当時のコードに紛れ込んでいたバグは発見可能でしたし見つけられるべきでした。
  当時の開発者のひとりである Greg Stein は、
  過去の経験からコードレビューが役立つことを知っていました。
  彼は、リポジトリへの <emphasis>すべてのコミット</emphasis>
  の１行１行の内容を詳細にまでわたってレビューするようになりました。
  誰かがコミットするたびにそのコミットについての Greg からのメールが
  開発者用メーリングリストに流れました。メールの内容は、
  コミットの内容を細かく切り刻んで分析し、起こりうる問題を指摘するといったものです。
  時には、優れたコードに対して賞賛を送ることもありました。
  コミットがあるたびに、バグを見つけたり
  注意しないとつまづくく恐れのあるあまりよい書き方ではないコードを見つけたりしていたのです。
  彼は、コミットの内容をレビューするのが自分ひとりであることについて、
  表立っては不平を述べることはありませんでした。
  かなりの時間をレビューに費やしていたにもかかわらずです。
  その代わりに、ことあるごとにコードレビューのすばらしさについて発言していました。
  やがて、私を含めた他のメンバーもコミットの内容を定期的にレビューするようになりました。
  何がそうさせたのでしょう? 決して Greg が私たちにそれを強制したわけではありません。
  彼は「コードのレビューが時間をかけるだけの価値のあるものである」こと、そして
  「他人のコードをレビューすることは新しいコードを書くのと同じくらいに重要である」
  ことを自身の行動をもって証明したのです。
  いざそういう習慣が身につくと、自分のコミットに何の反応もなければ逆に不安になります。
  開発者用メーリングリストで「誰か私のコードをレビューしてくれないかな?」
  と聞いてみたりなんかして。後に、Greg は別の仕事を得ることになり、
  Subversion にあまり時間をかけられないようになってしまいました。
  彼は定期的なレビューをあきらめざるを得なくなったのです。
  しかし、そのときにはすでにレビューの習慣が私たちにも深く根付いていました。
  まるで太古の昔からそれが当たり前であったかのように。
</para>

<!--
<para>Start doing reviews from very first commit.  The sorts of
problems that are easiest to catch by reviewing diffs are security
vulnerabilities, memory leaks, insufficient comments or API
documentation, off-by-one errors, caller/callee discipline mismatches,
and other problems that require a minimum of surrounding context to
spot.  However, even larger-scale issues such as failure to abstract
repeated patterns to a single location become spottable after one has
been doing reviews regularly, because the memory of past diffs informs
the review of present diffs.</para>
-->
<para>
  コードのレビューは、最初のコミットの時点から始めましょう。
  差分を見れば簡単に発見できる問題としては次のようなものがあります。
  たとえばセキュリティ上の脆弱性やメモリリーク、
  コメントや API ドキュメントの不足、「ひとつずれちゃった (off-by-one)
  エラー」、呼び出し元と呼び出し先の規約の不一致などです。
  また差分の前後を確認することで発見できる問題もあります。
  しかし、より規模の大きい問題、
  たとえば繰り返し登場するパターンを一か所にまとめていないことなどは、
  定期的なレビューをしていないと見つけにくいものです。
  過去の更新の履歴の記憶を今回の差分と組み合わせることで、
  このようなの問題も見つけやすくなるのです。
</para>

<!-- todo: Andrew Stellman suggested putting a checklist of what to
     look for in code review here.  That might be a good idea. -->

<!--
<para>Don't worry that you might not find anything to comment on, or
that you don't know enough about every area of the code.  There will
usually be something to say about almost every commit; even where you
don't find anything to question, you may find something to praise.
The important thing is to make it clear to every committer that what
they do is seen and understood.  Of course, code review does not
absolve programmers of the responsibility to review and test their
changes before committing; no one should depend on code review to
catch things he ought to have caught on his own.</para>
-->
<para>
  何もコメントすべき点が見つからないんじゃないかとか、
  すべてのコードについて熟知しているわけじゃないとかいったことを気にしないでください。
  あらゆるコミットには何かしら言うべきことがあるはずです。
  何も疑問点が見つからなかった場合は、何か賞賛の言葉を贈ればいいだけのことです。
  大事なのは、すべてのコミッターに対して
  「あなたの作業内容を見ているし、理解もしている」というメッセージを伝えることです。
  もちろん「後でほかの人にレビューしてもらえるから、コミット前のチェックやテストは不要」
  というわけではありません。本来自分自身で発見すべき問題を、
  他人のレビューに頼ってはいけません。
</para>

</sect2>

<!-- ======================== SECTION ============================== -->
<sect2 id="opening-closed-projects">
<!--
<title>When Opening a Formerly Closed Project, be Sensitive to the
Magnitude of the Change</title>
-->
<title>もともと非公開だったプロジェクトをオープンにするときには、
変化の大きさに気をつけよう</title>

<!--
<para>If you're opening up an existing project, one that already has
active developers accustomed to working in a closed-source
environment, make sure everyone understands that a big change is
coming&mdash;and make sure that you understand how it's going to
feel from their point of view.</para>
-->
<para>
  既存のプロジェクトをオープンにする場合は、
  クローズド環境での開発に慣れきった既存の開発者がいることに注意しましょう。
  環境が大きく変わることを彼らに理解してもらうこと、
  また、彼ら側の視点で考えた場合に何がどのように変わるのかを
  あなた自身が理解することが大切です。
</para>

<!--
<para>Try to imagine how the situation looks to them: formerly, all
code and design decisions were made with a group of other programmers
who knew the software more or less equally well, who all received the
same pressures from the same management, and who all know each others'
strengths and weaknesses.  Now you're asking them to expose their code
to the scrutiny of random strangers, who will form judgements based
only on the code, with no awareness of what business pressures may
have forced certain decisions.  These strangers will ask lots of
questions, questions that jolt the existing developers into realizing
that the documentation they slaved so hard over is
<emphasis>still</emphasis> inadequate (this is inevitable).  To top it
all off, the newcomers are unknown, faceless entities.  If one of your
developers already feels insecure about his skills, imagine how that
will be exacerbated when newcomers point out flaws in code he wrote,
and worse, do so in front of his colleagues.  Unless you have a team
of perfect coders, this is unavoidable&mdash;in fact, it will probably
happen to all of them at first.  This is not because they're bad
programmers; it's just that any program above a certain size has bugs,
and peer review will spot some of those bugs (see
<xref linkend="code-review"/><phrase output="printed"> earlier
in this chapter</phrase>).  At the same time, the newcomers
themselves won't be subject to much peer review at first, since they
can't contribute code until they're more familiar with the project.
To your developers, it may feel like all the criticism is incoming,
never outgoing.  Thus, there is the danger of a siege mentality taking
hold among the old hands.</para>
-->
<para>
  彼らにとってその状況がどのようなものかを想像してください。
  これまでは、どのような設計でどのようなコードを書くのかを決めるのは
  特定のプログラマの集団でした。また、彼らは同じ管理者のもとで働き、
  同じような重圧を受けていました。
  そしてお互いのスキルや弱点もよくわかっていました。
  今やそうではありません。自分の書いたコードをチェックしてもらうために
  どこの誰ともわからない人に向かって公開しなければならないのです。
  彼らは純粋にコードの内容だけをもとにして判断を下します。
  それ以外のビジネス上の問題などは考慮しません。
  自分のコードについて、見知らぬ人からさまざまな質問が寄せられることになります。
  あんなに苦労して作ったドキュメントが、<emphasis>まだ</emphasis>
  不十分であることが判明して (お決まりのパターンです)
  衝撃を受ける瞬間です。
  新入りさんは、みんな誰も知らない得体の知れない人たちばかりです。
  もし既存の開発者の中に自分のスキルに不安のある人がいたとしましょう。
  新入りさんが何も考えずに彼のコードの問題を指摘したら、
  彼にどのような悪影響を及ぼすでしょうか。特に、
  彼の同僚の目の前でそのようなことが起こったら、さらに状況は悪くなります。
  完全無欠のプログラマが集まったチームでもない限り、
  このような問題が起こることは避けられません。
  実際、すべてのメンバーが一度はこのような経験をすることになるでしょう。
  これは、決して彼らがプログラマとして劣っているからではありません。
  ある程度以上のサイズのプログラムには、必ずバグが含まれるものです。
  そして、コードのレビューによってそれが見つかることになります
  (<phrase output="printed">本章の前半にある</phrase>
  <xref linkend="code-review"/> をご覧ください)。
  と同時に、新入りさん自身は最初のうちは自分のコードをレビューされることはないでしょう。
  というのも、そのプロジェクトにある程度なじむまではコードを書くことができないからです。
  既存の開発者にとっては「奴らからさんざん批判されるだけで、
  こちらからは言い返すことができない」という状況になるわけです。
  そのため、古株の開発者たちに対する総攻撃状態になる危険性があります。
</para>

<!--
<para>The best way to prevent this is to warn everyone about what's
coming, explain it, tell them that the initial discomfort is perfectly
normal, and reassure them that it's going to get better.  Some of
these warnings should take place privately, before the project is
opened.  But you may also find it helpful to remind people on the
public lists that this is a new way of development for the project,
and that it will take some time to adjust.  The very best thing you
can do is lead by example.  If you don't see your developers answering
enough newbie questions, then just telling them to answer more isn't
going to help.  They may not have a good sense of what warrants a
response and what doesn't yet, or it could be that they don't have a
feel for how to prioritize coding work against the new burden of
external communications.  The way to get them to participate is to
participate yourself.  Be on the public mailing lists, and make sure
to answer some questions there.  When you don't have the
expertise to field a question, then visibly hand it off to a developer
who does&mdash;and watch to make sure he follows up with an answer,
or at least a response.  It will naturally be tempting for the
longtime developers to lapse into private discussions, since that's
what they're used to.  Make sure you're subscribed to the internal
mailing lists on which this might happen, so you can ask that such
discussions be moved to the public lists right away.</para>
-->
<para>
  これを避ける最良の方法は、これから何が起こるのかを彼らに説明することです。
  最初のうちは不快に感じるかもしれないがそれは当然の心理であること、
  そしていつかはうまくいくようになることを説明しましょう。
  これらの警告は、プロジェクトをオープンにする前に
  閉じた場所で行わなければなりません。
  また、公開されたメーリングリスト上で
  「プロジェクトの開発方式が新しくなった」「なれるには少々時間がかかる」
  ということを知らせるのも効果的です。
  一番いいのは、なにか例を示すことです。
  既存の開発者たちがあまり初心者の質問に答えていないようなら、
  彼らに「もっと返事を書いてあげてよ」といってもあまり意味がありません。
  彼らは単に、どう答えればいいのかがわからないだけかもしれません。
  あるいは、他人の質問に答えるよりも
  実際にコードを書くほうが大切だと思っているのかも知れません。
  彼らを質問に答えさせるようにするには、まずあなた自身がお手本を見せましょう。
  公開されているメーリングリスト上で、誰かの質問に対して答えてみましょう。
  その質問をうまくさばくだけの専門知識がない場合は、
  それに対応できる開発者に明示的に対応を依頼するようにしましょう。
  そして、彼が確かに答えを返すこと、
  あるいは少なくとも何らかの返事をすることを確認しましょう。
  長年プロジェクトにかかわってきた開発者にとっては
  どうしても閉じた場での議論のほうがやりやすく感じられることでしょう。
  これまではずっとそうしてきたのですから。
  そんなことが起こらないように内輪のメーリングリストの動きもチェックし、
  必要な議論は公開の場で行うように彼らを誘導しましょう。
</para>

<!--
<para>There are other, longer-term concerns with opening up formerly
closed projects.  <xref linkend="social-infrastructure"/> explores
techniques for mixing paid and unpaid developers successfully, and
<xref linkend="legal"/> discusses the necessity of legal diligence
when opening up a private code base that may contain software written
or "owned" by other parties.</para>
-->
<para>
  これまでは閉じた環境にあったプロジェクトをオープンにするにあたっては、
  これら以外にも長期的な懸案事項があります。
  <xref linkend="money"/> では、給料をもらって開発に参加している人たちと
  無償で開発に参加している人たちとをうまく共存させる方法を考えます。また
  <xref linkend="legal"/> では、法的な努力の必要性について考えます。
  他の団体が書いた、あるいは "所有している" コードを含むかもしれないソフトウェアを公開する場合は、
  それなりの注意が必要となります。
</para>

</sect2>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="announcing">
<!--
<title>Announcing</title>
-->
<title>広報</title>

<!--
<para>Once the project is presentable&mdash;not perfect, just
presentable&mdash;you're ready to announce it to the world.  This is
actually a very simple process: go to <ulink
url="http://freshmeat.net/"/>, click on
<guimenuitem>Submit</guimenuitem> in the top navigation bar, and fill
out a form announcing your new project.  Freshmeat is the place
everyone watches for new project announcements.  You only have to
catch a few eyes there for news of your project to spread by word of
mouth.</para>
-->
<para>
  プロジェクトが人に見せられる状態 (完全なものではなく、
  単にとりあえず見せられるという程度) になったら、
  それを全世界に向けて公開しましょう。
  これは、実際には非常に簡単なことです。まず <ulink url="http://freshmeat.net/"/>
  に行ってナビゲーションバーの <guimenuitem>Submit</guimenuitem> をクリックし、
  フォームに内容を入力しさえすれば新しいプロジェクトを宣伝できるのです。
  Freshmeat は、新しいプロジェクトが気になる数多くの人が見ているところです。
  あなたのプロジェクトに関するニュースがその中の何人かの目にとまれば、
  後は口コミでその情報が広まっていくでしょう。
</para>

<!--
<para>If you know of mailing lists or newsgroups where an announcement
of your project would be on-topic and of interest, then post there,
but be careful to make exactly <emphasis>one</emphasis> post per
forum, and to direct people to your project's own forums for follow-up
discussion (by setting the <systemitem>Reply-to</systemitem> header).
The posts should be short and get right to the point:</para>
-->
<para>
  あなたのプロジェクトに関するお知らせを投稿するのに適したメーリングリストや
  ニューズグループがあるのなら、そこに投稿するのもいいでしょう。
  しかし、投稿するのはそれぞれの場所で一度ずつだけにしておきましょう。
  その後の議論は、(<systemitem>Reply-to</systemitem> ヘッダを設定して)
  自分のプロジェクトの会議室で続ければいいのです。
  投稿内容は、要点をまとめた短いものにしなければなりません。
</para>

<!--
<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley full-text indexer project
Reply-to: dev@scanley.org

This is a one-time post to announce the creation of the Scanley
project, an open source full-text indexer and search engine with a
rich API, for use by programmers in providing search services for
large collections of text files.  Scanley is now running code, is
under active development, and is looking for both developers and
testers.

Home page: http://www.scanley.org/

Features:
   - Searches plain text, HTML, and XML
   - Word or phrase searching
   - (planned) Fuzzy matching
   - (planned) Incremental updating of indexes
   - (planned) Indexing of remote web sites

Requirements:
   - Python 2.2 or higher
   - Enough disk space to hold the indexes (approximately 2x
     original data size)

For more information, please come to scanley.org.

Thank you,
-J. Random
</screen>
-->
<screen>
To: discuss@lists.example.org
Subject: [ANN] Scanley 全文インデックス化プロジェクト
Reply-to: dev@scanley.org

Scanley プロジェクトが立ち上がったことをお知らせします。
これはオープンソースの全文インデックス作成器およびサーチエンジンで、
豊富な API を持っています。プログラマは、大きなテキストファイルを
対象とした全文検索機能を自分のプログラムに組み込めるようになります。
Scanley はようやくまともに動くようになった状態のもので、現在も活発に
開発が進められています。開発やテストに参加してくださる方を募集しています。

ホームページ: http://www.scanley.org/

機能:
   - プレーンテキスト、HTML および XML の検索
   - 単語あるいはフレーズによる検索
   - (予定) あいまい検索
   - (予定) インデックスの差分更新
   - (予定) リモートのウェブサイトのインデックス化

Requirements:
   - Python 2.2 以降
   - インデックス作成用のディスク領域
     (元のデータの約２倍の大きさ)

詳細な情報は、scanley.org をご覧ください。

それでは。
-J. Random
</screen>

<!--
<para>(See <xref linkend="publicity"/><phrase output="printed">
in <xref linkend="communications"/></phrase> for advice on announcing
further releases and other project events.)</para>
-->
<para>
  (公開のお知らせやプロジェクトのイベントに関するお知らせの詳細については、
  <phrase output="printed"><xref linkend="communications"/></phrase>
  の <xref linkend="publicity"/> をご覧ください)
</para>

<!--
<para>There is an ongoing debate in the free software world about
whether it is necessary to begin with running code, or whether a
project can benefit from being opened even during the
design/discussion stage.  I used to think starting with running code
was the most important factor, that it was what separated successful
projects from toys, and that serious developers would only be
attracted to software that did something concrete already.</para>
-->
<para>
  フリーソフトウェアの公開を開始する時期について、
  ある程度動くものができあがった時点で公開すべきなのか、
  あるいは設計段階から公開してしまうべきなのかについての議論は、
  まだ結論が出ていません。私は、
  これまでは「実際に動くコードがあること」が最も重要だと考えていました。
  それこそが成功するプロジェクトと単なるおもちゃとを区別するものだと思ったからです。
  そして、具体的に動くものがないと他の開発者をひきつけられないと思っていたのです。
</para>

<!--
<para>This turned out not to be the case.  In the Subversion project,
we started with a design document, a core of interested and
well-connected developers, a lot of fanfare, and
<emphasis>no</emphasis> running code at all.  To my complete surprise,
the project acquired active participants right from the beginning, and
by the time we did have something running, there were quite a few
volunteer developers already deeply involved.  Subversion is not the
only example; the Mozilla project was also launched without running
code, and is now a successful and popular web browser.</para>
-->
<para>
  最近、この考えが変わってきました。Subversion プロジェクトを開始したときにあったのは、
  設計ドキュメントと何人かの気心の知れた開発者、
  そして大げさなファンファーレだけでした。実際に動くコードは
  <emphasis>一切</emphasis> なかったのです。
  驚いたことに、このプロジェクトは開始当初からアクティブな参加者を獲得することに成功しました。
  そして実際に動くものができはじめたころには、かなり多くのボランティア開発者が
  コードの内部まで深く知り尽くしているという状態になっていました。
  Subversion だけが例外的な存在だというわけではありません。
  Mozilla プロジェクトも実際に動くものがない状態から始まりました。
  そして今や人気のあるウェブブラウザとして大成功を収めています。
</para>

<!--
<para>In the face of such evidence, I have to back away from the
assertion that running code is absolutely necessary for launching a
project.  Running code is still the best foundation for success, and a
good rule of thumb would be to wait until you have it before
announcing your project.  However, there may be circumstances where
announcing earlier makes sense.  I do think that at least a
well-developed design document, or else some sort of code framework,
is necessary&mdash;of course it may be revised based on public
feedback, but there has to be something concrete, something more
tangible than just good intentions, for people to sink their teeth
into.</para>
-->
<para>
  これらの事例を前にして、私は「実際に動くコードこそがプロジェクトの立ち上げに必要だ」
  という主張を曲げざるを得なくなりました。
  動くコードがあることは成功のひとつの要素ではあります。そして、経験上は、
  動くものができあがるまではプロジェクトの公開を控えたほうがよいと思います。
  しかし、とりあえず先に公開してしまったほうがいいこともあります。
  最低限、しっかりした設計ドキュメントか何らかのコード基盤は必要です
  &mdash;もちろん、これは公開後のフィードバックを受けて改版することになるでしょう。
  しかし、それだけではなく何か具体的なもの、
  実際に触って試せるものが必要です。
</para>

<!--
<para>Whenever you announce, don't expect a horde of volunteers to
join the project immediately afterward.  Usually, the result of
announcing is that you get a few casual inquiries, a few more people
join your mailing lists, and aside from that, everything continues
pretty much as before.  But over time, you will notice a gradual
increase in participation from both new code contributors and users.
Announcement is merely the planting of a seed.  It can take a long
time for the news to spread.  If the project consistently rewards
those who get involved, the news <emphasis>will</emphasis> spread,
though, because people want to share when they've found something
good.  If all goes well, the dynamics of exponential communications
networks will slowly transform the project into a complex community,
where you don't necessarily know everyone's name and can no longer
follow every single conversation.  The next chapters are about working
in that environment.</para>
-->
<para>
  プロジェクトを公開したからといって、大量のボランティアが
  すぐにプロジェクトに参加したがるとは思わないでください。
  普通は、公開した後の反応といえばもっとおとなしいものです。
  何人かはたいしたことのない問い合わせをくれるでしょう。
  何人かはメーリングリストに参加してくれるかもしれません。
  しかし、それ以外の大半の人たちにとっては、
  そのプロジェクトが公開されたことなんて気にもしていないでしょう。
  しかし時間がたつにつれて、開発者として参加してくれる人や
  実際にソフトウェアを利用してくれる人が徐々に増えていくことに気づくでしょう。
  公開の発表は、種まきのようなものです。
  そのニュースが広まるには、長い時間がかかります。
  プロジェクトに参加した人たちが何らかの利益を得ることになると、
  ニュースがより広まるようになります。自分が見つけたすばらしいものを、
  周りにも知らせてあげようという気持ちが働くからです。
  すべてがうまくいけば、そのプロジェクトは指数関数的に大きくなり、
  複雑なコミュニティに成長するでしょう。
  そこまで来れば、もはや個々のメンバーの名前を知っている必要もなくなります。
  また、メンバー間の会話の内容をすべて追いかけることも不可能となります。
  次の章では、このような環境を運営する方法を説明します。
</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

