<chapter id="introduction">

<!--
<title>Introduction</title>
-->
<title>導入</title>

<simplesect>

<!--
<para>Most free software projects fail.</para>
-->
<para>
  ほとんどのフリーソフトウェアプロジェクトは失敗します。
</para>

<!--
<para>We tend not to hear very much about the failures.  Only
successful projects attract attention, and there are so many free
software projects in total<footnote><para>SourceForge.net, one popular
hosting site, had 79,225 projects registered as of mid-April 2004.
This is nowhere near the total number of free software projects on the
Internet, of course; it's just the number that chose to use
SourceForge.</para></footnote> that even though only a small
percentage succeed, the result is still a lot of visible projects.  We
also don't hear about the failures because failure is not an event.
There is no single moment when a project ceases to be viable; people
just sort of drift away and stop working on it.  There may be a moment
when a final change is made to the project, but those who made it
usually didn't know at the time that it was the last one.  There is
not even a clear definition of when a project is expired.  Is it when
it hasn't been actively worked on for six months?  When its user base
stops growing, without having exceeded the developer base?  What if
the developers of one project abandon it because they realized they
were duplicating the work of another&mdash;and what if they join that
other project, then expand it to include much of their earlier effort?
Did the first project end, or just change homes?</para>
-->
<para>
  しかし、失敗例について聞くことはあまりありません。
  みんなの気を引くのは成功したプロジェクトだけだからです。
  世の中には途方もない数のフリーソフトウェアプロジェクトが存在する
  <footnote>
    <para>
      有名なホスティングサイトのひとつである SourceForge.net には、2004 年 4 月中旬の時点で
      79,225 のプロジェクトが登録されています。
      もちろん、これがインターネット上のフリーソフトウェアプロジェクトの総数である
      というわけではありません。
      これは単に、その時点で SourceForge を選択したプロジェクトの数に過ぎません。
    </para>
  </footnote>
  ので、たとえ成功するプロジェクトがその中のごく一部に過ぎなかったとしても、
  多くのプロジェクトが成功しているように見えてしまうのです。
  また、いつ「プロジェクトが失敗した」と判断するのかがはっきりしないのも
  私たちが失敗について聞くことがない理由のひとつでしょう。
  「そのプロジェクトが消滅した瞬間」というのを特定することはできません。
  徐々に動きが鈍くなっていき、いつのまにか止まってしまっているのです。
  「プロジェクトに対して最後に変更が加えられたとき」を知ることはできますが、
  実際にその変更を加えた人は「それがプロジェクトに対する最後のコミットとなる」
  とは決して思っていなかったことでしょう。
  また、どれぐらい動きがなければ「止まってしまった」
  とみなすのかについてもはっきりした定義がありません。
  目だった動きが半年間なかったとき？
  ユーザ数の伸びが止まってしまい、結局開発者の数を超えることがなかったとき？
  自分の参加しているプロジェクトが結局他のプロジェクトの焼き直しであることに気づいた開発者が、
  現在参加しているプロジェクトを捨ててもうひとつのほうに移動したとしましょう。
  そして移った先のプロジェクトをどんどん成長させていきました。
  この場合、元のプロジェクトは「消滅した」のでしょうか？
  それとも「あるべき場所に移動しただけ」なのでしょうか？
</para>

<!--
<para>Because of such complexities, it's impossible to put a precise
number on the failure rate.  But anecdotal evidence from over a decade
in open source, some casting around on SourceForge.net, and a little
Googling all point to the same conclusion: the rate is extremely high,
probably on the order of 90&ndash;95%.  The number climbs higher if you
include surviving but dysfunctional projects: those
which <emphasis>are</emphasis> producing running code, but which are
not pleasant places to be, or are not making progress as quickly or as
dependably as they could.</para>
-->
<para>
  このように複雑な側面があるので、
  いったいどの程度の割合でプロジェクトが失敗しているのかを正確に知るのは不可能です。
  しかし、過去10年を超えるオープンソース界での経験や
  SourceForge.net のデータからの推測、
  そしてちょっとググってみた結果はどれも同じような結果となりました。
  プロジェクトが失敗に終わる可能性は非常に高く、
  おそらく90&ndash;95%くらいと見ていいでしょう。
  かろうじて生き残ってはいるが、まともに機能していないプロジェクトも含めると、
  この数字はさらに上がるでしょう。ここでいう「まともに機能していない」とは、
  とりあえず動くコートは存在するが満足に使える代物ではなく、
  開発が進んでいるようには見えないという状態のことです。
</para>

<!--
<para>This book is about avoiding failure.  It examines not only how
to do things right, but how to do them wrong, so you can recognize and
correct problems early.  My hope is that after reading it, you will
have a repertory of techniques not just for avoiding common pitfalls
of open source development, but also for dealing with the growth and
maintenance of a successful project.  Success is not a zero-sum game,
and this book is not about winning or getting ahead of the
competition.  Indeed, an important part of running an open source
project is working smoothly with other, related projects.  In the long
run, every successful project contributes to the well-being of the
overall, worldwide body of free software.</para>
-->
<para>
  本書の目的は、そのような失敗を避けることです。
  本書では、「どうやったらうまくいくか」だけではなく
  「とうやったら失敗するか」についても説明します。
  それを知ることで、問題が発生したときに軌道修正ができるようになるでしょう。
  本書を読み終えられた皆さんは、オープンソース開発において陥りがちな
  落とし穴を避けるさまざまなテクニックを身に着けることでしょう。
  それにとどまらず、成功するプロジェクトの成長にかかわれるようになることを期待しています。
  成功というものはゼロサムゲームではありません。本書では、
  いかにして競合プロジェクトを出し抜くかといったことは扱いません。
  実際のところ、オープンソースプロジェクトを運営する上では
  他の関連するプロジェクトとの協調が重要となります。
  長い目で見れば、どのプロジェクトが成功しても
  フリーソフトウェア界全体の利益になることでしょう。
</para>

</simplesect>

<simplesect>

<!--
<para>It would be tempting to say that free software projects fail for
the same sorts of reasons proprietary software projects do.
Certainly, free software has no monopoly on unrealistic requirements,
vague specifications, poor resource management, insufficient design
phases, or any of the other hobgoblins already well known to the
software industry.  There is a huge body of writing on these topics,
and I will try not to duplicate it in this book.  Instead, I will
attempt to describe the problems peculiar to free software.  When a
free software project runs aground, it is often because the developers
(or the managers) did not appreciate the unique problems of open
source software development, even though they might have been quite
prepared for the better-known difficulties of closed-source
development.</para>
-->
<para>
  フリーソフトウェアプロジェクトが失敗に終わる原因は
  独占ソフトウェアプロジェクトの場合と同じだと言い切ってしまえれば話は簡単です。
  実際のところ、ソフトウェア産業におけるよく知られた問題
  (たとえば非現実的な要件、あいまいな仕様、
  まずいリソース管理、不十分な設計フェーズなど)
  はフリーソフトウェアでも起こりうることです。
  これらのトピックに関しては既に大量の書物が存在するので、
  本書ではそれと重複するような内容は避けるつもりです。
  その代わりに、フリーソフトウェアに特有の問題について説明していきます。
  フリーソフトウェアプロジェクトが行き詰まる原因としてよくあるのが、
  開発者 (あるいはマネージャ) が
  オープンソースのソフトウェア開発に固有の問題を正しく認識していなかったことです。
  彼らはクローズドソースな開発における問題への対応は慣れていたかもしれません。
  でもそれだけではだめだったのです。
</para>

<!--
<para>One of the most common mistakes is unrealistic expectations
about the benefits of open source itself.  An open license does not
guarantee that hordes of active developers will suddenly volunteer
their time to your project, nor does open-sourcing a troubled project
automatically cure its ills.  In fact, quite the opposite: opening up
a project can add whole new sets of complexities, and cost
<emphasis>more</emphasis> in the short term than simply keeping it
in-house.  Opening up means arranging the code to be comprehensible to
complete strangers, setting up a development web site and email lists,
and often writing documentation for the first time.  All this is a lot
of work.  And of course, if any interested developers
<emphasis>do</emphasis> show up, there is the added burden of
answering their questions for a while before seeing any benefit from
their presence.  As developer Jamie Zawinski said about the troubled
early days of the Mozilla project:</para>
-->
<para>
  一番よくある間違いは、オープンソース自体で一儲けしようと非現実的な期待をしてしまうことです。
  オープンソースにしたからといって、必ずボランティアの開発者が集結してくれるとは限りません。
  また、すでに問題を抱えているプロジェクトをオープンソースにしたところで、
  その問題が自然に解決するわけでもありません。
  実際のところ、まったく正反対になります。オープンソースプロジェクトをはじめると、
  これまで自分たちだけでやっていたときと比べて
  いろいろ複雑なことを考えなければならなくなります。
  また、短期的には <emphasis>費用もかさむ</emphasis> ことでしょう。
  オープンにするということは、見知らぬ他人が読んでもわかりやすくなるようなコードを書くということです。
  また開発者用のウェブサイトやメーリングリストを整備したりする必要もありますし、
  最低限のドキュメントも書くことになるでしょう。
  これらはどれも大変な作業です。
  仮にどこかの開発者が「手伝ってあげようか？」と声をかけてきたとしましょう。
  まだその人がどれほど協力してくれそうかわからない時点でも、
  その人に対してプロジェクトについての説明をしたり質問に答えたりといった作業をすることになります。
  Jamie Zawinski は、Mozilla プロジェクトの初期に発生した問題について次のように述べています。
</para>

    <blockquote>
<!--
      <para><emphasis>Open source does work, but it is most definitely
      not a panacea.  If there's a cautionary tale here, it is that
      you can't take a dying project, sprinkle it with the magic pixie
      dust of "open source," and have everything magically work
      out. Software is hard.  The issues aren't that simple.</emphasis></para>
-->
      <para><emphasis>
        オープンソースはうまく働くものである。しかし、最も大切なことは、
        何にでも効くような特効薬ではないということだ。
        もし、ここに教訓があるとすれば、死にかけたプロジェクトをつかまえて、
        オープンソースという魔法の妖精の粉をふりかけて、
        すべてが魔法のようにうまく行くなどということはない、ということだ。
        ソフトウェアは難しい。問題はそんなに簡単なものじゃない。
      </emphasis></para>

<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.jwz.org/gruntle/nomo.html"/></emphasis>)</para>
-->
      <para>
        (<emphasis role="bold"><ulink
          url="http://www.jwz.org/gruntle/nomo.html"/></emphasis> より引用。
        日本語訳は <emphasis role="bold"><ulink
          url="http://cruel.org/jwz/nomo.html"/></emphasis>)
      </para>
    </blockquote>

<!--
<para>A related mistake is that of skimping on presentation and
packaging, figuring that these can always be done later, when the
project is well under way.  Presentation and packaging comprise a wide
range of tasks, all revolving around the theme of reducing the barrier
to entry.  Making the project inviting to the uninitiated means
writing user and developer documentation, setting up a project web
site that's informative to newcomers, automating as much of the
software's compilation and installation as possible, etc.  Many
programmers unfortunately treat this work as being of secondary
importance to the code itself.  There are a couple of reasons for
this.  First, it can feel like busywork, because its benefits are most
visible to those least familiar with the project, and vice versa.
After all, the people who develop the code don't really need the
packaging.  They already know how to install, administer, and use the
software, because they wrote it.  Second, the skills required to do
presentation and packaging well are often completely different from
those required to write code.  People tend to focus on what they're
good at, even if it might serve the project better to spend a little
time on something that suits them less.  <xref
linkend="getting-started"/> discusses presentation and packaging
in detail, and explains why it's crucial that they be a priority from
the very start of the project.</para>
-->
<para>
  それに関連する間違いとしては、見栄えの調整やパッケージ作成に手を抜くというものがあります。
  「そんなのいつでもできるし、もうちょっとプロジェクトが落ち着いてからでいいよ」
  というような考えです。
  見栄えの調整やパッケージ作成といってもいろいろな内容が含まれますが、
  どれも結局はプロジェクトへの参入障壁を下げることにかかわってきます。
  新参者がプロジェクトに参加しやすくするには、
  ユーザ向けドキュメントや開発者向けドキュメントを整備したり
  ウェブサイトを開いて初心者向け情報を掲載したり
  ソフトウェアのコンパイルをできるだけお手軽に行えるようにしたりといった作業が必要となります。
  残念ながら、世の多くのプログラマは
  これらの作業を二の次にしてコードだけに注力しがちです。
  理由はいくつかあります。
  まず、それが彼らにとってあまり重要な作業ではないということです。
  それが役に立つのはこれまでプロジェクトにほとんどかかわってこなかった人たちであり、
  今までプロジェクトに参加してきた人たちにとってはあまり意味のない作業だと感じられることでしょう。
  結局のところ、実際にコードを書いている人にとってはパッケージなんて不要なのです。
  彼らはそのインストール方法も管理方法も熟知しています。
  だって自分自身でそれを書いているんですから。
  次に、見栄えをよくしたり使いやすくパッケージ化したりするのに必要なスキルは、
  コードを書くスキルとはまったく異なるものだということです。
  人はみな、自分の得意なところに力を入れたがるものです。
  苦手なことにちょっと取り組むだけでプロジェクトがよりよいものになるかもしれないとしても。
  <xref linkend="getting-started"/> では、
  見栄えをよくしたりパッケージを作成したりする方法について詳しく説明します。
  そして、それをプロジェクトの最初期から行うべきである理由についても説明します。
</para>

<!--
<para>Next comes the fallacy that little or no project management is
required in open source, or conversely, that the same management
practices used for in-house development will work equally well on an
open source project.  Management in an open source project isn't
always very visible, but in the successful projects, it's usually
happening behind the scenes in some form or another.  A small thought
experiment suffices to show why.  An open source project consists of a
random collection of programmers&mdash;already a notoriously
independent-minded category&mdash;who have most likely never met each
other, and who may each have different personal goals in working on
the project.  The thought experiment is simply to imagine what would
happen to such a group <emphasis>without</emphasis> management.
Barring miracles, it would collapse or drift apart very quickly.
Things won't simply run themselves, much as we might wish otherwise.
But the management, though it may be quite active, is often informal,
subtle, and low-key.  The only thing keeping a development group
together is their shared belief that they can do more in concert than
individually.  Thus the goal of management is mostly to ensure that
they continue to believe this, by setting standards for
communications, by making sure useful developers don't get
marginalized due to personal idiosyncracies, and in general by making
the project a place developers want to keep coming back to.  Specific
techniques for doing this are discussed throughout the rest of this
book.</para>
-->
<para>
  次によくある誤解は「オープンソースではプロジェクト管理にあまり気を使わなくていい」
  とか、逆に「社内開発の場合と同じようにプロジェクト管理をしておけば、
  オープンソースプロジェクトも問題なく動くだろう」というものです。
  オープンソースプロジェクトにおいてはプロジェクト管理があまり表に出ることはありません。
  しかし、成功しているプロジェクトの舞台裏では、何らかのプロジェクト管理が行われています。
  なぜ？理由を説明するため、ここでちょっとした思考実験をしてみましょう。
  オープンソースプロジェクトに参加するプログラマは、いろいろな意味でバラバラです
  &mdash;よく知られているように、一匹狼的な人種です&mdash;彼らはお互いに顔をあわせることもなく、
  そのプロジェクトで何を達成したいのかという目標も個々に異なります。
  このような集団で、何も管理をしなかったらどんなことになるでしょうか？
  奇跡でも起こらない限り、すぐにバラバラになってしまうか明後日の方向に向かってしまうことでしょう。
  私たちが思っているほど物事はうまく進みません。
  それでは、いったい何を管理すべきなのでしょうか。
  管理はおおっぴらにやるものではなく、
  非公式に控えめに行うことになるでしょう。
  開発者たちを結びつける唯一の理由は、
  個別にやるよりも協調したほうがよりよいものができるという共通認識です。
  したがって、管理者の目標は、開発者たちがこの考えを信じ続けられるようにすることとなります。
  そのためには、標準的なコミュニケーション手段を定めることが大切です。
  また、有能な開発者が「周りと違う」というだけで仲間はずれにされることのないように注意が必要です。
  要するに、開発者たちにとって「またここに戻ってきたい」と思わせるようにしようということです。
  そのための具体的なテクニックについて、本書でこれから説明していきます。
</para>

<!--
<para>Finally, there is a general category of problems that may be
called "failures of cultural navigation."  Ten years ago, even five,
it would have been premature to talk about a global culture of free
software, but not anymore.  A recognizable culture has slowly emerged,
and while it is certainly not monolithic&mdash;it is at least as prone
to internal dissent and factionalism as any geographically bound
culture&mdash;it does have a basically consistent core.  Most
successful open source projects exhibit some or all of the
characteristics of this core.  They reward certain types of behaviors,
and punish others; they create an atmosphere that encourages unplanned
participation, sometimes at the expense of central coordination; they
have concepts of rudeness and politeness that can differ substantially
from those prevalent elsewhere.  Most importantly, longtime
participants have generally internalized these standards, so that they
share a rough consensus about expected conduct.  Unsuccessful projects
usually deviate in significant ways from this core, albeit
unintentionally, and often do not have a consensus about what
constitutes reasonable default behavior.  This means that when
problems arise, the situation can quickly deteriorate, as the
participants lack an already established stock of cultural reflexes to
fall back on for resolving differences. </para>
-->
<para>
  最後に「文化的な導き方の失敗 (failures of cultural navigation)」
  と言われる一般的な問題について説明しましょう。
  ほんの10年前くらいまで、いや５年前くらいまでは、
  フリーソフトウェア文化について語るだなんて時期尚早だといわれていました。
  でも今はもう違います。
  徐々にフリーソフトウェア文化が目に付くようになってきました。
  確かにそれは一枚岩のものではありません&mdash;
  少なくともごく普通の文化と同様に意見の相違や派閥争いなどが起こりがちです
  &mdash;が、コアとなる部分は一貫しています。
  うまくいっているオープンソースプロジェクトの大半は、
  このコアとなる考えかたの一部あるいはすべてを持ち備えています。
  彼らはよい振る舞いに対しては賞賛し、そうでないものについては非難します。
  彼らは誰でもプロジェクトに参加しやすくなるような雰囲気作りを心がけています。
  たとえ時にはそれが現在のメンバー間の連携を乱すことになったとしても。
  彼らは何が失礼で何がそうでないのかをきちんとわかっています。
  そこが他のプロジェクトとは異なるところです。
  最も重要なのは、長年そのプロジェクトに参加している人たちがこれらの考えを身に着けており、
  プロジェクトがどうあるべきかという指針を大雑把につかんでいることです。
  失敗するプロジェクトはたいてい、無意識のうちにこの基本から逸脱してしまいます。
  そして、デフォルトの振る舞いがどうあるべきかという共通認識を持つこともなくなります。
  こういう状態になると、いざ何か問題が起こったときにそれが急速に悪化してしまうようになります。
  これは、お互いの意見の相違を解決して何とかしようとする文化が確立されていないからです。
</para>

<!--
<para>This book is a practical guide, not an anthropological study or
a history.  However, a working knowledge of the origins of today's
free software culture is an essential foundation for any practical
advice.  A person who understands the culture can travel far and wide
in the open source world, encountering many local variations in custom
and dialect, yet still be able to participate comfortably and
effectively everywhere.  In contrast, a person who does not understand
the culture will find the process of organizing or participating in a
project difficult and full of surprises.  Since the number of people
developing free software is still growing by leaps and bounds, there
are many people in that latter category&mdash;this is largely a
culture of recent immigrants, and will continue to be so for some
time.  If you think you might be one of them, the next section
provides background for discussions you'll encounter later, both in
this book and on the Internet.  (On the other hand, if you've been
working with open source for a while, you may already know a lot of
its history, so feel free to skip the next section.)</para>
-->
<para>
  本書は実用的なガイドブックであり、
  人類学や歴史学を扱う学術書ではありません。
  しかし、こんにちのフリーソフトウェア文化の始まった背景についての
  基本的な知識を身に着けておくと、本書での実用的なアドバイスがよりわかりやすくなるでしょう。
  背景となる文化を知っておくと、オープンソースの世界をより広く深く歩き回れるようになります。
  プロジェクトによっては独特の習慣や方言があったりするでしょうが、
  そんな場合も気にせずに仲間入りできるようになるでしょう。
  反対に、そのような背景を知らない人は、
  プロジェクトを作成したりプロジェクトに参加したりする手続きを見て
  非常に難しくてびっくりすることばかりだと感じられるでしょう。
  フリーソフトウェアの開発にかかわる人は飛躍的に増えてきていますが、
  その多くは後者 (つまり背景を知らない人) です。
  これは、ちょうと最近の移民文化と似ています。
  この傾向はもうしばらくは続くことでしょう。
  もし自分も「背景を知らない人」のひとりだと思われるなら、
  ぜひ次のセクションを読んでください。ここでは、
  今後本書やインターネット上で登場することになる
  さまざまな議論の背景について説明しています
  (一方、すでにオープンソースの世界での活動経験があり、
  その歴史についてもよく知っているという方は、
  次のセクションは読み飛ばしていただいてけっこうです)。
</para>

</simplesect>

<!-- ========================== SECTION =========================== -->
<sect1 id="history">
<!--
<title>History</title>
-->
<title>歴史</title>

<!--
<para>Software sharing has been around as long as software itself.  In
the early days of computers, manufacturers felt that competitive
advantages were to be had mainly in hardware innovation, and therefore
didn't pay much attention to software as a business asset.  Many of
the customers for these early machines were scientists or technicians,
who were able to modify and extend the software shipped with the
machine themselves.  Customers sometimes distributed their patches
back not only to the manufacturer, but to other owners of similar
machines.  The manufacturers often tolerated and even encouraged this:
in their eyes, improvements to the software, from whatever source,
just made the machine more attractive to other potential
customers.</para>
-->
<para>
  ソフトウェアを共有するという考え方は、ソフトウェアが誕生した当初から存在しました。
  コンピュータの黎明期には、各メーカーは「ハードウェアの革新によって
  競合他社の上を行こう」と考えていました。そのため、
  ソフトウェアは商売の材料としてあまり重視されていなかったのです。
  いわば「ハードウェアのおまけ」という存在でしかありませんでした。
  そのころにコンピュータを使っていたのは科学者や技術者ばかりで、
  彼らは、コンピュータに同梱されているソフトウェアを修正したり拡張したりすることができました。
  その修正パッチをコンピュータのメーカーに送るだけでなく、
  同じマシンを使っている他のユーザにも送っていたのです。
  メーカーはそれに目くじらを立てることはなく、むしろそうすることを奨励していました。
  彼らにとっては、どんな理由であれソフトウェアの品質が向上することはありがたかったのです。
  そのおかげで自社のマシンがより魅力的なものとなり、
  新規顧客が増えることになるでしょうから。
</para>

<!--
<para>Although this early period resembled today's free software
culture in many ways, it differed in two crucial respects.  First,
there was as yet little standardization of hardware&mdash;it was a
time of flourishing innovation in computer design, but the diversity
of computing architectures meant that everything was incompatible with
everything else.  Thus, software written for one machine would
generally not work on another.  Programmers tended to acquire
expertise in a particular architecture or family of architectures
(whereas today they would be more likely to acquire expertise in a
programming language or family of languages, confident that their
expertise will be transferable to whatever computing hardware they
happen to find themselves working with).  Because a person's expertise
tended to be specific to one kind of computer, their accumulation of
expertise had the effect of making that computer more attractive to
them and their colleagues.  It was therefore in the manufacturer's
interests for machine-specific code and knowledge to spread as widely
as possible.</para>
-->
<para>
  当時の状況と現在のフリーソフトウェア文化との間には多くの共通点もありますが、
  決定的な違いがふたつあります。
  まず、当時はまだハードウェアが標準化されていませんでした。
  ちょうどコンピュータ自体が革新的な進歩を遂げつつある時期だったということもその理由のひとつです。
  さまざまなアーキテクチャのコンピュータが存在するということは、
  ある機種のために書いたプログラムがその他の機種では一切動かないということです。
  したがって、ある機種のために書いたプログラムが世界中で使われるということはありませんでした。
  当時のプログラマは、特定のアーキテクチャ
  あるいはアーキテクチャファミリーについての専門技術を身につけようとする傾向がありました
  (一方現在では、特定のアーキテクチャというよりは
  特定のプログラミング言語に関するエキスパートになろうとする人が多いように思います。
  何かひとつのプログラミング言語をマスターすれば、
  ハードウェアが変わったとしてもその知識が応用できるわけです)。
  たいていの人は興味の対象があれこれ移り変わることがないので、
  何か特定のコンピュータに力を入れ始めるとずっとそれに力を入れるようになりました。
  その結果、周囲の人たちも同じコンピュータに興味を持つようになっていたのです。
  そのマシンでしか使えないコードや知識が広まれば広まるほど、
  そのマシンを作っているメーカーにとってはありがたかったのです。
</para>

<!--
<para>Second, there was no Internet.  Though there were fewer legal
restrictions on sharing than today, there were more technical ones:
the means of getting data from place to place were inconvenient and
cumbersome, relatively speaking.  There were some small, local
networks, good for sharing information among employees at the same
research lab or company.  But there remained barriers to overcome if
one wanted to share with everyone, no matter where they were.  These
barriers <emphasis>were</emphasis> overcome in many cases.  Sometimes
different groups made contact with each other independently, sending
disks or tapes through land mail, and sometimes the manufacturers
themselves served as central clearing houses for patches.  It also
helped that many of the early computer developers worked at
universities, where publishing one's knowledge was expected.  But the
physical realities of data transmission meant there was always an
impedance to sharing, an impedance proportional to the distance (real
or organizational) that the software had to travel.  Widespread,
frictionless sharing, as we know it today, was not possible.</para>
-->
<para>
  そして２番目に、当時はインターネットがありませんでした。
  当時は現在ほど共有に関する法的規制は厳しくありませんでしたが、
  それよりも技術的な問題のほうが大きかったのです。
  あるデータをどこかからどこかへ移動しようとすると、
  現在に比べて非常に不便でやっかいでした。
  せいぜい、同じ研究室内や同じ会社の従業員同士で情報を共有するくらいが関の山だったのです。
  目の前にいる人たちでなくみんなと情報を共有しようと思ったら、
  とたんに敷居が高くなってしまいました。
  この敷居を乗り越えるために、さまざまな手段が試みられました。
  時にはディスクやテープを通常の封書でやりとりすることもありましたし、
  時にはメーカー自身が間に入ってパッチのやりとりをしたりもしていました。
  初期のコンピュータ開発者の多くが大学で働いていたことも幸いしました。
  大学では、自分の得た知識をみんなに広めることがごく普通に行われていたからです。
  しかし、データを共有するにあたって物理的な距離の隔たりが常に障害となりました。
  お互いの地理的な距離、そして組織的な距離が遠くなればなるほど、共有がむずかしくなっていたのです。
  現在の私たちのように、距離を気にせず情報の共有ができるなんてことはありえなかったのです。
</para>

<!-- ========================== subsection ========================== -->
<sect2 id="propertization">
<!--
<title>The Rise of Proprietary Software and Free Software</title>
-->
<title>独占的なソフトウェアとフリーソフトウェア</title>

<!--
<para>As the industry matured, several interrelated changes occurred
simultaneously.  The wild diversity of hardware designs gradually gave
way to a few clear winners&mdash;winners through superior technology,
superior marketing, or some combination of the two.  At the same time,
and not entirely coincidentally, the development of so-called "high
level" programming languages meant that one could write a program
once, in one language, and have it automatically translated
("compiled") to run on different kinds of computers.  The implications
of this were not lost on the hardware manufacturers: a customer could
now undertake a major software engineering effort without necessarily
locking themselves into one particular computer architecture.  When
this was combined with the gradual narrowing of performance
differences between various computers, as the less efficient designs
were weeded out, a manufacturer that treated its hardware as its only
asset could look forward to a future of declining profit margins.  Raw
computing power was becoming a fungible good, while software was
becoming the differentiator.  Selling software, or at least treating
it as an integral part of hardware sales, began to look like a good
strategy.</para>
-->
<para>
  業界が成熟してくるにつれて、いくつかの変化が同時に発生しました。
  まず、さまざまなものがあったハードウェア設計が徐々に淘汰され、
  いくつかの勝ち組に絞られていきました。
  他より技術的に優れていたもの、他よりマーケティングが上手だったもの、
  あるいはその両方を兼ね備えていたものなどが残ることとなったのです。
  と同時に (これは決して偶然とはいえないでしょうが)、
  いわゆる「高級プログラミング言語」が台頭してきました。
  これは、その言語で書いたプログラムを自動的に翻訳 (「コンパイル」)
  し、さまざまなコンピュータ上で動かすことを可能とするものでした。
  ハードウェアメーカーも、当然このような動きを察知していました。
  彼らの顧客は今や、特定のコンピュータアーキテクチャに囲い込まれることなく
  ソフトウェアを開発できるようになったのです。
  これらの変化と同時に、各種コンピュータ間のパフォーマンスの差もほとんどなくなってきました。
  また効率的でない設計のものは排除されていきました。
  ハードウェアのみを収入源としているメーカーは、
  将来の見通しがあまり明るく感じられませんでした。
  つまり、コンピュータそのものは今や代替可能なものとなってしまい、
  一方ソフトウェアこそが他との差別化の手段となったのです。
  そんな流れの中では、ソフトウェア自体を販売したり
  少なくともソフトウェアをハードウェアの必須部品として販売したり
  といった考えが出てくるのも当然でした。
</para>

<!--
<para>This meant that manufacturers had to start enforcing the
copyrights on their code more strictly.  If users simply continued to
share and modify code freely among themselves, they might
independently reimplement some of the improvements now being sold as
"added value" by the supplier.  Worse, shared code could get into the
hands of competitors.  The irony is that all this was happening around
the time the Internet was getting off the ground.  Just when truly
unobstructed software sharing was finally becoming technically
possible, changes in the computer business made it economically
undesirable, at least from the point of view of any single company.
The suppliers clamped down, either denying users access to the code
that ran their machines, or insisting on non-disclosure agreements
that made effective sharing impossible.</para>
-->
<para>
  ここにきて、各メーカーはソフトウェアのコードに対する著作権を
  より厳格に適用する必要に迫られることになったのです。
  もしユーザが自由にコードを改変して周囲に配布しようとするなら、
  今やハードウェアの「追加機能」として販売されるようになったものを
  自前で再実装する必要が出てきました。
  悪いことに、そのコードは競合他社の手に渡ってしまうかも知れません。
  皮肉にも、これらの出来事はちょうどインターネットが誕生したのと同じころに発生したのです。
  ソフトウェアを共有する際の技術的な障害がようやく解消されたと思ったら、
  そのときにはコンピュータ業界の常識が変わっていたというわけです。
  少なくともメーカー側の視点で見れば、
  ソフトウェアを自由に共有するのは望ましくないこととなっていました。
  メーカーは規制に走りました。
  自社のマシンを動かしているコードをユーザに公開しなくなったり、
  機密保持契約を結ばせることでコードの共有を不可能にしたりといったことを行いました。
</para>

<sect3 id="history-conscious-resistance">
<!--
<title>Conscious resistance</title>
-->
<title>意識的な抵抗</title>

<!--
<para>As the world of unrestricted code swapping slowly faded away, a
counterreaction crystallized in the mind of at least one programmer.
Richard Stallman worked in the Artificial Intelligence Lab at the
Massachusetts Institute of Technology in the 1970s and early '80s,
during what turned out to be a golden age and a golden location for
code sharing.  The AI Lab had a strong "hacker
ethic",<footnote><para>Stallman uses the word "hacker" in the sense of
"someone who loves to program and enjoys being clever about it," not
the relatively new meaning of "someone who breaks into
computers."</para></footnote> and people were not only encouraged but
expected to share whatever improvements they made to the system.  As
Stallman wrote later:</para>
-->
<para>
  自由にコードを共有できた時代が終わりを告げようとしているころ、
  少なくとも１人のプログラマーの心の中ではそれに反対する気持ちが固まりつつありました。
  Richard Stallman は、マサチューセッツ工科大学の人工知能 (AI) 研究所に 1970
  年代から 80 年代の初期にかけて在籍していました。
  ちょうどそのころが、コードの共有が盛んに行われていた黄金時代でした。
  AI 研は「ハッカー倫理」
  <footnote>
    <para>
      Stallman は「ハッカー」という単語を
      「プログラミングが大好きでそれを楽しんでいる賢い人」という意味で使っています。
      最近よく使われるようになった「コンピュータに不正侵入する人」
      という意味ではありません。
    </para>
  </footnote>
  を前面に押し出しており、何かシステムに改良を加えた場合は
  それを皆で共有するのが当然のことであるとみなされていました。
  Stallman は、後に次のように述べています。
</para>

    <blockquote>
<!--
      <para><emphasis>We did not call our software "free software",
      because that term did not yet exist; but that is what it was.
      Whenever people from another university or a company wanted to
      port and use a program, we gladly let them.  If you saw someone
      using an unfamiliar and interesting program, you could always
      ask to see the source code, so that you could read it, change
      it, or cannibalize parts of it to make a new program.
      </emphasis></para>
-->
      <para><emphasis>
        わたしたちは自分たちのソフトウェアを「フリーソフトウェア」とは呼んでいませんでした。
        なぜなら、そんな用語は存在していなかったからです。しかし、実際はそういうものでした。
        他の大学や企業からやって来た人がプログラムを移植したり使ったりしたいときはいつでも、
        わたしたちは喜んで許可していました。
        もし誰かが珍しくて面白そうなプログラムを使っているのを見たら、
        いつでもソースコードを見せてほしいと頼んでもいいので、それを読んだり、
        書き換えたり、新しいプログラムを作るためにその一部を取り出しても構いませんでした。
      </emphasis></para>

<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis>)</para>
-->
      <para>
        (<emphasis role="bold"><ulink
          url="http://www.gnu.org/gnu/thegnuproject.html"/></emphasis> より引用。
        日本語訳は <emphasis role="bold"><ulink
          url="http://www.gnu.org/gnu/thegnuproject.ja.html"/></emphasis>)
      </para>
    </blockquote>

<!--
<para>This Edenic community collapsed around Stallman shortly after
1980, when the changes that had been happening in the rest of the
industry finally caught up with the AI Lab.  A startup company hired
away many of the Lab's programmers to work on an operating system
similar to what they had been working on at the Lab, only now under an
exclusive license.  At the same time, the AI Lab acquired new
equipment that came with a proprietary operating system.</para>
-->
<para>
  Stallman の周りにあったエデンの園は、1980 年代に入ってすぐに崩壊してしまいました。
  周囲の業界で起こっていたさまざまな変化の影響が、AI 研にも到達したのです。
  研究所にいたプログラマの多くはスタートアップ企業に就職し、
  オペレーティングシステムの開発に従事するようになりました。
  やっていることは研究所時代と似ていますが、
  今や彼らは独占的なライセンスのもとで働くようになったのです。
  ちょうど同じころ、AI 研は新しいマシンを導入しました。
  そこに搭載されていたのは独占的なオペレーティングシステムでした。
</para>

<!--
<para>Stallman saw the larger pattern in what was happening:</para>
-->
<para>Stallman は、何が起こっているのかを広い範囲で目の当たりにしました。</para>

    <blockquote>
<!--
      <para><emphasis>The modern computers of the era, such as the VAX
      or the 68020, had their own operating systems, but none of them
      were free software: you had to sign a nondisclosure agreement
      even to get an executable copy.</emphasis> </para>
-->
      <para><emphasis>
        VAX や 68020 のような当時の先進的なコンピューターは
        専用のオペレーティング・システムを備えていましたが、
        どれもフリーソフトウェアではありませんでした。つまり、
        実行可能なコピーを入手するためだけでも非開示契約を結ぶ必要があったのです。
      </emphasis></para>

<!--
      <para><emphasis>This meant that the first step in using a
      computer was to promise not to help your neighbor. A cooperating
      community was forbidden. The rule made by the owners of
      proprietary software was, "If you share with your neighbor, you
      are a pirate. If you want any changes, beg us to make them."
      </emphasis> </para>
-->
      <para><emphasis>
        ということは、つまり最初にコンピューターを使うときには、
        周りの人を手助けしないと約束する必要があるということでした。
        協力し合うコミュニティは禁じられてしまうのです。
        独占的なソフトウェアの所有者によって作られたルールとは
        「もしお前が隣人と分かち合うなら、お前は著作権法に反していることになる。
        変更を加えたいのなら、われわれに頼み込んで作ってもらうことだ」
        というものなのです。
      </emphasis> </para>

    </blockquote>

<!--
<para>By some quirk of personality, he decided to resist the trend.
Instead of continuing to work at the now-decimated AI Lab, or taking a
job writing code at one of the new companies, where the results of his
work would be kept locked in a box, he resigned from the Lab and
started the GNU Project and the Free Software Foundation (FSF).  The
goal of GNU<footnote><para>It stands for "GNU's Not Unix", and the
"GNU" in that expansion stands for...the same
thing.</para></footnote> was to develop a completely free and open
computer operating system and body of application software, in which
users would never be prevented from hacking or from sharing their
modifications.  He was, in essence, setting out to recreate what had
been destroyed at the AI Lab, but on a world-wide scale and without
the vulnerabilities that had made the AI Lab's culture susceptible to
disintegration.</para>
-->
<para>
  彼は、この風潮に対して抵抗する決心をしました。
  規模がかなり縮小されてしまった AI 研に残り続けるのではなく、
  また新興企業でコードを書く仕事を得る
  (そんなことをしたら彼の作業の成果が一企業に閉じ込められてしまいます)
  わけでもありませんでした。
  彼は研究所を退職し、GNU プロジェクトと Free Software Foundation (FSF)
  を立ち上げました。GNU
  <footnote>
    <para>
      これは "GNU's Not Unix" の頭文字をとったものです。
      そしてこの中の "GNU" は何の略かといえば…… 同じです。
    </para>
  </footnote>
  の目標は、完全にフリーでオープンなオペレーティングシステムと
  アプリケーションソフトウェアを作成することです。
  ユーザがコードをハックしたり他人と共有したりすることは決して妨げられません。
  簡単に言うと、彼は AI 研にかつてあった (そして今は破壊されてしまった)
  空気を新たに作り直そうとしていたのです。
  今度は世界中を巻き込む規模で。
  そして AI 研の空気が破壊されてしまったのと同じようなことを起こさないように。
</para>

<!--
<para>In addition to working on the new operating system, Stallman
devised a copyright license whose terms guaranteed that his code would
be perpetually free.  The GNU General Public License (GPL) is a clever
piece of legal judo: it says that the code may be copied and modified
without restriction, and that both copies and derivative works (i.e.,
modified versions) must be distributed under the same license as the
original, with no additional restrictions.  In effect, it uses
copyright law to achieve an effect opposite to that of traditional
copyright: instead of limiting the software's distribution, it
prevents <emphasis>anyone</emphasis>, even the author, from limiting
it.  For Stallman, this was better than simply putting his code into
the public domain.  If it were in the public domain, any particular
copy of it could be incorporated into a proprietary program (as has
also been known to happen to code under permissive copyright
licenses).  While such incorporation wouldn't in any way diminish the
original code's continued availability, it would have meant that
Stallman's efforts could benefit the enemy&mdash;proprietary software.
The GPL can be thought of as a form of protectionism for free
software, because it prevents non-free software from taking full
advantage of GPLed code.  The GPL and its relationship to other free
software licenses are discussed in detail in
<xref linkend="legal"/>.</para>
-->
<para>
  新しいオペレーティングシステムの開発のかたわら、Stallman
  は新しい著作権ライセンスの作成も行っていました。
  このライセンスは、コードが常に自由に扱えることを保証するものでした。
  GNU General Public License (GPL) は、法的な面からも賢明なものでした。
  コードの複製や変更には一切の制限を設けず、コピーしたものやその派生物
  (改造したものなど) も同じライセンスのもとで自由に配布できます。
  何か制限が付加されることはありません。
  これは著作権法の形をとっていますが、
  実際にはこれまでの著作権法とは正反対の効果を狙ったものです。
  つまり、ソフトウェアの再配布を制限するのではなく、たとえ作者であっても
  <emphasis>再配布を制限すること</emphasis> 自体を禁止しているのです。
  Stallman にとって、自分のコードを単にパブリックドメインにするよりも
  そのほうが好都合だったのです。
  パブリックドメインにしてしまうと、誰かがそれを独占的なプログラム
  (あるいは、より規制のゆるい別のライセンスを適用したプログラム)
  に使用してしまうかもしれません。
  そうされたところで元のコードは自由なままで残り続けるわけですが、
  でも結局は Stallman の努力した結果が敵陣営
  &mdash;独占的ソフトウェア&mdash;に利益をもたらすことになってしまいます。
  GPL は、フリーソフトウェアを保護主義的に守ろうとして考え出されたものです。
  そのため、自由でないソフトウェアが GPL のコードから一切の恩恵を受けられないようになっています。
  GPL とその他のフリーソフトウェアライセンスとの関係については、
  <xref linkend="legal"/> で詳しく説明します。
</para>

<!--
<para>With the help of many programmers, some of whom shared
Stallman's ideology and some of whom simply wanted to see a lot of
free code available, the GNU Project began releasing free replacements
for many of the most critical components of an operating system.
Because of the now-widespread standardization in computer hardware and
software, it was possible to use the GNU replacements on otherwise
non-free systems, and many people did.  The GNU text editor (Emacs)
and C compiler (GCC) were particularly successful, gaining large and
loyal followings not on ideological grounds, but simply on their
technical merits.  By about 1990, GNU had produced most of a free
operating system, except for the kernel&mdash;the part that the
machine actually boots up, and that is responsible for managing memory,
disk, and other system resources.</para>
-->
<para>
  数多くのプログラマ
  (Stallman の思想に賛同する人もいれば、
  ただ単に自由にコードを使いたいだけという人もいました)
  の協力を得て、GNU プロジェクトは
  OS の基幹部品を置き換えるフリーソフトウェアを次々にリリースしていきました。
  当時はすでにコンピュータのハードウェアやソフトウェアが標準化されていたので、
  GNU のソフトウェアを自由でないシステム上で使用することもできました。
  また実際に多くの人がそのようにしていました。
  中でも最も成功したのが GNU テキストエディタ (Emacs)
  と C コンパイラ (GCC) でした。これらは、その思想に共感する人たちだけでなく
  単にソフトウェアとして優れているからという理由で使う人たちも引き込むことになりました。
  1990 年ごろには、GNU は自由なオペレーティングシステムをほぼ完成させつつあり、
  残っていたのはカーネルだけでした。カーネルとはマシンを実際に立ち上げる部分であり、
  メモリやディスク等のシステムリソースの管理を行うものです。
</para>

<!--
<para>Unfortunately, the GNU project had chosen a kernel design that
turned out to be harder to implement than expected.  The ensuing delay
prevented the Free Software Foundation from making the first release
of an entirely free operating system.  The final piece was put into
place instead by Linus Torvalds, a Finnish computer science student
who, with the help of volunteers around the world, had completed a
free kernel using a more conservative design.  He named it Linux, and
when it was combined with the existing GNU programs, the result was a
completely free operating system.  For the first time, you could boot
up your computer and do work without using any proprietary
software.<footnote><para>Technically, Linux was not the first.  A free
operating system for IBM-compatible computers, called 386BSD, had come
out shortly before Linux.  However, it was a lot harder to get 386BSD
up and running.  Linux made such a splash not only because it was
free, but because it actually had a high chance of booting your
computer when you installed it.</para></footnote></para>
-->
<para>
  不幸にも、GNU プロジェクトが選択したカーネル設計は
  当初予想していたよりも実装が困難なものでした。
  カーネルの作成は遅れに遅れ、Free Software Foundation
  が完全に自由なオペレーティングシステムを公開する日はなかなかやってきませんでした。
  そこに登場したのが Linus Torvalds です。
  彼はフィンランド人の学生で計算機科学を専攻していました。
  彼は世界中の有志と力をあわせ、より保守的な設計のフリーなカーネルを完成させました。
  彼はそれを Linux と名づけました。Linux を既存の GNU プログラム群と組み合わせることで、
  完全に自由なオペレーティングシステムを得ることができるようになったのです。
  ここにきて初めて、独占的ソフトウェアを一切使用せずに
  コンピュータを立ち上げて作業ができるようになりました。
  <footnote>
    <para>
      厳密に言うと、Linux が最初だったわけではありません。
      IBM 互換機上で動作する 386BSD というフリーなオペレーティングシステムが
      Linux のほんの少し前に登場しています。
      しかし、386BSD を動かすのは非常に難しいことでした。
      Linux が騒がれた理由は、単にフリーなだけでなく
      インストールして動作させるのが簡単であったということもあります。
    </para>
  </footnote>
</para>

<!--
<para>Much of the software on this new operating system was not
produced by the GNU project.  In fact, GNU wasn't even the only group
working on producing a free operating system (for example, the code
that eventually became NetBSD and FreeBSD was already under
development by this time).  The importance of the Free Software
Foundation was not only in the code they wrote, but in their political
rhetoric.  By talking about free software as a cause instead of a
convenience, they made it difficult for
programmers <emphasis>not</emphasis> to have a political consciousness
about it.  Even those who disagreed with the FSF had to engage the
issue, if only to stake out a different position.  The FSF's
effectiveness as propagandists lay in tying their code to a message,
by means of the GPL and other texts.  As their code spread widely,
that message spread as well.</para>
-->
<para>
  この新しいオペレーティングシステム上で動作するソフトウェアの多くは、
  GNU プロジェクト以外が作成しています。実際のところ、
  フリーなオペレーティングシステムを作ろうとしていたのは GNU だけではなかったのです
  (たとえば、後に NetBSD や FreeBSD となるコードはこの時点ですでに開発が進められていました)。
  Free Software Foundation の存在意義は、
  彼らが書いたコードだけではなくその政治的な立場にもありました。
  フリーソフトウェア運動について語る際に、
  プログラマは政治的な面を気にせざるを得ないようになってきました。
  FSF の考えに異を唱える人でさえも、それを表明する必要がありました。
  FSF は、彼らのコードに GPL やその他のテキストを同梱することで彼らの思想を効率的に広めました。
  彼らの書いたコードが広まれば広まるほど、
  彼らのメッセージも広まることになりました。
</para>

</sect3>

<sect3 id="history-accidental-resistance">
<!--
<title>Accidental resistance</title>
-->
<title>無意識な抵抗</title>

<!--
<para>There were many other things going on in the nascent free
software scene, however, and few were as explictly ideological as
Stallman's GNU Project.  One of the most important was
the <firstterm>Berkeley Software Distribution</firstterm>
(<firstterm>BSD</firstterm>), a gradual re-implementation of the Unix
operating system&mdash;which up until the late 1970's had been a
loosely proprietary research project at AT&amp;T&mdash;by programmers
at the University of California at Berkeley.  The BSD group did not
make any overt political statements about the need for programmers to
band together and share with one another, but they
<emphasis>practiced</emphasis> the idea with flair and
enthusiasm, by coordinating a massive distributed development effort
in which the Unix command-line utilities and code libraries, and
eventually the operating system kernel itself, were rewritten from
scratch mostly by volunteers.  The BSD project became a prime example
of non-ideological free software development, and also served as a
training ground for many developers who would go on to remain active
in the open source world.</para>
-->
<para>
  フリーソフトウェア運動の初期には、他にも多くの運動が起こっていました。
  しかし、Stallman の GNU プロジェクトと同じくらいにイデオロギーを前面に押し出したものは
  ほとんどありませんでした。その中でも最も重要なもののひとつが
  <firstterm>Berkeley Software Distribution</firstterm> (<firstterm>BSD</firstterm>)
  でしょう。これは、徐々に Unix オペレーティングシステム
  &mdash;1970 年代後半時点では AT&amp;T の研究プロジェクトとして独占化されていました&mdash;
  を再実装しようという動きで、カリフォルニア大学バークレー校のプログラマーがはじめました。
  BSD グループは「プログラマ同士お互いに手を取り合って団結しなければならない」
  といった政治的な声明は出しませんでした。
  その代わりに彼らの才能と熱意でもってそのアイデアを実現させていきました。
  さまざまな場所に散らばった開発者たちが協力し、Unix
  のコマンドラインユーティリティやコードライブラリ、
  そしてオペレーティングシステムのカーネル自体についても１から書き直していきました。
  BSD プロジェクトは、イデオロギーを前面に押し出さないフリーソフトウェアプロジェクトとして
  最も有名な例です。また、
  オープンソースの世界に参加しようとする開発者にとってもよい訓練の場となりました。
</para>

<!--
<para>Another crucible of cooperative development was the <firstterm>X
Window System</firstterm>, a free, network-transparent graphical
computing environment, developed at MIT in the mid-1980's in
partnership with hardware vendors who had a common interest in being
able to offer their customers a windowing system.  Far from opposing
proprietary software, the X license deliberately allowed proprietary
extensions on top of the free core&mdash;each member of the consortium
wanted the chance to enhance the default X distribution, and thereby
gain a competitive advantage over the other members.  X
Windows<footnote><para>They prefer it to be called the "X Window
System", but in practice, people usually call it "X Windows", because
three words is just too cumbersome.</para></footnote> itself was free
software, but mainly as a way to level the playing field between
competing business interests, not out of some desire to end the
dominance of proprietary software.  Yet another example, predating the
GNU project by a few years, was TeX, Donald Knuth's free,
publishing-quality typesetting system.  He released it under a license
that allowed anyone to modify and distribute the code, but not to call
the result "TeX" unless it passed a very strict set of compatibility
tests (this is an example of the "trademark-protecting" class of free
licenses, discussed more in <xref linkend="legal"/>).  Knuth wasn't
taking a stand one way or the other on the question of
free-versus-proprietary software, he just needed a better typesetting
system in order to complete his
<emphasis>real</emphasis> goal&mdash;a book on computer
programming&mdash;and saw no reason not to release his system to the
world when done.</para>
-->
<para>
  別の共同開発の例としては <firstterm>X
  Window System</firstterm> があります。これは
  フリーでネットワーク越しに使用できるグラフィック環境で、
  1980 年代半ばに MIT とハードウェアベンダーが共同で開発しました。
  ベンダー側も、顧客に同じようなウィンドウシステムを提供したがっていたのです。
  独占的ソフトウェアと対立するのではなく、X ライセンスでは
  フリーなコアのコード上に独占的な拡張を施すことを意図的に許可していました。
  コンソーシアムの各メンバーはデフォルトの X をそれぞれ拡張し、
  それによって競合する他のメンバーに対する優位を確保しようとしたのです。
  X ウィンドウ
  <footnote>
    <para>
      彼らは "X ウィンドウシステム" と呼んでほしいようですが、
      現実には "X ウィンドウ" ということのほうが多いでしょう。
      だっていちいちそんな長い名前を言うのは面倒くさいから。
    </para>
  </footnote>
  自体はフリーソフトウェアですが、
  独占的ソフトウェアの支配を終わらせるといった意図はありませんでした。
  もうひとつの例を挙げましょう。GNU プロジェクトの数年前に開発が始まった TeX
  です。これは、Donald Knuth によるフリーで高品質な組版システムです。
  彼は、誰でもコードを改変して再配布できるというライセンスのもとで Tex を公開しました。
  ただし、改変したコードを再配布する際には、非常に厳しい互換性テストをクリアしない限り
  "TeX" の名を使ってはならないという制限をつけました
  (これは、フリーなライセンスにおける "商標保護" の例です。詳細は <xref linkend="legal"/>
  で説明します)。Knuth は、自由なソフトウェアか独占的なソフトウェアかといった問題については
  特に立場を表明していませんでした。彼は、単に
  <emphasis>真の</emphasis> 目的 (コンピュータプログラミングに関する書籍の出版)
  を達成するためのまともな組版システムがほしかっただけなのです。
  そして、自分の作ったものを一般に公開しないなどということは、
  彼にとってはありえないことだったのです。
</para>

</sect3>

<!--
<para>Without listing every project and every license, it's safe to
say that by the late 1980's, there was a lot of free software
available under a wide variety of licenses.  The diversity of licenses
reflected a corresponding diversity of motivations.  Even some of the
progammers who chose the GNU GPL were much less ideologically driven
than the GNU project itself.  Although they enjoyed working on free
software, many developers did not consider proprietary software a
social evil.  There were people who felt a moral impulse to rid the
world of "software hoarding" (Stallman's term for non-free software),
but others were motivated more by technical excitement, or by the
pleasure of working with like-minded collaborators, or even by a
simple human desire for glory.  Yet by and large these disparate
motivations did not interact in destructive ways.  This is partly
because software, unlike other creative forms like prose or the visual
arts, must pass semi-objective tests in order to be considered
successful: it must run, and be reasonably free of bugs.  This gives
all participants in a project a kind of automatic common ground, a
reason and a framework for working together without worrying too much
about qualifications beyond the technical.</para>
-->
<para>
  すべてのプロジェクトやライセンスをここで挙げることはしませんが、
  1980 年代後半にはさまざまなライセンスのさまざまなフリーソフトウェアが存在したということは
  ここまでの例でも十分に伝わるでしょう。
  さまざまなライセンスが存在するということは、
  フリーソフトウェアを公開する動機にもさまざまなものがあるということを表しています。
  GNU GPL を選択したプログラマであっても、
  GNU プロジェクトほどにはイデオロギーを押し出していない人も存在します。
  彼らはフリーソフトウェアの開発を楽しんでいますが、
  その多くは、特に独占的ソフトウェアを敵視しているわけではありません。
  この世から「ソフトウェアの囲い込み (software hoarding)」(Stallman
  がフリーでないソフトウェアを指すときに使用する用語) をなくすんだ！
  という道徳的な衝動にかられる人もいましたが、
  単に技術的な興味からフリーソフトウェアを開発している人もいました。
  また、他人と共同作業をするのが楽しいとか、
  有名になりたいとかいう理由の人もいたことでしょう。
  しかし、このように本質的に異なる動機を持った人たちが
  お互いに悪影響を及ぼしあうことはありませんでした。
  小説や絵画と異なり、ソフトウェアには最低限の基準
  (きちんと動くこと、バグが存在しないこと) があったことも理由のひとつでしょう。
  そのため、プロジェクトの参加者が共同で作業する際に
  技術面以外の適性をあまり気にする必要がありませんでした。
</para>

<!--
<para>Developers had another reason to stick together as well: it
turned out that the free software world was producing some very
high-quality code.  In some cases, it was demonstrably technically
superior to the nearest non-free alternative; in others, it was at
least comparable, and of course it always cost less.  While only a few
people might have been motivated to run free software on strictly
philosophical grounds, a great many people were happy to run it
because it did a better job.  And of those who used it, some
percentage were always willing to donate their time and skills to help
maintain and improve the software.</para>
-->
<para>
  開発者たちが手を取り合う理由がもうひとつありました。
  フリーソフトウェア界が非常に高品質なコードを生み出していることがわかってきたのです。
  時には、フリーでない同等製品より明らかに技術面で上回っているものもありました。
  あるいは、少なくとも同等の機能を持っているものも多くありました。当然、
  これは低コストで入手することができます。
  フリーソフトウェアの思想に厳密に従うためにフリーソフトウェアを使用するという人は
  あまり多くなかったかもしれません。多くの人たちは、
  単にそちらのほうが高性能だからという理由でフリーソフトウェアを選択していました。
  そしてそのような人たちの中には、
  ソフトウェアの保守や改善のために力を貸してくれる人も見られるようになりました。
</para>

<!--
<para>This tendency to produce good code was certainly not universal,
but it was happening with increasing frequency in free software
projects around the world.  Businesses that depended heavily on
software gradually began to take notice.  Many of them discovered that
they were already using free software in day-to-day operations, and
simply hadn't known it (upper management isn't always aware of
everything the IT department does).  Corporations began to take a more
active and public role in free software projects, contributing time
and equipment, and sometimes even directly funding the development of
free programs.  Such investments could, in the best scenarios, repay
themselves many times over.  The sponsor only pays a small number of
expert programmers to devote themselves to the project full time, but
reaps the benefits of <emphasis>everyone's</emphasis> contributions,
including work from unpaid volunteers and from programmers being paid
by other corporations.</para>
-->
<para>
  この「よいコードを生み出す」という傾向はまだ普遍的なものとはなっていませんでしたが、
  徐々に世界中のフリーソフトウェアプロジェクトでも同様の現象が見られるようになってきました。
  ソフトウェアに強く依存する産業界でも、徐々にそのことに気づき始めました。
  彼らの多くは、すでに日常の作業にフリーソフトウェアを使用していましたが、
  それに気づいていませんでした (上級管理職が
  IT 部門の動きを常に把握しているとは限りません)。
  企業は、フリーソフトウェアプロジェクトに対して
  より積極的、公共的な役割を担うようになりました。
  彼らのために時間や設備を提供したり、
  あるいはもっと直接的に資金を提供したりすることもありました。
  うまくいった場合は、そのような投資が何倍にもなって返ってくるかもしれません。
  そのプロジェクトにフルタイムで専念している一部の専門プログラマに対して資金を提供することで、
  プロジェクト全体 (無償のボランティアや他の企業に属するプログラマなど)
  の活動の利益を得られることになります。
</para>

</sect2>

<!-- ========================== subsection ========================== -->
<sect2 id="free-vs-open-source">
<!--
<title>"Free" Versus "Open Source"</title>
-->
<title>「フリー」と「オープンソース」の違い</title>

<!--
<para>As the corporate world gave more and more attention to free
software, programmers were faced with new issues of presentation.  One
was the word "free" itself.  On first hearing the term "free software"
many people mistakenly think it means just "zero-cost software."  It's
true that all free software is zero-cost,<footnote><para>One may charge
a fee for giving out copies of free software, but since one cannot
stop the recipients from offering it at no charge afterwards, the
price is effectively driven to zero immediately.</para></footnote>
but not all zero-cost software is free.  For example, during the
battle of the browsers in the 1990s, both Netscape and Microsoft gave
away their competing web browsers at no charge, in a scramble to gain
market share.  Neither browser was free in the "free software" sense.
You couldn't get the source code, and even if you could, you didn't
have the right to modify or redistribute it.<footnote><para>The source
code to Netscape Navigator
<emphasis>was</emphasis> eventually released under an open source
license, in 1998, and became the foundation for the Mozilla web
browser.  See <ulink
url="http://www.mozilla.org/"/>.</para></footnote>  The only thing
you could do was download an executable and run it.  The browsers were
no more free than shrink-wrapped software bought in a store; they
merely had a lower price.</para>
-->
<para>
  産業界がますますフリーソフトウェアに注目するようになると、
  プログラマたちはまた新たな問題に直面することとなりました。
  そのひとつは「フリー」という言葉の意味についてです。
  「フリーソフトウェア」という言葉を聞いて、多くの人がそれを単なる
  「無料のソフトウェア」というように勘違いしてしまいます。
  確かにすべてのフリーソフトウェアは無料ですが、
  <footnote>
    <para>
      フリーソフトウェアを配布する際に代金を徴収することもあるかもしれません。
      しかし、購入した人がそれを他人に無料で再配布するのを禁じることはできないので、
      結局のところ価格は無料同然となります。
    </para>
  </footnote>
  無料のソフトウェアがすべてフリー (自由) であるとは限りません。
  たとえば、1990 年代のブラウザ戦争の際に
  Netscape と Microsoft はともにブラウザを無償でばらまき、
  それによって市場のシェアをかき乱そうとしました。
  このどちらのブラウザも、"自由なソフトウェア" という意味でのフリーではありませんでした。
  そのソースコードを見ることができなかったり、
  あるいはたとえ見ることができたとしてもそれを改造して再配布する権利がなかったりしたのです。
  <footnote>
    <para>
      Netscape Navigator のソースコードは、結局は
      1998 年にオープンソースライセンスのもとで公開されることとなりました。
      これをもとにして作られたのが Mozilla ウェブブラウザです。詳細は
      <ulink url="http://www.mozilla.org/"/> をごらんください。
    </para>
  </footnote>
  できることといえば、実行ファイルをダウンロードして動かすことだけでした。
  これらのブラウザには、店頭で箱売りされているソフトウェア以上の自由などありませんでした。
  単に価格が安かっただけです。
</para>

<!--
<para>This confusion over the word "free" is due entirely to an
unfortunate ambiguity in the English language.  Most other tongues
distinguish low prices from liberty (the distinction between
<emphasis>gratis</emphasis> and <emphasis>libre</emphasis> is
immediately clear to speakers of Romance languages, for example).  But
English's position as the de facto bridge language of the Internet
means that a problem with English is, to some degree, a problem for
everyone.  The misunderstanding around the word "free" was so
prevalent that free software programmers eventually evolved a standard
formula in response: "It's <emphasis>free</emphasis> as in
<emphasis>freedom</emphasis>&mdash;think <emphasis>free
speech</emphasis>, not <emphasis>free beer</emphasis>."  Still, having
to explain it over and over is tiring.  Many programmers felt, with
some justification, that the ambiguous word "free" was hampering the
public's understanding of this software.</para>
-->
<para>
  この「フリー」という言葉が混乱を招く原因は、
  不幸にもこの英単語がいろいろな意味を持ってしまっていることにあります。
  他の大半の言語では、価格が安いことと自由であることは簡単に区別できるでしょう
  (たとえばロマンス諸語を話す人にとっては <emphasis>gratis</emphasis>
  と <emphasis>libre</emphasis> の違いは明確です)。
  しかし、英語がインターネット上での標準言語として使われている現状では、
  英語の問題は、ある意味ではすべての人たちの問題であるともいえます。
  この「フリー」という言葉の意味の履き違えがあまりにも広まってしまったので、
  フリーソフトウェア開発者は公式な声明を出すことにしました。
  "<emphasis>フリー (free)</emphasis> とは、<emphasis>自由 (freedom)</emphasis>
  のことです。つまり、<emphasis>フリースピーチ (言論の自由)</emphasis>
  というときの「フリー」であり、<emphasis>フリービール (無料のビール)</emphasis>
  というときの「フリー」とは違います。"
  しかし、何度も何度もこれを説明しなければならないのは大変です。
  多くのプログラマが、この「フリー」というあいまいな単語のせいで
  自分たちのソフトウェアが正しく理解されないと感じるようになりました。
</para>

<!--
<para>But the problem went deeper than that.  The word "free" carried
with it an inescapable moral connotation: if freedom was an end in
itself, it didn't matter whether free software also happened to
be better, or more profitable for certain businesses in certain
circumstances.  Those were merely pleasant side effects of a motive
that was, at bottom, neither technical nor mercantile, but moral.
Furthermore, the "free as in freedom" position forced a glaring
inconsistency on corporations who wanted to support particular free
programs in one aspect of their business, but continue marketing
proprietary software in others.</para>
-->
<para>
  しかし、問題はもっと深いところにありました。
  「自由」という言葉には道徳的な意味が含まれています。
  自由であることが目的なのならば、フリーソフトウェアがよりよいものになるのか
  特定の状況において特定のビジネスで有益になるのか
  といったことはどうでもよかったのです。
  単にその動機にちょっとしたよい副作用があっただけで、
  基本的には技術的でも商業的でもなく、道徳的なものでした。
  さらに「自由という意味のフリー」という立ち位置は、
  フリーなプログラムのサポートもしたいが別の独占的ソフトウェアの商売も続行したい
  という企業にとってはちょっと不便なものでした。
</para>

<!--
<para>These dilemmas came to a community that was already poised for
an identity crisis.  The programmers who actually
<emphasis>write</emphasis> free software have never been of one mind
about the overall goal, if any, of the free software movement.  Even
to say that opinions run from one extreme to the other would be
misleading, in that it would falsely imply a linear range where there
is instead a multidimensional scattering.  However, two broad
categories of belief can be distinguished, if we are willing to ignore
subtleties for the moment.  One group takes Stallman's view, that the
freedom to share and modify is the most important thing, and that
therefore if you stop talking about freedom, you've left out the core
issue.  Others feel that the software itself is the most important
argument in its favor, and are uncomfortable with proclaiming
proprietary software inherently bad.  Some, but not all, free
software programmers believe that the author (or employer, in the case
of paid work)
<emphasis>should</emphasis> have the right to control the terms of
distribution, and that no moral judgement need be attached to the
choice of particular terms.</para>
-->
<para>
  このジレンマは、すでに自己喪失状態になっていたコミュニティに突き刺さりました。
  実際にフリーソフトウェアを書いているプログラマたちは、
  仮にフリーソフトウェア運動全体としての目標があったとしても
  そのために一致団結することはありませんでした。
  彼らの考えには両極端のものがあったと言ってしまうのもちょっと違います。
  そんな風に言ってしまうと、まるで彼らの違いが単一の基準だけにもとづくものだと勘違いされてしまいます。
  しかし、些細な違いをとりあえず無視するなら、
  彼らの考え方は大きく２種類に分けることができます。
  一方のグループは Stallman の考え方に共鳴する人たちです。
  ソフトウェア自由に共有できて自由に改変できることこそが最も重要で、
  自由について語ることをやめた瞬間に本質的な問題から離れることになります。
  もう一方のグループは、ソフトウェアそのものこそが最も重要であると考えており、
  独占的ソフトウェアを敵視するような考え方は好みません。
  すべての人がそうだというわけではありませんが、プログラマの中には、
  作者 (あるいは雇用主) は再配布権をコントロールできるようにすべきだと考えている人たちもいます。
  再配布権を考える際に、道徳的な視点は不要だということです。
</para>

<!--
<para>For a long time, these differences did not need to be carefully
examined or articulated, but free software's burgeoning success in the
business world made the issue unavoidable.  In 1998, the term
<firstterm>open&nbsp;source</firstterm> was created as an alternative
to "free", by a coalition of programmers who eventually became The
Open Source Initiative (OSI).<footnote><para>OSI's web home is <ulink
url="http://www.opensource.org/"/>.</para></footnote>  The OSI felt
not only that "free software" was potentially confusing, but that the
word "free" was just one symptom of a general problem: that the
movement needed a marketing program to pitch it to the corporate
world, and that talk of morals and the social benefits of sharing
would never fly in corporate boardrooms.  In their own words:</para>
-->
<para>
  長い間、これらの違いをきちんと調べたり
  あえて明確にしたりすることはありませんでした。
  しかしフリーソフトウェアがビジネスの世界に広まっていく中で
  この問題は避けられないものとなってきたのです。
  1998 年に、「フリー」にかわる言葉として
  <firstterm>オープンソース</firstterm> が登場しました。
  これは、後に Open Source Initiative (OSI) となるプログラマの集団が定義したものです。
  <footnote>
    <para>
      OSI のウェブページは <ulink url="http://www.opensource.org/"/> です。
    </para>
  </footnote>
  OSI は、「フリーソフトウェア」という言葉そのものももちろん、
  特に「フリー」という言葉に混乱の原因があるのではと考えました。
  フリーソフトウェア運動をより広めるためには、
  何らかのマーケティング戦略が必要です。しかし、
  道徳だの社会全体の利益だのといった言葉は
  決して重役会議で扱われることはありません。
  OSI はこのように言っています。
</para>

    <blockquote>
<!--
      <para><emphasis>The Open Source Initiative is a marketing
      program for free software. It's a pitch for "free software" on
      solid pragmatic grounds rather than ideological
      tub-thumping. The winning substance has not changed, the losing
      attitude and symbolism have.&nbsp;...</emphasis></para>
-->
      <para><emphasis>
        Open Source Initiative はフリーソフトウェアのマーケティングプログラムです。
        「フリーソフトウェア」を、イデオロギーの小さな枠の中だけでなく
        現実の世の中に広めるために存在します。
        目指すところは変わりませんが、
        負け犬的な考え方や象徴主義はありません。……
      </emphasis></para>

<!--
      <para><emphasis>The case that needs to be made to most techies
      isn't about the concept of open source, but the name. Why not
      call it, as we traditionally have, free software?</emphasis></para>
-->
      <para><emphasis>
        ほとんどの技術者にとって、
        必要なのはオープンソースの概念ではなくその名前についての説明です。
        なぜ旧来の「フリーソフトウェア」ではなく
        「オープンソース」なのでしょうか？
      </emphasis></para>

<!--
      <para><emphasis>One direct reason is that the term "free
      software" is easily misunderstood in ways that lead to
      conflict.&nbsp;...</emphasis></para>
-->
      <para><emphasis>
        直接の理由のひとつは、「フリーソフトウェア」
        という言葉が誤解を受けやすく、混乱の元になるということです。……
      </emphasis></para>

<!--
      <para><emphasis>But the real reason for the re-labeling is a
      marketing one. We're trying to pitch our concept to the
      corporate world now. We have a winning product, but our
      positioning, in the past, has been awful. The term "free
      software" has been misunderstood by business persons, who
      mistake the desire to share with anti-commercialism, or worse,
      theft.</emphasis></para>
-->
      <para><emphasis>
        しかし、名前をつけなおした真の理由は、マーケティング上のものです。
        私たちは、フリーソフトウェアの概念を一般の業界にも広めようとしています。
        私たちはすばらしい製品を持っています。しかし、
        過去においては私たちの立場はひどいものでした。
        「フリーソフトウェア」という言葉はビジネスマンの誤解を招き、
        反商業主義だとか、時には盗人呼ばわりされることもありました。
      </emphasis></para>

<!--
      <para><emphasis>Mainstream corporate CEOs and CTOs will never
      buy "free software." But if we take the very same tradition, the
      same people, and the same free-software licenses and change the
      label to "open source" ? that, they'll buy.</emphasis></para>
-->
      <para><emphasis>
        大手企業の CEO や CTO は、決して「フリーソフトウェア」
        を購入することはありませんでした。
        でも、今までとまったく同じ考えのもとで同じ人たちが作り、
        同じライセンスを適用したものの名前を「オープンソース」
        と変えたらどうなるでしょう？彼らはそれを購入してくれるのです。
      </emphasis></para>

<!--
      <para><emphasis>Some hackers find this hard to believe, but
      that's because they're techies who think in concrete,
      substantial terms and don't understand how important image is
      when you're selling something.</emphasis></para>
-->
      <para><emphasis>
        ハッカーたちにとっては、これは信じがたいことでしょう。
        しかし、何かを売るときにはイメージというものが重要なのです。
      </emphasis></para>

<!--
      <para><emphasis>In marketing, appearance is reality. The
      appearance that we're willing to climb down off the barricades
      and work with the corporate world counts for as much as the
      reality of our behavior, our convictions, and our
      software.</emphasis></para>
-->
      <para><emphasis>
        マーケティングにおいては、見た目が重要となります。
        私たちの実際の振る舞いや信念、そしてソフトウェア自体と同じくらい
        見た目も重視されるのです。
      </emphasis></para>

<!--
      <para>(from <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      and <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis>)</para>
-->
      <para>
        (<emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/faq.php"/></emphasis>
      および <emphasis role="bold"><ulink
      url="http://www.opensource.org/advocacy/case_for_hackers.php#marketing"
      /></emphasis> より引用)</para>
    </blockquote>

<!--
<para>The tips of many icebergs of controversy are visible in that
text.  It refers to "our convictions", but smartly avoids spelling out
exactly what those convictions are.  For some, it might be the
conviction that code developed according to an open process will be
better code; for others, it might be the conviction that all
information should be shared.  There's the use of the word "theft" to
refer (presumably) to illegal copying&mdash;a usage that many object
to, on the grounds that it's not theft if the original possessor still
has the item afterwards.  There's the tantalizing hint that the free
software movement might be mistakenly accused of anti-commercialism,
but it leaves carefully unexamined the question of whether such an
accusation would have any basis in fact.</para>
-->
<para>
  この文には、さまざまなツッコミどころがあります。
  まず、「私たちの信念」とは書かれていますが、
  その信念とはいったい何なのかということは巧妙に省略されています。
  ある人にとっては、よりよいコードを生み出すことが目的となるでしょうし、
  あらゆる情報を共有すべきだという信念の人もいるかもしれません。
  「盗人」という言葉は、(おそらく) 違法コピーのことを指しているのでしょう。
  この言い方には異議がある人も多いことでしょう。
  元の所有者がまだそれを保持しているのだから
  「盗人」はおかしいのではないかと思われるかもしれません。
  フリーソフトウェア運動が反商業主義だと非難される可能性については説明していますが、
  それが何かの事実にもとづくものなのかどうかには触れていません。
</para>

<!--
<para>None of which is to say that the OSI's web site is inconsistent
or misleading.  It's not.  Rather, it is an example of exactly what
the OSI claims had been missing from the free software movement: good
marketing, where "good" means "viable in the business world."  The
Open Source Initiative gave a lot of people exactly what they had been
looking for&mdash;a vocabulary for talking about free software as a
development methodology and business strategy, instead of as a moral
crusade.</para>
-->
<para>
  別に、OSI のウェブサイトが矛盾していて紛らわしいと言っているわけではありません。
  そうじゃないんです。OSI が言っているのは、
  これまでのフリーソフトウェア運動が忘れていたことのひとつ、つまり「よいマーケティング」です。
  「よい」とは、「業界で生き残っていける」という意味です。
  Open Source Initiative は、多くの人々に彼らが待ち望んでいたものを与えました。
  道徳的な十字軍ではありません。
  フリーソフトウェアによる開発手法や経営戦略を語る上で必要な言葉です。
</para>

</sect2>

<!--
<para>The appearance of the Open Source Initiative changed the
landscape of free software.  It formalized a dichotomy that had long
been unnamed, and in doing so forced the movement to acknowledge that
it had internal politics as well as external.  The effect today is
that both sides have had to find common ground, since most projects
include programmers from both camps, as well as participants who don't
fit any clear category.  This doesn't mean people never talk about
moral motivations&mdash;lapses in the traditional "hacker ethic" are
sometimes called out, for example.  But it is rare for a free software
/ open source developer to openly question the basic motivations of
others in a project.  The contribution trumps the contributor.  If
someone writes good code, you don't ask them whether they do it for
moral reasons, or because their employer paid them to, or because
they're building up their resum&eacute;, or whatever.  You evaluate
the contribution on technical grounds, and respond on technical
grounds.  Even explicitly political organizations like the Debian
project, whose goal is to offer a 100% free (that is, "free as in
freedom") computing environment, are fairly relaxed about integrating
with non-free code and cooperating with programmers who don't share
exactly the same goals.</para>
-->
<para>
  Open Source Initiative の登場によって、フリーソフトウェア界の情勢が変化しました。
  長い間うやむやにされてきた両者にきちんとした名前をつけ、
  内部の政治的な問題と同様に外部的な問題としても認識させるようにしました。
  現在への影響は、両者が共通の背景を持つようになったということです。
  多くのプロジェクトは両方の陣営のプログラマを含んでおり、
  またどちらに属するかはっきりしない参加者も同じくらい存在します。
  これは決して、道徳的な話がなくなったというわけではありません。
  たとえば、例の「ハッカー倫理」は今でもたまに話題にのぼります。
  ただ、フリーソフトウェア/オープンソース の開発者が、
  プロジェクトの他のメンバーに対して
  プロジェクトに参加する動機をおおっぴらに尋ねることはほとんどなくなりました。
  貢献した人ではなく後見の内容で評価されるようになったのです。
  だれかがすばらしいコードを書いたとしましょう。
  その人に対して「道徳的な理由でそれを書いたの？」とか
  「金で雇われて書いたの？」「名前を売るため？」といった類のことは聞きません。
  単にそのコードの内容を技術的に評価し、技術的に答えを返すだけのことです。
  Debian プロジェクトは 100% フリー (もちろん「自由」という意味です)
  なコンピュータ環境を作ることを目標としていますが、
  このように政治的な態度を明確に打ち出している組織でさえも、
  フリーでないコードも提供しています。これにより、
  方向性が完全に一致しているわけではないプログラマとも共同作業ができるようにしています。
</para>

</sect1>

<!-- ========================== SECTION =========================== -->
<sect1 id="today">
<!--
<title>The Situation Today</title>
-->
<title>現状</title>

<!--
<para>When running a free software project, you won't need to talk
about such weighty philosophical matters on a daily basis.
Programmers will not insist that everyone else in the project agree
with their views on all things (those who do insist on this quickly
find themselves unable to work in any project).  But you do need to be
aware that the question of "free" versus "open source" exists, partly
to avoid saying things that might be inimical to some of the
participants, and partly because understanding developers' motivations
is the best way&mdash;in some sense, the <emphasis>only</emphasis>
way&mdash;to manage a project.</para>
-->
<para>
  フリーソフトウェアプロジェクトを運営するにあたって、
  このような重い哲学的な内容を日々の作業で意識する必要はありません。
  プログラマも「みんなこの思想に同意すべきだ」なんていうように主張することはありません
  (いきなりそんなことを言い出すプログラマは、
  どんなプロジェクトであってもうまくやっていけないでしょう)。
  しかし「フリー」と「オープンソース」の違いという問題があるということは意識しておきましょう。
  参加者どうしがいざこざを起こす可能性を少なくしたり、
  開発者の動機をよりよく理解したりし、
  プロジェクトをうまく取りまとめられるようになります。
</para>

<!--
<para>Free software is a culture by choice.  To operate successfully
in it, you have to understand why people choose to be in it in the
first place.  Coercive techniques don't work.  If people are unhappy in
one project, they will just wander off to another one.  Free software
is remarkable even among volunteer communities for its lightness of
investment.  Most of the people involved have never actually met the
other participants face-to-face, and simply donate bits of time
whenever they feel like it.  The normal conduits by which humans bond
with each other and form lasting groups are narrowed down to a tiny
channel: the written word, carried over electronic wires.  Because of
this, it can take a long time for a cohesive and dedicated group to
form.  Conversely, it's quite easy for a project to lose a potential
volunteer in the first five minutes of acquaintanceship.  If a project
doesn't make a good first impression, newcomers rarely give it a
second chance.</para>
-->
<para>
  フリーソフトウェアは選択の文化です。
  成功させるには、まず第一にみんながなぜそれを選択したのかを理解する必要があります。
  高飛車な態度ではうまくいきません。
  そのプロジェクトの居心地が悪くなると、すぐに他のプロジェクトに移動することでしょう。
  フリーソフトウェアは、ボランティア集団の中でもその結びつきの軽さが群を抜いています。
  ほとんどの参加者は他のメンバーと顔をつき合わせたことがなく、
  ちょっとした空き時間をつかってプロジェクトに協力しています。
  人と人を結びつけるもの、プロジェクトを続けさせる要員となるものは、
  電線を通じて運ばれる書き言葉だけです。
  そのため、しっかりまとまった熱意のあるグループを育てるには長い時間がかかります。
  逆に、プロジェクトに協力してくれそうな人たちを
  そのプロジェクトから離れさせるには、５分もあれば十分です。
  そのプロジェクトの第一印象が悪ければ、
  初めて訪れた人は二度とそこに戻ってくることはないでしょう。
</para>

<!--
<para>The transience, or rather the <emphasis>potential</emphasis>
transience, of relationships is perhaps the single most daunting task
facing a new project.  What will persuade all these people to stick
together long enough to produce something useful?  The answer to that
question is complex enough to occupy the rest of this book, but if it
had to be expressed in one sentence, it would be this:</para>
-->
<para>
  参加者同士の結びつきのはかなさ、あるいは潜在的なはかなさが、
  新しいプロジェクトに立ち向かう際の唯一にして最大の難関となるでしょう。
  彼らを納得させ、みんなで何かを作り上げようとさせるにはどうしたらいいでしょう？
  この質問への答えは複雑になりすぎるので本書では扱いきれません。
  が、一言で言うならこのようになります。
</para>

    <blockquote>
<!--
      <para><emphasis>People should feel that their connection to a
      project, and influence over it, is directly proportional to
      their contributions.</emphasis></para> 
-->
      <para><emphasis>
        そのプロジェクトとのつながりやプロジェクトに及ぼす影響は、
        あなたがそのプロジェクトにどれだけのことをしたかに正比例することを実感させよう。
      </emphasis></para> 
    </blockquote>

<!--
<para>No class of developers, or potential developers, should ever
feel discounted or discriminated against for non-technical reasons.
Clearly, projects with corporate sponsorship and/or salaried
developers need to be especially careful in this regard, as <xref
linkend="money"/> discusses in detail.  Of course, this doesn't
mean that if there's no corporate sponsorship then you have nothing to
worry about.  Money is merely one of many factors that can affect the
success of a project.  There are also questions of what language to
choose, what license, what development process, precisely what kind of
infrastructure to set up, how to publicize the project's inception
effectively, and much more.  Starting a project out on the right foot
is the topic of <link linkend="getting-started">the next
chapter</link>.</para>
-->
<para>
  開発者や開発者予備軍が、
  技術的な理由以外で軽視されているとか差別されているとか感じているようではいけません。
  特に、企業の支援を受けているプロジェクトや金をもらって開発している人がいるプロジェクトでは
  これに注意が必要です。詳細は <xref linkend="money"/> で改めて説明します。
  もちろんこれは、企業の支援を受けていなければ何も心配する必要がないということではありません。
  カネの問題は、プロジェクトが失敗する要因のうちのほんのひとつでしかありません。
  どんな開発原語を選択するか、どんなライセンスを選択するか、
  開発手順はどうするか、どんなツールを使用するか、
  あるいはプロジェクトをどのように宣伝するかなど、
  さまざまな要員がほかにも考えられます。
  では、実際にプロジェクトを開始するにはどうしたらいいのか。
  それを <link linkend="getting-started">次の章</link> で取り上げます。
</para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
