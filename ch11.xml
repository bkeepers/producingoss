<chapter id="pfs-ch-11">

<title>Licenses, Copyrights, and Patents <!-- [ 7-15 pp ] --></title>

<simplesect>

<para><remark>say why it matters</remark></para>

<para><remark>early on, explode the "this is open source but not free"
misusage</remark></para>

<para><remark>Note: the material excised from <xref
linkend="pfs-license-quickstart"/> in r147 should be incorporated into this
chapter.  Andy had some comments on that material, see his marks on
pages 15, 16, 17 from back when the material lived in Chapter 2.
Also, point to Andrew St. Laurent's licensing book at <ulink
url="http://www.oreilly.com/catalog/osfreesoft/"/>.</remark></para>

<screen>
Some rough categories:
   * Viral copyleft:
       - GPL

   * Trademark/reputation-protecting licenses:
       - Knuth's TeX license
          (see http://lists.debian.org/debian-legal/2002/08/msg00054.html)
       - Perl's Artistic License

   * Do whatever you want, maybe give us credit:
       - BSD
       - Apache
       - X 
       - what else?

   * Really low overhead license:
       - do anything you want, but this is still a copyrighted work

   * And finally, public domain of course.

Links:

   Make Your Open Source Software GPL-Compatible.  Or Else.
       by David A. Wheeler
   http://www.dwheeler.com/essays/gpl-compatible.html

   Related read:
   http://daniel.haxx.se/transition.html

   http://www.opensource.org/licenses/
      Has everything for software!

   http://www.apache.org/licenses/
      Has a good link about GPL compatibility.

   http://www.gnu.org/licenses/licenses.html
      Has GNU license for software and docs.

   http://creativecommons.org/license/
      See list of licenses on the left.

   Humor... sort of:
   http://www.panix.com/~kingdon/licenses.html

   

</screen>

<screen>
------------------------------------
This text was excised from Chapter 2, it might be better used here:

<para>Free software licenses fall into three basic categories:</para>

<orderedlist>
  <listitem>
  <para>Those designed to ensure the software can only be used in
        other free programs.</para>
  </listitem>
  <listitem>
  <para>Those designed to protect the credit and reputation of the
        author(s) of the software.</para>
  </listitem>
  <listitem>
  <para>Those designed to allow as wide and unlimited distribution
        of the software as possible, while still retaining copyright
        for the original authors.</para>
  </listitem>
</orderedlist>

<para>Note that some licenses combine functions (1) and (2), but they
seem to be rarely used.</para>

<para>The most popular type (1) license is the GNU General Public
License, or GPL (see <ulink
url="http://www.gnu.org/licenses/licenses.html#GPL"/>).  The GPL's
most controversial attribute is that any work which uses GPL'd code
must also be released under the GPL.  If all the free software in the
world were under the GPL, this would merely mean that GPL'd code could
be shared among free programs, but not used in proprietary
programs.</para>

<para>However, as there are other free licenses besides the GPL, the
GPL can sometimes prevent (or at least discourage) code-swapping even
between two free programs.  From the point of view of the Free
Software Foundation, these second-order consequences are desirable.
The GPL not only keeps your software free, but effectively makes your
software an agent in pushing <emphasis>other</emphasis> software to
enforce freedom as well.</para>

<para>Whether it's the right license for your project depends on your
goals.  If you want absolutely the widest possible use of the
software, and don't mind its being incorporated into proprietary
programs, the GPL is not a good choice.  If you mainly intend the
project ... </para>

<para><remark>The GPL cannot be categorized as innately business-friendly or
business-unfriendly.</remark></para>

<para><remark>Depending on your goals, and how you want your program to be
used, this may or may not be what you want.</remark></para>

<para><remark>Perhaps surprisingly, the GPL can make better business sense
than some other licenses, because it prevents competitors from using
the software in a proprietary value-add.</remark></para>

<para><remark>(Competitors often won't mind credit clauses.)</remark></para>

<para><remark>In general, using the GPL may put off some developers; whereas a
non-GPL free license will not put off any.  Nevertheless, I sometimes
use the GPL for personal programs</remark></para>

------------------------------------
</screen>


</simplesect>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-legal">
<title> basic legal primer </title>

<para> the difference between copyright, public domain, and
distribution rights. </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-license-comparison">
<title> Licenses Compared </title>

<para> The different DFSG-compliant licenses, what they mean, their
implications for derivative works (both free and proprietary).
</para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-avoiding-license-wars">
<title> Avoiding licensing holy wars. </title>

<para> how? </para>

</sect1>


<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-license-compatibility">
<title> License Compatibility Issues </title>

<para> License interactions.  (Example: the temporary drifting apart
of PHP and MySQL due to PHP's fear that licensing differences would
prohibit them from distributing MySQL with their code.  We also have
some examples of this problem in Subversion/Apache/BerkeleyDB-land.)
</para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-ownership">
<title>Ownership</title>

<para><remark>Briefly discuss the thorny issue of copyright
assignment.  It may be important, if the code ever needs to be
defended legally against a copyright infringement or other suit.
Copyright assignment can actually protect the contributors, by making
them not be targets.</remark></para>

<para><remark>(Talk about seniority and its relationship to having
started a project vs not having started it.  CVS/Cyclic is a good
example here.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-dual-licensing">
<title>Dual Licensing Schemes</title>

<para><remark>(Use the Zack Urlocker interview material
here.)</remark></para>

<para>These are mostly used for librarized code, not standalone
apps.  sleepycat.org is an example using a bsd-style license, sort
of.  Point out the tricky issues w/ contributed code.</para>

<para>See www.mysql.com / dev.mysql.com / www.innodb.com for an
example of a dual-licensing strategy where the free half of the
license is GPL.  How do they handle contributed code?  I don't
know.  Point out how the GPL is the usual choice for dual-licensing
strategies, because it natively enforces what the licensor wants to
enforce anyway.</para>

<para><remark>See
http://www.mysql.com/company/legal/licensing/</remark></para>

<para><remark>(It may be that most of what needs to be said about
dual-licensing will be said in Chapter 5.  Or if not, then Chapter 5
needs to refer to here for some of the business/legal implications.
Either way, make sure there are cross-references.)</remark></para>

<para><remark>(Re dual-licensing: Dual-licensing situations get
started for a number of reasons.  The code may have started out free,
and a permanent proprietary fork may simply not be in the cards (too
much negative publicity, too much momentum in the existing dev
community, whatever).  But also, let's not forget the "Where do you
want to spend your time?" factor.  Sometimes, people start these
companies because they just plain like doing open source development,
and don't want to give it up.  Discuss how all this affects ownership
both legal and psychological.)</remark></para>

</sect1>

<!-- ======================== SECTION ============================== -->
<sect1 id="pfs-patents">
<title>Patents</title>

<para><remark>Patents are a lightning rod issue.  If you collect them,
make it clear that it's for defensive purposes, and never enforce them
on open source projects.  (This is not only the right thing to do, but
it's also good open source public relations.)  Don't go off the deep
end ranting about the coming patent war (or put it in a footnote or an
appendix if you do), but point out that opposition to software patents
is almost universal among open source developers.  Talk about the
boomerang licenses.</remark></para>

</sect1>

</chapter>

<!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->

