<appendix id="vc-systems">
<title>Sistemas de Controle de Versão Livres</title>

<simplesect>

<para>Estes são todos os sistemas de controle de versão livres dos quais
tinha conhecimento até meados do ano de 2007.  O único que uso regularmente
é o Subversion.  Exceto pelo Subversion e CVS, tenho pouca ou nenhuma
experiência com a maioria desses sistemas; as informações colocadas aqui
foram retiradas dos seus respectivos sites.  Veja também
<ulink
url="http://en.wikipedia.org/wiki/List_of_revision_control_software"/>.
</para>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvs">
<title><emphasis role="bold">CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/cvs/"/></title>

<para>O CVS esteve por toda parte, e muitos desenvolvedores se familiarizaram
com ele.  Em seu tempo ele foi revolucionário: foi o primeiro sistema de
controle de versão livre com acesso em rede de área ampla aos desenvolvedores
(até onde eu sei), e o primeiro a oferecer checkouts somente-leitura a usuários
anônimos, o que possibilitou a novos desenvolvedores uma maneira fácil de se
envolverem nos projetos.  O CVS somente controla versões de arquivos, não de
diretórios; ele oferece branching (ramificação), tagging (marcação), e boa
performance ao lado cliente, mas não trata muito bem de arquivos grandes ou de
arquivos binários.  Ele também não suporta atomics commits
(commits atômicos).<emphasis>[Termo de Responsabilidade: Eu estive ativo no
desenvolvimento do CVS por aproximadamente cinco anos, antes de ajudar a começar
o projeto de substituição pelo Subversion.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-subversion">
<title><emphasis role="bold">Subversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://subversion.tigris.org/"/></title>

<para>O Subversion foi escrito em primeiro lugar para ser um substituto para o
CVS&mdash;isto é, abordar o controle de versão aproximadamente da mesma maneira
que o CVS faz, mas sem os problemas e omissões de recursos que muito
frequentemente incomodam aos usuários do mesmo.  Um dos objetivos do Subversion
é para que pessoas acostumadas ao CVS achem a mudança para ele relativamente
suave.  Não há espaço aqui para entrar em detalhes sobre os recursos do
Subversion; consulte seu web site para maiores informações.<emphasis>[Termo de
Responsabilidade: Estou envolvido no desenvolvimento do Subversion, e é o único
desses sistemas que eu uso de forma regular.]</emphasis></para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-svk">
<title><emphasis role="bold">SVK</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://svk.elixus.org/"/></title>

<para>Embora seja construído com base no Subversion, o SVK provavelmente
se assemelha a alguns dos sistemas descentralizados abaixo do que ao próprio
Subversion.  O SVK suporta distributed development (desenvolvimento
distribuído), local commits (entregas locais), change merging (literalmente,
mudança de concentração) sofisticado, e a habilidade de espelhar (mirror)
árvores de diretórios originadas de outros sistemas de controle,
não-SVK.  Consulte seu web site para maiores informações.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-mercurial">
<title><emphasis role="bold">Mercurial</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.selenic.com/mercurial/"/></title>

<para>O Mercurial é um sistema de controle de versão distribuído que oferece,
entre outras coisas, "'indexação cruzada' completa de arquivos e
'conjuntos de alterações' (changesets); Protocolos HTTP e sincronização SSH
eficientes em respeito ao uso de 'largura de banda' e CPU; concentração
(merging) arbitrária entre os ramos de desenvolvedores; interface web
independente integrada; [portabilidade para] UNIX, MacOS X, e Windows" e mais
(a lista de recursos anterior foi parafraseada do web site do Mercurial).</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-git">
<title><emphasis role="bold">Git</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://git.or.cz/"/></title>

<para>O Git é um projeto iniciado por Linus Torvalds para administrar a árvore
de código do kernel do Linux.  Inicialmente o Git era bastante restrito às
necessidades de desenvolvimento do kernel, mas acabou se expandindo além e hoje
ele é usado para outros tipos de projetos.  Seu web site diz que ele é
"...projetado para tratar de projetos extremamente grandes com velocidade e
eficiência; ele é usado principalmente por vários projetos de código aberto
(Open Source), mais notavelmente pelo kernel do Linux.  O Git se enquadra na
categoria de ferramenta distribuída de gerenciamento de código fonte,
semelhante ao, por exemplo, GNU Arch ou Monotone (ou ao BitKeeper no mundo
proprietário).  Todo diretório de trabalho do Git é completo em si (sem falta
de partes), tendo inteira capacidade de revisão por rastreamento, sem depender
de acesso à rede ou a um servidor central."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-bazaar">
<title><emphasis role="bold">Bazaar</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://bazaar.canonical.com/"/></title>

<para>O Bazaar (ou bzr) é um sistema de controle de versão distribuído que
se concentra na facilidade de uso e em ter um modelo de dados flexível.  Ele é
um projeto GNU oficial, e é o sistema de controle de versão nativo para o
site de hospedagem para projetos de softwares livres, Launchpad.net.  O Bazaar
faz um controle distribuído de versão completo: todo trabalho toma lugar em
ramos (branches), e todo desenvolvedor, tipicamente, tem uma cópia completa do
histórico das ramificações.  Ramos podem ser mesclados em um outro de uma forma
descentralizada, mas o Bazaar pode também ser configurado para trabalhar de uma
forma centralizada.  O Bazaar teve início com o código baseado no GNU Arch,
mas foi reescrito a partir do zero e agora não possui relação direta com
ele.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-darcs">
<title><emphasis role="bold">Darcs</emphasis>&nbsp;&mdash;&nbsp;<ulink
url="http://darcs.net"/></title>

<para>"David's Advanced Revision Control System ainda é um outro substituto
para o CVS. Ele é escrito em Haskell, e tem sido usado no Linux, MacOS X,
FreeBSD, OpenBSD e Microsoft Windows. O Darcs inclui um script cgi, o qual pode
ser usado para se visualizar o conteúdo do seu repositório."</para>

</sect2> 

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arch">
<title><emphasis role="bold">Arch</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.gnu.org/software/gnu-arch/"/></title>

<para>O GNU Arch suporta ambos desenvolvimentos distribuído e
centralizado.  Os desenvolvedores enviam suas modificações para um "arquivo",
o qual pode ser local, e as mudanças podem ser "empurradas" e "puxadas" para
outros arquivos como os gestores desses arquivos bem entenderem.  Como tal
metodologia implica, o Arch tem uma mesclagem mais sofisticada que o
CVS.  O Arch também nos permite a facilmente fazer ramificações de arquivos
para cada um que não tenha acesso de envio (commit access).  Este é apenas um
breve resumo; consulte as páginas da web do Arch para maiores
informações.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-monotone">
<title><emphasis role="bold">monotone</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.venge.net/monotone/"/></title>

<para>"O monotone é um sistema de controle de versão livre.  Ele
fornece um simples, armazenamento de versão transacional de arquivo único, com
completa operação off-line e um protocolo de sincronização ponto-a-ponto
eficiente.  Ele compreende mesclagem por histórico; possui ramificações leves,
revisão de código integrada e avaliação por terceiros.  Ele usa nomeação de
versão por criptografia e certificados RSA de lado cliente
(client-side).  Possui bom suporte a internacionalização, não possui dependência
externa, funciona no Linux, Solaris, OSX, and Windows, e está licenciado sob
GNU GPL."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-codeville">
<title><emphasis role="bold">Codeville</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://codeville.org/"/></title>

<para>"Por que ainda mais um sistema de controle de versão? Todos os outros
sistemas de controle de versão exigem que você mantenha uma varredura cuidadosa
das relações entre os ramos (branches), de modo a não ter que mesclar várias
vezes os mesmos conflitos.  O Codeville é muito mais anárquico.  Ele permite a
você atualizar ou enviar, de ou para, qualquer repositório a qualquer hora com
nenhuma re-mesclagem desnecessária."</para>

<para>"O Codeville funciona através da criação de um identificador para cada
mudança que é feita, e relembrando a lista de todas as mudanças que tem sido
aplicadas para cada arquivo e a última mudança que modificou cada linha em cada
arquivo.  Quando há algum conflito, ele verifica se um dos dois lados
já foi aplicado ao outro; se já foi aplicado, ele faz com que o outro lado
ganhe automaticamente.  Quando há um conflito real, não automático,  de versões
mescláveis, o Codeville  se comporta quase da mesma maneira que o CVS."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-vesta">
<title><emphasis role="bold">Vesta</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.vestasys.org/"/></title>

<para>"O Vesta é um sistema SCM (Software Configuration Manager -
um gerenciador de configuração de software) portável orientado para apoiar o
desenvolvimento de sistemas de software de quase qualquer tamanho, desde
relativamente pequenos (abaixo de 10.000 linhas de código) até os muito
grandes (10.000.000 de linhas de código)."</para>

<para>"O Vesta é um sistema maduro.  Ele é o resultado de aproximadamente
10 anos de pesquisas e desenvolvimento no Compaq/Digital Systems Research
Center (Centro de Pesquisas de Sistemas Compaq/Digital), e foi usado em produção
pelo Compaq's Alpha microprocessor group
(grupo do microprocessador Alpha do Compaq) por aproximadamente dois anos e
meio.  O grupo Alpha teve cerca de 150 desenvolvedores ativos em dois locais que
estavam a milhares de kilômetros de distância um do outro, nas costas leste e
oeste dos Estados Unidos.  O grupo usava o Vesta para gerenciar compilações com
tanto quanto 130 MB de fonte de dados, cada qual produzindo 1,5 GB de dados
derivados.  As compilações feitas no leste em um dia normal produziram cerca de
10-15 GB de dados derivados, tudo gerenciado pelo Vesta. Embora o Vesta foi
projetado com a idéia de gerenciar desenvolvimentos de software, o grupo Alpha
demonstrou a flexibilidade do sistema usando-o para desenvolvimento de hardware,
registrando seus arquivos de linguagem de descrição de hardware
no código fonte do Vesta para habilidade de controle e construção de simuladores
e outros objetos derivados com o construtor do Vesta.  Os membros do primitivo
grupo Alpha, agora uma parte da Intel, continuam usando o Vesta hoje em um novo
projeto de microprocessador."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-aegis">
<title><emphasis role="bold">Aegis</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://aegis.sourceforge.net/"/></title>

<para>"Aegis is a transaction-based software configuration management
system.  It provides a framework within which a team of developers may
work on many changes to a program independently, and Aegis coordinates
integrating these changes back into the master source of the program,
with as little disruption as possible."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-cvsnt">
<title><emphasis role="bold">CVSNT</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://cvsnt.org/"/></title>

<para>"CVSNT is an advanced multiplatform version control system.
Compatible with the industry standard CVS protocol it now supports
many more features. ... CVSNT is Open Source, Free software licensed
under the GNU General Public License."  Its feature list includes
authentication via all standard CVS protocols, plus Windows specific
SSPI and Active Directory; secure transport support, via sserver or
encrypted SSPI; cross platform (runs in Windows or Unix environments);
NT version is fully integrated with Win32 system; MergePoint
processing means no more tagging to merge; under active
development.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-meta-cvs">
<title><emphasis role="bold">META-CVS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://users.footprints.net/~kaz/mcvs.html"/></title>

<para>"Meta-CVS is a version control system built around CVS.
Although it retains most of the features of CVS, including all of the
networking support, it is more capable than CVS, and easier to use."
The features listed on META-CVS's web site include: directory
structure versioning, improved file type handling, simpler and more
user-friendly branching and merging, support for symbolic links,
property lists attached to versioned data, improved third-party data
importing, and easy upgrading from stock CVS.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-opencm">
<title><emphasis role="bold">OpenCM</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.opencm.org/"/></title>

<para>"OpenCM is designed as a secure, high-integrity replacement for
CVS.  A list of the key features can be found on the features page.
While not as 'feature rich' as CVS, it supports some useful things
that CVS lacks.  Briefly, OpenCM provides first-class support for
renames and configuration, cryptographic authentication and access
control, and first-class branches."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-prcs">
<title><emphasis role="bold">PRCS</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://prcs.sourceforge.net/"/></title>

<para>"PRCS, the Project Revision Control System, is the front end to
a set of tools that (like CVS) provide a way to deal with sets of
files and directories as an entity, preserving coherent versions of
the entire set. ... Its purpose is similar to that of SCCS, RCS, and
CVS, but (according to its authors, at least), it is much simpler than
any of those systems."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-arx">
<title><emphasis role="bold">ArX</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.nongnu.org/arx/"/></title>

<para>ArX is a distributed version control system offering branching
and merging features, cryptographic data integrity verification, and
the ability to publish archives easily on any HTTP server.</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-sourcejammer">
<title><emphasis role="bold">SourceJammer</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://sourcejammer.org/"/></title>

<para>"SourceJammer is a source control and versioning system written
in Java.  It consists of a server-side component that maintains the
files and version history, and handles check-in, check-out, etc. and
other commands; and a client-side component that makes requests of the
server and manages the files on the client-side file system."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-fastcst">
<title><emphasis role="bold">FastCST</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.zedshaw.com/projects/fastcst/index.html"/></title>

<para>"A 'modern' system that uses changesets over file revisions and
distributed operation rather than centralized control.  As long as you
have an e-mail account you can use FastCST.  For larger distribution
you only need an FTP server and/or an HTTP server or use the built in
'serve' command to serve your stuff up directly.  All changesets are
universally unique and have tons of meta-data so you can reject
anything you don't [want] before you try it.  Merging is done by comparing a
merged changeset against the current directory contents, rather than
trying to merge it with another changeset."</para>

</sect2>

<!-- ======================== subsection ============================== -->
<sect2 id="vc-superversion">
<title><emphasis role="bold">Superversion</emphasis>&nbsp;&mdash;&nbsp;<ulink
        url="http://www.superversion.org/"/></title>

<para>"Superversion is a multi-user distributed version control system
based on change sets. It aims to be an industrial-strength, open
source alternative to commercial solutions that is equally easy to use
(or even easier) and similarly powerful. In fact, intuitive and
efficient usability has been one of the top priorities in
Superversion's development from the very beginning."</para>

</sect2>

</simplesect>

</appendix>

<!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
