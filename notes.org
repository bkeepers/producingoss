     Oh Most High and Majestic Emacs, please be in -*- org -*- mode!

This file contains random notes I came up with while working on the
2nd edition.  Actual todo items for the second edition are in todo.org.
Many of the items in both files may not make sense to people other than
the book's author.

I'm not bothering with a bug tracker because I'm not really running
the book like an open source project.  These org files *are* the
tracker -- while I'm writing the book, Org Mode is a lot easier to
work with than a bug tracker would be.  Once I'm not working on the
book on a regular basis, I might switch to a real bug tracker.

** Discuss the issue of when the "users" are by definition developers.
   (e.g., all those JS projects on GitHub).  Being a developer in
   general is not the same as being a developer on the project -- all
   those people using JQuery are not necessarily contributing to JQuery
   itself.  From JQuery's point of view, they're users, not developers.
   (Do this in Chapter 3?  Or somewhere else?)

** http://www.mikealrogers.com/posts/generation-gap.html
   On GitHub and the "amateurization" of open source projects.

** Arches project as example of why attention bandwidth / resources
   can mean heads-down initial development makes sense sometimes.
   See Koen van Daele's mail about this ("Re: Arches") Aug/Sep 2012.

** OpenHatch / peers@ list
** Consortiums (OIC Weave, that first responder app, etc)
** Look on foundations list for some recent discussions, e.g.,
   "advice on branding and open source communities"

** OSS and gov't
    - the DNC thing with Paul Smith: interesting case study
    - check civcoms wiki of course
    - COTS, FARS, etc
    - Ask Simon about EU
    - What about the rest of the world?  May have to punt :-(
    - Most of what govts are concerned about are not really open source
      vs proprietary issues.  Procurement, vendor availability, quality
      of the system, transition costs, need for retraining (OpenHMIS),
      long-term maintenance costs, etc... Take open source and
      licensing issues off the table, since these buyers don't usually
      negotiate about licensing anyway.  Address functionality and
      support services.  Open source should be about the seventh bullet
      point down (credit Gunnar Hellekson).  But do watch out for
      misconceptions about the availablity of support, quality of UI or
      of admin UI or of back-end implementation.  Advantage of open
      source is data repurposability -- it can better meet reporting
      needs, data quality needs, will tend to use standardized formats,
      etc.
** "How to Prepare to Do Open Source at Your Company"
   http://dreamsongs.com/IHE/IHE-62.html

** Look at this Dr. Dobbs piece.
   http://www.drdobbs.com/jvm/creating-an-open-source-project/240145389

** http://gabriellacoleman.org/Coleman-Coding-Freedom.pdf
** "How Do Open Source Communities Govern Themselves?" by Randy Fay, 2012-03-05
   http://randyfay.com/node/120
** Open Source Software Licenses versus Business Models (Stephen Walli)
   http://www.networkworld.com/community/node/82215
   Also this by Stephen:
   http://www.outercurve.org/Blogs/EntryId/77/Which-Open-Source-Software-License-Should-I-Use

** Look over mil-oss posts in general
*** "Resources for info on why *companies* should *produce* OSS?"
    Thread with David Wheeler and Camille, among others.  Useful section for the book?

** http://www.bitsandbuzz.com/article/which-open-source-license/
** Journalists (e.g., using NYC financial transparency site) need their
   questions and bug reports embargoed.  In general, there may be a
   need for bug curation, editing assistance, delay, consolidation,
   etc.  This is just one example, and it's not only journalists.
** Bastien suggests:
   PS: I received your email while reading this blog post by Samuel
   Klein (sj) about Wikipedia' Article Feedback Tool.  I thought you
   might enjoy this as a case-study -- but not sure it is relevant
   to your topic.
   http://blogs.law.harvard.edu/sj/2013/02/02/edit-by-edit-an-article-feedback-tool-gets-firmly-tested/

** Don't have a "Community" tab
   E.g., http://gitlab.org/

** Evidence that "commit access" means core dev group, not commit per se.
*** https://speakerdeck.com/conroy/building-open-source-communities
    Note it talks about github + pull requests *and* about commit access.
    Kind of proves the point that commit access is a social concept,
    not a technical one.

*** The Pull Request Hack
    http://felixge.de/2013/03/11/the-pull-request-hack.html  
    Note it uses the phrase "commit access" hah.
*** Open Source for Government, by Ben Balter
    http://ben.balter.com/open-source-for-government/
    Also has a "Committer Status" section, again showing that
    "committer" means something broader than what the Git notion of the
    verb "commit" would imply.

    (Btw, note that r2891 added a link to Ben Balter's "Why Open Source?"
    post and recommended his other writings too.)
** Bug growth analogy to national debt
** Measuring how long it takes to respond to a PR
   http://quickpeople.wordpress.com/2013/04/14/a-plea-for-better-open-source-etiquette/
   See comment from Jorge of Ubuntu, for example, referring to:
   http://reqorts.qa.ubuntu.com/reports/sponsoring/index.html

** Stephen Walli's excellent post (16 July 2013):
   "Patterns and Practices for Open Source Software Success"
   http://stephesblog.blogs.com/my_weblog/2013/07/patterns-and-practices-for-open-source-software-success.html

** SourceForge: "How far the mighty have fallen"
   http://www.gluster.org/2013/08/how-far-the-once-mighty-sourceforge-has-fallen/

   ([2016-02-06] The sale of SourceForge in early 2016 might make this obsolete.)
** For "Open Source and the Organization" chapter
   Identity issues: corporate hats, GNOME practice of using personal
   addresses.

** David Wheeler on SourceForge/Allura and canned hosting
   From: "Wheeler, David A"
   Subject: RE: [mil-oss] Binary hosting alternatives with GitHub
   To: mil-oss
   Date: Mon, 29 Jul 2013 11:29:45 -0400
   
   SourceForge has nice suite of collaboration tools, and continues to
   host binaries.  I like their newer system, Allura, in part because it
   is *itself* open source software.
   
   Also, there are government agreements with SourceForge that might
   avoid help some of the challenges when using other sites.

** Bryan Cantrill, "Corporate Open Source Anti-Patterns"
   http://joyeur.com/2012/08/01/lessons-from-an-open-source-veteran/
   http://www.slideshare.net/bcantrill/corporate-open-source-antipatterns

** Don't throw away history! (Ben Balter's CMSgov/healthcare.gov issue)
   https://github.com/CMSgov/healthcare.gov/issues/12 

** Overloaded maintainer pattern.  Solutions: delegate, monetize.
   Capistrano maintainer Lee Hambley gets frustrated with workload.
   https://groups.google.com/forum/#!topic/capistrano/nmMaqWR1z84


   (See the "Dustin Mitchell's comments" entry in todo.org_archive,
   which was partly a request to cover this more in the book.)
** Including third-party dependencies with your distribution.
   Discuss the options.

** Announce list subscription care
   Note the cultural point that auto-subscription is not okay in open
   source projects.  Everyone should explicitly sign up for every
   mailing list they become a member of.  It doesn't mean they have to
   do so through a list subscription interface, it just means that
   however they did it, it was opt-in not opt-out.  No subscribing
   people just because they happened to correspond with you.

** "Measure your open source community's age to keep it healthy"
   Your data is telling you what you need to know about turnover and age
   by Jesus M. Gonzalez-Barahona | @jgbarah | October 16, 2014 
   http://radar.oreilly.com/2014/10/measure-your-open-source-communitys-age-to-keep-it-healthy.html
